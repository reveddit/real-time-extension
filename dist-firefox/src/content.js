!function(t){var n={};function e(r){if(n[r])return n[r].exports;var o=n[r]={i:r,l:!1,exports:{}};return t[r].call(o.exports,o,o.exports,e),o.l=!0,o.exports}e.m=t,e.c=n,e.d=function(t,n,r){e.o(t,n)||Object.defineProperty(t,n,{enumerable:!0,get:r})},e.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},e.t=function(t,n){if(1&n&&(t=e(t)),8&n)return t;if(4&n&&"object"==typeof t&&t&&t.__esModule)return t;var r=Object.create(null);if(e.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:t}),2&n&&"string"!=typeof t)for(var o in t)e.d(r,o,function(n){return t[n]}.bind(null,o));return r},e.n=function(t){var n=t&&t.__esModule?function(){return t.default}:function(){return t};return e.d(n,"a",n),n},e.o=function(t,n){return Object.prototype.hasOwnProperty.call(t,n)},e.p="",e(e.s=318)}([function(t,n,e){var r=e(4),o=e(10),i=e(17),u=e(14),c=e(20),a=function(t,n,e){var s,f,l,h,g=t&a.F,d=t&a.G,p=t&a.S,v=t&a.P,m=t&a.B,y=d?r:p?r[n]||(r[n]={}):(r[n]||{}).prototype,b=d?o:o[n]||(o[n]={}),A=b.prototype||(b.prototype={});for(s in d&&(e=n),e)l=((f=!g&&y&&void 0!==y[s])?y:e)[s],h=m&&f?c(l,r):v&&"function"==typeof l?c(Function.call,l):l,y&&u(y,s,l,t&a.U),b[s]!=l&&i(b,s,h),v&&A[s]!=l&&(A[s]=l)};r.core=o,a.F=1,a.G=2,a.S=4,a.P=8,a.B=16,a.W=32,a.U=64,a.R=128,t.exports=a},function(t,n,e){"use strict";e.r(n),e.d(n,"INTERVAL_DEFAULT",function(){return s}),e.d(n,"MAX_SYNC_STORAGE_ITEMS_PER_OBJECT",function(){return f}),e.d(n,"MAX_SYNC_STORAGE_CHANGES",function(){return l}),e.d(n,"MAX_OTHER_SUBSCRIPTIONS",function(){return h}),e.d(n,"REMOVED",function(){return g}),e.d(n,"APPROVED",function(){return d}),e.d(n,"LOCKED",function(){return p}),e.d(n,"UNLOCKED",function(){return v}),e.d(n,"EDITED",function(){return m}),e.d(n,"DELETED",function(){return y}),e.d(n,"getObjectNamesForThing",function(){return w}),e.d(n,"markEverythingAsSeen",function(){return S}),e.d(n,"markThingAsSeen",function(){return O}),e.d(n,"setStorageUpdateBadge",function(){return E}),e.d(n,"markIDsAsSeenIfSubscribed",function(){return k}),e.d(n,"subscribeId",function(){return P}),e.d(n,"unsubscribeId",function(){return I}),e.d(n,"getSubscribedIds",function(){return T}),e.d(n,"subscribeUser",function(){return M}),e.d(n,"unsubscribeUser",function(){return F}),e.d(n,"initStorage",function(){return N}),e.d(n,"getSubscribedUsers_withSeenAndUnseenIDs",function(){return R}),e.d(n,"getSubscribedUsers_withUnseenIDs",function(){return L}),e.d(n,"getUnseenIDs_thing",function(){return C}),e.d(n,"getIDs_thing",function(){return D}),e.d(n,"getLocalStorageItems",function(){return U}),e.d(n,"saveLocalStorageItems",function(){return $}),e.d(n,"addLocalStorageItems",function(){return B}),e.d(n,"getItemFromLocalStorage",function(){return V}),e.d(n,"getAllChanges",function(){return W}),e.d(n,"getOptions",function(){return q}),e.d(n,"saveOptions",function(){return G});var r=e(2),o=e(3),i=e.n(o);function u(t,n){var e=Object.keys(t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);n&&(r=r.filter(function(n){return Object.getOwnPropertyDescriptor(t,n).enumerable})),e.push.apply(e,r)}return e}function c(t){for(var n=1;n<arguments.length;n++){var e=null!=arguments[n]?arguments[n]:{};n%2?u(e,!0).forEach(function(n){a(t,n,e[n])}):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(e)):u(e).forEach(function(n){Object.defineProperty(t,n,Object.getOwnPropertyDescriptor(e,n))})}return t}function a(t,n,e){return n in t?Object.defineProperty(t,n,{value:e,enumerable:!0,configurable:!0,writable:!0}):t[n]=e,t}var s=1,f=130,l=100,h=100,g=1,d=2,p=3,v=4,m=5,y=6,b={changes:[],removed:{},approved:{},locked:{},unlocked:{}},A=function(t,n,e){return e?t+"_u_"+n:t+"_"+n},x=function(t,n){var e=!(arguments.length>2&&void 0!==arguments[2])||arguments[2];Object.keys(b).forEach(function(r){t[A(r,n,e)]=b[r]})},w=function(t){var n=!(arguments.length>1&&void 0!==arguments[1])||arguments[1],e={};return Object.keys(b).forEach(function(r){e[r]=A(r,t,n)}),e},_=function(t){var n={};return x(n,t,!0),n},S=function(){return i.a.storage.sync.get(null).then(function(t){return Object.keys(t.user_subscriptions).forEach(function(n){O(t,n,!0)}),O(t,"other",!1),E(t)})},O=function(t,n,e){var r=w(n,e);delete r.changes;var o=[];Object.values(r).forEach(function(t){o.push(t)}),o.forEach(function(n){Object.values(t[n]).forEach(function(t){t.u=!1})})},E=function(t){return i.a.storage.sync.set(t).then(function(t){return i.a.runtime.sendMessage({action:"update-badge"})})},j=function(t,n,e,o,i){var u=t[n[e]];Object.keys(o).forEach(function(t){t in u?u[t].u=!1:i&&(u[t]=new r.ItemForStorage(o[t],!1))})},k=function(t,n,e,r,o,i,u){var c=arguments.length>7&&void 0!==arguments[7]?arguments[7]:function(){},a=w(n,e);delete a.changes;var s=t.user_subscriptions[n];!s&&e||(j(t,a,"removed",r,e),j(t,a,"approved",o,e),j(t,a,"locked",i,e),j(t,a,"unlocked",u,e),chrome.storage.sync.set(t,c))},P=function(t){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:function(){},e="other_subscriptions";chrome.storage.sync.get(e,function(o){o[e][t]={t:Math.floor((new Date).getTime()/1e3)};var i=Object(r.trimDict_by_numberValuedAttribute)(o[e],h,"t");chrome.storage.sync.set(a({},e,i),n)})},I=function(t){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:function(){},e="other_subscriptions",r=w("other",!1);delete r.changes,chrome.storage.sync.get(Object.values(r).concat(e),function(o){delete o[e][t],Object.values(r).forEach(function(n){t in o[n]&&delete o[n][t]}),chrome.storage.sync.set(o,function(){chrome.runtime.sendMessage({action:"update-badge"},n)})})},T=function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:function(){},n="other_subscriptions";chrome.storage.sync.get(n,function(e){t(Object.keys(e[n]))})},M=function(t){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:function(){},e=arguments.length>2&&void 0!==arguments[2]?arguments[2]:function(){},r=_(t);chrome.storage.sync.get("user_subscriptions",function(o){var i=o.user_subscriptions;t in i?e("already subscribed to this user"):Object.keys(i).length<5?(i[t]=!0,chrome.storage.sync.set(c({user_subscriptions:i},r),n)):e("maximum number of subscriptions reached")})},F=function(t,n){var e=Object.keys(_(t));chrome.storage.sync.get("user_subscriptions",function(r){var o=r.user_subscriptions;delete o[t],chrome.storage.sync.set({user_subscriptions:o},function(){chrome.storage.sync.remove(e,function(){var e=A("items",t,!0);chrome.runtime.sendMessage({action:"update-badge"}),chrome.storage.local.remove(e,n)})})})},N=function(t){chrome.storage.sync.get(null,function(n){var e;0===Object.keys(n).length?chrome.storage.sync.set((x(e={user_subscriptions:{},other_subscriptions:{},options:{interval:s,custom_clientid:"",removal_status:{track:!0,notify:!0},lock_status:{track:!0,notify:!0},monitor_quarantined:!1},last_check:null,last_check_quarantined:null},"other",!1),e),t):t()})},R=function(t){chrome.storage.sync.get(null,function(n){var e=Object.keys(n.user_subscriptions),r={};e.forEach(function(t){r[t]=D(t,!0,n)}),r.other=D("other",!1,n),t(r,n)})},L=function(t){chrome.storage.sync.get(null,function(n){var e=Object.keys(n.user_subscriptions),r={};e.forEach(function(t){r[t]=C(t,!0,n)}),r.other=C("other",!1,n),t(r)})},C=function(t,n,e){return D(t,n,e).unseen},D=function(t,n,e){var r=e.options.removal_status.track,o=e.options.lock_status.track,i={},u={},c=[],a=w(t,n);return r&&c.push(a.removed,a.approved),o&&c.push(a.locked,a.unlocked),c.forEach(function(t){Object.keys(e[t]).forEach(function(n){e[t][n].u?i[n]=!0:u[n]=!0})}),{unseen:Object.keys(i),seen:Object.keys(u)}},U=function(t,n){var e=A("items",t,n);return i.a.storage.local.get(a({},e,{})).then(function(t){return t[e]})},$=function(t,n,e){var r=A("items",t,n);return i.a.storage.local.set(a({},r,e))},B=function(t,n,e){var r=A("items",n,e);return chrome.storage.local.get(a({},r,{}),function(n){var e=n[r];Object.keys(t).forEach(function(n){e[n]=t[n]});var o=e;return Object.keys(e).length>500&&(o=trimDictOfItems_by_utcAttribute(e,500,"o")),i.a.storage.local.set(a({},r,o))})},V=function(t,n,e,o){var i=A("items",t,n);return i in o&&e in o[i]?new r.LocalStorageItem({object:o[i][e]}):""},W=function(t){chrome.storage.sync.get("user_subscriptions",function(n){var e=[A("changes","other",!1)],r={changes_other:"other"};Object.keys(n.user_subscriptions).forEach(function(t){var n=A("changes",t,!0);e.push(n),r[n]=t}),chrome.storage.sync.get(e,function(n){var o={};e.forEach(function(t){t in n&&n[t].length&&(o[r[t]]=n[t])}),t(o)})})},q=function(t){return i.a.storage.sync.get(["user_subscriptions","other_subscriptions","options"]).then(function(n){var e=Object.keys(n.user_subscriptions),r=Object.keys(n.other_subscriptions),o=n.options;return t(e,r,o)}).catch(console.log)},G=function(t,n,e,r,o,i,u,c,a){chrome.storage.sync.set({options:{interval:t,custom_clientid:n,removal_status:{track:e,notify:r},lock_status:{track:o,notify:i},hide_subscribe:u,monitor_quarantined:c}},a)}},function(t,n,e){"use strict";e.r(n),e.d(n,"ALARM_NAME",function(){return c}),e.d(n,"createTab",function(){return a}),e.d(n,"getFullIDsFromURL",function(){return s}),e.d(n,"getFullIDsFromPath",function(){return h}),e.d(n,"reformatRedditText",function(){return g}),e.d(n,"isRemovedItem",function(){return d}),e.d(n,"isComment",function(){return p}),e.d(n,"isRemovedComment",function(){return v}),e.d(n,"isUserDeletedComment",function(){return m}),e.d(n,"isUserDeletedPost",function(){return y}),e.d(n,"isUserDeletedItem",function(){return b}),e.d(n,"isRemovedPost",function(){return A}),e.d(n,"trimDict_by_numberValuedAttribute",function(){return x}),e.d(n,"sortDict_by_numberValuedAttribute",function(){return w}),e.d(n,"ItemForStorage",function(){return _}),e.d(n,"ChangeForStorage",function(){return S}),e.d(n,"LocalStorageItem",function(){return O}),e.d(n,"setAlarm",function(){return E}),e.d(n,"alphaLowerSort",function(){return j}),e.d(n,"goToOptions",function(){return k}),e.d(n,"showError",function(){return P}),e.d(n,"pprint",function(){return I}),e.d(n,"getPrettyTimeLength",function(){return T}),e.d(n,"getPrettyDate",function(){return M}),e.d(n,"createNotification",function(){return F}),e.d(n,"updateBadgeUnseenCount",function(){return N});var r=e(1);e(3);function o(t,n){if(!(t instanceof n))throw new TypeError("Cannot call a class as a function")}function i(t,n){for(var e=0;e<n.length;e++){var r=n[e];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function u(t,n,e){return n&&i(t.prototype,n),e&&i(t,e),t}var c="notifyme",a=function(t){chrome.tabs.create({url:t},function(n){n?chrome.windows.update(n.windowId,{focused:!0}):chrome.windows.create({url:t},function(t){chrome.windows.update(t.id,{focused:!0})})})},s=function(t){var n=t.replace(/https:\/\/[^/]*re(ve)?ddit.com/,"");return h(n)},f=/^\/(v|r|user)\/([^/]+)\/comments\/([^/]+)\/[^/]*(?:\/([^/?&#]+))?/,l=/^\/(?:user|y|u)\/([^/?&#]+)\/?/,h=function(t){var n=void 0,e=void 0,r=void 0,o=void 0,i=t.match(f),u=t.match(l);i?("user"===i[1]?r=i[2]:o=i[2],i[3]&&(n="t3_"+i[3]),i[4]&&(e="t1_"+i[4])):u&&(r=u[1]);return[n,e,r,o]},g=function(t){return t.replace(/&amp;/g,"&").replace(/&gt;/g,">").replace(/&lt;/g,"<").replace(/\s+/g," ").substr(0,300)},d=function(t){return p(t.name)?v(t):A(t)},p=function(t){return"t1"===t.substr(0,2)},v=function(t){return("[removed]"===t.body.replace(/\\/g,"")||"[deleted]"===t.body.replace(/\\/g,""))&&"[deleted]"===t.author.replace(/\\/g,"")},m=function(t){return"[deleted]"===t.body.replace(/\\/g,"")&&"[deleted]"===t.author.replace(/\\/g,"")},y=function(t){return!t.is_robot_indexable&&"[deleted]"===t.author.replace(/\\/g,"")},b=function(t){return p(t.name)?m(t):y(t)},A=function(t){return!t.is_robot_indexable},x=function(t,n,e){var r=w(t,e).slice(0,n),o={};return r.forEach(function(t){o[t[0]]=t[1]}),o},w=function(t,n){var e=Object.keys(t).map(function(n){return[n,t[n]]});return e.sort(function(t,e){return e[1][n]-t[1][n]}),e},_=function(){function t(n,e){o(this,t),this.c=n,this.u=e}return u(t,[{key:"getCreatedUTC",value:function(){return this.c}},{key:"getUnseen",value:function(){return this.u}}]),t}(),S=function(){function t(n){var e=n.id,r=void 0===e?null:e,i=n.observed_utc,u=void 0===i?null:i,c=n.change_type,a=void 0===c?null:c,s=n.object,f=void 0===s?null:s;o(this,t),f?(this.i=f.i,this.o=f.o,this.g=f.g):(this.i=r,this.o=u,this.g=a)}return u(t,[{key:"getID",value:function(){return this.i}},{key:"getObservedUTC",value:function(){return this.o}},{key:"getChangeType",value:function(){switch(this.g){case r.REMOVED:return"mod removed";case r.DELETED:return"user deleted";case r.APPROVED:return"approved";case r.LOCKED:return"locked";case r.UNLOCKED:return"unlocked";case r.EDITED:return"edited"}}}]),t}(),O=function(){function t(n){var e=n.item,r=void 0===e?null:e,i=n.observed_utc,u=void 0===i?null:i,c=n.object,a=void 0===c?null:c;if(o(this,t),a)this.t=a.t,this.o=a.o,this.c=a.c;else{var s="";s=p(r.name)?g(r.body):r.title,this.t=s,this.o=u,this.c=r.created_utc}}return u(t,[{key:"setText",value:function(t){this.t=g(t)}},{key:"getText",value:function(){return this.t}},{key:"getObservedUTC",value:function(){return this.o}},{key:"getCreatedUTC",value:function(){return this.c}}]),t}();function E(t){chrome.alarms.clear(c),chrome.alarms.create(c,{delayInMinutes:1,periodInMinutes:t})}function j(t,n){var e=t.toLowerCase(),r=n.toLowerCase();return e<r?-1:e>r?1:0}function k(){chrome.runtime.openOptionsPage?(chrome.runtime.openOptionsPage(),window.close()):window.open(chrome.runtime.getURL("/src/options.html"))}function P(t,n){$('<div class="rr-error">'+t+"</div>").appendTo(n).delay(2400).fadeTo(400,0,function(){$(this).remove()})}function I(t){console.log(JSON.stringify(t,null,"\t"))}var T=function(t){var n=[[60,"second","seconds"],[60,"minute","minutes"],[24,"hour","hours"],[7,"day","days"],[365/12/7,"week","weeks"],[12,"month","months"],[10,"year","years"],[10,"decade","decades"],[10,"century","centuries"],[10,"millenium","millenia"]];if(t<60)return t+" seconds";for(var e=t,r=0;r<n.length;r++){var o=n[r][0],i=n[r][1],u=n[r][2];if(e<o){var c=e-Math.floor(e),a=Math.round(c*n[r-1][0]);if(n[r-1][0]===a&&(e+=1,a=0),(Math.floor(e)>1||0==Math.floor(e))&&(i=u),r>1&&a>0){var s=n[r-1][1];a>1&&(s=n[r-1][2]),i+=", "+String(a)+" "+s}return String(Math.floor(e))+" "+i}e/=o}},M=function(t){var n=Math.floor((new Date).getTime()/1e3)-t;return T(n)+" ago"},F=function(t){var n=t.notificationId,e=t.title,r=t.message;location.protocol.match(/^http/)?chrome.runtime.sendMessage({action:"create-notification",options:{notificationId:n,title:e,message:r}}):chrome.notifications.create(n,{type:"basic",iconUrl:"/icons/128.png",title:e,message:r})},N=function(){location.protocol.match(/^http/)?chrome.runtime.sendMessage({action:"update-badge"}):Object(r.getSubscribedUsers_withUnseenIDs)(function(t){var n=0;Object.values(t).forEach(function(t){n+=t.length});var e=n.toString();0==n&&(e=""),chrome.browserAction.setBadgeBackgroundColor({color:"red"}),chrome.browserAction.setBadgeText({text:e})})}},function(t,n,e){var r,o,i;o=[t],void 0===(i="function"==typeof(r=function(t){"use strict";if("undefined"==typeof browser||Object.getPrototypeOf(browser)!==Object.prototype){const n="The message port closed before a response was received.",e="Returning a Promise is the preferred way to send a reply from an onMessage/onMessageExternal listener, as the sendResponse will be removed from the specs (See https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/runtime/onMessage)",r=t=>{const r={alarms:{clear:{minArgs:0,maxArgs:1},clearAll:{minArgs:0,maxArgs:0},get:{minArgs:0,maxArgs:1},getAll:{minArgs:0,maxArgs:0}},bookmarks:{create:{minArgs:1,maxArgs:1},get:{minArgs:1,maxArgs:1},getChildren:{minArgs:1,maxArgs:1},getRecent:{minArgs:1,maxArgs:1},getSubTree:{minArgs:1,maxArgs:1},getTree:{minArgs:0,maxArgs:0},move:{minArgs:2,maxArgs:2},remove:{minArgs:1,maxArgs:1},removeTree:{minArgs:1,maxArgs:1},search:{minArgs:1,maxArgs:1},update:{minArgs:2,maxArgs:2}},browserAction:{disable:{minArgs:0,maxArgs:1,fallbackToNoCallback:!0},enable:{minArgs:0,maxArgs:1,fallbackToNoCallback:!0},getBadgeBackgroundColor:{minArgs:1,maxArgs:1},getBadgeText:{minArgs:1,maxArgs:1},getPopup:{minArgs:1,maxArgs:1},getTitle:{minArgs:1,maxArgs:1},openPopup:{minArgs:0,maxArgs:0},setBadgeBackgroundColor:{minArgs:1,maxArgs:1,fallbackToNoCallback:!0},setBadgeText:{minArgs:1,maxArgs:1,fallbackToNoCallback:!0},setIcon:{minArgs:1,maxArgs:1},setPopup:{minArgs:1,maxArgs:1,fallbackToNoCallback:!0},setTitle:{minArgs:1,maxArgs:1,fallbackToNoCallback:!0}},browsingData:{remove:{minArgs:2,maxArgs:2},removeCache:{minArgs:1,maxArgs:1},removeCookies:{minArgs:1,maxArgs:1},removeDownloads:{minArgs:1,maxArgs:1},removeFormData:{minArgs:1,maxArgs:1},removeHistory:{minArgs:1,maxArgs:1},removeLocalStorage:{minArgs:1,maxArgs:1},removePasswords:{minArgs:1,maxArgs:1},removePluginData:{minArgs:1,maxArgs:1},settings:{minArgs:0,maxArgs:0}},commands:{getAll:{minArgs:0,maxArgs:0}},contextMenus:{remove:{minArgs:1,maxArgs:1},removeAll:{minArgs:0,maxArgs:0},update:{minArgs:2,maxArgs:2}},cookies:{get:{minArgs:1,maxArgs:1},getAll:{minArgs:1,maxArgs:1},getAllCookieStores:{minArgs:0,maxArgs:0},remove:{minArgs:1,maxArgs:1},set:{minArgs:1,maxArgs:1}},devtools:{inspectedWindow:{eval:{minArgs:1,maxArgs:2,singleCallbackArg:!1}},panels:{create:{minArgs:3,maxArgs:3,singleCallbackArg:!0}}},downloads:{cancel:{minArgs:1,maxArgs:1},download:{minArgs:1,maxArgs:1},erase:{minArgs:1,maxArgs:1},getFileIcon:{minArgs:1,maxArgs:2},open:{minArgs:1,maxArgs:1,fallbackToNoCallback:!0},pause:{minArgs:1,maxArgs:1},removeFile:{minArgs:1,maxArgs:1},resume:{minArgs:1,maxArgs:1},search:{minArgs:1,maxArgs:1},show:{minArgs:1,maxArgs:1,fallbackToNoCallback:!0}},extension:{isAllowedFileSchemeAccess:{minArgs:0,maxArgs:0},isAllowedIncognitoAccess:{minArgs:0,maxArgs:0}},history:{addUrl:{minArgs:1,maxArgs:1},deleteAll:{minArgs:0,maxArgs:0},deleteRange:{minArgs:1,maxArgs:1},deleteUrl:{minArgs:1,maxArgs:1},getVisits:{minArgs:1,maxArgs:1},search:{minArgs:1,maxArgs:1}},i18n:{detectLanguage:{minArgs:1,maxArgs:1},getAcceptLanguages:{minArgs:0,maxArgs:0}},identity:{launchWebAuthFlow:{minArgs:1,maxArgs:1}},idle:{queryState:{minArgs:1,maxArgs:1}},management:{get:{minArgs:1,maxArgs:1},getAll:{minArgs:0,maxArgs:0},getSelf:{minArgs:0,maxArgs:0},setEnabled:{minArgs:2,maxArgs:2},uninstallSelf:{minArgs:0,maxArgs:1}},notifications:{clear:{minArgs:1,maxArgs:1},create:{minArgs:1,maxArgs:2},getAll:{minArgs:0,maxArgs:0},getPermissionLevel:{minArgs:0,maxArgs:0},update:{minArgs:2,maxArgs:2}},pageAction:{getPopup:{minArgs:1,maxArgs:1},getTitle:{minArgs:1,maxArgs:1},hide:{minArgs:1,maxArgs:1,fallbackToNoCallback:!0},setIcon:{minArgs:1,maxArgs:1},setPopup:{minArgs:1,maxArgs:1,fallbackToNoCallback:!0},setTitle:{minArgs:1,maxArgs:1,fallbackToNoCallback:!0},show:{minArgs:1,maxArgs:1,fallbackToNoCallback:!0}},permissions:{contains:{minArgs:1,maxArgs:1},getAll:{minArgs:0,maxArgs:0},remove:{minArgs:1,maxArgs:1},request:{minArgs:1,maxArgs:1}},runtime:{getBackgroundPage:{minArgs:0,maxArgs:0},getPlatformInfo:{minArgs:0,maxArgs:0},openOptionsPage:{minArgs:0,maxArgs:0},requestUpdateCheck:{minArgs:0,maxArgs:0},sendMessage:{minArgs:1,maxArgs:3},sendNativeMessage:{minArgs:2,maxArgs:2},setUninstallURL:{minArgs:1,maxArgs:1}},sessions:{getDevices:{minArgs:0,maxArgs:1},getRecentlyClosed:{minArgs:0,maxArgs:1},restore:{minArgs:0,maxArgs:1}},storage:{local:{clear:{minArgs:0,maxArgs:0},get:{minArgs:0,maxArgs:1},getBytesInUse:{minArgs:0,maxArgs:1},remove:{minArgs:1,maxArgs:1},set:{minArgs:1,maxArgs:1}},managed:{get:{minArgs:0,maxArgs:1},getBytesInUse:{minArgs:0,maxArgs:1}},sync:{clear:{minArgs:0,maxArgs:0},get:{minArgs:0,maxArgs:1},getBytesInUse:{minArgs:0,maxArgs:1},remove:{minArgs:1,maxArgs:1},set:{minArgs:1,maxArgs:1}}},tabs:{captureVisibleTab:{minArgs:0,maxArgs:2},create:{minArgs:1,maxArgs:1},detectLanguage:{minArgs:0,maxArgs:1},discard:{minArgs:0,maxArgs:1},duplicate:{minArgs:1,maxArgs:1},executeScript:{minArgs:1,maxArgs:2},get:{minArgs:1,maxArgs:1},getCurrent:{minArgs:0,maxArgs:0},getZoom:{minArgs:0,maxArgs:1},getZoomSettings:{minArgs:0,maxArgs:1},highlight:{minArgs:1,maxArgs:1},insertCSS:{minArgs:1,maxArgs:2},move:{minArgs:2,maxArgs:2},query:{minArgs:1,maxArgs:1},reload:{minArgs:0,maxArgs:2},remove:{minArgs:1,maxArgs:1},removeCSS:{minArgs:1,maxArgs:2},sendMessage:{minArgs:2,maxArgs:3},setZoom:{minArgs:1,maxArgs:2},setZoomSettings:{minArgs:1,maxArgs:2},update:{minArgs:1,maxArgs:2}},topSites:{get:{minArgs:0,maxArgs:0}},webNavigation:{getAllFrames:{minArgs:1,maxArgs:1},getFrame:{minArgs:1,maxArgs:1}},webRequest:{handlerBehaviorChanged:{minArgs:0,maxArgs:0}},windows:{create:{minArgs:0,maxArgs:1},get:{minArgs:1,maxArgs:2},getAll:{minArgs:0,maxArgs:1},getCurrent:{minArgs:0,maxArgs:1},getLastFocused:{minArgs:0,maxArgs:1},remove:{minArgs:1,maxArgs:1},update:{minArgs:2,maxArgs:2}}};if(0===Object.keys(r).length)throw new Error("api-metadata.json has not been included in browser-polyfill");const o=(n,e)=>(...r)=>{t.runtime.lastError?n.reject(t.runtime.lastError):e.singleCallbackArg||r.length<=1&&!1!==e.singleCallbackArg?n.resolve(r[0]):n.resolve(r)},i=t=>1==t?"argument":"arguments",u=(t,n,e)=>new Proxy(n,{apply:(n,r,o)=>e.call(r,t,...o)});let c=Function.call.bind(Object.prototype.hasOwnProperty);const a=(t,n={},e={})=>{let r=Object.create(null),s={has:(n,e)=>e in t||e in r,get(s,f,l){if(f in r)return r[f];if(!(f in t))return;let h=t[f];if("function"==typeof h)if("function"==typeof n[f])h=u(t,t[f],n[f]);else if(c(e,f)){let n=((t,n)=>(function(e,...r){if(r.length<n.minArgs)throw new Error(`Expected at least ${n.minArgs} ${i(n.minArgs)} for ${t}(), got ${r.length}`);if(r.length>n.maxArgs)throw new Error(`Expected at most ${n.maxArgs} ${i(n.maxArgs)} for ${t}(), got ${r.length}`);return new Promise((i,u)=>{if(n.fallbackToNoCallback)try{e[t](...r,o({resolve:i,reject:u},n))}catch(o){console.warn(`${t} API method doesn't seem to support the callback parameter, `+"falling back to call it without a callback: ",o),e[t](...r),n.fallbackToNoCallback=!1,n.noCallback=!0,i()}else n.noCallback?(e[t](...r),i()):e[t](...r,o({resolve:i,reject:u},n))})}))(f,e[f]);h=u(t,t[f],n)}else h=h.bind(t);else{if("object"!=typeof h||null===h||!c(n,f)&&!c(e,f))return Object.defineProperty(r,f,{configurable:!0,enumerable:!0,get:()=>t[f],set(n){t[f]=n}}),h;h=a(h,n[f],e[f])}return r[f]=h,h},set:(n,e,o,i)=>(e in r?r[e]=o:t[e]=o,!0),defineProperty:(t,n,e)=>Reflect.defineProperty(r,n,e),deleteProperty:(t,n)=>Reflect.deleteProperty(r,n)},f=Object.create(t);return new Proxy(f,s)},s=t=>({addListener(n,e,...r){n.addListener(t.get(e),...r)},hasListener:(n,e)=>n.hasListener(t.get(e)),removeListener(n,e){n.removeListener(t.get(e))}});let f=!1;const l=new class extends WeakMap{constructor(t,n){super(n),this.createItem=t}get(t){return this.has(t)||this.set(t,this.createItem(t)),super.get(t)}}(t=>"function"!=typeof t?t:function(n,r,o){let i,u,c=!1,a=new Promise(t=>{i=function(n){f||(console.warn(e,(new Error).stack),f=!0),c=!0,t(n)}});try{u=t(n,r,i)}catch(t){u=Promise.reject(t)}const s=!0!==u&&(t=>t&&"object"==typeof t&&"function"==typeof t.then)(u);if(!0!==u&&!s&&!c)return!1;const l=t=>{t.then(t=>{o(t)},t=>{let n;n=t&&(t instanceof Error||"string"==typeof t.message)?t.message:"An unexpected error occurred",o({__mozWebExtensionPolyfillReject__:!0,message:n})}).catch(t=>{console.error("Failed to send onMessage rejected reply",t)})};return l(s?u:a),!0}),h=(e,r,o,...u)=>{if(u.length<r.minArgs)throw new Error(`Expected at least ${r.minArgs} ${i(r.minArgs)} for ${e}(), got ${u.length}`);if(u.length>r.maxArgs)throw new Error(`Expected at most ${r.maxArgs} ${i(r.maxArgs)} for ${e}(), got ${u.length}`);return new Promise((e,r)=>{const i=(({reject:e,resolve:r},o)=>{t.runtime.lastError?t.runtime.lastError.message===n?r():e(t.runtime.lastError):o&&o.__mozWebExtensionPolyfillReject__?e(new Error(o.message)):r(o)}).bind(null,{resolve:e,reject:r});u.push(i),o.sendMessage(...u)})},g={runtime:{onMessage:s(l),onMessageExternal:s(l),sendMessage:h.bind(null,"sendMessage",{minArgs:1,maxArgs:3})},tabs:{sendMessage:h.bind(null,"sendMessage",{minArgs:2,maxArgs:3})}},d={clear:{minArgs:1,maxArgs:1},get:{minArgs:1,maxArgs:1},set:{minArgs:1,maxArgs:1}};return r.privacy={network:{networkPredictionEnabled:d,webRTCIPHandlingPolicy:d},services:{passwordSavingEnabled:d},websites:{hyperlinkAuditingEnabled:d,referrersEnabled:d}},a(t,g,r)};if("object"!=typeof chrome||!chrome||!chrome.runtime||!chrome.runtime.id)throw new Error("This script should only be loaded in a browser extension.");t.exports=r(chrome)}else t.exports=browser})?r.apply(n,o):r)||(t.exports=i)},function(t,n){var e=t.exports="undefined"!=typeof window&&window.Math==Math?window:"undefined"!=typeof self&&self.Math==Math?self:Function("return this")();"number"==typeof __g&&(__g=e)},function(t,n){t.exports=function(t){try{return!!t()}catch(t){return!0}}},function(t,n,e){var r=e(7);t.exports=function(t){if(!r(t))throw TypeError(t+" is not an object!");return t}},function(t,n){t.exports=function(t){return"object"==typeof t?null!==t:"function"==typeof t}},function(t,n,e){var r=e(52)("wks"),o=e(33),i=e(4).Symbol,u="function"==typeof i;(t.exports=function(t){return r[t]||(r[t]=u&&i[t]||(u?i:o)("Symbol."+t))}).store=r},function(t,n,e){var r=e(22),o=Math.min;t.exports=function(t){return t>0?o(r(t),9007199254740991):0}},function(t,n){var e=t.exports={version:"2.6.11"};"number"==typeof __e&&(__e=e)},function(t,n,e){t.exports=!e(5)(function(){return 7!=Object.defineProperty({},"a",{get:function(){return 7}}).a})},function(t,n,e){var r=e(6),o=e(94),i=e(30),u=Object.defineProperty;n.f=e(11)?Object.defineProperty:function(t,n,e){if(r(t),n=i(n,!0),r(e),o)try{return u(t,n,e)}catch(t){}if("get"in e||"set"in e)throw TypeError("Accessors not supported!");return"value"in e&&(t[n]=e.value),t}},function(t,n,e){var r=e(27);t.exports=function(t){return Object(r(t))}},function(t,n,e){var r=e(4),o=e(17),i=e(16),u=e(33)("src"),c=e(131),a=(""+c).split("toString");e(10).inspectSource=function(t){return c.call(t)},(t.exports=function(t,n,e,c){var s="function"==typeof e;s&&(i(e,"name")||o(e,"name",n)),t[n]!==e&&(s&&(i(e,u)||o(e,u,t[n]?""+t[n]:a.join(String(n)))),t===r?t[n]=e:c?t[n]?t[n]=e:o(t,n,e):(delete t[n],o(t,n,e)))})(Function.prototype,"toString",function(){return"function"==typeof this&&this[u]||c.call(this)})},function(t,n,e){var r=e(0),o=e(5),i=e(27),u=/"/g,c=function(t,n,e,r){var o=String(i(t)),c="<"+n;return""!==e&&(c+=" "+e+'="'+String(r).replace(u,"&quot;")+'"'),c+">"+o+"</"+n+">"};t.exports=function(t,n){var e={};e[t]=n(c),r(r.P+r.F*o(function(){var n=""[t]('"');return n!==n.toLowerCase()||n.split('"').length>3}),"String",e)}},function(t,n){var e={}.hasOwnProperty;t.exports=function(t,n){return e.call(t,n)}},function(t,n,e){var r=e(12),o=e(32);t.exports=e(11)?function(t,n,e){return r.f(t,n,o(1,e))}:function(t,n,e){return t[n]=e,t}},function(t,n,e){var r=e(48),o=e(27);t.exports=function(t){return r(o(t))}},function(t,n,e){"use strict";var r=e(5);t.exports=function(t,n){return!!t&&r(function(){n?t.call(null,function(){},1):t.call(null)})}},function(t,n,e){var r=e(21);t.exports=function(t,n,e){if(r(t),void 0===n)return t;switch(e){case 1:return function(e){return t.call(n,e)};case 2:return function(e,r){return t.call(n,e,r)};case 3:return function(e,r,o){return t.call(n,e,r,o)}}return function(){return t.apply(n,arguments)}}},function(t,n){t.exports=function(t){if("function"!=typeof t)throw TypeError(t+" is not a function!");return t}},function(t,n){var e=Math.ceil,r=Math.floor;t.exports=function(t){return isNaN(t=+t)?0:(t>0?r:e)(t)}},function(t,n,e){var r=e(49),o=e(32),i=e(18),u=e(30),c=e(16),a=e(94),s=Object.getOwnPropertyDescriptor;n.f=e(11)?s:function(t,n){if(t=i(t),n=u(n,!0),a)try{return s(t,n)}catch(t){}if(c(t,n))return o(!r.f.call(t,n),t[n])}},function(t,n,e){var r=e(0),o=e(10),i=e(5);t.exports=function(t,n){var e=(o.Object||{})[t]||Object[t],u={};u[t]=n(e),r(r.S+r.F*i(function(){e(1)}),"Object",u)}},function(t,n,e){var r=e(20),o=e(48),i=e(13),u=e(9),c=e(110);t.exports=function(t,n){var e=1==t,a=2==t,s=3==t,f=4==t,l=6==t,h=5==t||l,g=n||c;return function(n,c,d){for(var p,v,m=i(n),y=o(m),b=r(c,d,3),A=u(y.length),x=0,w=e?g(n,A):a?g(n,0):void 0;A>x;x++)if((h||x in y)&&(v=b(p=y[x],x,m),t))if(e)w[x]=v;else if(v)switch(t){case 3:return!0;case 5:return p;case 6:return x;case 2:w.push(p)}else if(f)return!1;return l?-1:s||f?f:w}}},function(t,n){var e={}.toString;t.exports=function(t){return e.call(t).slice(8,-1)}},function(t,n){t.exports=function(t){if(null==t)throw TypeError("Can't call method on  "+t);return t}},function(t,n,e){"use strict";if(e(11)){var r=e(34),o=e(4),i=e(5),u=e(0),c=e(63),a=e(90),s=e(20),f=e(46),l=e(32),h=e(17),g=e(47),d=e(22),p=e(9),v=e(121),m=e(36),y=e(30),b=e(16),A=e(50),x=e(7),w=e(13),_=e(82),S=e(37),O=e(39),E=e(38).f,j=e(84),k=e(33),P=e(8),I=e(25),T=e(53),M=e(51),F=e(86),N=e(44),R=e(56),L=e(45),C=e(85),D=e(112),U=e(12),$=e(23),B=U.f,V=$.f,W=o.RangeError,q=o.TypeError,G=o.Uint8Array,z=Array.prototype,Y=a.ArrayBuffer,J=a.DataView,K=I(0),X=I(2),H=I(3),Z=I(4),Q=I(5),tt=I(6),nt=T(!0),et=T(!1),rt=F.values,ot=F.keys,it=F.entries,ut=z.lastIndexOf,ct=z.reduce,at=z.reduceRight,st=z.join,ft=z.sort,lt=z.slice,ht=z.toString,gt=z.toLocaleString,dt=P("iterator"),pt=P("toStringTag"),vt=k("typed_constructor"),mt=k("def_constructor"),yt=c.CONSTR,bt=c.TYPED,At=c.VIEW,xt=I(1,function(t,n){return Et(M(t,t[mt]),n)}),wt=i(function(){return 1===new G(new Uint16Array([1]).buffer)[0]}),_t=!!G&&!!G.prototype.set&&i(function(){new G(1).set({})}),St=function(t,n){var e=d(t);if(e<0||e%n)throw W("Wrong offset!");return e},Ot=function(t){if(x(t)&&bt in t)return t;throw q(t+" is not a typed array!")},Et=function(t,n){if(!(x(t)&&vt in t))throw q("It is not a typed array constructor!");return new t(n)},jt=function(t,n){return kt(M(t,t[mt]),n)},kt=function(t,n){for(var e=0,r=n.length,o=Et(t,r);r>e;)o[e]=n[e++];return o},Pt=function(t,n,e){B(t,n,{get:function(){return this._d[e]}})},It=function(t){var n,e,r,o,i,u,c=w(t),a=arguments.length,f=a>1?arguments[1]:void 0,l=void 0!==f,h=j(c);if(null!=h&&!_(h)){for(u=h.call(c),r=[],n=0;!(i=u.next()).done;n++)r.push(i.value);c=r}for(l&&a>2&&(f=s(f,arguments[2],2)),n=0,e=p(c.length),o=Et(this,e);e>n;n++)o[n]=l?f(c[n],n):c[n];return o},Tt=function(){for(var t=0,n=arguments.length,e=Et(this,n);n>t;)e[t]=arguments[t++];return e},Mt=!!G&&i(function(){gt.call(new G(1))}),Ft=function(){return gt.apply(Mt?lt.call(Ot(this)):Ot(this),arguments)},Nt={copyWithin:function(t,n){return D.call(Ot(this),t,n,arguments.length>2?arguments[2]:void 0)},every:function(t){return Z(Ot(this),t,arguments.length>1?arguments[1]:void 0)},fill:function(t){return C.apply(Ot(this),arguments)},filter:function(t){return jt(this,X(Ot(this),t,arguments.length>1?arguments[1]:void 0))},find:function(t){return Q(Ot(this),t,arguments.length>1?arguments[1]:void 0)},findIndex:function(t){return tt(Ot(this),t,arguments.length>1?arguments[1]:void 0)},forEach:function(t){K(Ot(this),t,arguments.length>1?arguments[1]:void 0)},indexOf:function(t){return et(Ot(this),t,arguments.length>1?arguments[1]:void 0)},includes:function(t){return nt(Ot(this),t,arguments.length>1?arguments[1]:void 0)},join:function(t){return st.apply(Ot(this),arguments)},lastIndexOf:function(t){return ut.apply(Ot(this),arguments)},map:function(t){return xt(Ot(this),t,arguments.length>1?arguments[1]:void 0)},reduce:function(t){return ct.apply(Ot(this),arguments)},reduceRight:function(t){return at.apply(Ot(this),arguments)},reverse:function(){for(var t,n=Ot(this).length,e=Math.floor(n/2),r=0;r<e;)t=this[r],this[r++]=this[--n],this[n]=t;return this},some:function(t){return H(Ot(this),t,arguments.length>1?arguments[1]:void 0)},sort:function(t){return ft.call(Ot(this),t)},subarray:function(t,n){var e=Ot(this),r=e.length,o=m(t,r);return new(M(e,e[mt]))(e.buffer,e.byteOffset+o*e.BYTES_PER_ELEMENT,p((void 0===n?r:m(n,r))-o))}},Rt=function(t,n){return jt(this,lt.call(Ot(this),t,n))},Lt=function(t){Ot(this);var n=St(arguments[1],1),e=this.length,r=w(t),o=p(r.length),i=0;if(o+n>e)throw W("Wrong length!");for(;i<o;)this[n+i]=r[i++]},Ct={entries:function(){return it.call(Ot(this))},keys:function(){return ot.call(Ot(this))},values:function(){return rt.call(Ot(this))}},Dt=function(t,n){return x(t)&&t[bt]&&"symbol"!=typeof n&&n in t&&String(+n)==String(n)},Ut=function(t,n){return Dt(t,n=y(n,!0))?l(2,t[n]):V(t,n)},$t=function(t,n,e){return!(Dt(t,n=y(n,!0))&&x(e)&&b(e,"value"))||b(e,"get")||b(e,"set")||e.configurable||b(e,"writable")&&!e.writable||b(e,"enumerable")&&!e.enumerable?B(t,n,e):(t[n]=e.value,t)};yt||($.f=Ut,U.f=$t),u(u.S+u.F*!yt,"Object",{getOwnPropertyDescriptor:Ut,defineProperty:$t}),i(function(){ht.call({})})&&(ht=gt=function(){return st.call(this)});var Bt=g({},Nt);g(Bt,Ct),h(Bt,dt,Ct.values),g(Bt,{slice:Rt,set:Lt,constructor:function(){},toString:ht,toLocaleString:Ft}),Pt(Bt,"buffer","b"),Pt(Bt,"byteOffset","o"),Pt(Bt,"byteLength","l"),Pt(Bt,"length","e"),B(Bt,pt,{get:function(){return this[bt]}}),t.exports=function(t,n,e,a){var s=t+((a=!!a)?"Clamped":"")+"Array",l="get"+t,g="set"+t,d=o[s],m=d||{},y=d&&O(d),b=!d||!c.ABV,w={},_=d&&d.prototype,j=function(t,e){B(t,e,{get:function(){return function(t,e){var r=t._d;return r.v[l](e*n+r.o,wt)}(this,e)},set:function(t){return function(t,e,r){var o=t._d;a&&(r=(r=Math.round(r))<0?0:r>255?255:255&r),o.v[g](e*n+o.o,r,wt)}(this,e,t)},enumerable:!0})};b?(d=e(function(t,e,r,o){f(t,d,s,"_d");var i,u,c,a,l=0,g=0;if(x(e)){if(!(e instanceof Y||"ArrayBuffer"==(a=A(e))||"SharedArrayBuffer"==a))return bt in e?kt(d,e):It.call(d,e);i=e,g=St(r,n);var m=e.byteLength;if(void 0===o){if(m%n)throw W("Wrong length!");if((u=m-g)<0)throw W("Wrong length!")}else if((u=p(o)*n)+g>m)throw W("Wrong length!");c=u/n}else c=v(e),i=new Y(u=c*n);for(h(t,"_d",{b:i,o:g,l:u,e:c,v:new J(i)});l<c;)j(t,l++)}),_=d.prototype=S(Bt),h(_,"constructor",d)):i(function(){d(1)})&&i(function(){new d(-1)})&&R(function(t){new d,new d(null),new d(1.5),new d(t)},!0)||(d=e(function(t,e,r,o){var i;return f(t,d,s),x(e)?e instanceof Y||"ArrayBuffer"==(i=A(e))||"SharedArrayBuffer"==i?void 0!==o?new m(e,St(r,n),o):void 0!==r?new m(e,St(r,n)):new m(e):bt in e?kt(d,e):It.call(d,e):new m(v(e))}),K(y!==Function.prototype?E(m).concat(E(y)):E(m),function(t){t in d||h(d,t,m[t])}),d.prototype=_,r||(_.constructor=d));var k=_[dt],P=!!k&&("values"==k.name||null==k.name),I=Ct.values;h(d,vt,!0),h(_,bt,s),h(_,At,!0),h(_,mt,d),(a?new d(1)[pt]==s:pt in _)||B(_,pt,{get:function(){return s}}),w[s]=d,u(u.G+u.W+u.F*(d!=m),w),u(u.S,s,{BYTES_PER_ELEMENT:n}),u(u.S+u.F*i(function(){m.of.call(d,1)}),s,{from:It,of:Tt}),"BYTES_PER_ELEMENT"in _||h(_,"BYTES_PER_ELEMENT",n),u(u.P,s,Nt),L(s),u(u.P+u.F*_t,s,{set:Lt}),u(u.P+u.F*!P,s,Ct),r||_.toString==ht||(_.toString=ht),u(u.P+u.F*i(function(){new d(1).slice()}),s,{slice:Rt}),u(u.P+u.F*(i(function(){return[1,2].toLocaleString()!=new d([1,2]).toLocaleString()})||!i(function(){_.toLocaleString.call([1,2])})),s,{toLocaleString:Ft}),N[s]=P?k:I,r||P||h(_,dt,I)}}else t.exports=function(){}},function(t,n,e){"use strict";e.r(n),e.d(n,"lookupItemsByID",function(){return l}),e.d(n,"lookupItemsByUser",function(){return v}),e.d(n,"handleFetchErrors",function(){return m}),e.d(n,"getRedditData",function(){return y}),e.d(n,"getRedditToken",function(){return b}),e.d(n,"getAuth",function(){return A}),e.d(n,"getLocalAuth",function(){return x}),e.d(n,"getCookie",function(){return w}),e.d(n,"getLocalOrAppAuth",function(){return S}),e.d(n,"getLoggedinUser",function(){return O});var r=e(1),o=e(3),i=e.n(o);function u(t,n,e,r,o,i,u){try{var c=t[i](u),a=c.value}catch(t){return void e(t)}c.done?n(a):Promise.resolve(a).then(r,o)}function c(t,n){var e=Object.keys(t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);n&&(r=r.filter(function(n){return Object.getOwnPropertyDescriptor(t,n).enumerable})),e.push.apply(e,r)}return e}function a(t){for(var n=1;n<arguments.length;n++){var e=null!=arguments[n]?arguments[n]:{};n%2?c(e,!0).forEach(function(n){s(t,n,e[n])}):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(e)):c(e).forEach(function(n){Object.defineProperty(t,n,Object.getOwnPropertyDescriptor(e,n))})}return t}function s(t,n,e){return n in t?Object.defineProperty(t,n,{value:e,enumerable:!0,configurable:!0,writable:!0}):t[n]=e,t}function f(t){return function(t){if(Array.isArray(t)){for(var n=0,e=new Array(t.length);n<t.length;n++)e[n]=t[n];return e}}(t)||function(t){if(Symbol.iterator in Object(t)||"[object Arguments]"===Object.prototype.toString.call(t))return Array.from(t)}(t)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}var l=function(t,n){var e=arguments.length>2&&void 0!==arguments[2]&&arguments[2],r=arguments.length>3&&void 0!==arguments[3]&&arguments[3],o={id:t,raw_json:1},i="?"+Object.keys(o).map(function(t){return"".concat(t,"=").concat(o[t])}).join("&");return p.apply(void 0,f(_("api/info",i,n,r)).concat([e]))},h={name:"reddit_session",url:"https://reddit.com"},g=["name","value","domain","path","secure","httpOnly","storeId"],d=function(t){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"https://reddit.com";if(!t)return t;var e=Object.keys(t).filter(function(t){return g.includes(t)}).reduce(function(n,e){return a({},n,s({},e,t[e]))},{});return e.url=n,e},p=function(){var t,n=(t=regeneratorRuntime.mark(function t(n,e){var r,o,u,c=arguments;return regeneratorRuntime.wrap(function(t){for(;;)switch(t.prev=t.next){case 0:return r=c.length>2&&void 0!==c[2]&&c[2],t.next=3,i.a.cookies.set({domain:"reddit.com",url:"https://reddit.com",name:"_options",value:"{%22pref_quarantine_optin%22:true}"});case 3:if(!r){t.next=12;break}return t.t0=d,t.next=7,i.a.cookies.get(h);case 7:if(t.t1=t.sent,!(o=(0,t.t0)(t.t1))){t.next=12;break}return t.next=12,i.a.cookies.remove(h);case 12:if(e||(e={}),e.cache="reload",u=fetch(n,e).then(m).then(y).catch(console.log),!o){t.next=18;break}return t.next=18,i.a.cookies.set(o);case 18:return t.abrupt("return",u);case 19:case"end":return t.stop()}},t)}),function(){var n=this,e=arguments;return new Promise(function(r,o){var i=t.apply(n,e);function c(t){u(i,r,o,c,a,"next",t)}function a(t){u(i,r,o,c,a,"throw",t)}c(void 0)})});return function(t,e){return n.apply(this,arguments)}}(),v=function(t,n,e,r,o,i,u){var c={limit:100,sort:e,raw_json:1};n&&(c.after=n),r&&(c.t=r);var a="user/".concat(t,"/overview.json"),s="?"+Object.keys(c).map(function(t){return"".concat(t,"=").concat(c[t])}).join("&");return p.apply(void 0,f(_(a,s,u,i)).concat([o]))},m=function(t){if(!t.ok)throw Error(t.statusText);return t.json()},y=function(t){if(!t||!t.data||!t.data.children)throw Error("reddit data is not defined");return t.data.children},b=function(t){if(!t||!t.access_token)throw Error("access token is not defined");return t.access_token},A=function(){return Object(r.getOptions)(function(t,n,e){var r="SEw1uvRd6kxFEw";if(e.custom_clientid&&"testing"===(r=e.custom_clientid))return"none";var o={headers:{Authorization:"Basic ".concat(btoa("".concat(r,":"))),"Content-Type":"application/x-www-form-urlencoded; charset=utf-8"},method:"POST",body:"grant_type=".concat(encodeURIComponent("https://oauth.reddit.com/grants/installed_client"),"&device_id=DO_NOT_TRACK_THIS_DEVICE")};return fetch("https://www.reddit.com/api/v1/access_token",o).then(m).then(b).then(function(t){return{headers:{Authorization:"bearer ".concat(t)}}}).catch(console.log)})},x=function(){return fetch("https://mod.reddit.com/mail/all").then(function(t){w({url:"https://mod.reddit.com",name:"token"}).then(function(t){if(t){var n=new RegExp("[^A-Za-z0-9+/].*?$"),e=t.value.replace(n,""),r=atob(e),o=JSON.parse(r);return"accessToken"in o&&o.accessToken?{headers:{Authorization:"bearer ".concat(o.accessToken)}}:null}return null})})},w=function(t){var n=t.url,e=t.name;return location.protocol.match(/^http/)?i.a.runtime.sendMessage({action:"get-cookie",options:{url:n,name:e}}).then(function(t){return t.cookie}):i.a.cookies.get({url:n,name:e})},_=function(t,n,e,r){if(e&&"none"!==e)return[(r?"https://ored.reveddit.com/":"https://oauth.reddit.com/")+t+n,e];var o=(r?"https://wred.reveddit.com/":"https://www.reddit.com/")+t;return"api/info"===t&&(o+=".json"),[o+=n]},S=function(){return x().then(function(t){return t||A()}).catch(console.log)},O=function(){return fetch("https://www.reddit.com/api/me.json").then(m).then(E).catch(console.log)},E=function(t){if(!t||!t.data||!t.data.name)throw Error("reddit username is not defined");return t.data.name}},function(t,n,e){var r=e(7);t.exports=function(t,n){if(!r(t))return t;var e,o;if(n&&"function"==typeof(e=t.toString)&&!r(o=e.call(t)))return o;if("function"==typeof(e=t.valueOf)&&!r(o=e.call(t)))return o;if(!n&&"function"==typeof(e=t.toString)&&!r(o=e.call(t)))return o;throw TypeError("Can't convert object to primitive value")}},function(t,n,e){var r=e(33)("meta"),o=e(7),i=e(16),u=e(12).f,c=0,a=Object.isExtensible||function(){return!0},s=!e(5)(function(){return a(Object.preventExtensions({}))}),f=function(t){u(t,r,{value:{i:"O"+ ++c,w:{}}})},l=t.exports={KEY:r,NEED:!1,fastKey:function(t,n){if(!o(t))return"symbol"==typeof t?t:("string"==typeof t?"S":"P")+t;if(!i(t,r)){if(!a(t))return"F";if(!n)return"E";f(t)}return t[r].i},getWeak:function(t,n){if(!i(t,r)){if(!a(t))return!0;if(!n)return!1;f(t)}return t[r].w},onFreeze:function(t){return s&&l.NEED&&a(t)&&!i(t,r)&&f(t),t}}},function(t,n){t.exports=function(t,n){return{enumerable:!(1&t),configurable:!(2&t),writable:!(4&t),value:n}}},function(t,n){var e=0,r=Math.random();t.exports=function(t){return"Symbol(".concat(void 0===t?"":t,")_",(++e+r).toString(36))}},function(t,n){t.exports=!1},function(t,n,e){var r=e(96),o=e(69);t.exports=Object.keys||function(t){return r(t,o)}},function(t,n,e){var r=e(22),o=Math.max,i=Math.min;t.exports=function(t,n){return(t=r(t))<0?o(t+n,0):i(t,n)}},function(t,n,e){var r=e(6),o=e(97),i=e(69),u=e(68)("IE_PROTO"),c=function(){},a=function(){var t,n=e(66)("iframe"),r=i.length;for(n.style.display="none",e(70).appendChild(n),n.src="javascript:",(t=n.contentWindow.document).open(),t.write("<script>document.F=Object<\/script>"),t.close(),a=t.F;r--;)delete a.prototype[i[r]];return a()};t.exports=Object.create||function(t,n){var e;return null!==t?(c.prototype=r(t),e=new c,c.prototype=null,e[u]=t):e=a(),void 0===n?e:o(e,n)}},function(t,n,e){var r=e(96),o=e(69).concat("length","prototype");n.f=Object.getOwnPropertyNames||function(t){return r(t,o)}},function(t,n,e){var r=e(16),o=e(13),i=e(68)("IE_PROTO"),u=Object.prototype;t.exports=Object.getPrototypeOf||function(t){return t=o(t),r(t,i)?t[i]:"function"==typeof t.constructor&&t instanceof t.constructor?t.constructor.prototype:t instanceof Object?u:null}},function(t,n,e){var r=e(8)("unscopables"),o=Array.prototype;null==o[r]&&e(17)(o,r,{}),t.exports=function(t){o[r][t]=!0}},function(t,n,e){var r=e(7);t.exports=function(t,n){if(!r(t)||t._t!==n)throw TypeError("Incompatible receiver, "+n+" required!");return t}},function(t,n,e){var r=e(12).f,o=e(16),i=e(8)("toStringTag");t.exports=function(t,n,e){t&&!o(t=e?t:t.prototype,i)&&r(t,i,{configurable:!0,value:n})}},function(t,n,e){var r=e(0),o=e(27),i=e(5),u=e(72),c="["+u+"]",a=RegExp("^"+c+c+"*"),s=RegExp(c+c+"*$"),f=function(t,n,e){var o={},c=i(function(){return!!u[t]()||"​"!="​"[t]()}),a=o[t]=c?n(l):u[t];e&&(o[e]=a),r(r.P+r.F*c,"String",o)},l=f.trim=function(t,n){return t=String(o(t)),1&n&&(t=t.replace(a,"")),2&n&&(t=t.replace(s,"")),t};t.exports=f},function(t,n){t.exports={}},function(t,n,e){"use strict";var r=e(4),o=e(12),i=e(11),u=e(8)("species");t.exports=function(t){var n=r[t];i&&n&&!n[u]&&o.f(n,u,{configurable:!0,get:function(){return this}})}},function(t,n){t.exports=function(t,n,e,r){if(!(t instanceof n)||void 0!==r&&r in t)throw TypeError(e+": incorrect invocation!");return t}},function(t,n,e){var r=e(14);t.exports=function(t,n,e){for(var o in n)r(t,o,n[o],e);return t}},function(t,n,e){var r=e(26);t.exports=Object("z").propertyIsEnumerable(0)?Object:function(t){return"String"==r(t)?t.split(""):Object(t)}},function(t,n){n.f={}.propertyIsEnumerable},function(t,n,e){var r=e(26),o=e(8)("toStringTag"),i="Arguments"==r(function(){return arguments}());t.exports=function(t){var n,e,u;return void 0===t?"Undefined":null===t?"Null":"string"==typeof(e=function(t,n){try{return t[n]}catch(t){}}(n=Object(t),o))?e:i?r(n):"Object"==(u=r(n))&&"function"==typeof n.callee?"Arguments":u}},function(t,n,e){var r=e(6),o=e(21),i=e(8)("species");t.exports=function(t,n){var e,u=r(t).constructor;return void 0===u||null==(e=r(u)[i])?n:o(e)}},function(t,n,e){var r=e(10),o=e(4),i=o["__core-js_shared__"]||(o["__core-js_shared__"]={});(t.exports=function(t,n){return i[t]||(i[t]=void 0!==n?n:{})})("versions",[]).push({version:r.version,mode:e(34)?"pure":"global",copyright:"© 2019 Denis Pushkarev (zloirock.ru)"})},function(t,n,e){var r=e(18),o=e(9),i=e(36);t.exports=function(t){return function(n,e,u){var c,a=r(n),s=o(a.length),f=i(u,s);if(t&&e!=e){for(;s>f;)if((c=a[f++])!=c)return!0}else for(;s>f;f++)if((t||f in a)&&a[f]===e)return t||f||0;return!t&&-1}}},function(t,n){n.f=Object.getOwnPropertySymbols},function(t,n,e){var r=e(26);t.exports=Array.isArray||function(t){return"Array"==r(t)}},function(t,n,e){var r=e(8)("iterator"),o=!1;try{var i=[7][r]();i.return=function(){o=!0},Array.from(i,function(){throw 2})}catch(t){}t.exports=function(t,n){if(!n&&!o)return!1;var e=!1;try{var i=[7],u=i[r]();u.next=function(){return{done:e=!0}},i[r]=function(){return u},t(i)}catch(t){}return e}},function(t,n,e){"use strict";var r=e(6);t.exports=function(){var t=r(this),n="";return t.global&&(n+="g"),t.ignoreCase&&(n+="i"),t.multiline&&(n+="m"),t.unicode&&(n+="u"),t.sticky&&(n+="y"),n}},function(t,n,e){"use strict";var r=e(50),o=RegExp.prototype.exec;t.exports=function(t,n){var e=t.exec;if("function"==typeof e){var i=e.call(t,n);if("object"!=typeof i)throw new TypeError("RegExp exec method returned something other than an Object or null");return i}if("RegExp"!==r(t))throw new TypeError("RegExp#exec called on incompatible receiver");return o.call(t,n)}},function(t,n,e){"use strict";e(114);var r=e(14),o=e(17),i=e(5),u=e(27),c=e(8),a=e(87),s=c("species"),f=!i(function(){var t=/./;return t.exec=function(){var t=[];return t.groups={a:"7"},t},"7"!=="".replace(t,"$<a>")}),l=function(){var t=/(?:)/,n=t.exec;t.exec=function(){return n.apply(this,arguments)};var e="ab".split(t);return 2===e.length&&"a"===e[0]&&"b"===e[1]}();t.exports=function(t,n,e){var h=c(t),g=!i(function(){var n={};return n[h]=function(){return 7},7!=""[t](n)}),d=g?!i(function(){var n=!1,e=/a/;return e.exec=function(){return n=!0,null},"split"===t&&(e.constructor={},e.constructor[s]=function(){return e}),e[h](""),!n}):void 0;if(!g||!d||"replace"===t&&!f||"split"===t&&!l){var p=/./[h],v=e(u,h,""[t],function(t,n,e,r,o){return n.exec===a?g&&!o?{done:!0,value:p.call(n,e,r)}:{done:!0,value:t.call(e,n,r)}:{done:!1}}),m=v[0],y=v[1];r(String.prototype,t,m),o(RegExp.prototype,h,2==n?function(t,n){return y.call(t,this,n)}:function(t){return y.call(t,this)})}}},function(t,n,e){var r=e(20),o=e(109),i=e(82),u=e(6),c=e(9),a=e(84),s={},f={};(n=t.exports=function(t,n,e,l,h){var g,d,p,v,m=h?function(){return t}:a(t),y=r(e,l,n?2:1),b=0;if("function"!=typeof m)throw TypeError(t+" is not iterable!");if(i(m)){for(g=c(t.length);g>b;b++)if((v=n?y(u(d=t[b])[0],d[1]):y(t[b]))===s||v===f)return v}else for(p=m.call(t);!(d=p.next()).done;)if((v=o(p,y,d.value,n))===s||v===f)return v}).BREAK=s,n.RETURN=f},function(t,n,e){var r=e(4).navigator;t.exports=r&&r.userAgent||""},function(t,n,e){"use strict";var r=e(4),o=e(0),i=e(14),u=e(47),c=e(31),a=e(60),s=e(46),f=e(7),l=e(5),h=e(56),g=e(42),d=e(73);t.exports=function(t,n,e,p,v,m){var y=r[t],b=y,A=v?"set":"add",x=b&&b.prototype,w={},_=function(t){var n=x[t];i(x,t,"delete"==t?function(t){return!(m&&!f(t))&&n.call(this,0===t?0:t)}:"has"==t?function(t){return!(m&&!f(t))&&n.call(this,0===t?0:t)}:"get"==t?function(t){return m&&!f(t)?void 0:n.call(this,0===t?0:t)}:"add"==t?function(t){return n.call(this,0===t?0:t),this}:function(t,e){return n.call(this,0===t?0:t,e),this})};if("function"==typeof b&&(m||x.forEach&&!l(function(){(new b).entries().next()}))){var S=new b,O=S[A](m?{}:-0,1)!=S,E=l(function(){S.has(1)}),j=h(function(t){new b(t)}),k=!m&&l(function(){for(var t=new b,n=5;n--;)t[A](n,n);return!t.has(-0)});j||((b=n(function(n,e){s(n,b,t);var r=d(new y,n,b);return null!=e&&a(e,v,r[A],r),r})).prototype=x,x.constructor=b),(E||k)&&(_("delete"),_("has"),v&&_("get")),(k||O)&&_(A),m&&x.clear&&delete x.clear}else b=p.getConstructor(n,t,v,A),u(b.prototype,e),c.NEED=!0;return g(b,t),w[t]=b,o(o.G+o.W+o.F*(b!=y),w),m||p.setStrong(b,t,v),b}},function(t,n,e){for(var r,o=e(4),i=e(17),u=e(33),c=u("typed_array"),a=u("view"),s=!(!o.ArrayBuffer||!o.DataView),f=s,l=0,h="Int8Array,Uint8Array,Uint8ClampedArray,Int16Array,Uint16Array,Int32Array,Uint32Array,Float32Array,Float64Array".split(",");l<9;)(r=o[h[l++]])?(i(r.prototype,c,!0),i(r.prototype,a,!0)):f=!1;t.exports={ABV:s,CONSTR:f,TYPED:c,VIEW:a}},function(t,n,e){"use strict";e.r(n),e.d(n,"setTextAndFunction_subscribe",function(){return f}),e.d(n,"setTextAndFunction_unsubscribe",function(){return l});var r=e(1),o=e(2),i=e(65);e(3);function u(t,n,e,r,o,i,u){try{var c=t[i](u),a=c.value}catch(t){return void e(t)}c.done?n(a):Promise.resolve(a).then(r,o)}function c(t){return function(){var n=this,e=arguments;return new Promise(function(r,o){var i=t.apply(n,e);function c(t){u(i,r,o,c,a,"next",t)}function a(t){u(i,r,o,c,a,"throw",t)}c(void 0)})}}var a="unsubscribe-rev",s="subscribe-rev";location.hostname.match(/reveddit\.com$/)&&(a="unsubscribe",s="subscribe");var f=function(t,n,e){return $(n).text(s).off("click").click(function(n){return h(t,n.target,e)})},l=function(t,n,e){return $(n).text(a).off("click").click(function(n){return g(t,n.target,e)})},h=function(t,n){var e=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"";return Object(r.subscribeId)(t,c(regeneratorRuntime.mark(function u(){return regeneratorRuntime.wrap(function(u){for(;;)switch(u.prev=u.next){case 0:return l(t,n,e),u.next=3,Object(i.b)(t,window.location.href);case 3:e&&Object(r.getLocalStorageItems)("other",!1).then(function(n){var i=n[t];if(i){var u=new o.LocalStorageItem({object:i});u.setText(e),n[t]=u,Object(r.saveLocalStorageItems)("other",!1,n)}});case 4:case"end":return u.stop()}},u)}))),!1},g=function(t,n,e){return Object(r.unsubscribeId)(t,function(){f(t,n,e)}),!1}},function(t,n,e){"use strict";e.d(n,"b",function(){return d}),e.d(n,"a",function(){return p});var r=e(29),o=e(1),i=e(2),u=e(3),c=e.n(u);function a(t,n,e){return n in t?Object.defineProperty(t,n,{value:e,enumerable:!0,configurable:!0,writable:!0}):t[n]=e,t}function s(t,n,e,r,o,i,u){try{var c=t[i](u),a=c.value}catch(t){return void e(t)}c.done?n(a):Promise.resolve(a).then(r,o)}function f(t){return function(){var n=this,e=arguments;return new Promise(function(r,o){var i=t.apply(n,e);function u(t){s(i,r,o,u,c,"next",t)}function c(t){s(i,r,o,u,c,"throw",t)}u(void 0)})}}var l=0,h=1,g=2,d=function(t,n){var e=l;return n.match(/^https:\/\/www.reveddit.com/)&&(e=h),chrome.storage.sync.get(null,function(n){Object(r.getAuth)().then(function(r){return m([t],"other",!1,r,n,e,{})})})},p=function(){chrome.storage.sync.get(null,function(t){var n=Object.keys(t.user_subscriptions),e=Object.keys(t.other_subscriptions);if(n.length||e.length){var o=Math.floor(new Date/1e3);t.options.monitor_quarantined||t.last_check_quarantined&&!(o-t.last_check_quarantined>432e3)||(t.tempVar_monitor_quarantined=!0),Object(r.getAuth)().then(function(e){return function(t,n){var e=Object.keys(n.other_subscriptions);e.length&&m(e,"other",!1,t,n,g)}(e,t),v(n,e,t)}).then(function(){var n={last_check:o};(t.tempVar_monitor_quarantined||t.options.monitor_quarantined)&&(n.last_check_quarantined=o),t.tempVar_quarantined_content_found&&(n.options=t.options,n.options.monitor_quarantined=!0),chrome.storage.sync.set(n)})}})},v=function(){var t=f(regeneratorRuntime.mark(function t(n,e,o){var i;return regeneratorRuntime.wrap(function(t){for(;;)switch(t.prev=t.next){case 0:if(!n.length){t.next=3;break}return i=n[0],t.abrupt("return",Object(r.lookupItemsByUser)(i,"","new","",o.options.monitor_quarantined,o.tempVar_monitor_quarantined,e).then(function(t){if(t){var r=[],u={};return t.forEach(function(t){r.push(t.data.name),u[t.data.name]=t.data,t.data.quarantine&&(o.tempVar_quarantined_content_found=!0)}),m(r,i,!0,e,o,g,u).then(function(){return v(n.slice(1),e,o)})}}));case 3:case"end":return t.stop()}},t)}));return function(n,e,r){return t.apply(this,arguments)}}();var m=function(){var t=f(regeneratorRuntime.mark(function t(n,e,u,s,f,l){var h,g,d,p=arguments;return regeneratorRuntime.wrap(function(t){for(;;)switch(t.prev=t.next){case 0:return h=p.length>6&&void 0!==p[6]?p[6]:{},d=f.options.monitor_quarantined,g=location.protocol.match(/^http/)?c.a.runtime.sendMessage({action:"get-reddit-items-by-id",ids:n,monitor_quarantined:d}):Object(r.lookupItemsByID)(n,s,d,f.tempVar_monitor_quarantined),t.abrupt("return",g.then(function(t){if(t){var n=Array.isArray(t)?t:t.items;if(n){var r=f.options.removal_status,c=f.options.lock_status,s=Object(o.getObjectNamesForThing)(e,u),g=f[s.removed]||{},d=f[s.approved]||{},p=f[s.locked]||{},v=f[s.unlocked]||{},m=f[s.changes]||[];u||(h={});var b=[],A=[],x=[],w=[];n.forEach(function(t){var n=t.data;u||(h[n.name]=n),Object(i.isRemovedItem)(n)?b.push(n.name):A.push(n.name),n.locked?x.push(n.name):w.push(n.name)});var _={},S=[],O=0;return Object(o.getLocalStorageItems)(e,u).then(function(t){var n;return r.track&&(O+=y(b,o.REMOVED,"mod removed",g,A,o.APPROVED,"approved",d,m,h,r.notify,_,S,u,l,t)),c.track&&(O+=y(x,o.LOCKED,"locked",p,w,o.UNLOCKED,"unlocked",v,m,h,c.notify,_,S,u,l,t)),O&&S.length&&Object(i.createNotification)({notificationId:e,title:e,message:"".concat(O," new [").concat(S.join(", "),"] actions, click to view")}),chrome.storage.sync.set((a(n={},s.removed,Object(i.trimDict_by_numberValuedAttribute)(g,o.MAX_SYNC_STORAGE_ITEMS_PER_OBJECT,"c")),a(n,s.approved,Object(i.trimDict_by_numberValuedAttribute)(d,o.MAX_SYNC_STORAGE_ITEMS_PER_OBJECT,"c")),a(n,s.locked,Object(i.trimDict_by_numberValuedAttribute)(p,o.MAX_SYNC_STORAGE_ITEMS_PER_OBJECT,"c")),a(n,s.unlocked,Object(i.trimDict_by_numberValuedAttribute)(v,o.MAX_SYNC_STORAGE_ITEMS_PER_OBJECT,"c")),a(n,s.changes,m.slice(-o.MAX_SYNC_STORAGE_CHANGES)),n),function(){return Object(i.updateBadgeUnseenCount)(),Object(o.addLocalStorageItems)(_,e,u)})})}}}));case 4:case"end":return t.stop()}},t)}));return function(n,e,r,o,i,u){return t.apply(this,arguments)}}();function y(t,n,e,r,u,c,a,s,f,g,d,p,v,m,y,b){var A=[],x=[],w=[],_=Math.floor(new Date/1e3);t.forEach(function(t){var e=g[t];if(m||b[t]||(p[t]=new i.LocalStorageItem({item:e,observed_utc:_})),!(t in r)){var u=!0;if((y===l&&n!==o.REMOVED||y===h)&&(u=!1),r[t]=new i.ItemForStorage(e.created_utc,u),delete s[t],u){var c=n;Object(i.isUserDeletedItem)(e)?(c=o.DELETED,w.push(t)):A.push(t),f.push(new i.ChangeForStorage({id:t,observed_utc:_,change_type:c}))}m&&(p[t]=new i.LocalStorageItem({item:e,observed_utc:_}))}}),u.forEach(function(t){var n=g[t];m||b[t]||(p[t]=new i.LocalStorageItem({item:n,observed_utc:_})),t in r?(s[t]=new i.ItemForStorage(n.created_utc,!0),delete r[t],f.push(new i.ChangeForStorage({id:t,observed_utc:_,change_type:c})),x.push(t),p[t]=new i.LocalStorageItem({item:n,observed_utc:_})):s[t]=new i.ItemForStorage(n.created_utc,!1)});var S=A.length+x.length+w.length;return d&&S&&(A.length&&v.push(e),w.length&&v.push("user deleted"),x.length&&v.push(a)),S}},function(t,n,e){var r=e(7),o=e(4).document,i=r(o)&&r(o.createElement);t.exports=function(t){return i?o.createElement(t):{}}},function(t,n,e){n.f=e(8)},function(t,n,e){var r=e(52)("keys"),o=e(33);t.exports=function(t){return r[t]||(r[t]=o(t))}},function(t,n){t.exports="constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf".split(",")},function(t,n,e){var r=e(4).document;t.exports=r&&r.documentElement},function(t,n,e){var r=e(7),o=e(6),i=function(t,n){if(o(t),!r(n)&&null!==n)throw TypeError(n+": can't set as prototype!")};t.exports={set:Object.setPrototypeOf||("__proto__"in{}?function(t,n,r){try{(r=e(20)(Function.call,e(23).f(Object.prototype,"__proto__").set,2))(t,[]),n=!(t instanceof Array)}catch(t){n=!0}return function(t,e){return i(t,e),n?t.__proto__=e:r(t,e),t}}({},!1):void 0),check:i}},function(t,n){t.exports="\t\n\v\f\r   ᠎             　\u2028\u2029\ufeff"},function(t,n,e){var r=e(7),o=e(71).set;t.exports=function(t,n,e){var i,u=n.constructor;return u!==e&&"function"==typeof u&&(i=u.prototype)!==e.prototype&&r(i)&&o&&o(t,i),t}},function(t,n,e){"use strict";var r=e(22),o=e(27);t.exports=function(t){var n=String(o(this)),e="",i=r(t);if(i<0||i==1/0)throw RangeError("Count can't be negative");for(;i>0;(i>>>=1)&&(n+=n))1&i&&(e+=n);return e}},function(t,n){t.exports=Math.sign||function(t){return 0==(t=+t)||t!=t?t:t<0?-1:1}},function(t,n){var e=Math.expm1;t.exports=!e||e(10)>22025.465794806718||e(10)<22025.465794806718||-2e-17!=e(-2e-17)?function(t){return 0==(t=+t)?t:t>-1e-6&&t<1e-6?t+t*t/2:Math.exp(t)-1}:e},function(t,n,e){var r=e(22),o=e(27);t.exports=function(t){return function(n,e){var i,u,c=String(o(n)),a=r(e),s=c.length;return a<0||a>=s?t?"":void 0:(i=c.charCodeAt(a))<55296||i>56319||a+1===s||(u=c.charCodeAt(a+1))<56320||u>57343?t?c.charAt(a):i:t?c.slice(a,a+2):u-56320+(i-55296<<10)+65536}}},function(t,n,e){"use strict";var r=e(34),o=e(0),i=e(14),u=e(17),c=e(44),a=e(108),s=e(42),f=e(39),l=e(8)("iterator"),h=!([].keys&&"next"in[].keys()),g=function(){return this};t.exports=function(t,n,e,d,p,v,m){a(e,n,d);var y,b,A,x=function(t){if(!h&&t in O)return O[t];switch(t){case"keys":case"values":return function(){return new e(this,t)}}return function(){return new e(this,t)}},w=n+" Iterator",_="values"==p,S=!1,O=t.prototype,E=O[l]||O["@@iterator"]||p&&O[p],j=E||x(p),k=p?_?x("entries"):j:void 0,P="Array"==n&&O.entries||E;if(P&&(A=f(P.call(new t)))!==Object.prototype&&A.next&&(s(A,w,!0),r||"function"==typeof A[l]||u(A,l,g)),_&&E&&"values"!==E.name&&(S=!0,j=function(){return E.call(this)}),r&&!m||!h&&!S&&O[l]||u(O,l,j),c[n]=j,c[w]=g,p)if(y={values:_?j:x("values"),keys:v?j:x("keys"),entries:k},m)for(b in y)b in O||i(O,b,y[b]);else o(o.P+o.F*(h||S),n,y);return y}},function(t,n,e){var r=e(80),o=e(27);t.exports=function(t,n,e){if(r(n))throw TypeError("String#"+e+" doesn't accept regex!");return String(o(t))}},function(t,n,e){var r=e(7),o=e(26),i=e(8)("match");t.exports=function(t){var n;return r(t)&&(void 0!==(n=t[i])?!!n:"RegExp"==o(t))}},function(t,n,e){var r=e(8)("match");t.exports=function(t){var n=/./;try{"/./"[t](n)}catch(e){try{return n[r]=!1,!"/./"[t](n)}catch(t){}}return!0}},function(t,n,e){var r=e(44),o=e(8)("iterator"),i=Array.prototype;t.exports=function(t){return void 0!==t&&(r.Array===t||i[o]===t)}},function(t,n,e){"use strict";var r=e(12),o=e(32);t.exports=function(t,n,e){n in t?r.f(t,n,o(0,e)):t[n]=e}},function(t,n,e){var r=e(50),o=e(8)("iterator"),i=e(44);t.exports=e(10).getIteratorMethod=function(t){if(null!=t)return t[o]||t["@@iterator"]||i[r(t)]}},function(t,n,e){"use strict";var r=e(13),o=e(36),i=e(9);t.exports=function(t){for(var n=r(this),e=i(n.length),u=arguments.length,c=o(u>1?arguments[1]:void 0,e),a=u>2?arguments[2]:void 0,s=void 0===a?e:o(a,e);s>c;)n[c++]=t;return n}},function(t,n,e){"use strict";var r=e(40),o=e(113),i=e(44),u=e(18);t.exports=e(78)(Array,"Array",function(t,n){this._t=u(t),this._i=0,this._k=n},function(){var t=this._t,n=this._k,e=this._i++;return!t||e>=t.length?(this._t=void 0,o(1)):o(0,"keys"==n?e:"values"==n?t[e]:[e,t[e]])},"values"),i.Arguments=i.Array,r("keys"),r("values"),r("entries")},function(t,n,e){"use strict";var r,o,i=e(57),u=RegExp.prototype.exec,c=String.prototype.replace,a=u,s=(r=/a/,o=/b*/g,u.call(r,"a"),u.call(o,"a"),0!==r.lastIndex||0!==o.lastIndex),f=void 0!==/()??/.exec("")[1];(s||f)&&(a=function(t){var n,e,r,o,a=this;return f&&(e=new RegExp("^"+a.source+"$(?!\\s)",i.call(a))),s&&(n=a.lastIndex),r=u.call(a,t),s&&r&&(a.lastIndex=a.global?r.index+r[0].length:n),f&&r&&r.length>1&&c.call(r[0],e,function(){for(o=1;o<arguments.length-2;o++)void 0===arguments[o]&&(r[o]=void 0)}),r}),t.exports=a},function(t,n,e){"use strict";var r=e(77)(!0);t.exports=function(t,n,e){return n+(e?r(t,n).length:1)}},function(t,n,e){var r,o,i,u=e(20),c=e(102),a=e(70),s=e(66),f=e(4),l=f.process,h=f.setImmediate,g=f.clearImmediate,d=f.MessageChannel,p=f.Dispatch,v=0,m={},y=function(){var t=+this;if(m.hasOwnProperty(t)){var n=m[t];delete m[t],n()}},b=function(t){y.call(t.data)};h&&g||(h=function(t){for(var n=[],e=1;arguments.length>e;)n.push(arguments[e++]);return m[++v]=function(){c("function"==typeof t?t:Function(t),n)},r(v),v},g=function(t){delete m[t]},"process"==e(26)(l)?r=function(t){l.nextTick(u(y,t,1))}:p&&p.now?r=function(t){p.now(u(y,t,1))}:d?(i=(o=new d).port2,o.port1.onmessage=b,r=u(i.postMessage,i,1)):f.addEventListener&&"function"==typeof postMessage&&!f.importScripts?(r=function(t){f.postMessage(t+"","*")},f.addEventListener("message",b,!1)):r="onreadystatechange"in s("script")?function(t){a.appendChild(s("script")).onreadystatechange=function(){a.removeChild(this),y.call(t)}}:function(t){setTimeout(u(y,t,1),0)}),t.exports={set:h,clear:g}},function(t,n,e){"use strict";var r=e(4),o=e(11),i=e(34),u=e(63),c=e(17),a=e(47),s=e(5),f=e(46),l=e(22),h=e(9),g=e(121),d=e(38).f,p=e(12).f,v=e(85),m=e(42),y="prototype",b="Wrong index!",A=r.ArrayBuffer,x=r.DataView,w=r.Math,_=r.RangeError,S=r.Infinity,O=A,E=w.abs,j=w.pow,k=w.floor,P=w.log,I=w.LN2,T=o?"_b":"buffer",M=o?"_l":"byteLength",F=o?"_o":"byteOffset";function N(t,n,e){var r,o,i,u=new Array(e),c=8*e-n-1,a=(1<<c)-1,s=a>>1,f=23===n?j(2,-24)-j(2,-77):0,l=0,h=t<0||0===t&&1/t<0?1:0;for((t=E(t))!=t||t===S?(o=t!=t?1:0,r=a):(r=k(P(t)/I),t*(i=j(2,-r))<1&&(r--,i*=2),(t+=r+s>=1?f/i:f*j(2,1-s))*i>=2&&(r++,i/=2),r+s>=a?(o=0,r=a):r+s>=1?(o=(t*i-1)*j(2,n),r+=s):(o=t*j(2,s-1)*j(2,n),r=0));n>=8;u[l++]=255&o,o/=256,n-=8);for(r=r<<n|o,c+=n;c>0;u[l++]=255&r,r/=256,c-=8);return u[--l]|=128*h,u}function R(t,n,e){var r,o=8*e-n-1,i=(1<<o)-1,u=i>>1,c=o-7,a=e-1,s=t[a--],f=127&s;for(s>>=7;c>0;f=256*f+t[a],a--,c-=8);for(r=f&(1<<-c)-1,f>>=-c,c+=n;c>0;r=256*r+t[a],a--,c-=8);if(0===f)f=1-u;else{if(f===i)return r?NaN:s?-S:S;r+=j(2,n),f-=u}return(s?-1:1)*r*j(2,f-n)}function L(t){return t[3]<<24|t[2]<<16|t[1]<<8|t[0]}function C(t){return[255&t]}function D(t){return[255&t,t>>8&255]}function U(t){return[255&t,t>>8&255,t>>16&255,t>>24&255]}function $(t){return N(t,52,8)}function B(t){return N(t,23,4)}function V(t,n,e){p(t[y],n,{get:function(){return this[e]}})}function W(t,n,e,r){var o=g(+e);if(o+n>t[M])throw _(b);var i=t[T]._b,u=o+t[F],c=i.slice(u,u+n);return r?c:c.reverse()}function q(t,n,e,r,o,i){var u=g(+e);if(u+n>t[M])throw _(b);for(var c=t[T]._b,a=u+t[F],s=r(+o),f=0;f<n;f++)c[a+f]=s[i?f:n-f-1]}if(u.ABV){if(!s(function(){A(1)})||!s(function(){new A(-1)})||s(function(){return new A,new A(1.5),new A(NaN),"ArrayBuffer"!=A.name})){for(var G,z=(A=function(t){return f(this,A),new O(g(t))})[y]=O[y],Y=d(O),J=0;Y.length>J;)(G=Y[J++])in A||c(A,G,O[G]);i||(z.constructor=A)}var K=new x(new A(2)),X=x[y].setInt8;K.setInt8(0,2147483648),K.setInt8(1,2147483649),!K.getInt8(0)&&K.getInt8(1)||a(x[y],{setInt8:function(t,n){X.call(this,t,n<<24>>24)},setUint8:function(t,n){X.call(this,t,n<<24>>24)}},!0)}else A=function(t){f(this,A,"ArrayBuffer");var n=g(t);this._b=v.call(new Array(n),0),this[M]=n},x=function(t,n,e){f(this,x,"DataView"),f(t,A,"DataView");var r=t[M],o=l(n);if(o<0||o>r)throw _("Wrong offset!");if(o+(e=void 0===e?r-o:h(e))>r)throw _("Wrong length!");this[T]=t,this[F]=o,this[M]=e},o&&(V(A,"byteLength","_l"),V(x,"buffer","_b"),V(x,"byteLength","_l"),V(x,"byteOffset","_o")),a(x[y],{getInt8:function(t){return W(this,1,t)[0]<<24>>24},getUint8:function(t){return W(this,1,t)[0]},getInt16:function(t){var n=W(this,2,t,arguments[1]);return(n[1]<<8|n[0])<<16>>16},getUint16:function(t){var n=W(this,2,t,arguments[1]);return n[1]<<8|n[0]},getInt32:function(t){return L(W(this,4,t,arguments[1]))},getUint32:function(t){return L(W(this,4,t,arguments[1]))>>>0},getFloat32:function(t){return R(W(this,4,t,arguments[1]),23,4)},getFloat64:function(t){return R(W(this,8,t,arguments[1]),52,8)},setInt8:function(t,n){q(this,1,t,C,n)},setUint8:function(t,n){q(this,1,t,C,n)},setInt16:function(t,n){q(this,2,t,D,n,arguments[2])},setUint16:function(t,n){q(this,2,t,D,n,arguments[2])},setInt32:function(t,n){q(this,4,t,U,n,arguments[2])},setUint32:function(t,n){q(this,4,t,U,n,arguments[2])},setFloat32:function(t,n){q(this,4,t,B,n,arguments[2])},setFloat64:function(t,n){q(this,8,t,$,n,arguments[2])}});m(A,"ArrayBuffer"),m(x,"DataView"),c(x[y],u.VIEW,!0),n.ArrayBuffer=A,n.DataView=x},function(t,n){var e=t.exports="undefined"!=typeof window&&window.Math==Math?window:"undefined"!=typeof self&&self.Math==Math?self:Function("return this")();"number"==typeof __g&&(__g=e)},function(t,n){t.exports=function(t){return"object"==typeof t?null!==t:"function"==typeof t}},function(t,n,e){t.exports=!e(126)(function(){return 7!=Object.defineProperty({},"a",{get:function(){return 7}}).a})},function(t,n,e){t.exports=!e(11)&&!e(5)(function(){return 7!=Object.defineProperty(e(66)("div"),"a",{get:function(){return 7}}).a})},function(t,n,e){var r=e(4),o=e(10),i=e(34),u=e(67),c=e(12).f;t.exports=function(t){var n=o.Symbol||(o.Symbol=i?{}:r.Symbol||{});"_"==t.charAt(0)||t in n||c(n,t,{value:u.f(t)})}},function(t,n,e){var r=e(16),o=e(18),i=e(53)(!1),u=e(68)("IE_PROTO");t.exports=function(t,n){var e,c=o(t),a=0,s=[];for(e in c)e!=u&&r(c,e)&&s.push(e);for(;n.length>a;)r(c,e=n[a++])&&(~i(s,e)||s.push(e));return s}},function(t,n,e){var r=e(12),o=e(6),i=e(35);t.exports=e(11)?Object.defineProperties:function(t,n){o(t);for(var e,u=i(n),c=u.length,a=0;c>a;)r.f(t,e=u[a++],n[e]);return t}},function(t,n,e){var r=e(18),o=e(38).f,i={}.toString,u="object"==typeof window&&window&&Object.getOwnPropertyNames?Object.getOwnPropertyNames(window):[];t.exports.f=function(t){return u&&"[object Window]"==i.call(t)?function(t){try{return o(t)}catch(t){return u.slice()}}(t):o(r(t))}},function(t,n,e){"use strict";var r=e(11),o=e(35),i=e(54),u=e(49),c=e(13),a=e(48),s=Object.assign;t.exports=!s||e(5)(function(){var t={},n={},e=Symbol(),r="abcdefghijklmnopqrst";return t[e]=7,r.split("").forEach(function(t){n[t]=t}),7!=s({},t)[e]||Object.keys(s({},n)).join("")!=r})?function(t,n){for(var e=c(t),s=arguments.length,f=1,l=i.f,h=u.f;s>f;)for(var g,d=a(arguments[f++]),p=l?o(d).concat(l(d)):o(d),v=p.length,m=0;v>m;)g=p[m++],r&&!h.call(d,g)||(e[g]=d[g]);return e}:s},function(t,n){t.exports=Object.is||function(t,n){return t===n?0!==t||1/t==1/n:t!=t&&n!=n}},function(t,n,e){"use strict";var r=e(21),o=e(7),i=e(102),u=[].slice,c={},a=function(t,n,e){if(!(n in c)){for(var r=[],o=0;o<n;o++)r[o]="a["+o+"]";c[n]=Function("F,a","return new F("+r.join(",")+")")}return c[n](t,e)};t.exports=Function.bind||function(t){var n=r(this),e=u.call(arguments,1),c=function(){var r=e.concat(u.call(arguments));return this instanceof c?a(n,r.length,r):i(n,r,t)};return o(n.prototype)&&(c.prototype=n.prototype),c}},function(t,n){t.exports=function(t,n,e){var r=void 0===e;switch(n.length){case 0:return r?t():t.call(e);case 1:return r?t(n[0]):t.call(e,n[0]);case 2:return r?t(n[0],n[1]):t.call(e,n[0],n[1]);case 3:return r?t(n[0],n[1],n[2]):t.call(e,n[0],n[1],n[2]);case 4:return r?t(n[0],n[1],n[2],n[3]):t.call(e,n[0],n[1],n[2],n[3])}return t.apply(e,n)}},function(t,n,e){var r=e(4).parseInt,o=e(43).trim,i=e(72),u=/^[-+]?0[xX]/;t.exports=8!==r(i+"08")||22!==r(i+"0x16")?function(t,n){var e=o(String(t),3);return r(e,n>>>0||(u.test(e)?16:10))}:r},function(t,n,e){var r=e(4).parseFloat,o=e(43).trim;t.exports=1/r(e(72)+"-0")!=-1/0?function(t){var n=o(String(t),3),e=r(n);return 0===e&&"-"==n.charAt(0)?-0:e}:r},function(t,n,e){var r=e(26);t.exports=function(t,n){if("number"!=typeof t&&"Number"!=r(t))throw TypeError(n);return+t}},function(t,n,e){var r=e(7),o=Math.floor;t.exports=function(t){return!r(t)&&isFinite(t)&&o(t)===t}},function(t,n){t.exports=Math.log1p||function(t){return(t=+t)>-1e-8&&t<1e-8?t-t*t/2:Math.log(1+t)}},function(t,n,e){"use strict";var r=e(37),o=e(32),i=e(42),u={};e(17)(u,e(8)("iterator"),function(){return this}),t.exports=function(t,n,e){t.prototype=r(u,{next:o(1,e)}),i(t,n+" Iterator")}},function(t,n,e){var r=e(6);t.exports=function(t,n,e,o){try{return o?n(r(e)[0],e[1]):n(e)}catch(n){var i=t.return;throw void 0!==i&&r(i.call(t)),n}}},function(t,n,e){var r=e(221);t.exports=function(t,n){return new(r(t))(n)}},function(t,n,e){var r=e(21),o=e(13),i=e(48),u=e(9);t.exports=function(t,n,e,c,a){r(n);var s=o(t),f=i(s),l=u(s.length),h=a?l-1:0,g=a?-1:1;if(e<2)for(;;){if(h in f){c=f[h],h+=g;break}if(h+=g,a?h<0:l<=h)throw TypeError("Reduce of empty array with no initial value")}for(;a?h>=0:l>h;h+=g)h in f&&(c=n(c,f[h],h,s));return c}},function(t,n,e){"use strict";var r=e(13),o=e(36),i=e(9);t.exports=[].copyWithin||function(t,n){var e=r(this),u=i(e.length),c=o(t,u),a=o(n,u),s=arguments.length>2?arguments[2]:void 0,f=Math.min((void 0===s?u:o(s,u))-a,u-c),l=1;for(a<c&&c<a+f&&(l=-1,a+=f-1,c+=f-1);f-- >0;)a in e?e[c]=e[a]:delete e[c],c+=l,a+=l;return e}},function(t,n){t.exports=function(t,n){return{value:n,done:!!t}}},function(t,n,e){"use strict";var r=e(87);e(0)({target:"RegExp",proto:!0,forced:r!==/./.exec},{exec:r})},function(t,n,e){e(11)&&"g"!=/./g.flags&&e(12).f(RegExp.prototype,"flags",{configurable:!0,get:e(57)})},function(t,n,e){"use strict";var r,o,i,u,c=e(34),a=e(4),s=e(20),f=e(50),l=e(0),h=e(7),g=e(21),d=e(46),p=e(60),v=e(51),m=e(89).set,y=e(241)(),b=e(117),A=e(242),x=e(61),w=e(118),_=a.TypeError,S=a.process,O=S&&S.versions,E=O&&O.v8||"",j=a.Promise,k="process"==f(S),P=function(){},I=o=b.f,T=!!function(){try{var t=j.resolve(1),n=(t.constructor={})[e(8)("species")]=function(t){t(P,P)};return(k||"function"==typeof PromiseRejectionEvent)&&t.then(P)instanceof n&&0!==E.indexOf("6.6")&&-1===x.indexOf("Chrome/66")}catch(t){}}(),M=function(t){var n;return!(!h(t)||"function"!=typeof(n=t.then))&&n},F=function(t,n){if(!t._n){t._n=!0;var e=t._c;y(function(){for(var r=t._v,o=1==t._s,i=0,u=function(n){var e,i,u,c=o?n.ok:n.fail,a=n.resolve,s=n.reject,f=n.domain;try{c?(o||(2==t._h&&L(t),t._h=1),!0===c?e=r:(f&&f.enter(),e=c(r),f&&(f.exit(),u=!0)),e===n.promise?s(_("Promise-chain cycle")):(i=M(e))?i.call(e,a,s):a(e)):s(r)}catch(t){f&&!u&&f.exit(),s(t)}};e.length>i;)u(e[i++]);t._c=[],t._n=!1,n&&!t._h&&N(t)})}},N=function(t){m.call(a,function(){var n,e,r,o=t._v,i=R(t);if(i&&(n=A(function(){k?S.emit("unhandledRejection",o,t):(e=a.onunhandledrejection)?e({promise:t,reason:o}):(r=a.console)&&r.error&&r.error("Unhandled promise rejection",o)}),t._h=k||R(t)?2:1),t._a=void 0,i&&n.e)throw n.v})},R=function(t){return 1!==t._h&&0===(t._a||t._c).length},L=function(t){m.call(a,function(){var n;k?S.emit("rejectionHandled",t):(n=a.onrejectionhandled)&&n({promise:t,reason:t._v})})},C=function(t){var n=this;n._d||(n._d=!0,(n=n._w||n)._v=t,n._s=2,n._a||(n._a=n._c.slice()),F(n,!0))},D=function(t){var n,e=this;if(!e._d){e._d=!0,e=e._w||e;try{if(e===t)throw _("Promise can't be resolved itself");(n=M(t))?y(function(){var r={_w:e,_d:!1};try{n.call(t,s(D,r,1),s(C,r,1))}catch(t){C.call(r,t)}}):(e._v=t,e._s=1,F(e,!1))}catch(t){C.call({_w:e,_d:!1},t)}}};T||(j=function(t){d(this,j,"Promise","_h"),g(t),r.call(this);try{t(s(D,this,1),s(C,this,1))}catch(t){C.call(this,t)}},(r=function(t){this._c=[],this._a=void 0,this._s=0,this._d=!1,this._v=void 0,this._h=0,this._n=!1}).prototype=e(47)(j.prototype,{then:function(t,n){var e=I(v(this,j));return e.ok="function"!=typeof t||t,e.fail="function"==typeof n&&n,e.domain=k?S.domain:void 0,this._c.push(e),this._a&&this._a.push(e),this._s&&F(this,!1),e.promise},catch:function(t){return this.then(void 0,t)}}),i=function(){var t=new r;this.promise=t,this.resolve=s(D,t,1),this.reject=s(C,t,1)},b.f=I=function(t){return t===j||t===u?new i(t):o(t)}),l(l.G+l.W+l.F*!T,{Promise:j}),e(42)(j,"Promise"),e(45)("Promise"),u=e(10).Promise,l(l.S+l.F*!T,"Promise",{reject:function(t){var n=I(this);return(0,n.reject)(t),n.promise}}),l(l.S+l.F*(c||!T),"Promise",{resolve:function(t){return w(c&&this===u?j:this,t)}}),l(l.S+l.F*!(T&&e(56)(function(t){j.all(t).catch(P)})),"Promise",{all:function(t){var n=this,e=I(n),r=e.resolve,o=e.reject,i=A(function(){var e=[],i=0,u=1;p(t,!1,function(t){var c=i++,a=!1;e.push(void 0),u++,n.resolve(t).then(function(t){a||(a=!0,e[c]=t,--u||r(e))},o)}),--u||r(e)});return i.e&&o(i.v),e.promise},race:function(t){var n=this,e=I(n),r=e.reject,o=A(function(){p(t,!1,function(t){n.resolve(t).then(e.resolve,r)})});return o.e&&r(o.v),e.promise}})},function(t,n,e){"use strict";var r=e(21);function o(t){var n,e;this.promise=new t(function(t,r){if(void 0!==n||void 0!==e)throw TypeError("Bad Promise constructor");n=t,e=r}),this.resolve=r(n),this.reject=r(e)}t.exports.f=function(t){return new o(t)}},function(t,n,e){var r=e(6),o=e(7),i=e(117);t.exports=function(t,n){if(r(t),o(n)&&n.constructor===t)return n;var e=i.f(t);return(0,e.resolve)(n),e.promise}},function(t,n,e){"use strict";var r=e(12).f,o=e(37),i=e(47),u=e(20),c=e(46),a=e(60),s=e(78),f=e(113),l=e(45),h=e(11),g=e(31).fastKey,d=e(41),p=h?"_s":"size",v=function(t,n){var e,r=g(n);if("F"!==r)return t._i[r];for(e=t._f;e;e=e.n)if(e.k==n)return e};t.exports={getConstructor:function(t,n,e,s){var f=t(function(t,r){c(t,f,n,"_i"),t._t=n,t._i=o(null),t._f=void 0,t._l=void 0,t[p]=0,null!=r&&a(r,e,t[s],t)});return i(f.prototype,{clear:function(){for(var t=d(this,n),e=t._i,r=t._f;r;r=r.n)r.r=!0,r.p&&(r.p=r.p.n=void 0),delete e[r.i];t._f=t._l=void 0,t[p]=0},delete:function(t){var e=d(this,n),r=v(e,t);if(r){var o=r.n,i=r.p;delete e._i[r.i],r.r=!0,i&&(i.n=o),o&&(o.p=i),e._f==r&&(e._f=o),e._l==r&&(e._l=i),e[p]--}return!!r},forEach:function(t){d(this,n);for(var e,r=u(t,arguments.length>1?arguments[1]:void 0,3);e=e?e.n:this._f;)for(r(e.v,e.k,this);e&&e.r;)e=e.p},has:function(t){return!!v(d(this,n),t)}}),h&&r(f.prototype,"size",{get:function(){return d(this,n)[p]}}),f},def:function(t,n,e){var r,o,i=v(t,n);return i?i.v=e:(t._l=i={i:o=g(n,!0),k:n,v:e,p:r=t._l,n:void 0,r:!1},t._f||(t._f=i),r&&(r.n=i),t[p]++,"F"!==o&&(t._i[o]=i)),t},getEntry:v,setStrong:function(t,n,e){s(t,n,function(t,e){this._t=d(t,n),this._k=e,this._l=void 0},function(){for(var t=this._k,n=this._l;n&&n.r;)n=n.p;return this._t&&(this._l=n=n?n.n:this._t._f)?f(0,"keys"==t?n.k:"values"==t?n.v:[n.k,n.v]):(this._t=void 0,f(1))},e?"entries":"values",!e,!0),l(n)}}},function(t,n,e){"use strict";var r=e(47),o=e(31).getWeak,i=e(6),u=e(7),c=e(46),a=e(60),s=e(25),f=e(16),l=e(41),h=s(5),g=s(6),d=0,p=function(t){return t._l||(t._l=new v)},v=function(){this.a=[]},m=function(t,n){return h(t.a,function(t){return t[0]===n})};v.prototype={get:function(t){var n=m(this,t);if(n)return n[1]},has:function(t){return!!m(this,t)},set:function(t,n){var e=m(this,t);e?e[1]=n:this.a.push([t,n])},delete:function(t){var n=g(this.a,function(n){return n[0]===t});return~n&&this.a.splice(n,1),!!~n}},t.exports={getConstructor:function(t,n,e,i){var s=t(function(t,r){c(t,s,n,"_i"),t._t=n,t._i=d++,t._l=void 0,null!=r&&a(r,e,t[i],t)});return r(s.prototype,{delete:function(t){if(!u(t))return!1;var e=o(t);return!0===e?p(l(this,n)).delete(t):e&&f(e,this._i)&&delete e[this._i]},has:function(t){if(!u(t))return!1;var e=o(t);return!0===e?p(l(this,n)).has(t):e&&f(e,this._i)}}),s},def:function(t,n,e){var r=o(i(n),!0);return!0===r?p(t).set(n,e):r[t._i]=e,t},ufstore:p}},function(t,n,e){var r=e(22),o=e(9);t.exports=function(t){if(void 0===t)return 0;var n=r(t),e=o(n);if(n!==e)throw RangeError("Wrong length!");return e}},function(t,n,e){var r=e(38),o=e(54),i=e(6),u=e(4).Reflect;t.exports=u&&u.ownKeys||function(t){var n=r.f(i(t)),e=o.f;return e?n.concat(e(t)):n}},function(t,n,e){var r=e(9),o=e(74),i=e(27);t.exports=function(t,n,e,u){var c=String(i(t)),a=c.length,s=void 0===e?" ":String(e),f=r(n);if(f<=a||""==s)return c;var l=f-a,h=o.call(s,Math.ceil(l/s.length));return h.length>l&&(h=h.slice(0,l)),u?h+c:c+h}},function(t,n,e){var r=e(11),o=e(35),i=e(18),u=e(49).f;t.exports=function(t){return function(n){for(var e,c=i(n),a=o(c),s=a.length,f=0,l=[];s>f;)e=a[f++],r&&!u.call(c,e)||l.push(t?[e,c[e]]:c[e]);return l}}},function(t,n){var e=t.exports={version:"2.6.11"};"number"==typeof __e&&(__e=e)},function(t,n){t.exports=function(t){try{return!!t()}catch(t){return!0}}},function(t,n,e){"use strict";e(128);var r,o=(r=e(300))&&r.__esModule?r:{default:r};o.default._babelPolyfill&&"undefined"!=typeof console&&console.warn&&console.warn("@babel/polyfill is loaded more than once on this page. This is probably not desirable/intended and may have consequences if different versions of the polyfills are applied sequentially. If you do need to load the polyfill more than once, use @babel/polyfill/noConflict instead to bypass the warning."),o.default._babelPolyfill=!0},function(t,n,e){"use strict";e(129),e(272),e(274),e(277),e(279),e(281),e(283),e(285),e(287),e(289),e(291),e(293),e(295),e(299)},function(t,n,e){e(130),e(133),e(134),e(135),e(136),e(137),e(138),e(139),e(140),e(141),e(142),e(143),e(144),e(145),e(146),e(147),e(148),e(149),e(150),e(151),e(152),e(153),e(154),e(155),e(156),e(157),e(158),e(159),e(160),e(161),e(162),e(163),e(164),e(165),e(166),e(167),e(168),e(169),e(170),e(171),e(172),e(173),e(174),e(176),e(177),e(178),e(179),e(180),e(181),e(182),e(183),e(184),e(185),e(186),e(187),e(188),e(189),e(190),e(191),e(192),e(193),e(194),e(195),e(196),e(197),e(198),e(199),e(200),e(201),e(202),e(203),e(204),e(205),e(206),e(207),e(208),e(209),e(211),e(212),e(214),e(215),e(216),e(217),e(218),e(219),e(220),e(222),e(223),e(224),e(225),e(226),e(227),e(228),e(229),e(230),e(231),e(232),e(233),e(234),e(86),e(235),e(114),e(236),e(115),e(237),e(238),e(239),e(240),e(116),e(243),e(244),e(245),e(246),e(247),e(248),e(249),e(250),e(251),e(252),e(253),e(254),e(255),e(256),e(257),e(258),e(259),e(260),e(261),e(262),e(263),e(264),e(265),e(266),e(267),e(268),e(269),e(270),e(271),t.exports=e(10)},function(t,n,e){"use strict";var r=e(4),o=e(16),i=e(11),u=e(0),c=e(14),a=e(31).KEY,s=e(5),f=e(52),l=e(42),h=e(33),g=e(8),d=e(67),p=e(95),v=e(132),m=e(55),y=e(6),b=e(7),A=e(13),x=e(18),w=e(30),_=e(32),S=e(37),O=e(98),E=e(23),j=e(54),k=e(12),P=e(35),I=E.f,T=k.f,M=O.f,F=r.Symbol,N=r.JSON,R=N&&N.stringify,L=g("_hidden"),C=g("toPrimitive"),D={}.propertyIsEnumerable,U=f("symbol-registry"),$=f("symbols"),B=f("op-symbols"),V=Object.prototype,W="function"==typeof F&&!!j.f,q=r.QObject,G=!q||!q.prototype||!q.prototype.findChild,z=i&&s(function(){return 7!=S(T({},"a",{get:function(){return T(this,"a",{value:7}).a}})).a})?function(t,n,e){var r=I(V,n);r&&delete V[n],T(t,n,e),r&&t!==V&&T(V,n,r)}:T,Y=function(t){var n=$[t]=S(F.prototype);return n._k=t,n},J=W&&"symbol"==typeof F.iterator?function(t){return"symbol"==typeof t}:function(t){return t instanceof F},K=function(t,n,e){return t===V&&K(B,n,e),y(t),n=w(n,!0),y(e),o($,n)?(e.enumerable?(o(t,L)&&t[L][n]&&(t[L][n]=!1),e=S(e,{enumerable:_(0,!1)})):(o(t,L)||T(t,L,_(1,{})),t[L][n]=!0),z(t,n,e)):T(t,n,e)},X=function(t,n){y(t);for(var e,r=v(n=x(n)),o=0,i=r.length;i>o;)K(t,e=r[o++],n[e]);return t},H=function(t){var n=D.call(this,t=w(t,!0));return!(this===V&&o($,t)&&!o(B,t))&&(!(n||!o(this,t)||!o($,t)||o(this,L)&&this[L][t])||n)},Z=function(t,n){if(t=x(t),n=w(n,!0),t!==V||!o($,n)||o(B,n)){var e=I(t,n);return!e||!o($,n)||o(t,L)&&t[L][n]||(e.enumerable=!0),e}},Q=function(t){for(var n,e=M(x(t)),r=[],i=0;e.length>i;)o($,n=e[i++])||n==L||n==a||r.push(n);return r},tt=function(t){for(var n,e=t===V,r=M(e?B:x(t)),i=[],u=0;r.length>u;)!o($,n=r[u++])||e&&!o(V,n)||i.push($[n]);return i};W||(c((F=function(){if(this instanceof F)throw TypeError("Symbol is not a constructor!");var t=h(arguments.length>0?arguments[0]:void 0),n=function(e){this===V&&n.call(B,e),o(this,L)&&o(this[L],t)&&(this[L][t]=!1),z(this,t,_(1,e))};return i&&G&&z(V,t,{configurable:!0,set:n}),Y(t)}).prototype,"toString",function(){return this._k}),E.f=Z,k.f=K,e(38).f=O.f=Q,e(49).f=H,j.f=tt,i&&!e(34)&&c(V,"propertyIsEnumerable",H,!0),d.f=function(t){return Y(g(t))}),u(u.G+u.W+u.F*!W,{Symbol:F});for(var nt="hasInstance,isConcatSpreadable,iterator,match,replace,search,species,split,toPrimitive,toStringTag,unscopables".split(","),et=0;nt.length>et;)g(nt[et++]);for(var rt=P(g.store),ot=0;rt.length>ot;)p(rt[ot++]);u(u.S+u.F*!W,"Symbol",{for:function(t){return o(U,t+="")?U[t]:U[t]=F(t)},keyFor:function(t){if(!J(t))throw TypeError(t+" is not a symbol!");for(var n in U)if(U[n]===t)return n},useSetter:function(){G=!0},useSimple:function(){G=!1}}),u(u.S+u.F*!W,"Object",{create:function(t,n){return void 0===n?S(t):X(S(t),n)},defineProperty:K,defineProperties:X,getOwnPropertyDescriptor:Z,getOwnPropertyNames:Q,getOwnPropertySymbols:tt});var it=s(function(){j.f(1)});u(u.S+u.F*it,"Object",{getOwnPropertySymbols:function(t){return j.f(A(t))}}),N&&u(u.S+u.F*(!W||s(function(){var t=F();return"[null]"!=R([t])||"{}"!=R({a:t})||"{}"!=R(Object(t))})),"JSON",{stringify:function(t){for(var n,e,r=[t],o=1;arguments.length>o;)r.push(arguments[o++]);if(e=n=r[1],(b(n)||void 0!==t)&&!J(t))return m(n)||(n=function(t,n){if("function"==typeof e&&(n=e.call(this,t,n)),!J(n))return n}),r[1]=n,R.apply(N,r)}}),F.prototype[C]||e(17)(F.prototype,C,F.prototype.valueOf),l(F,"Symbol"),l(Math,"Math",!0),l(r.JSON,"JSON",!0)},function(t,n,e){t.exports=e(52)("native-function-to-string",Function.toString)},function(t,n,e){var r=e(35),o=e(54),i=e(49);t.exports=function(t){var n=r(t),e=o.f;if(e)for(var u,c=e(t),a=i.f,s=0;c.length>s;)a.call(t,u=c[s++])&&n.push(u);return n}},function(t,n,e){var r=e(0);r(r.S,"Object",{create:e(37)})},function(t,n,e){var r=e(0);r(r.S+r.F*!e(11),"Object",{defineProperty:e(12).f})},function(t,n,e){var r=e(0);r(r.S+r.F*!e(11),"Object",{defineProperties:e(97)})},function(t,n,e){var r=e(18),o=e(23).f;e(24)("getOwnPropertyDescriptor",function(){return function(t,n){return o(r(t),n)}})},function(t,n,e){var r=e(13),o=e(39);e(24)("getPrototypeOf",function(){return function(t){return o(r(t))}})},function(t,n,e){var r=e(13),o=e(35);e(24)("keys",function(){return function(t){return o(r(t))}})},function(t,n,e){e(24)("getOwnPropertyNames",function(){return e(98).f})},function(t,n,e){var r=e(7),o=e(31).onFreeze;e(24)("freeze",function(t){return function(n){return t&&r(n)?t(o(n)):n}})},function(t,n,e){var r=e(7),o=e(31).onFreeze;e(24)("seal",function(t){return function(n){return t&&r(n)?t(o(n)):n}})},function(t,n,e){var r=e(7),o=e(31).onFreeze;e(24)("preventExtensions",function(t){return function(n){return t&&r(n)?t(o(n)):n}})},function(t,n,e){var r=e(7);e(24)("isFrozen",function(t){return function(n){return!r(n)||!!t&&t(n)}})},function(t,n,e){var r=e(7);e(24)("isSealed",function(t){return function(n){return!r(n)||!!t&&t(n)}})},function(t,n,e){var r=e(7);e(24)("isExtensible",function(t){return function(n){return!!r(n)&&(!t||t(n))}})},function(t,n,e){var r=e(0);r(r.S+r.F,"Object",{assign:e(99)})},function(t,n,e){var r=e(0);r(r.S,"Object",{is:e(100)})},function(t,n,e){var r=e(0);r(r.S,"Object",{setPrototypeOf:e(71).set})},function(t,n,e){"use strict";var r=e(50),o={};o[e(8)("toStringTag")]="z",o+""!="[object z]"&&e(14)(Object.prototype,"toString",function(){return"[object "+r(this)+"]"},!0)},function(t,n,e){var r=e(0);r(r.P,"Function",{bind:e(101)})},function(t,n,e){var r=e(12).f,o=Function.prototype,i=/^\s*function ([^ (]*)/;"name"in o||e(11)&&r(o,"name",{configurable:!0,get:function(){try{return(""+this).match(i)[1]}catch(t){return""}}})},function(t,n,e){"use strict";var r=e(7),o=e(39),i=e(8)("hasInstance"),u=Function.prototype;i in u||e(12).f(u,i,{value:function(t){if("function"!=typeof this||!r(t))return!1;if(!r(this.prototype))return t instanceof this;for(;t=o(t);)if(this.prototype===t)return!0;return!1}})},function(t,n,e){var r=e(0),o=e(103);r(r.G+r.F*(parseInt!=o),{parseInt:o})},function(t,n,e){var r=e(0),o=e(104);r(r.G+r.F*(parseFloat!=o),{parseFloat:o})},function(t,n,e){"use strict";var r=e(4),o=e(16),i=e(26),u=e(73),c=e(30),a=e(5),s=e(38).f,f=e(23).f,l=e(12).f,h=e(43).trim,g=r.Number,d=g,p=g.prototype,v="Number"==i(e(37)(p)),m="trim"in String.prototype,y=function(t){var n=c(t,!1);if("string"==typeof n&&n.length>2){var e,r,o,i=(n=m?n.trim():h(n,3)).charCodeAt(0);if(43===i||45===i){if(88===(e=n.charCodeAt(2))||120===e)return NaN}else if(48===i){switch(n.charCodeAt(1)){case 66:case 98:r=2,o=49;break;case 79:case 111:r=8,o=55;break;default:return+n}for(var u,a=n.slice(2),s=0,f=a.length;s<f;s++)if((u=a.charCodeAt(s))<48||u>o)return NaN;return parseInt(a,r)}}return+n};if(!g(" 0o1")||!g("0b1")||g("+0x1")){g=function(t){var n=arguments.length<1?0:t,e=this;return e instanceof g&&(v?a(function(){p.valueOf.call(e)}):"Number"!=i(e))?u(new d(y(n)),e,g):y(n)};for(var b,A=e(11)?s(d):"MAX_VALUE,MIN_VALUE,NaN,NEGATIVE_INFINITY,POSITIVE_INFINITY,EPSILON,isFinite,isInteger,isNaN,isSafeInteger,MAX_SAFE_INTEGER,MIN_SAFE_INTEGER,parseFloat,parseInt,isInteger".split(","),x=0;A.length>x;x++)o(d,b=A[x])&&!o(g,b)&&l(g,b,f(d,b));g.prototype=p,p.constructor=g,e(14)(r,"Number",g)}},function(t,n,e){"use strict";var r=e(0),o=e(22),i=e(105),u=e(74),c=1..toFixed,a=Math.floor,s=[0,0,0,0,0,0],f="Number.toFixed: incorrect invocation!",l=function(t,n){for(var e=-1,r=n;++e<6;)r+=t*s[e],s[e]=r%1e7,r=a(r/1e7)},h=function(t){for(var n=6,e=0;--n>=0;)e+=s[n],s[n]=a(e/t),e=e%t*1e7},g=function(){for(var t=6,n="";--t>=0;)if(""!==n||0===t||0!==s[t]){var e=String(s[t]);n=""===n?e:n+u.call("0",7-e.length)+e}return n},d=function(t,n,e){return 0===n?e:n%2==1?d(t,n-1,e*t):d(t*t,n/2,e)};r(r.P+r.F*(!!c&&("0.000"!==8e-5.toFixed(3)||"1"!==.9.toFixed(0)||"1.25"!==1.255.toFixed(2)||"1000000000000000128"!==(0xde0b6b3a7640080).toFixed(0))||!e(5)(function(){c.call({})})),"Number",{toFixed:function(t){var n,e,r,c,a=i(this,f),s=o(t),p="",v="0";if(s<0||s>20)throw RangeError(f);if(a!=a)return"NaN";if(a<=-1e21||a>=1e21)return String(a);if(a<0&&(p="-",a=-a),a>1e-21)if(e=(n=function(t){for(var n=0,e=t;e>=4096;)n+=12,e/=4096;for(;e>=2;)n+=1,e/=2;return n}(a*d(2,69,1))-69)<0?a*d(2,-n,1):a/d(2,n,1),e*=4503599627370496,(n=52-n)>0){for(l(0,e),r=s;r>=7;)l(1e7,0),r-=7;for(l(d(10,r,1),0),r=n-1;r>=23;)h(1<<23),r-=23;h(1<<r),l(1,1),h(2),v=g()}else l(0,e),l(1<<-n,0),v=g()+u.call("0",s);return v=s>0?p+((c=v.length)<=s?"0."+u.call("0",s-c)+v:v.slice(0,c-s)+"."+v.slice(c-s)):p+v}})},function(t,n,e){"use strict";var r=e(0),o=e(5),i=e(105),u=1..toPrecision;r(r.P+r.F*(o(function(){return"1"!==u.call(1,void 0)})||!o(function(){u.call({})})),"Number",{toPrecision:function(t){var n=i(this,"Number#toPrecision: incorrect invocation!");return void 0===t?u.call(n):u.call(n,t)}})},function(t,n,e){var r=e(0);r(r.S,"Number",{EPSILON:Math.pow(2,-52)})},function(t,n,e){var r=e(0),o=e(4).isFinite;r(r.S,"Number",{isFinite:function(t){return"number"==typeof t&&o(t)}})},function(t,n,e){var r=e(0);r(r.S,"Number",{isInteger:e(106)})},function(t,n,e){var r=e(0);r(r.S,"Number",{isNaN:function(t){return t!=t}})},function(t,n,e){var r=e(0),o=e(106),i=Math.abs;r(r.S,"Number",{isSafeInteger:function(t){return o(t)&&i(t)<=9007199254740991}})},function(t,n,e){var r=e(0);r(r.S,"Number",{MAX_SAFE_INTEGER:9007199254740991})},function(t,n,e){var r=e(0);r(r.S,"Number",{MIN_SAFE_INTEGER:-9007199254740991})},function(t,n,e){var r=e(0),o=e(104);r(r.S+r.F*(Number.parseFloat!=o),"Number",{parseFloat:o})},function(t,n,e){var r=e(0),o=e(103);r(r.S+r.F*(Number.parseInt!=o),"Number",{parseInt:o})},function(t,n,e){var r=e(0),o=e(107),i=Math.sqrt,u=Math.acosh;r(r.S+r.F*!(u&&710==Math.floor(u(Number.MAX_VALUE))&&u(1/0)==1/0),"Math",{acosh:function(t){return(t=+t)<1?NaN:t>94906265.62425156?Math.log(t)+Math.LN2:o(t-1+i(t-1)*i(t+1))}})},function(t,n,e){var r=e(0),o=Math.asinh;r(r.S+r.F*!(o&&1/o(0)>0),"Math",{asinh:function t(n){return isFinite(n=+n)&&0!=n?n<0?-t(-n):Math.log(n+Math.sqrt(n*n+1)):n}})},function(t,n,e){var r=e(0),o=Math.atanh;r(r.S+r.F*!(o&&1/o(-0)<0),"Math",{atanh:function(t){return 0==(t=+t)?t:Math.log((1+t)/(1-t))/2}})},function(t,n,e){var r=e(0),o=e(75);r(r.S,"Math",{cbrt:function(t){return o(t=+t)*Math.pow(Math.abs(t),1/3)}})},function(t,n,e){var r=e(0);r(r.S,"Math",{clz32:function(t){return(t>>>=0)?31-Math.floor(Math.log(t+.5)*Math.LOG2E):32}})},function(t,n,e){var r=e(0),o=Math.exp;r(r.S,"Math",{cosh:function(t){return(o(t=+t)+o(-t))/2}})},function(t,n,e){var r=e(0),o=e(76);r(r.S+r.F*(o!=Math.expm1),"Math",{expm1:o})},function(t,n,e){var r=e(0);r(r.S,"Math",{fround:e(175)})},function(t,n,e){var r=e(75),o=Math.pow,i=o(2,-52),u=o(2,-23),c=o(2,127)*(2-u),a=o(2,-126);t.exports=Math.fround||function(t){var n,e,o=Math.abs(t),s=r(t);return o<a?s*(o/a/u+1/i-1/i)*a*u:(e=(n=(1+u/i)*o)-(n-o))>c||e!=e?s*(1/0):s*e}},function(t,n,e){var r=e(0),o=Math.abs;r(r.S,"Math",{hypot:function(t,n){for(var e,r,i=0,u=0,c=arguments.length,a=0;u<c;)a<(e=o(arguments[u++]))?(i=i*(r=a/e)*r+1,a=e):i+=e>0?(r=e/a)*r:e;return a===1/0?1/0:a*Math.sqrt(i)}})},function(t,n,e){var r=e(0),o=Math.imul;r(r.S+r.F*e(5)(function(){return-5!=o(4294967295,5)||2!=o.length}),"Math",{imul:function(t,n){var e=+t,r=+n,o=65535&e,i=65535&r;return 0|o*i+((65535&e>>>16)*i+o*(65535&r>>>16)<<16>>>0)}})},function(t,n,e){var r=e(0);r(r.S,"Math",{log10:function(t){return Math.log(t)*Math.LOG10E}})},function(t,n,e){var r=e(0);r(r.S,"Math",{log1p:e(107)})},function(t,n,e){var r=e(0);r(r.S,"Math",{log2:function(t){return Math.log(t)/Math.LN2}})},function(t,n,e){var r=e(0);r(r.S,"Math",{sign:e(75)})},function(t,n,e){var r=e(0),o=e(76),i=Math.exp;r(r.S+r.F*e(5)(function(){return-2e-17!=!Math.sinh(-2e-17)}),"Math",{sinh:function(t){return Math.abs(t=+t)<1?(o(t)-o(-t))/2:(i(t-1)-i(-t-1))*(Math.E/2)}})},function(t,n,e){var r=e(0),o=e(76),i=Math.exp;r(r.S,"Math",{tanh:function(t){var n=o(t=+t),e=o(-t);return n==1/0?1:e==1/0?-1:(n-e)/(i(t)+i(-t))}})},function(t,n,e){var r=e(0);r(r.S,"Math",{trunc:function(t){return(t>0?Math.floor:Math.ceil)(t)}})},function(t,n,e){var r=e(0),o=e(36),i=String.fromCharCode,u=String.fromCodePoint;r(r.S+r.F*(!!u&&1!=u.length),"String",{fromCodePoint:function(t){for(var n,e=[],r=arguments.length,u=0;r>u;){if(n=+arguments[u++],o(n,1114111)!==n)throw RangeError(n+" is not a valid code point");e.push(n<65536?i(n):i(55296+((n-=65536)>>10),n%1024+56320))}return e.join("")}})},function(t,n,e){var r=e(0),o=e(18),i=e(9);r(r.S,"String",{raw:function(t){for(var n=o(t.raw),e=i(n.length),r=arguments.length,u=[],c=0;e>c;)u.push(String(n[c++])),c<r&&u.push(String(arguments[c]));return u.join("")}})},function(t,n,e){"use strict";e(43)("trim",function(t){return function(){return t(this,3)}})},function(t,n,e){"use strict";var r=e(77)(!0);e(78)(String,"String",function(t){this._t=String(t),this._i=0},function(){var t,n=this._t,e=this._i;return e>=n.length?{value:void 0,done:!0}:(t=r(n,e),this._i+=t.length,{value:t,done:!1})})},function(t,n,e){"use strict";var r=e(0),o=e(77)(!1);r(r.P,"String",{codePointAt:function(t){return o(this,t)}})},function(t,n,e){"use strict";var r=e(0),o=e(9),i=e(79),u="".endsWith;r(r.P+r.F*e(81)("endsWith"),"String",{endsWith:function(t){var n=i(this,t,"endsWith"),e=arguments.length>1?arguments[1]:void 0,r=o(n.length),c=void 0===e?r:Math.min(o(e),r),a=String(t);return u?u.call(n,a,c):n.slice(c-a.length,c)===a}})},function(t,n,e){"use strict";var r=e(0),o=e(79);r(r.P+r.F*e(81)("includes"),"String",{includes:function(t){return!!~o(this,t,"includes").indexOf(t,arguments.length>1?arguments[1]:void 0)}})},function(t,n,e){var r=e(0);r(r.P,"String",{repeat:e(74)})},function(t,n,e){"use strict";var r=e(0),o=e(9),i=e(79),u="".startsWith;r(r.P+r.F*e(81)("startsWith"),"String",{startsWith:function(t){var n=i(this,t,"startsWith"),e=o(Math.min(arguments.length>1?arguments[1]:void 0,n.length)),r=String(t);return u?u.call(n,r,e):n.slice(e,e+r.length)===r}})},function(t,n,e){"use strict";e(15)("anchor",function(t){return function(n){return t(this,"a","name",n)}})},function(t,n,e){"use strict";e(15)("big",function(t){return function(){return t(this,"big","","")}})},function(t,n,e){"use strict";e(15)("blink",function(t){return function(){return t(this,"blink","","")}})},function(t,n,e){"use strict";e(15)("bold",function(t){return function(){return t(this,"b","","")}})},function(t,n,e){"use strict";e(15)("fixed",function(t){return function(){return t(this,"tt","","")}})},function(t,n,e){"use strict";e(15)("fontcolor",function(t){return function(n){return t(this,"font","color",n)}})},function(t,n,e){"use strict";e(15)("fontsize",function(t){return function(n){return t(this,"font","size",n)}})},function(t,n,e){"use strict";e(15)("italics",function(t){return function(){return t(this,"i","","")}})},function(t,n,e){"use strict";e(15)("link",function(t){return function(n){return t(this,"a","href",n)}})},function(t,n,e){"use strict";e(15)("small",function(t){return function(){return t(this,"small","","")}})},function(t,n,e){"use strict";e(15)("strike",function(t){return function(){return t(this,"strike","","")}})},function(t,n,e){"use strict";e(15)("sub",function(t){return function(){return t(this,"sub","","")}})},function(t,n,e){"use strict";e(15)("sup",function(t){return function(){return t(this,"sup","","")}})},function(t,n,e){var r=e(0);r(r.S,"Date",{now:function(){return(new Date).getTime()}})},function(t,n,e){"use strict";var r=e(0),o=e(13),i=e(30);r(r.P+r.F*e(5)(function(){return null!==new Date(NaN).toJSON()||1!==Date.prototype.toJSON.call({toISOString:function(){return 1}})}),"Date",{toJSON:function(t){var n=o(this),e=i(n);return"number"!=typeof e||isFinite(e)?n.toISOString():null}})},function(t,n,e){var r=e(0),o=e(210);r(r.P+r.F*(Date.prototype.toISOString!==o),"Date",{toISOString:o})},function(t,n,e){"use strict";var r=e(5),o=Date.prototype.getTime,i=Date.prototype.toISOString,u=function(t){return t>9?t:"0"+t};t.exports=r(function(){return"0385-07-25T07:06:39.999Z"!=i.call(new Date(-5e13-1))})||!r(function(){i.call(new Date(NaN))})?function(){if(!isFinite(o.call(this)))throw RangeError("Invalid time value");var t=this,n=t.getUTCFullYear(),e=t.getUTCMilliseconds(),r=n<0?"-":n>9999?"+":"";return r+("00000"+Math.abs(n)).slice(r?-6:-4)+"-"+u(t.getUTCMonth()+1)+"-"+u(t.getUTCDate())+"T"+u(t.getUTCHours())+":"+u(t.getUTCMinutes())+":"+u(t.getUTCSeconds())+"."+(e>99?e:"0"+u(e))+"Z"}:i},function(t,n,e){var r=Date.prototype,o=r.toString,i=r.getTime;new Date(NaN)+""!="Invalid Date"&&e(14)(r,"toString",function(){var t=i.call(this);return t==t?o.call(this):"Invalid Date"})},function(t,n,e){var r=e(8)("toPrimitive"),o=Date.prototype;r in o||e(17)(o,r,e(213))},function(t,n,e){"use strict";var r=e(6),o=e(30);t.exports=function(t){if("string"!==t&&"number"!==t&&"default"!==t)throw TypeError("Incorrect hint");return o(r(this),"number"!=t)}},function(t,n,e){var r=e(0);r(r.S,"Array",{isArray:e(55)})},function(t,n,e){"use strict";var r=e(20),o=e(0),i=e(13),u=e(109),c=e(82),a=e(9),s=e(83),f=e(84);o(o.S+o.F*!e(56)(function(t){Array.from(t)}),"Array",{from:function(t){var n,e,o,l,h=i(t),g="function"==typeof this?this:Array,d=arguments.length,p=d>1?arguments[1]:void 0,v=void 0!==p,m=0,y=f(h);if(v&&(p=r(p,d>2?arguments[2]:void 0,2)),null==y||g==Array&&c(y))for(e=new g(n=a(h.length));n>m;m++)s(e,m,v?p(h[m],m):h[m]);else for(l=y.call(h),e=new g;!(o=l.next()).done;m++)s(e,m,v?u(l,p,[o.value,m],!0):o.value);return e.length=m,e}})},function(t,n,e){"use strict";var r=e(0),o=e(83);r(r.S+r.F*e(5)(function(){function t(){}return!(Array.of.call(t)instanceof t)}),"Array",{of:function(){for(var t=0,n=arguments.length,e=new("function"==typeof this?this:Array)(n);n>t;)o(e,t,arguments[t++]);return e.length=n,e}})},function(t,n,e){"use strict";var r=e(0),o=e(18),i=[].join;r(r.P+r.F*(e(48)!=Object||!e(19)(i)),"Array",{join:function(t){return i.call(o(this),void 0===t?",":t)}})},function(t,n,e){"use strict";var r=e(0),o=e(70),i=e(26),u=e(36),c=e(9),a=[].slice;r(r.P+r.F*e(5)(function(){o&&a.call(o)}),"Array",{slice:function(t,n){var e=c(this.length),r=i(this);if(n=void 0===n?e:n,"Array"==r)return a.call(this,t,n);for(var o=u(t,e),s=u(n,e),f=c(s-o),l=new Array(f),h=0;h<f;h++)l[h]="String"==r?this.charAt(o+h):this[o+h];return l}})},function(t,n,e){"use strict";var r=e(0),o=e(21),i=e(13),u=e(5),c=[].sort,a=[1,2,3];r(r.P+r.F*(u(function(){a.sort(void 0)})||!u(function(){a.sort(null)})||!e(19)(c)),"Array",{sort:function(t){return void 0===t?c.call(i(this)):c.call(i(this),o(t))}})},function(t,n,e){"use strict";var r=e(0),o=e(25)(0),i=e(19)([].forEach,!0);r(r.P+r.F*!i,"Array",{forEach:function(t){return o(this,t,arguments[1])}})},function(t,n,e){var r=e(7),o=e(55),i=e(8)("species");t.exports=function(t){var n;return o(t)&&("function"!=typeof(n=t.constructor)||n!==Array&&!o(n.prototype)||(n=void 0),r(n)&&null===(n=n[i])&&(n=void 0)),void 0===n?Array:n}},function(t,n,e){"use strict";var r=e(0),o=e(25)(1);r(r.P+r.F*!e(19)([].map,!0),"Array",{map:function(t){return o(this,t,arguments[1])}})},function(t,n,e){"use strict";var r=e(0),o=e(25)(2);r(r.P+r.F*!e(19)([].filter,!0),"Array",{filter:function(t){return o(this,t,arguments[1])}})},function(t,n,e){"use strict";var r=e(0),o=e(25)(3);r(r.P+r.F*!e(19)([].some,!0),"Array",{some:function(t){return o(this,t,arguments[1])}})},function(t,n,e){"use strict";var r=e(0),o=e(25)(4);r(r.P+r.F*!e(19)([].every,!0),"Array",{every:function(t){return o(this,t,arguments[1])}})},function(t,n,e){"use strict";var r=e(0),o=e(111);r(r.P+r.F*!e(19)([].reduce,!0),"Array",{reduce:function(t){return o(this,t,arguments.length,arguments[1],!1)}})},function(t,n,e){"use strict";var r=e(0),o=e(111);r(r.P+r.F*!e(19)([].reduceRight,!0),"Array",{reduceRight:function(t){return o(this,t,arguments.length,arguments[1],!0)}})},function(t,n,e){"use strict";var r=e(0),o=e(53)(!1),i=[].indexOf,u=!!i&&1/[1].indexOf(1,-0)<0;r(r.P+r.F*(u||!e(19)(i)),"Array",{indexOf:function(t){return u?i.apply(this,arguments)||0:o(this,t,arguments[1])}})},function(t,n,e){"use strict";var r=e(0),o=e(18),i=e(22),u=e(9),c=[].lastIndexOf,a=!!c&&1/[1].lastIndexOf(1,-0)<0;r(r.P+r.F*(a||!e(19)(c)),"Array",{lastIndexOf:function(t){if(a)return c.apply(this,arguments)||0;var n=o(this),e=u(n.length),r=e-1;for(arguments.length>1&&(r=Math.min(r,i(arguments[1]))),r<0&&(r=e+r);r>=0;r--)if(r in n&&n[r]===t)return r||0;return-1}})},function(t,n,e){var r=e(0);r(r.P,"Array",{copyWithin:e(112)}),e(40)("copyWithin")},function(t,n,e){var r=e(0);r(r.P,"Array",{fill:e(85)}),e(40)("fill")},function(t,n,e){"use strict";var r=e(0),o=e(25)(5),i=!0;"find"in[]&&Array(1).find(function(){i=!1}),r(r.P+r.F*i,"Array",{find:function(t){return o(this,t,arguments.length>1?arguments[1]:void 0)}}),e(40)("find")},function(t,n,e){"use strict";var r=e(0),o=e(25)(6),i="findIndex",u=!0;i in[]&&Array(1)[i](function(){u=!1}),r(r.P+r.F*u,"Array",{findIndex:function(t){return o(this,t,arguments.length>1?arguments[1]:void 0)}}),e(40)(i)},function(t,n,e){e(45)("Array")},function(t,n,e){var r=e(4),o=e(73),i=e(12).f,u=e(38).f,c=e(80),a=e(57),s=r.RegExp,f=s,l=s.prototype,h=/a/g,g=/a/g,d=new s(h)!==h;if(e(11)&&(!d||e(5)(function(){return g[e(8)("match")]=!1,s(h)!=h||s(g)==g||"/a/i"!=s(h,"i")}))){s=function(t,n){var e=this instanceof s,r=c(t),i=void 0===n;return!e&&r&&t.constructor===s&&i?t:o(d?new f(r&&!i?t.source:t,n):f((r=t instanceof s)?t.source:t,r&&i?a.call(t):n),e?this:l,s)};for(var p=function(t){t in s||i(s,t,{configurable:!0,get:function(){return f[t]},set:function(n){f[t]=n}})},v=u(f),m=0;v.length>m;)p(v[m++]);l.constructor=s,s.prototype=l,e(14)(r,"RegExp",s)}e(45)("RegExp")},function(t,n,e){"use strict";e(115);var r=e(6),o=e(57),i=e(11),u=/./.toString,c=function(t){e(14)(RegExp.prototype,"toString",t,!0)};e(5)(function(){return"/a/b"!=u.call({source:"a",flags:"b"})})?c(function(){var t=r(this);return"/".concat(t.source,"/","flags"in t?t.flags:!i&&t instanceof RegExp?o.call(t):void 0)}):"toString"!=u.name&&c(function(){return u.call(this)})},function(t,n,e){"use strict";var r=e(6),o=e(9),i=e(88),u=e(58);e(59)("match",1,function(t,n,e,c){return[function(e){var r=t(this),o=null==e?void 0:e[n];return void 0!==o?o.call(e,r):new RegExp(e)[n](String(r))},function(t){var n=c(e,t,this);if(n.done)return n.value;var a=r(t),s=String(this);if(!a.global)return u(a,s);var f=a.unicode;a.lastIndex=0;for(var l,h=[],g=0;null!==(l=u(a,s));){var d=String(l[0]);h[g]=d,""===d&&(a.lastIndex=i(s,o(a.lastIndex),f)),g++}return 0===g?null:h}]})},function(t,n,e){"use strict";var r=e(6),o=e(13),i=e(9),u=e(22),c=e(88),a=e(58),s=Math.max,f=Math.min,l=Math.floor,h=/\$([$&`']|\d\d?|<[^>]*>)/g,g=/\$([$&`']|\d\d?)/g;e(59)("replace",2,function(t,n,e,d){return[function(r,o){var i=t(this),u=null==r?void 0:r[n];return void 0!==u?u.call(r,i,o):e.call(String(i),r,o)},function(t,n){var o=d(e,t,this,n);if(o.done)return o.value;var l=r(t),h=String(this),g="function"==typeof n;g||(n=String(n));var v=l.global;if(v){var m=l.unicode;l.lastIndex=0}for(var y=[];;){var b=a(l,h);if(null===b)break;if(y.push(b),!v)break;""===String(b[0])&&(l.lastIndex=c(h,i(l.lastIndex),m))}for(var A,x="",w=0,_=0;_<y.length;_++){b=y[_];for(var S=String(b[0]),O=s(f(u(b.index),h.length),0),E=[],j=1;j<b.length;j++)E.push(void 0===(A=b[j])?A:String(A));var k=b.groups;if(g){var P=[S].concat(E,O,h);void 0!==k&&P.push(k);var I=String(n.apply(void 0,P))}else I=p(S,h,O,E,k,n);O>=w&&(x+=h.slice(w,O)+I,w=O+S.length)}return x+h.slice(w)}];function p(t,n,r,i,u,c){var a=r+t.length,s=i.length,f=g;return void 0!==u&&(u=o(u),f=h),e.call(c,f,function(e,o){var c;switch(o.charAt(0)){case"$":return"$";case"&":return t;case"`":return n.slice(0,r);case"'":return n.slice(a);case"<":c=u[o.slice(1,-1)];break;default:var f=+o;if(0===f)return e;if(f>s){var h=l(f/10);return 0===h?e:h<=s?void 0===i[h-1]?o.charAt(1):i[h-1]+o.charAt(1):e}c=i[f-1]}return void 0===c?"":c})}})},function(t,n,e){"use strict";var r=e(6),o=e(100),i=e(58);e(59)("search",1,function(t,n,e,u){return[function(e){var r=t(this),o=null==e?void 0:e[n];return void 0!==o?o.call(e,r):new RegExp(e)[n](String(r))},function(t){var n=u(e,t,this);if(n.done)return n.value;var c=r(t),a=String(this),s=c.lastIndex;o(s,0)||(c.lastIndex=0);var f=i(c,a);return o(c.lastIndex,s)||(c.lastIndex=s),null===f?-1:f.index}]})},function(t,n,e){"use strict";var r=e(80),o=e(6),i=e(51),u=e(88),c=e(9),a=e(58),s=e(87),f=e(5),l=Math.min,h=[].push,g=!f(function(){RegExp(4294967295,"y")});e(59)("split",2,function(t,n,e,f){var d;return d="c"=="abbc".split(/(b)*/)[1]||4!="test".split(/(?:)/,-1).length||2!="ab".split(/(?:ab)*/).length||4!=".".split(/(.?)(.?)/).length||".".split(/()()/).length>1||"".split(/.?/).length?function(t,n){var o=String(this);if(void 0===t&&0===n)return[];if(!r(t))return e.call(o,t,n);for(var i,u,c,a=[],f=(t.ignoreCase?"i":"")+(t.multiline?"m":"")+(t.unicode?"u":"")+(t.sticky?"y":""),l=0,g=void 0===n?4294967295:n>>>0,d=new RegExp(t.source,f+"g");(i=s.call(d,o))&&!((u=d.lastIndex)>l&&(a.push(o.slice(l,i.index)),i.length>1&&i.index<o.length&&h.apply(a,i.slice(1)),c=i[0].length,l=u,a.length>=g));)d.lastIndex===i.index&&d.lastIndex++;return l===o.length?!c&&d.test("")||a.push(""):a.push(o.slice(l)),a.length>g?a.slice(0,g):a}:"0".split(void 0,0).length?function(t,n){return void 0===t&&0===n?[]:e.call(this,t,n)}:e,[function(e,r){var o=t(this),i=null==e?void 0:e[n];return void 0!==i?i.call(e,o,r):d.call(String(o),e,r)},function(t,n){var r=f(d,t,this,n,d!==e);if(r.done)return r.value;var s=o(t),h=String(this),p=i(s,RegExp),v=s.unicode,m=(s.ignoreCase?"i":"")+(s.multiline?"m":"")+(s.unicode?"u":"")+(g?"y":"g"),y=new p(g?s:"^(?:"+s.source+")",m),b=void 0===n?4294967295:n>>>0;if(0===b)return[];if(0===h.length)return null===a(y,h)?[h]:[];for(var A=0,x=0,w=[];x<h.length;){y.lastIndex=g?x:0;var _,S=a(y,g?h:h.slice(x));if(null===S||(_=l(c(y.lastIndex+(g?0:x)),h.length))===A)x=u(h,x,v);else{if(w.push(h.slice(A,x)),w.length===b)return w;for(var O=1;O<=S.length-1;O++)if(w.push(S[O]),w.length===b)return w;x=A=_}}return w.push(h.slice(A)),w}]})},function(t,n,e){var r=e(4),o=e(89).set,i=r.MutationObserver||r.WebKitMutationObserver,u=r.process,c=r.Promise,a="process"==e(26)(u);t.exports=function(){var t,n,e,s=function(){var r,o;for(a&&(r=u.domain)&&r.exit();t;){o=t.fn,t=t.next;try{o()}catch(r){throw t?e():n=void 0,r}}n=void 0,r&&r.enter()};if(a)e=function(){u.nextTick(s)};else if(!i||r.navigator&&r.navigator.standalone)if(c&&c.resolve){var f=c.resolve(void 0);e=function(){f.then(s)}}else e=function(){o.call(r,s)};else{var l=!0,h=document.createTextNode("");new i(s).observe(h,{characterData:!0}),e=function(){h.data=l=!l}}return function(r){var o={fn:r,next:void 0};n&&(n.next=o),t||(t=o,e()),n=o}}},function(t,n){t.exports=function(t){try{return{e:!1,v:t()}}catch(t){return{e:!0,v:t}}}},function(t,n,e){"use strict";var r=e(119),o=e(41);t.exports=e(62)("Map",function(t){return function(){return t(this,arguments.length>0?arguments[0]:void 0)}},{get:function(t){var n=r.getEntry(o(this,"Map"),t);return n&&n.v},set:function(t,n){return r.def(o(this,"Map"),0===t?0:t,n)}},r,!0)},function(t,n,e){"use strict";var r=e(119),o=e(41);t.exports=e(62)("Set",function(t){return function(){return t(this,arguments.length>0?arguments[0]:void 0)}},{add:function(t){return r.def(o(this,"Set"),t=0===t?0:t,t)}},r)},function(t,n,e){"use strict";var r,o=e(4),i=e(25)(0),u=e(14),c=e(31),a=e(99),s=e(120),f=e(7),l=e(41),h=e(41),g=!o.ActiveXObject&&"ActiveXObject"in o,d=c.getWeak,p=Object.isExtensible,v=s.ufstore,m=function(t){return function(){return t(this,arguments.length>0?arguments[0]:void 0)}},y={get:function(t){if(f(t)){var n=d(t);return!0===n?v(l(this,"WeakMap")).get(t):n?n[this._i]:void 0}},set:function(t,n){return s.def(l(this,"WeakMap"),t,n)}},b=t.exports=e(62)("WeakMap",m,y,s,!0,!0);h&&g&&(a((r=s.getConstructor(m,"WeakMap")).prototype,y),c.NEED=!0,i(["delete","has","get","set"],function(t){var n=b.prototype,e=n[t];u(n,t,function(n,o){if(f(n)&&!p(n)){this._f||(this._f=new r);var i=this._f[t](n,o);return"set"==t?this:i}return e.call(this,n,o)})}))},function(t,n,e){"use strict";var r=e(120),o=e(41);e(62)("WeakSet",function(t){return function(){return t(this,arguments.length>0?arguments[0]:void 0)}},{add:function(t){return r.def(o(this,"WeakSet"),t,!0)}},r,!1,!0)},function(t,n,e){"use strict";var r=e(0),o=e(63),i=e(90),u=e(6),c=e(36),a=e(9),s=e(7),f=e(4).ArrayBuffer,l=e(51),h=i.ArrayBuffer,g=i.DataView,d=o.ABV&&f.isView,p=h.prototype.slice,v=o.VIEW;r(r.G+r.W+r.F*(f!==h),{ArrayBuffer:h}),r(r.S+r.F*!o.CONSTR,"ArrayBuffer",{isView:function(t){return d&&d(t)||s(t)&&v in t}}),r(r.P+r.U+r.F*e(5)(function(){return!new h(2).slice(1,void 0).byteLength}),"ArrayBuffer",{slice:function(t,n){if(void 0!==p&&void 0===n)return p.call(u(this),t);for(var e=u(this).byteLength,r=c(t,e),o=c(void 0===n?e:n,e),i=new(l(this,h))(a(o-r)),s=new g(this),f=new g(i),d=0;r<o;)f.setUint8(d++,s.getUint8(r++));return i}}),e(45)("ArrayBuffer")},function(t,n,e){var r=e(0);r(r.G+r.W+r.F*!e(63).ABV,{DataView:e(90).DataView})},function(t,n,e){e(28)("Int8",1,function(t){return function(n,e,r){return t(this,n,e,r)}})},function(t,n,e){e(28)("Uint8",1,function(t){return function(n,e,r){return t(this,n,e,r)}})},function(t,n,e){e(28)("Uint8",1,function(t){return function(n,e,r){return t(this,n,e,r)}},!0)},function(t,n,e){e(28)("Int16",2,function(t){return function(n,e,r){return t(this,n,e,r)}})},function(t,n,e){e(28)("Uint16",2,function(t){return function(n,e,r){return t(this,n,e,r)}})},function(t,n,e){e(28)("Int32",4,function(t){return function(n,e,r){return t(this,n,e,r)}})},function(t,n,e){e(28)("Uint32",4,function(t){return function(n,e,r){return t(this,n,e,r)}})},function(t,n,e){e(28)("Float32",4,function(t){return function(n,e,r){return t(this,n,e,r)}})},function(t,n,e){e(28)("Float64",8,function(t){return function(n,e,r){return t(this,n,e,r)}})},function(t,n,e){var r=e(0),o=e(21),i=e(6),u=(e(4).Reflect||{}).apply,c=Function.apply;r(r.S+r.F*!e(5)(function(){u(function(){})}),"Reflect",{apply:function(t,n,e){var r=o(t),a=i(e);return u?u(r,n,a):c.call(r,n,a)}})},function(t,n,e){var r=e(0),o=e(37),i=e(21),u=e(6),c=e(7),a=e(5),s=e(101),f=(e(4).Reflect||{}).construct,l=a(function(){function t(){}return!(f(function(){},[],t)instanceof t)}),h=!a(function(){f(function(){})});r(r.S+r.F*(l||h),"Reflect",{construct:function(t,n){i(t),u(n);var e=arguments.length<3?t:i(arguments[2]);if(h&&!l)return f(t,n,e);if(t==e){switch(n.length){case 0:return new t;case 1:return new t(n[0]);case 2:return new t(n[0],n[1]);case 3:return new t(n[0],n[1],n[2]);case 4:return new t(n[0],n[1],n[2],n[3])}var r=[null];return r.push.apply(r,n),new(s.apply(t,r))}var a=e.prototype,g=o(c(a)?a:Object.prototype),d=Function.apply.call(t,g,n);return c(d)?d:g}})},function(t,n,e){var r=e(12),o=e(0),i=e(6),u=e(30);o(o.S+o.F*e(5)(function(){Reflect.defineProperty(r.f({},1,{value:1}),1,{value:2})}),"Reflect",{defineProperty:function(t,n,e){i(t),n=u(n,!0),i(e);try{return r.f(t,n,e),!0}catch(t){return!1}}})},function(t,n,e){var r=e(0),o=e(23).f,i=e(6);r(r.S,"Reflect",{deleteProperty:function(t,n){var e=o(i(t),n);return!(e&&!e.configurable)&&delete t[n]}})},function(t,n,e){"use strict";var r=e(0),o=e(6),i=function(t){this._t=o(t),this._i=0;var n,e=this._k=[];for(n in t)e.push(n)};e(108)(i,"Object",function(){var t,n=this._k;do{if(this._i>=n.length)return{value:void 0,done:!0}}while(!((t=n[this._i++])in this._t));return{value:t,done:!1}}),r(r.S,"Reflect",{enumerate:function(t){return new i(t)}})},function(t,n,e){var r=e(23),o=e(39),i=e(16),u=e(0),c=e(7),a=e(6);u(u.S,"Reflect",{get:function t(n,e){var u,s,f=arguments.length<3?n:arguments[2];return a(n)===f?n[e]:(u=r.f(n,e))?i(u,"value")?u.value:void 0!==u.get?u.get.call(f):void 0:c(s=o(n))?t(s,e,f):void 0}})},function(t,n,e){var r=e(23),o=e(0),i=e(6);o(o.S,"Reflect",{getOwnPropertyDescriptor:function(t,n){return r.f(i(t),n)}})},function(t,n,e){var r=e(0),o=e(39),i=e(6);r(r.S,"Reflect",{getPrototypeOf:function(t){return o(i(t))}})},function(t,n,e){var r=e(0);r(r.S,"Reflect",{has:function(t,n){return n in t}})},function(t,n,e){var r=e(0),o=e(6),i=Object.isExtensible;r(r.S,"Reflect",{isExtensible:function(t){return o(t),!i||i(t)}})},function(t,n,e){var r=e(0);r(r.S,"Reflect",{ownKeys:e(122)})},function(t,n,e){var r=e(0),o=e(6),i=Object.preventExtensions;r(r.S,"Reflect",{preventExtensions:function(t){o(t);try{return i&&i(t),!0}catch(t){return!1}}})},function(t,n,e){var r=e(12),o=e(23),i=e(39),u=e(16),c=e(0),a=e(32),s=e(6),f=e(7);c(c.S,"Reflect",{set:function t(n,e,c){var l,h,g=arguments.length<4?n:arguments[3],d=o.f(s(n),e);if(!d){if(f(h=i(n)))return t(h,e,c,g);d=a(0)}if(u(d,"value")){if(!1===d.writable||!f(g))return!1;if(l=o.f(g,e)){if(l.get||l.set||!1===l.writable)return!1;l.value=c,r.f(g,e,l)}else r.f(g,e,a(0,c));return!0}return void 0!==d.set&&(d.set.call(g,c),!0)}})},function(t,n,e){var r=e(0),o=e(71);o&&r(r.S,"Reflect",{setPrototypeOf:function(t,n){o.check(t,n);try{return o.set(t,n),!0}catch(t){return!1}}})},function(t,n,e){e(273),t.exports=e(10).Array.includes},function(t,n,e){"use strict";var r=e(0),o=e(53)(!0);r(r.P,"Array",{includes:function(t){return o(this,t,arguments.length>1?arguments[1]:void 0)}}),e(40)("includes")},function(t,n,e){e(275),t.exports=e(10).Array.flatMap},function(t,n,e){"use strict";var r=e(0),o=e(276),i=e(13),u=e(9),c=e(21),a=e(110);r(r.P,"Array",{flatMap:function(t){var n,e,r=i(this);return c(t),n=u(r.length),e=a(r,0),o(e,r,r,n,0,1,t,arguments[1]),e}}),e(40)("flatMap")},function(t,n,e){"use strict";var r=e(55),o=e(7),i=e(9),u=e(20),c=e(8)("isConcatSpreadable");t.exports=function t(n,e,a,s,f,l,h,g){for(var d,p,v=f,m=0,y=!!h&&u(h,g,3);m<s;){if(m in a){if(d=y?y(a[m],m,e):a[m],p=!1,o(d)&&(p=void 0!==(p=d[c])?!!p:r(d)),p&&l>0)v=t(n,e,d,i(d.length),v,l-1)-1;else{if(v>=9007199254740991)throw TypeError();n[v]=d}v++}m++}return v}},function(t,n,e){e(278),t.exports=e(10).String.padStart},function(t,n,e){"use strict";var r=e(0),o=e(123),i=e(61),u=/Version\/10\.\d+(\.\d+)?( Mobile\/\w+)? Safari\//.test(i);r(r.P+r.F*u,"String",{padStart:function(t){return o(this,t,arguments.length>1?arguments[1]:void 0,!0)}})},function(t,n,e){e(280),t.exports=e(10).String.padEnd},function(t,n,e){"use strict";var r=e(0),o=e(123),i=e(61),u=/Version\/10\.\d+(\.\d+)?( Mobile\/\w+)? Safari\//.test(i);r(r.P+r.F*u,"String",{padEnd:function(t){return o(this,t,arguments.length>1?arguments[1]:void 0,!1)}})},function(t,n,e){e(282),t.exports=e(10).String.trimLeft},function(t,n,e){"use strict";e(43)("trimLeft",function(t){return function(){return t(this,1)}},"trimStart")},function(t,n,e){e(284),t.exports=e(10).String.trimRight},function(t,n,e){"use strict";e(43)("trimRight",function(t){return function(){return t(this,2)}},"trimEnd")},function(t,n,e){e(286),t.exports=e(67).f("asyncIterator")},function(t,n,e){e(95)("asyncIterator")},function(t,n,e){e(288),t.exports=e(10).Object.getOwnPropertyDescriptors},function(t,n,e){var r=e(0),o=e(122),i=e(18),u=e(23),c=e(83);r(r.S,"Object",{getOwnPropertyDescriptors:function(t){for(var n,e,r=i(t),a=u.f,s=o(r),f={},l=0;s.length>l;)void 0!==(e=a(r,n=s[l++]))&&c(f,n,e);return f}})},function(t,n,e){e(290),t.exports=e(10).Object.values},function(t,n,e){var r=e(0),o=e(124)(!1);r(r.S,"Object",{values:function(t){return o(t)}})},function(t,n,e){e(292),t.exports=e(10).Object.entries},function(t,n,e){var r=e(0),o=e(124)(!0);r(r.S,"Object",{entries:function(t){return o(t)}})},function(t,n,e){"use strict";e(116),e(294),t.exports=e(10).Promise.finally},function(t,n,e){"use strict";var r=e(0),o=e(10),i=e(4),u=e(51),c=e(118);r(r.P+r.R,"Promise",{finally:function(t){var n=u(this,o.Promise||i.Promise),e="function"==typeof t;return this.then(e?function(e){return c(n,t()).then(function(){return e})}:t,e?function(e){return c(n,t()).then(function(){throw e})}:t)}})},function(t,n,e){e(296),e(297),e(298),t.exports=e(10)},function(t,n,e){var r=e(4),o=e(0),i=e(61),u=[].slice,c=/MSIE .\./.test(i),a=function(t){return function(n,e){var r=arguments.length>2,o=!!r&&u.call(arguments,2);return t(r?function(){("function"==typeof n?n:Function(n)).apply(this,o)}:n,e)}};o(o.G+o.B+o.F*c,{setTimeout:a(r.setTimeout),setInterval:a(r.setInterval)})},function(t,n,e){var r=e(0),o=e(89);r(r.G+r.B,{setImmediate:o.set,clearImmediate:o.clear})},function(t,n,e){for(var r=e(86),o=e(35),i=e(14),u=e(4),c=e(17),a=e(44),s=e(8),f=s("iterator"),l=s("toStringTag"),h=a.Array,g={CSSRuleList:!0,CSSStyleDeclaration:!1,CSSValueList:!1,ClientRectList:!1,DOMRectList:!1,DOMStringList:!1,DOMTokenList:!0,DataTransferItemList:!1,FileList:!1,HTMLAllCollection:!1,HTMLCollection:!1,HTMLFormElement:!1,HTMLSelectElement:!1,MediaList:!0,MimeTypeArray:!1,NamedNodeMap:!1,NodeList:!0,PaintRequestList:!1,Plugin:!1,PluginArray:!1,SVGLengthList:!1,SVGNumberList:!1,SVGPathSegList:!1,SVGPointList:!1,SVGStringList:!1,SVGTransformList:!1,SourceBufferList:!1,StyleSheetList:!0,TextTrackCueList:!1,TextTrackList:!1,TouchList:!1},d=o(g),p=0;p<d.length;p++){var v,m=d[p],y=g[m],b=u[m],A=b&&b.prototype;if(A&&(A[f]||c(A,f,h),A[l]||c(A,l,m),a[m]=h,y))for(v in r)A[v]||i(A,v,r[v],!0)}},function(t,n,e){var r=function(t){"use strict";var n,e=Object.prototype,r=e.hasOwnProperty,o="function"==typeof Symbol?Symbol:{},i=o.iterator||"@@iterator",u=o.asyncIterator||"@@asyncIterator",c=o.toStringTag||"@@toStringTag";function a(t,n,e){return Object.defineProperty(t,n,{value:e,enumerable:!0,configurable:!0,writable:!0}),t[n]}try{a({},"")}catch(t){a=function(t,n,e){return t[n]=e}}function s(t,n,e,r){var o=n&&n.prototype instanceof v?n:v,i=Object.create(o.prototype),u=new k(r||[]);return i._invoke=function(t,n,e){var r=l;return function(o,i){if(r===g)throw new Error("Generator is already running");if(r===d){if("throw"===o)throw i;return I()}for(e.method=o,e.arg=i;;){var u=e.delegate;if(u){var c=O(u,e);if(c){if(c===p)continue;return c}}if("next"===e.method)e.sent=e._sent=e.arg;else if("throw"===e.method){if(r===l)throw r=d,e.arg;e.dispatchException(e.arg)}else"return"===e.method&&e.abrupt("return",e.arg);r=g;var a=f(t,n,e);if("normal"===a.type){if(r=e.done?d:h,a.arg===p)continue;return{value:a.arg,done:e.done}}"throw"===a.type&&(r=d,e.method="throw",e.arg=a.arg)}}}(t,e,u),i}function f(t,n,e){try{return{type:"normal",arg:t.call(n,e)}}catch(t){return{type:"throw",arg:t}}}t.wrap=s;var l="suspendedStart",h="suspendedYield",g="executing",d="completed",p={};function v(){}function m(){}function y(){}var b={};b[i]=function(){return this};var A=Object.getPrototypeOf,x=A&&A(A(P([])));x&&x!==e&&r.call(x,i)&&(b=x);var w=y.prototype=v.prototype=Object.create(b);function _(t){["next","throw","return"].forEach(function(n){a(t,n,function(t){return this._invoke(n,t)})})}function S(t,n){var e;this._invoke=function(o,i){function u(){return new n(function(e,u){!function e(o,i,u,c){var a=f(t[o],t,i);if("throw"!==a.type){var s=a.arg,l=s.value;return l&&"object"==typeof l&&r.call(l,"__await")?n.resolve(l.__await).then(function(t){e("next",t,u,c)},function(t){e("throw",t,u,c)}):n.resolve(l).then(function(t){s.value=t,u(s)},function(t){return e("throw",t,u,c)})}c(a.arg)}(o,i,e,u)})}return e=e?e.then(u,u):u()}}function O(t,e){var r=t.iterator[e.method];if(r===n){if(e.delegate=null,"throw"===e.method){if(t.iterator.return&&(e.method="return",e.arg=n,O(t,e),"throw"===e.method))return p;e.method="throw",e.arg=new TypeError("The iterator does not provide a 'throw' method")}return p}var o=f(r,t.iterator,e.arg);if("throw"===o.type)return e.method="throw",e.arg=o.arg,e.delegate=null,p;var i=o.arg;return i?i.done?(e[t.resultName]=i.value,e.next=t.nextLoc,"return"!==e.method&&(e.method="next",e.arg=n),e.delegate=null,p):i:(e.method="throw",e.arg=new TypeError("iterator result is not an object"),e.delegate=null,p)}function E(t){var n={tryLoc:t[0]};1 in t&&(n.catchLoc=t[1]),2 in t&&(n.finallyLoc=t[2],n.afterLoc=t[3]),this.tryEntries.push(n)}function j(t){var n=t.completion||{};n.type="normal",delete n.arg,t.completion=n}function k(t){this.tryEntries=[{tryLoc:"root"}],t.forEach(E,this),this.reset(!0)}function P(t){if(t){var e=t[i];if(e)return e.call(t);if("function"==typeof t.next)return t;if(!isNaN(t.length)){var o=-1,u=function e(){for(;++o<t.length;)if(r.call(t,o))return e.value=t[o],e.done=!1,e;return e.value=n,e.done=!0,e};return u.next=u}}return{next:I}}function I(){return{value:n,done:!0}}return m.prototype=w.constructor=y,y.constructor=m,m.displayName=a(y,c,"GeneratorFunction"),t.isGeneratorFunction=function(t){var n="function"==typeof t&&t.constructor;return!!n&&(n===m||"GeneratorFunction"===(n.displayName||n.name))},t.mark=function(t){return Object.setPrototypeOf?Object.setPrototypeOf(t,y):(t.__proto__=y,a(t,c,"GeneratorFunction")),t.prototype=Object.create(w),t},t.awrap=function(t){return{__await:t}},_(S.prototype),S.prototype[u]=function(){return this},t.AsyncIterator=S,t.async=function(n,e,r,o,i){void 0===i&&(i=Promise);var u=new S(s(n,e,r,o),i);return t.isGeneratorFunction(e)?u:u.next().then(function(t){return t.done?t.value:u.next()})},_(w),a(w,c,"Generator"),w[i]=function(){return this},w.toString=function(){return"[object Generator]"},t.keys=function(t){var n=[];for(var e in t)n.push(e);return n.reverse(),function e(){for(;n.length;){var r=n.pop();if(r in t)return e.value=r,e.done=!1,e}return e.done=!0,e}},t.values=P,k.prototype={constructor:k,reset:function(t){if(this.prev=0,this.next=0,this.sent=this._sent=n,this.done=!1,this.delegate=null,this.method="next",this.arg=n,this.tryEntries.forEach(j),!t)for(var e in this)"t"===e.charAt(0)&&r.call(this,e)&&!isNaN(+e.slice(1))&&(this[e]=n)},stop:function(){this.done=!0;var t=this.tryEntries[0].completion;if("throw"===t.type)throw t.arg;return this.rval},dispatchException:function(t){if(this.done)throw t;var e=this;function o(r,o){return c.type="throw",c.arg=t,e.next=r,o&&(e.method="next",e.arg=n),!!o}for(var i=this.tryEntries.length-1;i>=0;--i){var u=this.tryEntries[i],c=u.completion;if("root"===u.tryLoc)return o("end");if(u.tryLoc<=this.prev){var a=r.call(u,"catchLoc"),s=r.call(u,"finallyLoc");if(a&&s){if(this.prev<u.catchLoc)return o(u.catchLoc,!0);if(this.prev<u.finallyLoc)return o(u.finallyLoc)}else if(a){if(this.prev<u.catchLoc)return o(u.catchLoc,!0)}else{if(!s)throw new Error("try statement without catch or finally");if(this.prev<u.finallyLoc)return o(u.finallyLoc)}}}},abrupt:function(t,n){for(var e=this.tryEntries.length-1;e>=0;--e){var o=this.tryEntries[e];if(o.tryLoc<=this.prev&&r.call(o,"finallyLoc")&&this.prev<o.finallyLoc){var i=o;break}}i&&("break"===t||"continue"===t)&&i.tryLoc<=n&&n<=i.finallyLoc&&(i=null);var u=i?i.completion:{};return u.type=t,u.arg=n,i?(this.method="next",this.next=i.finallyLoc,p):this.complete(u)},complete:function(t,n){if("throw"===t.type)throw t.arg;return"break"===t.type||"continue"===t.type?this.next=t.arg:"return"===t.type?(this.rval=this.arg=t.arg,this.method="return",this.next="end"):"normal"===t.type&&n&&(this.next=n),p},finish:function(t){for(var n=this.tryEntries.length-1;n>=0;--n){var e=this.tryEntries[n];if(e.finallyLoc===t)return this.complete(e.completion,e.afterLoc),j(e),p}},catch:function(t){for(var n=this.tryEntries.length-1;n>=0;--n){var e=this.tryEntries[n];if(e.tryLoc===t){var r=e.completion;if("throw"===r.type){var o=r.arg;j(e)}return o}}throw new Error("illegal catch attempt")},delegateYield:function(t,e,r){return this.delegate={iterator:P(t),resultName:e,nextLoc:r},"next"===this.method&&(this.arg=n),p}},t}(t.exports);try{regeneratorRuntime=r}catch(t){Function("r","regeneratorRuntime = r")(r)}},function(t,n,e){e(301),t.exports=e(125).global},function(t,n,e){var r=e(302);r(r.G,{global:e(91)})},function(t,n,e){var r=e(91),o=e(125),i=e(303),u=e(305),c=e(312),a=function(t,n,e){var s,f,l,h=t&a.F,g=t&a.G,d=t&a.S,p=t&a.P,v=t&a.B,m=t&a.W,y=g?o:o[n]||(o[n]={}),b=y.prototype,A=g?r:d?r[n]:(r[n]||{}).prototype;for(s in g&&(e=n),e)(f=!h&&A&&void 0!==A[s])&&c(y,s)||(l=f?A[s]:e[s],y[s]=g&&"function"!=typeof A[s]?e[s]:v&&f?i(l,r):m&&A[s]==l?function(t){var n=function(n,e,r){if(this instanceof t){switch(arguments.length){case 0:return new t;case 1:return new t(n);case 2:return new t(n,e)}return new t(n,e,r)}return t.apply(this,arguments)};return n.prototype=t.prototype,n}(l):p&&"function"==typeof l?i(Function.call,l):l,p&&((y.virtual||(y.virtual={}))[s]=l,t&a.R&&b&&!b[s]&&u(b,s,l)))};a.F=1,a.G=2,a.S=4,a.P=8,a.B=16,a.W=32,a.U=64,a.R=128,t.exports=a},function(t,n,e){var r=e(304);t.exports=function(t,n,e){if(r(t),void 0===n)return t;switch(e){case 1:return function(e){return t.call(n,e)};case 2:return function(e,r){return t.call(n,e,r)};case 3:return function(e,r,o){return t.call(n,e,r,o)}}return function(){return t.apply(n,arguments)}}},function(t,n){t.exports=function(t){if("function"!=typeof t)throw TypeError(t+" is not a function!");return t}},function(t,n,e){var r=e(306),o=e(311);t.exports=e(93)?function(t,n,e){return r.f(t,n,o(1,e))}:function(t,n,e){return t[n]=e,t}},function(t,n,e){var r=e(307),o=e(308),i=e(310),u=Object.defineProperty;n.f=e(93)?Object.defineProperty:function(t,n,e){if(r(t),n=i(n,!0),r(e),o)try{return u(t,n,e)}catch(t){}if("get"in e||"set"in e)throw TypeError("Accessors not supported!");return"value"in e&&(t[n]=e.value),t}},function(t,n,e){var r=e(92);t.exports=function(t){if(!r(t))throw TypeError(t+" is not an object!");return t}},function(t,n,e){t.exports=!e(93)&&!e(126)(function(){return 7!=Object.defineProperty(e(309)("div"),"a",{get:function(){return 7}}).a})},function(t,n,e){var r=e(92),o=e(91).document,i=r(o)&&r(o.createElement);t.exports=function(t){return i?o.createElement(t):{}}},function(t,n,e){var r=e(92);t.exports=function(t,n){if(!r(t))return t;var e,o;if(n&&"function"==typeof(e=t.toString)&&!r(o=e.call(t)))return o;if("function"==typeof(e=t.valueOf)&&!r(o=e.call(t)))return o;if(!n&&"function"==typeof(e=t.toString)&&!r(o=e.call(t)))return o;throw TypeError("Can't convert object to primitive value")}},function(t,n){t.exports=function(t,n){return{enumerable:!(1&t),configurable:!(2&t),writable:!(4&t),value:n}}},function(t,n){var e={}.hasOwnProperty;t.exports=function(t,n){return e.call(t,n)}},,function(t,n,e){"use strict";e.r(n),e.d(n,"redditModifications",function(){return l});var r=e(29),o=e(2),i=e(64),u=e(3),c=e.n(u);function a(t,n){return function(t){if(Array.isArray(t))return t}(t)||function(t,n){var e=[],r=!0,o=!1,i=void 0;try{for(var u,c=t[Symbol.iterator]();!(r=(u=c.next()).done)&&(e.push(u.value),!n||e.length!==n);r=!0);}catch(t){o=!0,i=t}finally{try{r||null==c.return||c.return()}finally{if(o)throw i}}return e}(t,n)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}()}var s=/^t1_.+/,f=/^t3_.+/,l=function(t,n,e){var r=null!==document.querySelector("#SHORTCUT_FOCUSABLE_DIV");if(h(r,e),!n)if(r){v($(".Comment"),t),$(document).arrive(".Comment",function(n){v([n],t)});y($(".Post"),t),$(document).arrive(".Post",function(n){y([n],t)});$(document).arrive('.Post div[data-test-id="post-content"]',function(t){d(t,e)})}else{var o=".thing.link, .thing.comment";b($(o),t),$(document).arrive(o,function(n){b([n],t)})}},h=function(t,n){var e=arguments.length>2&&void 0!==arguments[2]?arguments[2]:".Post",r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:{},i=Object(o.getFullIDsFromPath)(window.location.pathname),u=a(i,4),s=u[0],f=u[1];u[2],u[3];t&&f&&0===Object.keys(r).length?c.a.runtime.sendMessage({action:"get-reddit-items-by-id",ids:[s],monitor_quarantined:n}).then(function(n){n&&n.items&&n.items.length&&(r=n.items[0].data,g({isNewReddit:t,newRedditTarget:e,postData:r}))}):g({isNewReddit:t,newRedditTarget:e,postData:r})},g=function(t){var n=t.isNewReddit,e=t.newRedditTarget,r=void 0===e?".Post":e,i=t.postData,u=void 0===i?{}:i,s=a(Object(o.getFullIDsFromPath)(window.location.pathname),4),f=s[0],l=(s[1],s[2],s[3]),h=void 0,g=void 0;if(f&&($('meta[name="robots"][content="noindex,nofollow"]').length||"is_robot_indexable"in u&&!u.is_robot_indexable)){var d=u.author||$(".link .top-matter .author").first().text()||$('.link .top-matter .tagline span:contains("[deleted]")').text()||$('.Post span:contains("u/[deleted]")').first().text();"[deleted]"!==d&&"u/[deleted]"!==d||"moderator"===u.removed_by_category?(h="rev-mod-removed",g="This post is unapproved. It is either waiting to be approved, or it was removed by someone or some robot."):(h="rev-user-deleted",g="This post was either deleted by the person who posted it, or removed by a moderator and then deleted by the person who posted it.")}if(g){var p=" It is not currently visible in r/".concat(l," and may not appear in web search results."),v='<div class="rev-from"><a id="'.concat("goto-options-from-content",'" href="#">Reveddit Real-Time</a> note</div>'),m=window.location.pathname.split("/",6).join("/"),y='<p><a href="https://www.reveddit.com'.concat(m,'/">View the post on Reveddit.com</a></p>');if(n){g+=" More details may appear in a message above from reddit.";var b=$('<div class="rev-new-reddit-message-wrap '.concat(h,'">').concat(v,"</div>")),A=$('<div class="rev-new-reddit-message-content"></div>'),x=$('<div class="rev-new-reddit-message-content-description">'.concat(g).concat(p,"</div>"));A.append(x),A.append(y),b.append(A),$(r).first().after(b)}else{g+=' View the post <a href="https://new.reddit.com'.concat(m,'/">on new reddit</a> for more details.'),$('<div class="reddit-infobar md-container-small '.concat(h,'">')).append(v).append('<div class="md"><p>'.concat(g).concat(p,"</p>").concat(y,"</div>")).prependTo('div.content[role="main"]')}$("#".concat("goto-options-from-content")).click(function(){return c.a.runtime.sendMessage({action:"open-options"})})}},d=function(t,n){var e=a(Object(o.getFullIDsFromPath)(window.location.pathname),4),i=e[0];e[1],e[2],e[3];Object(r.getAuth)().then(function(t){return Object(r.lookupItemsByID)([i],t,n)}).then(function(e){if(e){var r=e[0].data;h(!0,n,t.parentNode,r)}})},p=function(t,n){var e=t.id;return e&&e.match(n)?e:(e=$(t).attr("class").split(/\s+/).filter(function(t){return t.match(n)})[0])&&e.match(n)?e:(e=t.parentNode.id)&&e.match(n)?e:e=$(t).closest("div[tabindex=-1]").attr("id")},v=function(t,n){$(t).each(function(t,e){var r=$(e).closest(".Comment")[0],o=p(r,s);if(o&&o.match(s)){var u=m(r,"save"),c=u.parent();u.length||(c=(u=m(r,"share")).parent(),u.length||(u=$("<button>...</button>"),c=r));var a=u.clone(),f="",l=r.querySelector(".RichTextJSON-root");l&&(f=l.textContent),o in n?Object(i.setTextAndFunction_unsubscribe)(o,a,f).appendTo(c):Object(i.setTextAndFunction_subscribe)(o,a,f).appendTo(c)}})},m=function(t,n){return $(t).find('button:equalsi("'.concat(n,'")')).first()},y=function(t,n){$(t).each(function(t,e){var r=p(e,f);if(r&&r.match(f)){var o=$(e).find('button :equalsi("save")').first().parent(),u=o.clone();u.find("i.icon").first().parent().remove();var c=o.parent().children("button").last();r in n?Object(i.setTextAndFunction_unsubscribe)(r,u).insertAfter(c):Object(i.setTextAndFunction_subscribe)(r,u).insertAfter(c)}})},b=function(t,n){$(t).each(function(t,e){var r=e.getAttribute("data-fullname");if(!r){var u=a(Object(o.getFullIDsFromPath)(e.getAttribute("data-permalink")||""),4),c=u[0],s=u[1];u[2],u[3];s?r=s:c&&(r=c)}if(r){var f=e.querySelector("ul.buttons");if(f){var l="",h=e.querySelector(".usertext-body");h&&r.match(/^t1_/)&&(l=h.textContent);var g=Object(i.setTextAndFunction_subscribe)(r,$('<a href="">')[0],l);r in n&&(g=Object(i.setTextAndFunction_unsubscribe)(r,$('<a href="">')[0],l)),$(f).append(g.wrap("<li>").parent())}}})}},function(t,n,e){"use strict";e.r(n),e.d(n,"revdditModifications",function(){return i});var r=e(1),o=e(64),i=(e(3),function(t,n,e,o){var i,s,f,l,h;(e||o)&&(i="numItemsLoaded",s=document.querySelector(".main"),f="data-numitemsloaded",l=1,h=function(){!function(t,n,e){var o=a(".comment.removed, .post.removed, .comment.deleted, .post.deleted"),i=a(".comment:not(.removed), .post:not(.removed)"),u=a(".comment.locked, .post.locked"),c=a(".comment:not(.locked)");Object(r.markIDsAsSeenIfSubscribed)(t,n,e,o,i,u,c,function(t){chrome.runtime.sendMessage({action:"update-badge"})})}(t,n,e)},new MutationObserver(function(t){var n=document.getElementById(i);n&&n.getAttribute(f)>=l&&(this.disconnect(),h())}).observe(s||document,{childList:!0,subtree:!0}));$(document).arrive(".comment-body-and-links",function(n){u([n],t.other_subscriptions)}),u($(".comment-body-and-links"),t.other_subscriptions),$(document).arrive(".post:not(.deleted)",function(n){c([n],t.other_subscriptions)}),setTimeout(function(){c($(".post:not(.deleted)"),t.other_subscriptions)},2e3)}),u=function(t,n){$(t).each(function(t,e){var r=e.parentNode;if(!r.classList.contains("deleted")){var i=r.id,u=r.querySelector(".comment-links"),c="",a=r.querySelector(".comment-body");a&&i.match(/^t1_/)&&(c=a.textContent);var s=Object(o.setTextAndFunction_subscribe)(i,$('<a href="">')[0],c);i in n&&(s=Object(o.setTextAndFunction_unsubscribe)(i,$('<a href="">')[0],c)),$(u).append(s)}})},c=function(t,n){$(t).each(function(t,e){var r=e.id,i=e.querySelector(".post-links"),u=Object(o.setTextAndFunction_subscribe)(r,$('<a href="">')[0]);r in n&&(u=Object(o.setTextAndFunction_unsubscribe)(r,$('<a href="">')[0])),$(i).append(u)})};function a(t){var n={};return $(t).each(function(){var t=this.getAttribute("id");n[t]=this.getAttribute("data-created_utc")}),n}},,,function(t,n,e){e(127),t.exports=e(319)},function(t,n,e){"use strict";e.r(n);var r=e(1),o=e(314),i=e(315),u=e(29),c=e(3),a=e.n(c);!function(){$.extend($.expr[":"],{equalsi:function(t,n,e,r){return(t.textContent||t.innerText||"").toLowerCase().trim()===e[3].toLowerCase().trim()}}),window.localStorage.setItem("hasSeenLanguageModal",!0),window.localStorage.setItem("hasNotifierExtension",!0),a.a.runtime.onMessage.addListener(function(t,n,e){if("query-user"===t.action)return Object(u.getLoggedinUser)().then(function(t){return t?Object(r.subscribeUser)(t,function(){window.location.href="https://www.reveddit.com/user/".concat(t,"?all=true")}):Promise.resolve("failed")})});var t="other",n=!1,e=!1,c=!1;jQuery(document).ready(function(){var u=window.location.href.match(/^https?:\/\/[^/]*(reddit\.com|reveddit\.com|localhost)/);if(u){c="reddit.com"===u[1];var a=window.location.pathname.split("/");"user"===a[1]&&a.length>=3&&a[2]?(t=window.location.pathname.split("/")[2],n=!0):"info"===a[1]&&(e=!0)}Object(r.getSubscribedUsers_withSeenAndUnseenIDs)(function(r,u){0===Object.keys(r).filter(function(t){return"other"!==t}).length?window.localStorage.setItem("extensionSaysNoSubscriptions",!0):window.localStorage.removeItem("extensionSaysNoSubscriptions"),c?Object(o.redditModifications)(u.other_subscriptions,u.options.hide_subscribe,u.options.monitor_quarantined):Object(i.revdditModifications)(u,t,n,e)})})}()}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fZXhwb3J0LmpzIiwid2VicGFjazovLy8uL3NyYy9zcmMvc3RvcmFnZS5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvc3JjL2NvbW1vbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvd2ViZXh0ZW5zaW9uLXBvbHlmaWxsL2Rpc3QvYnJvd3Nlci1wb2x5ZmlsbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19nbG9iYWwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fZmFpbHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fYW4tb2JqZWN0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2lzLW9iamVjdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL193a3MuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fdG8tbGVuZ3RoLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2NvcmUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fZGVzY3JpcHRvcnMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fb2JqZWN0LWRwLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3RvLW9iamVjdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19yZWRlZmluZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19zdHJpbmctaHRtbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19oYXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faGlkZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL190by1pb2JqZWN0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3N0cmljdC1tZXRob2QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fY3R4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2EtZnVuY3Rpb24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fdG8taW50ZWdlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19vYmplY3QtZ29wZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19vYmplY3Qtc2FwLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2FycmF5LW1ldGhvZHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fY29mLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2RlZmluZWQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fdHlwZWQtYXJyYXkuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3NyYy9yZXF1ZXN0cy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL190by1wcmltaXRpdmUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fbWV0YS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19wcm9wZXJ0eS1kZXNjLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3VpZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19saWJyYXJ5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX29iamVjdC1rZXlzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3RvLWFic29sdXRlLWluZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX29iamVjdC1jcmVhdGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fb2JqZWN0LWdvcG4uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fb2JqZWN0LWdwby5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19hZGQtdG8tdW5zY29wYWJsZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fdmFsaWRhdGUtY29sbGVjdGlvbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19zZXQtdG8tc3RyaW5nLXRhZy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19zdHJpbmctdHJpbS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19pdGVyYXRvcnMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fc2V0LXNwZWNpZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fYW4taW5zdGFuY2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fcmVkZWZpbmUtYWxsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2lvYmplY3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fb2JqZWN0LXBpZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19jbGFzc29mLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3NwZWNpZXMtY29uc3RydWN0b3IuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fc2hhcmVkLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2FycmF5LWluY2x1ZGVzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX29iamVjdC1nb3BzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2lzLWFycmF5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2l0ZXItZGV0ZWN0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2ZsYWdzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3JlZ2V4cC1leGVjLWFic3RyYWN0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2ZpeC1yZS13a3MuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fZm9yLW9mLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3VzZXItYWdlbnQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fY29sbGVjdGlvbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL190eXBlZC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvc3JjL2NvbnRlbnQtY29tbW9uLmpzIiwid2VicGFjazovLy8uL3NyYy9zcmMvbW9uaXRvcmluZy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19kb20tY3JlYXRlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3drcy1leHQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fc2hhcmVkLWtleS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19lbnVtLWJ1Zy1rZXlzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2h0bWwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fc2V0LXByb3RvLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3N0cmluZy13cy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19pbmhlcml0LWlmLXJlcXVpcmVkLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3N0cmluZy1yZXBlYXQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fbWF0aC1zaWduLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX21hdGgtZXhwbTEuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fc3RyaW5nLWF0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2l0ZXItZGVmaW5lLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3N0cmluZy1jb250ZXh0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2lzLXJlZ2V4cC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19mYWlscy1pcy1yZWdleHAuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faXMtYXJyYXktaXRlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19jcmVhdGUtcHJvcGVydHkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9jb3JlLmdldC1pdGVyYXRvci1tZXRob2QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fYXJyYXktZmlsbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5hcnJheS5pdGVyYXRvci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19yZWdleHAtZXhlYy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19hZHZhbmNlLXN0cmluZy1pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL190YXNrLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3R5cGVkLWJ1ZmZlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2dsb2JhbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2lzLW9iamVjdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2Rlc2NyaXB0b3JzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2llOC1kb20tZGVmaW5lLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3drcy1kZWZpbmUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fb2JqZWN0LWtleXMtaW50ZXJuYWwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fb2JqZWN0LWRwcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19vYmplY3QtZ29wbi1leHQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fb2JqZWN0LWFzc2lnbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19zYW1lLXZhbHVlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2JpbmQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faW52b2tlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3BhcnNlLWludC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19wYXJzZS1mbG9hdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19hLW51bWJlci12YWx1ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19pcy1pbnRlZ2VyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX21hdGgtbG9nMXAuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faXRlci1jcmVhdGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faXRlci1jYWxsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2FycmF5LXNwZWNpZXMtY3JlYXRlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2FycmF5LXJlZHVjZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19hcnJheS1jb3B5LXdpdGhpbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19pdGVyLXN0ZXAuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVnZXhwLmV4ZWMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVnZXhwLmZsYWdzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnByb21pc2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fbmV3LXByb21pc2UtY2FwYWJpbGl0eS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19wcm9taXNlLXJlc29sdmUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fY29sbGVjdGlvbi1zdHJvbmcuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fY29sbGVjdGlvbi13ZWFrLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3RvLWluZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX293bi1rZXlzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3N0cmluZy1wYWQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fb2JqZWN0LXRvLWFycmF5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fY29yZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2ZhaWxzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcG9seWZpbGwvbGliL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcG9seWZpbGwvbGliL25vQ29uZmxpY3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvZXM2L2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN5bWJvbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19mdW5jdGlvbi10by1zdHJpbmcuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fZW51bS1rZXlzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm9iamVjdC5jcmVhdGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYub2JqZWN0LmRlZmluZS1wcm9wZXJ0eS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5vYmplY3QuZGVmaW5lLXByb3BlcnRpZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYub2JqZWN0LmdldC1vd24tcHJvcGVydHktZGVzY3JpcHRvci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5vYmplY3QuZ2V0LXByb3RvdHlwZS1vZi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5vYmplY3Qua2V5cy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5vYmplY3QuZ2V0LW93bi1wcm9wZXJ0eS1uYW1lcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5vYmplY3QuZnJlZXplLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm9iamVjdC5zZWFsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm9iamVjdC5wcmV2ZW50LWV4dGVuc2lvbnMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYub2JqZWN0LmlzLWZyb3plbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5vYmplY3QuaXMtc2VhbGVkLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm9iamVjdC5pcy1leHRlbnNpYmxlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm9iamVjdC5hc3NpZ24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYub2JqZWN0LmlzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm9iamVjdC5zZXQtcHJvdG90eXBlLW9mLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm9iamVjdC50by1zdHJpbmcuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuZnVuY3Rpb24uYmluZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5mdW5jdGlvbi5uYW1lLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmZ1bmN0aW9uLmhhcy1pbnN0YW5jZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5wYXJzZS1pbnQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucGFyc2UtZmxvYXQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubnVtYmVyLmNvbnN0cnVjdG9yLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm51bWJlci50by1maXhlZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5udW1iZXIudG8tcHJlY2lzaW9uLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm51bWJlci5lcHNpbG9uLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm51bWJlci5pcy1maW5pdGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubnVtYmVyLmlzLWludGVnZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubnVtYmVyLmlzLW5hbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5udW1iZXIuaXMtc2FmZS1pbnRlZ2VyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm51bWJlci5tYXgtc2FmZS1pbnRlZ2VyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm51bWJlci5taW4tc2FmZS1pbnRlZ2VyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm51bWJlci5wYXJzZS1mbG9hdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5udW1iZXIucGFyc2UtaW50LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm1hdGguYWNvc2guanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubWF0aC5hc2luaC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5tYXRoLmF0YW5oLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm1hdGguY2JydC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5tYXRoLmNsejMyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm1hdGguY29zaC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5tYXRoLmV4cG0xLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm1hdGguZnJvdW5kLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX21hdGgtZnJvdW5kLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm1hdGguaHlwb3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubWF0aC5pbXVsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm1hdGgubG9nMTAuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubWF0aC5sb2cxcC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5tYXRoLmxvZzIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubWF0aC5zaWduLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm1hdGguc2luaC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5tYXRoLnRhbmguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubWF0aC50cnVuYy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5zdHJpbmcuZnJvbS1jb2RlLXBvaW50LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5yYXcuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLnRyaW0uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLml0ZXJhdG9yLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5jb2RlLXBvaW50LWF0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5lbmRzLXdpdGguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLmluY2x1ZGVzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5yZXBlYXQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLnN0YXJ0cy13aXRoLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5hbmNob3IuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLmJpZy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5zdHJpbmcuYmxpbmsuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLmJvbGQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLmZpeGVkLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5mb250Y29sb3IuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLmZvbnRzaXplLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5pdGFsaWNzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5saW5rLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5zbWFsbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5zdHJpbmcuc3RyaWtlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5zdWIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLnN1cC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5kYXRlLm5vdy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5kYXRlLnRvLWpzb24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuZGF0ZS50by1pc28tc3RyaW5nLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2RhdGUtdG8taXNvLXN0cmluZy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5kYXRlLnRvLXN0cmluZy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5kYXRlLnRvLXByaW1pdGl2ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19kYXRlLXRvLXByaW1pdGl2ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5hcnJheS5pcy1hcnJheS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5hcnJheS5mcm9tLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmFycmF5Lm9mLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmFycmF5LmpvaW4uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkuc2xpY2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkuc29ydC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5hcnJheS5mb3ItZWFjaC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19hcnJheS1zcGVjaWVzLWNvbnN0cnVjdG9yLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmFycmF5Lm1hcC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5hcnJheS5maWx0ZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkuc29tZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5hcnJheS5ldmVyeS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5hcnJheS5yZWR1Y2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkucmVkdWNlLXJpZ2h0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmFycmF5LmluZGV4LW9mLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmFycmF5Lmxhc3QtaW5kZXgtb2YuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkuY29weS13aXRoaW4uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkuZmlsbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5hcnJheS5maW5kLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmFycmF5LmZpbmQtaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkuc3BlY2llcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5yZWdleHAuY29uc3RydWN0b3IuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVnZXhwLnRvLXN0cmluZy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5yZWdleHAubWF0Y2guanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVnZXhwLnJlcGxhY2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVnZXhwLnNlYXJjaC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5yZWdleHAuc3BsaXQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fbWljcm90YXNrLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3BlcmZvcm0uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubWFwLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnNldC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi53ZWFrLW1hcC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi53ZWFrLXNldC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi50eXBlZC5hcnJheS1idWZmZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYudHlwZWQuZGF0YS12aWV3LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnR5cGVkLmludDgtYXJyYXkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYudHlwZWQudWludDgtYXJyYXkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYudHlwZWQudWludDgtY2xhbXBlZC1hcnJheS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi50eXBlZC5pbnQxNi1hcnJheS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi50eXBlZC51aW50MTYtYXJyYXkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYudHlwZWQuaW50MzItYXJyYXkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYudHlwZWQudWludDMyLWFycmF5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnR5cGVkLmZsb2F0MzItYXJyYXkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYudHlwZWQuZmxvYXQ2NC1hcnJheS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5yZWZsZWN0LmFwcGx5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnJlZmxlY3QuY29uc3RydWN0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnJlZmxlY3QuZGVmaW5lLXByb3BlcnR5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnJlZmxlY3QuZGVsZXRlLXByb3BlcnR5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnJlZmxlY3QuZW51bWVyYXRlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnJlZmxlY3QuZ2V0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnJlZmxlY3QuZ2V0LW93bi1wcm9wZXJ0eS1kZXNjcmlwdG9yLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnJlZmxlY3QuZ2V0LXByb3RvdHlwZS1vZi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5yZWZsZWN0Lmhhcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5yZWZsZWN0LmlzLWV4dGVuc2libGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVmbGVjdC5vd24ta2V5cy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5yZWZsZWN0LnByZXZlbnQtZXh0ZW5zaW9ucy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5yZWZsZWN0LnNldC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5yZWZsZWN0LnNldC1wcm90b3R5cGUtb2YuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvZm4vYXJyYXkvaW5jbHVkZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcuYXJyYXkuaW5jbHVkZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvZm4vYXJyYXkvZmxhdC1tYXAuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcuYXJyYXkuZmxhdC1tYXAuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fZmxhdHRlbi1pbnRvLWFycmF5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ZuL3N0cmluZy9wYWQtc3RhcnQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcuc3RyaW5nLnBhZC1zdGFydC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9mbi9zdHJpbmcvcGFkLWVuZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5zdHJpbmcucGFkLWVuZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9mbi9zdHJpbmcvdHJpbS1zdGFydC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5zdHJpbmcudHJpbS1sZWZ0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ZuL3N0cmluZy90cmltLWVuZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5zdHJpbmcudHJpbS1yaWdodC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9mbi9zeW1ib2wvYXN5bmMtaXRlcmF0b3IuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcuc3ltYm9sLmFzeW5jLWl0ZXJhdG9yLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ZuL29iamVjdC9nZXQtb3duLXByb3BlcnR5LWRlc2NyaXB0b3JzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3Lm9iamVjdC5nZXQtb3duLXByb3BlcnR5LWRlc2NyaXB0b3JzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ZuL29iamVjdC92YWx1ZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcub2JqZWN0LnZhbHVlcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9mbi9vYmplY3QvZW50cmllcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5vYmplY3QuZW50cmllcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9mbi9wcm9taXNlL2ZpbmFsbHkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcucHJvbWlzZS5maW5hbGx5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL3dlYi9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL3dlYi50aW1lcnMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy93ZWIuaW1tZWRpYXRlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvd2ViLmRvbS5pdGVyYWJsZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVnZW5lcmF0b3ItcnVudGltZS9ydW50aW1lLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvZm4vZ2xvYmFsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9lczcuZ2xvYmFsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fZXhwb3J0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fY3R4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fYS1mdW5jdGlvbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2hpZGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19vYmplY3QtZHAuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19hbi1vYmplY3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19pZTgtZG9tLWRlZmluZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2RvbS1jcmVhdGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL190by1wcmltaXRpdmUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19wcm9wZXJ0eS1kZXNjLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9faGFzLmpzIiwid2VicGFjazovLy8uL3NyYy9zcmMvY29udGVudC1yZWRkaXQuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3NyYy9jb250ZW50LXJldmRkaXQuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3NyYy9jb250ZW50LmpzIl0sIm5hbWVzIjpbImluc3RhbGxlZE1vZHVsZXMiLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJleHBvcnRzIiwibW9kdWxlIiwiaSIsImwiLCJtb2R1bGVzIiwiY2FsbCIsIm0iLCJjIiwiZCIsIm5hbWUiLCJnZXR0ZXIiLCJvIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJlbnVtZXJhYmxlIiwiZ2V0IiwiciIsIlN5bWJvbCIsInRvU3RyaW5nVGFnIiwidmFsdWUiLCJ0IiwibW9kZSIsIl9fZXNNb2R1bGUiLCJucyIsImNyZWF0ZSIsImtleSIsImJpbmQiLCJuIiwib2JqZWN0IiwicHJvcGVydHkiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsInAiLCJzIiwiZ2xvYmFsIiwiY29yZSIsImhpZGUiLCJyZWRlZmluZSIsImN0eCIsIiRleHBvcnQiLCJ0eXBlIiwic291cmNlIiwib3duIiwib3V0IiwiZXhwIiwiSVNfRk9SQ0VEIiwiRiIsIklTX0dMT0JBTCIsIkciLCJJU19TVEFUSUMiLCJTIiwiSVNfUFJPVE8iLCJQIiwiSVNfQklORCIsIkIiLCJ0YXJnZXQiLCJleHBQcm90byIsInVuZGVmaW5lZCIsIkZ1bmN0aW9uIiwiVSIsIlciLCJSIiwiSU5URVJWQUxfREVGQVVMVCIsIk1BWF9TWU5DX1NUT1JBR0VfSVRFTVNfUEVSX09CSkVDVCIsIk1BWF9TWU5DX1NUT1JBR0VfQ0hBTkdFUyIsIk1BWF9PVEhFUl9TVUJTQ1JJUFRJT05TIiwiUkVNT1ZFRCIsIkFQUFJPVkVEIiwiTE9DS0VEIiwiVU5MT0NLRUQiLCJFRElURUQiLCJERUxFVEVEIiwidHJhY2tUeXBlcyIsImNoYW5nZXMiLCJyZW1vdmVkIiwiYXBwcm92ZWQiLCJsb2NrZWQiLCJ1bmxvY2tlZCIsImdldE9iamVjdE5hbWUiLCJ0aGluZyIsImlzVXNlciIsImFkZFRyYWNrVHlwZXMiLCJhcmd1bWVudHMiLCJsZW5ndGgiLCJrZXlzIiwiZm9yRWFjaCIsImdldE9iamVjdE5hbWVzRm9yVGhpbmciLCJuYW1lcyIsImdldFVzZXJJbml0IiwidXNlciIsInJlc3VsdCIsIm1hcmtFdmVyeXRoaW5nQXNTZWVuIiwiYnJvd3NlciIsInN0b3JhZ2UiLCJzeW5jIiwidGhlbiIsInVzZXJfc3Vic2NyaXB0aW9ucyIsIm1hcmtUaGluZ0FzU2VlbiIsInNldFN0b3JhZ2VVcGRhdGVCYWRnZSIsImZ1bGxLZXluYW1lcyIsInZhbHVlcyIsImZ1bGxLZXluYW1lIiwicHVzaCIsIml0ZW0iLCJ1Iiwic2V0IiwicmVzIiwicnVudGltZSIsInNlbmRNZXNzYWdlIiwiYWN0aW9uIiwibWFya1NlZW5Gb3JTdG9yYWdlS2V5Iiwic3RvcmFnZV9rZXlzIiwiaWRzIiwiaXNfdXNlciIsInN0b3JhZ2VfaXRlbSIsImlkIiwiSXRlbUZvclN0b3JhZ2UiLCJtYXJrSURzQXNTZWVuSWZTdWJzY3JpYmVkIiwicmVtb3ZlZF9pZHMiLCJhcHByb3ZlZF9pZHMiLCJsb2NrZWRfaWRzIiwidW5sb2NrZWRfaWRzIiwiY2FsbGJhY2siLCJ1c2VyX3N1YnNjcmliZWQiLCJjaHJvbWUiLCJzdWJzY3JpYmVJZCIsIk1hdGgiLCJmbG9vciIsIkRhdGUiLCJnZXRUaW1lIiwiaXRlbXNUb1NhdmUiLCJ0cmltRGljdF9ieV9udW1iZXJWYWx1ZWRBdHRyaWJ1dGUiLCJfZGVmaW5lUHJvcGVydHkiLCJ1bnN1YnNjcmliZUlkIiwibWFpbktleSIsIm90aGVyS2V5cyIsImNvbmNhdCIsImdldFN1YnNjcmliZWRJZHMiLCJzdWJzY3JpYmVVc2VyIiwiY2FsbGJhY2tTdWNjZXNzIiwiY2FsbGJhY2tFcnJvciIsInVzZXJJbml0IiwiX29iamVjdFNwcmVhZCIsInVuc3Vic2NyaWJlVXNlciIsInVzZXJLZXlzIiwicmVtb3ZlIiwidXNlcktleV9sb2NhbFN0b3JhZ2UiLCJsb2NhbCIsImluaXRTdG9yYWdlIiwib3RoZXJfc3Vic2NyaXB0aW9ucyIsIm9wdGlvbnMiLCJpbnRlcnZhbCIsImN1c3RvbV9jbGllbnRpZCIsInJlbW92YWxfc3RhdHVzIiwidHJhY2siLCJub3RpZnkiLCJsb2NrX3N0YXR1cyIsIm1vbml0b3JfcXVhcmFudGluZWQiLCJsYXN0X2NoZWNrIiwibGFzdF9jaGVja19xdWFyYW50aW5lZCIsImdldFN1YnNjcmliZWRVc2Vyc193aXRoU2VlbkFuZFVuc2VlbklEcyIsInVzZXJzIiwidXNlcnNfd2l0aElEcyIsImdldElEc190aGluZyIsImdldFN1YnNjcmliZWRVc2Vyc193aXRoVW5zZWVuSURzIiwiZ2V0VW5zZWVuSURzX3RoaW5nIiwidHJhY2tfcmVtb3ZhbCIsInRyYWNrX2xvY2siLCJ1bnNlZW5JRHMiLCJzZWVuSURzIiwidHlwZXMiLCJ1bnNlZW4iLCJzZWVuIiwiZ2V0TG9jYWxTdG9yYWdlSXRlbXMiLCJrZXlfbG9jYWxTdG9yYWdlIiwibG9jYWxTdG9yYWdlSXRlbXMiLCJzYXZlTG9jYWxTdG9yYWdlSXRlbXMiLCJhZGRMb2NhbFN0b3JhZ2VJdGVtcyIsIml0ZW1zIiwic3RvcmVkSXRlbXMiLCJ0cmltRGljdE9mSXRlbXNfYnlfdXRjQXR0cmlidXRlIiwiZ2V0SXRlbUZyb21Mb2NhbFN0b3JhZ2UiLCJsb2NhbFN0b3JhZ2UiLCJMb2NhbFN0b3JhZ2VJdGVtIiwiZ2V0QWxsQ2hhbmdlcyIsImtleVRvVXNlcl9sb29rdXAiLCJjaGFuZ2VzX290aGVyIiwicmVzMiIsImNoYW5nZXNCeVVzZXIiLCJnZXRPcHRpb25zIiwib3RoZXJzIiwiY29uc29sZSIsImxvZyIsInNhdmVPcHRpb25zIiwicmVtb3ZlZF90cmFjayIsInJlbW92ZWRfbm90aWZ5IiwibG9ja2VkX3RyYWNrIiwibG9ja2VkX25vdGlmeSIsImhpZGVfc3Vic2NyaWJlIiwiQUxBUk1fTkFNRSIsImNyZWF0ZVRhYiIsInVybCIsInRhYnMiLCJ0YWIiLCJ3aW5kb3dzIiwidXBkYXRlIiwid2luZG93SWQiLCJmb2N1c2VkIiwid2luIiwiZ2V0RnVsbElEc0Zyb21VUkwiLCJwYXRoIiwicmVwbGFjZSIsImdldEZ1bGxJRHNGcm9tUGF0aCIsInJlZ2V4X3BjIiwicmVnZXhfdXNlciIsInBvc3RJRCIsImNvbW1lbnRJRCIsInN1YnJlZGRpdCIsIm1hdGNoZXNfcGMiLCJtYXRjaCIsIm1hdGNoZXNfdXNlciIsInJlZm9ybWF0UmVkZGl0VGV4dCIsImJvZHkiLCJzdWJzdHIiLCJpc1JlbW92ZWRJdGVtIiwiaXNDb21tZW50IiwiaXNSZW1vdmVkQ29tbWVudCIsImlzUmVtb3ZlZFBvc3QiLCJhdXRob3IiLCJpc1VzZXJEZWxldGVkQ29tbWVudCIsImlzVXNlckRlbGV0ZWRQb3N0IiwiaXNfcm9ib3RfaW5kZXhhYmxlIiwiaXNVc2VyRGVsZXRlZEl0ZW0iLCJkaWN0IiwibWF4TnVtSXRlbXMiLCJudW1iZXJWYWx1ZWRBdHRyaWJ1dGUiLCJzaG9ydGVuZWRBcnJheSIsInNvcnREaWN0X2J5X251bWJlclZhbHVlZEF0dHJpYnV0ZSIsInNsaWNlIiwibmV3RGljdCIsImFycmF5IiwibWFwIiwic29ydCIsImEiLCJiIiwiY3JlYXRlZF91dGMiLCJfY2xhc3NDYWxsQ2hlY2siLCJ0aGlzIiwiX2NyZWF0ZUNsYXNzIiwiQ2hhbmdlRm9yU3RvcmFnZSIsIl9yZWYiLCJfcmVmJGlkIiwiX3JlZiRvYnNlcnZlZF91dGMiLCJvYnNlcnZlZF91dGMiLCJfcmVmJGNoYW5nZV90eXBlIiwiY2hhbmdlX3R5cGUiLCJfcmVmJG9iamVjdCIsImciLCJfcmVmMiIsIl9yZWYyJGl0ZW0iLCJfcmVmMiRvYnNlcnZlZF91dGMiLCJfcmVmMiRvYmplY3QiLCJ0ZXh0IiwidGl0bGUiLCJzZXRBbGFybSIsInBlcmlvZEluTWludXRlcyIsImFsYXJtcyIsImNsZWFyIiwiZGVsYXlJbk1pbnV0ZXMiLCJhbHBoYUxvd2VyU29ydCIsInRleHRBIiwidG9Mb3dlckNhc2UiLCJ0ZXh0QiIsImdvVG9PcHRpb25zIiwib3Blbk9wdGlvbnNQYWdlIiwid2luZG93IiwiY2xvc2UiLCJvcGVuIiwiZ2V0VVJMIiwic2hvd0Vycm9yIiwibWVzc2FnZSIsInNlbGVjdG9yIiwiJCIsImFwcGVuZFRvIiwiZGVsYXkiLCJmYWRlVG8iLCJwcHJpbnQiLCJvYmoiLCJKU09OIiwic3RyaW5naWZ5IiwiZ2V0UHJldHR5VGltZUxlbmd0aCIsInNlY29uZHMiLCJ0aHJlc2hvbGRzIiwidGltZSIsImRpdmlzb3IiLCJ0ZXh0UGx1cmFsIiwiZXh0cmEiLCJwcmV2VW5pdFRpbWUiLCJyb3VuZCIsInJlbWFpblRleHQiLCJTdHJpbmciLCJnZXRQcmV0dHlEYXRlIiwiY3JlYXRlZFVUQyIsImNyZWF0ZU5vdGlmaWNhdGlvbiIsIl9yZWYzIiwibm90aWZpY2F0aW9uSWQiLCJsb2NhdGlvbiIsInByb3RvY29sIiwibm90aWZpY2F0aW9ucyIsImljb25VcmwiLCJ1cGRhdGVCYWRnZVVuc2VlbkNvdW50IiwidXNlcnNVbnNlZW5JRHMiLCJ0b3RhbCIsInRvU3RyaW5nIiwic2V0QmFkZ2VCYWNrZ3JvdW5kQ29sb3IiLCJjb2xvciIsInNldEJhZGdlVGV4dCIsIl9fV0VCUEFDS19BTURfREVGSU5FX0ZBQ1RPUllfXyIsIl9fV0VCUEFDS19BTURfREVGSU5FX0FSUkFZX18iLCJfX1dFQlBBQ0tfQU1EX0RFRklORV9SRVNVTFRfXyIsImdldFByb3RvdHlwZU9mIiwiQ0hST01FX1NFTkRfTUVTU0FHRV9DQUxMQkFDS19OT19SRVNQT05TRV9NRVNTQUdFIiwiU0VORF9SRVNQT05TRV9ERVBSRUNBVElPTl9XQVJOSU5HIiwid3JhcEFQSXMiLCJleHRlbnNpb25BUElzIiwiYXBpTWV0YWRhdGEiLCJtaW5BcmdzIiwibWF4QXJncyIsImNsZWFyQWxsIiwiZ2V0QWxsIiwiYm9va21hcmtzIiwiZ2V0Q2hpbGRyZW4iLCJnZXRSZWNlbnQiLCJnZXRTdWJUcmVlIiwiZ2V0VHJlZSIsIm1vdmUiLCJyZW1vdmVUcmVlIiwic2VhcmNoIiwiYnJvd3NlckFjdGlvbiIsImRpc2FibGUiLCJmYWxsYmFja1RvTm9DYWxsYmFjayIsImVuYWJsZSIsImdldEJhZGdlQmFja2dyb3VuZENvbG9yIiwiZ2V0QmFkZ2VUZXh0IiwiZ2V0UG9wdXAiLCJnZXRUaXRsZSIsIm9wZW5Qb3B1cCIsInNldEljb24iLCJzZXRQb3B1cCIsInNldFRpdGxlIiwiYnJvd3NpbmdEYXRhIiwicmVtb3ZlQ2FjaGUiLCJyZW1vdmVDb29raWVzIiwicmVtb3ZlRG93bmxvYWRzIiwicmVtb3ZlRm9ybURhdGEiLCJyZW1vdmVIaXN0b3J5IiwicmVtb3ZlTG9jYWxTdG9yYWdlIiwicmVtb3ZlUGFzc3dvcmRzIiwicmVtb3ZlUGx1Z2luRGF0YSIsInNldHRpbmdzIiwiY29tbWFuZHMiLCJjb250ZXh0TWVudXMiLCJyZW1vdmVBbGwiLCJjb29raWVzIiwiZ2V0QWxsQ29va2llU3RvcmVzIiwiZGV2dG9vbHMiLCJpbnNwZWN0ZWRXaW5kb3ciLCJldmFsIiwic2luZ2xlQ2FsbGJhY2tBcmciLCJwYW5lbHMiLCJkb3dubG9hZHMiLCJjYW5jZWwiLCJkb3dubG9hZCIsImVyYXNlIiwiZ2V0RmlsZUljb24iLCJwYXVzZSIsInJlbW92ZUZpbGUiLCJyZXN1bWUiLCJzaG93IiwiZXh0ZW5zaW9uIiwiaXNBbGxvd2VkRmlsZVNjaGVtZUFjY2VzcyIsImlzQWxsb3dlZEluY29nbml0b0FjY2VzcyIsImhpc3RvcnkiLCJhZGRVcmwiLCJkZWxldGVBbGwiLCJkZWxldGVSYW5nZSIsImRlbGV0ZVVybCIsImdldFZpc2l0cyIsImkxOG4iLCJkZXRlY3RMYW5ndWFnZSIsImdldEFjY2VwdExhbmd1YWdlcyIsImlkZW50aXR5IiwibGF1bmNoV2ViQXV0aEZsb3ciLCJpZGxlIiwicXVlcnlTdGF0ZSIsIm1hbmFnZW1lbnQiLCJnZXRTZWxmIiwic2V0RW5hYmxlZCIsInVuaW5zdGFsbFNlbGYiLCJnZXRQZXJtaXNzaW9uTGV2ZWwiLCJwYWdlQWN0aW9uIiwicGVybWlzc2lvbnMiLCJjb250YWlucyIsInJlcXVlc3QiLCJnZXRCYWNrZ3JvdW5kUGFnZSIsImdldFBsYXRmb3JtSW5mbyIsInJlcXVlc3RVcGRhdGVDaGVjayIsInNlbmROYXRpdmVNZXNzYWdlIiwic2V0VW5pbnN0YWxsVVJMIiwic2Vzc2lvbnMiLCJnZXREZXZpY2VzIiwiZ2V0UmVjZW50bHlDbG9zZWQiLCJyZXN0b3JlIiwiZ2V0Qnl0ZXNJblVzZSIsIm1hbmFnZWQiLCJjYXB0dXJlVmlzaWJsZVRhYiIsImRpc2NhcmQiLCJkdXBsaWNhdGUiLCJleGVjdXRlU2NyaXB0IiwiZ2V0Q3VycmVudCIsImdldFpvb20iLCJnZXRab29tU2V0dGluZ3MiLCJoaWdobGlnaHQiLCJpbnNlcnRDU1MiLCJxdWVyeSIsInJlbG9hZCIsInJlbW92ZUNTUyIsInNldFpvb20iLCJzZXRab29tU2V0dGluZ3MiLCJ0b3BTaXRlcyIsIndlYk5hdmlnYXRpb24iLCJnZXRBbGxGcmFtZXMiLCJnZXRGcmFtZSIsIndlYlJlcXVlc3QiLCJoYW5kbGVyQmVoYXZpb3JDaGFuZ2VkIiwiZ2V0TGFzdEZvY3VzZWQiLCJFcnJvciIsIm1ha2VDYWxsYmFjayIsInByb21pc2UiLCJtZXRhZGF0YSIsImNhbGxiYWNrQXJncyIsImxhc3RFcnJvciIsInJlamVjdCIsInJlc29sdmUiLCJwbHVyYWxpemVBcmd1bWVudHMiLCJudW1BcmdzIiwid3JhcE1ldGhvZCIsIm1ldGhvZCIsIndyYXBwZXIiLCJQcm94eSIsImFwcGx5IiwidGFyZ2V0TWV0aG9kIiwidGhpc09iaiIsImFyZ3MiLCJ3cmFwT2JqZWN0Iiwid3JhcHBlcnMiLCJjYWNoZSIsImhhbmRsZXJzIiwiaGFzIiwicHJveHlUYXJnZXQiLCJwcm9wIiwiW29iamVjdCBPYmplY3RdIiwicmVjZWl2ZXIiLCJQcm9taXNlIiwiY2JFcnJvciIsIndhcm4iLCJub0NhbGxiYWNrIiwid3JhcEFzeW5jRnVuY3Rpb24iLCJjb25maWd1cmFibGUiLCJkZXNjIiwiUmVmbGVjdCIsImRlbGV0ZVByb3BlcnR5Iiwid3JhcEV2ZW50Iiwid3JhcHBlck1hcCIsImxpc3RlbmVyIiwiYWRkTGlzdGVuZXIiLCJoYXNMaXN0ZW5lciIsInJlbW92ZUxpc3RlbmVyIiwibG9nZ2VkU2VuZFJlc3BvbnNlRGVwcmVjYXRpb25XYXJuaW5nIiwib25NZXNzYWdlV3JhcHBlcnMiLCJXZWFrTWFwIiwiY3JlYXRlSXRlbSIsInN1cGVyIiwic2VuZGVyIiwic2VuZFJlc3BvbnNlIiwid3JhcHBlZFNlbmRSZXNwb25zZSIsImRpZENhbGxTZW5kUmVzcG9uc2UiLCJzZW5kUmVzcG9uc2VQcm9taXNlIiwicmVzcG9uc2UiLCJzdGFjayIsImVyciIsImlzUmVzdWx0VGhlbmFibGUiLCJpc1RoZW5hYmxlIiwic2VuZFByb21pc2VkUmVzdWx0IiwibXNnIiwiZXJyb3IiLCJfX21veldlYkV4dGVuc2lvblBvbHlmaWxsUmVqZWN0X18iLCJjYXRjaCIsIndyYXBwZWRTZW5kTWVzc2FnZSIsImFwaU5hbWVzcGFjZU9iaiIsIndyYXBwZWRDYiIsInJlcGx5Iiwic3RhdGljV3JhcHBlcnMiLCJvbk1lc3NhZ2UiLCJvbk1lc3NhZ2VFeHRlcm5hbCIsInNldHRpbmdNZXRhZGF0YSIsInByaXZhY3kiLCJuZXR3b3JrIiwibmV0d29ya1ByZWRpY3Rpb25FbmFibGVkIiwid2ViUlRDSVBIYW5kbGluZ1BvbGljeSIsInNlcnZpY2VzIiwicGFzc3dvcmRTYXZpbmdFbmFibGVkIiwid2Vic2l0ZXMiLCJoeXBlcmxpbmtBdWRpdGluZ0VuYWJsZWQiLCJyZWZlcnJlcnNFbmFibGVkIiwic2VsZiIsIl9fZyIsImV4ZWMiLCJlIiwiaXNPYmplY3QiLCJpdCIsIlR5cGVFcnJvciIsInN0b3JlIiwidWlkIiwiVVNFX1NZTUJPTCIsInRvSW50ZWdlciIsIm1pbiIsInZlcnNpb24iLCJfX2UiLCJhbk9iamVjdCIsIklFOF9ET01fREVGSU5FIiwidG9QcmltaXRpdmUiLCJkUCIsImYiLCJPIiwiQXR0cmlidXRlcyIsImRlZmluZWQiLCJTUkMiLCIkdG9TdHJpbmciLCJUUEwiLCJzcGxpdCIsImluc3BlY3RTb3VyY2UiLCJ2YWwiLCJzYWZlIiwiaXNGdW5jdGlvbiIsImpvaW4iLCJmYWlscyIsInF1b3QiLCJjcmVhdGVIVE1MIiwic3RyaW5nIiwidGFnIiwiYXR0cmlidXRlIiwicDEiLCJOQU1FIiwidGVzdCIsImNyZWF0ZURlc2MiLCJJT2JqZWN0IiwiYXJnIiwiYUZ1bmN0aW9uIiwiZm4iLCJ0aGF0IiwiY2VpbCIsImlzTmFOIiwicElFIiwidG9JT2JqZWN0IiwiZ09QRCIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsIktFWSIsInRvT2JqZWN0IiwidG9MZW5ndGgiLCJhc2MiLCJUWVBFIiwiJGNyZWF0ZSIsIklTX01BUCIsIklTX0ZJTFRFUiIsIklTX1NPTUUiLCJJU19FVkVSWSIsIklTX0ZJTkRfSU5ERVgiLCJOT19IT0xFUyIsIiR0aGlzIiwiY2FsbGJhY2tmbiIsImluZGV4IiwiTElCUkFSWSIsIiR0eXBlZCIsIiRidWZmZXIiLCJhbkluc3RhbmNlIiwicHJvcGVydHlEZXNjIiwicmVkZWZpbmVBbGwiLCJ0b0luZGV4IiwidG9BYnNvbHV0ZUluZGV4IiwiY2xhc3NvZiIsImlzQXJyYXlJdGVyIiwiZ09QTiIsImdldEl0ZXJGbiIsIndrcyIsImNyZWF0ZUFycmF5TWV0aG9kIiwiY3JlYXRlQXJyYXlJbmNsdWRlcyIsInNwZWNpZXNDb25zdHJ1Y3RvciIsIkFycmF5SXRlcmF0b3JzIiwiSXRlcmF0b3JzIiwiJGl0ZXJEZXRlY3QiLCJzZXRTcGVjaWVzIiwiYXJyYXlGaWxsIiwiYXJyYXlDb3B5V2l0aGluIiwiJERQIiwiJEdPUEQiLCJSYW5nZUVycm9yIiwiVWludDhBcnJheSIsIkFycmF5UHJvdG8iLCJBcnJheSIsIiRBcnJheUJ1ZmZlciIsIkFycmF5QnVmZmVyIiwiJERhdGFWaWV3IiwiRGF0YVZpZXciLCJhcnJheUZvckVhY2giLCJhcnJheUZpbHRlciIsImFycmF5U29tZSIsImFycmF5RXZlcnkiLCJhcnJheUZpbmQiLCJhcnJheUZpbmRJbmRleCIsImFycmF5SW5jbHVkZXMiLCJhcnJheUluZGV4T2YiLCJhcnJheVZhbHVlcyIsImFycmF5S2V5cyIsImFycmF5RW50cmllcyIsImVudHJpZXMiLCJhcnJheUxhc3RJbmRleE9mIiwibGFzdEluZGV4T2YiLCJhcnJheVJlZHVjZSIsInJlZHVjZSIsImFycmF5UmVkdWNlUmlnaHQiLCJyZWR1Y2VSaWdodCIsImFycmF5Sm9pbiIsImFycmF5U29ydCIsImFycmF5U2xpY2UiLCJhcnJheVRvU3RyaW5nIiwiYXJyYXlUb0xvY2FsZVN0cmluZyIsInRvTG9jYWxlU3RyaW5nIiwiSVRFUkFUT1IiLCJUQUciLCJUWVBFRF9DT05TVFJVQ1RPUiIsIkRFRl9DT05TVFJVQ1RPUiIsIkFMTF9DT05TVFJVQ1RPUlMiLCJDT05TVFIiLCJUWVBFRF9BUlJBWSIsIlRZUEVEIiwiVklFVyIsIiRtYXAiLCJhbGxvY2F0ZSIsIkxJVFRMRV9FTkRJQU4iLCJVaW50MTZBcnJheSIsImJ1ZmZlciIsIkZPUkNFRF9TRVQiLCJ0b09mZnNldCIsIkJZVEVTIiwib2Zmc2V0IiwidmFsaWRhdGUiLCJDIiwic3BlY2llc0Zyb21MaXN0IiwibGlzdCIsImZyb21MaXN0IiwiYWRkR2V0dGVyIiwiaW50ZXJuYWwiLCJfZCIsIiRmcm9tIiwic3RlcCIsIml0ZXJhdG9yIiwiYUxlbiIsIm1hcGZuIiwibWFwcGluZyIsIml0ZXJGbiIsIm5leHQiLCJkb25lIiwiJG9mIiwiVE9fTE9DQUxFX0JVRyIsIiR0b0xvY2FsZVN0cmluZyIsInByb3RvIiwiY29weVdpdGhpbiIsInN0YXJ0IiwiZXZlcnkiLCJmaWxsIiwiZmlsdGVyIiwiZmluZCIsInByZWRpY2F0ZSIsImZpbmRJbmRleCIsImluZGV4T2YiLCJzZWFyY2hFbGVtZW50IiwiaW5jbHVkZXMiLCJzZXBhcmF0b3IiLCJyZXZlcnNlIiwibWlkZGxlIiwic29tZSIsImNvbXBhcmVmbiIsInN1YmFycmF5IiwiYmVnaW4iLCJlbmQiLCIkYmVnaW4iLCJieXRlT2Zmc2V0IiwiQllURVNfUEVSX0VMRU1FTlQiLCIkc2xpY2UiLCIkc2V0IiwiYXJyYXlMaWtlIiwic3JjIiwibGVuIiwiJGl0ZXJhdG9ycyIsImlzVEFJbmRleCIsIiRnZXREZXNjIiwiJHNldERlc2MiLCJ3cml0YWJsZSIsIiRUeXBlZEFycmF5UHJvdG90eXBlJCIsImNvbnN0cnVjdG9yIiwiQ0xBTVBFRCIsIkdFVFRFUiIsIlNFVFRFUiIsIlR5cGVkQXJyYXkiLCJCYXNlIiwiVEFDIiwiRk9SQ0VEIiwiQUJWIiwiVHlwZWRBcnJheVByb3RvdHlwZSIsImFkZEVsZW1lbnQiLCJkYXRhIiwidiIsInNldHRlciIsIiRvZmZzZXQiLCIkbGVuZ3RoIiwiYnl0ZUxlbmd0aCIsImtsYXNzIiwiJGxlbiIsIml0ZXIiLCIkbmF0aXZlSXRlcmF0b3IiLCJDT1JSRUNUX0lURVJfTkFNRSIsIiRpdGVyYXRvciIsIm9mIiwiZnJvbSIsImxvb2t1cEl0ZW1zQnlJRCIsImF1dGgiLCJtb25pdG9yX3F1YXJhbnRpbmVkX3JlbW90ZSIsInBhcmFtcyIsInJhd19qc29uIiwiayIsImZldGNoX2ZvclJlZGRpdCIsIl90b0NvbnN1bWFibGVBcnJheSIsImdldEZldGNoUGFyYW1zIiwiY29va2llRGV0YWlsc19yZWRkaXRTZXNzaW9uIiwiYWNjZXB0YWJsZV9zZXRDb29raWVEZXRhaWxzIiwiZ2V0U2V0dGFibGVDb29raWUiLCJjb29raWUiLCJmaWx0ZXJlZCIsInJlZ2VuZXJhdG9yUnVudGltZSIsIm1hcmsiLCJfY2FsbGVlIiwiY29va2llX3JlZGRpdFNlc3Npb24iLCJfYXJncyIsIndyYXAiLCJfY29udGV4dCIsInByZXYiLCJkb21haW4iLCJ0MCIsInQxIiwic2VudCIsImZldGNoIiwiaGFuZGxlRmV0Y2hFcnJvcnMiLCJnZXRSZWRkaXREYXRhIiwiYWJydXB0Iiwic3RvcCIsIl94IiwiX3gyIiwibG9va3VwSXRlbXNCeVVzZXIiLCJhZnRlciIsInRpbWVTcGFuIiwibGltaXQiLCJvayIsInN0YXR1c1RleHQiLCJqc29uIiwiY2hpbGRyZW4iLCJnZXRSZWRkaXRUb2tlbiIsImFjY2Vzc190b2tlbiIsImdldEF1dGgiLCJ1c2VfdGhpc19jbGllbnRJRCIsInRva2VuSW5pdCIsImhlYWRlcnMiLCJBdXRob3JpemF0aW9uIiwiYnRvYSIsIkNvbnRlbnQtVHlwZSIsImVuY29kZVVSSUNvbXBvbmVudCIsInRva2VuIiwiZ2V0TG9jYWxBdXRoIiwiZ2V0Q29va2llIiwiaW52YWxpZENoYXIiLCJSZWdFeHAiLCJiYXNlNjRDb29raWUiLCJ0b2tlbkRhdGEiLCJhdG9iIiwidG9rZW5zIiwicGFyc2UiLCJhY2Nlc3NUb2tlbiIsImdldExvY2FsT3JBcHBBdXRoIiwiZ2V0TG9nZ2VkaW5Vc2VyIiwiZ2V0UmVkZGl0VXNlcm5hbWUiLCJ2YWx1ZU9mIiwiTUVUQSIsInNldERlc2MiLCJpc0V4dGVuc2libGUiLCJGUkVFWkUiLCJwcmV2ZW50RXh0ZW5zaW9ucyIsInNldE1ldGEiLCJ3IiwibWV0YSIsIk5FRUQiLCJmYXN0S2V5IiwiZ2V0V2VhayIsIm9uRnJlZXplIiwiYml0bWFwIiwicHgiLCJyYW5kb20iLCIka2V5cyIsImVudW1CdWdLZXlzIiwibWF4IiwiZFBzIiwiSUVfUFJPVE8iLCJFbXB0eSIsImNyZWF0ZURpY3QiLCJpZnJhbWVEb2N1bWVudCIsImlmcmFtZSIsInN0eWxlIiwiZGlzcGxheSIsImFwcGVuZENoaWxkIiwiY29udGVudFdpbmRvdyIsImRvY3VtZW50Iiwid3JpdGUiLCJsdCIsIlByb3BlcnRpZXMiLCJoaWRkZW5LZXlzIiwiZ2V0T3duUHJvcGVydHlOYW1lcyIsIk9iamVjdFByb3RvIiwiVU5TQ09QQUJMRVMiLCJfdCIsImRlZiIsInN0YXQiLCJzcGFjZXMiLCJzcGFjZSIsImx0cmltIiwicnRyaW0iLCJleHBvcnRlciIsIkFMSUFTIiwiRk9SQ0UiLCJ0cmltIiwiREVTQ1JJUFRPUlMiLCJTUEVDSUVTIiwiQ29uc3RydWN0b3IiLCJmb3JiaWRkZW5GaWVsZCIsImNvZiIsInByb3BlcnR5SXNFbnVtZXJhYmxlIiwiQVJHIiwiVCIsInRyeUdldCIsImNhbGxlZSIsIkQiLCJjb3B5cmlnaHQiLCJJU19JTkNMVURFUyIsImVsIiwiZnJvbUluZGV4IiwiZ2V0T3duUHJvcGVydHlTeW1ib2xzIiwiaXNBcnJheSIsIlNBRkVfQ0xPU0lORyIsInJpdGVyIiwic2tpcENsb3NpbmciLCJhcnIiLCJpZ25vcmVDYXNlIiwibXVsdGlsaW5lIiwidW5pY29kZSIsInN0aWNreSIsImJ1aWx0aW5FeGVjIiwicmVnZXhwRXhlYyIsIlJFUExBQ0VfU1VQUE9SVFNfTkFNRURfR1JPVVBTIiwicmUiLCJncm91cHMiLCJTUExJVF9XT1JLU19XSVRIX09WRVJXUklUVEVOX0VYRUMiLCJvcmlnaW5hbEV4ZWMiLCJTWU1CT0wiLCJERUxFR0FURVNfVE9fU1lNQk9MIiwiREVMRUdBVEVTX1RPX0VYRUMiLCJleGVjQ2FsbGVkIiwibmF0aXZlUmVnRXhwTWV0aG9kIiwiZm5zIiwibmF0aXZlTWV0aG9kIiwicmVnZXhwIiwic3RyIiwiYXJnMiIsImZvcmNlU3RyaW5nTWV0aG9kIiwic3RyZm4iLCJyeGZuIiwiQlJFQUsiLCJSRVRVUk4iLCJpdGVyYWJsZSIsIm5hdmlnYXRvciIsInVzZXJBZ2VudCIsImZvck9mIiwic2V0VG9TdHJpbmdUYWciLCJpbmhlcml0SWZSZXF1aXJlZCIsIm1ldGhvZHMiLCJjb21tb24iLCJJU19XRUFLIiwiQURERVIiLCJmaXhNZXRob2QiLCJpbnN0YW5jZSIsIkhBU05UX0NIQUlOSU5HIiwiVEhST1dTX09OX1BSSU1JVElWRVMiLCJBQ0NFUFRfSVRFUkFCTEVTIiwiQlVHR1lfWkVSTyIsIiRpbnN0YW5jZSIsImdldENvbnN0cnVjdG9yIiwic2V0U3Ryb25nIiwiVHlwZWQiLCJUeXBlZEFycmF5Q29uc3RydWN0b3JzIiwiVU5TVUJTQ1JJQkVfVEVYVCIsIlNVQlNDUklCRV9URVhUIiwiaG9zdG5hbWUiLCJzZXRUZXh0QW5kRnVuY3Rpb25fc3Vic2NyaWJlIiwiZWxlbWVudCIsImNvbW1lbnRCb2R5Iiwib2ZmIiwiY2xpY2siLCJldmVudE9iaiIsInN1YnNjcmliZUlkX2NoYW5nZVRleHQiLCJzZXRUZXh0QW5kRnVuY3Rpb25fdW5zdWJzY3JpYmUiLCJ1bnN1YnNjcmliZUlkX2NoYW5nZVRleHQiLCJfYXN5bmNUb0dlbmVyYXRvciIsInNldEN1cnJlbnRTdGF0ZUZvcklkIiwiaHJlZiIsIml0ZW1PYmoiLCJzZXRUZXh0IiwiU1VCU0NSSUJFRF9GUk9NX1JFRERJVCIsIlNVQlNDUklCRURfRlJPTV9SRVZFRERJVCIsIlNVQlNDUklCRURfRlJPTV9OQSIsInN1YnNjcmliZWRGcm9tVVJMIiwic3Vic2NyaWJlZEZyb20iLCJjaGVja0ZvckNoYW5nZXNfdGhpbmdfYnlJZCIsImNoZWNrRm9yQ2hhbmdlcyIsIm90aGVyIiwibm93IiwidGVtcFZhcl9tb25pdG9yX3F1YXJhbnRpbmVkIiwiY2hlY2tGb3JDaGFuZ2VzX290aGVyIiwiY2hlY2tGb3JDaGFuZ2VzX3VzZXJzIiwibmV3U3RvcmFnZSIsInRlbXBWYXJfcXVhcmFudGluZWRfY29udGVudF9mb3VuZCIsIml0ZW1Mb29rdXAiLCJxdWFyYW50aW5lIiwiX3gzIiwiX2NhbGxlZTIiLCJfYXJnczIiLCJfY29udGV4dDIiLCJrbm93bl9yZW1vdmVkIiwia25vd25fYXBwcm92ZWQiLCJrbm93bl9sb2NrZWQiLCJrbm93bl91bmxvY2tlZCIsIml0ZW1XcmFwIiwibmV3TG9jYWxTdG9yYWdlSXRlbXMiLCJjaGFuZ2VUeXBlcyIsIm51bV9jaGFuZ2VzIiwiZXhpc3RpbmdMb2NhbFN0b3JhZ2VJdGVtcyIsIl9jaHJvbWUkc3RvcmFnZSRzeW5jJCIsIm1hcmtDaGFuZ2VzIiwiX3g0IiwiX3g1IiwiX3g2IiwiX3g3IiwiX3g4IiwiX3g5IiwiYWxlcnRfY3VycmVudF9saXN0IiwiYWxlcnRfdHlwZSIsImFsZXJ0X3RleHQiLCJhbGVydF9rbm93bl9oYXNoIiwibm9ybWFsX2N1cnJlbnRfbGlzdCIsIm5vcm1hbF90eXBlIiwibm9ybWFsX3RleHQiLCJub3JtYWxfa25vd25faGFzaCIsImFsZXJ0X3Vuc2Vlbl9pZHMiLCJub3JtYWxfdW5zZWVuX2lkcyIsImFsZXJ0X3VzZXJEZWxldGVkX3Vuc2Vlbl9pZHMiLCJtYXJrVW5zZWVuIiwiYWxlcnRfdHlwZV92YXIiLCJpcyIsImNyZWF0ZUVsZW1lbnQiLCJzaGFyZWQiLCJkb2N1bWVudEVsZW1lbnQiLCJjaGVjayIsInNldFByb3RvdHlwZU9mIiwiYnVnZ3kiLCJfX3Byb3RvX18iLCJjb3VudCIsIkluZmluaXR5Iiwic2lnbiIsIngiLCIkZXhwbTEiLCJleHBtMSIsIlRPX1NUUklORyIsInBvcyIsImNoYXJDb2RlQXQiLCJjaGFyQXQiLCIkaXRlckNyZWF0ZSIsIkJVR0dZIiwicmV0dXJuVGhpcyIsIkRFRkFVTFQiLCJJU19TRVQiLCJJdGVyYXRvclByb3RvdHlwZSIsImdldE1ldGhvZCIsImtpbmQiLCJERUZfVkFMVUVTIiwiVkFMVUVTX0JVRyIsIiRuYXRpdmUiLCIkZGVmYXVsdCIsIiRlbnRyaWVzIiwiJGFueU5hdGl2ZSIsImlzUmVnRXhwIiwic2VhcmNoU3RyaW5nIiwiTUFUQ0giLCIkZGVmaW5lUHJvcGVydHkiLCJnZXRJdGVyYXRvck1ldGhvZCIsImVuZFBvcyIsImFkZFRvVW5zY29wYWJsZXMiLCJpdGVyYXRlZCIsIl9pIiwiX2siLCJBcmd1bWVudHMiLCJyZTEiLCJyZTIiLCJyZWdleHBGbGFncyIsIm5hdGl2ZUV4ZWMiLCJuYXRpdmVSZXBsYWNlIiwicGF0Y2hlZEV4ZWMiLCJVUERBVEVTX0xBU1RfSU5ERVhfV1JPTkciLCJOUENHX0lOQ0xVREVEIiwibGFzdEluZGV4IiwicmVDb3B5IiwiYXQiLCJkZWZlciIsImNoYW5uZWwiLCJwb3J0IiwiaW52b2tlIiwiaHRtbCIsImNlbCIsInByb2Nlc3MiLCJzZXRUYXNrIiwic2V0SW1tZWRpYXRlIiwiY2xlYXJUYXNrIiwiY2xlYXJJbW1lZGlhdGUiLCJNZXNzYWdlQ2hhbm5lbCIsIkRpc3BhdGNoIiwiY291bnRlciIsInF1ZXVlIiwicnVuIiwiZXZlbnQiLCJuZXh0VGljayIsInBvcnQyIiwicG9ydDEiLCJvbm1lc3NhZ2UiLCJwb3N0TWVzc2FnZSIsImFkZEV2ZW50TGlzdGVuZXIiLCJpbXBvcnRTY3JpcHRzIiwicmVtb3ZlQ2hpbGQiLCJzZXRUaW1lb3V0IiwiUFJPVE9UWVBFIiwiV1JPTkdfSU5ERVgiLCJCYXNlQnVmZmVyIiwiYWJzIiwicG93IiwiTE4yIiwiJEJVRkZFUiIsIiRMRU5HVEgiLCIkT0ZGU0VUIiwicGFja0lFRUU3NTQiLCJtTGVuIiwibkJ5dGVzIiwiZUxlbiIsImVNYXgiLCJlQmlhcyIsInJ0IiwidW5wYWNrSUVFRTc1NCIsIm5CaXRzIiwiTmFOIiwidW5wYWNrSTMyIiwiYnl0ZXMiLCJwYWNrSTgiLCJwYWNrSTE2IiwicGFja0kzMiIsInBhY2tGNjQiLCJwYWNrRjMyIiwidmlldyIsImlzTGl0dGxlRW5kaWFuIiwiaW50SW5kZXgiLCJfYiIsInBhY2siLCJjb252ZXJzaW9uIiwiQXJyYXlCdWZmZXJQcm90byIsImoiLCIkc2V0SW50OCIsInNldEludDgiLCJnZXRJbnQ4Iiwic2V0VWludDgiLCJidWZmZXJMZW5ndGgiLCJnZXRVaW50OCIsImdldEludDE2IiwiZ2V0VWludDE2IiwiZ2V0SW50MzIiLCJnZXRVaW50MzIiLCJnZXRGbG9hdDMyIiwiZ2V0RmxvYXQ2NCIsInNldEludDE2Iiwic2V0VWludDE2Iiwic2V0SW50MzIiLCJzZXRVaW50MzIiLCJzZXRGbG9hdDMyIiwic2V0RmxvYXQ2NCIsIndrc0V4dCIsIiRTeW1ib2wiLCJnZXRLZXlzIiwiZGVmaW5lUHJvcGVydGllcyIsIndpbmRvd05hbWVzIiwiZ2V0V2luZG93TmFtZXMiLCJnT1BTIiwiJGFzc2lnbiIsImFzc2lnbiIsIkEiLCJLIiwiZ2V0U3ltYm9scyIsImlzRW51bSIsInkiLCJmYWN0b3JpZXMiLCJjb25zdHJ1Y3QiLCJwYXJ0QXJncyIsImJvdW5kIiwidW4iLCIkcGFyc2VJbnQiLCJwYXJzZUludCIsIiR0cmltIiwid3MiLCJoZXgiLCJyYWRpeCIsIiRwYXJzZUZsb2F0IiwicGFyc2VGbG9hdCIsImlzRmluaXRlIiwibG9nMXAiLCJkZXNjcmlwdG9yIiwicmV0Iiwib3JpZ2luYWwiLCJtZW1vIiwiaXNSaWdodCIsInRvIiwiaW5jIiwiZm9yY2VkIiwiZmxhZ3MiLCJJbnRlcm5hbCIsIm5ld0dlbmVyaWNQcm9taXNlQ2FwYWJpbGl0eSIsIk93blByb21pc2VDYXBhYmlsaXR5IiwiV3JhcHBlciIsInRhc2siLCJtaWNyb3Rhc2siLCJuZXdQcm9taXNlQ2FwYWJpbGl0eU1vZHVsZSIsInBlcmZvcm0iLCJwcm9taXNlUmVzb2x2ZSIsInZlcnNpb25zIiwidjgiLCIkUHJvbWlzZSIsImlzTm9kZSIsImVtcHR5IiwibmV3UHJvbWlzZUNhcGFiaWxpdHkiLCJVU0VfTkFUSVZFIiwiRmFrZVByb21pc2UiLCJQcm9taXNlUmVqZWN0aW9uRXZlbnQiLCJpc1JlamVjdCIsIl9uIiwiY2hhaW4iLCJfYyIsIl92IiwiX3MiLCJyZWFjdGlvbiIsImV4aXRlZCIsImhhbmRsZXIiLCJmYWlsIiwiX2giLCJvbkhhbmRsZVVuaGFuZGxlZCIsImVudGVyIiwiZXhpdCIsIm9uVW5oYW5kbGVkIiwidW5oYW5kbGVkIiwiaXNVbmhhbmRsZWQiLCJlbWl0Iiwib251bmhhbmRsZWRyZWplY3Rpb24iLCJyZWFzb24iLCJfYSIsIm9ucmVqZWN0aW9uaGFuZGxlZCIsIiRyZWplY3QiLCJfdyIsIiRyZXNvbHZlIiwiZXhlY3V0b3IiLCJvbkZ1bGZpbGxlZCIsIm9uUmVqZWN0ZWQiLCJjYXBhYmlsaXR5IiwiJCRyZWplY3QiLCJhbGwiLCJyZW1haW5pbmciLCIkaW5kZXgiLCJhbHJlYWR5Q2FsbGVkIiwicmFjZSIsIlByb21pc2VDYXBhYmlsaXR5IiwiJCRyZXNvbHZlIiwicHJvbWlzZUNhcGFiaWxpdHkiLCIkaXRlckRlZmluZSIsIlNJWkUiLCJnZXRFbnRyeSIsImVudHJ5IiwiX2YiLCJfbCIsImRlbGV0ZSIsIiRoYXMiLCJ1bmNhdWdodEZyb3plblN0b3JlIiwiVW5jYXVnaHRGcm96ZW5TdG9yZSIsImZpbmRVbmNhdWdodEZyb3plbiIsInNwbGljZSIsInVmc3RvcmUiLCJudW1iZXIiLCJvd25LZXlzIiwicmVwZWF0IiwibWF4TGVuZ3RoIiwiZmlsbFN0cmluZyIsImxlZnQiLCJzdHJpbmdMZW5ndGgiLCJmaWxsU3RyIiwiaW50TWF4TGVuZ3RoIiwiZmlsbExlbiIsInN0cmluZ0ZpbGxlciIsImlzRW50cmllcyIsIl9nbG9iYWwiLCJkZWZhdWx0IiwiX2JhYmVsUG9seWZpbGwiLCIkZmFpbHMiLCJ3a3NEZWZpbmUiLCJlbnVtS2V5cyIsIl9jcmVhdGUiLCJnT1BORXh0IiwiJEdPUFMiLCIkSlNPTiIsIl9zdHJpbmdpZnkiLCJISURERU4iLCJUT19QUklNSVRJVkUiLCJTeW1ib2xSZWdpc3RyeSIsIkFsbFN5bWJvbHMiLCJPUFN5bWJvbHMiLCJRT2JqZWN0IiwiZmluZENoaWxkIiwic2V0U3ltYm9sRGVzYyIsInByb3RvRGVzYyIsInN5bSIsImlzU3ltYm9sIiwiJGRlZmluZVByb3BlcnRpZXMiLCIkcHJvcGVydHlJc0VudW1lcmFibGUiLCJFIiwiJGdldE93blByb3BlcnR5RGVzY3JpcHRvciIsIiRnZXRPd25Qcm9wZXJ0eU5hbWVzIiwiJGdldE93blByb3BlcnR5U3ltYm9scyIsIklTX09QIiwiZXM2U3ltYm9scyIsIndlbGxLbm93blN5bWJvbHMiLCJmb3IiLCJrZXlGb3IiLCJ1c2VTZXR0ZXIiLCJ1c2VTaW1wbGUiLCJGQUlMU19PTl9QUklNSVRJVkVTIiwicmVwbGFjZXIiLCIkcmVwbGFjZXIiLCJzeW1ib2xzIiwiJGdldFByb3RvdHlwZU9mIiwiJGZyZWV6ZSIsIiRzZWFsIiwiJHByZXZlbnRFeHRlbnNpb25zIiwiJGlzRnJvemVuIiwiJGlzU2VhbGVkIiwiJGlzRXh0ZW5zaWJsZSIsIkZQcm90byIsIm5hbWVSRSIsIkhBU19JTlNUQU5DRSIsIkZ1bmN0aW9uUHJvdG8iLCIkTnVtYmVyIiwiQlJPS0VOX0NPRiIsIlRSSU0iLCJ0b051bWJlciIsImFyZ3VtZW50IiwidGhpcmQiLCJtYXhDb2RlIiwiZmlyc3QiLCJjb2RlIiwiZGlnaXRzIiwiYU51bWJlclZhbHVlIiwiJHRvRml4ZWQiLCJ0b0ZpeGVkIiwiRVJST1IiLCJtdWx0aXBseSIsImMyIiwiZGl2aWRlIiwibnVtVG9TdHJpbmciLCJhY2MiLCJmcmFjdGlvbkRpZ2l0cyIsInoiLCJ4MiIsIiR0b1ByZWNpc2lvbiIsInRvUHJlY2lzaW9uIiwicHJlY2lzaW9uIiwiRVBTSUxPTiIsIl9pc0Zpbml0ZSIsImlzSW50ZWdlciIsImlzU2FmZUludGVnZXIiLCJNQVhfU0FGRV9JTlRFR0VSIiwiTUlOX1NBRkVfSU5URUdFUiIsIk51bWJlciIsInNxcnQiLCIkYWNvc2giLCJhY29zaCIsIk1BWF9WQUxVRSIsIiRhc2luaCIsImFzaW5oIiwiJGF0YW5oIiwiYXRhbmgiLCJjYnJ0IiwiY2x6MzIiLCJMT0cyRSIsImNvc2giLCJmcm91bmQiLCJFUFNJTE9OMzIiLCJNQVgzMiIsIk1JTjMyIiwiJGFicyIsIiRzaWduIiwiaHlwb3QiLCJ2YWx1ZTEiLCJ2YWx1ZTIiLCJkaXYiLCJzdW0iLCJsYXJnIiwiJGltdWwiLCJpbXVsIiwieG4iLCJ5biIsInhsIiwieWwiLCJsb2cxMCIsIkxPRzEwRSIsImxvZzIiLCJzaW5oIiwidGFuaCIsInRydW5jIiwiZnJvbUNoYXJDb2RlIiwiJGZyb21Db2RlUG9pbnQiLCJmcm9tQ29kZVBvaW50IiwicmF3IiwiY2FsbFNpdGUiLCJ0cGwiLCIkYXQiLCJwb2ludCIsImNvZGVQb2ludEF0IiwiY29udGV4dCIsIiRlbmRzV2l0aCIsImVuZHNXaXRoIiwiZW5kUG9zaXRpb24iLCIkc3RhcnRzV2l0aCIsInN0YXJ0c1dpdGgiLCJzaXplIiwidG9KU09OIiwidG9JU09TdHJpbmciLCJwdiIsIiR0b0lTT1N0cmluZyIsImx6IiwibnVtIiwiZ2V0VVRDRnVsbFllYXIiLCJnZXRVVENNaWxsaXNlY29uZHMiLCJnZXRVVENNb250aCIsImdldFVUQ0RhdGUiLCJnZXRVVENIb3VycyIsImdldFVUQ01pbnV0ZXMiLCJnZXRVVENTZWNvbmRzIiwiRGF0ZVByb3RvIiwiaGludCIsImNyZWF0ZVByb3BlcnR5IiwidXBUbyIsImNsb25lZCIsIiRzb3J0IiwiJGZvckVhY2giLCJTVFJJQ1QiLCIkZmlsdGVyIiwiJHNvbWUiLCIkZXZlcnkiLCIkcmVkdWNlIiwiJGluZGV4T2YiLCJORUdBVElWRV9aRVJPIiwiJGZpbmQiLCIkZmxhZ3MiLCIkUmVnRXhwIiwiQ09SUkVDVF9ORVciLCJ0aVJFIiwicGlSRSIsImZpVSIsInByb3h5IiwiZGVmaW5lIiwiYWR2YW5jZVN0cmluZ0luZGV4IiwicmVnRXhwRXhlYyIsIiRtYXRjaCIsIm1heWJlQ2FsbE5hdGl2ZSIsInJ4IiwiZnVsbFVuaWNvZGUiLCJtYXRjaFN0ciIsIlNVQlNUSVRVVElPTl9TWU1CT0xTIiwiU1VCU1RJVFVUSU9OX1NZTUJPTFNfTk9fTkFNRUQiLCJSRVBMQUNFIiwiJHJlcGxhY2UiLCJzZWFyY2hWYWx1ZSIsInJlcGxhY2VWYWx1ZSIsImZ1bmN0aW9uYWxSZXBsYWNlIiwicmVzdWx0cyIsImFjY3VtdWxhdGVkUmVzdWx0IiwibmV4dFNvdXJjZVBvc2l0aW9uIiwibWF0Y2hlZCIsInBvc2l0aW9uIiwiY2FwdHVyZXMiLCJuYW1lZENhcHR1cmVzIiwicmVwbGFjZXJBcmdzIiwicmVwbGFjZW1lbnQiLCJnZXRTdWJzdGl0dXRpb24iLCJ0YWlsUG9zIiwiY2giLCJjYXB0dXJlIiwic2FtZVZhbHVlIiwiU0VBUkNIIiwiJHNlYXJjaCIsInByZXZpb3VzTGFzdEluZGV4IiwiY2FsbFJlZ0V4cEV4ZWMiLCIkbWluIiwiJHB1c2giLCJTVVBQT1JUU19ZIiwiU1BMSVQiLCIkc3BsaXQiLCJpbnRlcm5hbFNwbGl0IiwibGFzdExlbmd0aCIsIm91dHB1dCIsImxhc3RMYXN0SW5kZXgiLCJzcGxpdExpbWl0Iiwic2VwYXJhdG9yQ29weSIsInNwbGl0dGVyIiwidW5pY29kZU1hdGNoaW5nIiwibGltIiwicSIsIm1hY3JvdGFzayIsIk9ic2VydmVyIiwiTXV0YXRpb25PYnNlcnZlciIsIldlYktpdE11dGF0aW9uT2JzZXJ2ZXIiLCJoZWFkIiwibGFzdCIsImZsdXNoIiwicGFyZW50Iiwic3RhbmRhbG9uZSIsInRvZ2dsZSIsIm5vZGUiLCJjcmVhdGVUZXh0Tm9kZSIsIm9ic2VydmUiLCJjaGFyYWN0ZXJEYXRhIiwic3Ryb25nIiwiYWRkIiwiSW50ZXJuYWxNYXAiLCJlYWNoIiwid2VhayIsIk5BVElWRV9XRUFLX01BUCIsIklTX0lFMTEiLCJBY3RpdmVYT2JqZWN0IiwiJFdlYWtNYXAiLCIkaXNWaWV3IiwiaXNWaWV3IiwiZmluIiwidmlld1MiLCJ2aWV3VCIsImluaXQiLCJyQXBwbHkiLCJmQXBwbHkiLCJ0aGlzQXJndW1lbnQiLCJhcmd1bWVudHNMaXN0IiwiTCIsInJDb25zdHJ1Y3QiLCJORVdfVEFSR0VUX0JVRyIsIkFSR1NfQlVHIiwiVGFyZ2V0IiwibmV3VGFyZ2V0IiwiJGFyZ3MiLCJwcm9wZXJ0eUtleSIsImF0dHJpYnV0ZXMiLCJFbnVtZXJhdGUiLCJlbnVtZXJhdGUiLCJnZXRQcm90byIsIlYiLCJleGlzdGluZ0Rlc2NyaXB0b3IiLCJvd25EZXNjIiwic2V0UHJvdG8iLCIkaW5jbHVkZXMiLCJmbGF0TWFwIiwiZmxhdHRlbkludG9BcnJheSIsImFycmF5U3BlY2llc0NyZWF0ZSIsInNvdXJjZUxlbiIsIklTX0NPTkNBVF9TUFJFQURBQkxFIiwiZGVwdGgiLCJtYXBwZXIiLCJ0aGlzQXJnIiwic3ByZWFkYWJsZSIsInRhcmdldEluZGV4Iiwic291cmNlSW5kZXgiLCJtYXBGbiIsInBhZFN0YXJ0IiwiJHBhZCIsIldFQktJVF9CVUciLCJwYWRFbmQiLCJ0cmltTGVmdCIsInRyaW1SaWdodCIsImdldE93blByb3BlcnR5RGVzY3JpcHRvcnMiLCJnZXREZXNjIiwiJHZhbHVlcyIsImZpbmFsbHkiLCJvbkZpbmFsbHkiLCJNU0lFIiwiYm91bmRBcmdzIiwic2V0SW50ZXJ2YWwiLCIkdGFzayIsIlRPX1NUUklOR19UQUciLCJBcnJheVZhbHVlcyIsIkRPTUl0ZXJhYmxlcyIsIkNTU1J1bGVMaXN0IiwiQ1NTU3R5bGVEZWNsYXJhdGlvbiIsIkNTU1ZhbHVlTGlzdCIsIkNsaWVudFJlY3RMaXN0IiwiRE9NUmVjdExpc3QiLCJET01TdHJpbmdMaXN0IiwiRE9NVG9rZW5MaXN0IiwiRGF0YVRyYW5zZmVySXRlbUxpc3QiLCJGaWxlTGlzdCIsIkhUTUxBbGxDb2xsZWN0aW9uIiwiSFRNTENvbGxlY3Rpb24iLCJIVE1MRm9ybUVsZW1lbnQiLCJIVE1MU2VsZWN0RWxlbWVudCIsIk1lZGlhTGlzdCIsIk1pbWVUeXBlQXJyYXkiLCJOYW1lZE5vZGVNYXAiLCJOb2RlTGlzdCIsIlBhaW50UmVxdWVzdExpc3QiLCJQbHVnaW4iLCJQbHVnaW5BcnJheSIsIlNWR0xlbmd0aExpc3QiLCJTVkdOdW1iZXJMaXN0IiwiU1ZHUGF0aFNlZ0xpc3QiLCJTVkdQb2ludExpc3QiLCJTVkdTdHJpbmdMaXN0IiwiU1ZHVHJhbnNmb3JtTGlzdCIsIlNvdXJjZUJ1ZmZlckxpc3QiLCJTdHlsZVNoZWV0TGlzdCIsIlRleHRUcmFja0N1ZUxpc3QiLCJUZXh0VHJhY2tMaXN0IiwiVG91Y2hMaXN0IiwiY29sbGVjdGlvbnMiLCJleHBsaWNpdCIsIkNvbGxlY3Rpb24iLCJPcCIsImhhc093biIsIml0ZXJhdG9yU3ltYm9sIiwiYXN5bmNJdGVyYXRvclN5bWJvbCIsImFzeW5jSXRlcmF0b3IiLCJ0b1N0cmluZ1RhZ1N5bWJvbCIsImlubmVyRm4iLCJvdXRlckZuIiwidHJ5TG9jc0xpc3QiLCJwcm90b0dlbmVyYXRvciIsIkdlbmVyYXRvciIsImdlbmVyYXRvciIsIkNvbnRleHQiLCJfaW52b2tlIiwic3RhdGUiLCJHZW5TdGF0ZVN1c3BlbmRlZFN0YXJ0IiwiR2VuU3RhdGVFeGVjdXRpbmciLCJHZW5TdGF0ZUNvbXBsZXRlZCIsImRvbmVSZXN1bHQiLCJkZWxlZ2F0ZSIsImRlbGVnYXRlUmVzdWx0IiwibWF5YmVJbnZva2VEZWxlZ2F0ZSIsIkNvbnRpbnVlU2VudGluZWwiLCJfc2VudCIsImRpc3BhdGNoRXhjZXB0aW9uIiwicmVjb3JkIiwidHJ5Q2F0Y2giLCJHZW5TdGF0ZVN1c3BlbmRlZFlpZWxkIiwibWFrZUludm9rZU1ldGhvZCIsIkdlbmVyYXRvckZ1bmN0aW9uIiwiR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGUiLCJOYXRpdmVJdGVyYXRvclByb3RvdHlwZSIsIkdwIiwiZGVmaW5lSXRlcmF0b3JNZXRob2RzIiwiQXN5bmNJdGVyYXRvciIsIlByb21pc2VJbXBsIiwicHJldmlvdXNQcm9taXNlIiwiY2FsbEludm9rZVdpdGhNZXRob2RBbmRBcmciLCJfX2F3YWl0IiwidW53cmFwcGVkIiwiaW5mbyIsInJlc3VsdE5hbWUiLCJuZXh0TG9jIiwicHVzaFRyeUVudHJ5IiwibG9jcyIsInRyeUxvYyIsImNhdGNoTG9jIiwiZmluYWxseUxvYyIsImFmdGVyTG9jIiwidHJ5RW50cmllcyIsInJlc2V0VHJ5RW50cnkiLCJjb21wbGV0aW9uIiwicmVzZXQiLCJpdGVyYXRvck1ldGhvZCIsImRpc3BsYXlOYW1lIiwiaXNHZW5lcmF0b3JGdW5jdGlvbiIsImdlbkZ1biIsImN0b3IiLCJhd3JhcCIsImFzeW5jIiwicG9wIiwic2tpcFRlbXBSZXNldCIsInJvb3RSZWNvcmQiLCJydmFsIiwiZXhjZXB0aW9uIiwiaGFuZGxlIiwibG9jIiwiY2F1Z2h0IiwiaGFzQ2F0Y2giLCJoYXNGaW5hbGx5IiwiZmluYWxseUVudHJ5IiwiY29tcGxldGUiLCJmaW5pc2giLCJ0aHJvd24iLCJkZWxlZ2F0ZVlpZWxkIiwiYWNjaWRlbnRhbFN0cmljdE1vZGUiLCJJU19XUkFQIiwidmlydHVhbCIsImlkX21hdGNoX2NvbW1lbnQiLCJpZF9tYXRjaF9wb3N0IiwicmVkZGl0TW9kaWZpY2F0aW9ucyIsImlzTmV3UmVkZGl0IiwicXVlcnlTZWxlY3RvciIsImlmVGhyZWFkUGFnZV9zaG93UmVtb3ZhbFN0YXR1cyIsImFkZFN1YnNjcmliZUxpbmtzX25ld1JlZGRpdF9jb21tZW50cyIsImFycml2ZSIsImFkZFN1YnNjcmliZUxpbmtzX25ld1JlZGRpdF9wb3N0cyIsInNob3dSZW1vdmFsU3RhdHVzRm9yVGhyZWFkT3ZlcmxheSIsImFkZFN1YnNjcmliZUxpbmtzX29sZFJlZGRpdCIsIm5ld1JlZGRpdFRhcmdldCIsInBvc3REYXRhIiwiX2dldEZ1bGxJRHNGcm9tUGF0aCIsInBhdGhuYW1lIiwiX2dldEZ1bGxJRHNGcm9tUGF0aDIiLCJfc2xpY2VkVG9BcnJheSIsInNob3dSZW1vdmFsU3RhdHVzIiwiX3JlZiRuZXdSZWRkaXRUYXJnZXQiLCJfcmVmJHBvc3REYXRhIiwiX2dldEZ1bGxJRHNGcm9tUGF0aDQiLCJjbGFzc05hbWUiLCJtZXNzYWdlXzEiLCJyZW1vdmVkX2J5X2NhdGVnb3J5IiwibWVzc2FnZV8yIiwicG9zdF9wYXRoIiwicmV2ZWRkaXRfbGluayIsIiRodG1sX3dyYXAiLCIkaHRtbF9jb250ZW50IiwiJGh0bWxfZGVzY3JpcHRpb24iLCJhcHBlbmQiLCJwcmVwZW5kVG8iLCJfZ2V0RnVsbElEc0Zyb21QYXRoNiIsInBhcmVudE5vZGUiLCJnZXRJRF9uZXdSZWRkaXQiLCJpZF9tYXRjaCIsImF0dHIiLCJjbG9zZXN0IiwiZWxlbWVudHMiLCJzdWJzY3JpcHRpb25zIiwiaWR4IiwidGFyZ2V0ZWRFbGVtZW50IiwiJGJ1dHRvbiIsImdldEJ1dHRvbiIsImFwcGVuZEJ1dHRvblRvIiwiJGJ1dHRvbl9jbG9uZSIsImNsb25lIiwiYm9keUVsZW1lbnQiLCJ0ZXh0Q29udGVudCIsImJ1dHRvbl9zZWFyY2hfdGV4dCIsIiRsYXN0X2J1dHRvbiIsImluc2VydEFmdGVyIiwiZ2V0QXR0cmlidXRlIiwiX2dldEZ1bGxJRHNGcm9tUGF0aDgiLCJidXR0b25zIiwiJG5ld0J1dHRvbiIsIl9fd2VicGFja19leHBvcnRzX18iLCJyZXZkZGl0TW9kaWZpY2F0aW9ucyIsIl9zdG9yYWdlX2pzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18iLCJfY29udGVudF9jb21tb25fanNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfXyIsImlzVXNlclBhZ2UiLCJpc0luZm9QYWdlIiwibWluQXR0cmlidXRlVmFsdWUiLCJzZWVuX3JlbW92ZWRfaWRzIiwiZ2V0SURzSGFzaEZyb21TZWxlY3RvciIsInNlZW5fYXBwcm92ZWRfaWRzIiwic2Vlbl9sb2NrZWRfaWRzIiwic2Vlbl91bmxvY2tlZF9pZHMiLCJmaW5kSURzRm9yVXNlckFuZE1hcmsiLCJtdXRhdGlvbnMiLCJnZXRFbGVtZW50QnlJZCIsImRpc2Nvbm5lY3QiLCJjaGlsZExpc3QiLCJzdWJ0cmVlIiwiYWRkU3Vic2NyaWJlTGlua3NfcmV2ZGRpdF9jb21tZW50cyIsImFkZFN1YnNjcmliZUxpbmtzX3JldmRkaXRfcG9zdHMiLCJjbGFzc0xpc3QiLCJsaW5rcyIsIiRuZXdMaW5rIiwiaGFzaCIsIl9jb250ZW50X3JlZGRpdF9qc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fIiwiX2NvbnRlbnRfcmV2ZGRpdF9qc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9fIiwiX3JlcXVlc3RzX2pzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8zX18iLCJ3ZWJleHRlbnNpb25fcG9seWZpbGxfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzRfXyIsIndlYmV4dGVuc2lvbl9wb2x5ZmlsbF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNF9fX2RlZmF1bHQiLCJleHRlbmQiLCJleHByIiwiZXF1YWxzaSIsImVsZW0iLCJpbm5lclRleHQiLCJzZXRJdGVtIiwiaXNSZWRkaXQiLCJqUXVlcnkiLCJyZWFkeSIsIm1hdGNoZXMiLCJwYXRoUGFydHMiLCJyZW1vdmVJdGVtIl0sIm1hcHBpbmdzIjoiYUFDRSxJQUFJQSxFQUFtQixHQUd2QixTQUFTQyxFQUFvQkMsR0FHNUIsR0FBR0YsRUFBaUJFLEdBQ25CLE9BQU9GLEVBQWlCRSxHQUFVQyxRQUduQyxJQUFJQyxFQUFTSixFQUFpQkUsR0FBWSxDQUN6Q0csRUFBR0gsRUFDSEksR0FBRyxFQUNISCxRQUFTLElBVVYsT0FOQUksRUFBUUwsR0FBVU0sS0FBS0osRUFBT0QsUUFBU0MsRUFBUUEsRUFBT0QsUUFBU0YsR0FHL0RHLEVBQU9FLEdBQUksRUFHSkYsRUFBT0QsUUFLZkYsRUFBb0JRLEVBQUlGLEVBR3hCTixFQUFvQlMsRUFBSVYsRUFHeEJDLEVBQW9CVSxFQUFJLFNB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LEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FD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bFcsRUFBTyxRQUNQOGtELEdBQWEsRUFDYkMsR0FBYSxFQUNiOEIsR0FBVyxFQUNmQyxPQUFPMTRCLFVBQVUyNEIsTUFBTSxXQUNuQixJQUFNQyxFQUFVdDdDLE9BQU8rQixTQUFTZ25CLEtBQUt2c0IsTUFBTSwwREFDM0MsR0FBSTgrQyxFQUFTLENBQ1RILEVBQTBCLGVBQWZHLEVBQVEsR0FDbkIsSUFBTUMsRUFBWXY3QyxPQUFPK0IsU0FBU3UwQyxTQUFTN2xDLE1BQU0sS0FDNUIsU0FBakI4cUMsRUFBVSxJQUFpQkEsRUFBVXZuRCxRQUFVLEdBQUt1bkQsRUFBVSxJQUM5RGpuRCxFQUFPMEwsT0FBTytCLFNBQVN1MEMsU0FBUzdsQyxNQUFNLEtBQUssR0FDM0Myb0MsR0FBYSxHQUNXLFNBQWpCbUMsRUFBVSxLQUNqQmxDLEdBQWEsR0FHckJ4Z0Qsa0RBQXdDLFNBQUNDLEVBQU9wRSxHQUNpQixJQUF6RGpGLE9BQU93RSxLQUFLNkUsR0FBT3dnQixPQUFPLFNBQUF5VCxHQUFDLE1BQVUsVUFBTkEsSUFBZS80QixPQUM5Q2dNLE9BQU83RixhQUFhK2dELFFBbkJLLGdDQW1CaUMsR0FFMURsN0MsT0FBTzdGLGFBQWFxaEQsV0FyQkssZ0NBdUJ6QkwsRUFDQXpGLDhCQUFvQmhoRCxFQUFRd0Qsb0JBQXFCeEQsRUFBUXlELFFBQVFnRCxlQUFnQnpHLEVBQVF5RCxRQUFRTyxxQkFFakd1Z0QsK0JBQXFCdmtELEVBQVNKLEVBQU04a0QsRUFBWUMsT0FsRGhFIiwiZmlsZSI6InNyYy9jb250ZW50LmpzIiwic291cmNlc0NvbnRlbnQiOlsiIFx0Ly8gVGhlIG1vZHVsZSBjYWNoZVxuIFx0dmFyIGluc3RhbGxlZE1vZHVsZXMgPSB7fTtcblxuIFx0Ly8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbiBcdGZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblxuIFx0XHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcbiBcdFx0aWYoaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0pIHtcbiBcdFx0XHRyZXR1cm4gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0uZXhwb3J0cztcbiBcdFx0fVxuIFx0XHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuIFx0XHR2YXIgbW9kdWxlID0gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0gPSB7XG4gXHRcdFx0aTogbW9kdWxlSWQsXG4gXHRcdFx0bDogZmFsc2UsXG4gXHRcdFx0ZXhwb3J0czoge31cbiBcdFx0fTtcblxuIFx0XHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cbiBcdFx0bW9kdWxlc1ttb2R1bGVJZF0uY2FsbChtb2R1bGUuZXhwb3J0cywgbW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cbiBcdFx0Ly8gRmxhZyB0aGUgbW9kdWxlIGFzIGxvYWRlZFxuIFx0XHRtb2R1bGUubCA9IHRydWU7XG5cbiBcdFx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcbiBcdFx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xuIFx0fVxuXG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlcyBvYmplY3QgKF9fd2VicGFja19tb2R1bGVzX18pXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm0gPSBtb2R1bGVzO1xuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZSBjYWNoZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5jID0gaW5zdGFsbGVkTW9kdWxlcztcblxuIFx0Ly8gZGVmaW5lIGdldHRlciBmdW5jdGlvbiBmb3IgaGFybW9ueSBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSBmdW5jdGlvbihleHBvcnRzLCBuYW1lLCBnZXR0ZXIpIHtcbiBcdFx0aWYoIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBuYW1lKSkge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBuYW1lLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZ2V0dGVyIH0pO1xuIFx0XHR9XG4gXHR9O1xuXG4gXHQvLyBkZWZpbmUgX19lc01vZHVsZSBvbiBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIgPSBmdW5jdGlvbihleHBvcnRzKSB7XG4gXHRcdGlmKHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnICYmIFN5bWJvbC50b1N0cmluZ1RhZykge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuIFx0XHR9XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG4gXHR9O1xuXG4gXHQvLyBjcmVhdGUgYSBmYWtlIG5hbWVzcGFjZSBvYmplY3RcbiBcdC8vIG1vZGUgJiAxOiB2YWx1ZSBpcyBhIG1vZHVsZSBpZCwgcmVxdWlyZSBpdFxuIFx0Ly8gbW9kZSAmIDI6IG1lcmdlIGFsbCBwcm9wZXJ0aWVzIG9mIHZhbHVlIGludG8gdGhlIG5zXG4gXHQvLyBtb2RlICYgNDogcmV0dXJuIHZhbHVlIHdoZW4gYWxyZWFkeSBucyBvYmplY3RcbiBcdC8vIG1vZGUgJiA4fDE6IGJlaGF2ZSBsaWtlIHJlcXVpcmVcbiBcdF9fd2VicGFja19yZXF1aXJlX18udCA9IGZ1bmN0aW9uKHZhbHVlLCBtb2RlKSB7XG4gXHRcdGlmKG1vZGUgJiAxKSB2YWx1ZSA9IF9fd2VicGFja19yZXF1aXJlX18odmFsdWUpO1xuIFx0XHRpZihtb2RlICYgOCkgcmV0dXJuIHZhbHVlO1xuIFx0XHRpZigobW9kZSAmIDQpICYmIHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcgJiYgdmFsdWUgJiYgdmFsdWUuX19lc01vZHVsZSkgcmV0dXJuIHZhbHVlO1xuIFx0XHR2YXIgbnMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIobnMpO1xuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobnMsICdkZWZhdWx0JywgeyBlbnVtZXJhYmxlOiB0cnVlLCB2YWx1ZTogdmFsdWUgfSk7XG4gXHRcdGlmKG1vZGUgJiAyICYmIHR5cGVvZiB2YWx1ZSAhPSAnc3RyaW5nJykgZm9yKHZhciBrZXkgaW4gdmFsdWUpIF9fd2VicGFja19yZXF1aXJlX18uZChucywga2V5LCBmdW5jdGlvbihrZXkpIHsgcmV0dXJuIHZhbHVlW2tleV07IH0uYmluZChudWxsLCBrZXkpKTtcbiBcdFx0cmV0dXJuIG5zO1xuIFx0fTtcblxuIFx0Ly8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXNcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubiA9IGZ1bmN0aW9uKG1vZHVsZSkge1xuIFx0XHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cbiBcdFx0XHRmdW5jdGlvbiBnZXREZWZhdWx0KCkgeyByZXR1cm4gbW9kdWxlWydkZWZhdWx0J107IH0gOlxuIFx0XHRcdGZ1bmN0aW9uIGdldE1vZHVsZUV4cG9ydHMoKSB7IHJldHVybiBtb2R1bGU7IH07XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsICdhJywgZ2V0dGVyKTtcbiBcdFx0cmV0dXJuIGdldHRlcjtcbiBcdH07XG5cbiBcdC8vIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbFxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5vID0gZnVuY3Rpb24ob2JqZWN0LCBwcm9wZXJ0eSkgeyByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwgcHJvcGVydHkpOyB9O1xuXG4gXHQvLyBfX3dlYnBhY2tfcHVibGljX3BhdGhfX1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5wID0gXCJcIjtcblxuXG4gXHQvLyBMb2FkIGVudHJ5IG1vZHVsZSBhbmQgcmV0dXJuIGV4cG9ydHNcbiBcdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fKF9fd2VicGFja19yZXF1aXJlX18ucyA9IDMxOCk7XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi9fZ2xvYmFsJyk7XG52YXIgY29yZSA9IHJlcXVpcmUoJy4vX2NvcmUnKTtcbnZhciBoaWRlID0gcmVxdWlyZSgnLi9faGlkZScpO1xudmFyIHJlZGVmaW5lID0gcmVxdWlyZSgnLi9fcmVkZWZpbmUnKTtcbnZhciBjdHggPSByZXF1aXJlKCcuL19jdHgnKTtcbnZhciBQUk9UT1RZUEUgPSAncHJvdG90eXBlJztcblxudmFyICRleHBvcnQgPSBmdW5jdGlvbiAodHlwZSwgbmFtZSwgc291cmNlKSB7XG4gIHZhciBJU19GT1JDRUQgPSB0eXBlICYgJGV4cG9ydC5GO1xuICB2YXIgSVNfR0xPQkFMID0gdHlwZSAmICRleHBvcnQuRztcbiAgdmFyIElTX1NUQVRJQyA9IHR5cGUgJiAkZXhwb3J0LlM7XG4gIHZhciBJU19QUk9UTyA9IHR5cGUgJiAkZXhwb3J0LlA7XG4gIHZhciBJU19CSU5EID0gdHlwZSAmICRleHBvcnQuQjtcbiAgdmFyIHRhcmdldCA9IElTX0dMT0JBTCA/IGdsb2JhbCA6IElTX1NUQVRJQyA/IGdsb2JhbFtuYW1lXSB8fCAoZ2xvYmFsW25hbWVdID0ge30pIDogKGdsb2JhbFtuYW1lXSB8fCB7fSlbUFJPVE9UWVBFXTtcbiAgdmFyIGV4cG9ydHMgPSBJU19HTE9CQUwgPyBjb3JlIDogY29yZVtuYW1lXSB8fCAoY29yZVtuYW1lXSA9IHt9KTtcbiAgdmFyIGV4cFByb3RvID0gZXhwb3J0c1tQUk9UT1RZUEVdIHx8IChleHBvcnRzW1BST1RPVFlQRV0gPSB7fSk7XG4gIHZhciBrZXksIG93biwgb3V0LCBleHA7XG4gIGlmIChJU19HTE9CQUwpIHNvdXJjZSA9IG5hbWU7XG4gIGZvciAoa2V5IGluIHNvdXJjZSkge1xuICAgIC8vIGNvbnRhaW5zIGluIG5hdGl2ZVxuICAgIG93biA9ICFJU19GT1JDRUQgJiYgdGFyZ2V0ICYmIHRhcmdldFtrZXldICE9PSB1bmRlZmluZWQ7XG4gICAgLy8gZXhwb3J0IG5hdGl2ZSBvciBwYXNzZWRcbiAgICBvdXQgPSAob3duID8gdGFyZ2V0IDogc291cmNlKVtrZXldO1xuICAgIC8vIGJpbmQgdGltZXJzIHRvIGdsb2JhbCBmb3IgY2FsbCBmcm9tIGV4cG9ydCBjb250ZXh0XG4gICAgZXhwID0gSVNfQklORCAmJiBvd24gPyBjdHgob3V0LCBnbG9iYWwpIDogSVNfUFJPVE8gJiYgdHlwZW9mIG91dCA9PSAnZnVuY3Rpb24nID8gY3R4KEZ1bmN0aW9uLmNhbGwsIG91dCkgOiBvdXQ7XG4gICAgLy8gZXh0ZW5kIGdsb2JhbFxuICAgIGlmICh0YXJnZXQpIHJlZGVmaW5lKHRhcmdldCwga2V5LCBvdXQsIHR5cGUgJiAkZXhwb3J0LlUpO1xuICAgIC8vIGV4cG9ydFxuICAgIGlmIChleHBvcnRzW2tleV0gIT0gb3V0KSBoaWRlKGV4cG9ydHMsIGtleSwgZXhwKTtcbiAgICBpZiAoSVNfUFJPVE8gJiYgZXhwUHJvdG9ba2V5XSAhPSBvdXQpIGV4cFByb3RvW2tleV0gPSBvdXQ7XG4gIH1cbn07XG5nbG9iYWwuY29yZSA9IGNvcmU7XG4vLyB0eXBlIGJpdG1hcFxuJGV4cG9ydC5GID0gMTsgICAvLyBmb3JjZWRcbiRleHBvcnQuRyA9IDI7ICAgLy8gZ2xvYmFsXG4kZXhwb3J0LlMgPSA0OyAgIC8vIHN0YXRpY1xuJGV4cG9ydC5QID0gODsgICAvLyBwcm90b1xuJGV4cG9ydC5CID0gMTY7ICAvLyBiaW5kXG4kZXhwb3J0LlcgPSAzMjsgIC8vIHdyYXBcbiRleHBvcnQuVSA9IDY0OyAgLy8gc2FmZVxuJGV4cG9ydC5SID0gMTI4OyAvLyByZWFsIHByb3RvIG1ldGhvZCBmb3IgYGxpYnJhcnlgXG5tb2R1bGUuZXhwb3J0cyA9ICRleHBvcnQ7XG4iLCJpbXBvcnQge2FscGhhTG93ZXJTb3J0LCBJdGVtRm9yU3RvcmFnZSwgTG9jYWxTdG9yYWdlSXRlbSwgdHJpbURpY3RfYnlfbnVtYmVyVmFsdWVkQXR0cmlidXRlfSBmcm9tICcuL2NvbW1vbi5qcydcbmltcG9ydCBicm93c2VyIGZyb20gJ3dlYmV4dGVuc2lvbi1wb2x5ZmlsbCdcblxuZXhwb3J0IGNvbnN0IElOVEVSVkFMX0RFRkFVTFQgPSAxO1xuXG4vLyBUaGVzZSBsaW1pdHMgYXJlIHNldCB3aXRoIGNvbnNpZGVyYXRpb24gZm9yIENocm9tZSdzIHN5bmMgJiBsb2NhbCBzdG9yYWdlIGxpbWl0cyxcbi8vIGFuZCBmb3IgdGhlIG9iamVjdHMgc3RvcmVkIGJ5IHRoZSBleHRlbnNpb25cbmNvbnN0IE1BWF9TVUJTQ1JJUFRJT05TID0gNTtcbmNvbnN0IE1BWF9MT0NBTF9TVE9SQUdFX0lURU1TX1BFUl9PQkpFQ1QgPSA1MDBcbmV4cG9ydCBjb25zdCBNQVhfU1lOQ19TVE9SQUdFX0lURU1TX1BFUl9PQkpFQ1QgPSAxMzBcbmV4cG9ydCBjb25zdCBNQVhfU1lOQ19TVE9SQUdFX0NIQU5HRVMgPSAxMDBcbmV4cG9ydCBjb25zdCBNQVhfT1RIRVJfU1VCU0NSSVBUSU9OUyA9IDEwMFxuXG5leHBvcnQgY29uc3QgUkVNT1ZFRCA9IDFcbmV4cG9ydCBjb25zdCBBUFBST1ZFRCA9IDJcbmV4cG9ydCBjb25zdCBMT0NLRUQgPSAzXG5leHBvcnQgY29uc3QgVU5MT0NLRUQgPSA0XG5leHBvcnQgY29uc3QgRURJVEVEID0gNVxuZXhwb3J0IGNvbnN0IERFTEVURUQgPSA2XG5cbmNvbnN0IHRyYWNrVHlwZXMgPSB7J2NoYW5nZXMnOiBbXSwgJ3JlbW92ZWQnOiB7fSwgJ2FwcHJvdmVkJzoge30sICdsb2NrZWQnOiB7fSwgJ3VubG9ja2VkJzoge319O1xuXG5jb25zdCBnZXRPYmplY3ROYW1lID0gKHR5cGUsIHRoaW5nLCBpc1VzZXIpID0+IHtcbiAgICBpZiAoaXNVc2VyKSB7XG4gICAgICAgIHJldHVybiB0eXBlKydfdV8nK3RoaW5nXG4gICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIHR5cGUrJ18nK3RoaW5nXG4gICAgfVxufVxuXG5jb25zdCBhZGRUcmFja1R5cGVzID0gKG9iamVjdCwgdGhpbmcsIGlzVXNlcj10cnVlKSA9PiB7XG4gICAgT2JqZWN0LmtleXModHJhY2tUeXBlcykuZm9yRWFjaCh0eXBlID0+IHtcbiAgICAgICAgb2JqZWN0W2dldE9iamVjdE5hbWUodHlwZSwgdGhpbmcsIGlzVXNlcildID0gdHJhY2tUeXBlc1t0eXBlXVxuICAgIH0pXG59XG5cbmV4cG9ydCBjb25zdCBnZXRPYmplY3ROYW1lc0ZvclRoaW5nID0gKHRoaW5nLCBpc1VzZXI9dHJ1ZSkgPT4ge1xuICAgIGNvbnN0IG5hbWVzID0ge31cbiAgICBPYmplY3Qua2V5cyh0cmFja1R5cGVzKS5mb3JFYWNoKHR5cGUgPT4ge1xuICAgICAgICBuYW1lc1t0eXBlXSA9IGdldE9iamVjdE5hbWUodHlwZSwgdGhpbmcsIGlzVXNlcilcbiAgICB9KVxuICAgIHJldHVybiBuYW1lc1xufVxuXG5jb25zdCBnZXRVc2VySW5pdCA9ICh1c2VyKSA9PiB7XG4gICAgY29uc3QgcmVzdWx0ID0ge31cbiAgICBhZGRUcmFja1R5cGVzKHJlc3VsdCwgdXNlciwgdHJ1ZSlcbiAgICByZXR1cm4gcmVzdWx0XG59XG5cbmNvbnN0IGdldFN0b3JhZ2VJbml0ID0gKCkgPT4ge1xuICAgIGNvbnN0IHJlc3VsdCA9IHtcbiAgICAgICAgdXNlcl9zdWJzY3JpcHRpb25zOiB7fSxcbiAgICAgICAgb3RoZXJfc3Vic2NyaXB0aW9uczoge30sXG4gICAgICAgIG9wdGlvbnM6IHtpbnRlcnZhbDogSU5URVJWQUxfREVGQVVMVCxcbiAgICAgICAgICAgICAgICAgIGN1c3RvbV9jbGllbnRpZDogJycsXG4gICAgICAgICAgICAgICAgICByZW1vdmFsX3N0YXR1czoge3RyYWNrOiB0cnVlLCBub3RpZnk6IHRydWV9LFxuICAgICAgICAgICAgICAgICAgbG9ja19zdGF0dXM6IHt0cmFjazogdHJ1ZSwgbm90aWZ5OiB0cnVlfSxcbiAgICAgICAgICAgICAgICAgIG1vbml0b3JfcXVhcmFudGluZWQ6IGZhbHNlLFxuICAgICAgICAgICAgICB9LFxuICAgICAgICBsYXN0X2NoZWNrOiBudWxsLFxuICAgICAgICBsYXN0X2NoZWNrX3F1YXJhbnRpbmVkOiBudWxsLFxuICAgIH1cbiAgICBhZGRUcmFja1R5cGVzKHJlc3VsdCwgJ290aGVyJywgZmFsc2UpXG4gICAgcmV0dXJuIHJlc3VsdDtcbn1cblxuZXhwb3J0IGNvbnN0IG1hcmtFdmVyeXRoaW5nQXNTZWVuID0gKCkgPT4ge1xuICAgIHJldHVybiBicm93c2VyLnN0b3JhZ2Uuc3luYy5nZXQobnVsbClcbiAgICAudGhlbihzdG9yYWdlID0+IHtcbiAgICAgICAgY29uc3QgdXNlcnMgPSBPYmplY3Qua2V5cyhzdG9yYWdlLnVzZXJfc3Vic2NyaXB0aW9ucyk7XG4gICAgICAgIGNvbnN0IGFsbEtleXMgPSBbXVxuICAgICAgICB1c2Vycy5mb3JFYWNoKHVzZXIgPT4ge1xuICAgICAgICAgICAgbWFya1RoaW5nQXNTZWVuKHN0b3JhZ2UsIHVzZXIsIHRydWUpXG4gICAgICAgIH0pXG4gICAgICAgIG1hcmtUaGluZ0FzU2VlbihzdG9yYWdlLCAnb3RoZXInLCBmYWxzZSlcbiAgICAgICAgcmV0dXJuIHNldFN0b3JhZ2VVcGRhdGVCYWRnZShzdG9yYWdlKVxuICAgIH0pXG59XG5cbmV4cG9ydCBjb25zdCBtYXJrVGhpbmdBc1NlZW4gPSAoc3RvcmFnZSwgdGhpbmcsIGlzVXNlcikgPT4ge1xuICAgIGNvbnN0IGtleXMgPSBnZXRPYmplY3ROYW1lc0ZvclRoaW5nKHRoaW5nLCBpc1VzZXIpXG4gICAgZGVsZXRlIGtleXNbJ2NoYW5nZXMnXVxuICAgIGNvbnN0IGZ1bGxLZXluYW1lcyA9IFtdXG4gICAgT2JqZWN0LnZhbHVlcyhrZXlzKS5mb3JFYWNoKGZ1bGxLZXluYW1lID0+IHtcbiAgICAgICAgZnVsbEtleW5hbWVzLnB1c2goZnVsbEtleW5hbWUpXG4gICAgfSlcbiAgICBmdWxsS2V5bmFtZXMuZm9yRWFjaChmdWxsS2V5bmFtZSA9PiB7XG4gICAgICAgIE9iamVjdC52YWx1ZXMoc3RvcmFnZVtmdWxsS2V5bmFtZV0pLmZvckVhY2goaXRlbSA9PiB7XG4gICAgICAgICAgICBpdGVtLnUgPSBmYWxzZVxuICAgICAgICB9KVxuICAgIH0pXG59XG5cbmV4cG9ydCBjb25zdCBzZXRTdG9yYWdlVXBkYXRlQmFkZ2UgPSAoc3RvcmFnZSkgPT4ge1xuICAgIHJldHVybiBicm93c2VyLnN0b3JhZ2Uuc3luYy5zZXQoc3RvcmFnZSlcbiAgICAudGhlbihyZXMgPT4ge1xuICAgICAgICByZXR1cm4gYnJvd3Nlci5ydW50aW1lLnNlbmRNZXNzYWdlKHthY3Rpb246ICd1cGRhdGUtYmFkZ2UnfSlcbiAgICB9KVxufVxuXG5jb25zdCBtYXJrU2VlbkZvclN0b3JhZ2VLZXkgPSAoc3RvcmFnZSwgc3RvcmFnZV9rZXlzLCBrZXksIGlkcywgaXNfdXNlcikgPT4ge1xuICAgIGNvbnN0IHN0b3JhZ2VfaXRlbSA9IHN0b3JhZ2Vbc3RvcmFnZV9rZXlzW2tleV1dXG4gICAgT2JqZWN0LmtleXMoaWRzKS5mb3JFYWNoKGlkID0+IHtcbiAgICAgICAgaWYgKGlkIGluIHN0b3JhZ2VfaXRlbSkge1xuICAgICAgICAgICAgc3RvcmFnZV9pdGVtW2lkXS51ID0gZmFsc2VcbiAgICAgICAgfSBlbHNlIGlmIChpc191c2VyKSB7XG4gICAgICAgICAgICBzdG9yYWdlX2l0ZW1baWRdID0gbmV3IEl0ZW1Gb3JTdG9yYWdlKGlkc1tpZF0sIGZhbHNlKVxuICAgICAgICB9XG4gICAgfSlcbn1cblxuZXhwb3J0IGNvbnN0IG1hcmtJRHNBc1NlZW5JZlN1YnNjcmliZWQgPSAoc3RvcmFnZSwgdXNlciwgaXNfdXNlciwgcmVtb3ZlZF9pZHMsIGFwcHJvdmVkX2lkcywgbG9ja2VkX2lkcywgdW5sb2NrZWRfaWRzLCBjYWxsYmFjayA9ICgpID0+IHt9KSA9PiB7XG4gICAgY29uc3Qgc3RvcmFnZV9rZXlzID0gZ2V0T2JqZWN0TmFtZXNGb3JUaGluZyh1c2VyLCBpc191c2VyKVxuICAgIGRlbGV0ZSBzdG9yYWdlX2tleXNbJ2NoYW5nZXMnXVxuICAgIGNvbnN0IHVzZXJfc3Vic2NyaWJlZCA9IHN0b3JhZ2UudXNlcl9zdWJzY3JpcHRpb25zW3VzZXJdXG4gICAgaWYgKHVzZXJfc3Vic2NyaWJlZCB8fCAhIGlzX3VzZXIpIHtcbiAgICAgICAgbWFya1NlZW5Gb3JTdG9yYWdlS2V5KHN0b3JhZ2UsIHN0b3JhZ2Vfa2V5cywgJ3JlbW92ZWQnLCByZW1vdmVkX2lkcywgaXNfdXNlcilcbiAgICAgICAgbWFya1NlZW5Gb3JTdG9yYWdlS2V5KHN0b3JhZ2UsIHN0b3JhZ2Vfa2V5cywgJ2FwcHJvdmVkJywgYXBwcm92ZWRfaWRzLCBpc191c2VyKVxuICAgICAgICBtYXJrU2VlbkZvclN0b3JhZ2VLZXkoc3RvcmFnZSwgc3RvcmFnZV9rZXlzLCAnbG9ja2VkJywgbG9ja2VkX2lkcywgaXNfdXNlcilcbiAgICAgICAgbWFya1NlZW5Gb3JTdG9yYWdlS2V5KHN0b3JhZ2UsIHN0b3JhZ2Vfa2V5cywgJ3VubG9ja2VkJywgdW5sb2NrZWRfaWRzLCBpc191c2VyKVxuICAgICAgICBjaHJvbWUuc3RvcmFnZS5zeW5jLnNldChzdG9yYWdlLCBjYWxsYmFjaylcbiAgICB9XG5cbn1cblxuZXhwb3J0IGNvbnN0IHN1YnNjcmliZUlkID0gKGlkLCBjYWxsYmFjayA9ICgpID0+IHt9KSA9PiB7XG4gICAgY29uc3Qga2V5ID0gJ290aGVyX3N1YnNjcmlwdGlvbnMnXG4gICAgY2hyb21lLnN0b3JhZ2Uuc3luYy5nZXQoa2V5LCAocmVzdWx0KSA9PiB7XG4gICAgICAgIHJlc3VsdFtrZXldW2lkXSA9IHt0OiBNYXRoLmZsb29yKG5ldyBEYXRlKCkuZ2V0VGltZSgpLzEwMDApfVxuICAgICAgICBjb25zdCBpdGVtc1RvU2F2ZSA9IHRyaW1EaWN0X2J5X251bWJlclZhbHVlZEF0dHJpYnV0ZShyZXN1bHRba2V5XSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgTUFYX09USEVSX1NVQlNDUklQVElPTlMsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICd0JylcbiAgICAgICAgY2hyb21lLnN0b3JhZ2Uuc3luYy5zZXQoe1trZXldOiBpdGVtc1RvU2F2ZX0sIGNhbGxiYWNrKVxuICAgIH0pXG59XG5leHBvcnQgY29uc3QgdW5zdWJzY3JpYmVJZCA9IChpZCwgY2FsbGJhY2sgPSAoKSA9PiB7fSkgPT4ge1xuICAgIGNvbnN0IG1haW5LZXkgPSAnb3RoZXJfc3Vic2NyaXB0aW9ucydcbiAgICBjb25zdCBvdGhlcktleXMgPSBnZXRPYmplY3ROYW1lc0ZvclRoaW5nKCdvdGhlcicsIGZhbHNlKVxuICAgIGRlbGV0ZSBvdGhlcktleXNbJ2NoYW5nZXMnXVxuICAgIGNocm9tZS5zdG9yYWdlLnN5bmMuZ2V0KE9iamVjdC52YWx1ZXMob3RoZXJLZXlzKS5jb25jYXQobWFpbktleSksIChyZXN1bHQpID0+IHtcbiAgICAgICAgZGVsZXRlIHJlc3VsdFttYWluS2V5XVtpZF1cbiAgICAgICAgT2JqZWN0LnZhbHVlcyhvdGhlcktleXMpLmZvckVhY2goZnVsbEtleW5hbWUgPT4ge1xuICAgICAgICAgICAgaWYgKGlkIGluIHJlc3VsdFtmdWxsS2V5bmFtZV0pIHtcbiAgICAgICAgICAgICAgICBkZWxldGUgcmVzdWx0W2Z1bGxLZXluYW1lXVtpZF1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSlcbiAgICAgICAgY2hyb21lLnN0b3JhZ2Uuc3luYy5zZXQocmVzdWx0LCAoKSA9PiB7XG4gICAgICAgICAgICBjaHJvbWUucnVudGltZS5zZW5kTWVzc2FnZSh7YWN0aW9uOiAndXBkYXRlLWJhZGdlJ30sIGNhbGxiYWNrKVxuICAgICAgICB9KVxuICAgIH0pXG59XG5leHBvcnQgY29uc3QgZ2V0U3Vic2NyaWJlZElkcyA9IChjYWxsYmFjayA9ICgpID0+IHt9KSA9PiB7XG4gICAgY29uc3Qga2V5ID0gJ290aGVyX3N1YnNjcmlwdGlvbnMnXG4gICAgY2hyb21lLnN0b3JhZ2Uuc3luYy5nZXQoa2V5LCAocmVzdWx0KSA9PiB7XG4gICAgICAgIGNhbGxiYWNrKE9iamVjdC5rZXlzKHJlc3VsdFtrZXldKSlcbiAgICB9KVxufVxuXG5leHBvcnQgY29uc3Qgc3Vic2NyaWJlVXNlciA9ICh1c2VyLCBjYWxsYmFja1N1Y2Nlc3MgPSAoKSA9PiB7fSwgY2FsbGJhY2tFcnJvciA9ICgpID0+IHt9KSA9PiB7XG4gICAgY29uc3QgdXNlckluaXQgPSBnZXRVc2VySW5pdCh1c2VyKVxuICAgIGNocm9tZS5zdG9yYWdlLnN5bmMuZ2V0KCd1c2VyX3N1YnNjcmlwdGlvbnMnLCAocmVzdWx0KSA9PiB7XG4gICAgICAgIGNvbnN0IHVzZXJfc3Vic2NyaXB0aW9ucyA9IHJlc3VsdC51c2VyX3N1YnNjcmlwdGlvbnNcbiAgICAgICAgaWYgKCEgKHVzZXIgaW4gdXNlcl9zdWJzY3JpcHRpb25zKSkge1xuICAgICAgICAgICAgaWYgKE9iamVjdC5rZXlzKHVzZXJfc3Vic2NyaXB0aW9ucykubGVuZ3RoIDwgTUFYX1NVQlNDUklQVElPTlMpIHtcbiAgICAgICAgICAgICAgICB1c2VyX3N1YnNjcmlwdGlvbnNbdXNlcl0gPSB0cnVlXG4gICAgICAgICAgICAgICAgY2hyb21lLnN0b3JhZ2Uuc3luYy5zZXQoe3VzZXJfc3Vic2NyaXB0aW9ucywgLi4udXNlckluaXR9LCBjYWxsYmFja1N1Y2Nlc3MpXG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGNhbGxiYWNrRXJyb3IoJ21heGltdW0gbnVtYmVyIG9mIHN1YnNjcmlwdGlvbnMgcmVhY2hlZCcpXG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjYWxsYmFja0Vycm9yKCdhbHJlYWR5IHN1YnNjcmliZWQgdG8gdGhpcyB1c2VyJylcbiAgICAgICAgfVxuICAgIH0pXG59XG5cbmV4cG9ydCBjb25zdCB1bnN1YnNjcmliZVVzZXIgPSAodXNlciwgY2FsbGJhY2spID0+IHtcbiAgICBjb25zdCB1c2VyS2V5cyA9IE9iamVjdC5rZXlzKGdldFVzZXJJbml0KHVzZXIpKVxuICAgIGNocm9tZS5zdG9yYWdlLnN5bmMuZ2V0KCd1c2VyX3N1YnNjcmlwdGlvbnMnLCAocmVzdWx0KSA9PiB7XG4gICAgICAgIGNvbnN0IHVzZXJfc3Vic2NyaXB0aW9ucyA9IHJlc3VsdC51c2VyX3N1YnNjcmlwdGlvbnNcbiAgICAgICAgZGVsZXRlIHVzZXJfc3Vic2NyaXB0aW9uc1t1c2VyXVxuICAgICAgICBjaHJvbWUuc3RvcmFnZS5zeW5jLnNldCh7dXNlcl9zdWJzY3JpcHRpb25zfSwgKCkgPT4ge1xuICAgICAgICAgICAgY2hyb21lLnN0b3JhZ2Uuc3luYy5yZW1vdmUodXNlcktleXMsICgpID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCB1c2VyS2V5X2xvY2FsU3RvcmFnZSA9IGdldE9iamVjdE5hbWUoJ2l0ZW1zJywgdXNlciwgdHJ1ZSlcbiAgICAgICAgICAgICAgICBjaHJvbWUucnVudGltZS5zZW5kTWVzc2FnZSh7YWN0aW9uOiAndXBkYXRlLWJhZGdlJ30pXG4gICAgICAgICAgICAgICAgY2hyb21lLnN0b3JhZ2UubG9jYWwucmVtb3ZlKHVzZXJLZXlfbG9jYWxTdG9yYWdlLCBjYWxsYmFjaylcbiAgICAgICAgICAgIH0pXG4gICAgICAgIH0pXG4gICAgfSlcbn1cblxuZXhwb3J0IGNvbnN0IGluaXRTdG9yYWdlID0gKGNhbGxiYWNrKSA9PiB7XG4gICAgY2hyb21lLnN0b3JhZ2Uuc3luYy5nZXQobnVsbCwgKHN0b3JhZ2UpID0+IHtcbiAgICAgICAgaWYgKE9iamVjdC5rZXlzKHN0b3JhZ2UpLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgY2hyb21lLnN0b3JhZ2Uuc3luYy5zZXQoZ2V0U3RvcmFnZUluaXQoKSwgY2FsbGJhY2spXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjYWxsYmFjaygpXG4gICAgICAgIH1cbiAgICB9KVxufVxuXG5leHBvcnQgY29uc3QgZ2V0U3Vic2NyaWJlZFVzZXJzX3dpdGhTZWVuQW5kVW5zZWVuSURzID0gKGNhbGxiYWNrKSA9PiB7XG4gICAgY2hyb21lLnN0b3JhZ2Uuc3luYy5nZXQobnVsbCwgKHN0b3JhZ2UpID0+IHtcbiAgICAgICAgY29uc3QgdXNlcnMgPSBPYmplY3Qua2V5cyhzdG9yYWdlLnVzZXJfc3Vic2NyaXB0aW9ucyk7XG4gICAgICAgIGNvbnN0IHVzZXJzX3dpdGhJRHMgPSB7fVxuICAgICAgICB1c2Vycy5mb3JFYWNoKHVzZXIgPT4ge1xuICAgICAgICAgICAgdXNlcnNfd2l0aElEc1t1c2VyXSA9IGdldElEc190aGluZyh1c2VyLCB0cnVlLCBzdG9yYWdlKVxuICAgICAgICB9KVxuICAgICAgICB1c2Vyc193aXRoSURzWydvdGhlciddID0gZ2V0SURzX3RoaW5nKCdvdGhlcicsIGZhbHNlLCBzdG9yYWdlKVxuICAgICAgICBjYWxsYmFjayh1c2Vyc193aXRoSURzLCBzdG9yYWdlKVxuICAgIH0pXG59XG5cbmV4cG9ydCBjb25zdCBnZXRTdWJzY3JpYmVkVXNlcnNfd2l0aFVuc2VlbklEcyA9IChjYWxsYmFjaykgPT4ge1xuICAgIGNocm9tZS5zdG9yYWdlLnN5bmMuZ2V0KG51bGwsIChzdG9yYWdlKSA9PiB7XG4gICAgICAgIGNvbnN0IHVzZXJzID0gT2JqZWN0LmtleXMoc3RvcmFnZS51c2VyX3N1YnNjcmlwdGlvbnMpO1xuICAgICAgICBjb25zdCB1c2Vyc193aXRoSURzID0ge31cbiAgICAgICAgdXNlcnMuZm9yRWFjaCh1c2VyID0+IHtcbiAgICAgICAgICAgIHVzZXJzX3dpdGhJRHNbdXNlcl0gPSBnZXRVbnNlZW5JRHNfdGhpbmcodXNlciwgdHJ1ZSwgc3RvcmFnZSlcbiAgICAgICAgfSlcbiAgICAgICAgdXNlcnNfd2l0aElEc1snb3RoZXInXSA9IGdldFVuc2VlbklEc190aGluZygnb3RoZXInLCBmYWxzZSwgc3RvcmFnZSlcbiAgICAgICAgY2FsbGJhY2sodXNlcnNfd2l0aElEcylcbiAgICB9KVxufVxuXG5leHBvcnQgY29uc3QgZ2V0VW5zZWVuSURzX3RoaW5nID0gKHRoaW5nLCBpc1VzZXIsIHN0b3JhZ2UpID0+IHtcbiAgICByZXR1cm4gZ2V0SURzX3RoaW5nKHRoaW5nLCBpc1VzZXIsIHN0b3JhZ2UpWyd1bnNlZW4nXVxufVxuXG4vLyBHZXQgSURzIG9mIGl0ZW1zIHdob3NlIHN0YXR1cyBoYXMgY2hhbmdlZFxuZXhwb3J0IGNvbnN0IGdldElEc190aGluZyA9ICh0aGluZywgaXNVc2VyLCBzdG9yYWdlKSA9PiB7XG4gICAgY29uc3QgdHJhY2tfcmVtb3ZhbCA9IHN0b3JhZ2Uub3B0aW9ucy5yZW1vdmFsX3N0YXR1cy50cmFja1xuICAgIGNvbnN0IHRyYWNrX2xvY2sgPSBzdG9yYWdlLm9wdGlvbnMubG9ja19zdGF0dXMudHJhY2tcbiAgICBjb25zdCB1bnNlZW5JRHMgPSB7fVxuICAgIGNvbnN0IHNlZW5JRHMgPSB7fVxuICAgIGxldCB0eXBlcyA9IFtdXG4gICAgY29uc3Qga2V5cyA9IGdldE9iamVjdE5hbWVzRm9yVGhpbmcodGhpbmcsIGlzVXNlcilcbiAgICBpZiAodHJhY2tfcmVtb3ZhbCkgdHlwZXMucHVzaChrZXlzWydyZW1vdmVkJ10sIGtleXNbJ2FwcHJvdmVkJ10pXG4gICAgaWYgKHRyYWNrX2xvY2spIHR5cGVzLnB1c2goa2V5c1snbG9ja2VkJ10sIGtleXNbJ3VubG9ja2VkJ10pXG5cbiAgICB0eXBlcy5mb3JFYWNoKHR5cGUgPT4ge1xuICAgICAgICBPYmplY3Qua2V5cyhzdG9yYWdlW3R5cGVdKS5mb3JFYWNoKGlkID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGl0ZW0gPSBzdG9yYWdlW3R5cGVdW2lkXVxuICAgICAgICAgICAgaWYgKGl0ZW0udSkgdW5zZWVuSURzW2lkXSA9IHRydWVcbiAgICAgICAgICAgIGVsc2Ugc2VlbklEc1tpZF0gPSB0cnVlXG4gICAgICAgIH0pXG4gICAgfSlcbiAgICByZXR1cm4ge3Vuc2VlbjogT2JqZWN0LmtleXModW5zZWVuSURzKSwgc2VlbjogT2JqZWN0LmtleXMoc2VlbklEcyl9XG59XG5cbmV4cG9ydCBjb25zdCBnZXRMb2NhbFN0b3JhZ2VJdGVtcyA9ICh0aGluZywgaXNVc2VyKSA9PiB7XG4gICAgY29uc3Qga2V5X2xvY2FsU3RvcmFnZSA9IGdldE9iamVjdE5hbWUoJ2l0ZW1zJywgdGhpbmcsIGlzVXNlcilcbiAgICByZXR1cm4gYnJvd3Nlci5zdG9yYWdlLmxvY2FsLmdldCh7W2tleV9sb2NhbFN0b3JhZ2VdOiB7fX0pXG4gICAgLnRoZW4obG9jYWxTdG9yYWdlSXRlbXMgPT4ge1xuICAgICAgICByZXR1cm4gbG9jYWxTdG9yYWdlSXRlbXNba2V5X2xvY2FsU3RvcmFnZV1cbiAgICB9KVxufVxuXG5leHBvcnQgY29uc3Qgc2F2ZUxvY2FsU3RvcmFnZUl0ZW1zID0gKHRoaW5nLCBpc1VzZXIsIGl0ZW1zVG9TYXZlKSA9PiB7XG4gICAgY29uc3Qga2V5X2xvY2FsU3RvcmFnZSA9IGdldE9iamVjdE5hbWUoJ2l0ZW1zJywgdGhpbmcsIGlzVXNlcilcbiAgICByZXR1cm4gYnJvd3Nlci5zdG9yYWdlLmxvY2FsLnNldCh7W2tleV9sb2NhbFN0b3JhZ2VdOiBpdGVtc1RvU2F2ZX0pXG59XG5cbmV4cG9ydCBjb25zdCBhZGRMb2NhbFN0b3JhZ2VJdGVtcyA9IChpdGVtcywgdGhpbmcsIGlzVXNlcikgPT4ge1xuICAgIGNvbnN0IGtleV9sb2NhbFN0b3JhZ2UgPSBnZXRPYmplY3ROYW1lKCdpdGVtcycsIHRoaW5nLCBpc1VzZXIpXG4gICAgcmV0dXJuIGNocm9tZS5zdG9yYWdlLmxvY2FsLmdldCh7W2tleV9sb2NhbFN0b3JhZ2VdOiB7fX0sIChsb2NhbFN0b3JhZ2VJdGVtcykgPT4ge1xuICAgICAgICBjb25zdCBzdG9yZWRJdGVtcyA9IGxvY2FsU3RvcmFnZUl0ZW1zW2tleV9sb2NhbFN0b3JhZ2VdXG4gICAgICAgIE9iamVjdC5rZXlzKGl0ZW1zKS5mb3JFYWNoKGlkID0+IHtcbiAgICAgICAgICAgIHN0b3JlZEl0ZW1zW2lkXSA9IGl0ZW1zW2lkXVxuICAgICAgICB9KVxuICAgICAgICBsZXQgaXRlbXNUb1NhdmUgPSBzdG9yZWRJdGVtc1xuICAgICAgICBpZiAoT2JqZWN0LmtleXMoc3RvcmVkSXRlbXMpLmxlbmd0aCA+IE1BWF9MT0NBTF9TVE9SQUdFX0lURU1TX1BFUl9PQkpFQ1QpIHtcbiAgICAgICAgICAgIGl0ZW1zVG9TYXZlID0gdHJpbURpY3RPZkl0ZW1zX2J5X3V0Y0F0dHJpYnV0ZShzdG9yZWRJdGVtcywgTUFYX0xPQ0FMX1NUT1JBR0VfSVRFTVNfUEVSX09CSkVDVCwgJ28nKVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBicm93c2VyLnN0b3JhZ2UubG9jYWwuc2V0KHtba2V5X2xvY2FsU3RvcmFnZV06IGl0ZW1zVG9TYXZlfSlcbiAgICB9KVxufVxuXG5leHBvcnQgY29uc3QgZ2V0SXRlbUZyb21Mb2NhbFN0b3JhZ2UgPSAodGhpbmcsIGlzVXNlciwgaWQsIGxvY2FsU3RvcmFnZSkgPT4ge1xuICAgIGNvbnN0IGtleSA9IGdldE9iamVjdE5hbWUoJ2l0ZW1zJywgdGhpbmcsIGlzVXNlcilcbiAgICBpZiAoa2V5IGluIGxvY2FsU3RvcmFnZSkge1xuICAgICAgICBpZiAoaWQgaW4gbG9jYWxTdG9yYWdlW2tleV0pIHtcbiAgICAgICAgICAgIHJldHVybiBuZXcgTG9jYWxTdG9yYWdlSXRlbSh7b2JqZWN0OiBsb2NhbFN0b3JhZ2Vba2V5XVtpZF19KVxuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiAnJ1xufVxuXG5leHBvcnQgY29uc3QgZ2V0QWxsQ2hhbmdlcyA9IChjYWxsYmFjaykgPT4ge1xuICAgIGNocm9tZS5zdG9yYWdlLnN5bmMuZ2V0KCd1c2VyX3N1YnNjcmlwdGlvbnMnLCAocmVzdWx0KSA9PiB7XG4gICAgICAgIGNvbnN0IGtleXMgPSBbZ2V0T2JqZWN0TmFtZSgnY2hhbmdlcycsICdvdGhlcicsIGZhbHNlKV1cbiAgICAgICAgY29uc3Qga2V5VG9Vc2VyX2xvb2t1cCA9IHtjaGFuZ2VzX290aGVyOiAnb3RoZXInfVxuXG4gICAgICAgIE9iamVjdC5rZXlzKHJlc3VsdC51c2VyX3N1YnNjcmlwdGlvbnMpLmZvckVhY2godXNlciA9PiB7XG4gICAgICAgICAgICBjb25zdCBrZXkgPSBnZXRPYmplY3ROYW1lKCdjaGFuZ2VzJywgdXNlciwgdHJ1ZSlcbiAgICAgICAgICAgIGtleXMucHVzaChrZXkpXG4gICAgICAgICAgICBrZXlUb1VzZXJfbG9va3VwW2tleV0gPSB1c2VyXG4gICAgICAgIH0pXG4gICAgICAgIGNocm9tZS5zdG9yYWdlLnN5bmMuZ2V0KGtleXMsIChyZXMyKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBjaGFuZ2VzQnlVc2VyID0ge31cbiAgICAgICAgICAgIGtleXMuZm9yRWFjaChrZXkgPT4ge1xuICAgICAgICAgICAgICAgIGlmICgoa2V5IGluIHJlczIpICYmIHJlczJba2V5XS5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICAgICAgY2hhbmdlc0J5VXNlcltrZXlUb1VzZXJfbG9va3VwW2tleV1dID0gcmVzMltrZXldXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIGNhbGxiYWNrKGNoYW5nZXNCeVVzZXIpXG4gICAgICAgIH0pXG4gICAgfSlcbn1cblxuZXhwb3J0IGNvbnN0IGdldE9wdGlvbnMgPSAoY2FsbGJhY2spID0+IHtcbiAgICByZXR1cm4gYnJvd3Nlci5zdG9yYWdlLnN5bmMuZ2V0KFsndXNlcl9zdWJzY3JpcHRpb25zJywgJ290aGVyX3N1YnNjcmlwdGlvbnMnLCAnb3B0aW9ucyddKVxuICAgIC50aGVuKHJlc3VsdCA9PiB7XG4gICAgICAgIGNvbnN0IHVzZXJzID0gT2JqZWN0LmtleXMocmVzdWx0LnVzZXJfc3Vic2NyaXB0aW9ucylcbiAgICAgICAgY29uc3Qgb3RoZXJzID0gT2JqZWN0LmtleXMocmVzdWx0Lm90aGVyX3N1YnNjcmlwdGlvbnMpXG4gICAgICAgIGNvbnN0IG9wdGlvbnMgPSByZXN1bHQub3B0aW9uc1xuICAgICAgICByZXR1cm4gY2FsbGJhY2sodXNlcnMsIG90aGVycywgb3B0aW9ucylcbiAgICB9KVxuICAgIC5jYXRjaChjb25zb2xlLmxvZylcbn1cbmV4cG9ydCBjb25zdCBzYXZlT3B0aW9ucyA9IChpbnRlcnZhbCwgY3VzdG9tX2NsaWVudGlkLCByZW1vdmVkX3RyYWNrLCByZW1vdmVkX25vdGlmeSwgbG9ja2VkX3RyYWNrLCBsb2NrZWRfbm90aWZ5LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhpZGVfc3Vic2NyaWJlLCBtb25pdG9yX3F1YXJhbnRpbmVkLCBjYWxsYmFjaykgPT4ge1xuICAgIGNocm9tZS5zdG9yYWdlLnN5bmMuc2V0KHtvcHRpb25zOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGludGVydmFsLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdXN0b21fY2xpZW50aWQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlbW92YWxfc3RhdHVzOiB7dHJhY2s6IHJlbW92ZWRfdHJhY2ssIG5vdGlmeTogcmVtb3ZlZF9ub3RpZnl9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsb2NrX3N0YXR1czogICAge3RyYWNrOiBsb2NrZWRfdHJhY2ssICBub3RpZnk6IGxvY2tlZF9ub3RpZnl9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBoaWRlX3N1YnNjcmliZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbW9uaXRvcl9xdWFyYW50aW5lZCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9fSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYWxsYmFjaylcbn1cbiIsImltcG9ydCB7UkVNT1ZFRCwgREVMRVRFRCwgQVBQUk9WRUQsIExPQ0tFRCwgVU5MT0NLRUQsIEVESVRFRCxcbiAgICAgICAgZ2V0U3Vic2NyaWJlZFVzZXJzX3dpdGhVbnNlZW5JRHMgfSBmcm9tICcuL3N0b3JhZ2UuanMnXG5pbXBvcnQgYnJvd3NlciBmcm9tICd3ZWJleHRlbnNpb24tcG9seWZpbGwnXG5cbmV4cG9ydCBjb25zdCBBTEFSTV9OQU1FID0gJ25vdGlmeW1lJ1xuY29uc3QgbWF4UmVkZGl0Q29udGVudExlbmd0aCA9IDMwMFxuY29uc3QgQUNUSU9OX0FQSSA9IF9fQlVJTFRfRk9SX18gPT09ICdjaHJvbWUnID8gJ2FjdGlvbicgOiAnYnJvd3NlckFjdGlvbidcblxuLy8gaHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvMjU5MzM1NTYvY2hyb21lLWV4dGVuc2lvbi1vcGVuLW5ldy10YWItd2hlbi1icm93c2VyLW9wZW5lZC1pbi1iYWNrZ3JvdW5kLW1hYy8yNTkzMzk2NCMyNTkzMzk2NFxuZXhwb3J0IGNvbnN0IGNyZWF0ZVRhYiA9ICh1cmwpID0+IHtcbiAgICBjaHJvbWUudGFicy5jcmVhdGUoe3VybDp1cmx9LCAodGFiKSA9PiB7XG4gICAgICAgIGlmKCEgdGFiKSB7XG4gICAgICAgICAgICAvLyBwcm9iYWJseSBubyB3aW5kb3cgYXZhaWxhYmxlXG4gICAgICAgICAgICBjaHJvbWUud2luZG93cy5jcmVhdGUoe3VybDp1cmx9LCAod2luKSA9PiB7XG4gICAgICAgICAgICAgICAgLy8gYmV0dGVyIHRvIGZvY3VzIGFmdGVyIHdpbmRvdyBjcmVhdGlvbiBjYWxsYmFja1xuICAgICAgICAgICAgICAgIGNocm9tZS53aW5kb3dzLnVwZGF0ZSh3aW4uaWQsIHtmb2N1c2VkOiB0cnVlfSlcbiAgICAgICAgICAgIH0pXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyBiZXR0ZXIgdG8gZm9jdXMgYWZ0ZXIgdGFiIGNyZWF0aW9uIGNhbGxiYWNrXG4gICAgICAgICAgICBjaHJvbWUud2luZG93cy51cGRhdGUodGFiLndpbmRvd0lkLCB7Zm9jdXNlZDogdHJ1ZX0pXG4gICAgICAgIH1cbiAgICB9KVxufVxuXG5leHBvcnQgY29uc3QgZ2V0RnVsbElEc0Zyb21VUkwgPSAodXJsKSA9PiB7XG4gICAgY29uc3QgcGF0aCA9IHVybC5yZXBsYWNlKC9odHRwczpcXC9cXC9bXi9dKnJlKHZlKT9kZGl0LmNvbS8sICcnKVxuICAgIHJldHVybiBnZXRGdWxsSURzRnJvbVBhdGgocGF0aClcbn1cblxuY29uc3QgcmVnZXhfcGMgPSAvXlxcLyh2fHJ8dXNlcilcXC8oW14vXSspXFwvY29tbWVudHNcXC8oW14vXSspXFwvW14vXSooPzpcXC8oW14vPyYjXSspKT8vXG5jb25zdCByZWdleF91c2VyID0gL15cXC8oPzp1c2VyfHl8dSlcXC8oW14vPyYjXSspXFwvPy9cblxuZXhwb3J0IGNvbnN0IGdldEZ1bGxJRHNGcm9tUGF0aCA9IChwYXRoKSA9PiB7XG4gICAgbGV0IHBvc3RJRCA9IHVuZGVmaW5lZCwgY29tbWVudElEID0gdW5kZWZpbmVkLCB1c2VyID0gdW5kZWZpbmVkLCBzdWJyZWRkaXQgPSB1bmRlZmluZWRcbiAgICBjb25zdCBtYXRjaGVzX3BjID0gcGF0aC5tYXRjaChyZWdleF9wYylcbiAgICBjb25zdCBtYXRjaGVzX3VzZXIgPSBwYXRoLm1hdGNoKHJlZ2V4X3VzZXIpXG4gICAgaWYgKG1hdGNoZXNfcGMpIHtcbiAgICAgICAgY29uc3QgdHlwZSA9IG1hdGNoZXNfcGNbMV1cbiAgICAgICAgaWYgKHR5cGUgPT09ICd1c2VyJykge1xuICAgICAgICAgICAgdXNlciA9IG1hdGNoZXNfcGNbMl1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHN1YnJlZGRpdCA9IG1hdGNoZXNfcGNbMl1cbiAgICAgICAgfVxuICAgICAgICBpZiAobWF0Y2hlc19wY1szXSkgcG9zdElEID0gJ3QzXycrbWF0Y2hlc19wY1szXVxuICAgICAgICBpZiAobWF0Y2hlc19wY1s0XSkgY29tbWVudElEID0gJ3QxXycrbWF0Y2hlc19wY1s0XVxuICAgIH0gZWxzZSBpZiAobWF0Y2hlc191c2VyKSB7XG4gICAgICAgIHVzZXIgPSBtYXRjaGVzX3VzZXJbMV1cbiAgICB9XG4gICAgcmV0dXJuIFtwb3N0SUQsIGNvbW1lbnRJRCwgdXNlciwgc3VicmVkZGl0XVxufVxuXG5leHBvcnQgY29uc3QgcmVmb3JtYXRSZWRkaXRUZXh0ID0gKGJvZHkpID0+IHtcbiAgICByZXR1cm4gYm9keS5yZXBsYWNlKC8mYW1wOy9nLCAnJicpLnJlcGxhY2UoLyZndDsvZywgJz4nKS5yZXBsYWNlKC8mbHQ7L2csICc8JylcbiAgICAgICAgLnJlcGxhY2UoL1xccysvZywgJyAnKS5zdWJzdHIoMCwgbWF4UmVkZGl0Q29udGVudExlbmd0aClcbn1cblxuZXhwb3J0IGNvbnN0IGlzUmVtb3ZlZEl0ZW0gPSAoaXRlbSkgPT4ge1xuICAgIGlmIChpc0NvbW1lbnQoaXRlbS5uYW1lKSkge1xuICAgICAgICByZXR1cm4gaXNSZW1vdmVkQ29tbWVudChpdGVtKVxuICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBpc1JlbW92ZWRQb3N0KGl0ZW0pXG4gICAgfVxufVxuXG5leHBvcnQgY29uc3QgaXNDb21tZW50ID0gKG5hbWUpID0+IHtcbiAgICByZXR1cm4gbmFtZS5zdWJzdHIoMCwyKSA9PT0gJ3QxJ1xufVxuZXhwb3J0IGNvbnN0IGlzUmVtb3ZlZENvbW1lbnQgPSAoaXRlbSkgPT4ge1xuICAgIHJldHVybiAoKGl0ZW0uYm9keS5yZXBsYWNlKC9cXFxcL2csICcnKSA9PT0gJ1tyZW1vdmVkXScgfHxcbiAgICAgICAgICAgICBpdGVtLmJvZHkucmVwbGFjZSgvXFxcXC9nLCAnJykgPT09ICdbZGVsZXRlZF0nKSAmJlxuICAgICAgICAgICAgaXRlbS5hdXRob3IucmVwbGFjZSgvXFxcXC9nLCAnJykgPT09ICdbZGVsZXRlZF0nKVxufVxuZXhwb3J0IGNvbnN0IGlzVXNlckRlbGV0ZWRDb21tZW50ID0gKGl0ZW0pID0+IHtcbiAgICByZXR1cm4gKGl0ZW0uYm9keS5yZXBsYWNlKC9cXFxcL2csICcnKSA9PT0gJ1tkZWxldGVkXScgJiZcbiAgICAgICAgICAgIGl0ZW0uYXV0aG9yLnJlcGxhY2UoL1xcXFwvZywgJycpID09PSAnW2RlbGV0ZWRdJylcbn1cbmV4cG9ydCBjb25zdCBpc1VzZXJEZWxldGVkUG9zdCA9IChpdGVtKSA9PiB7XG4gICAgcmV0dXJuICghIGl0ZW0uaXNfcm9ib3RfaW5kZXhhYmxlKSAmJiBpdGVtLmF1dGhvci5yZXBsYWNlKC9cXFxcL2csICcnKSA9PT0gJ1tkZWxldGVkXSdcbn1cbmV4cG9ydCBjb25zdCBpc1VzZXJEZWxldGVkSXRlbSA9IChpdGVtKSA9PiB7XG4gICAgaWYgKGlzQ29tbWVudChpdGVtLm5hbWUpKSB7XG4gICAgICAgIHJldHVybiBpc1VzZXJEZWxldGVkQ29tbWVudChpdGVtKVxuICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBpc1VzZXJEZWxldGVkUG9zdChpdGVtKVxuICAgIH1cbn1cbmV4cG9ydCBjb25zdCBpc1JlbW92ZWRQb3N0ID0gKGl0ZW0pID0+IHtcbiAgICByZXR1cm4gISBpdGVtLmlzX3JvYm90X2luZGV4YWJsZVxufVxuXG5leHBvcnQgY29uc3QgdHJpbURpY3RfYnlfbnVtYmVyVmFsdWVkQXR0cmlidXRlID0gKGRpY3QsIG1heE51bUl0ZW1zLCBudW1iZXJWYWx1ZWRBdHRyaWJ1dGUpID0+IHtcbiAgICBjb25zdCBhcnJheSA9IHNvcnREaWN0X2J5X251bWJlclZhbHVlZEF0dHJpYnV0ZShkaWN0LCBudW1iZXJWYWx1ZWRBdHRyaWJ1dGUpXG5cbiAgICBjb25zdCBzaG9ydGVuZWRBcnJheSA9IGFycmF5LnNsaWNlKDAsIG1heE51bUl0ZW1zKVxuICAgIGNvbnN0IG5ld0RpY3QgPSB7fVxuICAgIHNob3J0ZW5lZEFycmF5LmZvckVhY2goaXRlbSA9PiB7XG4gICAgICAgIG5ld0RpY3RbaXRlbVswXV0gPSBpdGVtWzFdXG4gICAgfSlcbiAgICByZXR1cm4gbmV3RGljdFxufVxuXG5leHBvcnQgY29uc3Qgc29ydERpY3RfYnlfbnVtYmVyVmFsdWVkQXR0cmlidXRlID0gKGRpY3QsIG51bWJlclZhbHVlZEF0dHJpYnV0ZSkgPT4ge1xuICAgIGxldCBhcnJheSA9IE9iamVjdC5rZXlzKGRpY3QpLm1hcChrZXkgPT4ge1xuICAgICAgICByZXR1cm4gW2tleSwgZGljdFtrZXldXVxuICAgIH0pXG4gICAgYXJyYXkuc29ydCgoYSwgYikgPT4ge1xuICAgICAgICByZXR1cm4gYlsxXVtudW1iZXJWYWx1ZWRBdHRyaWJ1dGVdIC0gYVsxXVtudW1iZXJWYWx1ZWRBdHRyaWJ1dGVdXG4gICAgfSlcbiAgICByZXR1cm4gYXJyYXlcbn1cblxuZXhwb3J0IGNsYXNzIEl0ZW1Gb3JTdG9yYWdlIHtcbiAgICBjb25zdHJ1Y3RvcihjcmVhdGVkX3V0YywgdW5zZWVuKSB7XG4gICAgICAgIHRoaXMuYyA9IGNyZWF0ZWRfdXRjXG4gICAgICAgIHRoaXMudSA9IHVuc2VlblxuICAgIH1cbiAgICBnZXRDcmVhdGVkVVRDKCkgeyByZXR1cm4gdGhpcy5jIH1cbiAgICBnZXRVbnNlZW4oKSB7IHJldHVybiB0aGlzLnUgfVxufVxuXG5leHBvcnQgY2xhc3MgQ2hhbmdlRm9yU3RvcmFnZSB7XG4gICAgY29uc3RydWN0b3IoeyBpZCA9IG51bGwsIG9ic2VydmVkX3V0YyA9IG51bGwsIGNoYW5nZV90eXBlID0gbnVsbCwgb2JqZWN0ID0gbnVsbCB9KSB7XG4gICAgICAgIGlmIChvYmplY3QpIHtcbiAgICAgICAgICAgIHRoaXMuaSA9IG9iamVjdC5pXG4gICAgICAgICAgICB0aGlzLm8gPSBvYmplY3Qub1xuICAgICAgICAgICAgdGhpcy5nID0gb2JqZWN0LmdcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuaSA9IGlkXG4gICAgICAgICAgICB0aGlzLm8gPSBvYnNlcnZlZF91dGNcbiAgICAgICAgICAgIHRoaXMuZyA9IGNoYW5nZV90eXBlXG4gICAgICAgIH1cbiAgICB9XG4gICAgZ2V0SUQoKSB7IHJldHVybiB0aGlzLmkgfVxuICAgIGdldE9ic2VydmVkVVRDKCkgeyByZXR1cm4gdGhpcy5vIH1cbiAgICBnZXRDaGFuZ2VUeXBlKCkge1xuICAgICAgICBzd2l0Y2godGhpcy5nKSB7XG4gICAgICAgICAgICBjYXNlIFJFTU9WRUQ6IHJldHVybiAnbW9kIHJlbW92ZWQnXG4gICAgICAgICAgICBjYXNlIERFTEVURUQ6IHJldHVybiAndXNlciBkZWxldGVkJ1xuICAgICAgICAgICAgY2FzZSBBUFBST1ZFRDogcmV0dXJuICdhcHByb3ZlZCdcbiAgICAgICAgICAgIGNhc2UgTE9DS0VEOiByZXR1cm4gJ2xvY2tlZCdcbiAgICAgICAgICAgIGNhc2UgVU5MT0NLRUQ6IHJldHVybiAndW5sb2NrZWQnXG4gICAgICAgICAgICBjYXNlIEVESVRFRDogcmV0dXJuICdlZGl0ZWQnXG4gICAgICAgIH1cbiAgICB9XG59XG5cbmV4cG9ydCBjbGFzcyBMb2NhbFN0b3JhZ2VJdGVtIHtcbiAgICBjb25zdHJ1Y3Rvcih7IGl0ZW0gPSBudWxsLCBvYnNlcnZlZF91dGMgPSBudWxsLCBvYmplY3QgPSBudWxsIH0pIHtcbiAgICAgICAgaWYgKG9iamVjdCkge1xuICAgICAgICAgICAgdGhpcy50ID0gb2JqZWN0LnRcbiAgICAgICAgICAgIHRoaXMubyA9IG9iamVjdC5vXG4gICAgICAgICAgICB0aGlzLmMgPSBvYmplY3QuY1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgbGV0IHRleHQgPSAnJ1xuICAgICAgICAgICAgaWYgKGlzQ29tbWVudChpdGVtLm5hbWUpKSB7XG4gICAgICAgICAgICAgICAgdGV4dCA9IHJlZm9ybWF0UmVkZGl0VGV4dChpdGVtLmJvZHkpXG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHRleHQgPSBpdGVtLnRpdGxlXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLnQgPSB0ZXh0XG4gICAgICAgICAgICB0aGlzLm8gPSBvYnNlcnZlZF91dGNcbiAgICAgICAgICAgIHRoaXMuYyA9IGl0ZW0uY3JlYXRlZF91dGNcbiAgICAgICAgfVxuICAgIH1cbiAgICBzZXRUZXh0KHRleHQpIHt0aGlzLnQgPSByZWZvcm1hdFJlZGRpdFRleHQodGV4dCl9XG4gICAgZ2V0VGV4dCgpIHsgcmV0dXJuIHRoaXMudCB9XG4gICAgZ2V0T2JzZXJ2ZWRVVEMoKSB7IHJldHVybiB0aGlzLm8gfVxuICAgIGdldENyZWF0ZWRVVEMoKSB7IHJldHVybiB0aGlzLmMgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gc2V0QWxhcm0ocGVyaW9kSW5NaW51dGVzKSB7XG4gICAgY2hyb21lLmFsYXJtcy5jbGVhcihBTEFSTV9OQU1FKVxuICAgIGNocm9tZS5hbGFybXMuY3JlYXRlKEFMQVJNX05BTUUsIHtkZWxheUluTWludXRlczogMSwgcGVyaW9kSW5NaW51dGVzOiBwZXJpb2RJbk1pbnV0ZXN9KVxufVxuXG5leHBvcnQgZnVuY3Rpb24gYWxwaGFMb3dlclNvcnQgKGEsIGIpIHtcbiAgICB2YXIgdGV4dEEgPSBhLnRvTG93ZXJDYXNlKClcbiAgICB2YXIgdGV4dEIgPSBiLnRvTG93ZXJDYXNlKClcblxuICAgIGlmICh0ZXh0QSA8IHRleHRCKSByZXR1cm4gLTFcbiAgICBpZiAodGV4dEEgPiB0ZXh0QikgcmV0dXJuIDFcbiAgICByZXR1cm4gMFxufVxuXG5leHBvcnQgZnVuY3Rpb24gZ29Ub09wdGlvbnMgKCkge1xuICAgIGlmIChjaHJvbWUucnVudGltZS5vcGVuT3B0aW9uc1BhZ2UpIHtcbiAgICAgICAgY2hyb21lLnJ1bnRpbWUub3Blbk9wdGlvbnNQYWdlKClcbiAgICAgICAgd2luZG93LmNsb3NlKCkgLy9jbG9zZXMgdGhlIHBvcHVwIHdoaWNoIHBlcnNpc3RzIGluIEZGXG4gICAgfSBlbHNlIHtcbiAgICAgICAgd2luZG93Lm9wZW4oY2hyb21lLnJ1bnRpbWUuZ2V0VVJMKCcvc3JjL29wdGlvbnMuaHRtbCcpKVxuICAgIH1cbn1cblxuXG5leHBvcnQgZnVuY3Rpb24gc2hvd0Vycm9yKG1lc3NhZ2UsIHNlbGVjdG9yKSB7XG4gICAgJCgnPGRpdiBjbGFzcz1cInJyLWVycm9yXCI+JyttZXNzYWdlKyc8L2Rpdj4nKS5hcHBlbmRUbyhzZWxlY3RvcikuZGVsYXkoMjQwMCkuZmFkZVRvKDQwMCwgMCwgZnVuY3Rpb24oKSB7JCh0aGlzKS5yZW1vdmUoKX0pXG59XG5cbi8vbm9pbnNwZWN0aW9uIEpTVW51c2VkTG9jYWxTeW1ib2xzXG5leHBvcnQgZnVuY3Rpb24gcHByaW50KG9iaikge1xuICAgIGNvbnNvbGUubG9nKEpTT04uc3RyaW5naWZ5KG9iaiwgbnVsbCwgJ1xcdCcpKVxufVxuXG5cbmV4cG9ydCBjb25zdCBnZXRQcmV0dHlUaW1lTGVuZ3RoID0gKHNlY29uZHMpID0+IHtcbiAgICBjb25zdCB0aHJlc2hvbGRzID0gW1s2MCwgJ3NlY29uZCcsICdzZWNvbmRzJ10sIFs2MCwgJ21pbnV0ZScsICdtaW51dGVzJ10sIFsyNCwgJ2hvdXInLCAnaG91cnMnXSwgWzcsICdkYXknLCAnZGF5cyddLFxuICAgIFszNjUvMTIvNywgJ3dlZWsnLCAnd2Vla3MnXSwgWzEyLCAnbW9udGgnLCAnbW9udGhzJ10sIFsxMCwgJ3llYXInLCAneWVhcnMnXSxcbiAgICBbMTAsICdkZWNhZGUnLCAnZGVjYWRlcyddLCBbMTAsICdjZW50dXJ5JywgJ2NlbnR1cmllcyddLCBbMTAsICdtaWxsZW5pdW0nLCAnbWlsbGVuaWEnXV1cbiAgICBpZiAoc2Vjb25kcyA8IDYwKSByZXR1cm4gc2Vjb25kcyArICcgc2Vjb25kcydcbiAgICBsZXQgdGltZSA9IHNlY29uZHNcbiAgICBmb3IgKHZhciBpPTA7IGk8dGhyZXNob2xkcy5sZW5ndGg7IGkrKykge1xuICAgICAgICBsZXQgZGl2aXNvciA9IHRocmVzaG9sZHNbaV1bMF1cbiAgICAgICAgbGV0IHRleHQgPSB0aHJlc2hvbGRzW2ldWzFdXG4gICAgICAgIGxldCB0ZXh0UGx1cmFsID0gdGhyZXNob2xkc1tpXVsyXVxuICAgICAgICBpZiAodGltZSA8IGRpdmlzb3IpIHtcbiAgICAgICAgICAgIGxldCBleHRyYSA9ICh0aW1lIC0gTWF0aC5mbG9vcih0aW1lKSlcbiAgICAgICAgICAgIGxldCBwcmV2VW5pdFRpbWUgPSBNYXRoLnJvdW5kKGV4dHJhKnRocmVzaG9sZHNbaS0xXVswXSlcbiAgICAgICAgICAgIGlmICh0aHJlc2hvbGRzW2ktMV1bMF0gPT09IHByZXZVbml0VGltZSkge1xuICAgICAgICAgICAgICAgIHRpbWUgKz0gMVxuICAgICAgICAgICAgICAgIHByZXZVbml0VGltZSA9IDBcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChNYXRoLmZsb29yKHRpbWUpID4gMSB8fCBNYXRoLmZsb29yKHRpbWUpID09IDApIHtcbiAgICAgICAgICAgICAgICB0ZXh0ID0gdGV4dFBsdXJhbFxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGkgPiAxICYmIHByZXZVbml0VGltZSA+IDApIHtcbiAgICAgICAgICAgICAgICBsZXQgcmVtYWluVGV4dCA9IHRocmVzaG9sZHNbaS0xXVsxXVxuICAgICAgICAgICAgICAgIGlmIChwcmV2VW5pdFRpbWUgPiAxKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlbWFpblRleHQgPSB0aHJlc2hvbGRzW2ktMV1bMl1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdGV4dCArPSAnLCAnICsgU3RyaW5nKHByZXZVbml0VGltZSkgKyAnICcgKyByZW1haW5UZXh0XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gU3RyaW5nKE1hdGguZmxvb3IodGltZSkpICsgJyAnICsgdGV4dFxuICAgICAgICB9XG4gICAgICAgIHRpbWUgPSB0aW1lIC8gZGl2aXNvclxuICAgIH1cbn1cblxuZXhwb3J0IGNvbnN0IGdldFByZXR0eURhdGUgPSAoY3JlYXRlZFVUQykgPT4ge1xuICAgIGNvbnN0IHNlY29uZHMgPSBNYXRoLmZsb29yKChuZXcgRGF0ZSkuZ2V0VGltZSgpLzEwMDApLWNyZWF0ZWRVVENcbiAgICByZXR1cm4gZ2V0UHJldHR5VGltZUxlbmd0aChzZWNvbmRzKSArICcgYWdvJ1xufVxuXG5leHBvcnQgY29uc3QgY3JlYXRlTm90aWZpY2F0aW9uID0gKHtub3RpZmljYXRpb25JZCwgdGl0bGUsIG1lc3NhZ2V9KSA9PiB7XG4gICAgaWYgKGxvY2F0aW9uLnByb3RvY29sLm1hdGNoKC9eaHR0cC8pKSB7XG4gICAgICAgIGNocm9tZS5ydW50aW1lLnNlbmRNZXNzYWdlKHtcbiAgICAgICAgICAgIGFjdGlvbjogJ2NyZWF0ZS1ub3RpZmljYXRpb24nLFxuICAgICAgICAgICAgb3B0aW9uczoge25vdGlmaWNhdGlvbklkLCB0aXRsZSwgbWVzc2FnZX1cbiAgICAgICAgfSlcbiAgICB9IGVsc2Uge1xuICAgICAgICBpZiAoX19CVUlMVF9GT1JfXyA9PT0gJ2Nocm9tZScpIHtcbiAgICAgICAgICAgIHJlZ2lzdHJhdGlvbi5zaG93Tm90aWZpY2F0aW9uKHRpdGxlLCB7XG4gICAgICAgICAgICAgICAgYm9keTogbWVzc2FnZSxcbiAgICAgICAgICAgICAgICBkYXRhOiBub3RpZmljYXRpb25JZCxcbiAgICAgICAgICAgICAgICBpY29uOiAnL2ljb25zLzEyOC5wbmcnLFxuICAgICAgICAgICAgICAgIG1lc3NhZ2VcbiAgICAgICAgICAgIH0pXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyBub3RpZmljYXRpb25zLmNyZWF0ZSBkb2VzIG5vdCB3b3JrIGluIGNocm9tZSdzIG1hbmlmZXN0IHYzLCBzb21ldGhpbmcgd3Jvbmcgd2l0aCByZWFkaW5nIGltYWdlIGRhdGFcbiAgICAgICAgICAgIC8vIGh0dHBzOi8vc3RhY2tvdmVyZmxvdy5jb20vcXVlc3Rpb25zLzY1NTcwMzMyL2dvb2dsZS1jaHJvbWUtZXh0ZW5zaW9ucy12My1lcnJvci1pbi1ldmVudC1oYW5kbGVyLXJlZmVyZW5jZWVycm9yLWltYWdlLWlzLW5cbiAgICAgICAgICAgIC8vIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC9jaHJvbWl1bS9pc3N1ZXMvZGV0YWlsP2lkPTExNjg0NzcmcT1pbWFnZSUyMGlzJTIwbm90JTIwZGVmaW5lZCUyMG5vdGlmaWNhdGlvbiUyMG1hbmlmZXN0JTIwdjMmY2FuPTJcbiAgICAgICAgICAgIGNocm9tZS5ub3RpZmljYXRpb25zLmNyZWF0ZShub3RpZmljYXRpb25JZCxcbiAgICAgICAgICAgICAgICB7dHlwZTogJ2Jhc2ljJyxcbiAgICAgICAgICAgICAgICAgaWNvblVybDogJy9pY29ucy8xMjgucG5nJyxcbiAgICAgICAgICAgICAgICAgdGl0bGUsIG1lc3NhZ2V9KVxuICAgICAgICB9XG4gICAgfVxufVxuXG5leHBvcnQgY29uc3QgdXBkYXRlQmFkZ2VVbnNlZW5Db3VudCA9ICgpID0+IHtcbiAgICBpZiAobG9jYXRpb24ucHJvdG9jb2wubWF0Y2goL15odHRwLykpIHtcbiAgICAgICAgY2hyb21lLnJ1bnRpbWUuc2VuZE1lc3NhZ2Uoe1xuICAgICAgICAgICAgYWN0aW9uOiAndXBkYXRlLWJhZGdlJ1xuICAgICAgICB9KVxuICAgIH0gZWxzZSB7XG4gICAgICAgIGdldFN1YnNjcmliZWRVc2Vyc193aXRoVW5zZWVuSURzKHVzZXJzVW5zZWVuSURzID0+IHtcbiAgICAgICAgICAgIGxldCB0b3RhbCA9IDBcbiAgICAgICAgICAgIE9iamVjdC52YWx1ZXModXNlcnNVbnNlZW5JRHMpLmZvckVhY2goaWRzID0+IHtcbiAgICAgICAgICAgICAgICB0b3RhbCArPSBpZHMubGVuZ3RoXG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgbGV0IHRleHQgPSB0b3RhbC50b1N0cmluZygpXG4gICAgICAgICAgICBpZiAodG90YWwgPT0gMCkgdGV4dCA9ICcnXG4gICAgICAgICAgICBjaHJvbWVbQUNUSU9OX0FQSV0uc2V0QmFkZ2VCYWNrZ3JvdW5kQ29sb3Ioe2NvbG9yOiBcInJlZFwifSlcbiAgICAgICAgICAgIGNocm9tZVtBQ1RJT05fQVBJXS5zZXRCYWRnZVRleHQoe3RleHQ6IHRleHR9KVxuICAgICAgICB9KVxuICAgIH1cbn1cbiIsIihmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gIGlmICh0eXBlb2YgZGVmaW5lID09PSBcImZ1bmN0aW9uXCIgJiYgZGVmaW5lLmFtZCkge1xuICAgIGRlZmluZShcIndlYmV4dGVuc2lvbi1wb2x5ZmlsbFwiLCBbXCJtb2R1bGVcIl0sIGZhY3RvcnkpO1xuICB9IGVsc2UgaWYgKHR5cGVvZiBleHBvcnRzICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgZmFjdG9yeShtb2R1bGUpO1xuICB9IGVsc2Uge1xuICAgIHZhciBtb2QgPSB7XG4gICAgICBleHBvcnRzOiB7fVxuICAgIH07XG4gICAgZmFjdG9yeShtb2QpO1xuICAgIGdsb2JhbC5icm93c2VyID0gbW9kLmV4cG9ydHM7XG4gIH1cbn0pKHRoaXMsIGZ1bmN0aW9uIChtb2R1bGUpIHtcbiAgLyogd2ViZXh0ZW5zaW9uLXBvbHlmaWxsIC0gdjAuNS4wIC0gVGh1IFNlcCAyNiAyMDE5IDIyOjIyOjI2ICovXG4gIC8qIC0qLSBNb2RlOiBpbmRlbnQtdGFicy1tb2RlOiBuaWw7IGpzLWluZGVudC1sZXZlbDogMiAtKi0gKi9cbiAgLyogdmltOiBzZXQgc3RzPTIgc3c9MiBldCB0dz04MDogKi9cbiAgLyogVGhpcyBTb3VyY2UgQ29kZSBGb3JtIGlzIHN1YmplY3QgdG8gdGhlIHRlcm1zIG9mIHRoZSBNb3ppbGxhIFB1YmxpY1xuICAgKiBMaWNlbnNlLCB2LiAyLjAuIElmIGEgY29weSBvZiB0aGUgTVBMIHdhcyBub3QgZGlzdHJpYnV0ZWQgd2l0aCB0aGlzXG4gICAqIGZpbGUsIFlvdSBjYW4gb2J0YWluIG9uZSBhdCBodHRwOi8vbW96aWxsYS5vcmcvTVBMLzIuMC8uICovXG4gIFwidXNlIHN0cmljdFwiO1xuXG4gIGlmICh0eXBlb2YgYnJvd3NlciA9PT0gXCJ1bmRlZmluZWRcIiB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YoYnJvd3NlcikgIT09IE9iamVjdC5wcm90b3R5cGUpIHtcbiAgICBjb25zdCBDSFJPTUVfU0VORF9NRVNTQUdFX0NBTExCQUNLX05PX1JFU1BPTlNFX01FU1NBR0UgPSBcIlRoZSBtZXNzYWdlIHBvcnQgY2xvc2VkIGJlZm9yZSBhIHJlc3BvbnNlIHdhcyByZWNlaXZlZC5cIjtcbiAgICBjb25zdCBTRU5EX1JFU1BPTlNFX0RFUFJFQ0FUSU9OX1dBUk5JTkcgPSBcIlJldHVybmluZyBhIFByb21pc2UgaXMgdGhlIHByZWZlcnJlZCB3YXkgdG8gc2VuZCBhIHJlcGx5IGZyb20gYW4gb25NZXNzYWdlL29uTWVzc2FnZUV4dGVybmFsIGxpc3RlbmVyLCBhcyB0aGUgc2VuZFJlc3BvbnNlIHdpbGwgYmUgcmVtb3ZlZCBmcm9tIHRoZSBzcGVjcyAoU2VlIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2RvY3MvTW96aWxsYS9BZGQtb25zL1dlYkV4dGVuc2lvbnMvQVBJL3J1bnRpbWUvb25NZXNzYWdlKVwiO1xuXG4gICAgLy8gV3JhcHBpbmcgdGhlIGJ1bGsgb2YgdGhpcyBwb2x5ZmlsbCBpbiBhIG9uZS10aW1lLXVzZSBmdW5jdGlvbiBpcyBhIG1pbm9yXG4gICAgLy8gb3B0aW1pemF0aW9uIGZvciBGaXJlZm94LiBTaW5jZSBTcGlkZXJtb25rZXkgZG9lcyBub3QgZnVsbHkgcGFyc2UgdGhlXG4gICAgLy8gY29udGVudHMgb2YgYSBmdW5jdGlvbiB1bnRpbCB0aGUgZmlyc3QgdGltZSBpdCdzIGNhbGxlZCwgYW5kIHNpbmNlIGl0IHdpbGxcbiAgICAvLyBuZXZlciBhY3R1YWxseSBuZWVkIHRvIGJlIGNhbGxlZCwgdGhpcyBhbGxvd3MgdGhlIHBvbHlmaWxsIHRvIGJlIGluY2x1ZGVkXG4gICAgLy8gaW4gRmlyZWZveCBuZWFybHkgZm9yIGZyZWUuXG4gICAgY29uc3Qgd3JhcEFQSXMgPSBleHRlbnNpb25BUElzID0+IHtcbiAgICAgIC8vIE5PVEU6IGFwaU1ldGFkYXRhIGlzIGFzc29jaWF0ZWQgdG8gdGhlIGNvbnRlbnQgb2YgdGhlIGFwaS1tZXRhZGF0YS5qc29uIGZpbGVcbiAgICAgIC8vIGF0IGJ1aWxkIHRpbWUgYnkgcmVwbGFjaW5nIHRoZSBmb2xsb3dpbmcgXCJpbmNsdWRlXCIgd2l0aCB0aGUgY29udGVudCBvZiB0aGVcbiAgICAgIC8vIEpTT04gZmlsZS5cbiAgICAgIGNvbnN0IGFwaU1ldGFkYXRhID0ge1xuICAgICAgICBcImFsYXJtc1wiOiB7XG4gICAgICAgICAgXCJjbGVhclwiOiB7XG4gICAgICAgICAgICBcIm1pbkFyZ3NcIjogMCxcbiAgICAgICAgICAgIFwibWF4QXJnc1wiOiAxXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcImNsZWFyQWxsXCI6IHtcbiAgICAgICAgICAgIFwibWluQXJnc1wiOiAwLFxuICAgICAgICAgICAgXCJtYXhBcmdzXCI6IDBcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwiZ2V0XCI6IHtcbiAgICAgICAgICAgIFwibWluQXJnc1wiOiAwLFxuICAgICAgICAgICAgXCJtYXhBcmdzXCI6IDFcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwiZ2V0QWxsXCI6IHtcbiAgICAgICAgICAgIFwibWluQXJnc1wiOiAwLFxuICAgICAgICAgICAgXCJtYXhBcmdzXCI6IDBcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIFwiYm9va21hcmtzXCI6IHtcbiAgICAgICAgICBcImNyZWF0ZVwiOiB7XG4gICAgICAgICAgICBcIm1pbkFyZ3NcIjogMSxcbiAgICAgICAgICAgIFwibWF4QXJnc1wiOiAxXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcImdldFwiOiB7XG4gICAgICAgICAgICBcIm1pbkFyZ3NcIjogMSxcbiAgICAgICAgICAgIFwibWF4QXJnc1wiOiAxXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcImdldENoaWxkcmVuXCI6IHtcbiAgICAgICAgICAgIFwibWluQXJnc1wiOiAxLFxuICAgICAgICAgICAgXCJtYXhBcmdzXCI6IDFcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwiZ2V0UmVjZW50XCI6IHtcbiAgICAgICAgICAgIFwibWluQXJnc1wiOiAxLFxuICAgICAgICAgICAgXCJtYXhBcmdzXCI6IDFcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwiZ2V0U3ViVHJlZVwiOiB7XG4gICAgICAgICAgICBcIm1pbkFyZ3NcIjogMSxcbiAgICAgICAgICAgIFwibWF4QXJnc1wiOiAxXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcImdldFRyZWVcIjoge1xuICAgICAgICAgICAgXCJtaW5BcmdzXCI6IDAsXG4gICAgICAgICAgICBcIm1heEFyZ3NcIjogMFxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJtb3ZlXCI6IHtcbiAgICAgICAgICAgIFwibWluQXJnc1wiOiAyLFxuICAgICAgICAgICAgXCJtYXhBcmdzXCI6IDJcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwicmVtb3ZlXCI6IHtcbiAgICAgICAgICAgIFwibWluQXJnc1wiOiAxLFxuICAgICAgICAgICAgXCJtYXhBcmdzXCI6IDFcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwicmVtb3ZlVHJlZVwiOiB7XG4gICAgICAgICAgICBcIm1pbkFyZ3NcIjogMSxcbiAgICAgICAgICAgIFwibWF4QXJnc1wiOiAxXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcInNlYXJjaFwiOiB7XG4gICAgICAgICAgICBcIm1pbkFyZ3NcIjogMSxcbiAgICAgICAgICAgIFwibWF4QXJnc1wiOiAxXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcInVwZGF0ZVwiOiB7XG4gICAgICAgICAgICBcIm1pbkFyZ3NcIjogMixcbiAgICAgICAgICAgIFwibWF4QXJnc1wiOiAyXG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBcImJyb3dzZXJBY3Rpb25cIjoge1xuICAgICAgICAgIFwiZGlzYWJsZVwiOiB7XG4gICAgICAgICAgICBcIm1pbkFyZ3NcIjogMCxcbiAgICAgICAgICAgIFwibWF4QXJnc1wiOiAxLFxuICAgICAgICAgICAgXCJmYWxsYmFja1RvTm9DYWxsYmFja1wiOiB0cnVlXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcImVuYWJsZVwiOiB7XG4gICAgICAgICAgICBcIm1pbkFyZ3NcIjogMCxcbiAgICAgICAgICAgIFwibWF4QXJnc1wiOiAxLFxuICAgICAgICAgICAgXCJmYWxsYmFja1RvTm9DYWxsYmFja1wiOiB0cnVlXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcImdldEJhZGdlQmFja2dyb3VuZENvbG9yXCI6IHtcbiAgICAgICAgICAgIFwibWluQXJnc1wiOiAxLFxuICAgICAgICAgICAgXCJtYXhBcmdzXCI6IDFcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwiZ2V0QmFkZ2VUZXh0XCI6IHtcbiAgICAgICAgICAgIFwibWluQXJnc1wiOiAxLFxuICAgICAgICAgICAgXCJtYXhBcmdzXCI6IDFcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwiZ2V0UG9wdXBcIjoge1xuICAgICAgICAgICAgXCJtaW5BcmdzXCI6IDEsXG4gICAgICAgICAgICBcIm1heEFyZ3NcIjogMVxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJnZXRUaXRsZVwiOiB7XG4gICAgICAgICAgICBcIm1pbkFyZ3NcIjogMSxcbiAgICAgICAgICAgIFwibWF4QXJnc1wiOiAxXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcIm9wZW5Qb3B1cFwiOiB7XG4gICAgICAgICAgICBcIm1pbkFyZ3NcIjogMCxcbiAgICAgICAgICAgIFwibWF4QXJnc1wiOiAwXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcInNldEJhZGdlQmFja2dyb3VuZENvbG9yXCI6IHtcbiAgICAgICAgICAgIFwibWluQXJnc1wiOiAxLFxuICAgICAgICAgICAgXCJtYXhBcmdzXCI6IDEsXG4gICAgICAgICAgICBcImZhbGxiYWNrVG9Ob0NhbGxiYWNrXCI6IHRydWVcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwic2V0QmFkZ2VUZXh0XCI6IHtcbiAgICAgICAgICAgIFwibWluQXJnc1wiOiAxLFxuICAgICAgICAgICAgXCJtYXhBcmdzXCI6IDEsXG4gICAgICAgICAgICBcImZhbGxiYWNrVG9Ob0NhbGxiYWNrXCI6IHRydWVcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwic2V0SWNvblwiOiB7XG4gICAgICAgICAgICBcIm1pbkFyZ3NcIjogMSxcbiAgICAgICAgICAgIFwibWF4QXJnc1wiOiAxXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcInNldFBvcHVwXCI6IHtcbiAgICAgICAgICAgIFwibWluQXJnc1wiOiAxLFxuICAgICAgICAgICAgXCJtYXhBcmdzXCI6IDEsXG4gICAgICAgICAgICBcImZhbGxiYWNrVG9Ob0NhbGxiYWNrXCI6IHRydWVcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwic2V0VGl0bGVcIjoge1xuICAgICAgICAgICAgXCJtaW5BcmdzXCI6IDEsXG4gICAgICAgICAgICBcIm1heEFyZ3NcIjogMSxcbiAgICAgICAgICAgIFwiZmFsbGJhY2tUb05vQ2FsbGJhY2tcIjogdHJ1ZVxuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgXCJicm93c2luZ0RhdGFcIjoge1xuICAgICAgICAgIFwicmVtb3ZlXCI6IHtcbiAgICAgICAgICAgIFwibWluQXJnc1wiOiAyLFxuICAgICAgICAgICAgXCJtYXhBcmdzXCI6IDJcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwicmVtb3ZlQ2FjaGVcIjoge1xuICAgICAgICAgICAgXCJtaW5BcmdzXCI6IDEsXG4gICAgICAgICAgICBcIm1heEFyZ3NcIjogMVxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJyZW1vdmVDb29raWVzXCI6IHtcbiAgICAgICAgICAgIFwibWluQXJnc1wiOiAxLFxuICAgICAgICAgICAgXCJtYXhBcmdzXCI6IDFcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwicmVtb3ZlRG93bmxvYWRzXCI6IHtcbiAgICAgICAgICAgIFwibWluQXJnc1wiOiAxLFxuICAgICAgICAgICAgXCJtYXhBcmdzXCI6IDFcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwicmVtb3ZlRm9ybURhdGFcIjoge1xuICAgICAgICAgICAgXCJtaW5BcmdzXCI6IDEsXG4gICAgICAgICAgICBcIm1heEFyZ3NcIjogMVxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJyZW1vdmVIaXN0b3J5XCI6IHtcbiAgICAgICAgICAgIFwibWluQXJnc1wiOiAxLFxuICAgICAgICAgICAgXCJtYXhBcmdzXCI6IDFcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwicmVtb3ZlTG9jYWxTdG9yYWdlXCI6IHtcbiAgICAgICAgICAgIFwibWluQXJnc1wiOiAxLFxuICAgICAgICAgICAgXCJtYXhBcmdzXCI6IDFcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwicmVtb3ZlUGFzc3dvcmRzXCI6IHtcbiAgICAgICAgICAgIFwibWluQXJnc1wiOiAxLFxuICAgICAgICAgICAgXCJtYXhBcmdzXCI6IDFcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwicmVtb3ZlUGx1Z2luRGF0YVwiOiB7XG4gICAgICAgICAgICBcIm1pbkFyZ3NcIjogMSxcbiAgICAgICAgICAgIFwibWF4QXJnc1wiOiAxXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcInNldHRpbmdzXCI6IHtcbiAgICAgICAgICAgIFwibWluQXJnc1wiOiAwLFxuICAgICAgICAgICAgXCJtYXhBcmdzXCI6IDBcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIFwiY29tbWFuZHNcIjoge1xuICAgICAgICAgIFwiZ2V0QWxsXCI6IHtcbiAgICAgICAgICAgIFwibWluQXJnc1wiOiAwLFxuICAgICAgICAgICAgXCJtYXhBcmdzXCI6IDBcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIFwiY29udGV4dE1lbnVzXCI6IHtcbiAgICAgICAgICBcInJlbW92ZVwiOiB7XG4gICAgICAgICAgICBcIm1pbkFyZ3NcIjogMSxcbiAgICAgICAgICAgIFwibWF4QXJnc1wiOiAxXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcInJlbW92ZUFsbFwiOiB7XG4gICAgICAgICAgICBcIm1pbkFyZ3NcIjogMCxcbiAgICAgICAgICAgIFwibWF4QXJnc1wiOiAwXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcInVwZGF0ZVwiOiB7XG4gICAgICAgICAgICBcIm1pbkFyZ3NcIjogMixcbiAgICAgICAgICAgIFwibWF4QXJnc1wiOiAyXG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBcImNvb2tpZXNcIjoge1xuICAgICAgICAgIFwiZ2V0XCI6IHtcbiAgICAgICAgICAgIFwibWluQXJnc1wiOiAxLFxuICAgICAgICAgICAgXCJtYXhBcmdzXCI6IDFcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwiZ2V0QWxsXCI6IHtcbiAgICAgICAgICAgIFwibWluQXJnc1wiOiAxLFxuICAgICAgICAgICAgXCJtYXhBcmdzXCI6IDFcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwiZ2V0QWxsQ29va2llU3RvcmVzXCI6IHtcbiAgICAgICAgICAgIFwibWluQXJnc1wiOiAwLFxuICAgICAgICAgICAgXCJtYXhBcmdzXCI6IDBcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwicmVtb3ZlXCI6IHtcbiAgICAgICAgICAgIFwibWluQXJnc1wiOiAxLFxuICAgICAgICAgICAgXCJtYXhBcmdzXCI6IDFcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwic2V0XCI6IHtcbiAgICAgICAgICAgIFwibWluQXJnc1wiOiAxLFxuICAgICAgICAgICAgXCJtYXhBcmdzXCI6IDFcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIFwiZGV2dG9vbHNcIjoge1xuICAgICAgICAgIFwiaW5zcGVjdGVkV2luZG93XCI6IHtcbiAgICAgICAgICAgIFwiZXZhbFwiOiB7XG4gICAgICAgICAgICAgIFwibWluQXJnc1wiOiAxLFxuICAgICAgICAgICAgICBcIm1heEFyZ3NcIjogMixcbiAgICAgICAgICAgICAgXCJzaW5nbGVDYWxsYmFja0FyZ1wiOiBmYWxzZVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJwYW5lbHNcIjoge1xuICAgICAgICAgICAgXCJjcmVhdGVcIjoge1xuICAgICAgICAgICAgICBcIm1pbkFyZ3NcIjogMyxcbiAgICAgICAgICAgICAgXCJtYXhBcmdzXCI6IDMsXG4gICAgICAgICAgICAgIFwic2luZ2xlQ2FsbGJhY2tBcmdcIjogdHJ1ZVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgXCJkb3dubG9hZHNcIjoge1xuICAgICAgICAgIFwiY2FuY2VsXCI6IHtcbiAgICAgICAgICAgIFwibWluQXJnc1wiOiAxLFxuICAgICAgICAgICAgXCJtYXhBcmdzXCI6IDFcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwiZG93bmxvYWRcIjoge1xuICAgICAgICAgICAgXCJtaW5BcmdzXCI6IDEsXG4gICAgICAgICAgICBcIm1heEFyZ3NcIjogMVxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJlcmFzZVwiOiB7XG4gICAgICAgICAgICBcIm1pbkFyZ3NcIjogMSxcbiAgICAgICAgICAgIFwibWF4QXJnc1wiOiAxXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcImdldEZpbGVJY29uXCI6IHtcbiAgICAgICAgICAgIFwibWluQXJnc1wiOiAxLFxuICAgICAgICAgICAgXCJtYXhBcmdzXCI6IDJcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwib3BlblwiOiB7XG4gICAgICAgICAgICBcIm1pbkFyZ3NcIjogMSxcbiAgICAgICAgICAgIFwibWF4QXJnc1wiOiAxLFxuICAgICAgICAgICAgXCJmYWxsYmFja1RvTm9DYWxsYmFja1wiOiB0cnVlXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcInBhdXNlXCI6IHtcbiAgICAgICAgICAgIFwibWluQXJnc1wiOiAxLFxuICAgICAgICAgICAgXCJtYXhBcmdzXCI6IDFcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwicmVtb3ZlRmlsZVwiOiB7XG4gICAgICAgICAgICBcIm1pbkFyZ3NcIjogMSxcbiAgICAgICAgICAgIFwibWF4QXJnc1wiOiAxXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcInJlc3VtZVwiOiB7XG4gICAgICAgICAgICBcIm1pbkFyZ3NcIjogMSxcbiAgICAgICAgICAgIFwibWF4QXJnc1wiOiAxXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcInNlYXJjaFwiOiB7XG4gICAgICAgICAgICBcIm1pbkFyZ3NcIjogMSxcbiAgICAgICAgICAgIFwibWF4QXJnc1wiOiAxXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcInNob3dcIjoge1xuICAgICAgICAgICAgXCJtaW5BcmdzXCI6IDEsXG4gICAgICAgICAgICBcIm1heEFyZ3NcIjogMSxcbiAgICAgICAgICAgIFwiZmFsbGJhY2tUb05vQ2FsbGJhY2tcIjogdHJ1ZVxuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgXCJleHRlbnNpb25cIjoge1xuICAgICAgICAgIFwiaXNBbGxvd2VkRmlsZVNjaGVtZUFjY2Vzc1wiOiB7XG4gICAgICAgICAgICBcIm1pbkFyZ3NcIjogMCxcbiAgICAgICAgICAgIFwibWF4QXJnc1wiOiAwXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcImlzQWxsb3dlZEluY29nbml0b0FjY2Vzc1wiOiB7XG4gICAgICAgICAgICBcIm1pbkFyZ3NcIjogMCxcbiAgICAgICAgICAgIFwibWF4QXJnc1wiOiAwXG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBcImhpc3RvcnlcIjoge1xuICAgICAgICAgIFwiYWRkVXJsXCI6IHtcbiAgICAgICAgICAgIFwibWluQXJnc1wiOiAxLFxuICAgICAgICAgICAgXCJtYXhBcmdzXCI6IDFcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwiZGVsZXRlQWxsXCI6IHtcbiAgICAgICAgICAgIFwibWluQXJnc1wiOiAwLFxuICAgICAgICAgICAgXCJtYXhBcmdzXCI6IDBcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwiZGVsZXRlUmFuZ2VcIjoge1xuICAgICAgICAgICAgXCJtaW5BcmdzXCI6IDEsXG4gICAgICAgICAgICBcIm1heEFyZ3NcIjogMVxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJkZWxldGVVcmxcIjoge1xuICAgICAgICAgICAgXCJtaW5BcmdzXCI6IDEsXG4gICAgICAgICAgICBcIm1heEFyZ3NcIjogMVxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJnZXRWaXNpdHNcIjoge1xuICAgICAgICAgICAgXCJtaW5BcmdzXCI6IDEsXG4gICAgICAgICAgICBcIm1heEFyZ3NcIjogMVxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJzZWFyY2hcIjoge1xuICAgICAgICAgICAgXCJtaW5BcmdzXCI6IDEsXG4gICAgICAgICAgICBcIm1heEFyZ3NcIjogMVxuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgXCJpMThuXCI6IHtcbiAgICAgICAgICBcImRldGVjdExhbmd1YWdlXCI6IHtcbiAgICAgICAgICAgIFwibWluQXJnc1wiOiAxLFxuICAgICAgICAgICAgXCJtYXhBcmdzXCI6IDFcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwiZ2V0QWNjZXB0TGFuZ3VhZ2VzXCI6IHtcbiAgICAgICAgICAgIFwibWluQXJnc1wiOiAwLFxuICAgICAgICAgICAgXCJtYXhBcmdzXCI6IDBcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIFwiaWRlbnRpdHlcIjoge1xuICAgICAgICAgIFwibGF1bmNoV2ViQXV0aEZsb3dcIjoge1xuICAgICAgICAgICAgXCJtaW5BcmdzXCI6IDEsXG4gICAgICAgICAgICBcIm1heEFyZ3NcIjogMVxuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgXCJpZGxlXCI6IHtcbiAgICAgICAgICBcInF1ZXJ5U3RhdGVcIjoge1xuICAgICAgICAgICAgXCJtaW5BcmdzXCI6IDEsXG4gICAgICAgICAgICBcIm1heEFyZ3NcIjogMVxuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgXCJtYW5hZ2VtZW50XCI6IHtcbiAgICAgICAgICBcImdldFwiOiB7XG4gICAgICAgICAgICBcIm1pbkFyZ3NcIjogMSxcbiAgICAgICAgICAgIFwibWF4QXJnc1wiOiAxXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcImdldEFsbFwiOiB7XG4gICAgICAgICAgICBcIm1pbkFyZ3NcIjogMCxcbiAgICAgICAgICAgIFwibWF4QXJnc1wiOiAwXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcImdldFNlbGZcIjoge1xuICAgICAgICAgICAgXCJtaW5BcmdzXCI6IDAsXG4gICAgICAgICAgICBcIm1heEFyZ3NcIjogMFxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJzZXRFbmFibGVkXCI6IHtcbiAgICAgICAgICAgIFwibWluQXJnc1wiOiAyLFxuICAgICAgICAgICAgXCJtYXhBcmdzXCI6IDJcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwidW5pbnN0YWxsU2VsZlwiOiB7XG4gICAgICAgICAgICBcIm1pbkFyZ3NcIjogMCxcbiAgICAgICAgICAgIFwibWF4QXJnc1wiOiAxXG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBcIm5vdGlmaWNhdGlvbnNcIjoge1xuICAgICAgICAgIFwiY2xlYXJcIjoge1xuICAgICAgICAgICAgXCJtaW5BcmdzXCI6IDEsXG4gICAgICAgICAgICBcIm1heEFyZ3NcIjogMVxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJjcmVhdGVcIjoge1xuICAgICAgICAgICAgXCJtaW5BcmdzXCI6IDEsXG4gICAgICAgICAgICBcIm1heEFyZ3NcIjogMlxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJnZXRBbGxcIjoge1xuICAgICAgICAgICAgXCJtaW5BcmdzXCI6IDAsXG4gICAgICAgICAgICBcIm1heEFyZ3NcIjogMFxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJnZXRQZXJtaXNzaW9uTGV2ZWxcIjoge1xuICAgICAgICAgICAgXCJtaW5BcmdzXCI6IDAsXG4gICAgICAgICAgICBcIm1heEFyZ3NcIjogMFxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJ1cGRhdGVcIjoge1xuICAgICAgICAgICAgXCJtaW5BcmdzXCI6IDIsXG4gICAgICAgICAgICBcIm1heEFyZ3NcIjogMlxuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgXCJwYWdlQWN0aW9uXCI6IHtcbiAgICAgICAgICBcImdldFBvcHVwXCI6IHtcbiAgICAgICAgICAgIFwibWluQXJnc1wiOiAxLFxuICAgICAgICAgICAgXCJtYXhBcmdzXCI6IDFcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwiZ2V0VGl0bGVcIjoge1xuICAgICAgICAgICAgXCJtaW5BcmdzXCI6IDEsXG4gICAgICAgICAgICBcIm1heEFyZ3NcIjogMVxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJoaWRlXCI6IHtcbiAgICAgICAgICAgIFwibWluQXJnc1wiOiAxLFxuICAgICAgICAgICAgXCJtYXhBcmdzXCI6IDEsXG4gICAgICAgICAgICBcImZhbGxiYWNrVG9Ob0NhbGxiYWNrXCI6IHRydWVcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwic2V0SWNvblwiOiB7XG4gICAgICAgICAgICBcIm1pbkFyZ3NcIjogMSxcbiAgICAgICAgICAgIFwibWF4QXJnc1wiOiAxXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcInNldFBvcHVwXCI6IHtcbiAgICAgICAgICAgIFwibWluQXJnc1wiOiAxLFxuICAgICAgICAgICAgXCJtYXhBcmdzXCI6IDEsXG4gICAgICAgICAgICBcImZhbGxiYWNrVG9Ob0NhbGxiYWNrXCI6IHRydWVcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwic2V0VGl0bGVcIjoge1xuICAgICAgICAgICAgXCJtaW5BcmdzXCI6IDEsXG4gICAgICAgICAgICBcIm1heEFyZ3NcIjogMSxcbiAgICAgICAgICAgIFwiZmFsbGJhY2tUb05vQ2FsbGJhY2tcIjogdHJ1ZVxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJzaG93XCI6IHtcbiAgICAgICAgICAgIFwibWluQXJnc1wiOiAxLFxuICAgICAgICAgICAgXCJtYXhBcmdzXCI6IDEsXG4gICAgICAgICAgICBcImZhbGxiYWNrVG9Ob0NhbGxiYWNrXCI6IHRydWVcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIFwicGVybWlzc2lvbnNcIjoge1xuICAgICAgICAgIFwiY29udGFpbnNcIjoge1xuICAgICAgICAgICAgXCJtaW5BcmdzXCI6IDEsXG4gICAgICAgICAgICBcIm1heEFyZ3NcIjogMVxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJnZXRBbGxcIjoge1xuICAgICAgICAgICAgXCJtaW5BcmdzXCI6IDAsXG4gICAgICAgICAgICBcIm1heEFyZ3NcIjogMFxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJyZW1vdmVcIjoge1xuICAgICAgICAgICAgXCJtaW5BcmdzXCI6IDEsXG4gICAgICAgICAgICBcIm1heEFyZ3NcIjogMVxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJyZXF1ZXN0XCI6IHtcbiAgICAgICAgICAgIFwibWluQXJnc1wiOiAxLFxuICAgICAgICAgICAgXCJtYXhBcmdzXCI6IDFcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIFwicnVudGltZVwiOiB7XG4gICAgICAgICAgXCJnZXRCYWNrZ3JvdW5kUGFnZVwiOiB7XG4gICAgICAgICAgICBcIm1pbkFyZ3NcIjogMCxcbiAgICAgICAgICAgIFwibWF4QXJnc1wiOiAwXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcImdldFBsYXRmb3JtSW5mb1wiOiB7XG4gICAgICAgICAgICBcIm1pbkFyZ3NcIjogMCxcbiAgICAgICAgICAgIFwibWF4QXJnc1wiOiAwXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcIm9wZW5PcHRpb25zUGFnZVwiOiB7XG4gICAgICAgICAgICBcIm1pbkFyZ3NcIjogMCxcbiAgICAgICAgICAgIFwibWF4QXJnc1wiOiAwXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcInJlcXVlc3RVcGRhdGVDaGVja1wiOiB7XG4gICAgICAgICAgICBcIm1pbkFyZ3NcIjogMCxcbiAgICAgICAgICAgIFwibWF4QXJnc1wiOiAwXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcInNlbmRNZXNzYWdlXCI6IHtcbiAgICAgICAgICAgIFwibWluQXJnc1wiOiAxLFxuICAgICAgICAgICAgXCJtYXhBcmdzXCI6IDNcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwic2VuZE5hdGl2ZU1lc3NhZ2VcIjoge1xuICAgICAgICAgICAgXCJtaW5BcmdzXCI6IDIsXG4gICAgICAgICAgICBcIm1heEFyZ3NcIjogMlxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJzZXRVbmluc3RhbGxVUkxcIjoge1xuICAgICAgICAgICAgXCJtaW5BcmdzXCI6IDEsXG4gICAgICAgICAgICBcIm1heEFyZ3NcIjogMVxuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgXCJzZXNzaW9uc1wiOiB7XG4gICAgICAgICAgXCJnZXREZXZpY2VzXCI6IHtcbiAgICAgICAgICAgIFwibWluQXJnc1wiOiAwLFxuICAgICAgICAgICAgXCJtYXhBcmdzXCI6IDFcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwiZ2V0UmVjZW50bHlDbG9zZWRcIjoge1xuICAgICAgICAgICAgXCJtaW5BcmdzXCI6IDAsXG4gICAgICAgICAgICBcIm1heEFyZ3NcIjogMVxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJyZXN0b3JlXCI6IHtcbiAgICAgICAgICAgIFwibWluQXJnc1wiOiAwLFxuICAgICAgICAgICAgXCJtYXhBcmdzXCI6IDFcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIFwic3RvcmFnZVwiOiB7XG4gICAgICAgICAgXCJsb2NhbFwiOiB7XG4gICAgICAgICAgICBcImNsZWFyXCI6IHtcbiAgICAgICAgICAgICAgXCJtaW5BcmdzXCI6IDAsXG4gICAgICAgICAgICAgIFwibWF4QXJnc1wiOiAwXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgXCJnZXRcIjoge1xuICAgICAgICAgICAgICBcIm1pbkFyZ3NcIjogMCxcbiAgICAgICAgICAgICAgXCJtYXhBcmdzXCI6IDFcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBcImdldEJ5dGVzSW5Vc2VcIjoge1xuICAgICAgICAgICAgICBcIm1pbkFyZ3NcIjogMCxcbiAgICAgICAgICAgICAgXCJtYXhBcmdzXCI6IDFcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBcInJlbW92ZVwiOiB7XG4gICAgICAgICAgICAgIFwibWluQXJnc1wiOiAxLFxuICAgICAgICAgICAgICBcIm1heEFyZ3NcIjogMVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIFwic2V0XCI6IHtcbiAgICAgICAgICAgICAgXCJtaW5BcmdzXCI6IDEsXG4gICAgICAgICAgICAgIFwibWF4QXJnc1wiOiAxXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSxcbiAgICAgICAgICBcIm1hbmFnZWRcIjoge1xuICAgICAgICAgICAgXCJnZXRcIjoge1xuICAgICAgICAgICAgICBcIm1pbkFyZ3NcIjogMCxcbiAgICAgICAgICAgICAgXCJtYXhBcmdzXCI6IDFcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBcImdldEJ5dGVzSW5Vc2VcIjoge1xuICAgICAgICAgICAgICBcIm1pbkFyZ3NcIjogMCxcbiAgICAgICAgICAgICAgXCJtYXhBcmdzXCI6IDFcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9LFxuICAgICAgICAgIFwic3luY1wiOiB7XG4gICAgICAgICAgICBcImNsZWFyXCI6IHtcbiAgICAgICAgICAgICAgXCJtaW5BcmdzXCI6IDAsXG4gICAgICAgICAgICAgIFwibWF4QXJnc1wiOiAwXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgXCJnZXRcIjoge1xuICAgICAgICAgICAgICBcIm1pbkFyZ3NcIjogMCxcbiAgICAgICAgICAgICAgXCJtYXhBcmdzXCI6IDFcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBcImdldEJ5dGVzSW5Vc2VcIjoge1xuICAgICAgICAgICAgICBcIm1pbkFyZ3NcIjogMCxcbiAgICAgICAgICAgICAgXCJtYXhBcmdzXCI6IDFcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBcInJlbW92ZVwiOiB7XG4gICAgICAgICAgICAgIFwibWluQXJnc1wiOiAxLFxuICAgICAgICAgICAgICBcIm1heEFyZ3NcIjogMVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIFwic2V0XCI6IHtcbiAgICAgICAgICAgICAgXCJtaW5BcmdzXCI6IDEsXG4gICAgICAgICAgICAgIFwibWF4QXJnc1wiOiAxXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBcInRhYnNcIjoge1xuICAgICAgICAgIFwiY2FwdHVyZVZpc2libGVUYWJcIjoge1xuICAgICAgICAgICAgXCJtaW5BcmdzXCI6IDAsXG4gICAgICAgICAgICBcIm1heEFyZ3NcIjogMlxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJjcmVhdGVcIjoge1xuICAgICAgICAgICAgXCJtaW5BcmdzXCI6IDEsXG4gICAgICAgICAgICBcIm1heEFyZ3NcIjogMVxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJkZXRlY3RMYW5ndWFnZVwiOiB7XG4gICAgICAgICAgICBcIm1pbkFyZ3NcIjogMCxcbiAgICAgICAgICAgIFwibWF4QXJnc1wiOiAxXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcImRpc2NhcmRcIjoge1xuICAgICAgICAgICAgXCJtaW5BcmdzXCI6IDAsXG4gICAgICAgICAgICBcIm1heEFyZ3NcIjogMVxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJkdXBsaWNhdGVcIjoge1xuICAgICAgICAgICAgXCJtaW5BcmdzXCI6IDEsXG4gICAgICAgICAgICBcIm1heEFyZ3NcIjogMVxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJleGVjdXRlU2NyaXB0XCI6IHtcbiAgICAgICAgICAgIFwibWluQXJnc1wiOiAxLFxuICAgICAgICAgICAgXCJtYXhBcmdzXCI6IDJcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwiZ2V0XCI6IHtcbiAgICAgICAgICAgIFwibWluQXJnc1wiOiAxLFxuICAgICAgICAgICAgXCJtYXhBcmdzXCI6IDFcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwiZ2V0Q3VycmVudFwiOiB7XG4gICAgICAgICAgICBcIm1pbkFyZ3NcIjogMCxcbiAgICAgICAgICAgIFwibWF4QXJnc1wiOiAwXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcImdldFpvb21cIjoge1xuICAgICAgICAgICAgXCJtaW5BcmdzXCI6IDAsXG4gICAgICAgICAgICBcIm1heEFyZ3NcIjogMVxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJnZXRab29tU2V0dGluZ3NcIjoge1xuICAgICAgICAgICAgXCJtaW5BcmdzXCI6IDAsXG4gICAgICAgICAgICBcIm1heEFyZ3NcIjogMVxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJoaWdobGlnaHRcIjoge1xuICAgICAgICAgICAgXCJtaW5BcmdzXCI6IDEsXG4gICAgICAgICAgICBcIm1heEFyZ3NcIjogMVxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJpbnNlcnRDU1NcIjoge1xuICAgICAgICAgICAgXCJtaW5BcmdzXCI6IDEsXG4gICAgICAgICAgICBcIm1heEFyZ3NcIjogMlxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJtb3ZlXCI6IHtcbiAgICAgICAgICAgIFwibWluQXJnc1wiOiAyLFxuICAgICAgICAgICAgXCJtYXhBcmdzXCI6IDJcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwicXVlcnlcIjoge1xuICAgICAgICAgICAgXCJtaW5BcmdzXCI6IDEsXG4gICAgICAgICAgICBcIm1heEFyZ3NcIjogMVxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJyZWxvYWRcIjoge1xuICAgICAgICAgICAgXCJtaW5BcmdzXCI6IDAsXG4gICAgICAgICAgICBcIm1heEFyZ3NcIjogMlxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJyZW1vdmVcIjoge1xuICAgICAgICAgICAgXCJtaW5BcmdzXCI6IDEsXG4gICAgICAgICAgICBcIm1heEFyZ3NcIjogMVxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJyZW1vdmVDU1NcIjoge1xuICAgICAgICAgICAgXCJtaW5BcmdzXCI6IDEsXG4gICAgICAgICAgICBcIm1heEFyZ3NcIjogMlxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJzZW5kTWVzc2FnZVwiOiB7XG4gICAgICAgICAgICBcIm1pbkFyZ3NcIjogMixcbiAgICAgICAgICAgIFwibWF4QXJnc1wiOiAzXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcInNldFpvb21cIjoge1xuICAgICAgICAgICAgXCJtaW5BcmdzXCI6IDEsXG4gICAgICAgICAgICBcIm1heEFyZ3NcIjogMlxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJzZXRab29tU2V0dGluZ3NcIjoge1xuICAgICAgICAgICAgXCJtaW5BcmdzXCI6IDEsXG4gICAgICAgICAgICBcIm1heEFyZ3NcIjogMlxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJ1cGRhdGVcIjoge1xuICAgICAgICAgICAgXCJtaW5BcmdzXCI6IDEsXG4gICAgICAgICAgICBcIm1heEFyZ3NcIjogMlxuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgXCJ0b3BTaXRlc1wiOiB7XG4gICAgICAgICAgXCJnZXRcIjoge1xuICAgICAgICAgICAgXCJtaW5BcmdzXCI6IDAsXG4gICAgICAgICAgICBcIm1heEFyZ3NcIjogMFxuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgXCJ3ZWJOYXZpZ2F0aW9uXCI6IHtcbiAgICAgICAgICBcImdldEFsbEZyYW1lc1wiOiB7XG4gICAgICAgICAgICBcIm1pbkFyZ3NcIjogMSxcbiAgICAgICAgICAgIFwibWF4QXJnc1wiOiAxXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcImdldEZyYW1lXCI6IHtcbiAgICAgICAgICAgIFwibWluQXJnc1wiOiAxLFxuICAgICAgICAgICAgXCJtYXhBcmdzXCI6IDFcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIFwid2ViUmVxdWVzdFwiOiB7XG4gICAgICAgICAgXCJoYW5kbGVyQmVoYXZpb3JDaGFuZ2VkXCI6IHtcbiAgICAgICAgICAgIFwibWluQXJnc1wiOiAwLFxuICAgICAgICAgICAgXCJtYXhBcmdzXCI6IDBcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIFwid2luZG93c1wiOiB7XG4gICAgICAgICAgXCJjcmVhdGVcIjoge1xuICAgICAgICAgICAgXCJtaW5BcmdzXCI6IDAsXG4gICAgICAgICAgICBcIm1heEFyZ3NcIjogMVxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJnZXRcIjoge1xuICAgICAgICAgICAgXCJtaW5BcmdzXCI6IDEsXG4gICAgICAgICAgICBcIm1heEFyZ3NcIjogMlxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJnZXRBbGxcIjoge1xuICAgICAgICAgICAgXCJtaW5BcmdzXCI6IDAsXG4gICAgICAgICAgICBcIm1heEFyZ3NcIjogMVxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJnZXRDdXJyZW50XCI6IHtcbiAgICAgICAgICAgIFwibWluQXJnc1wiOiAwLFxuICAgICAgICAgICAgXCJtYXhBcmdzXCI6IDFcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwiZ2V0TGFzdEZvY3VzZWRcIjoge1xuICAgICAgICAgICAgXCJtaW5BcmdzXCI6IDAsXG4gICAgICAgICAgICBcIm1heEFyZ3NcIjogMVxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJyZW1vdmVcIjoge1xuICAgICAgICAgICAgXCJtaW5BcmdzXCI6IDEsXG4gICAgICAgICAgICBcIm1heEFyZ3NcIjogMVxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJ1cGRhdGVcIjoge1xuICAgICAgICAgICAgXCJtaW5BcmdzXCI6IDIsXG4gICAgICAgICAgICBcIm1heEFyZ3NcIjogMlxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfTtcblxuICAgICAgaWYgKE9iamVjdC5rZXlzKGFwaU1ldGFkYXRhKS5sZW5ndGggPT09IDApIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiYXBpLW1ldGFkYXRhLmpzb24gaGFzIG5vdCBiZWVuIGluY2x1ZGVkIGluIGJyb3dzZXItcG9seWZpbGxcIik7XG4gICAgICB9XG5cbiAgICAgIC8qKlxuICAgICAgICogQSBXZWFrTWFwIHN1YmNsYXNzIHdoaWNoIGNyZWF0ZXMgYW5kIHN0b3JlcyBhIHZhbHVlIGZvciBhbnkga2V5IHdoaWNoIGRvZXNcbiAgICAgICAqIG5vdCBleGlzdCB3aGVuIGFjY2Vzc2VkLCBidXQgYmVoYXZlcyBleGFjdGx5IGFzIGFuIG9yZGluYXJ5IFdlYWtNYXBcbiAgICAgICAqIG90aGVyd2lzZS5cbiAgICAgICAqXG4gICAgICAgKiBAcGFyYW0ge2Z1bmN0aW9ufSBjcmVhdGVJdGVtXG4gICAgICAgKiAgICAgICAgQSBmdW5jdGlvbiB3aGljaCB3aWxsIGJlIGNhbGxlZCBpbiBvcmRlciB0byBjcmVhdGUgdGhlIHZhbHVlIGZvciBhbnlcbiAgICAgICAqICAgICAgICBrZXkgd2hpY2ggZG9lcyBub3QgZXhpc3QsIHRoZSBmaXJzdCB0aW1lIGl0IGlzIGFjY2Vzc2VkLiBUaGVcbiAgICAgICAqICAgICAgICBmdW5jdGlvbiByZWNlaXZlcywgYXMgaXRzIG9ubHkgYXJndW1lbnQsIHRoZSBrZXkgYmVpbmcgY3JlYXRlZC5cbiAgICAgICAqL1xuICAgICAgY2xhc3MgRGVmYXVsdFdlYWtNYXAgZXh0ZW5kcyBXZWFrTWFwIHtcbiAgICAgICAgY29uc3RydWN0b3IoY3JlYXRlSXRlbSwgaXRlbXMgPSB1bmRlZmluZWQpIHtcbiAgICAgICAgICBzdXBlcihpdGVtcyk7XG4gICAgICAgICAgdGhpcy5jcmVhdGVJdGVtID0gY3JlYXRlSXRlbTtcbiAgICAgICAgfVxuXG4gICAgICAgIGdldChrZXkpIHtcbiAgICAgICAgICBpZiAoIXRoaXMuaGFzKGtleSkpIHtcbiAgICAgICAgICAgIHRoaXMuc2V0KGtleSwgdGhpcy5jcmVhdGVJdGVtKGtleSkpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHJldHVybiBzdXBlci5nZXQoa2V5KTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvKipcbiAgICAgICAqIFJldHVybnMgdHJ1ZSBpZiB0aGUgZ2l2ZW4gb2JqZWN0IGlzIGFuIG9iamVjdCB3aXRoIGEgYHRoZW5gIG1ldGhvZCwgYW5kIGNhblxuICAgICAgICogdGhlcmVmb3JlIGJlIGFzc3VtZWQgdG8gYmVoYXZlIGFzIGEgUHJvbWlzZS5cbiAgICAgICAqXG4gICAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byB0ZXN0LlxuICAgICAgICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdGhlIHZhbHVlIGlzIHRoZW5hYmxlLlxuICAgICAgICovXG4gICAgICBjb25zdCBpc1RoZW5hYmxlID0gdmFsdWUgPT4ge1xuICAgICAgICByZXR1cm4gdmFsdWUgJiYgdHlwZW9mIHZhbHVlID09PSBcIm9iamVjdFwiICYmIHR5cGVvZiB2YWx1ZS50aGVuID09PSBcImZ1bmN0aW9uXCI7XG4gICAgICB9O1xuXG4gICAgICAvKipcbiAgICAgICAqIENyZWF0ZXMgYW5kIHJldHVybnMgYSBmdW5jdGlvbiB3aGljaCwgd2hlbiBjYWxsZWQsIHdpbGwgcmVzb2x2ZSBvciByZWplY3RcbiAgICAgICAqIHRoZSBnaXZlbiBwcm9taXNlIGJhc2VkIG9uIGhvdyBpdCBpcyBjYWxsZWQ6XG4gICAgICAgKlxuICAgICAgICogLSBJZiwgd2hlbiBjYWxsZWQsIGBjaHJvbWUucnVudGltZS5sYXN0RXJyb3JgIGNvbnRhaW5zIGEgbm9uLW51bGwgb2JqZWN0LFxuICAgICAgICogICB0aGUgcHJvbWlzZSBpcyByZWplY3RlZCB3aXRoIHRoYXQgdmFsdWUuXG4gICAgICAgKiAtIElmIHRoZSBmdW5jdGlvbiBpcyBjYWxsZWQgd2l0aCBleGFjdGx5IG9uZSBhcmd1bWVudCwgdGhlIHByb21pc2UgaXNcbiAgICAgICAqICAgcmVzb2x2ZWQgdG8gdGhhdCB2YWx1ZS5cbiAgICAgICAqIC0gT3RoZXJ3aXNlLCB0aGUgcHJvbWlzZSBpcyByZXNvbHZlZCB0byBhbiBhcnJheSBjb250YWluaW5nIGFsbCBvZiB0aGVcbiAgICAgICAqICAgZnVuY3Rpb24ncyBhcmd1bWVudHMuXG4gICAgICAgKlxuICAgICAgICogQHBhcmFtIHtvYmplY3R9IHByb21pc2VcbiAgICAgICAqICAgICAgICBBbiBvYmplY3QgY29udGFpbmluZyB0aGUgcmVzb2x1dGlvbiBhbmQgcmVqZWN0aW9uIGZ1bmN0aW9ucyBvZiBhXG4gICAgICAgKiAgICAgICAgcHJvbWlzZS5cbiAgICAgICAqIEBwYXJhbSB7ZnVuY3Rpb259IHByb21pc2UucmVzb2x2ZVxuICAgICAgICogICAgICAgIFRoZSBwcm9taXNlJ3MgcmVzb2x1dGlvbiBmdW5jdGlvbi5cbiAgICAgICAqIEBwYXJhbSB7ZnVuY3Rpb259IHByb21pc2UucmVqZWN0aW9uXG4gICAgICAgKiAgICAgICAgVGhlIHByb21pc2UncyByZWplY3Rpb24gZnVuY3Rpb24uXG4gICAgICAgKiBAcGFyYW0ge29iamVjdH0gbWV0YWRhdGFcbiAgICAgICAqICAgICAgICBNZXRhZGF0YSBhYm91dCB0aGUgd3JhcHBlZCBtZXRob2Qgd2hpY2ggaGFzIGNyZWF0ZWQgdGhlIGNhbGxiYWNrLlxuICAgICAgICogQHBhcmFtIHtpbnRlZ2VyfSBtZXRhZGF0YS5tYXhSZXNvbHZlZEFyZ3NcbiAgICAgICAqICAgICAgICBUaGUgbWF4aW11bSBudW1iZXIgb2YgYXJndW1lbnRzIHdoaWNoIG1heSBiZSBwYXNzZWQgdG8gdGhlXG4gICAgICAgKiAgICAgICAgY2FsbGJhY2sgY3JlYXRlZCBieSB0aGUgd3JhcHBlZCBhc3luYyBmdW5jdGlvbi5cbiAgICAgICAqXG4gICAgICAgKiBAcmV0dXJucyB7ZnVuY3Rpb259XG4gICAgICAgKiAgICAgICAgVGhlIGdlbmVyYXRlZCBjYWxsYmFjayBmdW5jdGlvbi5cbiAgICAgICAqL1xuICAgICAgY29uc3QgbWFrZUNhbGxiYWNrID0gKHByb21pc2UsIG1ldGFkYXRhKSA9PiB7XG4gICAgICAgIHJldHVybiAoLi4uY2FsbGJhY2tBcmdzKSA9PiB7XG4gICAgICAgICAgaWYgKGV4dGVuc2lvbkFQSXMucnVudGltZS5sYXN0RXJyb3IpIHtcbiAgICAgICAgICAgIHByb21pc2UucmVqZWN0KGV4dGVuc2lvbkFQSXMucnVudGltZS5sYXN0RXJyb3IpO1xuICAgICAgICAgIH0gZWxzZSBpZiAobWV0YWRhdGEuc2luZ2xlQ2FsbGJhY2tBcmcgfHwgY2FsbGJhY2tBcmdzLmxlbmd0aCA8PSAxICYmIG1ldGFkYXRhLnNpbmdsZUNhbGxiYWNrQXJnICE9PSBmYWxzZSkge1xuICAgICAgICAgICAgcHJvbWlzZS5yZXNvbHZlKGNhbGxiYWNrQXJnc1swXSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHByb21pc2UucmVzb2x2ZShjYWxsYmFja0FyZ3MpO1xuICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgIH07XG5cbiAgICAgIGNvbnN0IHBsdXJhbGl6ZUFyZ3VtZW50cyA9IG51bUFyZ3MgPT4gbnVtQXJncyA9PSAxID8gXCJhcmd1bWVudFwiIDogXCJhcmd1bWVudHNcIjtcblxuICAgICAgLyoqXG4gICAgICAgKiBDcmVhdGVzIGEgd3JhcHBlciBmdW5jdGlvbiBmb3IgYSBtZXRob2Qgd2l0aCB0aGUgZ2l2ZW4gbmFtZSBhbmQgbWV0YWRhdGEuXG4gICAgICAgKlxuICAgICAgICogQHBhcmFtIHtzdHJpbmd9IG5hbWVcbiAgICAgICAqICAgICAgICBUaGUgbmFtZSBvZiB0aGUgbWV0aG9kIHdoaWNoIGlzIGJlaW5nIHdyYXBwZWQuXG4gICAgICAgKiBAcGFyYW0ge29iamVjdH0gbWV0YWRhdGFcbiAgICAgICAqICAgICAgICBNZXRhZGF0YSBhYm91dCB0aGUgbWV0aG9kIGJlaW5nIHdyYXBwZWQuXG4gICAgICAgKiBAcGFyYW0ge2ludGVnZXJ9IG1ldGFkYXRhLm1pbkFyZ3NcbiAgICAgICAqICAgICAgICBUaGUgbWluaW11bSBudW1iZXIgb2YgYXJndW1lbnRzIHdoaWNoIG11c3QgYmUgcGFzc2VkIHRvIHRoZVxuICAgICAgICogICAgICAgIGZ1bmN0aW9uLiBJZiBjYWxsZWQgd2l0aCBmZXdlciB0aGFuIHRoaXMgbnVtYmVyIG9mIGFyZ3VtZW50cywgdGhlXG4gICAgICAgKiAgICAgICAgd3JhcHBlciB3aWxsIHJhaXNlIGFuIGV4Y2VwdGlvbi5cbiAgICAgICAqIEBwYXJhbSB7aW50ZWdlcn0gbWV0YWRhdGEubWF4QXJnc1xuICAgICAgICogICAgICAgIFRoZSBtYXhpbXVtIG51bWJlciBvZiBhcmd1bWVudHMgd2hpY2ggbWF5IGJlIHBhc3NlZCB0byB0aGVcbiAgICAgICAqICAgICAgICBmdW5jdGlvbi4gSWYgY2FsbGVkIHdpdGggbW9yZSB0aGFuIHRoaXMgbnVtYmVyIG9mIGFyZ3VtZW50cywgdGhlXG4gICAgICAgKiAgICAgICAgd3JhcHBlciB3aWxsIHJhaXNlIGFuIGV4Y2VwdGlvbi5cbiAgICAgICAqIEBwYXJhbSB7aW50ZWdlcn0gbWV0YWRhdGEubWF4UmVzb2x2ZWRBcmdzXG4gICAgICAgKiAgICAgICAgVGhlIG1heGltdW0gbnVtYmVyIG9mIGFyZ3VtZW50cyB3aGljaCBtYXkgYmUgcGFzc2VkIHRvIHRoZVxuICAgICAgICogICAgICAgIGNhbGxiYWNrIGNyZWF0ZWQgYnkgdGhlIHdyYXBwZWQgYXN5bmMgZnVuY3Rpb24uXG4gICAgICAgKlxuICAgICAgICogQHJldHVybnMge2Z1bmN0aW9uKG9iamVjdCwgLi4uKil9XG4gICAgICAgKiAgICAgICBUaGUgZ2VuZXJhdGVkIHdyYXBwZXIgZnVuY3Rpb24uXG4gICAgICAgKi9cbiAgICAgIGNvbnN0IHdyYXBBc3luY0Z1bmN0aW9uID0gKG5hbWUsIG1ldGFkYXRhKSA9PiB7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbiBhc3luY0Z1bmN0aW9uV3JhcHBlcih0YXJnZXQsIC4uLmFyZ3MpIHtcbiAgICAgICAgICBpZiAoYXJncy5sZW5ndGggPCBtZXRhZGF0YS5taW5BcmdzKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYEV4cGVjdGVkIGF0IGxlYXN0ICR7bWV0YWRhdGEubWluQXJnc30gJHtwbHVyYWxpemVBcmd1bWVudHMobWV0YWRhdGEubWluQXJncyl9IGZvciAke25hbWV9KCksIGdvdCAke2FyZ3MubGVuZ3RofWApO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmIChhcmdzLmxlbmd0aCA+IG1ldGFkYXRhLm1heEFyZ3MpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgRXhwZWN0ZWQgYXQgbW9zdCAke21ldGFkYXRhLm1heEFyZ3N9ICR7cGx1cmFsaXplQXJndW1lbnRzKG1ldGFkYXRhLm1heEFyZ3MpfSBmb3IgJHtuYW1lfSgpLCBnb3QgJHthcmdzLmxlbmd0aH1gKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgICAgICAgaWYgKG1ldGFkYXRhLmZhbGxiYWNrVG9Ob0NhbGxiYWNrKSB7XG4gICAgICAgICAgICAgIC8vIFRoaXMgQVBJIG1ldGhvZCBoYXMgY3VycmVudGx5IG5vIGNhbGxiYWNrIG9uIENocm9tZSwgYnV0IGl0IHJldHVybiBhIHByb21pc2Ugb24gRmlyZWZveCxcbiAgICAgICAgICAgICAgLy8gYW5kIHNvIHRoZSBwb2x5ZmlsbCB3aWxsIHRyeSB0byBjYWxsIGl0IHdpdGggYSBjYWxsYmFjayBmaXJzdCwgYW5kIGl0IHdpbGwgZmFsbGJhY2tcbiAgICAgICAgICAgICAgLy8gdG8gbm90IHBhc3NpbmcgdGhlIGNhbGxiYWNrIGlmIHRoZSBmaXJzdCBjYWxsIGZhaWxzLlxuICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIHRhcmdldFtuYW1lXSguLi5hcmdzLCBtYWtlQ2FsbGJhY2soeyByZXNvbHZlLCByZWplY3QgfSwgbWV0YWRhdGEpKTtcbiAgICAgICAgICAgICAgfSBjYXRjaCAoY2JFcnJvcikge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUud2FybihgJHtuYW1lfSBBUEkgbWV0aG9kIGRvZXNuJ3Qgc2VlbSB0byBzdXBwb3J0IHRoZSBjYWxsYmFjayBwYXJhbWV0ZXIsIGAgKyBcImZhbGxpbmcgYmFjayB0byBjYWxsIGl0IHdpdGhvdXQgYSBjYWxsYmFjazogXCIsIGNiRXJyb3IpO1xuXG4gICAgICAgICAgICAgICAgdGFyZ2V0W25hbWVdKC4uLmFyZ3MpO1xuXG4gICAgICAgICAgICAgICAgLy8gVXBkYXRlIHRoZSBBUEkgbWV0aG9kIG1ldGFkYXRhLCBzbyB0aGF0IHRoZSBuZXh0IEFQSSBjYWxscyB3aWxsIG5vdCB0cnkgdG9cbiAgICAgICAgICAgICAgICAvLyB1c2UgdGhlIHVuc3VwcG9ydGVkIGNhbGxiYWNrIGFueW1vcmUuXG4gICAgICAgICAgICAgICAgbWV0YWRhdGEuZmFsbGJhY2tUb05vQ2FsbGJhY2sgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICBtZXRhZGF0YS5ub0NhbGxiYWNrID0gdHJ1ZTtcblxuICAgICAgICAgICAgICAgIHJlc29sdmUoKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIGlmIChtZXRhZGF0YS5ub0NhbGxiYWNrKSB7XG4gICAgICAgICAgICAgIHRhcmdldFtuYW1lXSguLi5hcmdzKTtcbiAgICAgICAgICAgICAgcmVzb2x2ZSgpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgdGFyZ2V0W25hbWVdKC4uLmFyZ3MsIG1ha2VDYWxsYmFjayh7IHJlc29sdmUsIHJlamVjdCB9LCBtZXRhZGF0YSkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pO1xuICAgICAgICB9O1xuICAgICAgfTtcblxuICAgICAgLyoqXG4gICAgICAgKiBXcmFwcyBhbiBleGlzdGluZyBtZXRob2Qgb2YgdGhlIHRhcmdldCBvYmplY3QsIHNvIHRoYXQgY2FsbHMgdG8gaXQgYXJlXG4gICAgICAgKiBpbnRlcmNlcHRlZCBieSB0aGUgZ2l2ZW4gd3JhcHBlciBmdW5jdGlvbi4gVGhlIHdyYXBwZXIgZnVuY3Rpb24gcmVjZWl2ZXMsXG4gICAgICAgKiBhcyBpdHMgZmlyc3QgYXJndW1lbnQsIHRoZSBvcmlnaW5hbCBgdGFyZ2V0YCBvYmplY3QsIGZvbGxvd2VkIGJ5IGVhY2ggb2ZcbiAgICAgICAqIHRoZSBhcmd1bWVudHMgcGFzc2VkIHRvIHRoZSBvcmlnaW5hbCBtZXRob2QuXG4gICAgICAgKlxuICAgICAgICogQHBhcmFtIHtvYmplY3R9IHRhcmdldFxuICAgICAgICogICAgICAgIFRoZSBvcmlnaW5hbCB0YXJnZXQgb2JqZWN0IHRoYXQgdGhlIHdyYXBwZWQgbWV0aG9kIGJlbG9uZ3MgdG8uXG4gICAgICAgKiBAcGFyYW0ge2Z1bmN0aW9ufSBtZXRob2RcbiAgICAgICAqICAgICAgICBUaGUgbWV0aG9kIGJlaW5nIHdyYXBwZWQuIFRoaXMgaXMgdXNlZCBhcyB0aGUgdGFyZ2V0IG9mIHRoZSBQcm94eVxuICAgICAgICogICAgICAgIG9iamVjdCB3aGljaCBpcyBjcmVhdGVkIHRvIHdyYXAgdGhlIG1ldGhvZC5cbiAgICAgICAqIEBwYXJhbSB7ZnVuY3Rpb259IHdyYXBwZXJcbiAgICAgICAqICAgICAgICBUaGUgd3JhcHBlciBmdW5jdGlvbiB3aGljaCBpcyBjYWxsZWQgaW4gcGxhY2Ugb2YgYSBkaXJlY3QgaW52b2NhdGlvblxuICAgICAgICogICAgICAgIG9mIHRoZSB3cmFwcGVkIG1ldGhvZC5cbiAgICAgICAqXG4gICAgICAgKiBAcmV0dXJucyB7UHJveHk8ZnVuY3Rpb24+fVxuICAgICAgICogICAgICAgIEEgUHJveHkgb2JqZWN0IGZvciB0aGUgZ2l2ZW4gbWV0aG9kLCB3aGljaCBpbnZva2VzIHRoZSBnaXZlbiB3cmFwcGVyXG4gICAgICAgKiAgICAgICAgbWV0aG9kIGluIGl0cyBwbGFjZS5cbiAgICAgICAqL1xuICAgICAgY29uc3Qgd3JhcE1ldGhvZCA9ICh0YXJnZXQsIG1ldGhvZCwgd3JhcHBlcikgPT4ge1xuICAgICAgICByZXR1cm4gbmV3IFByb3h5KG1ldGhvZCwge1xuICAgICAgICAgIGFwcGx5KHRhcmdldE1ldGhvZCwgdGhpc09iaiwgYXJncykge1xuICAgICAgICAgICAgcmV0dXJuIHdyYXBwZXIuY2FsbCh0aGlzT2JqLCB0YXJnZXQsIC4uLmFyZ3MpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9O1xuXG4gICAgICBsZXQgaGFzT3duUHJvcGVydHkgPSBGdW5jdGlvbi5jYWxsLmJpbmQoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eSk7XG5cbiAgICAgIC8qKlxuICAgICAgICogV3JhcHMgYW4gb2JqZWN0IGluIGEgUHJveHkgd2hpY2ggaW50ZXJjZXB0cyBhbmQgd3JhcHMgY2VydGFpbiBtZXRob2RzXG4gICAgICAgKiBiYXNlZCBvbiB0aGUgZ2l2ZW4gYHdyYXBwZXJzYCBhbmQgYG1ldGFkYXRhYCBvYmplY3RzLlxuICAgICAgICpcbiAgICAgICAqIEBwYXJhbSB7b2JqZWN0fSB0YXJnZXRcbiAgICAgICAqICAgICAgICBUaGUgdGFyZ2V0IG9iamVjdCB0byB3cmFwLlxuICAgICAgICpcbiAgICAgICAqIEBwYXJhbSB7b2JqZWN0fSBbd3JhcHBlcnMgPSB7fV1cbiAgICAgICAqICAgICAgICBBbiBvYmplY3QgdHJlZSBjb250YWluaW5nIHdyYXBwZXIgZnVuY3Rpb25zIGZvciBzcGVjaWFsIGNhc2VzLiBBbnlcbiAgICAgICAqICAgICAgICBmdW5jdGlvbiBwcmVzZW50IGluIHRoaXMgb2JqZWN0IHRyZWUgaXMgY2FsbGVkIGluIHBsYWNlIG9mIHRoZVxuICAgICAgICogICAgICAgIG1ldGhvZCBpbiB0aGUgc2FtZSBsb2NhdGlvbiBpbiB0aGUgYHRhcmdldGAgb2JqZWN0IHRyZWUuIFRoZXNlXG4gICAgICAgKiAgICAgICAgd3JhcHBlciBtZXRob2RzIGFyZSBpbnZva2VkIGFzIGRlc2NyaWJlZCBpbiB7QHNlZSB3cmFwTWV0aG9kfS5cbiAgICAgICAqXG4gICAgICAgKiBAcGFyYW0ge29iamVjdH0gW21ldGFkYXRhID0ge31dXG4gICAgICAgKiAgICAgICAgQW4gb2JqZWN0IHRyZWUgY29udGFpbmluZyBtZXRhZGF0YSB1c2VkIHRvIGF1dG9tYXRpY2FsbHkgZ2VuZXJhdGVcbiAgICAgICAqICAgICAgICBQcm9taXNlLWJhc2VkIHdyYXBwZXIgZnVuY3Rpb25zIGZvciBhc3luY2hyb25vdXMuIEFueSBmdW5jdGlvbiBpblxuICAgICAgICogICAgICAgIHRoZSBgdGFyZ2V0YCBvYmplY3QgdHJlZSB3aGljaCBoYXMgYSBjb3JyZXNwb25kaW5nIG1ldGFkYXRhIG9iamVjdFxuICAgICAgICogICAgICAgIGluIHRoZSBzYW1lIGxvY2F0aW9uIGluIHRoZSBgbWV0YWRhdGFgIHRyZWUgaXMgcmVwbGFjZWQgd2l0aCBhblxuICAgICAgICogICAgICAgIGF1dG9tYXRpY2FsbHktZ2VuZXJhdGVkIHdyYXBwZXIgZnVuY3Rpb24sIGFzIGRlc2NyaWJlZCBpblxuICAgICAgICogICAgICAgIHtAc2VlIHdyYXBBc3luY0Z1bmN0aW9ufVxuICAgICAgICpcbiAgICAgICAqIEByZXR1cm5zIHtQcm94eTxvYmplY3Q+fVxuICAgICAgICovXG4gICAgICBjb25zdCB3cmFwT2JqZWN0ID0gKHRhcmdldCwgd3JhcHBlcnMgPSB7fSwgbWV0YWRhdGEgPSB7fSkgPT4ge1xuICAgICAgICBsZXQgY2FjaGUgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgICAgICBsZXQgaGFuZGxlcnMgPSB7XG4gICAgICAgICAgaGFzKHByb3h5VGFyZ2V0LCBwcm9wKSB7XG4gICAgICAgICAgICByZXR1cm4gcHJvcCBpbiB0YXJnZXQgfHwgcHJvcCBpbiBjYWNoZTtcbiAgICAgICAgICB9LFxuXG4gICAgICAgICAgZ2V0KHByb3h5VGFyZ2V0LCBwcm9wLCByZWNlaXZlcikge1xuICAgICAgICAgICAgaWYgKHByb3AgaW4gY2FjaGUpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGNhY2hlW3Byb3BdO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoIShwcm9wIGluIHRhcmdldCkpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgbGV0IHZhbHVlID0gdGFyZ2V0W3Byb3BdO1xuXG4gICAgICAgICAgICBpZiAodHlwZW9mIHZhbHVlID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgICAgICAgLy8gVGhpcyBpcyBhIG1ldGhvZCBvbiB0aGUgdW5kZXJseWluZyBvYmplY3QuIENoZWNrIGlmIHdlIG5lZWQgdG8gZG9cbiAgICAgICAgICAgICAgLy8gYW55IHdyYXBwaW5nLlxuXG4gICAgICAgICAgICAgIGlmICh0eXBlb2Ygd3JhcHBlcnNbcHJvcF0gPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICAgICAgICAgIC8vIFdlIGhhdmUgYSBzcGVjaWFsLWNhc2Ugd3JhcHBlciBmb3IgdGhpcyBtZXRob2QuXG4gICAgICAgICAgICAgICAgdmFsdWUgPSB3cmFwTWV0aG9kKHRhcmdldCwgdGFyZ2V0W3Byb3BdLCB3cmFwcGVyc1twcm9wXSk7XG4gICAgICAgICAgICAgIH0gZWxzZSBpZiAoaGFzT3duUHJvcGVydHkobWV0YWRhdGEsIHByb3ApKSB7XG4gICAgICAgICAgICAgICAgLy8gVGhpcyBpcyBhbiBhc3luYyBtZXRob2QgdGhhdCB3ZSBoYXZlIG1ldGFkYXRhIGZvci4gQ3JlYXRlIGFcbiAgICAgICAgICAgICAgICAvLyBQcm9taXNlIHdyYXBwZXIgZm9yIGl0LlxuICAgICAgICAgICAgICAgIGxldCB3cmFwcGVyID0gd3JhcEFzeW5jRnVuY3Rpb24ocHJvcCwgbWV0YWRhdGFbcHJvcF0pO1xuICAgICAgICAgICAgICAgIHZhbHVlID0gd3JhcE1ldGhvZCh0YXJnZXQsIHRhcmdldFtwcm9wXSwgd3JhcHBlcik7XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgLy8gVGhpcyBpcyBhIG1ldGhvZCB0aGF0IHdlIGRvbid0IGtub3cgb3IgY2FyZSBhYm91dC4gUmV0dXJuIHRoZVxuICAgICAgICAgICAgICAgIC8vIG9yaWdpbmFsIG1ldGhvZCwgYm91bmQgdG8gdGhlIHVuZGVybHlpbmcgb2JqZWN0LlxuICAgICAgICAgICAgICAgIHZhbHVlID0gdmFsdWUuYmluZCh0YXJnZXQpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gXCJvYmplY3RcIiAmJiB2YWx1ZSAhPT0gbnVsbCAmJiAoaGFzT3duUHJvcGVydHkod3JhcHBlcnMsIHByb3ApIHx8IGhhc093blByb3BlcnR5KG1ldGFkYXRhLCBwcm9wKSkpIHtcbiAgICAgICAgICAgICAgLy8gVGhpcyBpcyBhbiBvYmplY3QgdGhhdCB3ZSBuZWVkIHRvIGRvIHNvbWUgd3JhcHBpbmcgZm9yIHRoZSBjaGlsZHJlblxuICAgICAgICAgICAgICAvLyBvZi4gQ3JlYXRlIGEgc3ViLW9iamVjdCB3cmFwcGVyIGZvciBpdCB3aXRoIHRoZSBhcHByb3ByaWF0ZSBjaGlsZFxuICAgICAgICAgICAgICAvLyBtZXRhZGF0YS5cbiAgICAgICAgICAgICAgdmFsdWUgPSB3cmFwT2JqZWN0KHZhbHVlLCB3cmFwcGVyc1twcm9wXSwgbWV0YWRhdGFbcHJvcF0pO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgLy8gV2UgZG9uJ3QgbmVlZCB0byBkbyBhbnkgd3JhcHBpbmcgZm9yIHRoaXMgcHJvcGVydHksXG4gICAgICAgICAgICAgIC8vIHNvIGp1c3QgZm9yd2FyZCBhbGwgYWNjZXNzIHRvIHRoZSB1bmRlcmx5aW5nIG9iamVjdC5cbiAgICAgICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGNhY2hlLCBwcm9wLCB7XG4gICAgICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICAgICAgZ2V0KCkge1xuICAgICAgICAgICAgICAgICAgcmV0dXJuIHRhcmdldFtwcm9wXTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHNldCh2YWx1ZSkge1xuICAgICAgICAgICAgICAgICAgdGFyZ2V0W3Byb3BdID0gdmFsdWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGNhY2hlW3Byb3BdID0gdmFsdWU7XG4gICAgICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICAgICAgfSxcblxuICAgICAgICAgIHNldChwcm94eVRhcmdldCwgcHJvcCwgdmFsdWUsIHJlY2VpdmVyKSB7XG4gICAgICAgICAgICBpZiAocHJvcCBpbiBjYWNoZSkge1xuICAgICAgICAgICAgICBjYWNoZVtwcm9wXSA9IHZhbHVlO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgdGFyZ2V0W3Byb3BdID0gdmFsdWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICB9LFxuXG4gICAgICAgICAgZGVmaW5lUHJvcGVydHkocHJveHlUYXJnZXQsIHByb3AsIGRlc2MpIHtcbiAgICAgICAgICAgIHJldHVybiBSZWZsZWN0LmRlZmluZVByb3BlcnR5KGNhY2hlLCBwcm9wLCBkZXNjKTtcbiAgICAgICAgICB9LFxuXG4gICAgICAgICAgZGVsZXRlUHJvcGVydHkocHJveHlUYXJnZXQsIHByb3ApIHtcbiAgICAgICAgICAgIHJldHVybiBSZWZsZWN0LmRlbGV0ZVByb3BlcnR5KGNhY2hlLCBwcm9wKTtcbiAgICAgICAgICB9XG4gICAgICAgIH07XG5cbiAgICAgICAgLy8gUGVyIGNvbnRyYWN0IG9mIHRoZSBQcm94eSBBUEksIHRoZSBcImdldFwiIHByb3h5IGhhbmRsZXIgbXVzdCByZXR1cm4gdGhlXG4gICAgICAgIC8vIG9yaWdpbmFsIHZhbHVlIG9mIHRoZSB0YXJnZXQgaWYgdGhhdCB2YWx1ZSBpcyBkZWNsYXJlZCByZWFkLW9ubHkgYW5kXG4gICAgICAgIC8vIG5vbi1jb25maWd1cmFibGUuIEZvciB0aGlzIHJlYXNvbiwgd2UgY3JlYXRlIGFuIG9iamVjdCB3aXRoIHRoZVxuICAgICAgICAvLyBwcm90b3R5cGUgc2V0IHRvIGB0YXJnZXRgIGluc3RlYWQgb2YgdXNpbmcgYHRhcmdldGAgZGlyZWN0bHkuXG4gICAgICAgIC8vIE90aGVyd2lzZSB3ZSBjYW5ub3QgcmV0dXJuIGEgY3VzdG9tIG9iamVjdCBmb3IgQVBJcyB0aGF0XG4gICAgICAgIC8vIGFyZSBkZWNsYXJlZCByZWFkLW9ubHkgYW5kIG5vbi1jb25maWd1cmFibGUsIHN1Y2ggYXMgYGNocm9tZS5kZXZ0b29sc2AuXG4gICAgICAgIC8vXG4gICAgICAgIC8vIFRoZSBwcm94eSBoYW5kbGVycyB0aGVtc2VsdmVzIHdpbGwgc3RpbGwgdXNlIHRoZSBvcmlnaW5hbCBgdGFyZ2V0YFxuICAgICAgICAvLyBpbnN0ZWFkIG9mIHRoZSBgcHJveHlUYXJnZXRgLCBzbyB0aGF0IHRoZSBtZXRob2RzIGFuZCBwcm9wZXJ0aWVzIGFyZVxuICAgICAgICAvLyBkZXJlZmVyZW5jZWQgdmlhIHRoZSBvcmlnaW5hbCB0YXJnZXRzLlxuICAgICAgICBsZXQgcHJveHlUYXJnZXQgPSBPYmplY3QuY3JlYXRlKHRhcmdldCk7XG4gICAgICAgIHJldHVybiBuZXcgUHJveHkocHJveHlUYXJnZXQsIGhhbmRsZXJzKTtcbiAgICAgIH07XG5cbiAgICAgIC8qKlxuICAgICAgICogQ3JlYXRlcyBhIHNldCBvZiB3cmFwcGVyIGZ1bmN0aW9ucyBmb3IgYW4gZXZlbnQgb2JqZWN0LCB3aGljaCBoYW5kbGVzXG4gICAgICAgKiB3cmFwcGluZyBvZiBsaXN0ZW5lciBmdW5jdGlvbnMgdGhhdCB0aG9zZSBtZXNzYWdlcyBhcmUgcGFzc2VkLlxuICAgICAgICpcbiAgICAgICAqIEEgc2luZ2xlIHdyYXBwZXIgaXMgY3JlYXRlZCBmb3IgZWFjaCBsaXN0ZW5lciBmdW5jdGlvbiwgYW5kIHN0b3JlZCBpbiBhXG4gICAgICAgKiBtYXAuIFN1YnNlcXVlbnQgY2FsbHMgdG8gYGFkZExpc3RlbmVyYCwgYGhhc0xpc3RlbmVyYCwgb3IgYHJlbW92ZUxpc3RlbmVyYFxuICAgICAgICogcmV0cmlldmUgdGhlIG9yaWdpbmFsIHdyYXBwZXIsIHNvIHRoYXQgIGF0dGVtcHRzIHRvIHJlbW92ZSBhXG4gICAgICAgKiBwcmV2aW91c2x5LWFkZGVkIGxpc3RlbmVyIHdvcmsgYXMgZXhwZWN0ZWQuXG4gICAgICAgKlxuICAgICAgICogQHBhcmFtIHtEZWZhdWx0V2Vha01hcDxmdW5jdGlvbiwgZnVuY3Rpb24+fSB3cmFwcGVyTWFwXG4gICAgICAgKiAgICAgICAgQSBEZWZhdWx0V2Vha01hcCBvYmplY3Qgd2hpY2ggd2lsbCBjcmVhdGUgdGhlIGFwcHJvcHJpYXRlIHdyYXBwZXJcbiAgICAgICAqICAgICAgICBmb3IgYSBnaXZlbiBsaXN0ZW5lciBmdW5jdGlvbiB3aGVuIG9uZSBkb2VzIG5vdCBleGlzdCwgYW5kIHJldHJpZXZlXG4gICAgICAgKiAgICAgICAgYW4gZXhpc3Rpbmcgb25lIHdoZW4gaXQgZG9lcy5cbiAgICAgICAqXG4gICAgICAgKiBAcmV0dXJucyB7b2JqZWN0fVxuICAgICAgICovXG4gICAgICBjb25zdCB3cmFwRXZlbnQgPSB3cmFwcGVyTWFwID0+ICh7XG4gICAgICAgIGFkZExpc3RlbmVyKHRhcmdldCwgbGlzdGVuZXIsIC4uLmFyZ3MpIHtcbiAgICAgICAgICB0YXJnZXQuYWRkTGlzdGVuZXIod3JhcHBlck1hcC5nZXQobGlzdGVuZXIpLCAuLi5hcmdzKTtcbiAgICAgICAgfSxcblxuICAgICAgICBoYXNMaXN0ZW5lcih0YXJnZXQsIGxpc3RlbmVyKSB7XG4gICAgICAgICAgcmV0dXJuIHRhcmdldC5oYXNMaXN0ZW5lcih3cmFwcGVyTWFwLmdldChsaXN0ZW5lcikpO1xuICAgICAgICB9LFxuXG4gICAgICAgIHJlbW92ZUxpc3RlbmVyKHRhcmdldCwgbGlzdGVuZXIpIHtcbiAgICAgICAgICB0YXJnZXQucmVtb3ZlTGlzdGVuZXIod3JhcHBlck1hcC5nZXQobGlzdGVuZXIpKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG5cbiAgICAgIC8vIEtlZXAgdHJhY2sgaWYgdGhlIGRlcHJlY2F0aW9uIHdhcm5pbmcgaGFzIGJlZW4gbG9nZ2VkIGF0IGxlYXN0IG9uY2UuXG4gICAgICBsZXQgbG9nZ2VkU2VuZFJlc3BvbnNlRGVwcmVjYXRpb25XYXJuaW5nID0gZmFsc2U7XG5cbiAgICAgIGNvbnN0IG9uTWVzc2FnZVdyYXBwZXJzID0gbmV3IERlZmF1bHRXZWFrTWFwKGxpc3RlbmVyID0+IHtcbiAgICAgICAgaWYgKHR5cGVvZiBsaXN0ZW5lciAhPT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgICAgcmV0dXJuIGxpc3RlbmVyO1xuICAgICAgICB9XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIFdyYXBzIGEgbWVzc2FnZSBsaXN0ZW5lciBmdW5jdGlvbiBzbyB0aGF0IGl0IG1heSBzZW5kIHJlc3BvbnNlcyBiYXNlZCBvblxuICAgICAgICAgKiBpdHMgcmV0dXJuIHZhbHVlLCByYXRoZXIgdGhhbiBieSByZXR1cm5pbmcgYSBzZW50aW5lbCB2YWx1ZSBhbmQgY2FsbGluZyBhXG4gICAgICAgICAqIGNhbGxiYWNrLiBJZiB0aGUgbGlzdGVuZXIgZnVuY3Rpb24gcmV0dXJucyBhIFByb21pc2UsIHRoZSByZXNwb25zZSBpc1xuICAgICAgICAgKiBzZW50IHdoZW4gdGhlIHByb21pc2UgZWl0aGVyIHJlc29sdmVzIG9yIHJlamVjdHMuXG4gICAgICAgICAqXG4gICAgICAgICAqIEBwYXJhbSB7Kn0gbWVzc2FnZVxuICAgICAgICAgKiAgICAgICAgVGhlIG1lc3NhZ2Ugc2VudCBieSB0aGUgb3RoZXIgZW5kIG9mIHRoZSBjaGFubmVsLlxuICAgICAgICAgKiBAcGFyYW0ge29iamVjdH0gc2VuZGVyXG4gICAgICAgICAqICAgICAgICBEZXRhaWxzIGFib3V0IHRoZSBzZW5kZXIgb2YgdGhlIG1lc3NhZ2UuXG4gICAgICAgICAqIEBwYXJhbSB7ZnVuY3Rpb24oKil9IHNlbmRSZXNwb25zZVxuICAgICAgICAgKiAgICAgICAgQSBjYWxsYmFjayB3aGljaCwgd2hlbiBjYWxsZWQgd2l0aCBhbiBhcmJpdHJhcnkgYXJndW1lbnQsIHNlbmRzXG4gICAgICAgICAqICAgICAgICB0aGF0IHZhbHVlIGFzIGEgcmVzcG9uc2UuXG4gICAgICAgICAqIEByZXR1cm5zIHtib29sZWFufVxuICAgICAgICAgKiAgICAgICAgVHJ1ZSBpZiB0aGUgd3JhcHBlZCBsaXN0ZW5lciByZXR1cm5lZCBhIFByb21pc2UsIHdoaWNoIHdpbGwgbGF0ZXJcbiAgICAgICAgICogICAgICAgIHlpZWxkIGEgcmVzcG9uc2UuIEZhbHNlIG90aGVyd2lzZS5cbiAgICAgICAgICovXG4gICAgICAgIHJldHVybiBmdW5jdGlvbiBvbk1lc3NhZ2UobWVzc2FnZSwgc2VuZGVyLCBzZW5kUmVzcG9uc2UpIHtcbiAgICAgICAgICBsZXQgZGlkQ2FsbFNlbmRSZXNwb25zZSA9IGZhbHNlO1xuXG4gICAgICAgICAgbGV0IHdyYXBwZWRTZW5kUmVzcG9uc2U7XG4gICAgICAgICAgbGV0IHNlbmRSZXNwb25zZVByb21pc2UgPSBuZXcgUHJvbWlzZShyZXNvbHZlID0+IHtcbiAgICAgICAgICAgIHdyYXBwZWRTZW5kUmVzcG9uc2UgPSBmdW5jdGlvbiAocmVzcG9uc2UpIHtcbiAgICAgICAgICAgICAgaWYgKCFsb2dnZWRTZW5kUmVzcG9uc2VEZXByZWNhdGlvbldhcm5pbmcpIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oU0VORF9SRVNQT05TRV9ERVBSRUNBVElPTl9XQVJOSU5HLCBuZXcgRXJyb3IoKS5zdGFjayk7XG4gICAgICAgICAgICAgICAgbG9nZ2VkU2VuZFJlc3BvbnNlRGVwcmVjYXRpb25XYXJuaW5nID0gdHJ1ZTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBkaWRDYWxsU2VuZFJlc3BvbnNlID0gdHJ1ZTtcbiAgICAgICAgICAgICAgcmVzb2x2ZShyZXNwb25zZSk7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgbGV0IHJlc3VsdDtcbiAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgcmVzdWx0ID0gbGlzdGVuZXIobWVzc2FnZSwgc2VuZGVyLCB3cmFwcGVkU2VuZFJlc3BvbnNlKTtcbiAgICAgICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgIHJlc3VsdCA9IFByb21pc2UucmVqZWN0KGVycik7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgY29uc3QgaXNSZXN1bHRUaGVuYWJsZSA9IHJlc3VsdCAhPT0gdHJ1ZSAmJiBpc1RoZW5hYmxlKHJlc3VsdCk7XG5cbiAgICAgICAgICAvLyBJZiB0aGUgbGlzdGVuZXIgZGlkbid0IHJldHVybmVkIHRydWUgb3IgYSBQcm9taXNlLCBvciBjYWxsZWRcbiAgICAgICAgICAvLyB3cmFwcGVkU2VuZFJlc3BvbnNlIHN5bmNocm9ub3VzbHksIHdlIGNhbiBleGl0IGVhcmxpZXJcbiAgICAgICAgICAvLyBiZWNhdXNlIHRoZXJlIHdpbGwgYmUgbm8gcmVzcG9uc2Ugc2VudCBmcm9tIHRoaXMgbGlzdGVuZXIuXG4gICAgICAgICAgaWYgKHJlc3VsdCAhPT0gdHJ1ZSAmJiAhaXNSZXN1bHRUaGVuYWJsZSAmJiAhZGlkQ2FsbFNlbmRSZXNwb25zZSkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIC8vIEEgc21hbGwgaGVscGVyIHRvIHNlbmQgdGhlIG1lc3NhZ2UgaWYgdGhlIHByb21pc2UgcmVzb2x2ZXNcbiAgICAgICAgICAvLyBhbmQgYW4gZXJyb3IgaWYgdGhlIHByb21pc2UgcmVqZWN0cyAoYSB3cmFwcGVkIHNlbmRNZXNzYWdlIGhhc1xuICAgICAgICAgIC8vIHRvIHRyYW5zbGF0ZSB0aGUgbWVzc2FnZSBpbnRvIGEgcmVzb2x2ZWQgcHJvbWlzZSBvciBhIHJlamVjdGVkXG4gICAgICAgICAgLy8gcHJvbWlzZSkuXG4gICAgICAgICAgY29uc3Qgc2VuZFByb21pc2VkUmVzdWx0ID0gcHJvbWlzZSA9PiB7XG4gICAgICAgICAgICBwcm9taXNlLnRoZW4obXNnID0+IHtcbiAgICAgICAgICAgICAgLy8gc2VuZCB0aGUgbWVzc2FnZSB2YWx1ZS5cbiAgICAgICAgICAgICAgc2VuZFJlc3BvbnNlKG1zZyk7XG4gICAgICAgICAgICB9LCBlcnJvciA9PiB7XG4gICAgICAgICAgICAgIC8vIFNlbmQgYSBKU09OIHJlcHJlc2VudGF0aW9uIG9mIHRoZSBlcnJvciBpZiB0aGUgcmVqZWN0ZWQgdmFsdWVcbiAgICAgICAgICAgICAgLy8gaXMgYW4gaW5zdGFuY2Ugb2YgZXJyb3IsIG9yIHRoZSBvYmplY3QgaXRzZWxmIG90aGVyd2lzZS5cbiAgICAgICAgICAgICAgbGV0IG1lc3NhZ2U7XG4gICAgICAgICAgICAgIGlmIChlcnJvciAmJiAoZXJyb3IgaW5zdGFuY2VvZiBFcnJvciB8fCB0eXBlb2YgZXJyb3IubWVzc2FnZSA9PT0gXCJzdHJpbmdcIikpIHtcbiAgICAgICAgICAgICAgICBtZXNzYWdlID0gZXJyb3IubWVzc2FnZTtcbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBtZXNzYWdlID0gXCJBbiB1bmV4cGVjdGVkIGVycm9yIG9jY3VycmVkXCI7XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICBzZW5kUmVzcG9uc2Uoe1xuICAgICAgICAgICAgICAgIF9fbW96V2ViRXh0ZW5zaW9uUG9seWZpbGxSZWplY3RfXzogdHJ1ZSxcbiAgICAgICAgICAgICAgICBtZXNzYWdlXG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSkuY2F0Y2goZXJyID0+IHtcbiAgICAgICAgICAgICAgLy8gUHJpbnQgYW4gZXJyb3Igb24gdGhlIGNvbnNvbGUgaWYgdW5hYmxlIHRvIHNlbmQgdGhlIHJlc3BvbnNlLlxuICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKFwiRmFpbGVkIHRvIHNlbmQgb25NZXNzYWdlIHJlamVjdGVkIHJlcGx5XCIsIGVycik7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9O1xuXG4gICAgICAgICAgLy8gSWYgdGhlIGxpc3RlbmVyIHJldHVybmVkIGEgUHJvbWlzZSwgc2VuZCB0aGUgcmVzb2x2ZWQgdmFsdWUgYXMgYVxuICAgICAgICAgIC8vIHJlc3VsdCwgb3RoZXJ3aXNlIHdhaXQgdGhlIHByb21pc2UgcmVsYXRlZCB0byB0aGUgd3JhcHBlZFNlbmRSZXNwb25zZVxuICAgICAgICAgIC8vIGNhbGxiYWNrIHRvIHJlc29sdmUgYW5kIHNlbmQgaXQgYXMgYSByZXNwb25zZS5cbiAgICAgICAgICBpZiAoaXNSZXN1bHRUaGVuYWJsZSkge1xuICAgICAgICAgICAgc2VuZFByb21pc2VkUmVzdWx0KHJlc3VsdCk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHNlbmRQcm9taXNlZFJlc3VsdChzZW5kUmVzcG9uc2VQcm9taXNlKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICAvLyBMZXQgQ2hyb21lIGtub3cgdGhhdCB0aGUgbGlzdGVuZXIgaXMgcmVwbHlpbmcuXG4gICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH07XG4gICAgICB9KTtcblxuICAgICAgY29uc3Qgd3JhcHBlZFNlbmRNZXNzYWdlQ2FsbGJhY2sgPSAoeyByZWplY3QsIHJlc29sdmUgfSwgcmVwbHkpID0+IHtcbiAgICAgICAgaWYgKGV4dGVuc2lvbkFQSXMucnVudGltZS5sYXN0RXJyb3IpIHtcbiAgICAgICAgICAvLyBEZXRlY3Qgd2hlbiBub25lIG9mIHRoZSBsaXN0ZW5lcnMgcmVwbGllZCB0byB0aGUgc2VuZE1lc3NhZ2UgY2FsbCBhbmQgcmVzb2x2ZVxuICAgICAgICAgIC8vIHRoZSBwcm9taXNlIHRvIHVuZGVmaW5lZCBhcyBpbiBGaXJlZm94LlxuICAgICAgICAgIC8vIFNlZSBodHRwczovL2dpdGh1Yi5jb20vbW96aWxsYS93ZWJleHRlbnNpb24tcG9seWZpbGwvaXNzdWVzLzEzMFxuICAgICAgICAgIGlmIChleHRlbnNpb25BUElzLnJ1bnRpbWUubGFzdEVycm9yLm1lc3NhZ2UgPT09IENIUk9NRV9TRU5EX01FU1NBR0VfQ0FMTEJBQ0tfTk9fUkVTUE9OU0VfTUVTU0FHRSkge1xuICAgICAgICAgICAgcmVzb2x2ZSgpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZWplY3QoZXh0ZW5zaW9uQVBJcy5ydW50aW1lLmxhc3RFcnJvcik7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKHJlcGx5ICYmIHJlcGx5Ll9fbW96V2ViRXh0ZW5zaW9uUG9seWZpbGxSZWplY3RfXykge1xuICAgICAgICAgIC8vIENvbnZlcnQgYmFjayB0aGUgSlNPTiByZXByZXNlbnRhdGlvbiBvZiB0aGUgZXJyb3IgaW50b1xuICAgICAgICAgIC8vIGFuIEVycm9yIGluc3RhbmNlLlxuICAgICAgICAgIHJlamVjdChuZXcgRXJyb3IocmVwbHkubWVzc2FnZSkpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJlc29sdmUocmVwbHkpO1xuICAgICAgICB9XG4gICAgICB9O1xuXG4gICAgICBjb25zdCB3cmFwcGVkU2VuZE1lc3NhZ2UgPSAobmFtZSwgbWV0YWRhdGEsIGFwaU5hbWVzcGFjZU9iaiwgLi4uYXJncykgPT4ge1xuICAgICAgICBpZiAoYXJncy5sZW5ndGggPCBtZXRhZGF0YS5taW5BcmdzKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBFeHBlY3RlZCBhdCBsZWFzdCAke21ldGFkYXRhLm1pbkFyZ3N9ICR7cGx1cmFsaXplQXJndW1lbnRzKG1ldGFkYXRhLm1pbkFyZ3MpfSBmb3IgJHtuYW1lfSgpLCBnb3QgJHthcmdzLmxlbmd0aH1gKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChhcmdzLmxlbmd0aCA+IG1ldGFkYXRhLm1heEFyZ3MpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYEV4cGVjdGVkIGF0IG1vc3QgJHttZXRhZGF0YS5tYXhBcmdzfSAke3BsdXJhbGl6ZUFyZ3VtZW50cyhtZXRhZGF0YS5tYXhBcmdzKX0gZm9yICR7bmFtZX0oKSwgZ290ICR7YXJncy5sZW5ndGh9YCk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgICAgIGNvbnN0IHdyYXBwZWRDYiA9IHdyYXBwZWRTZW5kTWVzc2FnZUNhbGxiYWNrLmJpbmQobnVsbCwgeyByZXNvbHZlLCByZWplY3QgfSk7XG4gICAgICAgICAgYXJncy5wdXNoKHdyYXBwZWRDYik7XG4gICAgICAgICAgYXBpTmFtZXNwYWNlT2JqLnNlbmRNZXNzYWdlKC4uLmFyZ3MpO1xuICAgICAgICB9KTtcbiAgICAgIH07XG5cbiAgICAgIGNvbnN0IHN0YXRpY1dyYXBwZXJzID0ge1xuICAgICAgICBydW50aW1lOiB7XG4gICAgICAgICAgb25NZXNzYWdlOiB3cmFwRXZlbnQob25NZXNzYWdlV3JhcHBlcnMpLFxuICAgICAgICAgIG9uTWVzc2FnZUV4dGVybmFsOiB3cmFwRXZlbnQob25NZXNzYWdlV3JhcHBlcnMpLFxuICAgICAgICAgIHNlbmRNZXNzYWdlOiB3cmFwcGVkU2VuZE1lc3NhZ2UuYmluZChudWxsLCBcInNlbmRNZXNzYWdlXCIsIHsgbWluQXJnczogMSwgbWF4QXJnczogMyB9KVxuICAgICAgICB9LFxuICAgICAgICB0YWJzOiB7XG4gICAgICAgICAgc2VuZE1lc3NhZ2U6IHdyYXBwZWRTZW5kTWVzc2FnZS5iaW5kKG51bGwsIFwic2VuZE1lc3NhZ2VcIiwgeyBtaW5BcmdzOiAyLCBtYXhBcmdzOiAzIH0pXG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgICBjb25zdCBzZXR0aW5nTWV0YWRhdGEgPSB7XG4gICAgICAgIGNsZWFyOiB7IG1pbkFyZ3M6IDEsIG1heEFyZ3M6IDEgfSxcbiAgICAgICAgZ2V0OiB7IG1pbkFyZ3M6IDEsIG1heEFyZ3M6IDEgfSxcbiAgICAgICAgc2V0OiB7IG1pbkFyZ3M6IDEsIG1heEFyZ3M6IDEgfVxuICAgICAgfTtcbiAgICAgIGFwaU1ldGFkYXRhLnByaXZhY3kgPSB7XG4gICAgICAgIG5ldHdvcms6IHtcbiAgICAgICAgICBuZXR3b3JrUHJlZGljdGlvbkVuYWJsZWQ6IHNldHRpbmdNZXRhZGF0YSxcbiAgICAgICAgICB3ZWJSVENJUEhhbmRsaW5nUG9saWN5OiBzZXR0aW5nTWV0YWRhdGFcbiAgICAgICAgfSxcbiAgICAgICAgc2VydmljZXM6IHtcbiAgICAgICAgICBwYXNzd29yZFNhdmluZ0VuYWJsZWQ6IHNldHRpbmdNZXRhZGF0YVxuICAgICAgICB9LFxuICAgICAgICB3ZWJzaXRlczoge1xuICAgICAgICAgIGh5cGVybGlua0F1ZGl0aW5nRW5hYmxlZDogc2V0dGluZ01ldGFkYXRhLFxuICAgICAgICAgIHJlZmVycmVyc0VuYWJsZWQ6IHNldHRpbmdNZXRhZGF0YVxuICAgICAgICB9XG4gICAgICB9O1xuXG4gICAgICByZXR1cm4gd3JhcE9iamVjdChleHRlbnNpb25BUElzLCBzdGF0aWNXcmFwcGVycywgYXBpTWV0YWRhdGEpO1xuICAgIH07XG5cbiAgICBpZiAodHlwZW9mIGNocm9tZSAhPSBcIm9iamVjdFwiIHx8ICFjaHJvbWUgfHwgIWNocm9tZS5ydW50aW1lIHx8ICFjaHJvbWUucnVudGltZS5pZCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiVGhpcyBzY3JpcHQgc2hvdWxkIG9ubHkgYmUgbG9hZGVkIGluIGEgYnJvd3NlciBleHRlbnNpb24uXCIpO1xuICAgIH1cblxuICAgIC8vIFRoZSBidWlsZCBwcm9jZXNzIGFkZHMgYSBVTUQgd3JhcHBlciBhcm91bmQgdGhpcyBmaWxlLCB3aGljaCBtYWtlcyB0aGVcbiAgICAvLyBgbW9kdWxlYCB2YXJpYWJsZSBhdmFpbGFibGUuXG4gICAgbW9kdWxlLmV4cG9ydHMgPSB3cmFwQVBJcyhjaHJvbWUpO1xuICB9IGVsc2Uge1xuICAgIG1vZHVsZS5leHBvcnRzID0gYnJvd3NlcjtcbiAgfVxufSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1icm93c2VyLXBvbHlmaWxsLmpzLm1hcFxuIiwiLy8gaHR0cHM6Ly9naXRodWIuY29tL3psb2lyb2NrL2NvcmUtanMvaXNzdWVzLzg2I2lzc3VlY29tbWVudC0xMTU3NTkwMjhcbnZhciBnbG9iYWwgPSBtb2R1bGUuZXhwb3J0cyA9IHR5cGVvZiB3aW5kb3cgIT0gJ3VuZGVmaW5lZCcgJiYgd2luZG93Lk1hdGggPT0gTWF0aFxuICA/IHdpbmRvdyA6IHR5cGVvZiBzZWxmICE9ICd1bmRlZmluZWQnICYmIHNlbGYuTWF0aCA9PSBNYXRoID8gc2VsZlxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tbmV3LWZ1bmNcbiAgOiBGdW5jdGlvbigncmV0dXJuIHRoaXMnKSgpO1xuaWYgKHR5cGVvZiBfX2cgPT0gJ251bWJlcicpIF9fZyA9IGdsb2JhbDsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bmRlZlxuIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoZXhlYykge1xuICB0cnkge1xuICAgIHJldHVybiAhIWV4ZWMoKTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG59O1xuIiwidmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICBpZiAoIWlzT2JqZWN0KGl0KSkgdGhyb3cgVHlwZUVycm9yKGl0ICsgJyBpcyBub3QgYW4gb2JqZWN0IScpO1xuICByZXR1cm4gaXQ7XG59O1xuIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIHR5cGVvZiBpdCA9PT0gJ29iamVjdCcgPyBpdCAhPT0gbnVsbCA6IHR5cGVvZiBpdCA9PT0gJ2Z1bmN0aW9uJztcbn07XG4iLCJ2YXIgc3RvcmUgPSByZXF1aXJlKCcuL19zaGFyZWQnKSgnd2tzJyk7XG52YXIgdWlkID0gcmVxdWlyZSgnLi9fdWlkJyk7XG52YXIgU3ltYm9sID0gcmVxdWlyZSgnLi9fZ2xvYmFsJykuU3ltYm9sO1xudmFyIFVTRV9TWU1CT0wgPSB0eXBlb2YgU3ltYm9sID09ICdmdW5jdGlvbic7XG5cbnZhciAkZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgcmV0dXJuIHN0b3JlW25hbWVdIHx8IChzdG9yZVtuYW1lXSA9XG4gICAgVVNFX1NZTUJPTCAmJiBTeW1ib2xbbmFtZV0gfHwgKFVTRV9TWU1CT0wgPyBTeW1ib2wgOiB1aWQpKCdTeW1ib2wuJyArIG5hbWUpKTtcbn07XG5cbiRleHBvcnRzLnN0b3JlID0gc3RvcmU7XG4iLCIvLyA3LjEuMTUgVG9MZW5ndGhcbnZhciB0b0ludGVnZXIgPSByZXF1aXJlKCcuL190by1pbnRlZ2VyJyk7XG52YXIgbWluID0gTWF0aC5taW47XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gaXQgPiAwID8gbWluKHRvSW50ZWdlcihpdCksIDB4MWZmZmZmZmZmZmZmZmYpIDogMDsgLy8gcG93KDIsIDUzKSAtIDEgPT0gOTAwNzE5OTI1NDc0MDk5MVxufTtcbiIsInZhciBjb3JlID0gbW9kdWxlLmV4cG9ydHMgPSB7IHZlcnNpb246ICcyLjYuMTEnIH07XG5pZiAodHlwZW9mIF9fZSA9PSAnbnVtYmVyJykgX19lID0gY29yZTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bmRlZlxuIiwiLy8gVGhhbmsncyBJRTggZm9yIGhpcyBmdW5ueSBkZWZpbmVQcm9wZXJ0eVxubW9kdWxlLmV4cG9ydHMgPSAhcmVxdWlyZSgnLi9fZmFpbHMnKShmdW5jdGlvbiAoKSB7XG4gIHJldHVybiBPYmplY3QuZGVmaW5lUHJvcGVydHkoe30sICdhJywgeyBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIDc7IH0gfSkuYSAhPSA3O1xufSk7XG4iLCJ2YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciBJRThfRE9NX0RFRklORSA9IHJlcXVpcmUoJy4vX2llOC1kb20tZGVmaW5lJyk7XG52YXIgdG9QcmltaXRpdmUgPSByZXF1aXJlKCcuL190by1wcmltaXRpdmUnKTtcbnZhciBkUCA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eTtcblxuZXhwb3J0cy5mID0gcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKSA/IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSA6IGZ1bmN0aW9uIGRlZmluZVByb3BlcnR5KE8sIFAsIEF0dHJpYnV0ZXMpIHtcbiAgYW5PYmplY3QoTyk7XG4gIFAgPSB0b1ByaW1pdGl2ZShQLCB0cnVlKTtcbiAgYW5PYmplY3QoQXR0cmlidXRlcyk7XG4gIGlmIChJRThfRE9NX0RFRklORSkgdHJ5IHtcbiAgICByZXR1cm4gZFAoTywgUCwgQXR0cmlidXRlcyk7XG4gIH0gY2F0Y2ggKGUpIHsgLyogZW1wdHkgKi8gfVxuICBpZiAoJ2dldCcgaW4gQXR0cmlidXRlcyB8fCAnc2V0JyBpbiBBdHRyaWJ1dGVzKSB0aHJvdyBUeXBlRXJyb3IoJ0FjY2Vzc29ycyBub3Qgc3VwcG9ydGVkIScpO1xuICBpZiAoJ3ZhbHVlJyBpbiBBdHRyaWJ1dGVzKSBPW1BdID0gQXR0cmlidXRlcy52YWx1ZTtcbiAgcmV0dXJuIE87XG59O1xuIiwiLy8gNy4xLjEzIFRvT2JqZWN0KGFyZ3VtZW50KVxudmFyIGRlZmluZWQgPSByZXF1aXJlKCcuL19kZWZpbmVkJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gT2JqZWN0KGRlZmluZWQoaXQpKTtcbn07XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi9fZ2xvYmFsJyk7XG52YXIgaGlkZSA9IHJlcXVpcmUoJy4vX2hpZGUnKTtcbnZhciBoYXMgPSByZXF1aXJlKCcuL19oYXMnKTtcbnZhciBTUkMgPSByZXF1aXJlKCcuL191aWQnKSgnc3JjJyk7XG52YXIgJHRvU3RyaW5nID0gcmVxdWlyZSgnLi9fZnVuY3Rpb24tdG8tc3RyaW5nJyk7XG52YXIgVE9fU1RSSU5HID0gJ3RvU3RyaW5nJztcbnZhciBUUEwgPSAoJycgKyAkdG9TdHJpbmcpLnNwbGl0KFRPX1NUUklORyk7XG5cbnJlcXVpcmUoJy4vX2NvcmUnKS5pbnNwZWN0U291cmNlID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiAkdG9TdHJpbmcuY2FsbChpdCk7XG59O1xuXG4obW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoTywga2V5LCB2YWwsIHNhZmUpIHtcbiAgdmFyIGlzRnVuY3Rpb24gPSB0eXBlb2YgdmFsID09ICdmdW5jdGlvbic7XG4gIGlmIChpc0Z1bmN0aW9uKSBoYXModmFsLCAnbmFtZScpIHx8IGhpZGUodmFsLCAnbmFtZScsIGtleSk7XG4gIGlmIChPW2tleV0gPT09IHZhbCkgcmV0dXJuO1xuICBpZiAoaXNGdW5jdGlvbikgaGFzKHZhbCwgU1JDKSB8fCBoaWRlKHZhbCwgU1JDLCBPW2tleV0gPyAnJyArIE9ba2V5XSA6IFRQTC5qb2luKFN0cmluZyhrZXkpKSk7XG4gIGlmIChPID09PSBnbG9iYWwpIHtcbiAgICBPW2tleV0gPSB2YWw7XG4gIH0gZWxzZSBpZiAoIXNhZmUpIHtcbiAgICBkZWxldGUgT1trZXldO1xuICAgIGhpZGUoTywga2V5LCB2YWwpO1xuICB9IGVsc2UgaWYgKE9ba2V5XSkge1xuICAgIE9ba2V5XSA9IHZhbDtcbiAgfSBlbHNlIHtcbiAgICBoaWRlKE8sIGtleSwgdmFsKTtcbiAgfVxuLy8gYWRkIGZha2UgRnVuY3Rpb24jdG9TdHJpbmcgZm9yIGNvcnJlY3Qgd29yayB3cmFwcGVkIG1ldGhvZHMgLyBjb25zdHJ1Y3RvcnMgd2l0aCBtZXRob2RzIGxpa2UgTG9EYXNoIGlzTmF0aXZlXG59KShGdW5jdGlvbi5wcm90b3R5cGUsIFRPX1NUUklORywgZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gIHJldHVybiB0eXBlb2YgdGhpcyA9PSAnZnVuY3Rpb24nICYmIHRoaXNbU1JDXSB8fCAkdG9TdHJpbmcuY2FsbCh0aGlzKTtcbn0pO1xuIiwidmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4vX2ZhaWxzJyk7XG52YXIgZGVmaW5lZCA9IHJlcXVpcmUoJy4vX2RlZmluZWQnKTtcbnZhciBxdW90ID0gL1wiL2c7XG4vLyBCLjIuMy4yLjEgQ3JlYXRlSFRNTChzdHJpbmcsIHRhZywgYXR0cmlidXRlLCB2YWx1ZSlcbnZhciBjcmVhdGVIVE1MID0gZnVuY3Rpb24gKHN0cmluZywgdGFnLCBhdHRyaWJ1dGUsIHZhbHVlKSB7XG4gIHZhciBTID0gU3RyaW5nKGRlZmluZWQoc3RyaW5nKSk7XG4gIHZhciBwMSA9ICc8JyArIHRhZztcbiAgaWYgKGF0dHJpYnV0ZSAhPT0gJycpIHAxICs9ICcgJyArIGF0dHJpYnV0ZSArICc9XCInICsgU3RyaW5nKHZhbHVlKS5yZXBsYWNlKHF1b3QsICcmcXVvdDsnKSArICdcIic7XG4gIHJldHVybiBwMSArICc+JyArIFMgKyAnPC8nICsgdGFnICsgJz4nO1xufTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKE5BTUUsIGV4ZWMpIHtcbiAgdmFyIE8gPSB7fTtcbiAgT1tOQU1FXSA9IGV4ZWMoY3JlYXRlSFRNTCk7XG4gICRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogZmFpbHMoZnVuY3Rpb24gKCkge1xuICAgIHZhciB0ZXN0ID0gJydbTkFNRV0oJ1wiJyk7XG4gICAgcmV0dXJuIHRlc3QgIT09IHRlc3QudG9Mb3dlckNhc2UoKSB8fCB0ZXN0LnNwbGl0KCdcIicpLmxlbmd0aCA+IDM7XG4gIH0pLCAnU3RyaW5nJywgTyk7XG59O1xuIiwidmFyIGhhc093blByb3BlcnR5ID0ge30uaGFzT3duUHJvcGVydHk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCwga2V5KSB7XG4gIHJldHVybiBoYXNPd25Qcm9wZXJ0eS5jYWxsKGl0LCBrZXkpO1xufTtcbiIsInZhciBkUCA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpO1xudmFyIGNyZWF0ZURlc2MgPSByZXF1aXJlKCcuL19wcm9wZXJ0eS1kZXNjJyk7XG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJykgPyBmdW5jdGlvbiAob2JqZWN0LCBrZXksIHZhbHVlKSB7XG4gIHJldHVybiBkUC5mKG9iamVjdCwga2V5LCBjcmVhdGVEZXNjKDEsIHZhbHVlKSk7XG59IDogZnVuY3Rpb24gKG9iamVjdCwga2V5LCB2YWx1ZSkge1xuICBvYmplY3Rba2V5XSA9IHZhbHVlO1xuICByZXR1cm4gb2JqZWN0O1xufTtcbiIsIi8vIHRvIGluZGV4ZWQgb2JqZWN0LCB0b09iamVjdCB3aXRoIGZhbGxiYWNrIGZvciBub24tYXJyYXktbGlrZSBFUzMgc3RyaW5nc1xudmFyIElPYmplY3QgPSByZXF1aXJlKCcuL19pb2JqZWN0Jyk7XG52YXIgZGVmaW5lZCA9IHJlcXVpcmUoJy4vX2RlZmluZWQnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBJT2JqZWN0KGRlZmluZWQoaXQpKTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuL19mYWlscycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChtZXRob2QsIGFyZykge1xuICByZXR1cm4gISFtZXRob2QgJiYgZmFpbHMoZnVuY3Rpb24gKCkge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11c2VsZXNzLWNhbGxcbiAgICBhcmcgPyBtZXRob2QuY2FsbChudWxsLCBmdW5jdGlvbiAoKSB7IC8qIGVtcHR5ICovIH0sIDEpIDogbWV0aG9kLmNhbGwobnVsbCk7XG4gIH0pO1xufTtcbiIsIi8vIG9wdGlvbmFsIC8gc2ltcGxlIGNvbnRleHQgYmluZGluZ1xudmFyIGFGdW5jdGlvbiA9IHJlcXVpcmUoJy4vX2EtZnVuY3Rpb24nKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGZuLCB0aGF0LCBsZW5ndGgpIHtcbiAgYUZ1bmN0aW9uKGZuKTtcbiAgaWYgKHRoYXQgPT09IHVuZGVmaW5lZCkgcmV0dXJuIGZuO1xuICBzd2l0Y2ggKGxlbmd0aCkge1xuICAgIGNhc2UgMTogcmV0dXJuIGZ1bmN0aW9uIChhKSB7XG4gICAgICByZXR1cm4gZm4uY2FsbCh0aGF0LCBhKTtcbiAgICB9O1xuICAgIGNhc2UgMjogcmV0dXJuIGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgICByZXR1cm4gZm4uY2FsbCh0aGF0LCBhLCBiKTtcbiAgICB9O1xuICAgIGNhc2UgMzogcmV0dXJuIGZ1bmN0aW9uIChhLCBiLCBjKSB7XG4gICAgICByZXR1cm4gZm4uY2FsbCh0aGF0LCBhLCBiLCBjKTtcbiAgICB9O1xuICB9XG4gIHJldHVybiBmdW5jdGlvbiAoLyogLi4uYXJncyAqLykge1xuICAgIHJldHVybiBmbi5hcHBseSh0aGF0LCBhcmd1bWVudHMpO1xuICB9O1xufTtcbiIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIGlmICh0eXBlb2YgaXQgIT0gJ2Z1bmN0aW9uJykgdGhyb3cgVHlwZUVycm9yKGl0ICsgJyBpcyBub3QgYSBmdW5jdGlvbiEnKTtcbiAgcmV0dXJuIGl0O1xufTtcbiIsIi8vIDcuMS40IFRvSW50ZWdlclxudmFyIGNlaWwgPSBNYXRoLmNlaWw7XG52YXIgZmxvb3IgPSBNYXRoLmZsb29yO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIGlzTmFOKGl0ID0gK2l0KSA/IDAgOiAoaXQgPiAwID8gZmxvb3IgOiBjZWlsKShpdCk7XG59O1xuIiwidmFyIHBJRSA9IHJlcXVpcmUoJy4vX29iamVjdC1waWUnKTtcbnZhciBjcmVhdGVEZXNjID0gcmVxdWlyZSgnLi9fcHJvcGVydHktZGVzYycpO1xudmFyIHRvSU9iamVjdCA9IHJlcXVpcmUoJy4vX3RvLWlvYmplY3QnKTtcbnZhciB0b1ByaW1pdGl2ZSA9IHJlcXVpcmUoJy4vX3RvLXByaW1pdGl2ZScpO1xudmFyIGhhcyA9IHJlcXVpcmUoJy4vX2hhcycpO1xudmFyIElFOF9ET01fREVGSU5FID0gcmVxdWlyZSgnLi9faWU4LWRvbS1kZWZpbmUnKTtcbnZhciBnT1BEID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcjtcblxuZXhwb3J0cy5mID0gcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKSA/IGdPUEQgOiBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoTywgUCkge1xuICBPID0gdG9JT2JqZWN0KE8pO1xuICBQID0gdG9QcmltaXRpdmUoUCwgdHJ1ZSk7XG4gIGlmIChJRThfRE9NX0RFRklORSkgdHJ5IHtcbiAgICByZXR1cm4gZ09QRChPLCBQKTtcbiAgfSBjYXRjaCAoZSkgeyAvKiBlbXB0eSAqLyB9XG4gIGlmIChoYXMoTywgUCkpIHJldHVybiBjcmVhdGVEZXNjKCFwSUUuZi5jYWxsKE8sIFApLCBPW1BdKTtcbn07XG4iLCIvLyBtb3N0IE9iamVjdCBtZXRob2RzIGJ5IEVTNiBzaG91bGQgYWNjZXB0IHByaW1pdGl2ZXNcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgY29yZSA9IHJlcXVpcmUoJy4vX2NvcmUnKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4vX2ZhaWxzJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChLRVksIGV4ZWMpIHtcbiAgdmFyIGZuID0gKGNvcmUuT2JqZWN0IHx8IHt9KVtLRVldIHx8IE9iamVjdFtLRVldO1xuICB2YXIgZXhwID0ge307XG4gIGV4cFtLRVldID0gZXhlYyhmbik7XG4gICRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogZmFpbHMoZnVuY3Rpb24gKCkgeyBmbigxKTsgfSksICdPYmplY3QnLCBleHApO1xufTtcbiIsIi8vIDAgLT4gQXJyYXkjZm9yRWFjaFxuLy8gMSAtPiBBcnJheSNtYXBcbi8vIDIgLT4gQXJyYXkjZmlsdGVyXG4vLyAzIC0+IEFycmF5I3NvbWVcbi8vIDQgLT4gQXJyYXkjZXZlcnlcbi8vIDUgLT4gQXJyYXkjZmluZFxuLy8gNiAtPiBBcnJheSNmaW5kSW5kZXhcbnZhciBjdHggPSByZXF1aXJlKCcuL19jdHgnKTtcbnZhciBJT2JqZWN0ID0gcmVxdWlyZSgnLi9faW9iamVjdCcpO1xudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8tb2JqZWN0Jyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuL190by1sZW5ndGgnKTtcbnZhciBhc2MgPSByZXF1aXJlKCcuL19hcnJheS1zcGVjaWVzLWNyZWF0ZScpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoVFlQRSwgJGNyZWF0ZSkge1xuICB2YXIgSVNfTUFQID0gVFlQRSA9PSAxO1xuICB2YXIgSVNfRklMVEVSID0gVFlQRSA9PSAyO1xuICB2YXIgSVNfU09NRSA9IFRZUEUgPT0gMztcbiAgdmFyIElTX0VWRVJZID0gVFlQRSA9PSA0O1xuICB2YXIgSVNfRklORF9JTkRFWCA9IFRZUEUgPT0gNjtcbiAgdmFyIE5PX0hPTEVTID0gVFlQRSA9PSA1IHx8IElTX0ZJTkRfSU5ERVg7XG4gIHZhciBjcmVhdGUgPSAkY3JlYXRlIHx8IGFzYztcbiAgcmV0dXJuIGZ1bmN0aW9uICgkdGhpcywgY2FsbGJhY2tmbiwgdGhhdCkge1xuICAgIHZhciBPID0gdG9PYmplY3QoJHRoaXMpO1xuICAgIHZhciBzZWxmID0gSU9iamVjdChPKTtcbiAgICB2YXIgZiA9IGN0eChjYWxsYmFja2ZuLCB0aGF0LCAzKTtcbiAgICB2YXIgbGVuZ3RoID0gdG9MZW5ndGgoc2VsZi5sZW5ndGgpO1xuICAgIHZhciBpbmRleCA9IDA7XG4gICAgdmFyIHJlc3VsdCA9IElTX01BUCA/IGNyZWF0ZSgkdGhpcywgbGVuZ3RoKSA6IElTX0ZJTFRFUiA/IGNyZWF0ZSgkdGhpcywgMCkgOiB1bmRlZmluZWQ7XG4gICAgdmFyIHZhbCwgcmVzO1xuICAgIGZvciAoO2xlbmd0aCA+IGluZGV4OyBpbmRleCsrKSBpZiAoTk9fSE9MRVMgfHwgaW5kZXggaW4gc2VsZikge1xuICAgICAgdmFsID0gc2VsZltpbmRleF07XG4gICAgICByZXMgPSBmKHZhbCwgaW5kZXgsIE8pO1xuICAgICAgaWYgKFRZUEUpIHtcbiAgICAgICAgaWYgKElTX01BUCkgcmVzdWx0W2luZGV4XSA9IHJlczsgICAvLyBtYXBcbiAgICAgICAgZWxzZSBpZiAocmVzKSBzd2l0Y2ggKFRZUEUpIHtcbiAgICAgICAgICBjYXNlIDM6IHJldHVybiB0cnVlOyAgICAgICAgICAgICAvLyBzb21lXG4gICAgICAgICAgY2FzZSA1OiByZXR1cm4gdmFsOyAgICAgICAgICAgICAgLy8gZmluZFxuICAgICAgICAgIGNhc2UgNjogcmV0dXJuIGluZGV4OyAgICAgICAgICAgIC8vIGZpbmRJbmRleFxuICAgICAgICAgIGNhc2UgMjogcmVzdWx0LnB1c2godmFsKTsgICAgICAgIC8vIGZpbHRlclxuICAgICAgICB9IGVsc2UgaWYgKElTX0VWRVJZKSByZXR1cm4gZmFsc2U7IC8vIGV2ZXJ5XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBJU19GSU5EX0lOREVYID8gLTEgOiBJU19TT01FIHx8IElTX0VWRVJZID8gSVNfRVZFUlkgOiByZXN1bHQ7XG4gIH07XG59O1xuIiwidmFyIHRvU3RyaW5nID0ge30udG9TdHJpbmc7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiB0b1N0cmluZy5jYWxsKGl0KS5zbGljZSg4LCAtMSk7XG59O1xuIiwiLy8gNy4yLjEgUmVxdWlyZU9iamVjdENvZXJjaWJsZShhcmd1bWVudClcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIGlmIChpdCA9PSB1bmRlZmluZWQpIHRocm93IFR5cGVFcnJvcihcIkNhbid0IGNhbGwgbWV0aG9kIG9uICBcIiArIGl0KTtcbiAgcmV0dXJuIGl0O1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbmlmIChyZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpKSB7XG4gIHZhciBMSUJSQVJZID0gcmVxdWlyZSgnLi9fbGlicmFyeScpO1xuICB2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi9fZ2xvYmFsJyk7XG4gIHZhciBmYWlscyA9IHJlcXVpcmUoJy4vX2ZhaWxzJyk7XG4gIHZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG4gIHZhciAkdHlwZWQgPSByZXF1aXJlKCcuL190eXBlZCcpO1xuICB2YXIgJGJ1ZmZlciA9IHJlcXVpcmUoJy4vX3R5cGVkLWJ1ZmZlcicpO1xuICB2YXIgY3R4ID0gcmVxdWlyZSgnLi9fY3R4Jyk7XG4gIHZhciBhbkluc3RhbmNlID0gcmVxdWlyZSgnLi9fYW4taW5zdGFuY2UnKTtcbiAgdmFyIHByb3BlcnR5RGVzYyA9IHJlcXVpcmUoJy4vX3Byb3BlcnR5LWRlc2MnKTtcbiAgdmFyIGhpZGUgPSByZXF1aXJlKCcuL19oaWRlJyk7XG4gIHZhciByZWRlZmluZUFsbCA9IHJlcXVpcmUoJy4vX3JlZGVmaW5lLWFsbCcpO1xuICB2YXIgdG9JbnRlZ2VyID0gcmVxdWlyZSgnLi9fdG8taW50ZWdlcicpO1xuICB2YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuL190by1sZW5ndGgnKTtcbiAgdmFyIHRvSW5kZXggPSByZXF1aXJlKCcuL190by1pbmRleCcpO1xuICB2YXIgdG9BYnNvbHV0ZUluZGV4ID0gcmVxdWlyZSgnLi9fdG8tYWJzb2x1dGUtaW5kZXgnKTtcbiAgdmFyIHRvUHJpbWl0aXZlID0gcmVxdWlyZSgnLi9fdG8tcHJpbWl0aXZlJyk7XG4gIHZhciBoYXMgPSByZXF1aXJlKCcuL19oYXMnKTtcbiAgdmFyIGNsYXNzb2YgPSByZXF1aXJlKCcuL19jbGFzc29mJyk7XG4gIHZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xuICB2YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuL190by1vYmplY3QnKTtcbiAgdmFyIGlzQXJyYXlJdGVyID0gcmVxdWlyZSgnLi9faXMtYXJyYXktaXRlcicpO1xuICB2YXIgY3JlYXRlID0gcmVxdWlyZSgnLi9fb2JqZWN0LWNyZWF0ZScpO1xuICB2YXIgZ2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKCcuL19vYmplY3QtZ3BvJyk7XG4gIHZhciBnT1BOID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcG4nKS5mO1xuICB2YXIgZ2V0SXRlckZuID0gcmVxdWlyZSgnLi9jb3JlLmdldC1pdGVyYXRvci1tZXRob2QnKTtcbiAgdmFyIHVpZCA9IHJlcXVpcmUoJy4vX3VpZCcpO1xuICB2YXIgd2tzID0gcmVxdWlyZSgnLi9fd2tzJyk7XG4gIHZhciBjcmVhdGVBcnJheU1ldGhvZCA9IHJlcXVpcmUoJy4vX2FycmF5LW1ldGhvZHMnKTtcbiAgdmFyIGNyZWF0ZUFycmF5SW5jbHVkZXMgPSByZXF1aXJlKCcuL19hcnJheS1pbmNsdWRlcycpO1xuICB2YXIgc3BlY2llc0NvbnN0cnVjdG9yID0gcmVxdWlyZSgnLi9fc3BlY2llcy1jb25zdHJ1Y3RvcicpO1xuICB2YXIgQXJyYXlJdGVyYXRvcnMgPSByZXF1aXJlKCcuL2VzNi5hcnJheS5pdGVyYXRvcicpO1xuICB2YXIgSXRlcmF0b3JzID0gcmVxdWlyZSgnLi9faXRlcmF0b3JzJyk7XG4gIHZhciAkaXRlckRldGVjdCA9IHJlcXVpcmUoJy4vX2l0ZXItZGV0ZWN0Jyk7XG4gIHZhciBzZXRTcGVjaWVzID0gcmVxdWlyZSgnLi9fc2V0LXNwZWNpZXMnKTtcbiAgdmFyIGFycmF5RmlsbCA9IHJlcXVpcmUoJy4vX2FycmF5LWZpbGwnKTtcbiAgdmFyIGFycmF5Q29weVdpdGhpbiA9IHJlcXVpcmUoJy4vX2FycmF5LWNvcHktd2l0aGluJyk7XG4gIHZhciAkRFAgPSByZXF1aXJlKCcuL19vYmplY3QtZHAnKTtcbiAgdmFyICRHT1BEID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcGQnKTtcbiAgdmFyIGRQID0gJERQLmY7XG4gIHZhciBnT1BEID0gJEdPUEQuZjtcbiAgdmFyIFJhbmdlRXJyb3IgPSBnbG9iYWwuUmFuZ2VFcnJvcjtcbiAgdmFyIFR5cGVFcnJvciA9IGdsb2JhbC5UeXBlRXJyb3I7XG4gIHZhciBVaW50OEFycmF5ID0gZ2xvYmFsLlVpbnQ4QXJyYXk7XG4gIHZhciBBUlJBWV9CVUZGRVIgPSAnQXJyYXlCdWZmZXInO1xuICB2YXIgU0hBUkVEX0JVRkZFUiA9ICdTaGFyZWQnICsgQVJSQVlfQlVGRkVSO1xuICB2YXIgQllURVNfUEVSX0VMRU1FTlQgPSAnQllURVNfUEVSX0VMRU1FTlQnO1xuICB2YXIgUFJPVE9UWVBFID0gJ3Byb3RvdHlwZSc7XG4gIHZhciBBcnJheVByb3RvID0gQXJyYXlbUFJPVE9UWVBFXTtcbiAgdmFyICRBcnJheUJ1ZmZlciA9ICRidWZmZXIuQXJyYXlCdWZmZXI7XG4gIHZhciAkRGF0YVZpZXcgPSAkYnVmZmVyLkRhdGFWaWV3O1xuICB2YXIgYXJyYXlGb3JFYWNoID0gY3JlYXRlQXJyYXlNZXRob2QoMCk7XG4gIHZhciBhcnJheUZpbHRlciA9IGNyZWF0ZUFycmF5TWV0aG9kKDIpO1xuICB2YXIgYXJyYXlTb21lID0gY3JlYXRlQXJyYXlNZXRob2QoMyk7XG4gIHZhciBhcnJheUV2ZXJ5ID0gY3JlYXRlQXJyYXlNZXRob2QoNCk7XG4gIHZhciBhcnJheUZpbmQgPSBjcmVhdGVBcnJheU1ldGhvZCg1KTtcbiAgdmFyIGFycmF5RmluZEluZGV4ID0gY3JlYXRlQXJyYXlNZXRob2QoNik7XG4gIHZhciBhcnJheUluY2x1ZGVzID0gY3JlYXRlQXJyYXlJbmNsdWRlcyh0cnVlKTtcbiAgdmFyIGFycmF5SW5kZXhPZiA9IGNyZWF0ZUFycmF5SW5jbHVkZXMoZmFsc2UpO1xuICB2YXIgYXJyYXlWYWx1ZXMgPSBBcnJheUl0ZXJhdG9ycy52YWx1ZXM7XG4gIHZhciBhcnJheUtleXMgPSBBcnJheUl0ZXJhdG9ycy5rZXlzO1xuICB2YXIgYXJyYXlFbnRyaWVzID0gQXJyYXlJdGVyYXRvcnMuZW50cmllcztcbiAgdmFyIGFycmF5TGFzdEluZGV4T2YgPSBBcnJheVByb3RvLmxhc3RJbmRleE9mO1xuICB2YXIgYXJyYXlSZWR1Y2UgPSBBcnJheVByb3RvLnJlZHVjZTtcbiAgdmFyIGFycmF5UmVkdWNlUmlnaHQgPSBBcnJheVByb3RvLnJlZHVjZVJpZ2h0O1xuICB2YXIgYXJyYXlKb2luID0gQXJyYXlQcm90by5qb2luO1xuICB2YXIgYXJyYXlTb3J0ID0gQXJyYXlQcm90by5zb3J0O1xuICB2YXIgYXJyYXlTbGljZSA9IEFycmF5UHJvdG8uc2xpY2U7XG4gIHZhciBhcnJheVRvU3RyaW5nID0gQXJyYXlQcm90by50b1N0cmluZztcbiAgdmFyIGFycmF5VG9Mb2NhbGVTdHJpbmcgPSBBcnJheVByb3RvLnRvTG9jYWxlU3RyaW5nO1xuICB2YXIgSVRFUkFUT1IgPSB3a3MoJ2l0ZXJhdG9yJyk7XG4gIHZhciBUQUcgPSB3a3MoJ3RvU3RyaW5nVGFnJyk7XG4gIHZhciBUWVBFRF9DT05TVFJVQ1RPUiA9IHVpZCgndHlwZWRfY29uc3RydWN0b3InKTtcbiAgdmFyIERFRl9DT05TVFJVQ1RPUiA9IHVpZCgnZGVmX2NvbnN0cnVjdG9yJyk7XG4gIHZhciBBTExfQ09OU1RSVUNUT1JTID0gJHR5cGVkLkNPTlNUUjtcbiAgdmFyIFRZUEVEX0FSUkFZID0gJHR5cGVkLlRZUEVEO1xuICB2YXIgVklFVyA9ICR0eXBlZC5WSUVXO1xuICB2YXIgV1JPTkdfTEVOR1RIID0gJ1dyb25nIGxlbmd0aCEnO1xuXG4gIHZhciAkbWFwID0gY3JlYXRlQXJyYXlNZXRob2QoMSwgZnVuY3Rpb24gKE8sIGxlbmd0aCkge1xuICAgIHJldHVybiBhbGxvY2F0ZShzcGVjaWVzQ29uc3RydWN0b3IoTywgT1tERUZfQ09OU1RSVUNUT1JdKSwgbGVuZ3RoKTtcbiAgfSk7XG5cbiAgdmFyIExJVFRMRV9FTkRJQU4gPSBmYWlscyhmdW5jdGlvbiAoKSB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVuZGVmXG4gICAgcmV0dXJuIG5ldyBVaW50OEFycmF5KG5ldyBVaW50MTZBcnJheShbMV0pLmJ1ZmZlcilbMF0gPT09IDE7XG4gIH0pO1xuXG4gIHZhciBGT1JDRURfU0VUID0gISFVaW50OEFycmF5ICYmICEhVWludDhBcnJheVtQUk9UT1RZUEVdLnNldCAmJiBmYWlscyhmdW5jdGlvbiAoKSB7XG4gICAgbmV3IFVpbnQ4QXJyYXkoMSkuc2V0KHt9KTtcbiAgfSk7XG5cbiAgdmFyIHRvT2Zmc2V0ID0gZnVuY3Rpb24gKGl0LCBCWVRFUykge1xuICAgIHZhciBvZmZzZXQgPSB0b0ludGVnZXIoaXQpO1xuICAgIGlmIChvZmZzZXQgPCAwIHx8IG9mZnNldCAlIEJZVEVTKSB0aHJvdyBSYW5nZUVycm9yKCdXcm9uZyBvZmZzZXQhJyk7XG4gICAgcmV0dXJuIG9mZnNldDtcbiAgfTtcblxuICB2YXIgdmFsaWRhdGUgPSBmdW5jdGlvbiAoaXQpIHtcbiAgICBpZiAoaXNPYmplY3QoaXQpICYmIFRZUEVEX0FSUkFZIGluIGl0KSByZXR1cm4gaXQ7XG4gICAgdGhyb3cgVHlwZUVycm9yKGl0ICsgJyBpcyBub3QgYSB0eXBlZCBhcnJheSEnKTtcbiAgfTtcblxuICB2YXIgYWxsb2NhdGUgPSBmdW5jdGlvbiAoQywgbGVuZ3RoKSB7XG4gICAgaWYgKCEoaXNPYmplY3QoQykgJiYgVFlQRURfQ09OU1RSVUNUT1IgaW4gQykpIHtcbiAgICAgIHRocm93IFR5cGVFcnJvcignSXQgaXMgbm90IGEgdHlwZWQgYXJyYXkgY29uc3RydWN0b3IhJyk7XG4gICAgfSByZXR1cm4gbmV3IEMobGVuZ3RoKTtcbiAgfTtcblxuICB2YXIgc3BlY2llc0Zyb21MaXN0ID0gZnVuY3Rpb24gKE8sIGxpc3QpIHtcbiAgICByZXR1cm4gZnJvbUxpc3Qoc3BlY2llc0NvbnN0cnVjdG9yKE8sIE9bREVGX0NPTlNUUlVDVE9SXSksIGxpc3QpO1xuICB9O1xuXG4gIHZhciBmcm9tTGlzdCA9IGZ1bmN0aW9uIChDLCBsaXN0KSB7XG4gICAgdmFyIGluZGV4ID0gMDtcbiAgICB2YXIgbGVuZ3RoID0gbGlzdC5sZW5ndGg7XG4gICAgdmFyIHJlc3VsdCA9IGFsbG9jYXRlKEMsIGxlbmd0aCk7XG4gICAgd2hpbGUgKGxlbmd0aCA+IGluZGV4KSByZXN1bHRbaW5kZXhdID0gbGlzdFtpbmRleCsrXTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9O1xuXG4gIHZhciBhZGRHZXR0ZXIgPSBmdW5jdGlvbiAoaXQsIGtleSwgaW50ZXJuYWwpIHtcbiAgICBkUChpdCwga2V5LCB7IGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpcy5fZFtpbnRlcm5hbF07IH0gfSk7XG4gIH07XG5cbiAgdmFyICRmcm9tID0gZnVuY3Rpb24gZnJvbShzb3VyY2UgLyogLCBtYXBmbiwgdGhpc0FyZyAqLykge1xuICAgIHZhciBPID0gdG9PYmplY3Qoc291cmNlKTtcbiAgICB2YXIgYUxlbiA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gICAgdmFyIG1hcGZuID0gYUxlbiA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQ7XG4gICAgdmFyIG1hcHBpbmcgPSBtYXBmbiAhPT0gdW5kZWZpbmVkO1xuICAgIHZhciBpdGVyRm4gPSBnZXRJdGVyRm4oTyk7XG4gICAgdmFyIGksIGxlbmd0aCwgdmFsdWVzLCByZXN1bHQsIHN0ZXAsIGl0ZXJhdG9yO1xuICAgIGlmIChpdGVyRm4gIT0gdW5kZWZpbmVkICYmICFpc0FycmF5SXRlcihpdGVyRm4pKSB7XG4gICAgICBmb3IgKGl0ZXJhdG9yID0gaXRlckZuLmNhbGwoTyksIHZhbHVlcyA9IFtdLCBpID0gMDsgIShzdGVwID0gaXRlcmF0b3IubmV4dCgpKS5kb25lOyBpKyspIHtcbiAgICAgICAgdmFsdWVzLnB1c2goc3RlcC52YWx1ZSk7XG4gICAgICB9IE8gPSB2YWx1ZXM7XG4gICAgfVxuICAgIGlmIChtYXBwaW5nICYmIGFMZW4gPiAyKSBtYXBmbiA9IGN0eChtYXBmbiwgYXJndW1lbnRzWzJdLCAyKTtcbiAgICBmb3IgKGkgPSAwLCBsZW5ndGggPSB0b0xlbmd0aChPLmxlbmd0aCksIHJlc3VsdCA9IGFsbG9jYXRlKHRoaXMsIGxlbmd0aCk7IGxlbmd0aCA+IGk7IGkrKykge1xuICAgICAgcmVzdWx0W2ldID0gbWFwcGluZyA/IG1hcGZuKE9baV0sIGkpIDogT1tpXTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfTtcblxuICB2YXIgJG9mID0gZnVuY3Rpb24gb2YoLyogLi4uaXRlbXMgKi8pIHtcbiAgICB2YXIgaW5kZXggPSAwO1xuICAgIHZhciBsZW5ndGggPSBhcmd1bWVudHMubGVuZ3RoO1xuICAgIHZhciByZXN1bHQgPSBhbGxvY2F0ZSh0aGlzLCBsZW5ndGgpO1xuICAgIHdoaWxlIChsZW5ndGggPiBpbmRleCkgcmVzdWx0W2luZGV4XSA9IGFyZ3VtZW50c1tpbmRleCsrXTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9O1xuXG4gIC8vIGlPUyBTYWZhcmkgNi54IGZhaWxzIGhlcmVcbiAgdmFyIFRPX0xPQ0FMRV9CVUcgPSAhIVVpbnQ4QXJyYXkgJiYgZmFpbHMoZnVuY3Rpb24gKCkgeyBhcnJheVRvTG9jYWxlU3RyaW5nLmNhbGwobmV3IFVpbnQ4QXJyYXkoMSkpOyB9KTtcblxuICB2YXIgJHRvTG9jYWxlU3RyaW5nID0gZnVuY3Rpb24gdG9Mb2NhbGVTdHJpbmcoKSB7XG4gICAgcmV0dXJuIGFycmF5VG9Mb2NhbGVTdHJpbmcuYXBwbHkoVE9fTE9DQUxFX0JVRyA/IGFycmF5U2xpY2UuY2FsbCh2YWxpZGF0ZSh0aGlzKSkgOiB2YWxpZGF0ZSh0aGlzKSwgYXJndW1lbnRzKTtcbiAgfTtcblxuICB2YXIgcHJvdG8gPSB7XG4gICAgY29weVdpdGhpbjogZnVuY3Rpb24gY29weVdpdGhpbih0YXJnZXQsIHN0YXJ0IC8qICwgZW5kICovKSB7XG4gICAgICByZXR1cm4gYXJyYXlDb3B5V2l0aGluLmNhbGwodmFsaWRhdGUodGhpcyksIHRhcmdldCwgc3RhcnQsIGFyZ3VtZW50cy5sZW5ndGggPiAyID8gYXJndW1lbnRzWzJdIDogdW5kZWZpbmVkKTtcbiAgICB9LFxuICAgIGV2ZXJ5OiBmdW5jdGlvbiBldmVyeShjYWxsYmFja2ZuIC8qICwgdGhpc0FyZyAqLykge1xuICAgICAgcmV0dXJuIGFycmF5RXZlcnkodmFsaWRhdGUodGhpcyksIGNhbGxiYWNrZm4sIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKTtcbiAgICB9LFxuICAgIGZpbGw6IGZ1bmN0aW9uIGZpbGwodmFsdWUgLyogLCBzdGFydCwgZW5kICovKSB7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW51c2VkLXZhcnNcbiAgICAgIHJldHVybiBhcnJheUZpbGwuYXBwbHkodmFsaWRhdGUodGhpcyksIGFyZ3VtZW50cyk7XG4gICAgfSxcbiAgICBmaWx0ZXI6IGZ1bmN0aW9uIGZpbHRlcihjYWxsYmFja2ZuIC8qICwgdGhpc0FyZyAqLykge1xuICAgICAgcmV0dXJuIHNwZWNpZXNGcm9tTGlzdCh0aGlzLCBhcnJheUZpbHRlcih2YWxpZGF0ZSh0aGlzKSwgY2FsbGJhY2tmbixcbiAgICAgICAgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpKTtcbiAgICB9LFxuICAgIGZpbmQ6IGZ1bmN0aW9uIGZpbmQocHJlZGljYXRlIC8qICwgdGhpc0FyZyAqLykge1xuICAgICAgcmV0dXJuIGFycmF5RmluZCh2YWxpZGF0ZSh0aGlzKSwgcHJlZGljYXRlLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCk7XG4gICAgfSxcbiAgICBmaW5kSW5kZXg6IGZ1bmN0aW9uIGZpbmRJbmRleChwcmVkaWNhdGUgLyogLCB0aGlzQXJnICovKSB7XG4gICAgICByZXR1cm4gYXJyYXlGaW5kSW5kZXgodmFsaWRhdGUodGhpcyksIHByZWRpY2F0ZSwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpO1xuICAgIH0sXG4gICAgZm9yRWFjaDogZnVuY3Rpb24gZm9yRWFjaChjYWxsYmFja2ZuIC8qICwgdGhpc0FyZyAqLykge1xuICAgICAgYXJyYXlGb3JFYWNoKHZhbGlkYXRlKHRoaXMpLCBjYWxsYmFja2ZuLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCk7XG4gICAgfSxcbiAgICBpbmRleE9mOiBmdW5jdGlvbiBpbmRleE9mKHNlYXJjaEVsZW1lbnQgLyogLCBmcm9tSW5kZXggKi8pIHtcbiAgICAgIHJldHVybiBhcnJheUluZGV4T2YodmFsaWRhdGUodGhpcyksIHNlYXJjaEVsZW1lbnQsIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKTtcbiAgICB9LFxuICAgIGluY2x1ZGVzOiBmdW5jdGlvbiBpbmNsdWRlcyhzZWFyY2hFbGVtZW50IC8qICwgZnJvbUluZGV4ICovKSB7XG4gICAgICByZXR1cm4gYXJyYXlJbmNsdWRlcyh2YWxpZGF0ZSh0aGlzKSwgc2VhcmNoRWxlbWVudCwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpO1xuICAgIH0sXG4gICAgam9pbjogZnVuY3Rpb24gam9pbihzZXBhcmF0b3IpIHsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bnVzZWQtdmFyc1xuICAgICAgcmV0dXJuIGFycmF5Sm9pbi5hcHBseSh2YWxpZGF0ZSh0aGlzKSwgYXJndW1lbnRzKTtcbiAgICB9LFxuICAgIGxhc3RJbmRleE9mOiBmdW5jdGlvbiBsYXN0SW5kZXhPZihzZWFyY2hFbGVtZW50IC8qICwgZnJvbUluZGV4ICovKSB7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW51c2VkLXZhcnNcbiAgICAgIHJldHVybiBhcnJheUxhc3RJbmRleE9mLmFwcGx5KHZhbGlkYXRlKHRoaXMpLCBhcmd1bWVudHMpO1xuICAgIH0sXG4gICAgbWFwOiBmdW5jdGlvbiBtYXAobWFwZm4gLyogLCB0aGlzQXJnICovKSB7XG4gICAgICByZXR1cm4gJG1hcCh2YWxpZGF0ZSh0aGlzKSwgbWFwZm4sIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKTtcbiAgICB9LFxuICAgIHJlZHVjZTogZnVuY3Rpb24gcmVkdWNlKGNhbGxiYWNrZm4gLyogLCBpbml0aWFsVmFsdWUgKi8pIHsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bnVzZWQtdmFyc1xuICAgICAgcmV0dXJuIGFycmF5UmVkdWNlLmFwcGx5KHZhbGlkYXRlKHRoaXMpLCBhcmd1bWVudHMpO1xuICAgIH0sXG4gICAgcmVkdWNlUmlnaHQ6IGZ1bmN0aW9uIHJlZHVjZVJpZ2h0KGNhbGxiYWNrZm4gLyogLCBpbml0aWFsVmFsdWUgKi8pIHsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bnVzZWQtdmFyc1xuICAgICAgcmV0dXJuIGFycmF5UmVkdWNlUmlnaHQuYXBwbHkodmFsaWRhdGUodGhpcyksIGFyZ3VtZW50cyk7XG4gICAgfSxcbiAgICByZXZlcnNlOiBmdW5jdGlvbiByZXZlcnNlKCkge1xuICAgICAgdmFyIHRoYXQgPSB0aGlzO1xuICAgICAgdmFyIGxlbmd0aCA9IHZhbGlkYXRlKHRoYXQpLmxlbmd0aDtcbiAgICAgIHZhciBtaWRkbGUgPSBNYXRoLmZsb29yKGxlbmd0aCAvIDIpO1xuICAgICAgdmFyIGluZGV4ID0gMDtcbiAgICAgIHZhciB2YWx1ZTtcbiAgICAgIHdoaWxlIChpbmRleCA8IG1pZGRsZSkge1xuICAgICAgICB2YWx1ZSA9IHRoYXRbaW5kZXhdO1xuICAgICAgICB0aGF0W2luZGV4KytdID0gdGhhdFstLWxlbmd0aF07XG4gICAgICAgIHRoYXRbbGVuZ3RoXSA9IHZhbHVlO1xuICAgICAgfSByZXR1cm4gdGhhdDtcbiAgICB9LFxuICAgIHNvbWU6IGZ1bmN0aW9uIHNvbWUoY2FsbGJhY2tmbiAvKiAsIHRoaXNBcmcgKi8pIHtcbiAgICAgIHJldHVybiBhcnJheVNvbWUodmFsaWRhdGUodGhpcyksIGNhbGxiYWNrZm4sIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKTtcbiAgICB9LFxuICAgIHNvcnQ6IGZ1bmN0aW9uIHNvcnQoY29tcGFyZWZuKSB7XG4gICAgICByZXR1cm4gYXJyYXlTb3J0LmNhbGwodmFsaWRhdGUodGhpcyksIGNvbXBhcmVmbik7XG4gICAgfSxcbiAgICBzdWJhcnJheTogZnVuY3Rpb24gc3ViYXJyYXkoYmVnaW4sIGVuZCkge1xuICAgICAgdmFyIE8gPSB2YWxpZGF0ZSh0aGlzKTtcbiAgICAgIHZhciBsZW5ndGggPSBPLmxlbmd0aDtcbiAgICAgIHZhciAkYmVnaW4gPSB0b0Fic29sdXRlSW5kZXgoYmVnaW4sIGxlbmd0aCk7XG4gICAgICByZXR1cm4gbmV3IChzcGVjaWVzQ29uc3RydWN0b3IoTywgT1tERUZfQ09OU1RSVUNUT1JdKSkoXG4gICAgICAgIE8uYnVmZmVyLFxuICAgICAgICBPLmJ5dGVPZmZzZXQgKyAkYmVnaW4gKiBPLkJZVEVTX1BFUl9FTEVNRU5ULFxuICAgICAgICB0b0xlbmd0aCgoZW5kID09PSB1bmRlZmluZWQgPyBsZW5ndGggOiB0b0Fic29sdXRlSW5kZXgoZW5kLCBsZW5ndGgpKSAtICRiZWdpbilcbiAgICAgICk7XG4gICAgfVxuICB9O1xuXG4gIHZhciAkc2xpY2UgPSBmdW5jdGlvbiBzbGljZShzdGFydCwgZW5kKSB7XG4gICAgcmV0dXJuIHNwZWNpZXNGcm9tTGlzdCh0aGlzLCBhcnJheVNsaWNlLmNhbGwodmFsaWRhdGUodGhpcyksIHN0YXJ0LCBlbmQpKTtcbiAgfTtcblxuICB2YXIgJHNldCA9IGZ1bmN0aW9uIHNldChhcnJheUxpa2UgLyogLCBvZmZzZXQgKi8pIHtcbiAgICB2YWxpZGF0ZSh0aGlzKTtcbiAgICB2YXIgb2Zmc2V0ID0gdG9PZmZzZXQoYXJndW1lbnRzWzFdLCAxKTtcbiAgICB2YXIgbGVuZ3RoID0gdGhpcy5sZW5ndGg7XG4gICAgdmFyIHNyYyA9IHRvT2JqZWN0KGFycmF5TGlrZSk7XG4gICAgdmFyIGxlbiA9IHRvTGVuZ3RoKHNyYy5sZW5ndGgpO1xuICAgIHZhciBpbmRleCA9IDA7XG4gICAgaWYgKGxlbiArIG9mZnNldCA+IGxlbmd0aCkgdGhyb3cgUmFuZ2VFcnJvcihXUk9OR19MRU5HVEgpO1xuICAgIHdoaWxlIChpbmRleCA8IGxlbikgdGhpc1tvZmZzZXQgKyBpbmRleF0gPSBzcmNbaW5kZXgrK107XG4gIH07XG5cbiAgdmFyICRpdGVyYXRvcnMgPSB7XG4gICAgZW50cmllczogZnVuY3Rpb24gZW50cmllcygpIHtcbiAgICAgIHJldHVybiBhcnJheUVudHJpZXMuY2FsbCh2YWxpZGF0ZSh0aGlzKSk7XG4gICAgfSxcbiAgICBrZXlzOiBmdW5jdGlvbiBrZXlzKCkge1xuICAgICAgcmV0dXJuIGFycmF5S2V5cy5jYWxsKHZhbGlkYXRlKHRoaXMpKTtcbiAgICB9LFxuICAgIHZhbHVlczogZnVuY3Rpb24gdmFsdWVzKCkge1xuICAgICAgcmV0dXJuIGFycmF5VmFsdWVzLmNhbGwodmFsaWRhdGUodGhpcykpO1xuICAgIH1cbiAgfTtcblxuICB2YXIgaXNUQUluZGV4ID0gZnVuY3Rpb24gKHRhcmdldCwga2V5KSB7XG4gICAgcmV0dXJuIGlzT2JqZWN0KHRhcmdldClcbiAgICAgICYmIHRhcmdldFtUWVBFRF9BUlJBWV1cbiAgICAgICYmIHR5cGVvZiBrZXkgIT0gJ3N5bWJvbCdcbiAgICAgICYmIGtleSBpbiB0YXJnZXRcbiAgICAgICYmIFN0cmluZygra2V5KSA9PSBTdHJpbmcoa2V5KTtcbiAgfTtcbiAgdmFyICRnZXREZXNjID0gZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHRhcmdldCwga2V5KSB7XG4gICAgcmV0dXJuIGlzVEFJbmRleCh0YXJnZXQsIGtleSA9IHRvUHJpbWl0aXZlKGtleSwgdHJ1ZSkpXG4gICAgICA/IHByb3BlcnR5RGVzYygyLCB0YXJnZXRba2V5XSlcbiAgICAgIDogZ09QRCh0YXJnZXQsIGtleSk7XG4gIH07XG4gIHZhciAkc2V0RGVzYyA9IGZ1bmN0aW9uIGRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBkZXNjKSB7XG4gICAgaWYgKGlzVEFJbmRleCh0YXJnZXQsIGtleSA9IHRvUHJpbWl0aXZlKGtleSwgdHJ1ZSkpXG4gICAgICAmJiBpc09iamVjdChkZXNjKVxuICAgICAgJiYgaGFzKGRlc2MsICd2YWx1ZScpXG4gICAgICAmJiAhaGFzKGRlc2MsICdnZXQnKVxuICAgICAgJiYgIWhhcyhkZXNjLCAnc2V0JylcbiAgICAgIC8vIFRPRE86IGFkZCB2YWxpZGF0aW9uIGRlc2NyaXB0b3Igdy9vIGNhbGxpbmcgYWNjZXNzb3JzXG4gICAgICAmJiAhZGVzYy5jb25maWd1cmFibGVcbiAgICAgICYmICghaGFzKGRlc2MsICd3cml0YWJsZScpIHx8IGRlc2Mud3JpdGFibGUpXG4gICAgICAmJiAoIWhhcyhkZXNjLCAnZW51bWVyYWJsZScpIHx8IGRlc2MuZW51bWVyYWJsZSlcbiAgICApIHtcbiAgICAgIHRhcmdldFtrZXldID0gZGVzYy52YWx1ZTtcbiAgICAgIHJldHVybiB0YXJnZXQ7XG4gICAgfSByZXR1cm4gZFAodGFyZ2V0LCBrZXksIGRlc2MpO1xuICB9O1xuXG4gIGlmICghQUxMX0NPTlNUUlVDVE9SUykge1xuICAgICRHT1BELmYgPSAkZ2V0RGVzYztcbiAgICAkRFAuZiA9ICRzZXREZXNjO1xuICB9XG5cbiAgJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAhQUxMX0NPTlNUUlVDVE9SUywgJ09iamVjdCcsIHtcbiAgICBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I6ICRnZXREZXNjLFxuICAgIGRlZmluZVByb3BlcnR5OiAkc2V0RGVzY1xuICB9KTtcblxuICBpZiAoZmFpbHMoZnVuY3Rpb24gKCkgeyBhcnJheVRvU3RyaW5nLmNhbGwoe30pOyB9KSkge1xuICAgIGFycmF5VG9TdHJpbmcgPSBhcnJheVRvTG9jYWxlU3RyaW5nID0gZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gICAgICByZXR1cm4gYXJyYXlKb2luLmNhbGwodGhpcyk7XG4gICAgfTtcbiAgfVxuXG4gIHZhciAkVHlwZWRBcnJheVByb3RvdHlwZSQgPSByZWRlZmluZUFsbCh7fSwgcHJvdG8pO1xuICByZWRlZmluZUFsbCgkVHlwZWRBcnJheVByb3RvdHlwZSQsICRpdGVyYXRvcnMpO1xuICBoaWRlKCRUeXBlZEFycmF5UHJvdG90eXBlJCwgSVRFUkFUT1IsICRpdGVyYXRvcnMudmFsdWVzKTtcbiAgcmVkZWZpbmVBbGwoJFR5cGVkQXJyYXlQcm90b3R5cGUkLCB7XG4gICAgc2xpY2U6ICRzbGljZSxcbiAgICBzZXQ6ICRzZXQsXG4gICAgY29uc3RydWN0b3I6IGZ1bmN0aW9uICgpIHsgLyogbm9vcCAqLyB9LFxuICAgIHRvU3RyaW5nOiBhcnJheVRvU3RyaW5nLFxuICAgIHRvTG9jYWxlU3RyaW5nOiAkdG9Mb2NhbGVTdHJpbmdcbiAgfSk7XG4gIGFkZEdldHRlcigkVHlwZWRBcnJheVByb3RvdHlwZSQsICdidWZmZXInLCAnYicpO1xuICBhZGRHZXR0ZXIoJFR5cGVkQXJyYXlQcm90b3R5cGUkLCAnYnl0ZU9mZnNldCcsICdvJyk7XG4gIGFkZEdldHRlcigkVHlwZWRBcnJheVByb3RvdHlwZSQsICdieXRlTGVuZ3RoJywgJ2wnKTtcbiAgYWRkR2V0dGVyKCRUeXBlZEFycmF5UHJvdG90eXBlJCwgJ2xlbmd0aCcsICdlJyk7XG4gIGRQKCRUeXBlZEFycmF5UHJvdG90eXBlJCwgVEFHLCB7XG4gICAgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzW1RZUEVEX0FSUkFZXTsgfVxuICB9KTtcblxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbWF4LXN0YXRlbWVudHNcbiAgbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoS0VZLCBCWVRFUywgd3JhcHBlciwgQ0xBTVBFRCkge1xuICAgIENMQU1QRUQgPSAhIUNMQU1QRUQ7XG4gICAgdmFyIE5BTUUgPSBLRVkgKyAoQ0xBTVBFRCA/ICdDbGFtcGVkJyA6ICcnKSArICdBcnJheSc7XG4gICAgdmFyIEdFVFRFUiA9ICdnZXQnICsgS0VZO1xuICAgIHZhciBTRVRURVIgPSAnc2V0JyArIEtFWTtcbiAgICB2YXIgVHlwZWRBcnJheSA9IGdsb2JhbFtOQU1FXTtcbiAgICB2YXIgQmFzZSA9IFR5cGVkQXJyYXkgfHwge307XG4gICAgdmFyIFRBQyA9IFR5cGVkQXJyYXkgJiYgZ2V0UHJvdG90eXBlT2YoVHlwZWRBcnJheSk7XG4gICAgdmFyIEZPUkNFRCA9ICFUeXBlZEFycmF5IHx8ICEkdHlwZWQuQUJWO1xuICAgIHZhciBPID0ge307XG4gICAgdmFyIFR5cGVkQXJyYXlQcm90b3R5cGUgPSBUeXBlZEFycmF5ICYmIFR5cGVkQXJyYXlbUFJPVE9UWVBFXTtcbiAgICB2YXIgZ2V0dGVyID0gZnVuY3Rpb24gKHRoYXQsIGluZGV4KSB7XG4gICAgICB2YXIgZGF0YSA9IHRoYXQuX2Q7XG4gICAgICByZXR1cm4gZGF0YS52W0dFVFRFUl0oaW5kZXggKiBCWVRFUyArIGRhdGEubywgTElUVExFX0VORElBTik7XG4gICAgfTtcbiAgICB2YXIgc2V0dGVyID0gZnVuY3Rpb24gKHRoYXQsIGluZGV4LCB2YWx1ZSkge1xuICAgICAgdmFyIGRhdGEgPSB0aGF0Ll9kO1xuICAgICAgaWYgKENMQU1QRUQpIHZhbHVlID0gKHZhbHVlID0gTWF0aC5yb3VuZCh2YWx1ZSkpIDwgMCA/IDAgOiB2YWx1ZSA+IDB4ZmYgPyAweGZmIDogdmFsdWUgJiAweGZmO1xuICAgICAgZGF0YS52W1NFVFRFUl0oaW5kZXggKiBCWVRFUyArIGRhdGEubywgdmFsdWUsIExJVFRMRV9FTkRJQU4pO1xuICAgIH07XG4gICAgdmFyIGFkZEVsZW1lbnQgPSBmdW5jdGlvbiAodGhhdCwgaW5kZXgpIHtcbiAgICAgIGRQKHRoYXQsIGluZGV4LCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHJldHVybiBnZXR0ZXIodGhpcywgaW5kZXgpO1xuICAgICAgICB9LFxuICAgICAgICBzZXQ6IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICAgIHJldHVybiBzZXR0ZXIodGhpcywgaW5kZXgsIHZhbHVlKTtcbiAgICAgICAgfSxcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZVxuICAgICAgfSk7XG4gICAgfTtcbiAgICBpZiAoRk9SQ0VEKSB7XG4gICAgICBUeXBlZEFycmF5ID0gd3JhcHBlcihmdW5jdGlvbiAodGhhdCwgZGF0YSwgJG9mZnNldCwgJGxlbmd0aCkge1xuICAgICAgICBhbkluc3RhbmNlKHRoYXQsIFR5cGVkQXJyYXksIE5BTUUsICdfZCcpO1xuICAgICAgICB2YXIgaW5kZXggPSAwO1xuICAgICAgICB2YXIgb2Zmc2V0ID0gMDtcbiAgICAgICAgdmFyIGJ1ZmZlciwgYnl0ZUxlbmd0aCwgbGVuZ3RoLCBrbGFzcztcbiAgICAgICAgaWYgKCFpc09iamVjdChkYXRhKSkge1xuICAgICAgICAgIGxlbmd0aCA9IHRvSW5kZXgoZGF0YSk7XG4gICAgICAgICAgYnl0ZUxlbmd0aCA9IGxlbmd0aCAqIEJZVEVTO1xuICAgICAgICAgIGJ1ZmZlciA9IG5ldyAkQXJyYXlCdWZmZXIoYnl0ZUxlbmd0aCk7XG4gICAgICAgIH0gZWxzZSBpZiAoZGF0YSBpbnN0YW5jZW9mICRBcnJheUJ1ZmZlciB8fCAoa2xhc3MgPSBjbGFzc29mKGRhdGEpKSA9PSBBUlJBWV9CVUZGRVIgfHwga2xhc3MgPT0gU0hBUkVEX0JVRkZFUikge1xuICAgICAgICAgIGJ1ZmZlciA9IGRhdGE7XG4gICAgICAgICAgb2Zmc2V0ID0gdG9PZmZzZXQoJG9mZnNldCwgQllURVMpO1xuICAgICAgICAgIHZhciAkbGVuID0gZGF0YS5ieXRlTGVuZ3RoO1xuICAgICAgICAgIGlmICgkbGVuZ3RoID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIGlmICgkbGVuICUgQllURVMpIHRocm93IFJhbmdlRXJyb3IoV1JPTkdfTEVOR1RIKTtcbiAgICAgICAgICAgIGJ5dGVMZW5ndGggPSAkbGVuIC0gb2Zmc2V0O1xuICAgICAgICAgICAgaWYgKGJ5dGVMZW5ndGggPCAwKSB0aHJvdyBSYW5nZUVycm9yKFdST05HX0xFTkdUSCk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGJ5dGVMZW5ndGggPSB0b0xlbmd0aCgkbGVuZ3RoKSAqIEJZVEVTO1xuICAgICAgICAgICAgaWYgKGJ5dGVMZW5ndGggKyBvZmZzZXQgPiAkbGVuKSB0aHJvdyBSYW5nZUVycm9yKFdST05HX0xFTkdUSCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGxlbmd0aCA9IGJ5dGVMZW5ndGggLyBCWVRFUztcbiAgICAgICAgfSBlbHNlIGlmIChUWVBFRF9BUlJBWSBpbiBkYXRhKSB7XG4gICAgICAgICAgcmV0dXJuIGZyb21MaXN0KFR5cGVkQXJyYXksIGRhdGEpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJldHVybiAkZnJvbS5jYWxsKFR5cGVkQXJyYXksIGRhdGEpO1xuICAgICAgICB9XG4gICAgICAgIGhpZGUodGhhdCwgJ19kJywge1xuICAgICAgICAgIGI6IGJ1ZmZlcixcbiAgICAgICAgICBvOiBvZmZzZXQsXG4gICAgICAgICAgbDogYnl0ZUxlbmd0aCxcbiAgICAgICAgICBlOiBsZW5ndGgsXG4gICAgICAgICAgdjogbmV3ICREYXRhVmlldyhidWZmZXIpXG4gICAgICAgIH0pO1xuICAgICAgICB3aGlsZSAoaW5kZXggPCBsZW5ndGgpIGFkZEVsZW1lbnQodGhhdCwgaW5kZXgrKyk7XG4gICAgICB9KTtcbiAgICAgIFR5cGVkQXJyYXlQcm90b3R5cGUgPSBUeXBlZEFycmF5W1BST1RPVFlQRV0gPSBjcmVhdGUoJFR5cGVkQXJyYXlQcm90b3R5cGUkKTtcbiAgICAgIGhpZGUoVHlwZWRBcnJheVByb3RvdHlwZSwgJ2NvbnN0cnVjdG9yJywgVHlwZWRBcnJheSk7XG4gICAgfSBlbHNlIGlmICghZmFpbHMoZnVuY3Rpb24gKCkge1xuICAgICAgVHlwZWRBcnJheSgxKTtcbiAgICB9KSB8fCAhZmFpbHMoZnVuY3Rpb24gKCkge1xuICAgICAgbmV3IFR5cGVkQXJyYXkoLTEpOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLW5ld1xuICAgIH0pIHx8ICEkaXRlckRldGVjdChmdW5jdGlvbiAoaXRlcikge1xuICAgICAgbmV3IFR5cGVkQXJyYXkoKTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1uZXdcbiAgICAgIG5ldyBUeXBlZEFycmF5KG51bGwpOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLW5ld1xuICAgICAgbmV3IFR5cGVkQXJyYXkoMS41KTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1uZXdcbiAgICAgIG5ldyBUeXBlZEFycmF5KGl0ZXIpOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLW5ld1xuICAgIH0sIHRydWUpKSB7XG4gICAgICBUeXBlZEFycmF5ID0gd3JhcHBlcihmdW5jdGlvbiAodGhhdCwgZGF0YSwgJG9mZnNldCwgJGxlbmd0aCkge1xuICAgICAgICBhbkluc3RhbmNlKHRoYXQsIFR5cGVkQXJyYXksIE5BTUUpO1xuICAgICAgICB2YXIga2xhc3M7XG4gICAgICAgIC8vIGB3c2AgbW9kdWxlIGJ1ZywgdGVtcG9yYXJpbHkgcmVtb3ZlIHZhbGlkYXRpb24gbGVuZ3RoIGZvciBVaW50OEFycmF5XG4gICAgICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS93ZWJzb2NrZXRzL3dzL3B1bGwvNjQ1XG4gICAgICAgIGlmICghaXNPYmplY3QoZGF0YSkpIHJldHVybiBuZXcgQmFzZSh0b0luZGV4KGRhdGEpKTtcbiAgICAgICAgaWYgKGRhdGEgaW5zdGFuY2VvZiAkQXJyYXlCdWZmZXIgfHwgKGtsYXNzID0gY2xhc3NvZihkYXRhKSkgPT0gQVJSQVlfQlVGRkVSIHx8IGtsYXNzID09IFNIQVJFRF9CVUZGRVIpIHtcbiAgICAgICAgICByZXR1cm4gJGxlbmd0aCAhPT0gdW5kZWZpbmVkXG4gICAgICAgICAgICA/IG5ldyBCYXNlKGRhdGEsIHRvT2Zmc2V0KCRvZmZzZXQsIEJZVEVTKSwgJGxlbmd0aClcbiAgICAgICAgICAgIDogJG9mZnNldCAhPT0gdW5kZWZpbmVkXG4gICAgICAgICAgICAgID8gbmV3IEJhc2UoZGF0YSwgdG9PZmZzZXQoJG9mZnNldCwgQllURVMpKVxuICAgICAgICAgICAgICA6IG5ldyBCYXNlKGRhdGEpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChUWVBFRF9BUlJBWSBpbiBkYXRhKSByZXR1cm4gZnJvbUxpc3QoVHlwZWRBcnJheSwgZGF0YSk7XG4gICAgICAgIHJldHVybiAkZnJvbS5jYWxsKFR5cGVkQXJyYXksIGRhdGEpO1xuICAgICAgfSk7XG4gICAgICBhcnJheUZvckVhY2goVEFDICE9PSBGdW5jdGlvbi5wcm90b3R5cGUgPyBnT1BOKEJhc2UpLmNvbmNhdChnT1BOKFRBQykpIDogZ09QTihCYXNlKSwgZnVuY3Rpb24gKGtleSkge1xuICAgICAgICBpZiAoIShrZXkgaW4gVHlwZWRBcnJheSkpIGhpZGUoVHlwZWRBcnJheSwga2V5LCBCYXNlW2tleV0pO1xuICAgICAgfSk7XG4gICAgICBUeXBlZEFycmF5W1BST1RPVFlQRV0gPSBUeXBlZEFycmF5UHJvdG90eXBlO1xuICAgICAgaWYgKCFMSUJSQVJZKSBUeXBlZEFycmF5UHJvdG90eXBlLmNvbnN0cnVjdG9yID0gVHlwZWRBcnJheTtcbiAgICB9XG4gICAgdmFyICRuYXRpdmVJdGVyYXRvciA9IFR5cGVkQXJyYXlQcm90b3R5cGVbSVRFUkFUT1JdO1xuICAgIHZhciBDT1JSRUNUX0lURVJfTkFNRSA9ICEhJG5hdGl2ZUl0ZXJhdG9yXG4gICAgICAmJiAoJG5hdGl2ZUl0ZXJhdG9yLm5hbWUgPT0gJ3ZhbHVlcycgfHwgJG5hdGl2ZUl0ZXJhdG9yLm5hbWUgPT0gdW5kZWZpbmVkKTtcbiAgICB2YXIgJGl0ZXJhdG9yID0gJGl0ZXJhdG9ycy52YWx1ZXM7XG4gICAgaGlkZShUeXBlZEFycmF5LCBUWVBFRF9DT05TVFJVQ1RPUiwgdHJ1ZSk7XG4gICAgaGlkZShUeXBlZEFycmF5UHJvdG90eXBlLCBUWVBFRF9BUlJBWSwgTkFNRSk7XG4gICAgaGlkZShUeXBlZEFycmF5UHJvdG90eXBlLCBWSUVXLCB0cnVlKTtcbiAgICBoaWRlKFR5cGVkQXJyYXlQcm90b3R5cGUsIERFRl9DT05TVFJVQ1RPUiwgVHlwZWRBcnJheSk7XG5cbiAgICBpZiAoQ0xBTVBFRCA/IG5ldyBUeXBlZEFycmF5KDEpW1RBR10gIT0gTkFNRSA6ICEoVEFHIGluIFR5cGVkQXJyYXlQcm90b3R5cGUpKSB7XG4gICAgICBkUChUeXBlZEFycmF5UHJvdG90eXBlLCBUQUcsIHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBOQU1FOyB9XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBPW05BTUVdID0gVHlwZWRBcnJheTtcblxuICAgICRleHBvcnQoJGV4cG9ydC5HICsgJGV4cG9ydC5XICsgJGV4cG9ydC5GICogKFR5cGVkQXJyYXkgIT0gQmFzZSksIE8pO1xuXG4gICAgJGV4cG9ydCgkZXhwb3J0LlMsIE5BTUUsIHtcbiAgICAgIEJZVEVTX1BFUl9FTEVNRU5UOiBCWVRFU1xuICAgIH0pO1xuXG4gICAgJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiBmYWlscyhmdW5jdGlvbiAoKSB7IEJhc2Uub2YuY2FsbChUeXBlZEFycmF5LCAxKTsgfSksIE5BTUUsIHtcbiAgICAgIGZyb206ICRmcm9tLFxuICAgICAgb2Y6ICRvZlxuICAgIH0pO1xuXG4gICAgaWYgKCEoQllURVNfUEVSX0VMRU1FTlQgaW4gVHlwZWRBcnJheVByb3RvdHlwZSkpIGhpZGUoVHlwZWRBcnJheVByb3RvdHlwZSwgQllURVNfUEVSX0VMRU1FTlQsIEJZVEVTKTtcblxuICAgICRleHBvcnQoJGV4cG9ydC5QLCBOQU1FLCBwcm90byk7XG5cbiAgICBzZXRTcGVjaWVzKE5BTUUpO1xuXG4gICAgJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiBGT1JDRURfU0VULCBOQU1FLCB7IHNldDogJHNldCB9KTtcblxuICAgICRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogIUNPUlJFQ1RfSVRFUl9OQU1FLCBOQU1FLCAkaXRlcmF0b3JzKTtcblxuICAgIGlmICghTElCUkFSWSAmJiBUeXBlZEFycmF5UHJvdG90eXBlLnRvU3RyaW5nICE9IGFycmF5VG9TdHJpbmcpIFR5cGVkQXJyYXlQcm90b3R5cGUudG9TdHJpbmcgPSBhcnJheVRvU3RyaW5nO1xuXG4gICAgJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiBmYWlscyhmdW5jdGlvbiAoKSB7XG4gICAgICBuZXcgVHlwZWRBcnJheSgxKS5zbGljZSgpO1xuICAgIH0pLCBOQU1FLCB7IHNsaWNlOiAkc2xpY2UgfSk7XG5cbiAgICAkZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqIChmYWlscyhmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gWzEsIDJdLnRvTG9jYWxlU3RyaW5nKCkgIT0gbmV3IFR5cGVkQXJyYXkoWzEsIDJdKS50b0xvY2FsZVN0cmluZygpO1xuICAgIH0pIHx8ICFmYWlscyhmdW5jdGlvbiAoKSB7XG4gICAgICBUeXBlZEFycmF5UHJvdG90eXBlLnRvTG9jYWxlU3RyaW5nLmNhbGwoWzEsIDJdKTtcbiAgICB9KSksIE5BTUUsIHsgdG9Mb2NhbGVTdHJpbmc6ICR0b0xvY2FsZVN0cmluZyB9KTtcblxuICAgIEl0ZXJhdG9yc1tOQU1FXSA9IENPUlJFQ1RfSVRFUl9OQU1FID8gJG5hdGl2ZUl0ZXJhdG9yIDogJGl0ZXJhdG9yO1xuICAgIGlmICghTElCUkFSWSAmJiAhQ09SUkVDVF9JVEVSX05BTUUpIGhpZGUoVHlwZWRBcnJheVByb3RvdHlwZSwgSVRFUkFUT1IsICRpdGVyYXRvcik7XG4gIH07XG59IGVsc2UgbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoKSB7IC8qIGVtcHR5ICovIH07XG4iLCJpbXBvcnQge2dldE9wdGlvbnN9IGZyb20gJy4vc3RvcmFnZS5qcydcbmltcG9ydCBicm93c2VyIGZyb20gJ3dlYmV4dGVuc2lvbi1wb2x5ZmlsbCdcblxuY29uc3QgY2xpZW50SUQgPSAnU0V3MXV2UmQ2a3hGRXcnXG5jb25zdCBvYXV0aF9yZWRkaXQgPSAnaHR0cHM6Ly9vYXV0aC5yZWRkaXQuY29tLydcbmNvbnN0IHd3d19yZWRkaXQgPSAnaHR0cHM6Ly93d3cucmVkZGl0LmNvbS8nXG5jb25zdCBPQVVUSF9SRVZFRERJVCA9ICdodHRwczovL29yZWQucmV2ZWRkaXQuY29tLydcbmNvbnN0IFdXV19SRVZFRERJVCA9ICdodHRwczovL3dyZWQucmV2ZWRkaXQuY29tLydcblxuY29uc3QgTk9fQVVUSCA9ICdub25lJ1xuXG5leHBvcnQgY29uc3QgbG9va3VwSXRlbXNCeUlEID0gKGlkcywgYXV0aCwgbW9uaXRvcl9xdWFyYW50aW5lZCA9IGZhbHNlLCBtb25pdG9yX3F1YXJhbnRpbmVkX3JlbW90ZSA9IGZhbHNlKSA9PiB7XG4gICAgY29uc3QgcGFyYW1zID0ge2lkOmlkcywgcmF3X2pzb246MX1cbiAgICBjb25zdCBzZWFyY2ggPSAnPycrT2JqZWN0LmtleXMocGFyYW1zKS5tYXAoayA9PiBgJHtrfT0ke3BhcmFtc1trXX1gKS5qb2luKCcmJylcblxuICAgIHJldHVybiBmZXRjaF9mb3JSZWRkaXQoLi4uZ2V0RmV0Y2hQYXJhbXMoJ2FwaS9pbmZvJywgc2VhcmNoLCBhdXRoLCBtb25pdG9yX3F1YXJhbnRpbmVkX3JlbW90ZSksIG1vbml0b3JfcXVhcmFudGluZWQpXG59XG5cbmNvbnN0IGNvb2tpZURldGFpbHNfcmVkZGl0U2Vzc2lvbiA9IHtuYW1lOiAncmVkZGl0X3Nlc3Npb24nLCB1cmw6ICdodHRwczovL3JlZGRpdC5jb20nfVxuXG5jb25zdCBhY2NlcHRhYmxlX3NldENvb2tpZURldGFpbHMgPSBbJ25hbWUnLCAndmFsdWUnLCAnZG9tYWluJywgJ3BhdGgnLCAnc2VjdXJlJywgJ2h0dHBPbmx5JywgJ3N0b3JlSWQnXVxuXG5jb25zdCBnZXRTZXR0YWJsZUNvb2tpZSA9IChjb29raWUsIHVybCA9ICdodHRwczovL3JlZGRpdC5jb20nKSA9PiB7XG4gICAgaWYgKCEgY29va2llKSB7XG4gICAgICAgIHJldHVybiBjb29raWVcbiAgICB9XG4gICAgY29uc3QgZmlsdGVyZWQgPSBPYmplY3Qua2V5cyhjb29raWUpXG4gICAgICAgIC5maWx0ZXIoa2V5ID0+IGFjY2VwdGFibGVfc2V0Q29va2llRGV0YWlscy5pbmNsdWRlcyhrZXkpKVxuICAgICAgICAucmVkdWNlKChvYmosIGtleSkgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAuLi5vYmosXG4gICAgICAgICAgICAgICAgW2tleV06IGNvb2tpZVtrZXldXG4gICAgICAgICAgICB9O1xuICAgICAgICB9LCB7fSk7XG4gICAgZmlsdGVyZWQudXJsID0gdXJsXG4gICAgcmV0dXJuIGZpbHRlcmVkXG59XG5cblxuLy9tb25pdG9yX3F1YXJhbnRpbmVkIC0+IHdoZW4gdHJ1ZSwgY2xpZW50IHNldHMgY29va2llICh1c2VkIGZvciBldmVyeSBsb29rIHVwKVxuLy9tb25pdG9yX3F1YXJhbnRpbmVkX3JlbW90ZSAtPiB3aGVuIHRydWUsIHJlbW90ZSBzZXJ2ZXIgc2V0cyBjb29raWUgKHVzZWQgb25jZSBpbiBhd2hpbGUpXG5jb25zdCBmZXRjaF9mb3JSZWRkaXQgPSBhc3luYyAodXJsLCBvcHRpb25zLCBtb25pdG9yX3F1YXJhbnRpbmVkID0gZmFsc2UpID0+IHtcbiAgICBsZXQgY29va2llX3JlZGRpdFNlc3Npb25cbiAgICBhd2FpdCBicm93c2VyLmNvb2tpZXMuc2V0KHtkb21haW46ICdyZWRkaXQuY29tJywgdXJsOiAnaHR0cHM6Ly9yZWRkaXQuY29tJywgbmFtZTogJ19vcHRpb25zJywgdmFsdWU6ICd7JTIycHJlZl9xdWFyYW50aW5lX29wdGluJTIyOnRydWV9J30pXG4gICAgaWYgKG1vbml0b3JfcXVhcmFudGluZWQpIHtcbiAgICAgICAgY29va2llX3JlZGRpdFNlc3Npb24gPSBnZXRTZXR0YWJsZUNvb2tpZShhd2FpdCBicm93c2VyLmNvb2tpZXMuZ2V0KGNvb2tpZURldGFpbHNfcmVkZGl0U2Vzc2lvbikpXG4gICAgICAgIGlmIChjb29raWVfcmVkZGl0U2Vzc2lvbikge1xuICAgICAgICAgICAgYXdhaXQgYnJvd3Nlci5jb29raWVzLnJlbW92ZShjb29raWVEZXRhaWxzX3JlZGRpdFNlc3Npb24pXG4gICAgICAgIH1cbiAgICB9XG4gICAgaWYgKCEgb3B0aW9ucykge1xuICAgICAgICBvcHRpb25zID0ge31cbiAgICB9XG4gICAgb3B0aW9uc1snY2FjaGUnXSA9ICdyZWxvYWQnXG4gICAgY29uc3QgcmVzdWx0ID0gZmV0Y2godXJsLCBvcHRpb25zKVxuICAgIC50aGVuKGhhbmRsZUZldGNoRXJyb3JzKVxuICAgIC50aGVuKGdldFJlZGRpdERhdGEpXG4gICAgLmNhdGNoKGNvbnNvbGUubG9nKVxuICAgIGlmIChjb29raWVfcmVkZGl0U2Vzc2lvbikge1xuICAgICAgICBhd2FpdCBicm93c2VyLmNvb2tpZXMuc2V0KGNvb2tpZV9yZWRkaXRTZXNzaW9uKVxuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0XG59XG5cbmV4cG9ydCBjb25zdCBsb29rdXBJdGVtc0J5VXNlciA9ICh1c2VyLCBhZnRlciwgc29ydCwgdGltZVNwYW4sIG1vbml0b3JfcXVhcmFudGluZWQsIG1vbml0b3JfcXVhcmFudGluZWRfcmVtb3RlLCBhdXRoKSA9PiB7XG4gICAgY29uc3QgcGFyYW1zID0ge2xpbWl0OiAxMDAsIHNvcnQsIHJhd19qc29uOjF9XG4gICAgaWYgKGFmdGVyKSBwYXJhbXMuYWZ0ZXIgPSBhZnRlclxuICAgIGlmICh0aW1lU3BhbikgcGFyYW1zLnQgPSB0aW1lU3BhblxuICAgIGNvbnN0IHBhdGggPSBgdXNlci8ke3VzZXJ9L292ZXJ2aWV3Lmpzb25gXG4gICAgY29uc3Qgc2VhcmNoID0gJz8nK09iamVjdC5rZXlzKHBhcmFtcykubWFwKGsgPT4gYCR7a309JHtwYXJhbXNba119YCkuam9pbignJicpXG4gICAgcmV0dXJuIGZldGNoX2ZvclJlZGRpdCguLi5nZXRGZXRjaFBhcmFtcyhwYXRoLCBzZWFyY2gsIGF1dGgsIG1vbml0b3JfcXVhcmFudGluZWRfcmVtb3RlKSwgbW9uaXRvcl9xdWFyYW50aW5lZClcbn1cblxuZXhwb3J0IGNvbnN0IGhhbmRsZUZldGNoRXJyb3JzID0gKHJlc3BvbnNlKSA9PiB7XG4gICAgaWYgKCEgcmVzcG9uc2Uub2spIHtcbiAgICAgICAgdGhyb3cgRXJyb3IocmVzcG9uc2Uuc3RhdHVzVGV4dClcbiAgICB9XG4gICAgcmV0dXJuIHJlc3BvbnNlLmpzb24oKVxufVxuXG5leHBvcnQgY29uc3QgZ2V0UmVkZGl0RGF0YSA9IChkYXRhKSA9PiB7XG4gICAgaWYgKCEgZGF0YSB8fCAhIGRhdGEuZGF0YSB8fCAhIGRhdGEuZGF0YS5jaGlsZHJlbikge1xuICAgICAgICB0aHJvdyBFcnJvcigncmVkZGl0IGRhdGEgaXMgbm90IGRlZmluZWQnKVxuICAgIH1cbiAgICByZXR1cm4gZGF0YS5kYXRhLmNoaWxkcmVuXG59XG5cbmV4cG9ydCBjb25zdCBnZXRSZWRkaXRUb2tlbiA9IChkYXRhKSA9PiB7XG4gICAgaWYgKCEgZGF0YSB8fCAhIGRhdGEuYWNjZXNzX3Rva2VuKSB7XG4gICAgICAgIHRocm93IEVycm9yKCdhY2Nlc3MgdG9rZW4gaXMgbm90IGRlZmluZWQnKVxuICAgIH1cbiAgICByZXR1cm4gZGF0YS5hY2Nlc3NfdG9rZW5cbn1cblxuZXhwb3J0IGNvbnN0IGdldEF1dGggPSAoKSA9PiB7XG4gICAgcmV0dXJuIGdldE9wdGlvbnMoKHVzZXJzLCBvdGhlcnMsIG9wdGlvbnMpID0+IHtcbiAgICAgICAgdmFyIHVzZV90aGlzX2NsaWVudElEID0gY2xpZW50SURcbiAgICAgICAgaWYgKG9wdGlvbnMuY3VzdG9tX2NsaWVudGlkKSB7XG4gICAgICAgICAgICB1c2VfdGhpc19jbGllbnRJRCA9IG9wdGlvbnMuY3VzdG9tX2NsaWVudGlkXG4gICAgICAgICAgICBpZiAodXNlX3RoaXNfY2xpZW50SUQgPT09ICd0ZXN0aW5nJykge1xuICAgICAgICAgICAgICAgIHJldHVybiBOT19BVVRIXG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgdG9rZW5Jbml0ID0ge1xuICAgICAgICAgICAgaGVhZGVyczoge1xuICAgICAgICAgICAgICAgIEF1dGhvcml6YXRpb246IGBCYXNpYyAke2J0b2EoYCR7dXNlX3RoaXNfY2xpZW50SUR9OmApfWAsXG4gICAgICAgICAgICAgICAgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQ7IGNoYXJzZXQ9dXRmLTgnXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgbWV0aG9kOiAnUE9TVCcsXG4gICAgICAgICAgICBib2R5OiBgZ3JhbnRfdHlwZT0ke2VuY29kZVVSSUNvbXBvbmVudCgnaHR0cHM6Ly9vYXV0aC5yZWRkaXQuY29tL2dyYW50cy9pbnN0YWxsZWRfY2xpZW50Jyl9JmRldmljZV9pZD1ET19OT1RfVFJBQ0tfVEhJU19ERVZJQ0VgXG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gZmV0Y2goJ2h0dHBzOi8vd3d3LnJlZGRpdC5jb20vYXBpL3YxL2FjY2Vzc190b2tlbicsIHRva2VuSW5pdClcbiAgICAgICAgLnRoZW4oaGFuZGxlRmV0Y2hFcnJvcnMpXG4gICAgICAgIC50aGVuKGdldFJlZGRpdFRva2VuKVxuICAgICAgICAudGhlbih0b2tlbiA9PiAoe1xuICAgICAgICAgICAgaGVhZGVyczoge1xuICAgICAgICAgICAgICAgIEF1dGhvcml6YXRpb246IGBiZWFyZXIgJHt0b2tlbn1gXG4gICAgICAgICAgICB9XG4gICAgICAgIH0pKVxuICAgICAgICAuY2F0Y2goY29uc29sZS5sb2cpXG4gICAgfSlcblxufVxuXG4vLyBjb2RlOiBodHRwczovL2dpdGh1Yi5jb20vdG9vbGJveC10ZWFtL3JlZGRpdC1tb2RlcmF0b3ItdG9vbGJveC9ibG9iLzQzNGVjMGJiNzFlYmJhMmZjZjBjYjVlNGNhZDUyOTAzNWExYWU3NDIvZXh0ZW5zaW9uL2RhdGEvYmFja2dyb3VuZC9oYW5kbGVycy93ZWJyZXF1ZXN0LmpzI0wzNFxuLy8gZGlzY3Vzc2lvbjogaHR0cHM6Ly93d3cucmVkZGl0LmNvbS9yL3JlZGRpdGRldi9jb21tZW50cy81amY0eWcvYXBpX25ld19tb2RtYWlsL2RiZm53OTgvXG5leHBvcnQgY29uc3QgZ2V0TG9jYWxBdXRoID0gKCkgPT4ge1xuICAgIHJldHVybiBmZXRjaCgnaHR0cHM6Ly9tb2QucmVkZGl0LmNvbS9tYWlsL2FsbCcpXG4gICAgLnRoZW4ocmVzdWx0ID0+IHtcbiAgICAgICAgZ2V0Q29va2llKHt1cmw6ICdodHRwczovL21vZC5yZWRkaXQuY29tJywgbmFtZTogJ3Rva2VuJ30pXG4gICAgICAgIC50aGVuKGNvb2tpZSA9PiB7XG4gICAgICAgICAgICBpZiAoY29va2llKSB7XG4gICAgICAgICAgICAgICAgLy8gcmVtb3ZlIGludmFsaWQgY2hhcnMgYXQgdGhlIGVuZCBwZXIgZGlzY3Vzc2lvblxuICAgICAgICAgICAgICAgIGNvbnN0IGludmFsaWRDaGFyID0gbmV3IFJlZ0V4cCgnW15BLVphLXowLTkrL10uKj8kJylcbiAgICAgICAgICAgICAgICBjb25zdCBiYXNlNjRDb29raWUgPSBjb29raWUudmFsdWUucmVwbGFjZShpbnZhbGlkQ2hhciwgJycpXG4gICAgICAgICAgICAgICAgY29uc3QgdG9rZW5EYXRhID0gYXRvYihiYXNlNjRDb29raWUpXG4gICAgICAgICAgICAgICAgY29uc3QgdG9rZW5zID0gSlNPTi5wYXJzZSh0b2tlbkRhdGEpXG4gICAgICAgICAgICAgICAgaWYgKCdhY2Nlc3NUb2tlbicgaW4gdG9rZW5zICYmIHRva2Vucy5hY2Nlc3NUb2tlbikge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBhdXRoID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgaGVhZGVyczoge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIEF1dGhvcml6YXRpb246IGBiZWFyZXIgJHt0b2tlbnMuYWNjZXNzVG9rZW59YFxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBhdXRoXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bGxcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bGxcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSlcbiAgICB9KVxufVxuXG5leHBvcnQgY29uc3QgZ2V0Q29va2llID0gKHt1cmwsIG5hbWV9KSA9PiB7XG4gICAgaWYgKGxvY2F0aW9uLnByb3RvY29sLm1hdGNoKC9eaHR0cC8pKSB7XG4gICAgICAgIHJldHVybiBicm93c2VyLnJ1bnRpbWUuc2VuZE1lc3NhZ2Uoe1xuICAgICAgICAgICAgYWN0aW9uOiAnZ2V0LWNvb2tpZScsXG4gICAgICAgICAgICBvcHRpb25zOiB7dXJsLCBuYW1lfVxuICAgICAgICB9KVxuICAgICAgICAudGhlbihyZXNwb25zZSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gcmVzcG9uc2UuY29va2llXG4gICAgICAgIH0pXG4gICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIGJyb3dzZXIuY29va2llcy5nZXQoe3VybCwgbmFtZX0pXG4gICAgfVxufVxuXG5jb25zdCBnZXRGZXRjaFBhcmFtcyA9IChwYXRoLCBzZWFyY2gsIGF1dGgsIG1vbml0b3JfcXVhcmFudGluZWRfcmVtb3RlKSA9PiB7XG4gICAgaWYgKCEgYXV0aCB8fCBhdXRoID09PSBOT19BVVRIKSB7XG4gICAgICAgIGxldCB1cmwgPSAobW9uaXRvcl9xdWFyYW50aW5lZF9yZW1vdGUgPyBXV1dfUkVWRURESVQgOiB3d3dfcmVkZGl0KStwYXRoXG4gICAgICAgIGlmIChwYXRoID09PSAnYXBpL2luZm8nKSB7XG4gICAgICAgICAgICB1cmwgKz0gJy5qc29uJ1xuICAgICAgICB9XG4gICAgICAgIHVybCArPSBzZWFyY2hcbiAgICAgICAgcmV0dXJuIFt1cmxdXG4gICAgfSBlbHNlIHtcbiAgICAgICAgY29uc3QgdXJsID0gKG1vbml0b3JfcXVhcmFudGluZWRfcmVtb3RlID8gT0FVVEhfUkVWRURESVQgOiBvYXV0aF9yZWRkaXQpK3BhdGgrc2VhcmNoXG4gICAgICAgIHJldHVybiBbdXJsLCBhdXRoXVxuICAgIH1cbn1cblxuZXhwb3J0IGNvbnN0IGdldExvY2FsT3JBcHBBdXRoID0gKCkgPT4ge1xuICAgIHJldHVybiBnZXRMb2NhbEF1dGgoKVxuICAgIC50aGVuKGF1dGggPT4ge1xuICAgICAgICBpZiAoYXV0aCkgcmV0dXJuIGF1dGhcbiAgICAgICAgcmV0dXJuIGdldEF1dGgoKVxuICAgIH0pXG4gICAgLmNhdGNoKGNvbnNvbGUubG9nKVxufVxuXG5leHBvcnQgY29uc3QgZ2V0TG9nZ2VkaW5Vc2VyID0gKCkgPT4ge1xuICAgIHJldHVybiBmZXRjaCgnaHR0cHM6Ly93d3cucmVkZGl0LmNvbS9hcGkvbWUuanNvbicpXG4gICAgLnRoZW4oaGFuZGxlRmV0Y2hFcnJvcnMpXG4gICAgLnRoZW4oZ2V0UmVkZGl0VXNlcm5hbWUpXG4gICAgLmNhdGNoKGNvbnNvbGUubG9nKVxufVxuXG5jb25zdCBnZXRSZWRkaXRVc2VybmFtZSA9IChkYXRhKSA9PiB7XG4gICAgaWYgKCEgZGF0YSB8fCAhIGRhdGEuZGF0YSB8fCAhIGRhdGEuZGF0YS5uYW1lKSB7XG4gICAgICAgIHRocm93IEVycm9yKCdyZWRkaXQgdXNlcm5hbWUgaXMgbm90IGRlZmluZWQnKVxuICAgIH1cbiAgICByZXR1cm4gZGF0YS5kYXRhLm5hbWVcbn1cbiIsIi8vIDcuMS4xIFRvUHJpbWl0aXZlKGlucHV0IFssIFByZWZlcnJlZFR5cGVdKVxudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG4vLyBpbnN0ZWFkIG9mIHRoZSBFUzYgc3BlYyB2ZXJzaW9uLCB3ZSBkaWRuJ3QgaW1wbGVtZW50IEBAdG9QcmltaXRpdmUgY2FzZVxuLy8gYW5kIHRoZSBzZWNvbmQgYXJndW1lbnQgLSBmbGFnIC0gcHJlZmVycmVkIHR5cGUgaXMgYSBzdHJpbmdcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0LCBTKSB7XG4gIGlmICghaXNPYmplY3QoaXQpKSByZXR1cm4gaXQ7XG4gIHZhciBmbiwgdmFsO1xuICBpZiAoUyAmJiB0eXBlb2YgKGZuID0gaXQudG9TdHJpbmcpID09ICdmdW5jdGlvbicgJiYgIWlzT2JqZWN0KHZhbCA9IGZuLmNhbGwoaXQpKSkgcmV0dXJuIHZhbDtcbiAgaWYgKHR5cGVvZiAoZm4gPSBpdC52YWx1ZU9mKSA9PSAnZnVuY3Rpb24nICYmICFpc09iamVjdCh2YWwgPSBmbi5jYWxsKGl0KSkpIHJldHVybiB2YWw7XG4gIGlmICghUyAmJiB0eXBlb2YgKGZuID0gaXQudG9TdHJpbmcpID09ICdmdW5jdGlvbicgJiYgIWlzT2JqZWN0KHZhbCA9IGZuLmNhbGwoaXQpKSkgcmV0dXJuIHZhbDtcbiAgdGhyb3cgVHlwZUVycm9yKFwiQ2FuJ3QgY29udmVydCBvYmplY3QgdG8gcHJpbWl0aXZlIHZhbHVlXCIpO1xufTtcbiIsInZhciBNRVRBID0gcmVxdWlyZSgnLi9fdWlkJykoJ21ldGEnKTtcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xudmFyIGhhcyA9IHJlcXVpcmUoJy4vX2hhcycpO1xudmFyIHNldERlc2MgPSByZXF1aXJlKCcuL19vYmplY3QtZHAnKS5mO1xudmFyIGlkID0gMDtcbnZhciBpc0V4dGVuc2libGUgPSBPYmplY3QuaXNFeHRlbnNpYmxlIHx8IGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIHRydWU7XG59O1xudmFyIEZSRUVaRSA9ICFyZXF1aXJlKCcuL19mYWlscycpKGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIGlzRXh0ZW5zaWJsZShPYmplY3QucHJldmVudEV4dGVuc2lvbnMoe30pKTtcbn0pO1xudmFyIHNldE1ldGEgPSBmdW5jdGlvbiAoaXQpIHtcbiAgc2V0RGVzYyhpdCwgTUVUQSwgeyB2YWx1ZToge1xuICAgIGk6ICdPJyArICsraWQsIC8vIG9iamVjdCBJRFxuICAgIHc6IHt9ICAgICAgICAgIC8vIHdlYWsgY29sbGVjdGlvbnMgSURzXG4gIH0gfSk7XG59O1xudmFyIGZhc3RLZXkgPSBmdW5jdGlvbiAoaXQsIGNyZWF0ZSkge1xuICAvLyByZXR1cm4gcHJpbWl0aXZlIHdpdGggcHJlZml4XG4gIGlmICghaXNPYmplY3QoaXQpKSByZXR1cm4gdHlwZW9mIGl0ID09ICdzeW1ib2wnID8gaXQgOiAodHlwZW9mIGl0ID09ICdzdHJpbmcnID8gJ1MnIDogJ1AnKSArIGl0O1xuICBpZiAoIWhhcyhpdCwgTUVUQSkpIHtcbiAgICAvLyBjYW4ndCBzZXQgbWV0YWRhdGEgdG8gdW5jYXVnaHQgZnJvemVuIG9iamVjdFxuICAgIGlmICghaXNFeHRlbnNpYmxlKGl0KSkgcmV0dXJuICdGJztcbiAgICAvLyBub3QgbmVjZXNzYXJ5IHRvIGFkZCBtZXRhZGF0YVxuICAgIGlmICghY3JlYXRlKSByZXR1cm4gJ0UnO1xuICAgIC8vIGFkZCBtaXNzaW5nIG1ldGFkYXRhXG4gICAgc2V0TWV0YShpdCk7XG4gIC8vIHJldHVybiBvYmplY3QgSURcbiAgfSByZXR1cm4gaXRbTUVUQV0uaTtcbn07XG52YXIgZ2V0V2VhayA9IGZ1bmN0aW9uIChpdCwgY3JlYXRlKSB7XG4gIGlmICghaGFzKGl0LCBNRVRBKSkge1xuICAgIC8vIGNhbid0IHNldCBtZXRhZGF0YSB0byB1bmNhdWdodCBmcm96ZW4gb2JqZWN0XG4gICAgaWYgKCFpc0V4dGVuc2libGUoaXQpKSByZXR1cm4gdHJ1ZTtcbiAgICAvLyBub3QgbmVjZXNzYXJ5IHRvIGFkZCBtZXRhZGF0YVxuICAgIGlmICghY3JlYXRlKSByZXR1cm4gZmFsc2U7XG4gICAgLy8gYWRkIG1pc3NpbmcgbWV0YWRhdGFcbiAgICBzZXRNZXRhKGl0KTtcbiAgLy8gcmV0dXJuIGhhc2ggd2VhayBjb2xsZWN0aW9ucyBJRHNcbiAgfSByZXR1cm4gaXRbTUVUQV0udztcbn07XG4vLyBhZGQgbWV0YWRhdGEgb24gZnJlZXplLWZhbWlseSBtZXRob2RzIGNhbGxpbmdcbnZhciBvbkZyZWV6ZSA9IGZ1bmN0aW9uIChpdCkge1xuICBpZiAoRlJFRVpFICYmIG1ldGEuTkVFRCAmJiBpc0V4dGVuc2libGUoaXQpICYmICFoYXMoaXQsIE1FVEEpKSBzZXRNZXRhKGl0KTtcbiAgcmV0dXJuIGl0O1xufTtcbnZhciBtZXRhID0gbW9kdWxlLmV4cG9ydHMgPSB7XG4gIEtFWTogTUVUQSxcbiAgTkVFRDogZmFsc2UsXG4gIGZhc3RLZXk6IGZhc3RLZXksXG4gIGdldFdlYWs6IGdldFdlYWssXG4gIG9uRnJlZXplOiBvbkZyZWV6ZVxufTtcbiIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGJpdG1hcCwgdmFsdWUpIHtcbiAgcmV0dXJuIHtcbiAgICBlbnVtZXJhYmxlOiAhKGJpdG1hcCAmIDEpLFxuICAgIGNvbmZpZ3VyYWJsZTogIShiaXRtYXAgJiAyKSxcbiAgICB3cml0YWJsZTogIShiaXRtYXAgJiA0KSxcbiAgICB2YWx1ZTogdmFsdWVcbiAgfTtcbn07XG4iLCJ2YXIgaWQgPSAwO1xudmFyIHB4ID0gTWF0aC5yYW5kb20oKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGtleSkge1xuICByZXR1cm4gJ1N5bWJvbCgnLmNvbmNhdChrZXkgPT09IHVuZGVmaW5lZCA/ICcnIDoga2V5LCAnKV8nLCAoKytpZCArIHB4KS50b1N0cmluZygzNikpO1xufTtcbiIsIm1vZHVsZS5leHBvcnRzID0gZmFsc2U7XG4iLCIvLyAxOS4xLjIuMTQgLyAxNS4yLjMuMTQgT2JqZWN0LmtleXMoTylcbnZhciAka2V5cyA9IHJlcXVpcmUoJy4vX29iamVjdC1rZXlzLWludGVybmFsJyk7XG52YXIgZW51bUJ1Z0tleXMgPSByZXF1aXJlKCcuL19lbnVtLWJ1Zy1rZXlzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gT2JqZWN0LmtleXMgfHwgZnVuY3Rpb24ga2V5cyhPKSB7XG4gIHJldHVybiAka2V5cyhPLCBlbnVtQnVnS2V5cyk7XG59O1xuIiwidmFyIHRvSW50ZWdlciA9IHJlcXVpcmUoJy4vX3RvLWludGVnZXInKTtcbnZhciBtYXggPSBNYXRoLm1heDtcbnZhciBtaW4gPSBNYXRoLm1pbjtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGluZGV4LCBsZW5ndGgpIHtcbiAgaW5kZXggPSB0b0ludGVnZXIoaW5kZXgpO1xuICByZXR1cm4gaW5kZXggPCAwID8gbWF4KGluZGV4ICsgbGVuZ3RoLCAwKSA6IG1pbihpbmRleCwgbGVuZ3RoKTtcbn07XG4iLCIvLyAxOS4xLjIuMiAvIDE1LjIuMy41IE9iamVjdC5jcmVhdGUoTyBbLCBQcm9wZXJ0aWVzXSlcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIGRQcyA9IHJlcXVpcmUoJy4vX29iamVjdC1kcHMnKTtcbnZhciBlbnVtQnVnS2V5cyA9IHJlcXVpcmUoJy4vX2VudW0tYnVnLWtleXMnKTtcbnZhciBJRV9QUk9UTyA9IHJlcXVpcmUoJy4vX3NoYXJlZC1rZXknKSgnSUVfUFJPVE8nKTtcbnZhciBFbXB0eSA9IGZ1bmN0aW9uICgpIHsgLyogZW1wdHkgKi8gfTtcbnZhciBQUk9UT1RZUEUgPSAncHJvdG90eXBlJztcblxuLy8gQ3JlYXRlIG9iamVjdCB3aXRoIGZha2UgYG51bGxgIHByb3RvdHlwZTogdXNlIGlmcmFtZSBPYmplY3Qgd2l0aCBjbGVhcmVkIHByb3RvdHlwZVxudmFyIGNyZWF0ZURpY3QgPSBmdW5jdGlvbiAoKSB7XG4gIC8vIFRocmFzaCwgd2FzdGUgYW5kIHNvZG9teTogSUUgR0MgYnVnXG4gIHZhciBpZnJhbWUgPSByZXF1aXJlKCcuL19kb20tY3JlYXRlJykoJ2lmcmFtZScpO1xuICB2YXIgaSA9IGVudW1CdWdLZXlzLmxlbmd0aDtcbiAgdmFyIGx0ID0gJzwnO1xuICB2YXIgZ3QgPSAnPic7XG4gIHZhciBpZnJhbWVEb2N1bWVudDtcbiAgaWZyYW1lLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XG4gIHJlcXVpcmUoJy4vX2h0bWwnKS5hcHBlbmRDaGlsZChpZnJhbWUpO1xuICBpZnJhbWUuc3JjID0gJ2phdmFzY3JpcHQ6JzsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1zY3JpcHQtdXJsXG4gIC8vIGNyZWF0ZURpY3QgPSBpZnJhbWUuY29udGVudFdpbmRvdy5PYmplY3Q7XG4gIC8vIGh0bWwucmVtb3ZlQ2hpbGQoaWZyYW1lKTtcbiAgaWZyYW1lRG9jdW1lbnQgPSBpZnJhbWUuY29udGVudFdpbmRvdy5kb2N1bWVudDtcbiAgaWZyYW1lRG9jdW1lbnQub3BlbigpO1xuICBpZnJhbWVEb2N1bWVudC53cml0ZShsdCArICdzY3JpcHQnICsgZ3QgKyAnZG9jdW1lbnQuRj1PYmplY3QnICsgbHQgKyAnL3NjcmlwdCcgKyBndCk7XG4gIGlmcmFtZURvY3VtZW50LmNsb3NlKCk7XG4gIGNyZWF0ZURpY3QgPSBpZnJhbWVEb2N1bWVudC5GO1xuICB3aGlsZSAoaS0tKSBkZWxldGUgY3JlYXRlRGljdFtQUk9UT1RZUEVdW2VudW1CdWdLZXlzW2ldXTtcbiAgcmV0dXJuIGNyZWF0ZURpY3QoKTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gT2JqZWN0LmNyZWF0ZSB8fCBmdW5jdGlvbiBjcmVhdGUoTywgUHJvcGVydGllcykge1xuICB2YXIgcmVzdWx0O1xuICBpZiAoTyAhPT0gbnVsbCkge1xuICAgIEVtcHR5W1BST1RPVFlQRV0gPSBhbk9iamVjdChPKTtcbiAgICByZXN1bHQgPSBuZXcgRW1wdHkoKTtcbiAgICBFbXB0eVtQUk9UT1RZUEVdID0gbnVsbDtcbiAgICAvLyBhZGQgXCJfX3Byb3RvX19cIiBmb3IgT2JqZWN0LmdldFByb3RvdHlwZU9mIHBvbHlmaWxsXG4gICAgcmVzdWx0W0lFX1BST1RPXSA9IE87XG4gIH0gZWxzZSByZXN1bHQgPSBjcmVhdGVEaWN0KCk7XG4gIHJldHVybiBQcm9wZXJ0aWVzID09PSB1bmRlZmluZWQgPyByZXN1bHQgOiBkUHMocmVzdWx0LCBQcm9wZXJ0aWVzKTtcbn07XG4iLCIvLyAxOS4xLjIuNyAvIDE1LjIuMy40IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKE8pXG52YXIgJGtleXMgPSByZXF1aXJlKCcuL19vYmplY3Qta2V5cy1pbnRlcm5hbCcpO1xudmFyIGhpZGRlbktleXMgPSByZXF1aXJlKCcuL19lbnVtLWJ1Zy1rZXlzJykuY29uY2F0KCdsZW5ndGgnLCAncHJvdG90eXBlJyk7XG5cbmV4cG9ydHMuZiA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzIHx8IGZ1bmN0aW9uIGdldE93blByb3BlcnR5TmFtZXMoTykge1xuICByZXR1cm4gJGtleXMoTywgaGlkZGVuS2V5cyk7XG59O1xuIiwiLy8gMTkuMS4yLjkgLyAxNS4yLjMuMiBPYmplY3QuZ2V0UHJvdG90eXBlT2YoTylcbnZhciBoYXMgPSByZXF1aXJlKCcuL19oYXMnKTtcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4vX3RvLW9iamVjdCcpO1xudmFyIElFX1BST1RPID0gcmVxdWlyZSgnLi9fc2hhcmVkLWtleScpKCdJRV9QUk9UTycpO1xudmFyIE9iamVjdFByb3RvID0gT2JqZWN0LnByb3RvdHlwZTtcblxubW9kdWxlLmV4cG9ydHMgPSBPYmplY3QuZ2V0UHJvdG90eXBlT2YgfHwgZnVuY3Rpb24gKE8pIHtcbiAgTyA9IHRvT2JqZWN0KE8pO1xuICBpZiAoaGFzKE8sIElFX1BST1RPKSkgcmV0dXJuIE9bSUVfUFJPVE9dO1xuICBpZiAodHlwZW9mIE8uY29uc3RydWN0b3IgPT0gJ2Z1bmN0aW9uJyAmJiBPIGluc3RhbmNlb2YgTy5jb25zdHJ1Y3Rvcikge1xuICAgIHJldHVybiBPLmNvbnN0cnVjdG9yLnByb3RvdHlwZTtcbiAgfSByZXR1cm4gTyBpbnN0YW5jZW9mIE9iamVjdCA/IE9iamVjdFByb3RvIDogbnVsbDtcbn07XG4iLCIvLyAyMi4xLjMuMzEgQXJyYXkucHJvdG90eXBlW0BAdW5zY29wYWJsZXNdXG52YXIgVU5TQ09QQUJMRVMgPSByZXF1aXJlKCcuL193a3MnKSgndW5zY29wYWJsZXMnKTtcbnZhciBBcnJheVByb3RvID0gQXJyYXkucHJvdG90eXBlO1xuaWYgKEFycmF5UHJvdG9bVU5TQ09QQUJMRVNdID09IHVuZGVmaW5lZCkgcmVxdWlyZSgnLi9faGlkZScpKEFycmF5UHJvdG8sIFVOU0NPUEFCTEVTLCB7fSk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChrZXkpIHtcbiAgQXJyYXlQcm90b1tVTlNDT1BBQkxFU11ba2V5XSA9IHRydWU7XG59O1xuIiwidmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCwgVFlQRSkge1xuICBpZiAoIWlzT2JqZWN0KGl0KSB8fCBpdC5fdCAhPT0gVFlQRSkgdGhyb3cgVHlwZUVycm9yKCdJbmNvbXBhdGlibGUgcmVjZWl2ZXIsICcgKyBUWVBFICsgJyByZXF1aXJlZCEnKTtcbiAgcmV0dXJuIGl0O1xufTtcbiIsInZhciBkZWYgPSByZXF1aXJlKCcuL19vYmplY3QtZHAnKS5mO1xudmFyIGhhcyA9IHJlcXVpcmUoJy4vX2hhcycpO1xudmFyIFRBRyA9IHJlcXVpcmUoJy4vX3drcycpKCd0b1N0cmluZ1RhZycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCwgdGFnLCBzdGF0KSB7XG4gIGlmIChpdCAmJiAhaGFzKGl0ID0gc3RhdCA/IGl0IDogaXQucHJvdG90eXBlLCBUQUcpKSBkZWYoaXQsIFRBRywgeyBjb25maWd1cmFibGU6IHRydWUsIHZhbHVlOiB0YWcgfSk7XG59O1xuIiwidmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBkZWZpbmVkID0gcmVxdWlyZSgnLi9fZGVmaW5lZCcpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi9fZmFpbHMnKTtcbnZhciBzcGFjZXMgPSByZXF1aXJlKCcuL19zdHJpbmctd3MnKTtcbnZhciBzcGFjZSA9ICdbJyArIHNwYWNlcyArICddJztcbnZhciBub24gPSAnXFx1MjAwYlxcdTAwODUnO1xudmFyIGx0cmltID0gUmVnRXhwKCdeJyArIHNwYWNlICsgc3BhY2UgKyAnKicpO1xudmFyIHJ0cmltID0gUmVnRXhwKHNwYWNlICsgc3BhY2UgKyAnKiQnKTtcblxudmFyIGV4cG9ydGVyID0gZnVuY3Rpb24gKEtFWSwgZXhlYywgQUxJQVMpIHtcbiAgdmFyIGV4cCA9IHt9O1xuICB2YXIgRk9SQ0UgPSBmYWlscyhmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuICEhc3BhY2VzW0tFWV0oKSB8fCBub25bS0VZXSgpICE9IG5vbjtcbiAgfSk7XG4gIHZhciBmbiA9IGV4cFtLRVldID0gRk9SQ0UgPyBleGVjKHRyaW0pIDogc3BhY2VzW0tFWV07XG4gIGlmIChBTElBUykgZXhwW0FMSUFTXSA9IGZuO1xuICAkZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqIEZPUkNFLCAnU3RyaW5nJywgZXhwKTtcbn07XG5cbi8vIDEgLT4gU3RyaW5nI3RyaW1MZWZ0XG4vLyAyIC0+IFN0cmluZyN0cmltUmlnaHRcbi8vIDMgLT4gU3RyaW5nI3RyaW1cbnZhciB0cmltID0gZXhwb3J0ZXIudHJpbSA9IGZ1bmN0aW9uIChzdHJpbmcsIFRZUEUpIHtcbiAgc3RyaW5nID0gU3RyaW5nKGRlZmluZWQoc3RyaW5nKSk7XG4gIGlmIChUWVBFICYgMSkgc3RyaW5nID0gc3RyaW5nLnJlcGxhY2UobHRyaW0sICcnKTtcbiAgaWYgKFRZUEUgJiAyKSBzdHJpbmcgPSBzdHJpbmcucmVwbGFjZShydHJpbSwgJycpO1xuICByZXR1cm4gc3RyaW5nO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRlcjtcbiIsIm1vZHVsZS5leHBvcnRzID0ge307XG4iLCIndXNlIHN0cmljdCc7XG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi9fZ2xvYmFsJyk7XG52YXIgZFAgPSByZXF1aXJlKCcuL19vYmplY3QtZHAnKTtcbnZhciBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJyk7XG52YXIgU1BFQ0lFUyA9IHJlcXVpcmUoJy4vX3drcycpKCdzcGVjaWVzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKEtFWSkge1xuICB2YXIgQyA9IGdsb2JhbFtLRVldO1xuICBpZiAoREVTQ1JJUFRPUlMgJiYgQyAmJiAhQ1tTUEVDSUVTXSkgZFAuZihDLCBTUEVDSUVTLCB7XG4gICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpczsgfVxuICB9KTtcbn07XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCwgQ29uc3RydWN0b3IsIG5hbWUsIGZvcmJpZGRlbkZpZWxkKSB7XG4gIGlmICghKGl0IGluc3RhbmNlb2YgQ29uc3RydWN0b3IpIHx8IChmb3JiaWRkZW5GaWVsZCAhPT0gdW5kZWZpbmVkICYmIGZvcmJpZGRlbkZpZWxkIGluIGl0KSkge1xuICAgIHRocm93IFR5cGVFcnJvcihuYW1lICsgJzogaW5jb3JyZWN0IGludm9jYXRpb24hJyk7XG4gIH0gcmV0dXJuIGl0O1xufTtcbiIsInZhciByZWRlZmluZSA9IHJlcXVpcmUoJy4vX3JlZGVmaW5lJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICh0YXJnZXQsIHNyYywgc2FmZSkge1xuICBmb3IgKHZhciBrZXkgaW4gc3JjKSByZWRlZmluZSh0YXJnZXQsIGtleSwgc3JjW2tleV0sIHNhZmUpO1xuICByZXR1cm4gdGFyZ2V0O1xufTtcbiIsIi8vIGZhbGxiYWNrIGZvciBub24tYXJyYXktbGlrZSBFUzMgYW5kIG5vbi1lbnVtZXJhYmxlIG9sZCBWOCBzdHJpbmdzXG52YXIgY29mID0gcmVxdWlyZSgnLi9fY29mJyk7XG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcHJvdG90eXBlLWJ1aWx0aW5zXG5tb2R1bGUuZXhwb3J0cyA9IE9iamVjdCgneicpLnByb3BlcnR5SXNFbnVtZXJhYmxlKDApID8gT2JqZWN0IDogZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBjb2YoaXQpID09ICdTdHJpbmcnID8gaXQuc3BsaXQoJycpIDogT2JqZWN0KGl0KTtcbn07XG4iLCJleHBvcnRzLmYgPSB7fS5wcm9wZXJ0eUlzRW51bWVyYWJsZTtcbiIsIi8vIGdldHRpbmcgdGFnIGZyb20gMTkuMS4zLjYgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZygpXG52YXIgY29mID0gcmVxdWlyZSgnLi9fY29mJyk7XG52YXIgVEFHID0gcmVxdWlyZSgnLi9fd2tzJykoJ3RvU3RyaW5nVGFnJyk7XG4vLyBFUzMgd3JvbmcgaGVyZVxudmFyIEFSRyA9IGNvZihmdW5jdGlvbiAoKSB7IHJldHVybiBhcmd1bWVudHM7IH0oKSkgPT0gJ0FyZ3VtZW50cyc7XG5cbi8vIGZhbGxiYWNrIGZvciBJRTExIFNjcmlwdCBBY2Nlc3MgRGVuaWVkIGVycm9yXG52YXIgdHJ5R2V0ID0gZnVuY3Rpb24gKGl0LCBrZXkpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gaXRba2V5XTtcbiAgfSBjYXRjaCAoZSkgeyAvKiBlbXB0eSAqLyB9XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICB2YXIgTywgVCwgQjtcbiAgcmV0dXJuIGl0ID09PSB1bmRlZmluZWQgPyAnVW5kZWZpbmVkJyA6IGl0ID09PSBudWxsID8gJ051bGwnXG4gICAgLy8gQEB0b1N0cmluZ1RhZyBjYXNlXG4gICAgOiB0eXBlb2YgKFQgPSB0cnlHZXQoTyA9IE9iamVjdChpdCksIFRBRykpID09ICdzdHJpbmcnID8gVFxuICAgIC8vIGJ1aWx0aW5UYWcgY2FzZVxuICAgIDogQVJHID8gY29mKE8pXG4gICAgLy8gRVMzIGFyZ3VtZW50cyBmYWxsYmFja1xuICAgIDogKEIgPSBjb2YoTykpID09ICdPYmplY3QnICYmIHR5cGVvZiBPLmNhbGxlZSA9PSAnZnVuY3Rpb24nID8gJ0FyZ3VtZW50cycgOiBCO1xufTtcbiIsIi8vIDcuMy4yMCBTcGVjaWVzQ29uc3RydWN0b3IoTywgZGVmYXVsdENvbnN0cnVjdG9yKVxudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgYUZ1bmN0aW9uID0gcmVxdWlyZSgnLi9fYS1mdW5jdGlvbicpO1xudmFyIFNQRUNJRVMgPSByZXF1aXJlKCcuL193a3MnKSgnc3BlY2llcycpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoTywgRCkge1xuICB2YXIgQyA9IGFuT2JqZWN0KE8pLmNvbnN0cnVjdG9yO1xuICB2YXIgUztcbiAgcmV0dXJuIEMgPT09IHVuZGVmaW5lZCB8fCAoUyA9IGFuT2JqZWN0KEMpW1NQRUNJRVNdKSA9PSB1bmRlZmluZWQgPyBEIDogYUZ1bmN0aW9uKFMpO1xufTtcbiIsInZhciBjb3JlID0gcmVxdWlyZSgnLi9fY29yZScpO1xudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpO1xudmFyIFNIQVJFRCA9ICdfX2NvcmUtanNfc2hhcmVkX18nO1xudmFyIHN0b3JlID0gZ2xvYmFsW1NIQVJFRF0gfHwgKGdsb2JhbFtTSEFSRURdID0ge30pO1xuXG4obW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoa2V5LCB2YWx1ZSkge1xuICByZXR1cm4gc3RvcmVba2V5XSB8fCAoc3RvcmVba2V5XSA9IHZhbHVlICE9PSB1bmRlZmluZWQgPyB2YWx1ZSA6IHt9KTtcbn0pKCd2ZXJzaW9ucycsIFtdKS5wdXNoKHtcbiAgdmVyc2lvbjogY29yZS52ZXJzaW9uLFxuICBtb2RlOiByZXF1aXJlKCcuL19saWJyYXJ5JykgPyAncHVyZScgOiAnZ2xvYmFsJyxcbiAgY29weXJpZ2h0OiAnwqkgMjAxOSBEZW5pcyBQdXNoa2FyZXYgKHpsb2lyb2NrLnJ1KSdcbn0pO1xuIiwiLy8gZmFsc2UgLT4gQXJyYXkjaW5kZXhPZlxuLy8gdHJ1ZSAgLT4gQXJyYXkjaW5jbHVkZXNcbnZhciB0b0lPYmplY3QgPSByZXF1aXJlKCcuL190by1pb2JqZWN0Jyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuL190by1sZW5ndGgnKTtcbnZhciB0b0Fic29sdXRlSW5kZXggPSByZXF1aXJlKCcuL190by1hYnNvbHV0ZS1pbmRleCcpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoSVNfSU5DTFVERVMpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uICgkdGhpcywgZWwsIGZyb21JbmRleCkge1xuICAgIHZhciBPID0gdG9JT2JqZWN0KCR0aGlzKTtcbiAgICB2YXIgbGVuZ3RoID0gdG9MZW5ndGgoTy5sZW5ndGgpO1xuICAgIHZhciBpbmRleCA9IHRvQWJzb2x1dGVJbmRleChmcm9tSW5kZXgsIGxlbmd0aCk7XG4gICAgdmFyIHZhbHVlO1xuICAgIC8vIEFycmF5I2luY2x1ZGVzIHVzZXMgU2FtZVZhbHVlWmVybyBlcXVhbGl0eSBhbGdvcml0aG1cbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tc2VsZi1jb21wYXJlXG4gICAgaWYgKElTX0lOQ0xVREVTICYmIGVsICE9IGVsKSB3aGlsZSAobGVuZ3RoID4gaW5kZXgpIHtcbiAgICAgIHZhbHVlID0gT1tpbmRleCsrXTtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zZWxmLWNvbXBhcmVcbiAgICAgIGlmICh2YWx1ZSAhPSB2YWx1ZSkgcmV0dXJuIHRydWU7XG4gICAgLy8gQXJyYXkjaW5kZXhPZiBpZ25vcmVzIGhvbGVzLCBBcnJheSNpbmNsdWRlcyAtIG5vdFxuICAgIH0gZWxzZSBmb3IgKDtsZW5ndGggPiBpbmRleDsgaW5kZXgrKykgaWYgKElTX0lOQ0xVREVTIHx8IGluZGV4IGluIE8pIHtcbiAgICAgIGlmIChPW2luZGV4XSA9PT0gZWwpIHJldHVybiBJU19JTkNMVURFUyB8fCBpbmRleCB8fCAwO1xuICAgIH0gcmV0dXJuICFJU19JTkNMVURFUyAmJiAtMTtcbiAgfTtcbn07XG4iLCJleHBvcnRzLmYgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzO1xuIiwiLy8gNy4yLjIgSXNBcnJheShhcmd1bWVudClcbnZhciBjb2YgPSByZXF1aXJlKCcuL19jb2YnKTtcbm1vZHVsZS5leHBvcnRzID0gQXJyYXkuaXNBcnJheSB8fCBmdW5jdGlvbiBpc0FycmF5KGFyZykge1xuICByZXR1cm4gY29mKGFyZykgPT0gJ0FycmF5Jztcbn07XG4iLCJ2YXIgSVRFUkFUT1IgPSByZXF1aXJlKCcuL193a3MnKSgnaXRlcmF0b3InKTtcbnZhciBTQUZFX0NMT1NJTkcgPSBmYWxzZTtcblxudHJ5IHtcbiAgdmFyIHJpdGVyID0gWzddW0lURVJBVE9SXSgpO1xuICByaXRlclsncmV0dXJuJ10gPSBmdW5jdGlvbiAoKSB7IFNBRkVfQ0xPU0lORyA9IHRydWU7IH07XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby10aHJvdy1saXRlcmFsXG4gIEFycmF5LmZyb20ocml0ZXIsIGZ1bmN0aW9uICgpIHsgdGhyb3cgMjsgfSk7XG59IGNhdGNoIChlKSB7IC8qIGVtcHR5ICovIH1cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoZXhlYywgc2tpcENsb3NpbmcpIHtcbiAgaWYgKCFza2lwQ2xvc2luZyAmJiAhU0FGRV9DTE9TSU5HKSByZXR1cm4gZmFsc2U7XG4gIHZhciBzYWZlID0gZmFsc2U7XG4gIHRyeSB7XG4gICAgdmFyIGFyciA9IFs3XTtcbiAgICB2YXIgaXRlciA9IGFycltJVEVSQVRPUl0oKTtcbiAgICBpdGVyLm5leHQgPSBmdW5jdGlvbiAoKSB7IHJldHVybiB7IGRvbmU6IHNhZmUgPSB0cnVlIH07IH07XG4gICAgYXJyW0lURVJBVE9SXSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGl0ZXI7IH07XG4gICAgZXhlYyhhcnIpO1xuICB9IGNhdGNoIChlKSB7IC8qIGVtcHR5ICovIH1cbiAgcmV0dXJuIHNhZmU7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gMjEuMi41LjMgZ2V0IFJlZ0V4cC5wcm90b3R5cGUuZmxhZ3NcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciB0aGF0ID0gYW5PYmplY3QodGhpcyk7XG4gIHZhciByZXN1bHQgPSAnJztcbiAgaWYgKHRoYXQuZ2xvYmFsKSByZXN1bHQgKz0gJ2cnO1xuICBpZiAodGhhdC5pZ25vcmVDYXNlKSByZXN1bHQgKz0gJ2knO1xuICBpZiAodGhhdC5tdWx0aWxpbmUpIHJlc3VsdCArPSAnbSc7XG4gIGlmICh0aGF0LnVuaWNvZGUpIHJlc3VsdCArPSAndSc7XG4gIGlmICh0aGF0LnN0aWNreSkgcmVzdWx0ICs9ICd5JztcbiAgcmV0dXJuIHJlc3VsdDtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBjbGFzc29mID0gcmVxdWlyZSgnLi9fY2xhc3NvZicpO1xudmFyIGJ1aWx0aW5FeGVjID0gUmVnRXhwLnByb3RvdHlwZS5leGVjO1xuXG4gLy8gYFJlZ0V4cEV4ZWNgIGFic3RyYWN0IG9wZXJhdGlvblxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtcmVnZXhwZXhlY1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoUiwgUykge1xuICB2YXIgZXhlYyA9IFIuZXhlYztcbiAgaWYgKHR5cGVvZiBleGVjID09PSAnZnVuY3Rpb24nKSB7XG4gICAgdmFyIHJlc3VsdCA9IGV4ZWMuY2FsbChSLCBTKTtcbiAgICBpZiAodHlwZW9mIHJlc3VsdCAhPT0gJ29iamVjdCcpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1JlZ0V4cCBleGVjIG1ldGhvZCByZXR1cm5lZCBzb21ldGhpbmcgb3RoZXIgdGhhbiBhbiBPYmplY3Qgb3IgbnVsbCcpO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG4gIGlmIChjbGFzc29mKFIpICE9PSAnUmVnRXhwJykge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1JlZ0V4cCNleGVjIGNhbGxlZCBvbiBpbmNvbXBhdGlibGUgcmVjZWl2ZXInKTtcbiAgfVxuICByZXR1cm4gYnVpbHRpbkV4ZWMuY2FsbChSLCBTKTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5yZXF1aXJlKCcuL2VzNi5yZWdleHAuZXhlYycpO1xudmFyIHJlZGVmaW5lID0gcmVxdWlyZSgnLi9fcmVkZWZpbmUnKTtcbnZhciBoaWRlID0gcmVxdWlyZSgnLi9faGlkZScpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi9fZmFpbHMnKTtcbnZhciBkZWZpbmVkID0gcmVxdWlyZSgnLi9fZGVmaW5lZCcpO1xudmFyIHdrcyA9IHJlcXVpcmUoJy4vX3drcycpO1xudmFyIHJlZ2V4cEV4ZWMgPSByZXF1aXJlKCcuL19yZWdleHAtZXhlYycpO1xuXG52YXIgU1BFQ0lFUyA9IHdrcygnc3BlY2llcycpO1xuXG52YXIgUkVQTEFDRV9TVVBQT1JUU19OQU1FRF9HUk9VUFMgPSAhZmFpbHMoZnVuY3Rpb24gKCkge1xuICAvLyAjcmVwbGFjZSBuZWVkcyBidWlsdC1pbiBzdXBwb3J0IGZvciBuYW1lZCBncm91cHMuXG4gIC8vICNtYXRjaCB3b3JrcyBmaW5lIGJlY2F1c2UgaXQganVzdCByZXR1cm4gdGhlIGV4ZWMgcmVzdWx0cywgZXZlbiBpZiBpdCBoYXNcbiAgLy8gYSBcImdyb3BzXCIgcHJvcGVydHkuXG4gIHZhciByZSA9IC8uLztcbiAgcmUuZXhlYyA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgcmVzdWx0ID0gW107XG4gICAgcmVzdWx0Lmdyb3VwcyA9IHsgYTogJzcnIH07XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfTtcbiAgcmV0dXJuICcnLnJlcGxhY2UocmUsICckPGE+JykgIT09ICc3Jztcbn0pO1xuXG52YXIgU1BMSVRfV09SS1NfV0lUSF9PVkVSV1JJVFRFTl9FWEVDID0gKGZ1bmN0aW9uICgpIHtcbiAgLy8gQ2hyb21lIDUxIGhhcyBhIGJ1Z2d5IFwic3BsaXRcIiBpbXBsZW1lbnRhdGlvbiB3aGVuIFJlZ0V4cCNleGVjICE9PSBuYXRpdmVFeGVjXG4gIHZhciByZSA9IC8oPzopLztcbiAgdmFyIG9yaWdpbmFsRXhlYyA9IHJlLmV4ZWM7XG4gIHJlLmV4ZWMgPSBmdW5jdGlvbiAoKSB7IHJldHVybiBvcmlnaW5hbEV4ZWMuYXBwbHkodGhpcywgYXJndW1lbnRzKTsgfTtcbiAgdmFyIHJlc3VsdCA9ICdhYicuc3BsaXQocmUpO1xuICByZXR1cm4gcmVzdWx0Lmxlbmd0aCA9PT0gMiAmJiByZXN1bHRbMF0gPT09ICdhJyAmJiByZXN1bHRbMV0gPT09ICdiJztcbn0pKCk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKEtFWSwgbGVuZ3RoLCBleGVjKSB7XG4gIHZhciBTWU1CT0wgPSB3a3MoS0VZKTtcblxuICB2YXIgREVMRUdBVEVTX1RPX1NZTUJPTCA9ICFmYWlscyhmdW5jdGlvbiAoKSB7XG4gICAgLy8gU3RyaW5nIG1ldGhvZHMgY2FsbCBzeW1ib2wtbmFtZWQgUmVnRXAgbWV0aG9kc1xuICAgIHZhciBPID0ge307XG4gICAgT1tTWU1CT0xdID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gNzsgfTtcbiAgICByZXR1cm4gJydbS0VZXShPKSAhPSA3O1xuICB9KTtcblxuICB2YXIgREVMRUdBVEVTX1RPX0VYRUMgPSBERUxFR0FURVNfVE9fU1lNQk9MID8gIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgICAvLyBTeW1ib2wtbmFtZWQgUmVnRXhwIG1ldGhvZHMgY2FsbCAuZXhlY1xuICAgIHZhciBleGVjQ2FsbGVkID0gZmFsc2U7XG4gICAgdmFyIHJlID0gL2EvO1xuICAgIHJlLmV4ZWMgPSBmdW5jdGlvbiAoKSB7IGV4ZWNDYWxsZWQgPSB0cnVlOyByZXR1cm4gbnVsbDsgfTtcbiAgICBpZiAoS0VZID09PSAnc3BsaXQnKSB7XG4gICAgICAvLyBSZWdFeHBbQEBzcGxpdF0gZG9lc24ndCBjYWxsIHRoZSByZWdleCdzIGV4ZWMgbWV0aG9kLCBidXQgZmlyc3QgY3JlYXRlc1xuICAgICAgLy8gYSBuZXcgb25lLiBXZSBuZWVkIHRvIHJldHVybiB0aGUgcGF0Y2hlZCByZWdleCB3aGVuIGNyZWF0aW5nIHRoZSBuZXcgb25lLlxuICAgICAgcmUuY29uc3RydWN0b3IgPSB7fTtcbiAgICAgIHJlLmNvbnN0cnVjdG9yW1NQRUNJRVNdID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gcmU7IH07XG4gICAgfVxuICAgIHJlW1NZTUJPTF0oJycpO1xuICAgIHJldHVybiAhZXhlY0NhbGxlZDtcbiAgfSkgOiB1bmRlZmluZWQ7XG5cbiAgaWYgKFxuICAgICFERUxFR0FURVNfVE9fU1lNQk9MIHx8XG4gICAgIURFTEVHQVRFU19UT19FWEVDIHx8XG4gICAgKEtFWSA9PT0gJ3JlcGxhY2UnICYmICFSRVBMQUNFX1NVUFBPUlRTX05BTUVEX0dST1VQUykgfHxcbiAgICAoS0VZID09PSAnc3BsaXQnICYmICFTUExJVF9XT1JLU19XSVRIX09WRVJXUklUVEVOX0VYRUMpXG4gICkge1xuICAgIHZhciBuYXRpdmVSZWdFeHBNZXRob2QgPSAvLi9bU1lNQk9MXTtcbiAgICB2YXIgZm5zID0gZXhlYyhcbiAgICAgIGRlZmluZWQsXG4gICAgICBTWU1CT0wsXG4gICAgICAnJ1tLRVldLFxuICAgICAgZnVuY3Rpb24gbWF5YmVDYWxsTmF0aXZlKG5hdGl2ZU1ldGhvZCwgcmVnZXhwLCBzdHIsIGFyZzIsIGZvcmNlU3RyaW5nTWV0aG9kKSB7XG4gICAgICAgIGlmIChyZWdleHAuZXhlYyA9PT0gcmVnZXhwRXhlYykge1xuICAgICAgICAgIGlmIChERUxFR0FURVNfVE9fU1lNQk9MICYmICFmb3JjZVN0cmluZ01ldGhvZCkge1xuICAgICAgICAgICAgLy8gVGhlIG5hdGl2ZSBTdHJpbmcgbWV0aG9kIGFscmVhZHkgZGVsZWdhdGVzIHRvIEBAbWV0aG9kICh0aGlzXG4gICAgICAgICAgICAvLyBwb2x5ZmlsbGVkIGZ1bmN0aW9uKSwgbGVhc2luZyB0byBpbmZpbml0ZSByZWN1cnNpb24uXG4gICAgICAgICAgICAvLyBXZSBhdm9pZCBpdCBieSBkaXJlY3RseSBjYWxsaW5nIHRoZSBuYXRpdmUgQEBtZXRob2QgbWV0aG9kLlxuICAgICAgICAgICAgcmV0dXJuIHsgZG9uZTogdHJ1ZSwgdmFsdWU6IG5hdGl2ZVJlZ0V4cE1ldGhvZC5jYWxsKHJlZ2V4cCwgc3RyLCBhcmcyKSB9O1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4geyBkb25lOiB0cnVlLCB2YWx1ZTogbmF0aXZlTWV0aG9kLmNhbGwoc3RyLCByZWdleHAsIGFyZzIpIH07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHsgZG9uZTogZmFsc2UgfTtcbiAgICAgIH1cbiAgICApO1xuICAgIHZhciBzdHJmbiA9IGZuc1swXTtcbiAgICB2YXIgcnhmbiA9IGZuc1sxXTtcblxuICAgIHJlZGVmaW5lKFN0cmluZy5wcm90b3R5cGUsIEtFWSwgc3RyZm4pO1xuICAgIGhpZGUoUmVnRXhwLnByb3RvdHlwZSwgU1lNQk9MLCBsZW5ndGggPT0gMlxuICAgICAgLy8gMjEuMi41LjggUmVnRXhwLnByb3RvdHlwZVtAQHJlcGxhY2VdKHN0cmluZywgcmVwbGFjZVZhbHVlKVxuICAgICAgLy8gMjEuMi41LjExIFJlZ0V4cC5wcm90b3R5cGVbQEBzcGxpdF0oc3RyaW5nLCBsaW1pdClcbiAgICAgID8gZnVuY3Rpb24gKHN0cmluZywgYXJnKSB7IHJldHVybiByeGZuLmNhbGwoc3RyaW5nLCB0aGlzLCBhcmcpOyB9XG4gICAgICAvLyAyMS4yLjUuNiBSZWdFeHAucHJvdG90eXBlW0BAbWF0Y2hdKHN0cmluZylcbiAgICAgIC8vIDIxLjIuNS45IFJlZ0V4cC5wcm90b3R5cGVbQEBzZWFyY2hdKHN0cmluZylcbiAgICAgIDogZnVuY3Rpb24gKHN0cmluZykgeyByZXR1cm4gcnhmbi5jYWxsKHN0cmluZywgdGhpcyk7IH1cbiAgICApO1xuICB9XG59O1xuIiwidmFyIGN0eCA9IHJlcXVpcmUoJy4vX2N0eCcpO1xudmFyIGNhbGwgPSByZXF1aXJlKCcuL19pdGVyLWNhbGwnKTtcbnZhciBpc0FycmF5SXRlciA9IHJlcXVpcmUoJy4vX2lzLWFycmF5LWl0ZXInKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi9fdG8tbGVuZ3RoJyk7XG52YXIgZ2V0SXRlckZuID0gcmVxdWlyZSgnLi9jb3JlLmdldC1pdGVyYXRvci1tZXRob2QnKTtcbnZhciBCUkVBSyA9IHt9O1xudmFyIFJFVFVSTiA9IHt9O1xudmFyIGV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdGVyYWJsZSwgZW50cmllcywgZm4sIHRoYXQsIElURVJBVE9SKSB7XG4gIHZhciBpdGVyRm4gPSBJVEVSQVRPUiA/IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGl0ZXJhYmxlOyB9IDogZ2V0SXRlckZuKGl0ZXJhYmxlKTtcbiAgdmFyIGYgPSBjdHgoZm4sIHRoYXQsIGVudHJpZXMgPyAyIDogMSk7XG4gIHZhciBpbmRleCA9IDA7XG4gIHZhciBsZW5ndGgsIHN0ZXAsIGl0ZXJhdG9yLCByZXN1bHQ7XG4gIGlmICh0eXBlb2YgaXRlckZuICE9ICdmdW5jdGlvbicpIHRocm93IFR5cGVFcnJvcihpdGVyYWJsZSArICcgaXMgbm90IGl0ZXJhYmxlIScpO1xuICAvLyBmYXN0IGNhc2UgZm9yIGFycmF5cyB3aXRoIGRlZmF1bHQgaXRlcmF0b3JcbiAgaWYgKGlzQXJyYXlJdGVyKGl0ZXJGbikpIGZvciAobGVuZ3RoID0gdG9MZW5ndGgoaXRlcmFibGUubGVuZ3RoKTsgbGVuZ3RoID4gaW5kZXg7IGluZGV4KyspIHtcbiAgICByZXN1bHQgPSBlbnRyaWVzID8gZihhbk9iamVjdChzdGVwID0gaXRlcmFibGVbaW5kZXhdKVswXSwgc3RlcFsxXSkgOiBmKGl0ZXJhYmxlW2luZGV4XSk7XG4gICAgaWYgKHJlc3VsdCA9PT0gQlJFQUsgfHwgcmVzdWx0ID09PSBSRVRVUk4pIHJldHVybiByZXN1bHQ7XG4gIH0gZWxzZSBmb3IgKGl0ZXJhdG9yID0gaXRlckZuLmNhbGwoaXRlcmFibGUpOyAhKHN0ZXAgPSBpdGVyYXRvci5uZXh0KCkpLmRvbmU7KSB7XG4gICAgcmVzdWx0ID0gY2FsbChpdGVyYXRvciwgZiwgc3RlcC52YWx1ZSwgZW50cmllcyk7XG4gICAgaWYgKHJlc3VsdCA9PT0gQlJFQUsgfHwgcmVzdWx0ID09PSBSRVRVUk4pIHJldHVybiByZXN1bHQ7XG4gIH1cbn07XG5leHBvcnRzLkJSRUFLID0gQlJFQUs7XG5leHBvcnRzLlJFVFVSTiA9IFJFVFVSTjtcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuL19nbG9iYWwnKTtcbnZhciBuYXZpZ2F0b3IgPSBnbG9iYWwubmF2aWdhdG9yO1xuXG5tb2R1bGUuZXhwb3J0cyA9IG5hdmlnYXRvciAmJiBuYXZpZ2F0b3IudXNlckFnZW50IHx8ICcnO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciByZWRlZmluZSA9IHJlcXVpcmUoJy4vX3JlZGVmaW5lJyk7XG52YXIgcmVkZWZpbmVBbGwgPSByZXF1aXJlKCcuL19yZWRlZmluZS1hbGwnKTtcbnZhciBtZXRhID0gcmVxdWlyZSgnLi9fbWV0YScpO1xudmFyIGZvck9mID0gcmVxdWlyZSgnLi9fZm9yLW9mJyk7XG52YXIgYW5JbnN0YW5jZSA9IHJlcXVpcmUoJy4vX2FuLWluc3RhbmNlJyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4vX2ZhaWxzJyk7XG52YXIgJGl0ZXJEZXRlY3QgPSByZXF1aXJlKCcuL19pdGVyLWRldGVjdCcpO1xudmFyIHNldFRvU3RyaW5nVGFnID0gcmVxdWlyZSgnLi9fc2V0LXRvLXN0cmluZy10YWcnKTtcbnZhciBpbmhlcml0SWZSZXF1aXJlZCA9IHJlcXVpcmUoJy4vX2luaGVyaXQtaWYtcmVxdWlyZWQnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoTkFNRSwgd3JhcHBlciwgbWV0aG9kcywgY29tbW9uLCBJU19NQVAsIElTX1dFQUspIHtcbiAgdmFyIEJhc2UgPSBnbG9iYWxbTkFNRV07XG4gIHZhciBDID0gQmFzZTtcbiAgdmFyIEFEREVSID0gSVNfTUFQID8gJ3NldCcgOiAnYWRkJztcbiAgdmFyIHByb3RvID0gQyAmJiBDLnByb3RvdHlwZTtcbiAgdmFyIE8gPSB7fTtcbiAgdmFyIGZpeE1ldGhvZCA9IGZ1bmN0aW9uIChLRVkpIHtcbiAgICB2YXIgZm4gPSBwcm90b1tLRVldO1xuICAgIHJlZGVmaW5lKHByb3RvLCBLRVksXG4gICAgICBLRVkgPT0gJ2RlbGV0ZScgPyBmdW5jdGlvbiAoYSkge1xuICAgICAgICByZXR1cm4gSVNfV0VBSyAmJiAhaXNPYmplY3QoYSkgPyBmYWxzZSA6IGZuLmNhbGwodGhpcywgYSA9PT0gMCA/IDAgOiBhKTtcbiAgICAgIH0gOiBLRVkgPT0gJ2hhcycgPyBmdW5jdGlvbiBoYXMoYSkge1xuICAgICAgICByZXR1cm4gSVNfV0VBSyAmJiAhaXNPYmplY3QoYSkgPyBmYWxzZSA6IGZuLmNhbGwodGhpcywgYSA9PT0gMCA/IDAgOiBhKTtcbiAgICAgIH0gOiBLRVkgPT0gJ2dldCcgPyBmdW5jdGlvbiBnZXQoYSkge1xuICAgICAgICByZXR1cm4gSVNfV0VBSyAmJiAhaXNPYmplY3QoYSkgPyB1bmRlZmluZWQgOiBmbi5jYWxsKHRoaXMsIGEgPT09IDAgPyAwIDogYSk7XG4gICAgICB9IDogS0VZID09ICdhZGQnID8gZnVuY3Rpb24gYWRkKGEpIHsgZm4uY2FsbCh0aGlzLCBhID09PSAwID8gMCA6IGEpOyByZXR1cm4gdGhpczsgfVxuICAgICAgICA6IGZ1bmN0aW9uIHNldChhLCBiKSB7IGZuLmNhbGwodGhpcywgYSA9PT0gMCA/IDAgOiBhLCBiKTsgcmV0dXJuIHRoaXM7IH1cbiAgICApO1xuICB9O1xuICBpZiAodHlwZW9mIEMgIT0gJ2Z1bmN0aW9uJyB8fCAhKElTX1dFQUsgfHwgcHJvdG8uZm9yRWFjaCAmJiAhZmFpbHMoZnVuY3Rpb24gKCkge1xuICAgIG5ldyBDKCkuZW50cmllcygpLm5leHQoKTtcbiAgfSkpKSB7XG4gICAgLy8gY3JlYXRlIGNvbGxlY3Rpb24gY29uc3RydWN0b3JcbiAgICBDID0gY29tbW9uLmdldENvbnN0cnVjdG9yKHdyYXBwZXIsIE5BTUUsIElTX01BUCwgQURERVIpO1xuICAgIHJlZGVmaW5lQWxsKEMucHJvdG90eXBlLCBtZXRob2RzKTtcbiAgICBtZXRhLk5FRUQgPSB0cnVlO1xuICB9IGVsc2Uge1xuICAgIHZhciBpbnN0YW5jZSA9IG5ldyBDKCk7XG4gICAgLy8gZWFybHkgaW1wbGVtZW50YXRpb25zIG5vdCBzdXBwb3J0cyBjaGFpbmluZ1xuICAgIHZhciBIQVNOVF9DSEFJTklORyA9IGluc3RhbmNlW0FEREVSXShJU19XRUFLID8ge30gOiAtMCwgMSkgIT0gaW5zdGFuY2U7XG4gICAgLy8gVjggfiAgQ2hyb21pdW0gNDAtIHdlYWstY29sbGVjdGlvbnMgdGhyb3dzIG9uIHByaW1pdGl2ZXMsIGJ1dCBzaG91bGQgcmV0dXJuIGZhbHNlXG4gICAgdmFyIFRIUk9XU19PTl9QUklNSVRJVkVTID0gZmFpbHMoZnVuY3Rpb24gKCkgeyBpbnN0YW5jZS5oYXMoMSk7IH0pO1xuICAgIC8vIG1vc3QgZWFybHkgaW1wbGVtZW50YXRpb25zIGRvZXNuJ3Qgc3VwcG9ydHMgaXRlcmFibGVzLCBtb3N0IG1vZGVybiAtIG5vdCBjbG9zZSBpdCBjb3JyZWN0bHlcbiAgICB2YXIgQUNDRVBUX0lURVJBQkxFUyA9ICRpdGVyRGV0ZWN0KGZ1bmN0aW9uIChpdGVyKSB7IG5ldyBDKGl0ZXIpOyB9KTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1uZXdcbiAgICAvLyBmb3IgZWFybHkgaW1wbGVtZW50YXRpb25zIC0wIGFuZCArMCBub3QgdGhlIHNhbWVcbiAgICB2YXIgQlVHR1lfWkVSTyA9ICFJU19XRUFLICYmIGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgICAgIC8vIFY4IH4gQ2hyb21pdW0gNDItIGZhaWxzIG9ubHkgd2l0aCA1KyBlbGVtZW50c1xuICAgICAgdmFyICRpbnN0YW5jZSA9IG5ldyBDKCk7XG4gICAgICB2YXIgaW5kZXggPSA1O1xuICAgICAgd2hpbGUgKGluZGV4LS0pICRpbnN0YW5jZVtBRERFUl0oaW5kZXgsIGluZGV4KTtcbiAgICAgIHJldHVybiAhJGluc3RhbmNlLmhhcygtMCk7XG4gICAgfSk7XG4gICAgaWYgKCFBQ0NFUFRfSVRFUkFCTEVTKSB7XG4gICAgICBDID0gd3JhcHBlcihmdW5jdGlvbiAodGFyZ2V0LCBpdGVyYWJsZSkge1xuICAgICAgICBhbkluc3RhbmNlKHRhcmdldCwgQywgTkFNRSk7XG4gICAgICAgIHZhciB0aGF0ID0gaW5oZXJpdElmUmVxdWlyZWQobmV3IEJhc2UoKSwgdGFyZ2V0LCBDKTtcbiAgICAgICAgaWYgKGl0ZXJhYmxlICE9IHVuZGVmaW5lZCkgZm9yT2YoaXRlcmFibGUsIElTX01BUCwgdGhhdFtBRERFUl0sIHRoYXQpO1xuICAgICAgICByZXR1cm4gdGhhdDtcbiAgICAgIH0pO1xuICAgICAgQy5wcm90b3R5cGUgPSBwcm90bztcbiAgICAgIHByb3RvLmNvbnN0cnVjdG9yID0gQztcbiAgICB9XG4gICAgaWYgKFRIUk9XU19PTl9QUklNSVRJVkVTIHx8IEJVR0dZX1pFUk8pIHtcbiAgICAgIGZpeE1ldGhvZCgnZGVsZXRlJyk7XG4gICAgICBmaXhNZXRob2QoJ2hhcycpO1xuICAgICAgSVNfTUFQICYmIGZpeE1ldGhvZCgnZ2V0Jyk7XG4gICAgfVxuICAgIGlmIChCVUdHWV9aRVJPIHx8IEhBU05UX0NIQUlOSU5HKSBmaXhNZXRob2QoQURERVIpO1xuICAgIC8vIHdlYWsgY29sbGVjdGlvbnMgc2hvdWxkIG5vdCBjb250YWlucyAuY2xlYXIgbWV0aG9kXG4gICAgaWYgKElTX1dFQUsgJiYgcHJvdG8uY2xlYXIpIGRlbGV0ZSBwcm90by5jbGVhcjtcbiAgfVxuXG4gIHNldFRvU3RyaW5nVGFnKEMsIE5BTUUpO1xuXG4gIE9bTkFNRV0gPSBDO1xuICAkZXhwb3J0KCRleHBvcnQuRyArICRleHBvcnQuVyArICRleHBvcnQuRiAqIChDICE9IEJhc2UpLCBPKTtcblxuICBpZiAoIUlTX1dFQUspIGNvbW1vbi5zZXRTdHJvbmcoQywgTkFNRSwgSVNfTUFQKTtcblxuICByZXR1cm4gQztcbn07XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi9fZ2xvYmFsJyk7XG52YXIgaGlkZSA9IHJlcXVpcmUoJy4vX2hpZGUnKTtcbnZhciB1aWQgPSByZXF1aXJlKCcuL191aWQnKTtcbnZhciBUWVBFRCA9IHVpZCgndHlwZWRfYXJyYXknKTtcbnZhciBWSUVXID0gdWlkKCd2aWV3Jyk7XG52YXIgQUJWID0gISEoZ2xvYmFsLkFycmF5QnVmZmVyICYmIGdsb2JhbC5EYXRhVmlldyk7XG52YXIgQ09OU1RSID0gQUJWO1xudmFyIGkgPSAwO1xudmFyIGwgPSA5O1xudmFyIFR5cGVkO1xuXG52YXIgVHlwZWRBcnJheUNvbnN0cnVjdG9ycyA9IChcbiAgJ0ludDhBcnJheSxVaW50OEFycmF5LFVpbnQ4Q2xhbXBlZEFycmF5LEludDE2QXJyYXksVWludDE2QXJyYXksSW50MzJBcnJheSxVaW50MzJBcnJheSxGbG9hdDMyQXJyYXksRmxvYXQ2NEFycmF5J1xuKS5zcGxpdCgnLCcpO1xuXG53aGlsZSAoaSA8IGwpIHtcbiAgaWYgKFR5cGVkID0gZ2xvYmFsW1R5cGVkQXJyYXlDb25zdHJ1Y3RvcnNbaSsrXV0pIHtcbiAgICBoaWRlKFR5cGVkLnByb3RvdHlwZSwgVFlQRUQsIHRydWUpO1xuICAgIGhpZGUoVHlwZWQucHJvdG90eXBlLCBWSUVXLCB0cnVlKTtcbiAgfSBlbHNlIENPTlNUUiA9IGZhbHNlO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgQUJWOiBBQlYsXG4gIENPTlNUUjogQ09OU1RSLFxuICBUWVBFRDogVFlQRUQsXG4gIFZJRVc6IFZJRVdcbn07XG4iLCJpbXBvcnQge3N1YnNjcmliZUlkLCB1bnN1YnNjcmliZUlkLCBnZXRMb2NhbFN0b3JhZ2VJdGVtcywgc2F2ZUxvY2FsU3RvcmFnZUl0ZW1zfSBmcm9tICcuL3N0b3JhZ2UuanMnXG5pbXBvcnQge0xvY2FsU3RvcmFnZUl0ZW19IGZyb20gJy4vY29tbW9uLmpzJ1xuaW1wb3J0IHtzZXRDdXJyZW50U3RhdGVGb3JJZH0gZnJvbSAnLi9tb25pdG9yaW5nLmpzJ1xuaW1wb3J0IGJyb3dzZXIgZnJvbSAnd2ViZXh0ZW5zaW9uLXBvbHlmaWxsJ1xuXG5sZXQgVU5TVUJTQ1JJQkVfVEVYVCA9ICd1bnN1YnNjcmliZS1yZXYnXG5sZXQgU1VCU0NSSUJFX1RFWFQgPSAnc3Vic2NyaWJlLXJldidcblxuaWYgKGxvY2F0aW9uLmhvc3RuYW1lLm1hdGNoKC9yZXZlZGRpdFxcLmNvbSQvKSkge1xuICAgIFVOU1VCU0NSSUJFX1RFWFQgPSAndW5zdWJzY3JpYmUnXG4gICAgU1VCU0NSSUJFX1RFWFQgPSAnc3Vic2NyaWJlJ1xufVxuXG5leHBvcnQgY29uc3Qgc2V0VGV4dEFuZEZ1bmN0aW9uX3N1YnNjcmliZSA9IChpZCwgZWxlbWVudCwgY29tbWVudEJvZHkpID0+IHtcbiAgICByZXR1cm4gJChlbGVtZW50KS50ZXh0KFNVQlNDUklCRV9URVhUKS5vZmYoJ2NsaWNrJykuY2xpY2soKGV2ZW50T2JqKSA9PiBzdWJzY3JpYmVJZF9jaGFuZ2VUZXh0KGlkLCBldmVudE9iai50YXJnZXQsIGNvbW1lbnRCb2R5KSlcbn1cblxuZXhwb3J0IGNvbnN0IHNldFRleHRBbmRGdW5jdGlvbl91bnN1YnNjcmliZSA9IChpZCwgZWxlbWVudCwgY29tbWVudEJvZHkpID0+IHtcbiAgICByZXR1cm4gJChlbGVtZW50KS50ZXh0KFVOU1VCU0NSSUJFX1RFWFQpLm9mZignY2xpY2snKS5jbGljaygoZXZlbnRPYmopID0+IHVuc3Vic2NyaWJlSWRfY2hhbmdlVGV4dChpZCwgZXZlbnRPYmoudGFyZ2V0LCBjb21tZW50Qm9keSkpXG59XG5cbmNvbnN0IHN1YnNjcmliZUlkX2NoYW5nZVRleHQgPSAoaWQsIGVsZW1lbnQsIGNvbW1lbnRCb2R5ID0gJycpID0+IHtcbiAgICBzdWJzY3JpYmVJZChpZCwgYXN5bmMgKCkgPT4ge1xuICAgICAgICBzZXRUZXh0QW5kRnVuY3Rpb25fdW5zdWJzY3JpYmUoaWQsIGVsZW1lbnQsIGNvbW1lbnRCb2R5KVxuICAgICAgICBhd2FpdCBzZXRDdXJyZW50U3RhdGVGb3JJZChpZCwgd2luZG93LmxvY2F0aW9uLmhyZWYpXG4gICAgICAgIGlmIChjb21tZW50Qm9keSkge1xuICAgICAgICAgICAgZ2V0TG9jYWxTdG9yYWdlSXRlbXMoJ290aGVyJywgZmFsc2UpXG4gICAgICAgICAgICAudGhlbihzdG9yZWRJdGVtcyA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3QgaXRlbSA9IHN0b3JlZEl0ZW1zW2lkXVxuICAgICAgICAgICAgICAgIC8vIGNvbnRlbnQgZnJvbSBwcml2YXRlIHN1YnMgd29uJ3QgYmUgc2F2ZWQgYi9jXG4gICAgICAgICAgICAgICAgLy8gbm8gaXRlbSBpcyBjcmVhdGVkIGZvciB0aGF0IChyZWRkaXQgcmV0dXJucyBubyBkYXRhIGZvclxuICAgICAgICAgICAgICAgIC8vIG5vbi1sb2dnZWQtaW4gYXV0aGVudGljYXRlZCBhcHBzKVxuICAgICAgICAgICAgICAgIGlmIChpdGVtKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGl0ZW1PYmogPSBuZXcgTG9jYWxTdG9yYWdlSXRlbSh7b2JqZWN0OiBpdGVtfSlcbiAgICAgICAgICAgICAgICAgICAgaXRlbU9iai5zZXRUZXh0KGNvbW1lbnRCb2R5KVxuICAgICAgICAgICAgICAgICAgICBzdG9yZWRJdGVtc1tpZF0gPSBpdGVtT2JqXG4gICAgICAgICAgICAgICAgICAgIHNhdmVMb2NhbFN0b3JhZ2VJdGVtcygnb3RoZXInLCBmYWxzZSwgc3RvcmVkSXRlbXMpXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSlcbiAgICAgICAgfVxuICAgIH0pXG4gICAgcmV0dXJuIGZhbHNlXG59XG5cbmNvbnN0IHVuc3Vic2NyaWJlSWRfY2hhbmdlVGV4dCA9IChpZCwgZWxlbWVudCwgY29tbWVudEJvZHkpID0+IHtcbiAgICB1bnN1YnNjcmliZUlkKGlkLCAoKSA9PiB7XG4gICAgICAgIHNldFRleHRBbmRGdW5jdGlvbl9zdWJzY3JpYmUoaWQsIGVsZW1lbnQsIGNvbW1lbnRCb2R5KVxuICAgIH0pXG4gICAgcmV0dXJuIGZhbHNlXG59XG4iLCJpbXBvcnQge2xvb2t1cEl0ZW1zQnlJRCwgbG9va3VwSXRlbXNCeVVzZXIsIGdldEF1dGh9IGZyb20gJy4vcmVxdWVzdHMuanMnXG5pbXBvcnQge1JFTU9WRUQsIERFTEVURUQsIEFQUFJPVkVELCBMT0NLRUQsIFVOTE9DS0VELCBFRElURUQsXG4gICAgICAgIGFkZExvY2FsU3RvcmFnZUl0ZW1zLCBnZXRMb2NhbFN0b3JhZ2VJdGVtcyxcbiAgICAgICAgTUFYX1NZTkNfU1RPUkFHRV9JVEVNU19QRVJfT0JKRUNULCBNQVhfU1lOQ19TVE9SQUdFX0NIQU5HRVMsXG4gICAgICAgIGdldE9iamVjdE5hbWVzRm9yVGhpbmcgfSBmcm9tICcuL3N0b3JhZ2UuanMnXG5pbXBvcnQge2NyZWF0ZU5vdGlmaWNhdGlvbiwgdXBkYXRlQmFkZ2VVbnNlZW5Db3VudCwgdHJpbURpY3RfYnlfbnVtYmVyVmFsdWVkQXR0cmlidXRlLFxuICAgICAgICBpc1VzZXJEZWxldGVkSXRlbSwgaXNSZW1vdmVkSXRlbSxcbiAgICAgICAgSXRlbUZvclN0b3JhZ2UsIExvY2FsU3RvcmFnZUl0ZW0sIENoYW5nZUZvclN0b3JhZ2V9IGZyb20gJy4vY29tbW9uLmpzJ1xuaW1wb3J0IGJyb3dzZXIgZnJvbSAnd2ViZXh0ZW5zaW9uLXBvbHlmaWxsJ1xuXG5cbmNvbnN0IFNVQlNDUklCRURfRlJPTV9SRURESVQgPSAwXG5jb25zdCBTVUJTQ1JJQkVEX0ZST01fUkVWRURESVQgPSAxXG5jb25zdCBTVUJTQ1JJQkVEX0ZST01fTkEgPSAyXG5cbmV4cG9ydCBjb25zdCBzZXRDdXJyZW50U3RhdGVGb3JJZCA9IChpZCwgc3Vic2NyaWJlZEZyb21VUkwpID0+IHtcbiAgICBsZXQgc3Vic2NyaWJlZEZyb20gPSBTVUJTQ1JJQkVEX0ZST01fUkVERElUXG4gICAgaWYgKHN1YnNjcmliZWRGcm9tVVJMLm1hdGNoKC9eaHR0cHM6XFwvXFwvd3d3LnJldmVkZGl0LmNvbS8pKSB7XG4gICAgICAgIHN1YnNjcmliZWRGcm9tID0gU1VCU0NSSUJFRF9GUk9NX1JFVkVERElUXG4gICAgfVxuICAgIHJldHVybiBjaHJvbWUuc3RvcmFnZS5zeW5jLmdldChudWxsLCBmdW5jdGlvbiAoc3RvcmFnZSkge1xuICAgICAgICBnZXRBdXRoKClcbiAgICAgICAgLnRoZW4oKGF1dGgpID0+IHtcbiAgICAgICAgICAgIHJldHVybiBjaGVja0ZvckNoYW5nZXNfdGhpbmdfYnlJZChbaWRdLCAnb3RoZXInLCBmYWxzZSwgYXV0aCwgc3RvcmFnZSwgc3Vic2NyaWJlZEZyb20sIHt9KVxuICAgICAgICB9KVxuICAgIH0pXG59XG5cbmNvbnN0IE1JTl9RVUFSQU5USU5FRF9DSEVDS19JTlRFUlZBTF9JTl9TRUNPTkRTID0gNSooNjAqNjAqMjQpXG5cbmV4cG9ydCBjb25zdCBjaGVja0ZvckNoYW5nZXMgPSAoKSA9PiB7XG4gICAgY2hyb21lLnN0b3JhZ2Uuc3luYy5nZXQobnVsbCwgZnVuY3Rpb24gKHN0b3JhZ2UpIHtcbiAgICAgICAgdmFyIHVzZXJzID0gT2JqZWN0LmtleXMoc3RvcmFnZS51c2VyX3N1YnNjcmlwdGlvbnMpXG4gICAgICAgIHZhciBvdGhlciA9IE9iamVjdC5rZXlzKHN0b3JhZ2Uub3RoZXJfc3Vic2NyaXB0aW9ucylcbiAgICAgICAgaWYgKHVzZXJzLmxlbmd0aCB8fCBvdGhlci5sZW5ndGgpIHtcbiAgICAgICAgICAgIGNvbnN0IG5vdyA9IE1hdGguZmxvb3IobmV3IERhdGUoKS8xMDAwKVxuICAgICAgICAgICAgLy8gY2hlY2sgZm9yIHF1YXJhbnRpbmVkIGNvbnRlbnQgb25jZSBpbiBhd2hpbGUgYW5kIGVuYWJsZSBtb25pdG9yX3F1YXJhbnRpbmVkIGlmIHNvbWUgaXMgZm91bmRcbiAgICAgICAgICAgIC8vIGJlY2F1c2UgdXNlcnMgbWF5IG5vdCBrbm93IHRvIGVuYWJsZSB0aGlzIG9wdGlvblxuICAgICAgICAgICAgLy8gdGhlIG9wdGlvbiBpcyBvZmYgYnkgZGVmYXVsdCBiZWNhdXNlIGl0IGNhbiBhcHBlYXIgdG8gY2F1c2UgYW4gb2NjYXNpb25hbCBsb2dvdXRcbiAgICAgICAgICAgIGlmICghIHN0b3JhZ2Uub3B0aW9ucy5tb25pdG9yX3F1YXJhbnRpbmVkXG4gICAgICAgICAgICAgICAgJiYgKCEgc3RvcmFnZS5sYXN0X2NoZWNrX3F1YXJhbnRpbmVkXG4gICAgICAgICAgICAgICAgICAgIHx8IChub3cgLSBzdG9yYWdlLmxhc3RfY2hlY2tfcXVhcmFudGluZWQpID4gTUlOX1FVQVJBTlRJTkVEX0NIRUNLX0lOVEVSVkFMX0lOX1NFQ09ORFMgKSkge1xuICAgICAgICAgICAgICAgIHN0b3JhZ2UudGVtcFZhcl9tb25pdG9yX3F1YXJhbnRpbmVkID0gdHJ1ZVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZ2V0QXV0aCgpXG4gICAgICAgICAgICAudGhlbigoYXV0aCkgPT4ge1xuICAgICAgICAgICAgICAgIGNoZWNrRm9yQ2hhbmdlc19vdGhlcihhdXRoLCBzdG9yYWdlKVxuICAgICAgICAgICAgICAgIHJldHVybiBjaGVja0ZvckNoYW5nZXNfdXNlcnModXNlcnMsIGF1dGgsIHN0b3JhZ2UpXG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgLnRoZW4oKCkgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IG5ld1N0b3JhZ2UgPSB7bGFzdF9jaGVjazogbm93fVxuICAgICAgICAgICAgICAgIGlmIChzdG9yYWdlLnRlbXBWYXJfbW9uaXRvcl9xdWFyYW50aW5lZCB8fCBzdG9yYWdlLm9wdGlvbnMubW9uaXRvcl9xdWFyYW50aW5lZCkge1xuICAgICAgICAgICAgICAgICAgICBuZXdTdG9yYWdlLmxhc3RfY2hlY2tfcXVhcmFudGluZWQgPSBub3dcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKHN0b3JhZ2UudGVtcFZhcl9xdWFyYW50aW5lZF9jb250ZW50X2ZvdW5kKSB7XG4gICAgICAgICAgICAgICAgICAgIG5ld1N0b3JhZ2Uub3B0aW9ucyA9IHN0b3JhZ2Uub3B0aW9uc1xuICAgICAgICAgICAgICAgICAgICBuZXdTdG9yYWdlLm9wdGlvbnMubW9uaXRvcl9xdWFyYW50aW5lZCA9IHRydWVcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY2hyb21lLnN0b3JhZ2Uuc3luYy5zZXQobmV3U3RvcmFnZSlcbiAgICAgICAgICAgIH0pXG4gICAgICAgIH1cbiAgICB9KVxufVxuXG5jb25zdCBjaGVja0ZvckNoYW5nZXNfdXNlcnMgPSBhc3luYyAodXNlcnMsIGF1dGgsIHN0b3JhZ2UpID0+IHtcbiAgICBpZiAodXNlcnMubGVuZ3RoKSB7XG4gICAgICAgIGNvbnN0IHVzZXIgPSB1c2Vyc1swXVxuICAgICAgICByZXR1cm4gbG9va3VwSXRlbXNCeVVzZXIodXNlciwgJycsICduZXcnLCAnJywgc3RvcmFnZS5vcHRpb25zLm1vbml0b3JfcXVhcmFudGluZWQsIHN0b3JhZ2UudGVtcFZhcl9tb25pdG9yX3F1YXJhbnRpbmVkLCBhdXRoKVxuICAgICAgICAudGhlbihpdGVtcyA9PiB7XG4gICAgICAgICAgICBpZiAoISBpdGVtcykgcmV0dXJuIC8vIGhhbmRsZSBleHBlY3RlZCBlcnJvcnNcbiAgICAgICAgICAgIHZhciBpZHMgPSBbXVxuICAgICAgICAgICAgY29uc3QgaXRlbUxvb2t1cCA9IHt9XG4gICAgICAgICAgICBpdGVtcy5mb3JFYWNoKGl0ZW0gPT4ge1xuICAgICAgICAgICAgICAgIGlkcy5wdXNoKGl0ZW0uZGF0YS5uYW1lKVxuICAgICAgICAgICAgICAgIGl0ZW1Mb29rdXBbaXRlbS5kYXRhLm5hbWVdID0gaXRlbS5kYXRhXG4gICAgICAgICAgICAgICAgaWYgKGl0ZW0uZGF0YS5xdWFyYW50aW5lKSB7XG4gICAgICAgICAgICAgICAgICAgIHN0b3JhZ2UudGVtcFZhcl9xdWFyYW50aW5lZF9jb250ZW50X2ZvdW5kID0gdHJ1ZVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICByZXR1cm4gY2hlY2tGb3JDaGFuZ2VzX3RoaW5nX2J5SWQoaWRzLCB1c2VyLCB0cnVlLCBhdXRoLCBzdG9yYWdlLCBTVUJTQ1JJQkVEX0ZST01fTkEsIGl0ZW1Mb29rdXApXG4gICAgICAgICAgICAudGhlbigoKSA9PiBjaGVja0ZvckNoYW5nZXNfdXNlcnModXNlcnMuc2xpY2UoMSksIGF1dGgsIHN0b3JhZ2UpKVxuICAgICAgICB9KVxuICAgIH1cbn1cblxuZnVuY3Rpb24gY2hlY2tGb3JDaGFuZ2VzX290aGVyKGF1dGgsIHN0b3JhZ2UpIHtcbiAgICBjb25zdCBpZHMgPSBPYmplY3Qua2V5cyhzdG9yYWdlLm90aGVyX3N1YnNjcmlwdGlvbnMpXG4gICAgaWYgKGlkcy5sZW5ndGgpIHtcbiAgICAgICAgY2hlY2tGb3JDaGFuZ2VzX3RoaW5nX2J5SWQoaWRzLCAnb3RoZXInLCBmYWxzZSwgYXV0aCwgc3RvcmFnZSwgU1VCU0NSSUJFRF9GUk9NX05BKVxuICAgIH1cbn1cblxuY29uc3QgY2hlY2tGb3JDaGFuZ2VzX3RoaW5nX2J5SWQgPSBhc3luYyAoaWRzLCB0aGluZywgaXNVc2VyLCBhdXRoLCBzdG9yYWdlLCBzdWJzY3JpYmVkRnJvbSwgaXRlbUxvb2t1cCA9IHt9KSA9PiB7XG4gICAgbGV0IHByb21pc2VcbiAgICBjb25zdCBtb25pdG9yX3F1YXJhbnRpbmVkID0gc3RvcmFnZS5vcHRpb25zLm1vbml0b3JfcXVhcmFudGluZWRcbiAgICBpZiAobG9jYXRpb24ucHJvdG9jb2wubWF0Y2goL15odHRwLykpIHtcbiAgICAgICAgLy8gdGhpcyBjb25kaXRpb24gaXMgZm9yIHdoZW4gdGhlIGNvZGUgaXMgYWN0aXZhdGVkIHZpYSBhIGNvbnRlbnQgc2NyaXB0IChlLmcuIHRoZSBzdWJzY3JpYmUgYnV0dG9uKSBhbmQgYnJvd3Nlci5jb29raWVzIGlzIHVuYXZhaWxhYmxlXG4gICAgICAgIHByb21pc2UgPSBicm93c2VyLnJ1bnRpbWUuc2VuZE1lc3NhZ2Uoe2FjdGlvbjogJ2dldC1yZWRkaXQtaXRlbXMtYnktaWQnLCBpZHMsIG1vbml0b3JfcXVhcmFudGluZWR9KVxuICAgIH0gZWxzZSB7XG4gICAgICAgIHByb21pc2UgPSBsb29rdXBJdGVtc0J5SUQoaWRzLCBhdXRoLCBtb25pdG9yX3F1YXJhbnRpbmVkLCBzdG9yYWdlLnRlbXBWYXJfbW9uaXRvcl9xdWFyYW50aW5lZClcbiAgICB9XG4gICAgcmV0dXJuIHByb21pc2VcbiAgICAudGhlbihyZXN1bHQgPT4ge1xuICAgICAgICBpZiAoISByZXN1bHQpIHJldHVybiAvLyBoYW5kbGUgZXhwZWN0ZWQgZXJyb3JzXG4gICAgICAgIGNvbnN0IGl0ZW1zID0gQXJyYXkuaXNBcnJheShyZXN1bHQpID8gcmVzdWx0IDogcmVzdWx0Lml0ZW1zXG4gICAgICAgIGlmICghIGl0ZW1zKSByZXR1cm4gLy8gaGFuZGxlIGV4cGVjdGVkIGVycm9ycyBmcm9tIG9ialxuICAgICAgICBjb25zdCByZW1vdmFsX3N0YXR1cyA9IHN0b3JhZ2Uub3B0aW9ucy5yZW1vdmFsX3N0YXR1c1xuICAgICAgICBjb25zdCBsb2NrX3N0YXR1cyA9IHN0b3JhZ2Uub3B0aW9ucy5sb2NrX3N0YXR1c1xuXG4gICAgICAgIGNvbnN0IGtleXMgPSBnZXRPYmplY3ROYW1lc0ZvclRoaW5nKHRoaW5nLCBpc1VzZXIpXG5cbiAgICAgICAgY29uc3Qga25vd25fcmVtb3ZlZCA9IHN0b3JhZ2Vba2V5c1sncmVtb3ZlZCddXSB8fCB7fVxuICAgICAgICBjb25zdCBrbm93bl9hcHByb3ZlZCA9IHN0b3JhZ2Vba2V5c1snYXBwcm92ZWQnXV0gfHwge31cbiAgICAgICAgY29uc3Qga25vd25fbG9ja2VkID0gc3RvcmFnZVtrZXlzWydsb2NrZWQnXV0gfHwge31cbiAgICAgICAgY29uc3Qga25vd25fdW5sb2NrZWQgPSBzdG9yYWdlW2tleXNbJ3VubG9ja2VkJ11dIHx8IHt9XG4gICAgICAgIGNvbnN0IGNoYW5nZXMgPSBzdG9yYWdlW2tleXNbJ2NoYW5nZXMnXV0gfHwgW11cbiAgICAgICAgaWYgKCEgaXNVc2VyKSB7XG4gICAgICAgICAgICBpdGVtTG9va3VwID0ge31cbiAgICAgICAgfVxuICAgICAgICBjb25zdCByZW1vdmVkID0gW10sIGFwcHJvdmVkID0gW10sIGxvY2tlZCA9IFtdLCB1bmxvY2tlZCA9IFtdXG4gICAgICAgIGl0ZW1zLmZvckVhY2goaXRlbVdyYXAgPT4ge1xuICAgICAgICAgICAgY29uc3QgaXRlbSA9IGl0ZW1XcmFwLmRhdGFcbiAgICAgICAgICAgIGlmICghIGlzVXNlcikge1xuICAgICAgICAgICAgICAgIGl0ZW1Mb29rdXBbaXRlbS5uYW1lXSA9IGl0ZW1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChpc1JlbW92ZWRJdGVtKGl0ZW0pKSB7XG4gICAgICAgICAgICAgICAgcmVtb3ZlZC5wdXNoKGl0ZW0ubmFtZSlcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgYXBwcm92ZWQucHVzaChpdGVtLm5hbWUpXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoaXRlbS5sb2NrZWQpIHtcbiAgICAgICAgICAgICAgICBsb2NrZWQucHVzaChpdGVtLm5hbWUpXG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHVubG9ja2VkLnB1c2goaXRlbS5uYW1lKVxuICAgICAgICAgICAgfVxuICAgICAgICB9KVxuICAgICAgICAvLyBtYXJrIGl0ZW1zIHRoYXQgZG8gbm90IGV4aXN0IGluIGFycmF5c1xuICAgICAgICAvLyBjaGFuZ2UgaGFwcGVucyBpZjpcbiAgICAgICAgLy8gICAgICB0cmFja2luZyByZW1vdmFscyAmJiBpdGVtIGlzIHJlbW92ZWRcbiAgICAgICAgLy8gICAgICB0cmFja2luZyByZW1vdmFscyAmJiBpdGVtIHdhcyBpbiByZW1vdmVkLCBub3cgaW4gYXBwcm92ZWRcbiAgICAgICAgY29uc3QgbmV3TG9jYWxTdG9yYWdlSXRlbXMgPSB7fVxuXG4gICAgICAgIGNvbnN0IGNoYW5nZVR5cGVzID0gW11cbiAgICAgICAgbGV0IG51bV9jaGFuZ2VzID0gMFxuICAgICAgICByZXR1cm4gZ2V0TG9jYWxTdG9yYWdlSXRlbXModGhpbmcsIGlzVXNlcilcbiAgICAgICAgLnRoZW4oZXhpc3RpbmdMb2NhbFN0b3JhZ2VJdGVtcyA9PiB7XG4gICAgICAgICAgICBpZiAocmVtb3ZhbF9zdGF0dXMudHJhY2spIHtcbiAgICAgICAgICAgICAgICBudW1fY2hhbmdlcyArPSBtYXJrQ2hhbmdlcyhyZW1vdmVkLCBSRU1PVkVELCAnbW9kIHJlbW92ZWQnLCBrbm93bl9yZW1vdmVkLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFwcHJvdmVkLCBBUFBST1ZFRCwgJ2FwcHJvdmVkJywga25vd25fYXBwcm92ZWQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hhbmdlcywgaXRlbUxvb2t1cCwgcmVtb3ZhbF9zdGF0dXMubm90aWZ5LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ld0xvY2FsU3RvcmFnZUl0ZW1zLCBjaGFuZ2VUeXBlcywgaXNVc2VyLCBzdWJzY3JpYmVkRnJvbSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBleGlzdGluZ0xvY2FsU3RvcmFnZUl0ZW1zKVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGxvY2tfc3RhdHVzLnRyYWNrKSB7XG4gICAgICAgICAgICAgICAgbnVtX2NoYW5nZXMgKz0gbWFya0NoYW5nZXMobG9ja2VkLCBMT0NLRUQsICdsb2NrZWQnLCBrbm93bl9sb2NrZWQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdW5sb2NrZWQsIFVOTE9DS0VELCAndW5sb2NrZWQnLCBrbm93bl91bmxvY2tlZCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaGFuZ2VzLCBpdGVtTG9va3VwLCBsb2NrX3N0YXR1cy5ub3RpZnksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3TG9jYWxTdG9yYWdlSXRlbXMsIGNoYW5nZVR5cGVzLCBpc1VzZXIsIHN1YnNjcmliZWRGcm9tLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV4aXN0aW5nTG9jYWxTdG9yYWdlSXRlbXMpXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChudW1fY2hhbmdlcyAmJiBjaGFuZ2VUeXBlcy5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICBjcmVhdGVOb3RpZmljYXRpb24oXG4gICAgICAgICAgICAgICAgICAgIHtub3RpZmljYXRpb25JZDogdGhpbmcsXG4gICAgICAgICAgICAgICAgICAgICB0aXRsZTogdGhpbmcsXG4gICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiBgJHtudW1fY2hhbmdlc30gbmV3IFske2NoYW5nZVR5cGVzLmpvaW4oJywgJyl9XSBhY3Rpb25zLCBjbGljayB0byB2aWV3YH0pXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gY2hyb21lLnN0b3JhZ2Uuc3luYy5zZXQoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFtrZXlzWydyZW1vdmVkJ11dOiB0cmltRGljdF9ieV9udW1iZXJWYWx1ZWRBdHRyaWJ1dGUoa25vd25fcmVtb3ZlZCwgTUFYX1NZTkNfU1RPUkFHRV9JVEVNU19QRVJfT0JKRUNULCAnYycpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFtrZXlzWydhcHByb3ZlZCddXTogdHJpbURpY3RfYnlfbnVtYmVyVmFsdWVkQXR0cmlidXRlKGtub3duX2FwcHJvdmVkLCBNQVhfU1lOQ19TVE9SQUdFX0lURU1TX1BFUl9PQkpFQ1QsICdjJyksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgW2tleXNbJ2xvY2tlZCddXTogdHJpbURpY3RfYnlfbnVtYmVyVmFsdWVkQXR0cmlidXRlKGtub3duX2xvY2tlZCwgTUFYX1NZTkNfU1RPUkFHRV9JVEVNU19QRVJfT0JKRUNULCAnYycpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFtrZXlzWyd1bmxvY2tlZCddXTogdHJpbURpY3RfYnlfbnVtYmVyVmFsdWVkQXR0cmlidXRlKGtub3duX3VubG9ja2VkLCBNQVhfU1lOQ19TVE9SQUdFX0lURU1TX1BFUl9PQkpFQ1QsICdjJyksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgW2tleXNbJ2NoYW5nZXMnXV06IGNoYW5nZXMuc2xpY2UoLU1BWF9TWU5DX1NUT1JBR0VfQ0hBTkdFUylcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sICgpID0+IHtcbiAgICAgICAgICAgICAgICB1cGRhdGVCYWRnZVVuc2VlbkNvdW50KClcbiAgICAgICAgICAgICAgICByZXR1cm4gYWRkTG9jYWxTdG9yYWdlSXRlbXMobmV3TG9jYWxTdG9yYWdlSXRlbXMsIHRoaW5nLCBpc1VzZXIpXG4gICAgICAgICAgICB9KVxuICAgICAgICB9KVxuICAgIH0pXG59XG5cbi8vIG5ld0xvY2FsU3RvcmFnZUl0ZW1zIG9wZXJhdGVzIGFzIGEgcmV0dXJuIHZhbHVlXG5mdW5jdGlvbiBtYXJrQ2hhbmdlcyAoYWxlcnRfY3VycmVudF9saXN0LCBhbGVydF90eXBlLCBhbGVydF90ZXh0LCBhbGVydF9rbm93bl9oYXNoLFxuICAgICAgICAgICAgICAgICAgICAgIG5vcm1hbF9jdXJyZW50X2xpc3QsIG5vcm1hbF90eXBlLCBub3JtYWxfdGV4dCwgbm9ybWFsX2tub3duX2hhc2gsXG4gICAgICAgICAgICAgICAgICAgICAgY2hhbmdlcywgaXRlbUxvb2t1cCwgbm90aWZ5LCBuZXdMb2NhbFN0b3JhZ2VJdGVtcywgY2hhbmdlVHlwZXMsXG4gICAgICAgICAgICAgICAgICAgICAgaXNVc2VyLCBzdWJzY3JpYmVkRnJvbSwgZXhpc3RpbmdMb2NhbFN0b3JhZ2VJdGVtcykge1xuICAgIGNvbnN0IGFsZXJ0X3Vuc2Vlbl9pZHMgPSBbXSxcbiAgICAgICAgICBub3JtYWxfdW5zZWVuX2lkcyA9IFtdLFxuICAgICAgICAgIGFsZXJ0X3VzZXJEZWxldGVkX3Vuc2Vlbl9pZHMgPSBbXSxcbiAgICAgICAgICBub3cgPSBNYXRoLmZsb29yKG5ldyBEYXRlKCkvMTAwMClcblxuICAgIGFsZXJ0X2N1cnJlbnRfbGlzdC5mb3JFYWNoKG5hbWUgPT4ge1xuICAgICAgICBjb25zdCBpdGVtID0gaXRlbUxvb2t1cFtuYW1lXVxuICAgICAgICAvLyAxLiBpbiB0aGUgY2FzZSBvZiBhIG5vbi11c2VycGFnZS10cmFja2VkIChpc1VzZXI9ZmFsc2UpIHJlbW92ZWQgY29tbWVudCwgZG9uJ3Qgb3ZlcndyaXRlIGxvY2FsIHN0b3JhZ2UgYi9jXG4gICAgICAgIC8vIGlmIGl0IHdlcmUgb3ZlcndyaXR0ZW4sIGJvZHkgd291bGQgYXBwZWFyIG9uIGhpc3RvcnkgcGFnZSBhcyBbcmVtb3ZlZF1cbiAgICAgICAgLy8gMi4gaW4gdGhlIGNhc2Ugb2YgdXNlcnBhZ2UgdHJhY2tpbmcgKGlzVXNlcj10cnVlKSwgb25seSBuZWVkIHRvIHNhdmUgdGhlIHRleHQgaW4gbG9jYWwgc3RvcmFnZVxuICAgICAgICAvLyB3aGVuIHRoZXJlIGlzIGEgY2hhbmdlLiB1c2VyIHBhZ2UgbG9va3VwIChpdGVtTG9va3VwKSB3aWxsIGhhdmUgb3JpZ2luYWwgdGV4dFxuICAgICAgICBpZiAoISBpc1VzZXIgJiYgISBleGlzdGluZ0xvY2FsU3RvcmFnZUl0ZW1zW25hbWVdKSB7XG4gICAgICAgICAgICBuZXdMb2NhbFN0b3JhZ2VJdGVtc1tuYW1lXSA9IG5ldyBMb2NhbFN0b3JhZ2VJdGVtKHtpdGVtOiBpdGVtLCBvYnNlcnZlZF91dGM6IG5vd30pXG4gICAgICAgIH1cbiAgICAgICAgaWYgKCEgKG5hbWUgaW4gYWxlcnRfa25vd25faGFzaCkpIHtcbiAgICAgICAgICAgIC8vIG1hcmtVbnNlZW4gaXMgYWx3YXlzIHRydWUgZXhjZXB0IHdoZW4gc3Vic2NyaWJpbmcgdmlhIGEgcmVkZGl0IChub3QgcmV2ZWRkaXQpIHBhZ2UgdG8gYSBuZXcgSUQgZm9yICdvdGhlcidcbiAgICAgICAgICAgIC8vIHN1YnNjcmlwdGlvbnMuIEFzIGxvbmcgYXMgdGhlIGl0ZW0gaXMgbm90ICdyZW1vdmVkJywgdGhlIGN1cnJlbnQgc3RhdGUgaXMgc3RvcmVkIGFzICdzZWVuJyAodW5zZWVuPWZhbHNlKS5cbiAgICAgICAgICAgIC8vIEl0IGlzIGFzc3VtZWQgdGhhdCB1c2VycyBzdWJzY3JpYmluZyBmcm9tIHJldmVkZGl0IHBhZ2VzIHdpbGwgYWxyZWFkeSBoYXZlIHNlZW4gYWxsIHRoZSBjdXJyZW50IG1vZCBhY3Rpb25zLFxuICAgICAgICAgICAgLy8gYW5kIHVzZXJzIHN1YnNjcmliaW5nIGZyb20gYSByZWRkaXQgcGFnZSB3aWxsIGFscmVhZHkga25vdyBhYm91dCBsb2NrZWQgaXRlbXNcbiAgICAgICAgICAgIGxldCBtYXJrVW5zZWVuID0gdHJ1ZVxuICAgICAgICAgICAgaWYgKChzdWJzY3JpYmVkRnJvbSA9PT0gU1VCU0NSSUJFRF9GUk9NX1JFRERJVCAmJiBhbGVydF90eXBlICE9PSBSRU1PVkVEKSB8fFxuICAgICAgICAgICAgICAgICBzdWJzY3JpYmVkRnJvbSA9PT0gU1VCU0NSSUJFRF9GUk9NX1JFVkVERElUKSB7XG4gICAgICAgICAgICAgICAgbWFya1Vuc2VlbiA9IGZhbHNlXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBhbGVydF9rbm93bl9oYXNoW25hbWVdID0gbmV3IEl0ZW1Gb3JTdG9yYWdlKGl0ZW0uY3JlYXRlZF91dGMsIG1hcmtVbnNlZW4pXG4gICAgICAgICAgICBkZWxldGUgbm9ybWFsX2tub3duX2hhc2hbbmFtZV1cbiAgICAgICAgICAgIGlmIChtYXJrVW5zZWVuKSB7XG4gICAgICAgICAgICAgICAgbGV0IGFsZXJ0X3R5cGVfdmFyID0gYWxlcnRfdHlwZVxuICAgICAgICAgICAgICAgIGlmIChpc1VzZXJEZWxldGVkSXRlbShpdGVtKSkge1xuICAgICAgICAgICAgICAgICAgICBhbGVydF90eXBlX3ZhciA9IERFTEVURURcbiAgICAgICAgICAgICAgICAgICAgYWxlcnRfdXNlckRlbGV0ZWRfdW5zZWVuX2lkcy5wdXNoKG5hbWUpXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgYWxlcnRfdW5zZWVuX2lkcy5wdXNoKG5hbWUpXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNoYW5nZXMucHVzaChuZXcgQ2hhbmdlRm9yU3RvcmFnZSh7aWQ6IG5hbWUsIG9ic2VydmVkX3V0Yzogbm93LCBjaGFuZ2VfdHlwZTogYWxlcnRfdHlwZV92YXJ9KSlcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChpc1VzZXIpIHtcbiAgICAgICAgICAgICAgICBuZXdMb2NhbFN0b3JhZ2VJdGVtc1tuYW1lXSA9IG5ldyBMb2NhbFN0b3JhZ2VJdGVtKHtpdGVtOiBpdGVtLCBvYnNlcnZlZF91dGM6IG5vd30pXG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9KVxuICAgIG5vcm1hbF9jdXJyZW50X2xpc3QuZm9yRWFjaChuYW1lID0+IHtcbiAgICAgICAgY29uc3QgaXRlbSA9IGl0ZW1Mb29rdXBbbmFtZV1cbiAgICAgICAgLy8gc2F2ZSBvcmlnaW5hbCB0ZXh0IGZvciBhbGwgbm9uLXVzZXJwYWdlLXRyYWNrZWQgaXRlbXMgc2luY2UgY29tbWVudCB0ZXh0IGNhbiBkaXNhcHBlYXJcbiAgICAgICAgaWYgKCEgaXNVc2VyICYmICEgZXhpc3RpbmdMb2NhbFN0b3JhZ2VJdGVtc1tuYW1lXSkge1xuICAgICAgICAgICAgbmV3TG9jYWxTdG9yYWdlSXRlbXNbbmFtZV0gPSBuZXcgTG9jYWxTdG9yYWdlSXRlbSh7aXRlbTogaXRlbSwgb2JzZXJ2ZWRfdXRjOiBub3d9KVxuICAgICAgICB9XG4gICAgICAgIGlmIChuYW1lIGluIGFsZXJ0X2tub3duX2hhc2gpIHtcbiAgICAgICAgICAgIG5vcm1hbF9rbm93bl9oYXNoW25hbWVdID0gbmV3IEl0ZW1Gb3JTdG9yYWdlKGl0ZW0uY3JlYXRlZF91dGMsIHRydWUpXG4gICAgICAgICAgICBkZWxldGUgYWxlcnRfa25vd25faGFzaFtuYW1lXVxuXG4gICAgICAgICAgICBjaGFuZ2VzLnB1c2gobmV3IENoYW5nZUZvclN0b3JhZ2Uoe2lkOiBuYW1lLCBvYnNlcnZlZF91dGM6IG5vdywgY2hhbmdlX3R5cGU6IG5vcm1hbF90eXBlfSkpXG4gICAgICAgICAgICBub3JtYWxfdW5zZWVuX2lkcy5wdXNoKG5hbWUpXG5cbiAgICAgICAgICAgIG5ld0xvY2FsU3RvcmFnZUl0ZW1zW25hbWVdID0gbmV3IExvY2FsU3RvcmFnZUl0ZW0oe2l0ZW06IGl0ZW0sIG9ic2VydmVkX3V0Yzogbm93fSlcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIG5vcm1hbF9rbm93bl9oYXNoW25hbWVdID0gbmV3IEl0ZW1Gb3JTdG9yYWdlKGl0ZW0uY3JlYXRlZF91dGMsIGZhbHNlKVxuICAgICAgICB9XG4gICAgfSlcbiAgICBjb25zdCBudW1fY2hhbmdlcyA9IGFsZXJ0X3Vuc2Vlbl9pZHMubGVuZ3RoICsgbm9ybWFsX3Vuc2Vlbl9pZHMubGVuZ3RoICsgYWxlcnRfdXNlckRlbGV0ZWRfdW5zZWVuX2lkcy5sZW5ndGhcbiAgICBpZiAobm90aWZ5ICYmIG51bV9jaGFuZ2VzKSB7XG4gICAgICAgIGlmIChhbGVydF91bnNlZW5faWRzLmxlbmd0aCkgY2hhbmdlVHlwZXMucHVzaChhbGVydF90ZXh0KVxuICAgICAgICBpZiAoYWxlcnRfdXNlckRlbGV0ZWRfdW5zZWVuX2lkcy5sZW5ndGgpIGNoYW5nZVR5cGVzLnB1c2goJ3VzZXIgZGVsZXRlZCcpXG4gICAgICAgIGlmIChub3JtYWxfdW5zZWVuX2lkcy5sZW5ndGgpIGNoYW5nZVR5cGVzLnB1c2gobm9ybWFsX3RleHQpXG4gICAgfVxuICAgIHJldHVybiBudW1fY2hhbmdlc1xufVxuIiwidmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG52YXIgZG9jdW1lbnQgPSByZXF1aXJlKCcuL19nbG9iYWwnKS5kb2N1bWVudDtcbi8vIHR5cGVvZiBkb2N1bWVudC5jcmVhdGVFbGVtZW50IGlzICdvYmplY3QnIGluIG9sZCBJRVxudmFyIGlzID0gaXNPYmplY3QoZG9jdW1lbnQpICYmIGlzT2JqZWN0KGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIGlzID8gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChpdCkgOiB7fTtcbn07XG4iLCJleHBvcnRzLmYgPSByZXF1aXJlKCcuL193a3MnKTtcbiIsInZhciBzaGFyZWQgPSByZXF1aXJlKCcuL19zaGFyZWQnKSgna2V5cycpO1xudmFyIHVpZCA9IHJlcXVpcmUoJy4vX3VpZCcpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoa2V5KSB7XG4gIHJldHVybiBzaGFyZWRba2V5XSB8fCAoc2hhcmVkW2tleV0gPSB1aWQoa2V5KSk7XG59O1xuIiwiLy8gSUUgOC0gZG9uJ3QgZW51bSBidWcga2V5c1xubW9kdWxlLmV4cG9ydHMgPSAoXG4gICdjb25zdHJ1Y3RvcixoYXNPd25Qcm9wZXJ0eSxpc1Byb3RvdHlwZU9mLHByb3BlcnR5SXNFbnVtZXJhYmxlLHRvTG9jYWxlU3RyaW5nLHRvU3RyaW5nLHZhbHVlT2YnXG4pLnNwbGl0KCcsJyk7XG4iLCJ2YXIgZG9jdW1lbnQgPSByZXF1aXJlKCcuL19nbG9iYWwnKS5kb2N1bWVudDtcbm1vZHVsZS5leHBvcnRzID0gZG9jdW1lbnQgJiYgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50O1xuIiwiLy8gV29ya3Mgd2l0aCBfX3Byb3RvX18gb25seS4gT2xkIHY4IGNhbid0IHdvcmsgd2l0aCBudWxsIHByb3RvIG9iamVjdHMuXG4vKiBlc2xpbnQtZGlzYWJsZSBuby1wcm90byAqL1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciBjaGVjayA9IGZ1bmN0aW9uIChPLCBwcm90bykge1xuICBhbk9iamVjdChPKTtcbiAgaWYgKCFpc09iamVjdChwcm90bykgJiYgcHJvdG8gIT09IG51bGwpIHRocm93IFR5cGVFcnJvcihwcm90byArIFwiOiBjYW4ndCBzZXQgYXMgcHJvdG90eXBlIVwiKTtcbn07XG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgc2V0OiBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHwgKCdfX3Byb3RvX18nIGluIHt9ID8gLy8gZXNsaW50LWRpc2FibGUtbGluZVxuICAgIGZ1bmN0aW9uICh0ZXN0LCBidWdneSwgc2V0KSB7XG4gICAgICB0cnkge1xuICAgICAgICBzZXQgPSByZXF1aXJlKCcuL19jdHgnKShGdW5jdGlvbi5jYWxsLCByZXF1aXJlKCcuL19vYmplY3QtZ29wZCcpLmYoT2JqZWN0LnByb3RvdHlwZSwgJ19fcHJvdG9fXycpLnNldCwgMik7XG4gICAgICAgIHNldCh0ZXN0LCBbXSk7XG4gICAgICAgIGJ1Z2d5ID0gISh0ZXN0IGluc3RhbmNlb2YgQXJyYXkpO1xuICAgICAgfSBjYXRjaCAoZSkgeyBidWdneSA9IHRydWU7IH1cbiAgICAgIHJldHVybiBmdW5jdGlvbiBzZXRQcm90b3R5cGVPZihPLCBwcm90bykge1xuICAgICAgICBjaGVjayhPLCBwcm90byk7XG4gICAgICAgIGlmIChidWdneSkgTy5fX3Byb3RvX18gPSBwcm90bztcbiAgICAgICAgZWxzZSBzZXQoTywgcHJvdG8pO1xuICAgICAgICByZXR1cm4gTztcbiAgICAgIH07XG4gICAgfSh7fSwgZmFsc2UpIDogdW5kZWZpbmVkKSxcbiAgY2hlY2s6IGNoZWNrXG59O1xuIiwibW9kdWxlLmV4cG9ydHMgPSAnXFx4MDlcXHgwQVxceDBCXFx4MENcXHgwRFxceDIwXFx4QTBcXHUxNjgwXFx1MTgwRVxcdTIwMDBcXHUyMDAxXFx1MjAwMlxcdTIwMDMnICtcbiAgJ1xcdTIwMDRcXHUyMDA1XFx1MjAwNlxcdTIwMDdcXHUyMDA4XFx1MjAwOVxcdTIwMEFcXHUyMDJGXFx1MjA1RlxcdTMwMDBcXHUyMDI4XFx1MjAyOVxcdUZFRkYnO1xuIiwidmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG52YXIgc2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKCcuL19zZXQtcHJvdG8nKS5zZXQ7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICh0aGF0LCB0YXJnZXQsIEMpIHtcbiAgdmFyIFMgPSB0YXJnZXQuY29uc3RydWN0b3I7XG4gIHZhciBQO1xuICBpZiAoUyAhPT0gQyAmJiB0eXBlb2YgUyA9PSAnZnVuY3Rpb24nICYmIChQID0gUy5wcm90b3R5cGUpICE9PSBDLnByb3RvdHlwZSAmJiBpc09iamVjdChQKSAmJiBzZXRQcm90b3R5cGVPZikge1xuICAgIHNldFByb3RvdHlwZU9mKHRoYXQsIFApO1xuICB9IHJldHVybiB0aGF0O1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciB0b0ludGVnZXIgPSByZXF1aXJlKCcuL190by1pbnRlZ2VyJyk7XG52YXIgZGVmaW5lZCA9IHJlcXVpcmUoJy4vX2RlZmluZWQnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiByZXBlYXQoY291bnQpIHtcbiAgdmFyIHN0ciA9IFN0cmluZyhkZWZpbmVkKHRoaXMpKTtcbiAgdmFyIHJlcyA9ICcnO1xuICB2YXIgbiA9IHRvSW50ZWdlcihjb3VudCk7XG4gIGlmIChuIDwgMCB8fCBuID09IEluZmluaXR5KSB0aHJvdyBSYW5nZUVycm9yKFwiQ291bnQgY2FuJ3QgYmUgbmVnYXRpdmVcIik7XG4gIGZvciAoO24gPiAwOyAobiA+Pj49IDEpICYmIChzdHIgKz0gc3RyKSkgaWYgKG4gJiAxKSByZXMgKz0gc3RyO1xuICByZXR1cm4gcmVzO1xufTtcbiIsIi8vIDIwLjIuMi4yOCBNYXRoLnNpZ24oeClcbm1vZHVsZS5leHBvcnRzID0gTWF0aC5zaWduIHx8IGZ1bmN0aW9uIHNpZ24oeCkge1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tc2VsZi1jb21wYXJlXG4gIHJldHVybiAoeCA9ICt4KSA9PSAwIHx8IHggIT0geCA/IHggOiB4IDwgMCA/IC0xIDogMTtcbn07XG4iLCIvLyAyMC4yLjIuMTQgTWF0aC5leHBtMSh4KVxudmFyICRleHBtMSA9IE1hdGguZXhwbTE7XG5tb2R1bGUuZXhwb3J0cyA9ICghJGV4cG0xXG4gIC8vIE9sZCBGRiBidWdcbiAgfHwgJGV4cG0xKDEwKSA+IDIyMDI1LjQ2NTc5NDgwNjcxOSB8fCAkZXhwbTEoMTApIDwgMjIwMjUuNDY1Nzk0ODA2NzE2NTE2OFxuICAvLyBUb3IgQnJvd3NlciBidWdcbiAgfHwgJGV4cG0xKC0yZS0xNykgIT0gLTJlLTE3XG4pID8gZnVuY3Rpb24gZXhwbTEoeCkge1xuICByZXR1cm4gKHggPSAreCkgPT0gMCA/IHggOiB4ID4gLTFlLTYgJiYgeCA8IDFlLTYgPyB4ICsgeCAqIHggLyAyIDogTWF0aC5leHAoeCkgLSAxO1xufSA6ICRleHBtMTtcbiIsInZhciB0b0ludGVnZXIgPSByZXF1aXJlKCcuL190by1pbnRlZ2VyJyk7XG52YXIgZGVmaW5lZCA9IHJlcXVpcmUoJy4vX2RlZmluZWQnKTtcbi8vIHRydWUgIC0+IFN0cmluZyNhdFxuLy8gZmFsc2UgLT4gU3RyaW5nI2NvZGVQb2ludEF0XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChUT19TVFJJTkcpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uICh0aGF0LCBwb3MpIHtcbiAgICB2YXIgcyA9IFN0cmluZyhkZWZpbmVkKHRoYXQpKTtcbiAgICB2YXIgaSA9IHRvSW50ZWdlcihwb3MpO1xuICAgIHZhciBsID0gcy5sZW5ndGg7XG4gICAgdmFyIGEsIGI7XG4gICAgaWYgKGkgPCAwIHx8IGkgPj0gbCkgcmV0dXJuIFRPX1NUUklORyA/ICcnIDogdW5kZWZpbmVkO1xuICAgIGEgPSBzLmNoYXJDb2RlQXQoaSk7XG4gICAgcmV0dXJuIGEgPCAweGQ4MDAgfHwgYSA+IDB4ZGJmZiB8fCBpICsgMSA9PT0gbCB8fCAoYiA9IHMuY2hhckNvZGVBdChpICsgMSkpIDwgMHhkYzAwIHx8IGIgPiAweGRmZmZcbiAgICAgID8gVE9fU1RSSU5HID8gcy5jaGFyQXQoaSkgOiBhXG4gICAgICA6IFRPX1NUUklORyA/IHMuc2xpY2UoaSwgaSArIDIpIDogKGEgLSAweGQ4MDAgPDwgMTApICsgKGIgLSAweGRjMDApICsgMHgxMDAwMDtcbiAgfTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgTElCUkFSWSA9IHJlcXVpcmUoJy4vX2xpYnJhcnknKTtcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgcmVkZWZpbmUgPSByZXF1aXJlKCcuL19yZWRlZmluZScpO1xudmFyIGhpZGUgPSByZXF1aXJlKCcuL19oaWRlJyk7XG52YXIgSXRlcmF0b3JzID0gcmVxdWlyZSgnLi9faXRlcmF0b3JzJyk7XG52YXIgJGl0ZXJDcmVhdGUgPSByZXF1aXJlKCcuL19pdGVyLWNyZWF0ZScpO1xudmFyIHNldFRvU3RyaW5nVGFnID0gcmVxdWlyZSgnLi9fc2V0LXRvLXN0cmluZy10YWcnKTtcbnZhciBnZXRQcm90b3R5cGVPZiA9IHJlcXVpcmUoJy4vX29iamVjdC1ncG8nKTtcbnZhciBJVEVSQVRPUiA9IHJlcXVpcmUoJy4vX3drcycpKCdpdGVyYXRvcicpO1xudmFyIEJVR0dZID0gIShbXS5rZXlzICYmICduZXh0JyBpbiBbXS5rZXlzKCkpOyAvLyBTYWZhcmkgaGFzIGJ1Z2d5IGl0ZXJhdG9ycyB3L28gYG5leHRgXG52YXIgRkZfSVRFUkFUT1IgPSAnQEBpdGVyYXRvcic7XG52YXIgS0VZUyA9ICdrZXlzJztcbnZhciBWQUxVRVMgPSAndmFsdWVzJztcblxudmFyIHJldHVyblRoaXMgPSBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzOyB9O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChCYXNlLCBOQU1FLCBDb25zdHJ1Y3RvciwgbmV4dCwgREVGQVVMVCwgSVNfU0VULCBGT1JDRUQpIHtcbiAgJGl0ZXJDcmVhdGUoQ29uc3RydWN0b3IsIE5BTUUsIG5leHQpO1xuICB2YXIgZ2V0TWV0aG9kID0gZnVuY3Rpb24gKGtpbmQpIHtcbiAgICBpZiAoIUJVR0dZICYmIGtpbmQgaW4gcHJvdG8pIHJldHVybiBwcm90b1traW5kXTtcbiAgICBzd2l0Y2ggKGtpbmQpIHtcbiAgICAgIGNhc2UgS0VZUzogcmV0dXJuIGZ1bmN0aW9uIGtleXMoKSB7IHJldHVybiBuZXcgQ29uc3RydWN0b3IodGhpcywga2luZCk7IH07XG4gICAgICBjYXNlIFZBTFVFUzogcmV0dXJuIGZ1bmN0aW9uIHZhbHVlcygpIHsgcmV0dXJuIG5ldyBDb25zdHJ1Y3Rvcih0aGlzLCBraW5kKTsgfTtcbiAgICB9IHJldHVybiBmdW5jdGlvbiBlbnRyaWVzKCkgeyByZXR1cm4gbmV3IENvbnN0cnVjdG9yKHRoaXMsIGtpbmQpOyB9O1xuICB9O1xuICB2YXIgVEFHID0gTkFNRSArICcgSXRlcmF0b3InO1xuICB2YXIgREVGX1ZBTFVFUyA9IERFRkFVTFQgPT0gVkFMVUVTO1xuICB2YXIgVkFMVUVTX0JVRyA9IGZhbHNlO1xuICB2YXIgcHJvdG8gPSBCYXNlLnByb3RvdHlwZTtcbiAgdmFyICRuYXRpdmUgPSBwcm90b1tJVEVSQVRPUl0gfHwgcHJvdG9bRkZfSVRFUkFUT1JdIHx8IERFRkFVTFQgJiYgcHJvdG9bREVGQVVMVF07XG4gIHZhciAkZGVmYXVsdCA9ICRuYXRpdmUgfHwgZ2V0TWV0aG9kKERFRkFVTFQpO1xuICB2YXIgJGVudHJpZXMgPSBERUZBVUxUID8gIURFRl9WQUxVRVMgPyAkZGVmYXVsdCA6IGdldE1ldGhvZCgnZW50cmllcycpIDogdW5kZWZpbmVkO1xuICB2YXIgJGFueU5hdGl2ZSA9IE5BTUUgPT0gJ0FycmF5JyA/IHByb3RvLmVudHJpZXMgfHwgJG5hdGl2ZSA6ICRuYXRpdmU7XG4gIHZhciBtZXRob2RzLCBrZXksIEl0ZXJhdG9yUHJvdG90eXBlO1xuICAvLyBGaXggbmF0aXZlXG4gIGlmICgkYW55TmF0aXZlKSB7XG4gICAgSXRlcmF0b3JQcm90b3R5cGUgPSBnZXRQcm90b3R5cGVPZigkYW55TmF0aXZlLmNhbGwobmV3IEJhc2UoKSkpO1xuICAgIGlmIChJdGVyYXRvclByb3RvdHlwZSAhPT0gT2JqZWN0LnByb3RvdHlwZSAmJiBJdGVyYXRvclByb3RvdHlwZS5uZXh0KSB7XG4gICAgICAvLyBTZXQgQEB0b1N0cmluZ1RhZyB0byBuYXRpdmUgaXRlcmF0b3JzXG4gICAgICBzZXRUb1N0cmluZ1RhZyhJdGVyYXRvclByb3RvdHlwZSwgVEFHLCB0cnVlKTtcbiAgICAgIC8vIGZpeCBmb3Igc29tZSBvbGQgZW5naW5lc1xuICAgICAgaWYgKCFMSUJSQVJZICYmIHR5cGVvZiBJdGVyYXRvclByb3RvdHlwZVtJVEVSQVRPUl0gIT0gJ2Z1bmN0aW9uJykgaGlkZShJdGVyYXRvclByb3RvdHlwZSwgSVRFUkFUT1IsIHJldHVyblRoaXMpO1xuICAgIH1cbiAgfVxuICAvLyBmaXggQXJyYXkje3ZhbHVlcywgQEBpdGVyYXRvcn0ubmFtZSBpbiBWOCAvIEZGXG4gIGlmIChERUZfVkFMVUVTICYmICRuYXRpdmUgJiYgJG5hdGl2ZS5uYW1lICE9PSBWQUxVRVMpIHtcbiAgICBWQUxVRVNfQlVHID0gdHJ1ZTtcbiAgICAkZGVmYXVsdCA9IGZ1bmN0aW9uIHZhbHVlcygpIHsgcmV0dXJuICRuYXRpdmUuY2FsbCh0aGlzKTsgfTtcbiAgfVxuICAvLyBEZWZpbmUgaXRlcmF0b3JcbiAgaWYgKCghTElCUkFSWSB8fCBGT1JDRUQpICYmIChCVUdHWSB8fCBWQUxVRVNfQlVHIHx8ICFwcm90b1tJVEVSQVRPUl0pKSB7XG4gICAgaGlkZShwcm90bywgSVRFUkFUT1IsICRkZWZhdWx0KTtcbiAgfVxuICAvLyBQbHVnIGZvciBsaWJyYXJ5XG4gIEl0ZXJhdG9yc1tOQU1FXSA9ICRkZWZhdWx0O1xuICBJdGVyYXRvcnNbVEFHXSA9IHJldHVyblRoaXM7XG4gIGlmIChERUZBVUxUKSB7XG4gICAgbWV0aG9kcyA9IHtcbiAgICAgIHZhbHVlczogREVGX1ZBTFVFUyA/ICRkZWZhdWx0IDogZ2V0TWV0aG9kKFZBTFVFUyksXG4gICAgICBrZXlzOiBJU19TRVQgPyAkZGVmYXVsdCA6IGdldE1ldGhvZChLRVlTKSxcbiAgICAgIGVudHJpZXM6ICRlbnRyaWVzXG4gICAgfTtcbiAgICBpZiAoRk9SQ0VEKSBmb3IgKGtleSBpbiBtZXRob2RzKSB7XG4gICAgICBpZiAoIShrZXkgaW4gcHJvdG8pKSByZWRlZmluZShwcm90bywga2V5LCBtZXRob2RzW2tleV0pO1xuICAgIH0gZWxzZSAkZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqIChCVUdHWSB8fCBWQUxVRVNfQlVHKSwgTkFNRSwgbWV0aG9kcyk7XG4gIH1cbiAgcmV0dXJuIG1ldGhvZHM7XG59O1xuIiwiLy8gaGVscGVyIGZvciBTdHJpbmcje3N0YXJ0c1dpdGgsIGVuZHNXaXRoLCBpbmNsdWRlc31cbnZhciBpc1JlZ0V4cCA9IHJlcXVpcmUoJy4vX2lzLXJlZ2V4cCcpO1xudmFyIGRlZmluZWQgPSByZXF1aXJlKCcuL19kZWZpbmVkJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKHRoYXQsIHNlYXJjaFN0cmluZywgTkFNRSkge1xuICBpZiAoaXNSZWdFeHAoc2VhcmNoU3RyaW5nKSkgdGhyb3cgVHlwZUVycm9yKCdTdHJpbmcjJyArIE5BTUUgKyBcIiBkb2Vzbid0IGFjY2VwdCByZWdleCFcIik7XG4gIHJldHVybiBTdHJpbmcoZGVmaW5lZCh0aGF0KSk7XG59O1xuIiwiLy8gNy4yLjggSXNSZWdFeHAoYXJndW1lbnQpXG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbnZhciBjb2YgPSByZXF1aXJlKCcuL19jb2YnKTtcbnZhciBNQVRDSCA9IHJlcXVpcmUoJy4vX3drcycpKCdtYXRjaCcpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgdmFyIGlzUmVnRXhwO1xuICByZXR1cm4gaXNPYmplY3QoaXQpICYmICgoaXNSZWdFeHAgPSBpdFtNQVRDSF0pICE9PSB1bmRlZmluZWQgPyAhIWlzUmVnRXhwIDogY29mKGl0KSA9PSAnUmVnRXhwJyk7XG59O1xuIiwidmFyIE1BVENIID0gcmVxdWlyZSgnLi9fd2tzJykoJ21hdGNoJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChLRVkpIHtcbiAgdmFyIHJlID0gLy4vO1xuICB0cnkge1xuICAgICcvLi8nW0tFWV0ocmUpO1xuICB9IGNhdGNoIChlKSB7XG4gICAgdHJ5IHtcbiAgICAgIHJlW01BVENIXSA9IGZhbHNlO1xuICAgICAgcmV0dXJuICEnLy4vJ1tLRVldKHJlKTtcbiAgICB9IGNhdGNoIChmKSB7IC8qIGVtcHR5ICovIH1cbiAgfSByZXR1cm4gdHJ1ZTtcbn07XG4iLCIvLyBjaGVjayBvbiBkZWZhdWx0IEFycmF5IGl0ZXJhdG9yXG52YXIgSXRlcmF0b3JzID0gcmVxdWlyZSgnLi9faXRlcmF0b3JzJyk7XG52YXIgSVRFUkFUT1IgPSByZXF1aXJlKCcuL193a3MnKSgnaXRlcmF0b3InKTtcbnZhciBBcnJheVByb3RvID0gQXJyYXkucHJvdG90eXBlO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gaXQgIT09IHVuZGVmaW5lZCAmJiAoSXRlcmF0b3JzLkFycmF5ID09PSBpdCB8fCBBcnJheVByb3RvW0lURVJBVE9SXSA9PT0gaXQpO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkZGVmaW5lUHJvcGVydHkgPSByZXF1aXJlKCcuL19vYmplY3QtZHAnKTtcbnZhciBjcmVhdGVEZXNjID0gcmVxdWlyZSgnLi9fcHJvcGVydHktZGVzYycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChvYmplY3QsIGluZGV4LCB2YWx1ZSkge1xuICBpZiAoaW5kZXggaW4gb2JqZWN0KSAkZGVmaW5lUHJvcGVydHkuZihvYmplY3QsIGluZGV4LCBjcmVhdGVEZXNjKDAsIHZhbHVlKSk7XG4gIGVsc2Ugb2JqZWN0W2luZGV4XSA9IHZhbHVlO1xufTtcbiIsInZhciBjbGFzc29mID0gcmVxdWlyZSgnLi9fY2xhc3NvZicpO1xudmFyIElURVJBVE9SID0gcmVxdWlyZSgnLi9fd2tzJykoJ2l0ZXJhdG9yJyk7XG52YXIgSXRlcmF0b3JzID0gcmVxdWlyZSgnLi9faXRlcmF0b3JzJyk7XG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vX2NvcmUnKS5nZXRJdGVyYXRvck1ldGhvZCA9IGZ1bmN0aW9uIChpdCkge1xuICBpZiAoaXQgIT0gdW5kZWZpbmVkKSByZXR1cm4gaXRbSVRFUkFUT1JdXG4gICAgfHwgaXRbJ0BAaXRlcmF0b3InXVxuICAgIHx8IEl0ZXJhdG9yc1tjbGFzc29mKGl0KV07XG59O1xuIiwiLy8gMjIuMS4zLjYgQXJyYXkucHJvdG90eXBlLmZpbGwodmFsdWUsIHN0YXJ0ID0gMCwgZW5kID0gdGhpcy5sZW5ndGgpXG4ndXNlIHN0cmljdCc7XG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuL190by1vYmplY3QnKTtcbnZhciB0b0Fic29sdXRlSW5kZXggPSByZXF1aXJlKCcuL190by1hYnNvbHV0ZS1pbmRleCcpO1xudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi9fdG8tbGVuZ3RoJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGZpbGwodmFsdWUgLyogLCBzdGFydCA9IDAsIGVuZCA9IEBsZW5ndGggKi8pIHtcbiAgdmFyIE8gPSB0b09iamVjdCh0aGlzKTtcbiAgdmFyIGxlbmd0aCA9IHRvTGVuZ3RoKE8ubGVuZ3RoKTtcbiAgdmFyIGFMZW4gPSBhcmd1bWVudHMubGVuZ3RoO1xuICB2YXIgaW5kZXggPSB0b0Fic29sdXRlSW5kZXgoYUxlbiA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQsIGxlbmd0aCk7XG4gIHZhciBlbmQgPSBhTGVuID4gMiA/IGFyZ3VtZW50c1syXSA6IHVuZGVmaW5lZDtcbiAgdmFyIGVuZFBvcyA9IGVuZCA9PT0gdW5kZWZpbmVkID8gbGVuZ3RoIDogdG9BYnNvbHV0ZUluZGV4KGVuZCwgbGVuZ3RoKTtcbiAgd2hpbGUgKGVuZFBvcyA+IGluZGV4KSBPW2luZGV4KytdID0gdmFsdWU7XG4gIHJldHVybiBPO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBhZGRUb1Vuc2NvcGFibGVzID0gcmVxdWlyZSgnLi9fYWRkLXRvLXVuc2NvcGFibGVzJyk7XG52YXIgc3RlcCA9IHJlcXVpcmUoJy4vX2l0ZXItc3RlcCcpO1xudmFyIEl0ZXJhdG9ycyA9IHJlcXVpcmUoJy4vX2l0ZXJhdG9ycycpO1xudmFyIHRvSU9iamVjdCA9IHJlcXVpcmUoJy4vX3RvLWlvYmplY3QnKTtcblxuLy8gMjIuMS4zLjQgQXJyYXkucHJvdG90eXBlLmVudHJpZXMoKVxuLy8gMjIuMS4zLjEzIEFycmF5LnByb3RvdHlwZS5rZXlzKClcbi8vIDIyLjEuMy4yOSBBcnJheS5wcm90b3R5cGUudmFsdWVzKClcbi8vIDIyLjEuMy4zMCBBcnJheS5wcm90b3R5cGVbQEBpdGVyYXRvcl0oKVxubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL19pdGVyLWRlZmluZScpKEFycmF5LCAnQXJyYXknLCBmdW5jdGlvbiAoaXRlcmF0ZWQsIGtpbmQpIHtcbiAgdGhpcy5fdCA9IHRvSU9iamVjdChpdGVyYXRlZCk7IC8vIHRhcmdldFxuICB0aGlzLl9pID0gMDsgICAgICAgICAgICAgICAgICAgLy8gbmV4dCBpbmRleFxuICB0aGlzLl9rID0ga2luZDsgICAgICAgICAgICAgICAgLy8ga2luZFxuLy8gMjIuMS41LjIuMSAlQXJyYXlJdGVyYXRvclByb3RvdHlwZSUubmV4dCgpXG59LCBmdW5jdGlvbiAoKSB7XG4gIHZhciBPID0gdGhpcy5fdDtcbiAgdmFyIGtpbmQgPSB0aGlzLl9rO1xuICB2YXIgaW5kZXggPSB0aGlzLl9pKys7XG4gIGlmICghTyB8fCBpbmRleCA+PSBPLmxlbmd0aCkge1xuICAgIHRoaXMuX3QgPSB1bmRlZmluZWQ7XG4gICAgcmV0dXJuIHN0ZXAoMSk7XG4gIH1cbiAgaWYgKGtpbmQgPT0gJ2tleXMnKSByZXR1cm4gc3RlcCgwLCBpbmRleCk7XG4gIGlmIChraW5kID09ICd2YWx1ZXMnKSByZXR1cm4gc3RlcCgwLCBPW2luZGV4XSk7XG4gIHJldHVybiBzdGVwKDAsIFtpbmRleCwgT1tpbmRleF1dKTtcbn0sICd2YWx1ZXMnKTtcblxuLy8gYXJndW1lbnRzTGlzdFtAQGl0ZXJhdG9yXSBpcyAlQXJyYXlQcm90b192YWx1ZXMlICg5LjQuNC42LCA5LjQuNC43KVxuSXRlcmF0b3JzLkFyZ3VtZW50cyA9IEl0ZXJhdG9ycy5BcnJheTtcblxuYWRkVG9VbnNjb3BhYmxlcygna2V5cycpO1xuYWRkVG9VbnNjb3BhYmxlcygndmFsdWVzJyk7XG5hZGRUb1Vuc2NvcGFibGVzKCdlbnRyaWVzJyk7XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciByZWdleHBGbGFncyA9IHJlcXVpcmUoJy4vX2ZsYWdzJyk7XG5cbnZhciBuYXRpdmVFeGVjID0gUmVnRXhwLnByb3RvdHlwZS5leGVjO1xuLy8gVGhpcyBhbHdheXMgcmVmZXJzIHRvIHRoZSBuYXRpdmUgaW1wbGVtZW50YXRpb24sIGJlY2F1c2UgdGhlXG4vLyBTdHJpbmcjcmVwbGFjZSBwb2x5ZmlsbCB1c2VzIC4vZml4LXJlZ2V4cC13ZWxsLWtub3duLXN5bWJvbC1sb2dpYy5qcyxcbi8vIHdoaWNoIGxvYWRzIHRoaXMgZmlsZSBiZWZvcmUgcGF0Y2hpbmcgdGhlIG1ldGhvZC5cbnZhciBuYXRpdmVSZXBsYWNlID0gU3RyaW5nLnByb3RvdHlwZS5yZXBsYWNlO1xuXG52YXIgcGF0Y2hlZEV4ZWMgPSBuYXRpdmVFeGVjO1xuXG52YXIgTEFTVF9JTkRFWCA9ICdsYXN0SW5kZXgnO1xuXG52YXIgVVBEQVRFU19MQVNUX0lOREVYX1dST05HID0gKGZ1bmN0aW9uICgpIHtcbiAgdmFyIHJlMSA9IC9hLyxcbiAgICAgIHJlMiA9IC9iKi9nO1xuICBuYXRpdmVFeGVjLmNhbGwocmUxLCAnYScpO1xuICBuYXRpdmVFeGVjLmNhbGwocmUyLCAnYScpO1xuICByZXR1cm4gcmUxW0xBU1RfSU5ERVhdICE9PSAwIHx8IHJlMltMQVNUX0lOREVYXSAhPT0gMDtcbn0pKCk7XG5cbi8vIG5vbnBhcnRpY2lwYXRpbmcgY2FwdHVyaW5nIGdyb3VwLCBjb3BpZWQgZnJvbSBlczUtc2hpbSdzIFN0cmluZyNzcGxpdCBwYXRjaC5cbnZhciBOUENHX0lOQ0xVREVEID0gLygpPz8vLmV4ZWMoJycpWzFdICE9PSB1bmRlZmluZWQ7XG5cbnZhciBQQVRDSCA9IFVQREFURVNfTEFTVF9JTkRFWF9XUk9ORyB8fCBOUENHX0lOQ0xVREVEO1xuXG5pZiAoUEFUQ0gpIHtcbiAgcGF0Y2hlZEV4ZWMgPSBmdW5jdGlvbiBleGVjKHN0cikge1xuICAgIHZhciByZSA9IHRoaXM7XG4gICAgdmFyIGxhc3RJbmRleCwgcmVDb3B5LCBtYXRjaCwgaTtcblxuICAgIGlmIChOUENHX0lOQ0xVREVEKSB7XG4gICAgICByZUNvcHkgPSBuZXcgUmVnRXhwKCdeJyArIHJlLnNvdXJjZSArICckKD8hXFxcXHMpJywgcmVnZXhwRmxhZ3MuY2FsbChyZSkpO1xuICAgIH1cbiAgICBpZiAoVVBEQVRFU19MQVNUX0lOREVYX1dST05HKSBsYXN0SW5kZXggPSByZVtMQVNUX0lOREVYXTtcblxuICAgIG1hdGNoID0gbmF0aXZlRXhlYy5jYWxsKHJlLCBzdHIpO1xuXG4gICAgaWYgKFVQREFURVNfTEFTVF9JTkRFWF9XUk9ORyAmJiBtYXRjaCkge1xuICAgICAgcmVbTEFTVF9JTkRFWF0gPSByZS5nbG9iYWwgPyBtYXRjaC5pbmRleCArIG1hdGNoWzBdLmxlbmd0aCA6IGxhc3RJbmRleDtcbiAgICB9XG4gICAgaWYgKE5QQ0dfSU5DTFVERUQgJiYgbWF0Y2ggJiYgbWF0Y2gubGVuZ3RoID4gMSkge1xuICAgICAgLy8gRml4IGJyb3dzZXJzIHdob3NlIGBleGVjYCBtZXRob2RzIGRvbid0IGNvbnNpc3RlbnRseSByZXR1cm4gYHVuZGVmaW5lZGBcbiAgICAgIC8vIGZvciBOUENHLCBsaWtlIElFOC4gTk9URTogVGhpcyBkb2Vzbicgd29yayBmb3IgLyguPyk/L1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWxvb3AtZnVuY1xuICAgICAgbmF0aXZlUmVwbGFjZS5jYWxsKG1hdGNoWzBdLCByZUNvcHksIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgZm9yIChpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGggLSAyOyBpKyspIHtcbiAgICAgICAgICBpZiAoYXJndW1lbnRzW2ldID09PSB1bmRlZmluZWQpIG1hdGNoW2ldID0gdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICByZXR1cm4gbWF0Y2g7XG4gIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gcGF0Y2hlZEV4ZWM7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgYXQgPSByZXF1aXJlKCcuL19zdHJpbmctYXQnKSh0cnVlKTtcblxuIC8vIGBBZHZhbmNlU3RyaW5nSW5kZXhgIGFic3RyYWN0IG9wZXJhdGlvblxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtYWR2YW5jZXN0cmluZ2luZGV4XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChTLCBpbmRleCwgdW5pY29kZSkge1xuICByZXR1cm4gaW5kZXggKyAodW5pY29kZSA/IGF0KFMsIGluZGV4KS5sZW5ndGggOiAxKTtcbn07XG4iLCJ2YXIgY3R4ID0gcmVxdWlyZSgnLi9fY3R4Jyk7XG52YXIgaW52b2tlID0gcmVxdWlyZSgnLi9faW52b2tlJyk7XG52YXIgaHRtbCA9IHJlcXVpcmUoJy4vX2h0bWwnKTtcbnZhciBjZWwgPSByZXF1aXJlKCcuL19kb20tY3JlYXRlJyk7XG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi9fZ2xvYmFsJyk7XG52YXIgcHJvY2VzcyA9IGdsb2JhbC5wcm9jZXNzO1xudmFyIHNldFRhc2sgPSBnbG9iYWwuc2V0SW1tZWRpYXRlO1xudmFyIGNsZWFyVGFzayA9IGdsb2JhbC5jbGVhckltbWVkaWF0ZTtcbnZhciBNZXNzYWdlQ2hhbm5lbCA9IGdsb2JhbC5NZXNzYWdlQ2hhbm5lbDtcbnZhciBEaXNwYXRjaCA9IGdsb2JhbC5EaXNwYXRjaDtcbnZhciBjb3VudGVyID0gMDtcbnZhciBxdWV1ZSA9IHt9O1xudmFyIE9OUkVBRFlTVEFURUNIQU5HRSA9ICdvbnJlYWR5c3RhdGVjaGFuZ2UnO1xudmFyIGRlZmVyLCBjaGFubmVsLCBwb3J0O1xudmFyIHJ1biA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIGlkID0gK3RoaXM7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wcm90b3R5cGUtYnVpbHRpbnNcbiAgaWYgKHF1ZXVlLmhhc093blByb3BlcnR5KGlkKSkge1xuICAgIHZhciBmbiA9IHF1ZXVlW2lkXTtcbiAgICBkZWxldGUgcXVldWVbaWRdO1xuICAgIGZuKCk7XG4gIH1cbn07XG52YXIgbGlzdGVuZXIgPSBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgcnVuLmNhbGwoZXZlbnQuZGF0YSk7XG59O1xuLy8gTm9kZS5qcyAwLjkrICYgSUUxMCsgaGFzIHNldEltbWVkaWF0ZSwgb3RoZXJ3aXNlOlxuaWYgKCFzZXRUYXNrIHx8ICFjbGVhclRhc2spIHtcbiAgc2V0VGFzayA9IGZ1bmN0aW9uIHNldEltbWVkaWF0ZShmbikge1xuICAgIHZhciBhcmdzID0gW107XG4gICAgdmFyIGkgPSAxO1xuICAgIHdoaWxlIChhcmd1bWVudHMubGVuZ3RoID4gaSkgYXJncy5wdXNoKGFyZ3VtZW50c1tpKytdKTtcbiAgICBxdWV1ZVsrK2NvdW50ZXJdID0gZnVuY3Rpb24gKCkge1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLW5ldy1mdW5jXG4gICAgICBpbnZva2UodHlwZW9mIGZuID09ICdmdW5jdGlvbicgPyBmbiA6IEZ1bmN0aW9uKGZuKSwgYXJncyk7XG4gICAgfTtcbiAgICBkZWZlcihjb3VudGVyKTtcbiAgICByZXR1cm4gY291bnRlcjtcbiAgfTtcbiAgY2xlYXJUYXNrID0gZnVuY3Rpb24gY2xlYXJJbW1lZGlhdGUoaWQpIHtcbiAgICBkZWxldGUgcXVldWVbaWRdO1xuICB9O1xuICAvLyBOb2RlLmpzIDAuOC1cbiAgaWYgKHJlcXVpcmUoJy4vX2NvZicpKHByb2Nlc3MpID09ICdwcm9jZXNzJykge1xuICAgIGRlZmVyID0gZnVuY3Rpb24gKGlkKSB7XG4gICAgICBwcm9jZXNzLm5leHRUaWNrKGN0eChydW4sIGlkLCAxKSk7XG4gICAgfTtcbiAgLy8gU3BoZXJlIChKUyBnYW1lIGVuZ2luZSkgRGlzcGF0Y2ggQVBJXG4gIH0gZWxzZSBpZiAoRGlzcGF0Y2ggJiYgRGlzcGF0Y2gubm93KSB7XG4gICAgZGVmZXIgPSBmdW5jdGlvbiAoaWQpIHtcbiAgICAgIERpc3BhdGNoLm5vdyhjdHgocnVuLCBpZCwgMSkpO1xuICAgIH07XG4gIC8vIEJyb3dzZXJzIHdpdGggTWVzc2FnZUNoYW5uZWwsIGluY2x1ZGVzIFdlYldvcmtlcnNcbiAgfSBlbHNlIGlmIChNZXNzYWdlQ2hhbm5lbCkge1xuICAgIGNoYW5uZWwgPSBuZXcgTWVzc2FnZUNoYW5uZWwoKTtcbiAgICBwb3J0ID0gY2hhbm5lbC5wb3J0MjtcbiAgICBjaGFubmVsLnBvcnQxLm9ubWVzc2FnZSA9IGxpc3RlbmVyO1xuICAgIGRlZmVyID0gY3R4KHBvcnQucG9zdE1lc3NhZ2UsIHBvcnQsIDEpO1xuICAvLyBCcm93c2VycyB3aXRoIHBvc3RNZXNzYWdlLCBza2lwIFdlYldvcmtlcnNcbiAgLy8gSUU4IGhhcyBwb3N0TWVzc2FnZSwgYnV0IGl0J3Mgc3luYyAmIHR5cGVvZiBpdHMgcG9zdE1lc3NhZ2UgaXMgJ29iamVjdCdcbiAgfSBlbHNlIGlmIChnbG9iYWwuYWRkRXZlbnRMaXN0ZW5lciAmJiB0eXBlb2YgcG9zdE1lc3NhZ2UgPT0gJ2Z1bmN0aW9uJyAmJiAhZ2xvYmFsLmltcG9ydFNjcmlwdHMpIHtcbiAgICBkZWZlciA9IGZ1bmN0aW9uIChpZCkge1xuICAgICAgZ2xvYmFsLnBvc3RNZXNzYWdlKGlkICsgJycsICcqJyk7XG4gICAgfTtcbiAgICBnbG9iYWwuYWRkRXZlbnRMaXN0ZW5lcignbWVzc2FnZScsIGxpc3RlbmVyLCBmYWxzZSk7XG4gIC8vIElFOC1cbiAgfSBlbHNlIGlmIChPTlJFQURZU1RBVEVDSEFOR0UgaW4gY2VsKCdzY3JpcHQnKSkge1xuICAgIGRlZmVyID0gZnVuY3Rpb24gKGlkKSB7XG4gICAgICBodG1sLmFwcGVuZENoaWxkKGNlbCgnc2NyaXB0JykpW09OUkVBRFlTVEFURUNIQU5HRV0gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGh0bWwucmVtb3ZlQ2hpbGQodGhpcyk7XG4gICAgICAgIHJ1bi5jYWxsKGlkKTtcbiAgICAgIH07XG4gICAgfTtcbiAgLy8gUmVzdCBvbGQgYnJvd3NlcnNcbiAgfSBlbHNlIHtcbiAgICBkZWZlciA9IGZ1bmN0aW9uIChpZCkge1xuICAgICAgc2V0VGltZW91dChjdHgocnVuLCBpZCwgMSksIDApO1xuICAgIH07XG4gIH1cbn1cbm1vZHVsZS5leHBvcnRzID0ge1xuICBzZXQ6IHNldFRhc2ssXG4gIGNsZWFyOiBjbGVhclRhc2tcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi9fZ2xvYmFsJyk7XG52YXIgREVTQ1JJUFRPUlMgPSByZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpO1xudmFyIExJQlJBUlkgPSByZXF1aXJlKCcuL19saWJyYXJ5Jyk7XG52YXIgJHR5cGVkID0gcmVxdWlyZSgnLi9fdHlwZWQnKTtcbnZhciBoaWRlID0gcmVxdWlyZSgnLi9faGlkZScpO1xudmFyIHJlZGVmaW5lQWxsID0gcmVxdWlyZSgnLi9fcmVkZWZpbmUtYWxsJyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuL19mYWlscycpO1xudmFyIGFuSW5zdGFuY2UgPSByZXF1aXJlKCcuL19hbi1pbnN0YW5jZScpO1xudmFyIHRvSW50ZWdlciA9IHJlcXVpcmUoJy4vX3RvLWludGVnZXInKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpO1xudmFyIHRvSW5kZXggPSByZXF1aXJlKCcuL190by1pbmRleCcpO1xudmFyIGdPUE4gPSByZXF1aXJlKCcuL19vYmplY3QtZ29wbicpLmY7XG52YXIgZFAgPSByZXF1aXJlKCcuL19vYmplY3QtZHAnKS5mO1xudmFyIGFycmF5RmlsbCA9IHJlcXVpcmUoJy4vX2FycmF5LWZpbGwnKTtcbnZhciBzZXRUb1N0cmluZ1RhZyA9IHJlcXVpcmUoJy4vX3NldC10by1zdHJpbmctdGFnJyk7XG52YXIgQVJSQVlfQlVGRkVSID0gJ0FycmF5QnVmZmVyJztcbnZhciBEQVRBX1ZJRVcgPSAnRGF0YVZpZXcnO1xudmFyIFBST1RPVFlQRSA9ICdwcm90b3R5cGUnO1xudmFyIFdST05HX0xFTkdUSCA9ICdXcm9uZyBsZW5ndGghJztcbnZhciBXUk9OR19JTkRFWCA9ICdXcm9uZyBpbmRleCEnO1xudmFyICRBcnJheUJ1ZmZlciA9IGdsb2JhbFtBUlJBWV9CVUZGRVJdO1xudmFyICREYXRhVmlldyA9IGdsb2JhbFtEQVRBX1ZJRVddO1xudmFyIE1hdGggPSBnbG9iYWwuTWF0aDtcbnZhciBSYW5nZUVycm9yID0gZ2xvYmFsLlJhbmdlRXJyb3I7XG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tc2hhZG93LXJlc3RyaWN0ZWQtbmFtZXNcbnZhciBJbmZpbml0eSA9IGdsb2JhbC5JbmZpbml0eTtcbnZhciBCYXNlQnVmZmVyID0gJEFycmF5QnVmZmVyO1xudmFyIGFicyA9IE1hdGguYWJzO1xudmFyIHBvdyA9IE1hdGgucG93O1xudmFyIGZsb29yID0gTWF0aC5mbG9vcjtcbnZhciBsb2cgPSBNYXRoLmxvZztcbnZhciBMTjIgPSBNYXRoLkxOMjtcbnZhciBCVUZGRVIgPSAnYnVmZmVyJztcbnZhciBCWVRFX0xFTkdUSCA9ICdieXRlTGVuZ3RoJztcbnZhciBCWVRFX09GRlNFVCA9ICdieXRlT2Zmc2V0JztcbnZhciAkQlVGRkVSID0gREVTQ1JJUFRPUlMgPyAnX2InIDogQlVGRkVSO1xudmFyICRMRU5HVEggPSBERVNDUklQVE9SUyA/ICdfbCcgOiBCWVRFX0xFTkdUSDtcbnZhciAkT0ZGU0VUID0gREVTQ1JJUFRPUlMgPyAnX28nIDogQllURV9PRkZTRVQ7XG5cbi8vIElFRUU3NTQgY29udmVyc2lvbnMgYmFzZWQgb24gaHR0cHM6Ly9naXRodWIuY29tL2Zlcm9zcy9pZWVlNzU0XG5mdW5jdGlvbiBwYWNrSUVFRTc1NCh2YWx1ZSwgbUxlbiwgbkJ5dGVzKSB7XG4gIHZhciBidWZmZXIgPSBuZXcgQXJyYXkobkJ5dGVzKTtcbiAgdmFyIGVMZW4gPSBuQnl0ZXMgKiA4IC0gbUxlbiAtIDE7XG4gIHZhciBlTWF4ID0gKDEgPDwgZUxlbikgLSAxO1xuICB2YXIgZUJpYXMgPSBlTWF4ID4+IDE7XG4gIHZhciBydCA9IG1MZW4gPT09IDIzID8gcG93KDIsIC0yNCkgLSBwb3coMiwgLTc3KSA6IDA7XG4gIHZhciBpID0gMDtcbiAgdmFyIHMgPSB2YWx1ZSA8IDAgfHwgdmFsdWUgPT09IDAgJiYgMSAvIHZhbHVlIDwgMCA/IDEgOiAwO1xuICB2YXIgZSwgbSwgYztcbiAgdmFsdWUgPSBhYnModmFsdWUpO1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tc2VsZi1jb21wYXJlXG4gIGlmICh2YWx1ZSAhPSB2YWx1ZSB8fCB2YWx1ZSA9PT0gSW5maW5pdHkpIHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tc2VsZi1jb21wYXJlXG4gICAgbSA9IHZhbHVlICE9IHZhbHVlID8gMSA6IDA7XG4gICAgZSA9IGVNYXg7XG4gIH0gZWxzZSB7XG4gICAgZSA9IGZsb29yKGxvZyh2YWx1ZSkgLyBMTjIpO1xuICAgIGlmICh2YWx1ZSAqIChjID0gcG93KDIsIC1lKSkgPCAxKSB7XG4gICAgICBlLS07XG4gICAgICBjICo9IDI7XG4gICAgfVxuICAgIGlmIChlICsgZUJpYXMgPj0gMSkge1xuICAgICAgdmFsdWUgKz0gcnQgLyBjO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YWx1ZSArPSBydCAqIHBvdygyLCAxIC0gZUJpYXMpO1xuICAgIH1cbiAgICBpZiAodmFsdWUgKiBjID49IDIpIHtcbiAgICAgIGUrKztcbiAgICAgIGMgLz0gMjtcbiAgICB9XG4gICAgaWYgKGUgKyBlQmlhcyA+PSBlTWF4KSB7XG4gICAgICBtID0gMDtcbiAgICAgIGUgPSBlTWF4O1xuICAgIH0gZWxzZSBpZiAoZSArIGVCaWFzID49IDEpIHtcbiAgICAgIG0gPSAodmFsdWUgKiBjIC0gMSkgKiBwb3coMiwgbUxlbik7XG4gICAgICBlID0gZSArIGVCaWFzO1xuICAgIH0gZWxzZSB7XG4gICAgICBtID0gdmFsdWUgKiBwb3coMiwgZUJpYXMgLSAxKSAqIHBvdygyLCBtTGVuKTtcbiAgICAgIGUgPSAwO1xuICAgIH1cbiAgfVxuICBmb3IgKDsgbUxlbiA+PSA4OyBidWZmZXJbaSsrXSA9IG0gJiAyNTUsIG0gLz0gMjU2LCBtTGVuIC09IDgpO1xuICBlID0gZSA8PCBtTGVuIHwgbTtcbiAgZUxlbiArPSBtTGVuO1xuICBmb3IgKDsgZUxlbiA+IDA7IGJ1ZmZlcltpKytdID0gZSAmIDI1NSwgZSAvPSAyNTYsIGVMZW4gLT0gOCk7XG4gIGJ1ZmZlclstLWldIHw9IHMgKiAxMjg7XG4gIHJldHVybiBidWZmZXI7XG59XG5mdW5jdGlvbiB1bnBhY2tJRUVFNzU0KGJ1ZmZlciwgbUxlbiwgbkJ5dGVzKSB7XG4gIHZhciBlTGVuID0gbkJ5dGVzICogOCAtIG1MZW4gLSAxO1xuICB2YXIgZU1heCA9ICgxIDw8IGVMZW4pIC0gMTtcbiAgdmFyIGVCaWFzID0gZU1heCA+PiAxO1xuICB2YXIgbkJpdHMgPSBlTGVuIC0gNztcbiAgdmFyIGkgPSBuQnl0ZXMgLSAxO1xuICB2YXIgcyA9IGJ1ZmZlcltpLS1dO1xuICB2YXIgZSA9IHMgJiAxMjc7XG4gIHZhciBtO1xuICBzID4+PSA3O1xuICBmb3IgKDsgbkJpdHMgPiAwOyBlID0gZSAqIDI1NiArIGJ1ZmZlcltpXSwgaS0tLCBuQml0cyAtPSA4KTtcbiAgbSA9IGUgJiAoMSA8PCAtbkJpdHMpIC0gMTtcbiAgZSA+Pj0gLW5CaXRzO1xuICBuQml0cyArPSBtTGVuO1xuICBmb3IgKDsgbkJpdHMgPiAwOyBtID0gbSAqIDI1NiArIGJ1ZmZlcltpXSwgaS0tLCBuQml0cyAtPSA4KTtcbiAgaWYgKGUgPT09IDApIHtcbiAgICBlID0gMSAtIGVCaWFzO1xuICB9IGVsc2UgaWYgKGUgPT09IGVNYXgpIHtcbiAgICByZXR1cm4gbSA/IE5hTiA6IHMgPyAtSW5maW5pdHkgOiBJbmZpbml0eTtcbiAgfSBlbHNlIHtcbiAgICBtID0gbSArIHBvdygyLCBtTGVuKTtcbiAgICBlID0gZSAtIGVCaWFzO1xuICB9IHJldHVybiAocyA/IC0xIDogMSkgKiBtICogcG93KDIsIGUgLSBtTGVuKTtcbn1cblxuZnVuY3Rpb24gdW5wYWNrSTMyKGJ5dGVzKSB7XG4gIHJldHVybiBieXRlc1szXSA8PCAyNCB8IGJ5dGVzWzJdIDw8IDE2IHwgYnl0ZXNbMV0gPDwgOCB8IGJ5dGVzWzBdO1xufVxuZnVuY3Rpb24gcGFja0k4KGl0KSB7XG4gIHJldHVybiBbaXQgJiAweGZmXTtcbn1cbmZ1bmN0aW9uIHBhY2tJMTYoaXQpIHtcbiAgcmV0dXJuIFtpdCAmIDB4ZmYsIGl0ID4+IDggJiAweGZmXTtcbn1cbmZ1bmN0aW9uIHBhY2tJMzIoaXQpIHtcbiAgcmV0dXJuIFtpdCAmIDB4ZmYsIGl0ID4+IDggJiAweGZmLCBpdCA+PiAxNiAmIDB4ZmYsIGl0ID4+IDI0ICYgMHhmZl07XG59XG5mdW5jdGlvbiBwYWNrRjY0KGl0KSB7XG4gIHJldHVybiBwYWNrSUVFRTc1NChpdCwgNTIsIDgpO1xufVxuZnVuY3Rpb24gcGFja0YzMihpdCkge1xuICByZXR1cm4gcGFja0lFRUU3NTQoaXQsIDIzLCA0KTtcbn1cblxuZnVuY3Rpb24gYWRkR2V0dGVyKEMsIGtleSwgaW50ZXJuYWwpIHtcbiAgZFAoQ1tQUk9UT1RZUEVdLCBrZXksIHsgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzW2ludGVybmFsXTsgfSB9KTtcbn1cblxuZnVuY3Rpb24gZ2V0KHZpZXcsIGJ5dGVzLCBpbmRleCwgaXNMaXR0bGVFbmRpYW4pIHtcbiAgdmFyIG51bUluZGV4ID0gK2luZGV4O1xuICB2YXIgaW50SW5kZXggPSB0b0luZGV4KG51bUluZGV4KTtcbiAgaWYgKGludEluZGV4ICsgYnl0ZXMgPiB2aWV3WyRMRU5HVEhdKSB0aHJvdyBSYW5nZUVycm9yKFdST05HX0lOREVYKTtcbiAgdmFyIHN0b3JlID0gdmlld1skQlVGRkVSXS5fYjtcbiAgdmFyIHN0YXJ0ID0gaW50SW5kZXggKyB2aWV3WyRPRkZTRVRdO1xuICB2YXIgcGFjayA9IHN0b3JlLnNsaWNlKHN0YXJ0LCBzdGFydCArIGJ5dGVzKTtcbiAgcmV0dXJuIGlzTGl0dGxlRW5kaWFuID8gcGFjayA6IHBhY2sucmV2ZXJzZSgpO1xufVxuZnVuY3Rpb24gc2V0KHZpZXcsIGJ5dGVzLCBpbmRleCwgY29udmVyc2lvbiwgdmFsdWUsIGlzTGl0dGxlRW5kaWFuKSB7XG4gIHZhciBudW1JbmRleCA9ICtpbmRleDtcbiAgdmFyIGludEluZGV4ID0gdG9JbmRleChudW1JbmRleCk7XG4gIGlmIChpbnRJbmRleCArIGJ5dGVzID4gdmlld1skTEVOR1RIXSkgdGhyb3cgUmFuZ2VFcnJvcihXUk9OR19JTkRFWCk7XG4gIHZhciBzdG9yZSA9IHZpZXdbJEJVRkZFUl0uX2I7XG4gIHZhciBzdGFydCA9IGludEluZGV4ICsgdmlld1skT0ZGU0VUXTtcbiAgdmFyIHBhY2sgPSBjb252ZXJzaW9uKCt2YWx1ZSk7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgYnl0ZXM7IGkrKykgc3RvcmVbc3RhcnQgKyBpXSA9IHBhY2tbaXNMaXR0bGVFbmRpYW4gPyBpIDogYnl0ZXMgLSBpIC0gMV07XG59XG5cbmlmICghJHR5cGVkLkFCVikge1xuICAkQXJyYXlCdWZmZXIgPSBmdW5jdGlvbiBBcnJheUJ1ZmZlcihsZW5ndGgpIHtcbiAgICBhbkluc3RhbmNlKHRoaXMsICRBcnJheUJ1ZmZlciwgQVJSQVlfQlVGRkVSKTtcbiAgICB2YXIgYnl0ZUxlbmd0aCA9IHRvSW5kZXgobGVuZ3RoKTtcbiAgICB0aGlzLl9iID0gYXJyYXlGaWxsLmNhbGwobmV3IEFycmF5KGJ5dGVMZW5ndGgpLCAwKTtcbiAgICB0aGlzWyRMRU5HVEhdID0gYnl0ZUxlbmd0aDtcbiAgfTtcblxuICAkRGF0YVZpZXcgPSBmdW5jdGlvbiBEYXRhVmlldyhidWZmZXIsIGJ5dGVPZmZzZXQsIGJ5dGVMZW5ndGgpIHtcbiAgICBhbkluc3RhbmNlKHRoaXMsICREYXRhVmlldywgREFUQV9WSUVXKTtcbiAgICBhbkluc3RhbmNlKGJ1ZmZlciwgJEFycmF5QnVmZmVyLCBEQVRBX1ZJRVcpO1xuICAgIHZhciBidWZmZXJMZW5ndGggPSBidWZmZXJbJExFTkdUSF07XG4gICAgdmFyIG9mZnNldCA9IHRvSW50ZWdlcihieXRlT2Zmc2V0KTtcbiAgICBpZiAob2Zmc2V0IDwgMCB8fCBvZmZzZXQgPiBidWZmZXJMZW5ndGgpIHRocm93IFJhbmdlRXJyb3IoJ1dyb25nIG9mZnNldCEnKTtcbiAgICBieXRlTGVuZ3RoID0gYnl0ZUxlbmd0aCA9PT0gdW5kZWZpbmVkID8gYnVmZmVyTGVuZ3RoIC0gb2Zmc2V0IDogdG9MZW5ndGgoYnl0ZUxlbmd0aCk7XG4gICAgaWYgKG9mZnNldCArIGJ5dGVMZW5ndGggPiBidWZmZXJMZW5ndGgpIHRocm93IFJhbmdlRXJyb3IoV1JPTkdfTEVOR1RIKTtcbiAgICB0aGlzWyRCVUZGRVJdID0gYnVmZmVyO1xuICAgIHRoaXNbJE9GRlNFVF0gPSBvZmZzZXQ7XG4gICAgdGhpc1skTEVOR1RIXSA9IGJ5dGVMZW5ndGg7XG4gIH07XG5cbiAgaWYgKERFU0NSSVBUT1JTKSB7XG4gICAgYWRkR2V0dGVyKCRBcnJheUJ1ZmZlciwgQllURV9MRU5HVEgsICdfbCcpO1xuICAgIGFkZEdldHRlcigkRGF0YVZpZXcsIEJVRkZFUiwgJ19iJyk7XG4gICAgYWRkR2V0dGVyKCREYXRhVmlldywgQllURV9MRU5HVEgsICdfbCcpO1xuICAgIGFkZEdldHRlcigkRGF0YVZpZXcsIEJZVEVfT0ZGU0VULCAnX28nKTtcbiAgfVxuXG4gIHJlZGVmaW5lQWxsKCREYXRhVmlld1tQUk9UT1RZUEVdLCB7XG4gICAgZ2V0SW50ODogZnVuY3Rpb24gZ2V0SW50OChieXRlT2Zmc2V0KSB7XG4gICAgICByZXR1cm4gZ2V0KHRoaXMsIDEsIGJ5dGVPZmZzZXQpWzBdIDw8IDI0ID4+IDI0O1xuICAgIH0sXG4gICAgZ2V0VWludDg6IGZ1bmN0aW9uIGdldFVpbnQ4KGJ5dGVPZmZzZXQpIHtcbiAgICAgIHJldHVybiBnZXQodGhpcywgMSwgYnl0ZU9mZnNldClbMF07XG4gICAgfSxcbiAgICBnZXRJbnQxNjogZnVuY3Rpb24gZ2V0SW50MTYoYnl0ZU9mZnNldCAvKiAsIGxpdHRsZUVuZGlhbiAqLykge1xuICAgICAgdmFyIGJ5dGVzID0gZ2V0KHRoaXMsIDIsIGJ5dGVPZmZzZXQsIGFyZ3VtZW50c1sxXSk7XG4gICAgICByZXR1cm4gKGJ5dGVzWzFdIDw8IDggfCBieXRlc1swXSkgPDwgMTYgPj4gMTY7XG4gICAgfSxcbiAgICBnZXRVaW50MTY6IGZ1bmN0aW9uIGdldFVpbnQxNihieXRlT2Zmc2V0IC8qICwgbGl0dGxlRW5kaWFuICovKSB7XG4gICAgICB2YXIgYnl0ZXMgPSBnZXQodGhpcywgMiwgYnl0ZU9mZnNldCwgYXJndW1lbnRzWzFdKTtcbiAgICAgIHJldHVybiBieXRlc1sxXSA8PCA4IHwgYnl0ZXNbMF07XG4gICAgfSxcbiAgICBnZXRJbnQzMjogZnVuY3Rpb24gZ2V0SW50MzIoYnl0ZU9mZnNldCAvKiAsIGxpdHRsZUVuZGlhbiAqLykge1xuICAgICAgcmV0dXJuIHVucGFja0kzMihnZXQodGhpcywgNCwgYnl0ZU9mZnNldCwgYXJndW1lbnRzWzFdKSk7XG4gICAgfSxcbiAgICBnZXRVaW50MzI6IGZ1bmN0aW9uIGdldFVpbnQzMihieXRlT2Zmc2V0IC8qICwgbGl0dGxlRW5kaWFuICovKSB7XG4gICAgICByZXR1cm4gdW5wYWNrSTMyKGdldCh0aGlzLCA0LCBieXRlT2Zmc2V0LCBhcmd1bWVudHNbMV0pKSA+Pj4gMDtcbiAgICB9LFxuICAgIGdldEZsb2F0MzI6IGZ1bmN0aW9uIGdldEZsb2F0MzIoYnl0ZU9mZnNldCAvKiAsIGxpdHRsZUVuZGlhbiAqLykge1xuICAgICAgcmV0dXJuIHVucGFja0lFRUU3NTQoZ2V0KHRoaXMsIDQsIGJ5dGVPZmZzZXQsIGFyZ3VtZW50c1sxXSksIDIzLCA0KTtcbiAgICB9LFxuICAgIGdldEZsb2F0NjQ6IGZ1bmN0aW9uIGdldEZsb2F0NjQoYnl0ZU9mZnNldCAvKiAsIGxpdHRsZUVuZGlhbiAqLykge1xuICAgICAgcmV0dXJuIHVucGFja0lFRUU3NTQoZ2V0KHRoaXMsIDgsIGJ5dGVPZmZzZXQsIGFyZ3VtZW50c1sxXSksIDUyLCA4KTtcbiAgICB9LFxuICAgIHNldEludDg6IGZ1bmN0aW9uIHNldEludDgoYnl0ZU9mZnNldCwgdmFsdWUpIHtcbiAgICAgIHNldCh0aGlzLCAxLCBieXRlT2Zmc2V0LCBwYWNrSTgsIHZhbHVlKTtcbiAgICB9LFxuICAgIHNldFVpbnQ4OiBmdW5jdGlvbiBzZXRVaW50OChieXRlT2Zmc2V0LCB2YWx1ZSkge1xuICAgICAgc2V0KHRoaXMsIDEsIGJ5dGVPZmZzZXQsIHBhY2tJOCwgdmFsdWUpO1xuICAgIH0sXG4gICAgc2V0SW50MTY6IGZ1bmN0aW9uIHNldEludDE2KGJ5dGVPZmZzZXQsIHZhbHVlIC8qICwgbGl0dGxlRW5kaWFuICovKSB7XG4gICAgICBzZXQodGhpcywgMiwgYnl0ZU9mZnNldCwgcGFja0kxNiwgdmFsdWUsIGFyZ3VtZW50c1syXSk7XG4gICAgfSxcbiAgICBzZXRVaW50MTY6IGZ1bmN0aW9uIHNldFVpbnQxNihieXRlT2Zmc2V0LCB2YWx1ZSAvKiAsIGxpdHRsZUVuZGlhbiAqLykge1xuICAgICAgc2V0KHRoaXMsIDIsIGJ5dGVPZmZzZXQsIHBhY2tJMTYsIHZhbHVlLCBhcmd1bWVudHNbMl0pO1xuICAgIH0sXG4gICAgc2V0SW50MzI6IGZ1bmN0aW9uIHNldEludDMyKGJ5dGVPZmZzZXQsIHZhbHVlIC8qICwgbGl0dGxlRW5kaWFuICovKSB7XG4gICAgICBzZXQodGhpcywgNCwgYnl0ZU9mZnNldCwgcGFja0kzMiwgdmFsdWUsIGFyZ3VtZW50c1syXSk7XG4gICAgfSxcbiAgICBzZXRVaW50MzI6IGZ1bmN0aW9uIHNldFVpbnQzMihieXRlT2Zmc2V0LCB2YWx1ZSAvKiAsIGxpdHRsZUVuZGlhbiAqLykge1xuICAgICAgc2V0KHRoaXMsIDQsIGJ5dGVPZmZzZXQsIHBhY2tJMzIsIHZhbHVlLCBhcmd1bWVudHNbMl0pO1xuICAgIH0sXG4gICAgc2V0RmxvYXQzMjogZnVuY3Rpb24gc2V0RmxvYXQzMihieXRlT2Zmc2V0LCB2YWx1ZSAvKiAsIGxpdHRsZUVuZGlhbiAqLykge1xuICAgICAgc2V0KHRoaXMsIDQsIGJ5dGVPZmZzZXQsIHBhY2tGMzIsIHZhbHVlLCBhcmd1bWVudHNbMl0pO1xuICAgIH0sXG4gICAgc2V0RmxvYXQ2NDogZnVuY3Rpb24gc2V0RmxvYXQ2NChieXRlT2Zmc2V0LCB2YWx1ZSAvKiAsIGxpdHRsZUVuZGlhbiAqLykge1xuICAgICAgc2V0KHRoaXMsIDgsIGJ5dGVPZmZzZXQsIHBhY2tGNjQsIHZhbHVlLCBhcmd1bWVudHNbMl0pO1xuICAgIH1cbiAgfSk7XG59IGVsc2Uge1xuICBpZiAoIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgICAkQXJyYXlCdWZmZXIoMSk7XG4gIH0pIHx8ICFmYWlscyhmdW5jdGlvbiAoKSB7XG4gICAgbmV3ICRBcnJheUJ1ZmZlcigtMSk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tbmV3XG4gIH0pIHx8IGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgICBuZXcgJEFycmF5QnVmZmVyKCk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tbmV3XG4gICAgbmV3ICRBcnJheUJ1ZmZlcigxLjUpOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLW5ld1xuICAgIG5ldyAkQXJyYXlCdWZmZXIoTmFOKTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1uZXdcbiAgICByZXR1cm4gJEFycmF5QnVmZmVyLm5hbWUgIT0gQVJSQVlfQlVGRkVSO1xuICB9KSkge1xuICAgICRBcnJheUJ1ZmZlciA9IGZ1bmN0aW9uIEFycmF5QnVmZmVyKGxlbmd0aCkge1xuICAgICAgYW5JbnN0YW5jZSh0aGlzLCAkQXJyYXlCdWZmZXIpO1xuICAgICAgcmV0dXJuIG5ldyBCYXNlQnVmZmVyKHRvSW5kZXgobGVuZ3RoKSk7XG4gICAgfTtcbiAgICB2YXIgQXJyYXlCdWZmZXJQcm90byA9ICRBcnJheUJ1ZmZlcltQUk9UT1RZUEVdID0gQmFzZUJ1ZmZlcltQUk9UT1RZUEVdO1xuICAgIGZvciAodmFyIGtleXMgPSBnT1BOKEJhc2VCdWZmZXIpLCBqID0gMCwga2V5OyBrZXlzLmxlbmd0aCA+IGo7KSB7XG4gICAgICBpZiAoISgoa2V5ID0ga2V5c1tqKytdKSBpbiAkQXJyYXlCdWZmZXIpKSBoaWRlKCRBcnJheUJ1ZmZlciwga2V5LCBCYXNlQnVmZmVyW2tleV0pO1xuICAgIH1cbiAgICBpZiAoIUxJQlJBUlkpIEFycmF5QnVmZmVyUHJvdG8uY29uc3RydWN0b3IgPSAkQXJyYXlCdWZmZXI7XG4gIH1cbiAgLy8gaU9TIFNhZmFyaSA3LnggYnVnXG4gIHZhciB2aWV3ID0gbmV3ICREYXRhVmlldyhuZXcgJEFycmF5QnVmZmVyKDIpKTtcbiAgdmFyICRzZXRJbnQ4ID0gJERhdGFWaWV3W1BST1RPVFlQRV0uc2V0SW50ODtcbiAgdmlldy5zZXRJbnQ4KDAsIDIxNDc0ODM2NDgpO1xuICB2aWV3LnNldEludDgoMSwgMjE0NzQ4MzY0OSk7XG4gIGlmICh2aWV3LmdldEludDgoMCkgfHwgIXZpZXcuZ2V0SW50OCgxKSkgcmVkZWZpbmVBbGwoJERhdGFWaWV3W1BST1RPVFlQRV0sIHtcbiAgICBzZXRJbnQ4OiBmdW5jdGlvbiBzZXRJbnQ4KGJ5dGVPZmZzZXQsIHZhbHVlKSB7XG4gICAgICAkc2V0SW50OC5jYWxsKHRoaXMsIGJ5dGVPZmZzZXQsIHZhbHVlIDw8IDI0ID4+IDI0KTtcbiAgICB9LFxuICAgIHNldFVpbnQ4OiBmdW5jdGlvbiBzZXRVaW50OChieXRlT2Zmc2V0LCB2YWx1ZSkge1xuICAgICAgJHNldEludDguY2FsbCh0aGlzLCBieXRlT2Zmc2V0LCB2YWx1ZSA8PCAyNCA+PiAyNCk7XG4gICAgfVxuICB9LCB0cnVlKTtcbn1cbnNldFRvU3RyaW5nVGFnKCRBcnJheUJ1ZmZlciwgQVJSQVlfQlVGRkVSKTtcbnNldFRvU3RyaW5nVGFnKCREYXRhVmlldywgREFUQV9WSUVXKTtcbmhpZGUoJERhdGFWaWV3W1BST1RPVFlQRV0sICR0eXBlZC5WSUVXLCB0cnVlKTtcbmV4cG9ydHNbQVJSQVlfQlVGRkVSXSA9ICRBcnJheUJ1ZmZlcjtcbmV4cG9ydHNbREFUQV9WSUVXXSA9ICREYXRhVmlldztcbiIsIi8vIGh0dHBzOi8vZ2l0aHViLmNvbS96bG9pcm9jay9jb3JlLWpzL2lzc3Vlcy84NiNpc3N1ZWNvbW1lbnQtMTE1NzU5MDI4XG52YXIgZ2xvYmFsID0gbW9kdWxlLmV4cG9ydHMgPSB0eXBlb2Ygd2luZG93ICE9ICd1bmRlZmluZWQnICYmIHdpbmRvdy5NYXRoID09IE1hdGhcbiAgPyB3aW5kb3cgOiB0eXBlb2Ygc2VsZiAhPSAndW5kZWZpbmVkJyAmJiBzZWxmLk1hdGggPT0gTWF0aCA/IHNlbGZcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLW5ldy1mdW5jXG4gIDogRnVuY3Rpb24oJ3JldHVybiB0aGlzJykoKTtcbmlmICh0eXBlb2YgX19nID09ICdudW1iZXInKSBfX2cgPSBnbG9iYWw7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW5kZWZcbiIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiB0eXBlb2YgaXQgPT09ICdvYmplY3QnID8gaXQgIT09IG51bGwgOiB0eXBlb2YgaXQgPT09ICdmdW5jdGlvbic7XG59O1xuIiwiLy8gVGhhbmsncyBJRTggZm9yIGhpcyBmdW5ueSBkZWZpbmVQcm9wZXJ0eVxubW9kdWxlLmV4cG9ydHMgPSAhcmVxdWlyZSgnLi9fZmFpbHMnKShmdW5jdGlvbiAoKSB7XG4gIHJldHVybiBPYmplY3QuZGVmaW5lUHJvcGVydHkoe30sICdhJywgeyBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIDc7IH0gfSkuYSAhPSA3O1xufSk7XG4iLCJtb2R1bGUuZXhwb3J0cyA9ICFyZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpICYmICFyZXF1aXJlKCcuL19mYWlscycpKGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShyZXF1aXJlKCcuL19kb20tY3JlYXRlJykoJ2RpdicpLCAnYScsIHsgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiA3OyB9IH0pLmEgIT0gNztcbn0pO1xuIiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpO1xudmFyIGNvcmUgPSByZXF1aXJlKCcuL19jb3JlJyk7XG52YXIgTElCUkFSWSA9IHJlcXVpcmUoJy4vX2xpYnJhcnknKTtcbnZhciB3a3NFeHQgPSByZXF1aXJlKCcuL193a3MtZXh0Jyk7XG52YXIgZGVmaW5lUHJvcGVydHkgPSByZXF1aXJlKCcuL19vYmplY3QtZHAnKS5mO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAobmFtZSkge1xuICB2YXIgJFN5bWJvbCA9IGNvcmUuU3ltYm9sIHx8IChjb3JlLlN5bWJvbCA9IExJQlJBUlkgPyB7fSA6IGdsb2JhbC5TeW1ib2wgfHwge30pO1xuICBpZiAobmFtZS5jaGFyQXQoMCkgIT0gJ18nICYmICEobmFtZSBpbiAkU3ltYm9sKSkgZGVmaW5lUHJvcGVydHkoJFN5bWJvbCwgbmFtZSwgeyB2YWx1ZTogd2tzRXh0LmYobmFtZSkgfSk7XG59O1xuIiwidmFyIGhhcyA9IHJlcXVpcmUoJy4vX2hhcycpO1xudmFyIHRvSU9iamVjdCA9IHJlcXVpcmUoJy4vX3RvLWlvYmplY3QnKTtcbnZhciBhcnJheUluZGV4T2YgPSByZXF1aXJlKCcuL19hcnJheS1pbmNsdWRlcycpKGZhbHNlKTtcbnZhciBJRV9QUk9UTyA9IHJlcXVpcmUoJy4vX3NoYXJlZC1rZXknKSgnSUVfUFJPVE8nKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAob2JqZWN0LCBuYW1lcykge1xuICB2YXIgTyA9IHRvSU9iamVjdChvYmplY3QpO1xuICB2YXIgaSA9IDA7XG4gIHZhciByZXN1bHQgPSBbXTtcbiAgdmFyIGtleTtcbiAgZm9yIChrZXkgaW4gTykgaWYgKGtleSAhPSBJRV9QUk9UTykgaGFzKE8sIGtleSkgJiYgcmVzdWx0LnB1c2goa2V5KTtcbiAgLy8gRG9uJ3QgZW51bSBidWcgJiBoaWRkZW4ga2V5c1xuICB3aGlsZSAobmFtZXMubGVuZ3RoID4gaSkgaWYgKGhhcyhPLCBrZXkgPSBuYW1lc1tpKytdKSkge1xuICAgIH5hcnJheUluZGV4T2YocmVzdWx0LCBrZXkpIHx8IHJlc3VsdC5wdXNoKGtleSk7XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn07XG4iLCJ2YXIgZFAgPSByZXF1aXJlKCcuL19vYmplY3QtZHAnKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIGdldEtleXMgPSByZXF1aXJlKCcuL19vYmplY3Qta2V5cycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJykgPyBPYmplY3QuZGVmaW5lUHJvcGVydGllcyA6IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXMoTywgUHJvcGVydGllcykge1xuICBhbk9iamVjdChPKTtcbiAgdmFyIGtleXMgPSBnZXRLZXlzKFByb3BlcnRpZXMpO1xuICB2YXIgbGVuZ3RoID0ga2V5cy5sZW5ndGg7XG4gIHZhciBpID0gMDtcbiAgdmFyIFA7XG4gIHdoaWxlIChsZW5ndGggPiBpKSBkUC5mKE8sIFAgPSBrZXlzW2krK10sIFByb3BlcnRpZXNbUF0pO1xuICByZXR1cm4gTztcbn07XG4iLCIvLyBmYWxsYmFjayBmb3IgSUUxMSBidWdneSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyB3aXRoIGlmcmFtZSBhbmQgd2luZG93XG52YXIgdG9JT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8taW9iamVjdCcpO1xudmFyIGdPUE4gPSByZXF1aXJlKCcuL19vYmplY3QtZ29wbicpLmY7XG52YXIgdG9TdHJpbmcgPSB7fS50b1N0cmluZztcblxudmFyIHdpbmRvd05hbWVzID0gdHlwZW9mIHdpbmRvdyA9PSAnb2JqZWN0JyAmJiB3aW5kb3cgJiYgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXNcbiAgPyBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyh3aW5kb3cpIDogW107XG5cbnZhciBnZXRXaW5kb3dOYW1lcyA9IGZ1bmN0aW9uIChpdCkge1xuICB0cnkge1xuICAgIHJldHVybiBnT1BOKGl0KTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIHJldHVybiB3aW5kb3dOYW1lcy5zbGljZSgpO1xuICB9XG59O1xuXG5tb2R1bGUuZXhwb3J0cy5mID0gZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlOYW1lcyhpdCkge1xuICByZXR1cm4gd2luZG93TmFtZXMgJiYgdG9TdHJpbmcuY2FsbChpdCkgPT0gJ1tvYmplY3QgV2luZG93XScgPyBnZXRXaW5kb3dOYW1lcyhpdCkgOiBnT1BOKHRvSU9iamVjdChpdCkpO1xufTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIDE5LjEuMi4xIE9iamVjdC5hc3NpZ24odGFyZ2V0LCBzb3VyY2UsIC4uLilcbnZhciBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJyk7XG52YXIgZ2V0S2V5cyA9IHJlcXVpcmUoJy4vX29iamVjdC1rZXlzJyk7XG52YXIgZ09QUyA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BzJyk7XG52YXIgcElFID0gcmVxdWlyZSgnLi9fb2JqZWN0LXBpZScpO1xudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8tb2JqZWN0Jyk7XG52YXIgSU9iamVjdCA9IHJlcXVpcmUoJy4vX2lvYmplY3QnKTtcbnZhciAkYXNzaWduID0gT2JqZWN0LmFzc2lnbjtcblxuLy8gc2hvdWxkIHdvcmsgd2l0aCBzeW1ib2xzIGFuZCBzaG91bGQgaGF2ZSBkZXRlcm1pbmlzdGljIHByb3BlcnR5IG9yZGVyIChWOCBidWcpXG5tb2R1bGUuZXhwb3J0cyA9ICEkYXNzaWduIHx8IHJlcXVpcmUoJy4vX2ZhaWxzJykoZnVuY3Rpb24gKCkge1xuICB2YXIgQSA9IHt9O1xuICB2YXIgQiA9IHt9O1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW5kZWZcbiAgdmFyIFMgPSBTeW1ib2woKTtcbiAgdmFyIEsgPSAnYWJjZGVmZ2hpamtsbW5vcHFyc3QnO1xuICBBW1NdID0gNztcbiAgSy5zcGxpdCgnJykuZm9yRWFjaChmdW5jdGlvbiAoaykgeyBCW2tdID0gazsgfSk7XG4gIHJldHVybiAkYXNzaWduKHt9LCBBKVtTXSAhPSA3IHx8IE9iamVjdC5rZXlzKCRhc3NpZ24oe30sIEIpKS5qb2luKCcnKSAhPSBLO1xufSkgPyBmdW5jdGlvbiBhc3NpZ24odGFyZ2V0LCBzb3VyY2UpIHsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bnVzZWQtdmFyc1xuICB2YXIgVCA9IHRvT2JqZWN0KHRhcmdldCk7XG4gIHZhciBhTGVuID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgdmFyIGluZGV4ID0gMTtcbiAgdmFyIGdldFN5bWJvbHMgPSBnT1BTLmY7XG4gIHZhciBpc0VudW0gPSBwSUUuZjtcbiAgd2hpbGUgKGFMZW4gPiBpbmRleCkge1xuICAgIHZhciBTID0gSU9iamVjdChhcmd1bWVudHNbaW5kZXgrK10pO1xuICAgIHZhciBrZXlzID0gZ2V0U3ltYm9scyA/IGdldEtleXMoUykuY29uY2F0KGdldFN5bWJvbHMoUykpIDogZ2V0S2V5cyhTKTtcbiAgICB2YXIgbGVuZ3RoID0ga2V5cy5sZW5ndGg7XG4gICAgdmFyIGogPSAwO1xuICAgIHZhciBrZXk7XG4gICAgd2hpbGUgKGxlbmd0aCA+IGopIHtcbiAgICAgIGtleSA9IGtleXNbaisrXTtcbiAgICAgIGlmICghREVTQ1JJUFRPUlMgfHwgaXNFbnVtLmNhbGwoUywga2V5KSkgVFtrZXldID0gU1trZXldO1xuICAgIH1cbiAgfSByZXR1cm4gVDtcbn0gOiAkYXNzaWduO1xuIiwiLy8gNy4yLjkgU2FtZVZhbHVlKHgsIHkpXG5tb2R1bGUuZXhwb3J0cyA9IE9iamVjdC5pcyB8fCBmdW5jdGlvbiBpcyh4LCB5KSB7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zZWxmLWNvbXBhcmVcbiAgcmV0dXJuIHggPT09IHkgPyB4ICE9PSAwIHx8IDEgLyB4ID09PSAxIC8geSA6IHggIT0geCAmJiB5ICE9IHk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGFGdW5jdGlvbiA9IHJlcXVpcmUoJy4vX2EtZnVuY3Rpb24nKTtcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xudmFyIGludm9rZSA9IHJlcXVpcmUoJy4vX2ludm9rZScpO1xudmFyIGFycmF5U2xpY2UgPSBbXS5zbGljZTtcbnZhciBmYWN0b3JpZXMgPSB7fTtcblxudmFyIGNvbnN0cnVjdCA9IGZ1bmN0aW9uIChGLCBsZW4sIGFyZ3MpIHtcbiAgaWYgKCEobGVuIGluIGZhY3RvcmllcykpIHtcbiAgICBmb3IgKHZhciBuID0gW10sIGkgPSAwOyBpIDwgbGVuOyBpKyspIG5baV0gPSAnYVsnICsgaSArICddJztcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tbmV3LWZ1bmNcbiAgICBmYWN0b3JpZXNbbGVuXSA9IEZ1bmN0aW9uKCdGLGEnLCAncmV0dXJuIG5ldyBGKCcgKyBuLmpvaW4oJywnKSArICcpJyk7XG4gIH0gcmV0dXJuIGZhY3Rvcmllc1tsZW5dKEYsIGFyZ3MpO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBGdW5jdGlvbi5iaW5kIHx8IGZ1bmN0aW9uIGJpbmQodGhhdCAvKiAsIC4uLmFyZ3MgKi8pIHtcbiAgdmFyIGZuID0gYUZ1bmN0aW9uKHRoaXMpO1xuICB2YXIgcGFydEFyZ3MgPSBhcnJheVNsaWNlLmNhbGwoYXJndW1lbnRzLCAxKTtcbiAgdmFyIGJvdW5kID0gZnVuY3Rpb24gKC8qIGFyZ3MuLi4gKi8pIHtcbiAgICB2YXIgYXJncyA9IHBhcnRBcmdzLmNvbmNhdChhcnJheVNsaWNlLmNhbGwoYXJndW1lbnRzKSk7XG4gICAgcmV0dXJuIHRoaXMgaW5zdGFuY2VvZiBib3VuZCA/IGNvbnN0cnVjdChmbiwgYXJncy5sZW5ndGgsIGFyZ3MpIDogaW52b2tlKGZuLCBhcmdzLCB0aGF0KTtcbiAgfTtcbiAgaWYgKGlzT2JqZWN0KGZuLnByb3RvdHlwZSkpIGJvdW5kLnByb3RvdHlwZSA9IGZuLnByb3RvdHlwZTtcbiAgcmV0dXJuIGJvdW5kO1xufTtcbiIsIi8vIGZhc3QgYXBwbHksIGh0dHA6Ly9qc3BlcmYubG5raXQuY29tL2Zhc3QtYXBwbHkvNVxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoZm4sIGFyZ3MsIHRoYXQpIHtcbiAgdmFyIHVuID0gdGhhdCA9PT0gdW5kZWZpbmVkO1xuICBzd2l0Y2ggKGFyZ3MubGVuZ3RoKSB7XG4gICAgY2FzZSAwOiByZXR1cm4gdW4gPyBmbigpXG4gICAgICAgICAgICAgICAgICAgICAgOiBmbi5jYWxsKHRoYXQpO1xuICAgIGNhc2UgMTogcmV0dXJuIHVuID8gZm4oYXJnc1swXSlcbiAgICAgICAgICAgICAgICAgICAgICA6IGZuLmNhbGwodGhhdCwgYXJnc1swXSk7XG4gICAgY2FzZSAyOiByZXR1cm4gdW4gPyBmbihhcmdzWzBdLCBhcmdzWzFdKVxuICAgICAgICAgICAgICAgICAgICAgIDogZm4uY2FsbCh0aGF0LCBhcmdzWzBdLCBhcmdzWzFdKTtcbiAgICBjYXNlIDM6IHJldHVybiB1biA/IGZuKGFyZ3NbMF0sIGFyZ3NbMV0sIGFyZ3NbMl0pXG4gICAgICAgICAgICAgICAgICAgICAgOiBmbi5jYWxsKHRoYXQsIGFyZ3NbMF0sIGFyZ3NbMV0sIGFyZ3NbMl0pO1xuICAgIGNhc2UgNDogcmV0dXJuIHVuID8gZm4oYXJnc1swXSwgYXJnc1sxXSwgYXJnc1syXSwgYXJnc1szXSlcbiAgICAgICAgICAgICAgICAgICAgICA6IGZuLmNhbGwodGhhdCwgYXJnc1swXSwgYXJnc1sxXSwgYXJnc1syXSwgYXJnc1szXSk7XG4gIH0gcmV0dXJuIGZuLmFwcGx5KHRoYXQsIGFyZ3MpO1xufTtcbiIsInZhciAkcGFyc2VJbnQgPSByZXF1aXJlKCcuL19nbG9iYWwnKS5wYXJzZUludDtcbnZhciAkdHJpbSA9IHJlcXVpcmUoJy4vX3N0cmluZy10cmltJykudHJpbTtcbnZhciB3cyA9IHJlcXVpcmUoJy4vX3N0cmluZy13cycpO1xudmFyIGhleCA9IC9eWy0rXT8wW3hYXS87XG5cbm1vZHVsZS5leHBvcnRzID0gJHBhcnNlSW50KHdzICsgJzA4JykgIT09IDggfHwgJHBhcnNlSW50KHdzICsgJzB4MTYnKSAhPT0gMjIgPyBmdW5jdGlvbiBwYXJzZUludChzdHIsIHJhZGl4KSB7XG4gIHZhciBzdHJpbmcgPSAkdHJpbShTdHJpbmcoc3RyKSwgMyk7XG4gIHJldHVybiAkcGFyc2VJbnQoc3RyaW5nLCAocmFkaXggPj4+IDApIHx8IChoZXgudGVzdChzdHJpbmcpID8gMTYgOiAxMCkpO1xufSA6ICRwYXJzZUludDtcbiIsInZhciAkcGFyc2VGbG9hdCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpLnBhcnNlRmxvYXQ7XG52YXIgJHRyaW0gPSByZXF1aXJlKCcuL19zdHJpbmctdHJpbScpLnRyaW07XG5cbm1vZHVsZS5leHBvcnRzID0gMSAvICRwYXJzZUZsb2F0KHJlcXVpcmUoJy4vX3N0cmluZy13cycpICsgJy0wJykgIT09IC1JbmZpbml0eSA/IGZ1bmN0aW9uIHBhcnNlRmxvYXQoc3RyKSB7XG4gIHZhciBzdHJpbmcgPSAkdHJpbShTdHJpbmcoc3RyKSwgMyk7XG4gIHZhciByZXN1bHQgPSAkcGFyc2VGbG9hdChzdHJpbmcpO1xuICByZXR1cm4gcmVzdWx0ID09PSAwICYmIHN0cmluZy5jaGFyQXQoMCkgPT0gJy0nID8gLTAgOiByZXN1bHQ7XG59IDogJHBhcnNlRmxvYXQ7XG4iLCJ2YXIgY29mID0gcmVxdWlyZSgnLi9fY29mJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCwgbXNnKSB7XG4gIGlmICh0eXBlb2YgaXQgIT0gJ251bWJlcicgJiYgY29mKGl0KSAhPSAnTnVtYmVyJykgdGhyb3cgVHlwZUVycm9yKG1zZyk7XG4gIHJldHVybiAraXQ7XG59O1xuIiwiLy8gMjAuMS4yLjMgTnVtYmVyLmlzSW50ZWdlcihudW1iZXIpXG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbnZhciBmbG9vciA9IE1hdGguZmxvb3I7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGlzSW50ZWdlcihpdCkge1xuICByZXR1cm4gIWlzT2JqZWN0KGl0KSAmJiBpc0Zpbml0ZShpdCkgJiYgZmxvb3IoaXQpID09PSBpdDtcbn07XG4iLCIvLyAyMC4yLjIuMjAgTWF0aC5sb2cxcCh4KVxubW9kdWxlLmV4cG9ydHMgPSBNYXRoLmxvZzFwIHx8IGZ1bmN0aW9uIGxvZzFwKHgpIHtcbiAgcmV0dXJuICh4ID0gK3gpID4gLTFlLTggJiYgeCA8IDFlLTggPyB4IC0geCAqIHggLyAyIDogTWF0aC5sb2coMSArIHgpO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBjcmVhdGUgPSByZXF1aXJlKCcuL19vYmplY3QtY3JlYXRlJyk7XG52YXIgZGVzY3JpcHRvciA9IHJlcXVpcmUoJy4vX3Byb3BlcnR5LWRlc2MnKTtcbnZhciBzZXRUb1N0cmluZ1RhZyA9IHJlcXVpcmUoJy4vX3NldC10by1zdHJpbmctdGFnJyk7XG52YXIgSXRlcmF0b3JQcm90b3R5cGUgPSB7fTtcblxuLy8gMjUuMS4yLjEuMSAlSXRlcmF0b3JQcm90b3R5cGUlW0BAaXRlcmF0b3JdKClcbnJlcXVpcmUoJy4vX2hpZGUnKShJdGVyYXRvclByb3RvdHlwZSwgcmVxdWlyZSgnLi9fd2tzJykoJ2l0ZXJhdG9yJyksIGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXM7IH0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgTkFNRSwgbmV4dCkge1xuICBDb25zdHJ1Y3Rvci5wcm90b3R5cGUgPSBjcmVhdGUoSXRlcmF0b3JQcm90b3R5cGUsIHsgbmV4dDogZGVzY3JpcHRvcigxLCBuZXh0KSB9KTtcbiAgc2V0VG9TdHJpbmdUYWcoQ29uc3RydWN0b3IsIE5BTUUgKyAnIEl0ZXJhdG9yJyk7XG59O1xuIiwiLy8gY2FsbCBzb21ldGhpbmcgb24gaXRlcmF0b3Igc3RlcCB3aXRoIHNhZmUgY2xvc2luZyBvbiBlcnJvclxudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdGVyYXRvciwgZm4sIHZhbHVlLCBlbnRyaWVzKSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuIGVudHJpZXMgPyBmbihhbk9iamVjdCh2YWx1ZSlbMF0sIHZhbHVlWzFdKSA6IGZuKHZhbHVlKTtcbiAgLy8gNy40LjYgSXRlcmF0b3JDbG9zZShpdGVyYXRvciwgY29tcGxldGlvbilcbiAgfSBjYXRjaCAoZSkge1xuICAgIHZhciByZXQgPSBpdGVyYXRvclsncmV0dXJuJ107XG4gICAgaWYgKHJldCAhPT0gdW5kZWZpbmVkKSBhbk9iamVjdChyZXQuY2FsbChpdGVyYXRvcikpO1xuICAgIHRocm93IGU7XG4gIH1cbn07XG4iLCIvLyA5LjQuMi4zIEFycmF5U3BlY2llc0NyZWF0ZShvcmlnaW5hbEFycmF5LCBsZW5ndGgpXG52YXIgc3BlY2llc0NvbnN0cnVjdG9yID0gcmVxdWlyZSgnLi9fYXJyYXktc3BlY2llcy1jb25zdHJ1Y3RvcicpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChvcmlnaW5hbCwgbGVuZ3RoKSB7XG4gIHJldHVybiBuZXcgKHNwZWNpZXNDb25zdHJ1Y3RvcihvcmlnaW5hbCkpKGxlbmd0aCk7XG59O1xuIiwidmFyIGFGdW5jdGlvbiA9IHJlcXVpcmUoJy4vX2EtZnVuY3Rpb24nKTtcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4vX3RvLW9iamVjdCcpO1xudmFyIElPYmplY3QgPSByZXF1aXJlKCcuL19pb2JqZWN0Jyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuL190by1sZW5ndGgnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAodGhhdCwgY2FsbGJhY2tmbiwgYUxlbiwgbWVtbywgaXNSaWdodCkge1xuICBhRnVuY3Rpb24oY2FsbGJhY2tmbik7XG4gIHZhciBPID0gdG9PYmplY3QodGhhdCk7XG4gIHZhciBzZWxmID0gSU9iamVjdChPKTtcbiAgdmFyIGxlbmd0aCA9IHRvTGVuZ3RoKE8ubGVuZ3RoKTtcbiAgdmFyIGluZGV4ID0gaXNSaWdodCA/IGxlbmd0aCAtIDEgOiAwO1xuICB2YXIgaSA9IGlzUmlnaHQgPyAtMSA6IDE7XG4gIGlmIChhTGVuIDwgMikgZm9yICg7Oykge1xuICAgIGlmIChpbmRleCBpbiBzZWxmKSB7XG4gICAgICBtZW1vID0gc2VsZltpbmRleF07XG4gICAgICBpbmRleCArPSBpO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICAgIGluZGV4ICs9IGk7XG4gICAgaWYgKGlzUmlnaHQgPyBpbmRleCA8IDAgOiBsZW5ndGggPD0gaW5kZXgpIHtcbiAgICAgIHRocm93IFR5cGVFcnJvcignUmVkdWNlIG9mIGVtcHR5IGFycmF5IHdpdGggbm8gaW5pdGlhbCB2YWx1ZScpO1xuICAgIH1cbiAgfVxuICBmb3IgKDtpc1JpZ2h0ID8gaW5kZXggPj0gMCA6IGxlbmd0aCA+IGluZGV4OyBpbmRleCArPSBpKSBpZiAoaW5kZXggaW4gc2VsZikge1xuICAgIG1lbW8gPSBjYWxsYmFja2ZuKG1lbW8sIHNlbGZbaW5kZXhdLCBpbmRleCwgTyk7XG4gIH1cbiAgcmV0dXJuIG1lbW87XG59O1xuIiwiLy8gMjIuMS4zLjMgQXJyYXkucHJvdG90eXBlLmNvcHlXaXRoaW4odGFyZ2V0LCBzdGFydCwgZW5kID0gdGhpcy5sZW5ndGgpXG4ndXNlIHN0cmljdCc7XG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuL190by1vYmplY3QnKTtcbnZhciB0b0Fic29sdXRlSW5kZXggPSByZXF1aXJlKCcuL190by1hYnNvbHV0ZS1pbmRleCcpO1xudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi9fdG8tbGVuZ3RoJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gW10uY29weVdpdGhpbiB8fCBmdW5jdGlvbiBjb3B5V2l0aGluKHRhcmdldCAvKiA9IDAgKi8sIHN0YXJ0IC8qID0gMCwgZW5kID0gQGxlbmd0aCAqLykge1xuICB2YXIgTyA9IHRvT2JqZWN0KHRoaXMpO1xuICB2YXIgbGVuID0gdG9MZW5ndGgoTy5sZW5ndGgpO1xuICB2YXIgdG8gPSB0b0Fic29sdXRlSW5kZXgodGFyZ2V0LCBsZW4pO1xuICB2YXIgZnJvbSA9IHRvQWJzb2x1dGVJbmRleChzdGFydCwgbGVuKTtcbiAgdmFyIGVuZCA9IGFyZ3VtZW50cy5sZW5ndGggPiAyID8gYXJndW1lbnRzWzJdIDogdW5kZWZpbmVkO1xuICB2YXIgY291bnQgPSBNYXRoLm1pbigoZW5kID09PSB1bmRlZmluZWQgPyBsZW4gOiB0b0Fic29sdXRlSW5kZXgoZW5kLCBsZW4pKSAtIGZyb20sIGxlbiAtIHRvKTtcbiAgdmFyIGluYyA9IDE7XG4gIGlmIChmcm9tIDwgdG8gJiYgdG8gPCBmcm9tICsgY291bnQpIHtcbiAgICBpbmMgPSAtMTtcbiAgICBmcm9tICs9IGNvdW50IC0gMTtcbiAgICB0byArPSBjb3VudCAtIDE7XG4gIH1cbiAgd2hpbGUgKGNvdW50LS0gPiAwKSB7XG4gICAgaWYgKGZyb20gaW4gTykgT1t0b10gPSBPW2Zyb21dO1xuICAgIGVsc2UgZGVsZXRlIE9bdG9dO1xuICAgIHRvICs9IGluYztcbiAgICBmcm9tICs9IGluYztcbiAgfSByZXR1cm4gTztcbn07XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChkb25lLCB2YWx1ZSkge1xuICByZXR1cm4geyB2YWx1ZTogdmFsdWUsIGRvbmU6ICEhZG9uZSB9O1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciByZWdleHBFeGVjID0gcmVxdWlyZSgnLi9fcmVnZXhwLWV4ZWMnKTtcbnJlcXVpcmUoJy4vX2V4cG9ydCcpKHtcbiAgdGFyZ2V0OiAnUmVnRXhwJyxcbiAgcHJvdG86IHRydWUsXG4gIGZvcmNlZDogcmVnZXhwRXhlYyAhPT0gLy4vLmV4ZWNcbn0sIHtcbiAgZXhlYzogcmVnZXhwRXhlY1xufSk7XG4iLCIvLyAyMS4yLjUuMyBnZXQgUmVnRXhwLnByb3RvdHlwZS5mbGFncygpXG5pZiAocmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKSAmJiAvLi9nLmZsYWdzICE9ICdnJykgcmVxdWlyZSgnLi9fb2JqZWN0LWRwJykuZihSZWdFeHAucHJvdG90eXBlLCAnZmxhZ3MnLCB7XG4gIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgZ2V0OiByZXF1aXJlKCcuL19mbGFncycpXG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBMSUJSQVJZID0gcmVxdWlyZSgnLi9fbGlicmFyeScpO1xudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpO1xudmFyIGN0eCA9IHJlcXVpcmUoJy4vX2N0eCcpO1xudmFyIGNsYXNzb2YgPSByZXF1aXJlKCcuL19jbGFzc29mJyk7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG52YXIgYUZ1bmN0aW9uID0gcmVxdWlyZSgnLi9fYS1mdW5jdGlvbicpO1xudmFyIGFuSW5zdGFuY2UgPSByZXF1aXJlKCcuL19hbi1pbnN0YW5jZScpO1xudmFyIGZvck9mID0gcmVxdWlyZSgnLi9fZm9yLW9mJyk7XG52YXIgc3BlY2llc0NvbnN0cnVjdG9yID0gcmVxdWlyZSgnLi9fc3BlY2llcy1jb25zdHJ1Y3RvcicpO1xudmFyIHRhc2sgPSByZXF1aXJlKCcuL190YXNrJykuc2V0O1xudmFyIG1pY3JvdGFzayA9IHJlcXVpcmUoJy4vX21pY3JvdGFzaycpKCk7XG52YXIgbmV3UHJvbWlzZUNhcGFiaWxpdHlNb2R1bGUgPSByZXF1aXJlKCcuL19uZXctcHJvbWlzZS1jYXBhYmlsaXR5Jyk7XG52YXIgcGVyZm9ybSA9IHJlcXVpcmUoJy4vX3BlcmZvcm0nKTtcbnZhciB1c2VyQWdlbnQgPSByZXF1aXJlKCcuL191c2VyLWFnZW50Jyk7XG52YXIgcHJvbWlzZVJlc29sdmUgPSByZXF1aXJlKCcuL19wcm9taXNlLXJlc29sdmUnKTtcbnZhciBQUk9NSVNFID0gJ1Byb21pc2UnO1xudmFyIFR5cGVFcnJvciA9IGdsb2JhbC5UeXBlRXJyb3I7XG52YXIgcHJvY2VzcyA9IGdsb2JhbC5wcm9jZXNzO1xudmFyIHZlcnNpb25zID0gcHJvY2VzcyAmJiBwcm9jZXNzLnZlcnNpb25zO1xudmFyIHY4ID0gdmVyc2lvbnMgJiYgdmVyc2lvbnMudjggfHwgJyc7XG52YXIgJFByb21pc2UgPSBnbG9iYWxbUFJPTUlTRV07XG52YXIgaXNOb2RlID0gY2xhc3NvZihwcm9jZXNzKSA9PSAncHJvY2Vzcyc7XG52YXIgZW1wdHkgPSBmdW5jdGlvbiAoKSB7IC8qIGVtcHR5ICovIH07XG52YXIgSW50ZXJuYWwsIG5ld0dlbmVyaWNQcm9taXNlQ2FwYWJpbGl0eSwgT3duUHJvbWlzZUNhcGFiaWxpdHksIFdyYXBwZXI7XG52YXIgbmV3UHJvbWlzZUNhcGFiaWxpdHkgPSBuZXdHZW5lcmljUHJvbWlzZUNhcGFiaWxpdHkgPSBuZXdQcm9taXNlQ2FwYWJpbGl0eU1vZHVsZS5mO1xuXG52YXIgVVNFX05BVElWRSA9ICEhZnVuY3Rpb24gKCkge1xuICB0cnkge1xuICAgIC8vIGNvcnJlY3Qgc3ViY2xhc3Npbmcgd2l0aCBAQHNwZWNpZXMgc3VwcG9ydFxuICAgIHZhciBwcm9taXNlID0gJFByb21pc2UucmVzb2x2ZSgxKTtcbiAgICB2YXIgRmFrZVByb21pc2UgPSAocHJvbWlzZS5jb25zdHJ1Y3RvciA9IHt9KVtyZXF1aXJlKCcuL193a3MnKSgnc3BlY2llcycpXSA9IGZ1bmN0aW9uIChleGVjKSB7XG4gICAgICBleGVjKGVtcHR5LCBlbXB0eSk7XG4gICAgfTtcbiAgICAvLyB1bmhhbmRsZWQgcmVqZWN0aW9ucyB0cmFja2luZyBzdXBwb3J0LCBOb2RlSlMgUHJvbWlzZSB3aXRob3V0IGl0IGZhaWxzIEBAc3BlY2llcyB0ZXN0XG4gICAgcmV0dXJuIChpc05vZGUgfHwgdHlwZW9mIFByb21pc2VSZWplY3Rpb25FdmVudCA9PSAnZnVuY3Rpb24nKVxuICAgICAgJiYgcHJvbWlzZS50aGVuKGVtcHR5KSBpbnN0YW5jZW9mIEZha2VQcm9taXNlXG4gICAgICAvLyB2OCA2LjYgKE5vZGUgMTAgYW5kIENocm9tZSA2NikgaGF2ZSBhIGJ1ZyB3aXRoIHJlc29sdmluZyBjdXN0b20gdGhlbmFibGVzXG4gICAgICAvLyBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvY2hyb21pdW0vaXNzdWVzL2RldGFpbD9pZD04MzA1NjVcbiAgICAgIC8vIHdlIGNhbid0IGRldGVjdCBpdCBzeW5jaHJvbm91c2x5LCBzbyBqdXN0IGNoZWNrIHZlcnNpb25zXG4gICAgICAmJiB2OC5pbmRleE9mKCc2LjYnKSAhPT0gMFxuICAgICAgJiYgdXNlckFnZW50LmluZGV4T2YoJ0Nocm9tZS82NicpID09PSAtMTtcbiAgfSBjYXRjaCAoZSkgeyAvKiBlbXB0eSAqLyB9XG59KCk7XG5cbi8vIGhlbHBlcnNcbnZhciBpc1RoZW5hYmxlID0gZnVuY3Rpb24gKGl0KSB7XG4gIHZhciB0aGVuO1xuICByZXR1cm4gaXNPYmplY3QoaXQpICYmIHR5cGVvZiAodGhlbiA9IGl0LnRoZW4pID09ICdmdW5jdGlvbicgPyB0aGVuIDogZmFsc2U7XG59O1xudmFyIG5vdGlmeSA9IGZ1bmN0aW9uIChwcm9taXNlLCBpc1JlamVjdCkge1xuICBpZiAocHJvbWlzZS5fbikgcmV0dXJuO1xuICBwcm9taXNlLl9uID0gdHJ1ZTtcbiAgdmFyIGNoYWluID0gcHJvbWlzZS5fYztcbiAgbWljcm90YXNrKGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgdmFsdWUgPSBwcm9taXNlLl92O1xuICAgIHZhciBvayA9IHByb21pc2UuX3MgPT0gMTtcbiAgICB2YXIgaSA9IDA7XG4gICAgdmFyIHJ1biA9IGZ1bmN0aW9uIChyZWFjdGlvbikge1xuICAgICAgdmFyIGhhbmRsZXIgPSBvayA/IHJlYWN0aW9uLm9rIDogcmVhY3Rpb24uZmFpbDtcbiAgICAgIHZhciByZXNvbHZlID0gcmVhY3Rpb24ucmVzb2x2ZTtcbiAgICAgIHZhciByZWplY3QgPSByZWFjdGlvbi5yZWplY3Q7XG4gICAgICB2YXIgZG9tYWluID0gcmVhY3Rpb24uZG9tYWluO1xuICAgICAgdmFyIHJlc3VsdCwgdGhlbiwgZXhpdGVkO1xuICAgICAgdHJ5IHtcbiAgICAgICAgaWYgKGhhbmRsZXIpIHtcbiAgICAgICAgICBpZiAoIW9rKSB7XG4gICAgICAgICAgICBpZiAocHJvbWlzZS5faCA9PSAyKSBvbkhhbmRsZVVuaGFuZGxlZChwcm9taXNlKTtcbiAgICAgICAgICAgIHByb21pc2UuX2ggPSAxO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoaGFuZGxlciA9PT0gdHJ1ZSkgcmVzdWx0ID0gdmFsdWU7XG4gICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBpZiAoZG9tYWluKSBkb21haW4uZW50ZXIoKTtcbiAgICAgICAgICAgIHJlc3VsdCA9IGhhbmRsZXIodmFsdWUpOyAvLyBtYXkgdGhyb3dcbiAgICAgICAgICAgIGlmIChkb21haW4pIHtcbiAgICAgICAgICAgICAgZG9tYWluLmV4aXQoKTtcbiAgICAgICAgICAgICAgZXhpdGVkID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKHJlc3VsdCA9PT0gcmVhY3Rpb24ucHJvbWlzZSkge1xuICAgICAgICAgICAgcmVqZWN0KFR5cGVFcnJvcignUHJvbWlzZS1jaGFpbiBjeWNsZScpKTtcbiAgICAgICAgICB9IGVsc2UgaWYgKHRoZW4gPSBpc1RoZW5hYmxlKHJlc3VsdCkpIHtcbiAgICAgICAgICAgIHRoZW4uY2FsbChyZXN1bHQsIHJlc29sdmUsIHJlamVjdCk7XG4gICAgICAgICAgfSBlbHNlIHJlc29sdmUocmVzdWx0KTtcbiAgICAgICAgfSBlbHNlIHJlamVjdCh2YWx1ZSk7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGlmIChkb21haW4gJiYgIWV4aXRlZCkgZG9tYWluLmV4aXQoKTtcbiAgICAgICAgcmVqZWN0KGUpO1xuICAgICAgfVxuICAgIH07XG4gICAgd2hpbGUgKGNoYWluLmxlbmd0aCA+IGkpIHJ1bihjaGFpbltpKytdKTsgLy8gdmFyaWFibGUgbGVuZ3RoIC0gY2FuJ3QgdXNlIGZvckVhY2hcbiAgICBwcm9taXNlLl9jID0gW107XG4gICAgcHJvbWlzZS5fbiA9IGZhbHNlO1xuICAgIGlmIChpc1JlamVjdCAmJiAhcHJvbWlzZS5faCkgb25VbmhhbmRsZWQocHJvbWlzZSk7XG4gIH0pO1xufTtcbnZhciBvblVuaGFuZGxlZCA9IGZ1bmN0aW9uIChwcm9taXNlKSB7XG4gIHRhc2suY2FsbChnbG9iYWwsIGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgdmFsdWUgPSBwcm9taXNlLl92O1xuICAgIHZhciB1bmhhbmRsZWQgPSBpc1VuaGFuZGxlZChwcm9taXNlKTtcbiAgICB2YXIgcmVzdWx0LCBoYW5kbGVyLCBjb25zb2xlO1xuICAgIGlmICh1bmhhbmRsZWQpIHtcbiAgICAgIHJlc3VsdCA9IHBlcmZvcm0oZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAoaXNOb2RlKSB7XG4gICAgICAgICAgcHJvY2Vzcy5lbWl0KCd1bmhhbmRsZWRSZWplY3Rpb24nLCB2YWx1ZSwgcHJvbWlzZSk7XG4gICAgICAgIH0gZWxzZSBpZiAoaGFuZGxlciA9IGdsb2JhbC5vbnVuaGFuZGxlZHJlamVjdGlvbikge1xuICAgICAgICAgIGhhbmRsZXIoeyBwcm9taXNlOiBwcm9taXNlLCByZWFzb246IHZhbHVlIH0pO1xuICAgICAgICB9IGVsc2UgaWYgKChjb25zb2xlID0gZ2xvYmFsLmNvbnNvbGUpICYmIGNvbnNvbGUuZXJyb3IpIHtcbiAgICAgICAgICBjb25zb2xlLmVycm9yKCdVbmhhbmRsZWQgcHJvbWlzZSByZWplY3Rpb24nLCB2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgLy8gQnJvd3NlcnMgc2hvdWxkIG5vdCB0cmlnZ2VyIGByZWplY3Rpb25IYW5kbGVkYCBldmVudCBpZiBpdCB3YXMgaGFuZGxlZCBoZXJlLCBOb2RlSlMgLSBzaG91bGRcbiAgICAgIHByb21pc2UuX2ggPSBpc05vZGUgfHwgaXNVbmhhbmRsZWQocHJvbWlzZSkgPyAyIDogMTtcbiAgICB9IHByb21pc2UuX2EgPSB1bmRlZmluZWQ7XG4gICAgaWYgKHVuaGFuZGxlZCAmJiByZXN1bHQuZSkgdGhyb3cgcmVzdWx0LnY7XG4gIH0pO1xufTtcbnZhciBpc1VuaGFuZGxlZCA9IGZ1bmN0aW9uIChwcm9taXNlKSB7XG4gIHJldHVybiBwcm9taXNlLl9oICE9PSAxICYmIChwcm9taXNlLl9hIHx8IHByb21pc2UuX2MpLmxlbmd0aCA9PT0gMDtcbn07XG52YXIgb25IYW5kbGVVbmhhbmRsZWQgPSBmdW5jdGlvbiAocHJvbWlzZSkge1xuICB0YXNrLmNhbGwoZ2xvYmFsLCBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGhhbmRsZXI7XG4gICAgaWYgKGlzTm9kZSkge1xuICAgICAgcHJvY2Vzcy5lbWl0KCdyZWplY3Rpb25IYW5kbGVkJywgcHJvbWlzZSk7XG4gICAgfSBlbHNlIGlmIChoYW5kbGVyID0gZ2xvYmFsLm9ucmVqZWN0aW9uaGFuZGxlZCkge1xuICAgICAgaGFuZGxlcih7IHByb21pc2U6IHByb21pc2UsIHJlYXNvbjogcHJvbWlzZS5fdiB9KTtcbiAgICB9XG4gIH0pO1xufTtcbnZhciAkcmVqZWN0ID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gIHZhciBwcm9taXNlID0gdGhpcztcbiAgaWYgKHByb21pc2UuX2QpIHJldHVybjtcbiAgcHJvbWlzZS5fZCA9IHRydWU7XG4gIHByb21pc2UgPSBwcm9taXNlLl93IHx8IHByb21pc2U7IC8vIHVud3JhcFxuICBwcm9taXNlLl92ID0gdmFsdWU7XG4gIHByb21pc2UuX3MgPSAyO1xuICBpZiAoIXByb21pc2UuX2EpIHByb21pc2UuX2EgPSBwcm9taXNlLl9jLnNsaWNlKCk7XG4gIG5vdGlmeShwcm9taXNlLCB0cnVlKTtcbn07XG52YXIgJHJlc29sdmUgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgdmFyIHByb21pc2UgPSB0aGlzO1xuICB2YXIgdGhlbjtcbiAgaWYgKHByb21pc2UuX2QpIHJldHVybjtcbiAgcHJvbWlzZS5fZCA9IHRydWU7XG4gIHByb21pc2UgPSBwcm9taXNlLl93IHx8IHByb21pc2U7IC8vIHVud3JhcFxuICB0cnkge1xuICAgIGlmIChwcm9taXNlID09PSB2YWx1ZSkgdGhyb3cgVHlwZUVycm9yKFwiUHJvbWlzZSBjYW4ndCBiZSByZXNvbHZlZCBpdHNlbGZcIik7XG4gICAgaWYgKHRoZW4gPSBpc1RoZW5hYmxlKHZhbHVlKSkge1xuICAgICAgbWljcm90YXNrKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIHdyYXBwZXIgPSB7IF93OiBwcm9taXNlLCBfZDogZmFsc2UgfTsgLy8gd3JhcFxuICAgICAgICB0cnkge1xuICAgICAgICAgIHRoZW4uY2FsbCh2YWx1ZSwgY3R4KCRyZXNvbHZlLCB3cmFwcGVyLCAxKSwgY3R4KCRyZWplY3QsIHdyYXBwZXIsIDEpKTtcbiAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICRyZWplY3QuY2FsbCh3cmFwcGVyLCBlKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHByb21pc2UuX3YgPSB2YWx1ZTtcbiAgICAgIHByb21pc2UuX3MgPSAxO1xuICAgICAgbm90aWZ5KHByb21pc2UsIGZhbHNlKTtcbiAgICB9XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICAkcmVqZWN0LmNhbGwoeyBfdzogcHJvbWlzZSwgX2Q6IGZhbHNlIH0sIGUpOyAvLyB3cmFwXG4gIH1cbn07XG5cbi8vIGNvbnN0cnVjdG9yIHBvbHlmaWxsXG5pZiAoIVVTRV9OQVRJVkUpIHtcbiAgLy8gMjUuNC4zLjEgUHJvbWlzZShleGVjdXRvcilcbiAgJFByb21pc2UgPSBmdW5jdGlvbiBQcm9taXNlKGV4ZWN1dG9yKSB7XG4gICAgYW5JbnN0YW5jZSh0aGlzLCAkUHJvbWlzZSwgUFJPTUlTRSwgJ19oJyk7XG4gICAgYUZ1bmN0aW9uKGV4ZWN1dG9yKTtcbiAgICBJbnRlcm5hbC5jYWxsKHRoaXMpO1xuICAgIHRyeSB7XG4gICAgICBleGVjdXRvcihjdHgoJHJlc29sdmUsIHRoaXMsIDEpLCBjdHgoJHJlamVjdCwgdGhpcywgMSkpO1xuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgJHJlamVjdC5jYWxsKHRoaXMsIGVycik7XG4gICAgfVxuICB9O1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW51c2VkLXZhcnNcbiAgSW50ZXJuYWwgPSBmdW5jdGlvbiBQcm9taXNlKGV4ZWN1dG9yKSB7XG4gICAgdGhpcy5fYyA9IFtdOyAgICAgICAgICAgICAvLyA8LSBhd2FpdGluZyByZWFjdGlvbnNcbiAgICB0aGlzLl9hID0gdW5kZWZpbmVkOyAgICAgIC8vIDwtIGNoZWNrZWQgaW4gaXNVbmhhbmRsZWQgcmVhY3Rpb25zXG4gICAgdGhpcy5fcyA9IDA7ICAgICAgICAgICAgICAvLyA8LSBzdGF0ZVxuICAgIHRoaXMuX2QgPSBmYWxzZTsgICAgICAgICAgLy8gPC0gZG9uZVxuICAgIHRoaXMuX3YgPSB1bmRlZmluZWQ7ICAgICAgLy8gPC0gdmFsdWVcbiAgICB0aGlzLl9oID0gMDsgICAgICAgICAgICAgIC8vIDwtIHJlamVjdGlvbiBzdGF0ZSwgMCAtIGRlZmF1bHQsIDEgLSBoYW5kbGVkLCAyIC0gdW5oYW5kbGVkXG4gICAgdGhpcy5fbiA9IGZhbHNlOyAgICAgICAgICAvLyA8LSBub3RpZnlcbiAgfTtcbiAgSW50ZXJuYWwucHJvdG90eXBlID0gcmVxdWlyZSgnLi9fcmVkZWZpbmUtYWxsJykoJFByb21pc2UucHJvdG90eXBlLCB7XG4gICAgLy8gMjUuNC41LjMgUHJvbWlzZS5wcm90b3R5cGUudGhlbihvbkZ1bGZpbGxlZCwgb25SZWplY3RlZClcbiAgICB0aGVuOiBmdW5jdGlvbiB0aGVuKG9uRnVsZmlsbGVkLCBvblJlamVjdGVkKSB7XG4gICAgICB2YXIgcmVhY3Rpb24gPSBuZXdQcm9taXNlQ2FwYWJpbGl0eShzcGVjaWVzQ29uc3RydWN0b3IodGhpcywgJFByb21pc2UpKTtcbiAgICAgIHJlYWN0aW9uLm9rID0gdHlwZW9mIG9uRnVsZmlsbGVkID09ICdmdW5jdGlvbicgPyBvbkZ1bGZpbGxlZCA6IHRydWU7XG4gICAgICByZWFjdGlvbi5mYWlsID0gdHlwZW9mIG9uUmVqZWN0ZWQgPT0gJ2Z1bmN0aW9uJyAmJiBvblJlamVjdGVkO1xuICAgICAgcmVhY3Rpb24uZG9tYWluID0gaXNOb2RlID8gcHJvY2Vzcy5kb21haW4gOiB1bmRlZmluZWQ7XG4gICAgICB0aGlzLl9jLnB1c2gocmVhY3Rpb24pO1xuICAgICAgaWYgKHRoaXMuX2EpIHRoaXMuX2EucHVzaChyZWFjdGlvbik7XG4gICAgICBpZiAodGhpcy5fcykgbm90aWZ5KHRoaXMsIGZhbHNlKTtcbiAgICAgIHJldHVybiByZWFjdGlvbi5wcm9taXNlO1xuICAgIH0sXG4gICAgLy8gMjUuNC41LjEgUHJvbWlzZS5wcm90b3R5cGUuY2F0Y2gob25SZWplY3RlZClcbiAgICAnY2F0Y2gnOiBmdW5jdGlvbiAob25SZWplY3RlZCkge1xuICAgICAgcmV0dXJuIHRoaXMudGhlbih1bmRlZmluZWQsIG9uUmVqZWN0ZWQpO1xuICAgIH1cbiAgfSk7XG4gIE93blByb21pc2VDYXBhYmlsaXR5ID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBwcm9taXNlID0gbmV3IEludGVybmFsKCk7XG4gICAgdGhpcy5wcm9taXNlID0gcHJvbWlzZTtcbiAgICB0aGlzLnJlc29sdmUgPSBjdHgoJHJlc29sdmUsIHByb21pc2UsIDEpO1xuICAgIHRoaXMucmVqZWN0ID0gY3R4KCRyZWplY3QsIHByb21pc2UsIDEpO1xuICB9O1xuICBuZXdQcm9taXNlQ2FwYWJpbGl0eU1vZHVsZS5mID0gbmV3UHJvbWlzZUNhcGFiaWxpdHkgPSBmdW5jdGlvbiAoQykge1xuICAgIHJldHVybiBDID09PSAkUHJvbWlzZSB8fCBDID09PSBXcmFwcGVyXG4gICAgICA/IG5ldyBPd25Qcm9taXNlQ2FwYWJpbGl0eShDKVxuICAgICAgOiBuZXdHZW5lcmljUHJvbWlzZUNhcGFiaWxpdHkoQyk7XG4gIH07XG59XG5cbiRleHBvcnQoJGV4cG9ydC5HICsgJGV4cG9ydC5XICsgJGV4cG9ydC5GICogIVVTRV9OQVRJVkUsIHsgUHJvbWlzZTogJFByb21pc2UgfSk7XG5yZXF1aXJlKCcuL19zZXQtdG8tc3RyaW5nLXRhZycpKCRQcm9taXNlLCBQUk9NSVNFKTtcbnJlcXVpcmUoJy4vX3NldC1zcGVjaWVzJykoUFJPTUlTRSk7XG5XcmFwcGVyID0gcmVxdWlyZSgnLi9fY29yZScpW1BST01JU0VdO1xuXG4vLyBzdGF0aWNzXG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqICFVU0VfTkFUSVZFLCBQUk9NSVNFLCB7XG4gIC8vIDI1LjQuNC41IFByb21pc2UucmVqZWN0KHIpXG4gIHJlamVjdDogZnVuY3Rpb24gcmVqZWN0KHIpIHtcbiAgICB2YXIgY2FwYWJpbGl0eSA9IG5ld1Byb21pc2VDYXBhYmlsaXR5KHRoaXMpO1xuICAgIHZhciAkJHJlamVjdCA9IGNhcGFiaWxpdHkucmVqZWN0O1xuICAgICQkcmVqZWN0KHIpO1xuICAgIHJldHVybiBjYXBhYmlsaXR5LnByb21pc2U7XG4gIH1cbn0pO1xuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAoTElCUkFSWSB8fCAhVVNFX05BVElWRSksIFBST01JU0UsIHtcbiAgLy8gMjUuNC40LjYgUHJvbWlzZS5yZXNvbHZlKHgpXG4gIHJlc29sdmU6IGZ1bmN0aW9uIHJlc29sdmUoeCkge1xuICAgIHJldHVybiBwcm9taXNlUmVzb2x2ZShMSUJSQVJZICYmIHRoaXMgPT09IFdyYXBwZXIgPyAkUHJvbWlzZSA6IHRoaXMsIHgpO1xuICB9XG59KTtcbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogIShVU0VfTkFUSVZFICYmIHJlcXVpcmUoJy4vX2l0ZXItZGV0ZWN0JykoZnVuY3Rpb24gKGl0ZXIpIHtcbiAgJFByb21pc2UuYWxsKGl0ZXIpWydjYXRjaCddKGVtcHR5KTtcbn0pKSwgUFJPTUlTRSwge1xuICAvLyAyNS40LjQuMSBQcm9taXNlLmFsbChpdGVyYWJsZSlcbiAgYWxsOiBmdW5jdGlvbiBhbGwoaXRlcmFibGUpIHtcbiAgICB2YXIgQyA9IHRoaXM7XG4gICAgdmFyIGNhcGFiaWxpdHkgPSBuZXdQcm9taXNlQ2FwYWJpbGl0eShDKTtcbiAgICB2YXIgcmVzb2x2ZSA9IGNhcGFiaWxpdHkucmVzb2x2ZTtcbiAgICB2YXIgcmVqZWN0ID0gY2FwYWJpbGl0eS5yZWplY3Q7XG4gICAgdmFyIHJlc3VsdCA9IHBlcmZvcm0oZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIHZhbHVlcyA9IFtdO1xuICAgICAgdmFyIGluZGV4ID0gMDtcbiAgICAgIHZhciByZW1haW5pbmcgPSAxO1xuICAgICAgZm9yT2YoaXRlcmFibGUsIGZhbHNlLCBmdW5jdGlvbiAocHJvbWlzZSkge1xuICAgICAgICB2YXIgJGluZGV4ID0gaW5kZXgrKztcbiAgICAgICAgdmFyIGFscmVhZHlDYWxsZWQgPSBmYWxzZTtcbiAgICAgICAgdmFsdWVzLnB1c2godW5kZWZpbmVkKTtcbiAgICAgICAgcmVtYWluaW5nKys7XG4gICAgICAgIEMucmVzb2x2ZShwcm9taXNlKS50aGVuKGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICAgIGlmIChhbHJlYWR5Q2FsbGVkKSByZXR1cm47XG4gICAgICAgICAgYWxyZWFkeUNhbGxlZCA9IHRydWU7XG4gICAgICAgICAgdmFsdWVzWyRpbmRleF0gPSB2YWx1ZTtcbiAgICAgICAgICAtLXJlbWFpbmluZyB8fCByZXNvbHZlKHZhbHVlcyk7XG4gICAgICAgIH0sIHJlamVjdCk7XG4gICAgICB9KTtcbiAgICAgIC0tcmVtYWluaW5nIHx8IHJlc29sdmUodmFsdWVzKTtcbiAgICB9KTtcbiAgICBpZiAocmVzdWx0LmUpIHJlamVjdChyZXN1bHQudik7XG4gICAgcmV0dXJuIGNhcGFiaWxpdHkucHJvbWlzZTtcbiAgfSxcbiAgLy8gMjUuNC40LjQgUHJvbWlzZS5yYWNlKGl0ZXJhYmxlKVxuICByYWNlOiBmdW5jdGlvbiByYWNlKGl0ZXJhYmxlKSB7XG4gICAgdmFyIEMgPSB0aGlzO1xuICAgIHZhciBjYXBhYmlsaXR5ID0gbmV3UHJvbWlzZUNhcGFiaWxpdHkoQyk7XG4gICAgdmFyIHJlamVjdCA9IGNhcGFiaWxpdHkucmVqZWN0O1xuICAgIHZhciByZXN1bHQgPSBwZXJmb3JtKGZ1bmN0aW9uICgpIHtcbiAgICAgIGZvck9mKGl0ZXJhYmxlLCBmYWxzZSwgZnVuY3Rpb24gKHByb21pc2UpIHtcbiAgICAgICAgQy5yZXNvbHZlKHByb21pc2UpLnRoZW4oY2FwYWJpbGl0eS5yZXNvbHZlLCByZWplY3QpO1xuICAgICAgfSk7XG4gICAgfSk7XG4gICAgaWYgKHJlc3VsdC5lKSByZWplY3QocmVzdWx0LnYpO1xuICAgIHJldHVybiBjYXBhYmlsaXR5LnByb21pc2U7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gMjUuNC4xLjUgTmV3UHJvbWlzZUNhcGFiaWxpdHkoQylcbnZhciBhRnVuY3Rpb24gPSByZXF1aXJlKCcuL19hLWZ1bmN0aW9uJyk7XG5cbmZ1bmN0aW9uIFByb21pc2VDYXBhYmlsaXR5KEMpIHtcbiAgdmFyIHJlc29sdmUsIHJlamVjdDtcbiAgdGhpcy5wcm9taXNlID0gbmV3IEMoZnVuY3Rpb24gKCQkcmVzb2x2ZSwgJCRyZWplY3QpIHtcbiAgICBpZiAocmVzb2x2ZSAhPT0gdW5kZWZpbmVkIHx8IHJlamVjdCAhPT0gdW5kZWZpbmVkKSB0aHJvdyBUeXBlRXJyb3IoJ0JhZCBQcm9taXNlIGNvbnN0cnVjdG9yJyk7XG4gICAgcmVzb2x2ZSA9ICQkcmVzb2x2ZTtcbiAgICByZWplY3QgPSAkJHJlamVjdDtcbiAgfSk7XG4gIHRoaXMucmVzb2x2ZSA9IGFGdW5jdGlvbihyZXNvbHZlKTtcbiAgdGhpcy5yZWplY3QgPSBhRnVuY3Rpb24ocmVqZWN0KTtcbn1cblxubW9kdWxlLmV4cG9ydHMuZiA9IGZ1bmN0aW9uIChDKSB7XG4gIHJldHVybiBuZXcgUHJvbWlzZUNhcGFiaWxpdHkoQyk7XG59O1xuIiwidmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbnZhciBuZXdQcm9taXNlQ2FwYWJpbGl0eSA9IHJlcXVpcmUoJy4vX25ldy1wcm9taXNlLWNhcGFiaWxpdHknKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoQywgeCkge1xuICBhbk9iamVjdChDKTtcbiAgaWYgKGlzT2JqZWN0KHgpICYmIHguY29uc3RydWN0b3IgPT09IEMpIHJldHVybiB4O1xuICB2YXIgcHJvbWlzZUNhcGFiaWxpdHkgPSBuZXdQcm9taXNlQ2FwYWJpbGl0eS5mKEMpO1xuICB2YXIgcmVzb2x2ZSA9IHByb21pc2VDYXBhYmlsaXR5LnJlc29sdmU7XG4gIHJlc29sdmUoeCk7XG4gIHJldHVybiBwcm9taXNlQ2FwYWJpbGl0eS5wcm9taXNlO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBkUCA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpLmY7XG52YXIgY3JlYXRlID0gcmVxdWlyZSgnLi9fb2JqZWN0LWNyZWF0ZScpO1xudmFyIHJlZGVmaW5lQWxsID0gcmVxdWlyZSgnLi9fcmVkZWZpbmUtYWxsJyk7XG52YXIgY3R4ID0gcmVxdWlyZSgnLi9fY3R4Jyk7XG52YXIgYW5JbnN0YW5jZSA9IHJlcXVpcmUoJy4vX2FuLWluc3RhbmNlJyk7XG52YXIgZm9yT2YgPSByZXF1aXJlKCcuL19mb3Itb2YnKTtcbnZhciAkaXRlckRlZmluZSA9IHJlcXVpcmUoJy4vX2l0ZXItZGVmaW5lJyk7XG52YXIgc3RlcCA9IHJlcXVpcmUoJy4vX2l0ZXItc3RlcCcpO1xudmFyIHNldFNwZWNpZXMgPSByZXF1aXJlKCcuL19zZXQtc3BlY2llcycpO1xudmFyIERFU0NSSVBUT1JTID0gcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKTtcbnZhciBmYXN0S2V5ID0gcmVxdWlyZSgnLi9fbWV0YScpLmZhc3RLZXk7XG52YXIgdmFsaWRhdGUgPSByZXF1aXJlKCcuL192YWxpZGF0ZS1jb2xsZWN0aW9uJyk7XG52YXIgU0laRSA9IERFU0NSSVBUT1JTID8gJ19zJyA6ICdzaXplJztcblxudmFyIGdldEVudHJ5ID0gZnVuY3Rpb24gKHRoYXQsIGtleSkge1xuICAvLyBmYXN0IGNhc2VcbiAgdmFyIGluZGV4ID0gZmFzdEtleShrZXkpO1xuICB2YXIgZW50cnk7XG4gIGlmIChpbmRleCAhPT0gJ0YnKSByZXR1cm4gdGhhdC5faVtpbmRleF07XG4gIC8vIGZyb3plbiBvYmplY3QgY2FzZVxuICBmb3IgKGVudHJ5ID0gdGhhdC5fZjsgZW50cnk7IGVudHJ5ID0gZW50cnkubikge1xuICAgIGlmIChlbnRyeS5rID09IGtleSkgcmV0dXJuIGVudHJ5O1xuICB9XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgZ2V0Q29uc3RydWN0b3I6IGZ1bmN0aW9uICh3cmFwcGVyLCBOQU1FLCBJU19NQVAsIEFEREVSKSB7XG4gICAgdmFyIEMgPSB3cmFwcGVyKGZ1bmN0aW9uICh0aGF0LCBpdGVyYWJsZSkge1xuICAgICAgYW5JbnN0YW5jZSh0aGF0LCBDLCBOQU1FLCAnX2knKTtcbiAgICAgIHRoYXQuX3QgPSBOQU1FOyAgICAgICAgIC8vIGNvbGxlY3Rpb24gdHlwZVxuICAgICAgdGhhdC5faSA9IGNyZWF0ZShudWxsKTsgLy8gaW5kZXhcbiAgICAgIHRoYXQuX2YgPSB1bmRlZmluZWQ7ICAgIC8vIGZpcnN0IGVudHJ5XG4gICAgICB0aGF0Ll9sID0gdW5kZWZpbmVkOyAgICAvLyBsYXN0IGVudHJ5XG4gICAgICB0aGF0W1NJWkVdID0gMDsgICAgICAgICAvLyBzaXplXG4gICAgICBpZiAoaXRlcmFibGUgIT0gdW5kZWZpbmVkKSBmb3JPZihpdGVyYWJsZSwgSVNfTUFQLCB0aGF0W0FEREVSXSwgdGhhdCk7XG4gICAgfSk7XG4gICAgcmVkZWZpbmVBbGwoQy5wcm90b3R5cGUsIHtcbiAgICAgIC8vIDIzLjEuMy4xIE1hcC5wcm90b3R5cGUuY2xlYXIoKVxuICAgICAgLy8gMjMuMi4zLjIgU2V0LnByb3RvdHlwZS5jbGVhcigpXG4gICAgICBjbGVhcjogZnVuY3Rpb24gY2xlYXIoKSB7XG4gICAgICAgIGZvciAodmFyIHRoYXQgPSB2YWxpZGF0ZSh0aGlzLCBOQU1FKSwgZGF0YSA9IHRoYXQuX2ksIGVudHJ5ID0gdGhhdC5fZjsgZW50cnk7IGVudHJ5ID0gZW50cnkubikge1xuICAgICAgICAgIGVudHJ5LnIgPSB0cnVlO1xuICAgICAgICAgIGlmIChlbnRyeS5wKSBlbnRyeS5wID0gZW50cnkucC5uID0gdW5kZWZpbmVkO1xuICAgICAgICAgIGRlbGV0ZSBkYXRhW2VudHJ5LmldO1xuICAgICAgICB9XG4gICAgICAgIHRoYXQuX2YgPSB0aGF0Ll9sID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGF0W1NJWkVdID0gMDtcbiAgICAgIH0sXG4gICAgICAvLyAyMy4xLjMuMyBNYXAucHJvdG90eXBlLmRlbGV0ZShrZXkpXG4gICAgICAvLyAyMy4yLjMuNCBTZXQucHJvdG90eXBlLmRlbGV0ZSh2YWx1ZSlcbiAgICAgICdkZWxldGUnOiBmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgIHZhciB0aGF0ID0gdmFsaWRhdGUodGhpcywgTkFNRSk7XG4gICAgICAgIHZhciBlbnRyeSA9IGdldEVudHJ5KHRoYXQsIGtleSk7XG4gICAgICAgIGlmIChlbnRyeSkge1xuICAgICAgICAgIHZhciBuZXh0ID0gZW50cnkubjtcbiAgICAgICAgICB2YXIgcHJldiA9IGVudHJ5LnA7XG4gICAgICAgICAgZGVsZXRlIHRoYXQuX2lbZW50cnkuaV07XG4gICAgICAgICAgZW50cnkuciA9IHRydWU7XG4gICAgICAgICAgaWYgKHByZXYpIHByZXYubiA9IG5leHQ7XG4gICAgICAgICAgaWYgKG5leHQpIG5leHQucCA9IHByZXY7XG4gICAgICAgICAgaWYgKHRoYXQuX2YgPT0gZW50cnkpIHRoYXQuX2YgPSBuZXh0O1xuICAgICAgICAgIGlmICh0aGF0Ll9sID09IGVudHJ5KSB0aGF0Ll9sID0gcHJldjtcbiAgICAgICAgICB0aGF0W1NJWkVdLS07XG4gICAgICAgIH0gcmV0dXJuICEhZW50cnk7XG4gICAgICB9LFxuICAgICAgLy8gMjMuMi4zLjYgU2V0LnByb3RvdHlwZS5mb3JFYWNoKGNhbGxiYWNrZm4sIHRoaXNBcmcgPSB1bmRlZmluZWQpXG4gICAgICAvLyAyMy4xLjMuNSBNYXAucHJvdG90eXBlLmZvckVhY2goY2FsbGJhY2tmbiwgdGhpc0FyZyA9IHVuZGVmaW5lZClcbiAgICAgIGZvckVhY2g6IGZ1bmN0aW9uIGZvckVhY2goY2FsbGJhY2tmbiAvKiAsIHRoYXQgPSB1bmRlZmluZWQgKi8pIHtcbiAgICAgICAgdmFsaWRhdGUodGhpcywgTkFNRSk7XG4gICAgICAgIHZhciBmID0gY3R4KGNhbGxiYWNrZm4sIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkLCAzKTtcbiAgICAgICAgdmFyIGVudHJ5O1xuICAgICAgICB3aGlsZSAoZW50cnkgPSBlbnRyeSA/IGVudHJ5Lm4gOiB0aGlzLl9mKSB7XG4gICAgICAgICAgZihlbnRyeS52LCBlbnRyeS5rLCB0aGlzKTtcbiAgICAgICAgICAvLyByZXZlcnQgdG8gdGhlIGxhc3QgZXhpc3RpbmcgZW50cnlcbiAgICAgICAgICB3aGlsZSAoZW50cnkgJiYgZW50cnkucikgZW50cnkgPSBlbnRyeS5wO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgLy8gMjMuMS4zLjcgTWFwLnByb3RvdHlwZS5oYXMoa2V5KVxuICAgICAgLy8gMjMuMi4zLjcgU2V0LnByb3RvdHlwZS5oYXModmFsdWUpXG4gICAgICBoYXM6IGZ1bmN0aW9uIGhhcyhrZXkpIHtcbiAgICAgICAgcmV0dXJuICEhZ2V0RW50cnkodmFsaWRhdGUodGhpcywgTkFNRSksIGtleSk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgaWYgKERFU0NSSVBUT1JTKSBkUChDLnByb3RvdHlwZSwgJ3NpemUnLCB7XG4gICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHZhbGlkYXRlKHRoaXMsIE5BTUUpW1NJWkVdO1xuICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiBDO1xuICB9LFxuICBkZWY6IGZ1bmN0aW9uICh0aGF0LCBrZXksIHZhbHVlKSB7XG4gICAgdmFyIGVudHJ5ID0gZ2V0RW50cnkodGhhdCwga2V5KTtcbiAgICB2YXIgcHJldiwgaW5kZXg7XG4gICAgLy8gY2hhbmdlIGV4aXN0aW5nIGVudHJ5XG4gICAgaWYgKGVudHJ5KSB7XG4gICAgICBlbnRyeS52ID0gdmFsdWU7XG4gICAgLy8gY3JlYXRlIG5ldyBlbnRyeVxuICAgIH0gZWxzZSB7XG4gICAgICB0aGF0Ll9sID0gZW50cnkgPSB7XG4gICAgICAgIGk6IGluZGV4ID0gZmFzdEtleShrZXksIHRydWUpLCAvLyA8LSBpbmRleFxuICAgICAgICBrOiBrZXksICAgICAgICAgICAgICAgICAgICAgICAgLy8gPC0ga2V5XG4gICAgICAgIHY6IHZhbHVlLCAgICAgICAgICAgICAgICAgICAgICAvLyA8LSB2YWx1ZVxuICAgICAgICBwOiBwcmV2ID0gdGhhdC5fbCwgICAgICAgICAgICAgLy8gPC0gcHJldmlvdXMgZW50cnlcbiAgICAgICAgbjogdW5kZWZpbmVkLCAgICAgICAgICAgICAgICAgIC8vIDwtIG5leHQgZW50cnlcbiAgICAgICAgcjogZmFsc2UgICAgICAgICAgICAgICAgICAgICAgIC8vIDwtIHJlbW92ZWRcbiAgICAgIH07XG4gICAgICBpZiAoIXRoYXQuX2YpIHRoYXQuX2YgPSBlbnRyeTtcbiAgICAgIGlmIChwcmV2KSBwcmV2Lm4gPSBlbnRyeTtcbiAgICAgIHRoYXRbU0laRV0rKztcbiAgICAgIC8vIGFkZCB0byBpbmRleFxuICAgICAgaWYgKGluZGV4ICE9PSAnRicpIHRoYXQuX2lbaW5kZXhdID0gZW50cnk7XG4gICAgfSByZXR1cm4gdGhhdDtcbiAgfSxcbiAgZ2V0RW50cnk6IGdldEVudHJ5LFxuICBzZXRTdHJvbmc6IGZ1bmN0aW9uIChDLCBOQU1FLCBJU19NQVApIHtcbiAgICAvLyBhZGQgLmtleXMsIC52YWx1ZXMsIC5lbnRyaWVzLCBbQEBpdGVyYXRvcl1cbiAgICAvLyAyMy4xLjMuNCwgMjMuMS4zLjgsIDIzLjEuMy4xMSwgMjMuMS4zLjEyLCAyMy4yLjMuNSwgMjMuMi4zLjgsIDIzLjIuMy4xMCwgMjMuMi4zLjExXG4gICAgJGl0ZXJEZWZpbmUoQywgTkFNRSwgZnVuY3Rpb24gKGl0ZXJhdGVkLCBraW5kKSB7XG4gICAgICB0aGlzLl90ID0gdmFsaWRhdGUoaXRlcmF0ZWQsIE5BTUUpOyAvLyB0YXJnZXRcbiAgICAgIHRoaXMuX2sgPSBraW5kOyAgICAgICAgICAgICAgICAgICAgIC8vIGtpbmRcbiAgICAgIHRoaXMuX2wgPSB1bmRlZmluZWQ7ICAgICAgICAgICAgICAgIC8vIHByZXZpb3VzXG4gICAgfSwgZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIHRoYXQgPSB0aGlzO1xuICAgICAgdmFyIGtpbmQgPSB0aGF0Ll9rO1xuICAgICAgdmFyIGVudHJ5ID0gdGhhdC5fbDtcbiAgICAgIC8vIHJldmVydCB0byB0aGUgbGFzdCBleGlzdGluZyBlbnRyeVxuICAgICAgd2hpbGUgKGVudHJ5ICYmIGVudHJ5LnIpIGVudHJ5ID0gZW50cnkucDtcbiAgICAgIC8vIGdldCBuZXh0IGVudHJ5XG4gICAgICBpZiAoIXRoYXQuX3QgfHwgISh0aGF0Ll9sID0gZW50cnkgPSBlbnRyeSA/IGVudHJ5Lm4gOiB0aGF0Ll90Ll9mKSkge1xuICAgICAgICAvLyBvciBmaW5pc2ggdGhlIGl0ZXJhdGlvblxuICAgICAgICB0aGF0Ll90ID0gdW5kZWZpbmVkO1xuICAgICAgICByZXR1cm4gc3RlcCgxKTtcbiAgICAgIH1cbiAgICAgIC8vIHJldHVybiBzdGVwIGJ5IGtpbmRcbiAgICAgIGlmIChraW5kID09ICdrZXlzJykgcmV0dXJuIHN0ZXAoMCwgZW50cnkuayk7XG4gICAgICBpZiAoa2luZCA9PSAndmFsdWVzJykgcmV0dXJuIHN0ZXAoMCwgZW50cnkudik7XG4gICAgICByZXR1cm4gc3RlcCgwLCBbZW50cnkuaywgZW50cnkudl0pO1xuICAgIH0sIElTX01BUCA/ICdlbnRyaWVzJyA6ICd2YWx1ZXMnLCAhSVNfTUFQLCB0cnVlKTtcblxuICAgIC8vIGFkZCBbQEBzcGVjaWVzXSwgMjMuMS4yLjIsIDIzLjIuMi4yXG4gICAgc2V0U3BlY2llcyhOQU1FKTtcbiAgfVxufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciByZWRlZmluZUFsbCA9IHJlcXVpcmUoJy4vX3JlZGVmaW5lLWFsbCcpO1xudmFyIGdldFdlYWsgPSByZXF1aXJlKCcuL19tZXRhJykuZ2V0V2VhaztcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG52YXIgYW5JbnN0YW5jZSA9IHJlcXVpcmUoJy4vX2FuLWluc3RhbmNlJyk7XG52YXIgZm9yT2YgPSByZXF1aXJlKCcuL19mb3Itb2YnKTtcbnZhciBjcmVhdGVBcnJheU1ldGhvZCA9IHJlcXVpcmUoJy4vX2FycmF5LW1ldGhvZHMnKTtcbnZhciAkaGFzID0gcmVxdWlyZSgnLi9faGFzJyk7XG52YXIgdmFsaWRhdGUgPSByZXF1aXJlKCcuL192YWxpZGF0ZS1jb2xsZWN0aW9uJyk7XG52YXIgYXJyYXlGaW5kID0gY3JlYXRlQXJyYXlNZXRob2QoNSk7XG52YXIgYXJyYXlGaW5kSW5kZXggPSBjcmVhdGVBcnJheU1ldGhvZCg2KTtcbnZhciBpZCA9IDA7XG5cbi8vIGZhbGxiYWNrIGZvciB1bmNhdWdodCBmcm96ZW4ga2V5c1xudmFyIHVuY2F1Z2h0RnJvemVuU3RvcmUgPSBmdW5jdGlvbiAodGhhdCkge1xuICByZXR1cm4gdGhhdC5fbCB8fCAodGhhdC5fbCA9IG5ldyBVbmNhdWdodEZyb3plblN0b3JlKCkpO1xufTtcbnZhciBVbmNhdWdodEZyb3plblN0b3JlID0gZnVuY3Rpb24gKCkge1xuICB0aGlzLmEgPSBbXTtcbn07XG52YXIgZmluZFVuY2F1Z2h0RnJvemVuID0gZnVuY3Rpb24gKHN0b3JlLCBrZXkpIHtcbiAgcmV0dXJuIGFycmF5RmluZChzdG9yZS5hLCBmdW5jdGlvbiAoaXQpIHtcbiAgICByZXR1cm4gaXRbMF0gPT09IGtleTtcbiAgfSk7XG59O1xuVW5jYXVnaHRGcm96ZW5TdG9yZS5wcm90b3R5cGUgPSB7XG4gIGdldDogZnVuY3Rpb24gKGtleSkge1xuICAgIHZhciBlbnRyeSA9IGZpbmRVbmNhdWdodEZyb3plbih0aGlzLCBrZXkpO1xuICAgIGlmIChlbnRyeSkgcmV0dXJuIGVudHJ5WzFdO1xuICB9LFxuICBoYXM6IGZ1bmN0aW9uIChrZXkpIHtcbiAgICByZXR1cm4gISFmaW5kVW5jYXVnaHRGcm96ZW4odGhpcywga2V5KTtcbiAgfSxcbiAgc2V0OiBmdW5jdGlvbiAoa2V5LCB2YWx1ZSkge1xuICAgIHZhciBlbnRyeSA9IGZpbmRVbmNhdWdodEZyb3plbih0aGlzLCBrZXkpO1xuICAgIGlmIChlbnRyeSkgZW50cnlbMV0gPSB2YWx1ZTtcbiAgICBlbHNlIHRoaXMuYS5wdXNoKFtrZXksIHZhbHVlXSk7XG4gIH0sXG4gICdkZWxldGUnOiBmdW5jdGlvbiAoa2V5KSB7XG4gICAgdmFyIGluZGV4ID0gYXJyYXlGaW5kSW5kZXgodGhpcy5hLCBmdW5jdGlvbiAoaXQpIHtcbiAgICAgIHJldHVybiBpdFswXSA9PT0ga2V5O1xuICAgIH0pO1xuICAgIGlmICh+aW5kZXgpIHRoaXMuYS5zcGxpY2UoaW5kZXgsIDEpO1xuICAgIHJldHVybiAhIX5pbmRleDtcbiAgfVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIGdldENvbnN0cnVjdG9yOiBmdW5jdGlvbiAod3JhcHBlciwgTkFNRSwgSVNfTUFQLCBBRERFUikge1xuICAgIHZhciBDID0gd3JhcHBlcihmdW5jdGlvbiAodGhhdCwgaXRlcmFibGUpIHtcbiAgICAgIGFuSW5zdGFuY2UodGhhdCwgQywgTkFNRSwgJ19pJyk7XG4gICAgICB0aGF0Ll90ID0gTkFNRTsgICAgICAvLyBjb2xsZWN0aW9uIHR5cGVcbiAgICAgIHRoYXQuX2kgPSBpZCsrOyAgICAgIC8vIGNvbGxlY3Rpb24gaWRcbiAgICAgIHRoYXQuX2wgPSB1bmRlZmluZWQ7IC8vIGxlYWsgc3RvcmUgZm9yIHVuY2F1Z2h0IGZyb3plbiBvYmplY3RzXG4gICAgICBpZiAoaXRlcmFibGUgIT0gdW5kZWZpbmVkKSBmb3JPZihpdGVyYWJsZSwgSVNfTUFQLCB0aGF0W0FEREVSXSwgdGhhdCk7XG4gICAgfSk7XG4gICAgcmVkZWZpbmVBbGwoQy5wcm90b3R5cGUsIHtcbiAgICAgIC8vIDIzLjMuMy4yIFdlYWtNYXAucHJvdG90eXBlLmRlbGV0ZShrZXkpXG4gICAgICAvLyAyMy40LjMuMyBXZWFrU2V0LnByb3RvdHlwZS5kZWxldGUodmFsdWUpXG4gICAgICAnZGVsZXRlJzogZnVuY3Rpb24gKGtleSkge1xuICAgICAgICBpZiAoIWlzT2JqZWN0KGtleSkpIHJldHVybiBmYWxzZTtcbiAgICAgICAgdmFyIGRhdGEgPSBnZXRXZWFrKGtleSk7XG4gICAgICAgIGlmIChkYXRhID09PSB0cnVlKSByZXR1cm4gdW5jYXVnaHRGcm96ZW5TdG9yZSh2YWxpZGF0ZSh0aGlzLCBOQU1FKSlbJ2RlbGV0ZSddKGtleSk7XG4gICAgICAgIHJldHVybiBkYXRhICYmICRoYXMoZGF0YSwgdGhpcy5faSkgJiYgZGVsZXRlIGRhdGFbdGhpcy5faV07XG4gICAgICB9LFxuICAgICAgLy8gMjMuMy4zLjQgV2Vha01hcC5wcm90b3R5cGUuaGFzKGtleSlcbiAgICAgIC8vIDIzLjQuMy40IFdlYWtTZXQucHJvdG90eXBlLmhhcyh2YWx1ZSlcbiAgICAgIGhhczogZnVuY3Rpb24gaGFzKGtleSkge1xuICAgICAgICBpZiAoIWlzT2JqZWN0KGtleSkpIHJldHVybiBmYWxzZTtcbiAgICAgICAgdmFyIGRhdGEgPSBnZXRXZWFrKGtleSk7XG4gICAgICAgIGlmIChkYXRhID09PSB0cnVlKSByZXR1cm4gdW5jYXVnaHRGcm96ZW5TdG9yZSh2YWxpZGF0ZSh0aGlzLCBOQU1FKSkuaGFzKGtleSk7XG4gICAgICAgIHJldHVybiBkYXRhICYmICRoYXMoZGF0YSwgdGhpcy5faSk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIEM7XG4gIH0sXG4gIGRlZjogZnVuY3Rpb24gKHRoYXQsIGtleSwgdmFsdWUpIHtcbiAgICB2YXIgZGF0YSA9IGdldFdlYWsoYW5PYmplY3Qoa2V5KSwgdHJ1ZSk7XG4gICAgaWYgKGRhdGEgPT09IHRydWUpIHVuY2F1Z2h0RnJvemVuU3RvcmUodGhhdCkuc2V0KGtleSwgdmFsdWUpO1xuICAgIGVsc2UgZGF0YVt0aGF0Ll9pXSA9IHZhbHVlO1xuICAgIHJldHVybiB0aGF0O1xuICB9LFxuICB1ZnN0b3JlOiB1bmNhdWdodEZyb3plblN0b3JlXG59O1xuIiwiLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtdG9pbmRleFxudmFyIHRvSW50ZWdlciA9IHJlcXVpcmUoJy4vX3RvLWludGVnZXInKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgaWYgKGl0ID09PSB1bmRlZmluZWQpIHJldHVybiAwO1xuICB2YXIgbnVtYmVyID0gdG9JbnRlZ2VyKGl0KTtcbiAgdmFyIGxlbmd0aCA9IHRvTGVuZ3RoKG51bWJlcik7XG4gIGlmIChudW1iZXIgIT09IGxlbmd0aCkgdGhyb3cgUmFuZ2VFcnJvcignV3JvbmcgbGVuZ3RoIScpO1xuICByZXR1cm4gbGVuZ3RoO1xufTtcbiIsIi8vIGFsbCBvYmplY3Qga2V5cywgaW5jbHVkZXMgbm9uLWVudW1lcmFibGUgYW5kIHN5bWJvbHNcbnZhciBnT1BOID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcG4nKTtcbnZhciBnT1BTID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcHMnKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIFJlZmxlY3QgPSByZXF1aXJlKCcuL19nbG9iYWwnKS5SZWZsZWN0O1xubW9kdWxlLmV4cG9ydHMgPSBSZWZsZWN0ICYmIFJlZmxlY3Qub3duS2V5cyB8fCBmdW5jdGlvbiBvd25LZXlzKGl0KSB7XG4gIHZhciBrZXlzID0gZ09QTi5mKGFuT2JqZWN0KGl0KSk7XG4gIHZhciBnZXRTeW1ib2xzID0gZ09QUy5mO1xuICByZXR1cm4gZ2V0U3ltYm9scyA/IGtleXMuY29uY2F0KGdldFN5bWJvbHMoaXQpKSA6IGtleXM7XG59O1xuIiwiLy8gaHR0cHM6Ly9naXRodWIuY29tL3RjMzkvcHJvcG9zYWwtc3RyaW5nLXBhZC1zdGFydC1lbmRcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpO1xudmFyIHJlcGVhdCA9IHJlcXVpcmUoJy4vX3N0cmluZy1yZXBlYXQnKTtcbnZhciBkZWZpbmVkID0gcmVxdWlyZSgnLi9fZGVmaW5lZCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICh0aGF0LCBtYXhMZW5ndGgsIGZpbGxTdHJpbmcsIGxlZnQpIHtcbiAgdmFyIFMgPSBTdHJpbmcoZGVmaW5lZCh0aGF0KSk7XG4gIHZhciBzdHJpbmdMZW5ndGggPSBTLmxlbmd0aDtcbiAgdmFyIGZpbGxTdHIgPSBmaWxsU3RyaW5nID09PSB1bmRlZmluZWQgPyAnICcgOiBTdHJpbmcoZmlsbFN0cmluZyk7XG4gIHZhciBpbnRNYXhMZW5ndGggPSB0b0xlbmd0aChtYXhMZW5ndGgpO1xuICBpZiAoaW50TWF4TGVuZ3RoIDw9IHN0cmluZ0xlbmd0aCB8fCBmaWxsU3RyID09ICcnKSByZXR1cm4gUztcbiAgdmFyIGZpbGxMZW4gPSBpbnRNYXhMZW5ndGggLSBzdHJpbmdMZW5ndGg7XG4gIHZhciBzdHJpbmdGaWxsZXIgPSByZXBlYXQuY2FsbChmaWxsU3RyLCBNYXRoLmNlaWwoZmlsbExlbiAvIGZpbGxTdHIubGVuZ3RoKSk7XG4gIGlmIChzdHJpbmdGaWxsZXIubGVuZ3RoID4gZmlsbExlbikgc3RyaW5nRmlsbGVyID0gc3RyaW5nRmlsbGVyLnNsaWNlKDAsIGZpbGxMZW4pO1xuICByZXR1cm4gbGVmdCA/IHN0cmluZ0ZpbGxlciArIFMgOiBTICsgc3RyaW5nRmlsbGVyO1xufTtcbiIsInZhciBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJyk7XG52YXIgZ2V0S2V5cyA9IHJlcXVpcmUoJy4vX29iamVjdC1rZXlzJyk7XG52YXIgdG9JT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8taW9iamVjdCcpO1xudmFyIGlzRW51bSA9IHJlcXVpcmUoJy4vX29iamVjdC1waWUnKS5mO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXNFbnRyaWVzKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoaXQpIHtcbiAgICB2YXIgTyA9IHRvSU9iamVjdChpdCk7XG4gICAgdmFyIGtleXMgPSBnZXRLZXlzKE8pO1xuICAgIHZhciBsZW5ndGggPSBrZXlzLmxlbmd0aDtcbiAgICB2YXIgaSA9IDA7XG4gICAgdmFyIHJlc3VsdCA9IFtdO1xuICAgIHZhciBrZXk7XG4gICAgd2hpbGUgKGxlbmd0aCA+IGkpIHtcbiAgICAgIGtleSA9IGtleXNbaSsrXTtcbiAgICAgIGlmICghREVTQ1JJUFRPUlMgfHwgaXNFbnVtLmNhbGwoTywga2V5KSkge1xuICAgICAgICByZXN1bHQucHVzaChpc0VudHJpZXMgPyBba2V5LCBPW2tleV1dIDogT1trZXldKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfTtcbn07XG4iLCJ2YXIgY29yZSA9IG1vZHVsZS5leHBvcnRzID0geyB2ZXJzaW9uOiAnMi42LjExJyB9O1xuaWYgKHR5cGVvZiBfX2UgPT0gJ251bWJlcicpIF9fZSA9IGNvcmU7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW5kZWZcbiIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGV4ZWMpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gISFleGVjKCk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxufTtcbiIsIlwidXNlIHN0cmljdFwiO1xuXG5yZXF1aXJlKFwiLi9ub0NvbmZsaWN0XCIpO1xuXG52YXIgX2dsb2JhbCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcImNvcmUtanMvbGlicmFyeS9mbi9nbG9iYWxcIikpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBcImRlZmF1bHRcIjogb2JqIH07IH1cblxuaWYgKF9nbG9iYWxbXCJkZWZhdWx0XCJdLl9iYWJlbFBvbHlmaWxsICYmIHR5cGVvZiBjb25zb2xlICE9PSBcInVuZGVmaW5lZFwiICYmIGNvbnNvbGUud2Fybikge1xuICBjb25zb2xlLndhcm4oXCJAYmFiZWwvcG9seWZpbGwgaXMgbG9hZGVkIG1vcmUgdGhhbiBvbmNlIG9uIHRoaXMgcGFnZS4gVGhpcyBpcyBwcm9iYWJseSBub3QgZGVzaXJhYmxlL2ludGVuZGVkIFwiICsgXCJhbmQgbWF5IGhhdmUgY29uc2VxdWVuY2VzIGlmIGRpZmZlcmVudCB2ZXJzaW9ucyBvZiB0aGUgcG9seWZpbGxzIGFyZSBhcHBsaWVkIHNlcXVlbnRpYWxseS4gXCIgKyBcIklmIHlvdSBkbyBuZWVkIHRvIGxvYWQgdGhlIHBvbHlmaWxsIG1vcmUgdGhhbiBvbmNlLCB1c2UgQGJhYmVsL3BvbHlmaWxsL25vQ29uZmxpY3QgXCIgKyBcImluc3RlYWQgdG8gYnlwYXNzIHRoZSB3YXJuaW5nLlwiKTtcbn1cblxuX2dsb2JhbFtcImRlZmF1bHRcIl0uX2JhYmVsUG9seWZpbGwgPSB0cnVlOyIsIlwidXNlIHN0cmljdFwiO1xuXG5yZXF1aXJlKFwiY29yZS1qcy9lczZcIik7XG5cbnJlcXVpcmUoXCJjb3JlLWpzL2ZuL2FycmF5L2luY2x1ZGVzXCIpO1xuXG5yZXF1aXJlKFwiY29yZS1qcy9mbi9hcnJheS9mbGF0LW1hcFwiKTtcblxucmVxdWlyZShcImNvcmUtanMvZm4vc3RyaW5nL3BhZC1zdGFydFwiKTtcblxucmVxdWlyZShcImNvcmUtanMvZm4vc3RyaW5nL3BhZC1lbmRcIik7XG5cbnJlcXVpcmUoXCJjb3JlLWpzL2ZuL3N0cmluZy90cmltLXN0YXJ0XCIpO1xuXG5yZXF1aXJlKFwiY29yZS1qcy9mbi9zdHJpbmcvdHJpbS1lbmRcIik7XG5cbnJlcXVpcmUoXCJjb3JlLWpzL2ZuL3N5bWJvbC9hc3luYy1pdGVyYXRvclwiKTtcblxucmVxdWlyZShcImNvcmUtanMvZm4vb2JqZWN0L2dldC1vd24tcHJvcGVydHktZGVzY3JpcHRvcnNcIik7XG5cbnJlcXVpcmUoXCJjb3JlLWpzL2ZuL29iamVjdC92YWx1ZXNcIik7XG5cbnJlcXVpcmUoXCJjb3JlLWpzL2ZuL29iamVjdC9lbnRyaWVzXCIpO1xuXG5yZXF1aXJlKFwiY29yZS1qcy9mbi9wcm9taXNlL2ZpbmFsbHlcIik7XG5cbnJlcXVpcmUoXCJjb3JlLWpzL3dlYlwiKTtcblxucmVxdWlyZShcInJlZ2VuZXJhdG9yLXJ1bnRpbWUvcnVudGltZVwiKTsiLCJyZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5zeW1ib2wnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2Lm9iamVjdC5jcmVhdGUnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2Lm9iamVjdC5kZWZpbmUtcHJvcGVydHknKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2Lm9iamVjdC5kZWZpbmUtcHJvcGVydGllcycpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYub2JqZWN0LmdldC1vd24tcHJvcGVydHktZGVzY3JpcHRvcicpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYub2JqZWN0LmdldC1wcm90b3R5cGUtb2YnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2Lm9iamVjdC5rZXlzJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5vYmplY3QuZ2V0LW93bi1wcm9wZXJ0eS1uYW1lcycpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYub2JqZWN0LmZyZWV6ZScpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYub2JqZWN0LnNlYWwnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2Lm9iamVjdC5wcmV2ZW50LWV4dGVuc2lvbnMnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2Lm9iamVjdC5pcy1mcm96ZW4nKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2Lm9iamVjdC5pcy1zZWFsZWQnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2Lm9iamVjdC5pcy1leHRlbnNpYmxlJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5vYmplY3QuYXNzaWduJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5vYmplY3QuaXMnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2Lm9iamVjdC5zZXQtcHJvdG90eXBlLW9mJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5vYmplY3QudG8tc3RyaW5nJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5mdW5jdGlvbi5iaW5kJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5mdW5jdGlvbi5uYW1lJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5mdW5jdGlvbi5oYXMtaW5zdGFuY2UnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LnBhcnNlLWludCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYucGFyc2UtZmxvYXQnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2Lm51bWJlci5jb25zdHJ1Y3RvcicpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYubnVtYmVyLnRvLWZpeGVkJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5udW1iZXIudG8tcHJlY2lzaW9uJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5udW1iZXIuZXBzaWxvbicpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYubnVtYmVyLmlzLWZpbml0ZScpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYubnVtYmVyLmlzLWludGVnZXInKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2Lm51bWJlci5pcy1uYW4nKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2Lm51bWJlci5pcy1zYWZlLWludGVnZXInKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2Lm51bWJlci5tYXgtc2FmZS1pbnRlZ2VyJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5udW1iZXIubWluLXNhZmUtaW50ZWdlcicpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYubnVtYmVyLnBhcnNlLWZsb2F0Jyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5udW1iZXIucGFyc2UtaW50Jyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5tYXRoLmFjb3NoJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5tYXRoLmFzaW5oJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5tYXRoLmF0YW5oJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5tYXRoLmNicnQnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2Lm1hdGguY2x6MzInKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2Lm1hdGguY29zaCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYubWF0aC5leHBtMScpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYubWF0aC5mcm91bmQnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2Lm1hdGguaHlwb3QnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2Lm1hdGguaW11bCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYubWF0aC5sb2cxMCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYubWF0aC5sb2cxcCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYubWF0aC5sb2cyJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5tYXRoLnNpZ24nKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2Lm1hdGguc2luaCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYubWF0aC50YW5oJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5tYXRoLnRydW5jJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5zdHJpbmcuZnJvbS1jb2RlLXBvaW50Jyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5zdHJpbmcucmF3Jyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5zdHJpbmcudHJpbScpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYuc3RyaW5nLml0ZXJhdG9yJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5zdHJpbmcuY29kZS1wb2ludC1hdCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYuc3RyaW5nLmVuZHMtd2l0aCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYuc3RyaW5nLmluY2x1ZGVzJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5zdHJpbmcucmVwZWF0Jyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5zdHJpbmcuc3RhcnRzLXdpdGgnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LnN0cmluZy5hbmNob3InKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LnN0cmluZy5iaWcnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LnN0cmluZy5ibGluaycpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYuc3RyaW5nLmJvbGQnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LnN0cmluZy5maXhlZCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYuc3RyaW5nLmZvbnRjb2xvcicpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYuc3RyaW5nLmZvbnRzaXplJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5zdHJpbmcuaXRhbGljcycpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYuc3RyaW5nLmxpbmsnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LnN0cmluZy5zbWFsbCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYuc3RyaW5nLnN0cmlrZScpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYuc3RyaW5nLnN1YicpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYuc3RyaW5nLnN1cCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYuZGF0ZS5ub3cnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LmRhdGUudG8tanNvbicpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYuZGF0ZS50by1pc28tc3RyaW5nJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5kYXRlLnRvLXN0cmluZycpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYuZGF0ZS50by1wcmltaXRpdmUnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LmFycmF5LmlzLWFycmF5Jyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5hcnJheS5mcm9tJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5hcnJheS5vZicpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYuYXJyYXkuam9pbicpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYuYXJyYXkuc2xpY2UnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LmFycmF5LnNvcnQnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LmFycmF5LmZvci1lYWNoJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5hcnJheS5tYXAnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LmFycmF5LmZpbHRlcicpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYuYXJyYXkuc29tZScpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYuYXJyYXkuZXZlcnknKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LmFycmF5LnJlZHVjZScpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYuYXJyYXkucmVkdWNlLXJpZ2h0Jyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5hcnJheS5pbmRleC1vZicpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYuYXJyYXkubGFzdC1pbmRleC1vZicpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYuYXJyYXkuY29weS13aXRoaW4nKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LmFycmF5LmZpbGwnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LmFycmF5LmZpbmQnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LmFycmF5LmZpbmQtaW5kZXgnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LmFycmF5LnNwZWNpZXMnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LmFycmF5Lml0ZXJhdG9yJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5yZWdleHAuY29uc3RydWN0b3InKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LnJlZ2V4cC5leGVjJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5yZWdleHAudG8tc3RyaW5nJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5yZWdleHAuZmxhZ3MnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LnJlZ2V4cC5tYXRjaCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYucmVnZXhwLnJlcGxhY2UnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LnJlZ2V4cC5zZWFyY2gnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LnJlZ2V4cC5zcGxpdCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYucHJvbWlzZScpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYubWFwJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5zZXQnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LndlYWstbWFwJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi53ZWFrLXNldCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYudHlwZWQuYXJyYXktYnVmZmVyJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi50eXBlZC5kYXRhLXZpZXcnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LnR5cGVkLmludDgtYXJyYXknKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LnR5cGVkLnVpbnQ4LWFycmF5Jyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi50eXBlZC51aW50OC1jbGFtcGVkLWFycmF5Jyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi50eXBlZC5pbnQxNi1hcnJheScpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYudHlwZWQudWludDE2LWFycmF5Jyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi50eXBlZC5pbnQzMi1hcnJheScpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYudHlwZWQudWludDMyLWFycmF5Jyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi50eXBlZC5mbG9hdDMyLWFycmF5Jyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi50eXBlZC5mbG9hdDY0LWFycmF5Jyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5yZWZsZWN0LmFwcGx5Jyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5yZWZsZWN0LmNvbnN0cnVjdCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYucmVmbGVjdC5kZWZpbmUtcHJvcGVydHknKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LnJlZmxlY3QuZGVsZXRlLXByb3BlcnR5Jyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5yZWZsZWN0LmVudW1lcmF0ZScpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYucmVmbGVjdC5nZXQnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LnJlZmxlY3QuZ2V0LW93bi1wcm9wZXJ0eS1kZXNjcmlwdG9yJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5yZWZsZWN0LmdldC1wcm90b3R5cGUtb2YnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LnJlZmxlY3QuaGFzJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5yZWZsZWN0LmlzLWV4dGVuc2libGUnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LnJlZmxlY3Qub3duLWtleXMnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LnJlZmxlY3QucHJldmVudC1leHRlbnNpb25zJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5yZWZsZWN0LnNldCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYucmVmbGVjdC5zZXQtcHJvdG90eXBlLW9mJyk7XG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4uL21vZHVsZXMvX2NvcmUnKTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIEVDTUFTY3JpcHQgNiBzeW1ib2xzIHNoaW1cbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuL19nbG9iYWwnKTtcbnZhciBoYXMgPSByZXF1aXJlKCcuL19oYXMnKTtcbnZhciBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJyk7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIHJlZGVmaW5lID0gcmVxdWlyZSgnLi9fcmVkZWZpbmUnKTtcbnZhciBNRVRBID0gcmVxdWlyZSgnLi9fbWV0YScpLktFWTtcbnZhciAkZmFpbHMgPSByZXF1aXJlKCcuL19mYWlscycpO1xudmFyIHNoYXJlZCA9IHJlcXVpcmUoJy4vX3NoYXJlZCcpO1xudmFyIHNldFRvU3RyaW5nVGFnID0gcmVxdWlyZSgnLi9fc2V0LXRvLXN0cmluZy10YWcnKTtcbnZhciB1aWQgPSByZXF1aXJlKCcuL191aWQnKTtcbnZhciB3a3MgPSByZXF1aXJlKCcuL193a3MnKTtcbnZhciB3a3NFeHQgPSByZXF1aXJlKCcuL193a3MtZXh0Jyk7XG52YXIgd2tzRGVmaW5lID0gcmVxdWlyZSgnLi9fd2tzLWRlZmluZScpO1xudmFyIGVudW1LZXlzID0gcmVxdWlyZSgnLi9fZW51bS1rZXlzJyk7XG52YXIgaXNBcnJheSA9IHJlcXVpcmUoJy4vX2lzLWFycmF5Jyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8tb2JqZWN0Jyk7XG52YXIgdG9JT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8taW9iamVjdCcpO1xudmFyIHRvUHJpbWl0aXZlID0gcmVxdWlyZSgnLi9fdG8tcHJpbWl0aXZlJyk7XG52YXIgY3JlYXRlRGVzYyA9IHJlcXVpcmUoJy4vX3Byb3BlcnR5LWRlc2MnKTtcbnZhciBfY3JlYXRlID0gcmVxdWlyZSgnLi9fb2JqZWN0LWNyZWF0ZScpO1xudmFyIGdPUE5FeHQgPSByZXF1aXJlKCcuL19vYmplY3QtZ29wbi1leHQnKTtcbnZhciAkR09QRCA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BkJyk7XG52YXIgJEdPUFMgPSByZXF1aXJlKCcuL19vYmplY3QtZ29wcycpO1xudmFyICREUCA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpO1xudmFyICRrZXlzID0gcmVxdWlyZSgnLi9fb2JqZWN0LWtleXMnKTtcbnZhciBnT1BEID0gJEdPUEQuZjtcbnZhciBkUCA9ICREUC5mO1xudmFyIGdPUE4gPSBnT1BORXh0LmY7XG52YXIgJFN5bWJvbCA9IGdsb2JhbC5TeW1ib2w7XG52YXIgJEpTT04gPSBnbG9iYWwuSlNPTjtcbnZhciBfc3RyaW5naWZ5ID0gJEpTT04gJiYgJEpTT04uc3RyaW5naWZ5O1xudmFyIFBST1RPVFlQRSA9ICdwcm90b3R5cGUnO1xudmFyIEhJRERFTiA9IHdrcygnX2hpZGRlbicpO1xudmFyIFRPX1BSSU1JVElWRSA9IHdrcygndG9QcmltaXRpdmUnKTtcbnZhciBpc0VudW0gPSB7fS5wcm9wZXJ0eUlzRW51bWVyYWJsZTtcbnZhciBTeW1ib2xSZWdpc3RyeSA9IHNoYXJlZCgnc3ltYm9sLXJlZ2lzdHJ5Jyk7XG52YXIgQWxsU3ltYm9scyA9IHNoYXJlZCgnc3ltYm9scycpO1xudmFyIE9QU3ltYm9scyA9IHNoYXJlZCgnb3Atc3ltYm9scycpO1xudmFyIE9iamVjdFByb3RvID0gT2JqZWN0W1BST1RPVFlQRV07XG52YXIgVVNFX05BVElWRSA9IHR5cGVvZiAkU3ltYm9sID09ICdmdW5jdGlvbicgJiYgISEkR09QUy5mO1xudmFyIFFPYmplY3QgPSBnbG9iYWwuUU9iamVjdDtcbi8vIERvbid0IHVzZSBzZXR0ZXJzIGluIFF0IFNjcmlwdCwgaHR0cHM6Ly9naXRodWIuY29tL3psb2lyb2NrL2NvcmUtanMvaXNzdWVzLzE3M1xudmFyIHNldHRlciA9ICFRT2JqZWN0IHx8ICFRT2JqZWN0W1BST1RPVFlQRV0gfHwgIVFPYmplY3RbUFJPVE9UWVBFXS5maW5kQ2hpbGQ7XG5cbi8vIGZhbGxiYWNrIGZvciBvbGQgQW5kcm9pZCwgaHR0cHM6Ly9jb2RlLmdvb2dsZS5jb20vcC92OC9pc3N1ZXMvZGV0YWlsP2lkPTY4N1xudmFyIHNldFN5bWJvbERlc2MgPSBERVNDUklQVE9SUyAmJiAkZmFpbHMoZnVuY3Rpb24gKCkge1xuICByZXR1cm4gX2NyZWF0ZShkUCh7fSwgJ2EnLCB7XG4gICAgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBkUCh0aGlzLCAnYScsIHsgdmFsdWU6IDcgfSkuYTsgfVxuICB9KSkuYSAhPSA3O1xufSkgPyBmdW5jdGlvbiAoaXQsIGtleSwgRCkge1xuICB2YXIgcHJvdG9EZXNjID0gZ09QRChPYmplY3RQcm90bywga2V5KTtcbiAgaWYgKHByb3RvRGVzYykgZGVsZXRlIE9iamVjdFByb3RvW2tleV07XG4gIGRQKGl0LCBrZXksIEQpO1xuICBpZiAocHJvdG9EZXNjICYmIGl0ICE9PSBPYmplY3RQcm90bykgZFAoT2JqZWN0UHJvdG8sIGtleSwgcHJvdG9EZXNjKTtcbn0gOiBkUDtcblxudmFyIHdyYXAgPSBmdW5jdGlvbiAodGFnKSB7XG4gIHZhciBzeW0gPSBBbGxTeW1ib2xzW3RhZ10gPSBfY3JlYXRlKCRTeW1ib2xbUFJPVE9UWVBFXSk7XG4gIHN5bS5fayA9IHRhZztcbiAgcmV0dXJuIHN5bTtcbn07XG5cbnZhciBpc1N5bWJvbCA9IFVTRV9OQVRJVkUgJiYgdHlwZW9mICRTeW1ib2wuaXRlcmF0b3IgPT0gJ3N5bWJvbCcgPyBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIHR5cGVvZiBpdCA9PSAnc3ltYm9sJztcbn0gOiBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIGl0IGluc3RhbmNlb2YgJFN5bWJvbDtcbn07XG5cbnZhciAkZGVmaW5lUHJvcGVydHkgPSBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0eShpdCwga2V5LCBEKSB7XG4gIGlmIChpdCA9PT0gT2JqZWN0UHJvdG8pICRkZWZpbmVQcm9wZXJ0eShPUFN5bWJvbHMsIGtleSwgRCk7XG4gIGFuT2JqZWN0KGl0KTtcbiAga2V5ID0gdG9QcmltaXRpdmUoa2V5LCB0cnVlKTtcbiAgYW5PYmplY3QoRCk7XG4gIGlmIChoYXMoQWxsU3ltYm9scywga2V5KSkge1xuICAgIGlmICghRC5lbnVtZXJhYmxlKSB7XG4gICAgICBpZiAoIWhhcyhpdCwgSElEREVOKSkgZFAoaXQsIEhJRERFTiwgY3JlYXRlRGVzYygxLCB7fSkpO1xuICAgICAgaXRbSElEREVOXVtrZXldID0gdHJ1ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKGhhcyhpdCwgSElEREVOKSAmJiBpdFtISURERU5dW2tleV0pIGl0W0hJRERFTl1ba2V5XSA9IGZhbHNlO1xuICAgICAgRCA9IF9jcmVhdGUoRCwgeyBlbnVtZXJhYmxlOiBjcmVhdGVEZXNjKDAsIGZhbHNlKSB9KTtcbiAgICB9IHJldHVybiBzZXRTeW1ib2xEZXNjKGl0LCBrZXksIEQpO1xuICB9IHJldHVybiBkUChpdCwga2V5LCBEKTtcbn07XG52YXIgJGRlZmluZVByb3BlcnRpZXMgPSBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKGl0LCBQKSB7XG4gIGFuT2JqZWN0KGl0KTtcbiAgdmFyIGtleXMgPSBlbnVtS2V5cyhQID0gdG9JT2JqZWN0KFApKTtcbiAgdmFyIGkgPSAwO1xuICB2YXIgbCA9IGtleXMubGVuZ3RoO1xuICB2YXIga2V5O1xuICB3aGlsZSAobCA+IGkpICRkZWZpbmVQcm9wZXJ0eShpdCwga2V5ID0ga2V5c1tpKytdLCBQW2tleV0pO1xuICByZXR1cm4gaXQ7XG59O1xudmFyICRjcmVhdGUgPSBmdW5jdGlvbiBjcmVhdGUoaXQsIFApIHtcbiAgcmV0dXJuIFAgPT09IHVuZGVmaW5lZCA/IF9jcmVhdGUoaXQpIDogJGRlZmluZVByb3BlcnRpZXMoX2NyZWF0ZShpdCksIFApO1xufTtcbnZhciAkcHJvcGVydHlJc0VudW1lcmFibGUgPSBmdW5jdGlvbiBwcm9wZXJ0eUlzRW51bWVyYWJsZShrZXkpIHtcbiAgdmFyIEUgPSBpc0VudW0uY2FsbCh0aGlzLCBrZXkgPSB0b1ByaW1pdGl2ZShrZXksIHRydWUpKTtcbiAgaWYgKHRoaXMgPT09IE9iamVjdFByb3RvICYmIGhhcyhBbGxTeW1ib2xzLCBrZXkpICYmICFoYXMoT1BTeW1ib2xzLCBrZXkpKSByZXR1cm4gZmFsc2U7XG4gIHJldHVybiBFIHx8ICFoYXModGhpcywga2V5KSB8fCAhaGFzKEFsbFN5bWJvbHMsIGtleSkgfHwgaGFzKHRoaXMsIEhJRERFTikgJiYgdGhpc1tISURERU5dW2tleV0gPyBFIDogdHJ1ZTtcbn07XG52YXIgJGdldE93blByb3BlcnR5RGVzY3JpcHRvciA9IGZ1bmN0aW9uIGdldE93blByb3BlcnR5RGVzY3JpcHRvcihpdCwga2V5KSB7XG4gIGl0ID0gdG9JT2JqZWN0KGl0KTtcbiAga2V5ID0gdG9QcmltaXRpdmUoa2V5LCB0cnVlKTtcbiAgaWYgKGl0ID09PSBPYmplY3RQcm90byAmJiBoYXMoQWxsU3ltYm9scywga2V5KSAmJiAhaGFzKE9QU3ltYm9scywga2V5KSkgcmV0dXJuO1xuICB2YXIgRCA9IGdPUEQoaXQsIGtleSk7XG4gIGlmIChEICYmIGhhcyhBbGxTeW1ib2xzLCBrZXkpICYmICEoaGFzKGl0LCBISURERU4pICYmIGl0W0hJRERFTl1ba2V5XSkpIEQuZW51bWVyYWJsZSA9IHRydWU7XG4gIHJldHVybiBEO1xufTtcbnZhciAkZ2V0T3duUHJvcGVydHlOYW1lcyA9IGZ1bmN0aW9uIGdldE93blByb3BlcnR5TmFtZXMoaXQpIHtcbiAgdmFyIG5hbWVzID0gZ09QTih0b0lPYmplY3QoaXQpKTtcbiAgdmFyIHJlc3VsdCA9IFtdO1xuICB2YXIgaSA9IDA7XG4gIHZhciBrZXk7XG4gIHdoaWxlIChuYW1lcy5sZW5ndGggPiBpKSB7XG4gICAgaWYgKCFoYXMoQWxsU3ltYm9scywga2V5ID0gbmFtZXNbaSsrXSkgJiYga2V5ICE9IEhJRERFTiAmJiBrZXkgIT0gTUVUQSkgcmVzdWx0LnB1c2goa2V5KTtcbiAgfSByZXR1cm4gcmVzdWx0O1xufTtcbnZhciAkZ2V0T3duUHJvcGVydHlTeW1ib2xzID0gZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlTeW1ib2xzKGl0KSB7XG4gIHZhciBJU19PUCA9IGl0ID09PSBPYmplY3RQcm90bztcbiAgdmFyIG5hbWVzID0gZ09QTihJU19PUCA/IE9QU3ltYm9scyA6IHRvSU9iamVjdChpdCkpO1xuICB2YXIgcmVzdWx0ID0gW107XG4gIHZhciBpID0gMDtcbiAgdmFyIGtleTtcbiAgd2hpbGUgKG5hbWVzLmxlbmd0aCA+IGkpIHtcbiAgICBpZiAoaGFzKEFsbFN5bWJvbHMsIGtleSA9IG5hbWVzW2krK10pICYmIChJU19PUCA/IGhhcyhPYmplY3RQcm90bywga2V5KSA6IHRydWUpKSByZXN1bHQucHVzaChBbGxTeW1ib2xzW2tleV0pO1xuICB9IHJldHVybiByZXN1bHQ7XG59O1xuXG4vLyAxOS40LjEuMSBTeW1ib2woW2Rlc2NyaXB0aW9uXSlcbmlmICghVVNFX05BVElWRSkge1xuICAkU3ltYm9sID0gZnVuY3Rpb24gU3ltYm9sKCkge1xuICAgIGlmICh0aGlzIGluc3RhbmNlb2YgJFN5bWJvbCkgdGhyb3cgVHlwZUVycm9yKCdTeW1ib2wgaXMgbm90IGEgY29uc3RydWN0b3IhJyk7XG4gICAgdmFyIHRhZyA9IHVpZChhcmd1bWVudHMubGVuZ3RoID4gMCA/IGFyZ3VtZW50c1swXSA6IHVuZGVmaW5lZCk7XG4gICAgdmFyICRzZXQgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgIGlmICh0aGlzID09PSBPYmplY3RQcm90bykgJHNldC5jYWxsKE9QU3ltYm9scywgdmFsdWUpO1xuICAgICAgaWYgKGhhcyh0aGlzLCBISURERU4pICYmIGhhcyh0aGlzW0hJRERFTl0sIHRhZykpIHRoaXNbSElEREVOXVt0YWddID0gZmFsc2U7XG4gICAgICBzZXRTeW1ib2xEZXNjKHRoaXMsIHRhZywgY3JlYXRlRGVzYygxLCB2YWx1ZSkpO1xuICAgIH07XG4gICAgaWYgKERFU0NSSVBUT1JTICYmIHNldHRlcikgc2V0U3ltYm9sRGVzYyhPYmplY3RQcm90bywgdGFnLCB7IGNvbmZpZ3VyYWJsZTogdHJ1ZSwgc2V0OiAkc2V0IH0pO1xuICAgIHJldHVybiB3cmFwKHRhZyk7XG4gIH07XG4gIHJlZGVmaW5lKCRTeW1ib2xbUFJPVE9UWVBFXSwgJ3RvU3RyaW5nJywgZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2s7XG4gIH0pO1xuXG4gICRHT1BELmYgPSAkZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yO1xuICAkRFAuZiA9ICRkZWZpbmVQcm9wZXJ0eTtcbiAgcmVxdWlyZSgnLi9fb2JqZWN0LWdvcG4nKS5mID0gZ09QTkV4dC5mID0gJGdldE93blByb3BlcnR5TmFtZXM7XG4gIHJlcXVpcmUoJy4vX29iamVjdC1waWUnKS5mID0gJHByb3BlcnR5SXNFbnVtZXJhYmxlO1xuICAkR09QUy5mID0gJGdldE93blByb3BlcnR5U3ltYm9scztcblxuICBpZiAoREVTQ1JJUFRPUlMgJiYgIXJlcXVpcmUoJy4vX2xpYnJhcnknKSkge1xuICAgIHJlZGVmaW5lKE9iamVjdFByb3RvLCAncHJvcGVydHlJc0VudW1lcmFibGUnLCAkcHJvcGVydHlJc0VudW1lcmFibGUsIHRydWUpO1xuICB9XG5cbiAgd2tzRXh0LmYgPSBmdW5jdGlvbiAobmFtZSkge1xuICAgIHJldHVybiB3cmFwKHdrcyhuYW1lKSk7XG4gIH07XG59XG5cbiRleHBvcnQoJGV4cG9ydC5HICsgJGV4cG9ydC5XICsgJGV4cG9ydC5GICogIVVTRV9OQVRJVkUsIHsgU3ltYm9sOiAkU3ltYm9sIH0pO1xuXG5mb3IgKHZhciBlczZTeW1ib2xzID0gKFxuICAvLyAxOS40LjIuMiwgMTkuNC4yLjMsIDE5LjQuMi40LCAxOS40LjIuNiwgMTkuNC4yLjgsIDE5LjQuMi45LCAxOS40LjIuMTAsIDE5LjQuMi4xMSwgMTkuNC4yLjEyLCAxOS40LjIuMTMsIDE5LjQuMi4xNFxuICAnaGFzSW5zdGFuY2UsaXNDb25jYXRTcHJlYWRhYmxlLGl0ZXJhdG9yLG1hdGNoLHJlcGxhY2Usc2VhcmNoLHNwZWNpZXMsc3BsaXQsdG9QcmltaXRpdmUsdG9TdHJpbmdUYWcsdW5zY29wYWJsZXMnXG4pLnNwbGl0KCcsJyksIGogPSAwOyBlczZTeW1ib2xzLmxlbmd0aCA+IGo7KXdrcyhlczZTeW1ib2xzW2orK10pO1xuXG5mb3IgKHZhciB3ZWxsS25vd25TeW1ib2xzID0gJGtleXMod2tzLnN0b3JlKSwgayA9IDA7IHdlbGxLbm93blN5bWJvbHMubGVuZ3RoID4gazspIHdrc0RlZmluZSh3ZWxsS25vd25TeW1ib2xzW2srK10pO1xuXG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqICFVU0VfTkFUSVZFLCAnU3ltYm9sJywge1xuICAvLyAxOS40LjIuMSBTeW1ib2wuZm9yKGtleSlcbiAgJ2Zvcic6IGZ1bmN0aW9uIChrZXkpIHtcbiAgICByZXR1cm4gaGFzKFN5bWJvbFJlZ2lzdHJ5LCBrZXkgKz0gJycpXG4gICAgICA/IFN5bWJvbFJlZ2lzdHJ5W2tleV1cbiAgICAgIDogU3ltYm9sUmVnaXN0cnlba2V5XSA9ICRTeW1ib2woa2V5KTtcbiAgfSxcbiAgLy8gMTkuNC4yLjUgU3ltYm9sLmtleUZvcihzeW0pXG4gIGtleUZvcjogZnVuY3Rpb24ga2V5Rm9yKHN5bSkge1xuICAgIGlmICghaXNTeW1ib2woc3ltKSkgdGhyb3cgVHlwZUVycm9yKHN5bSArICcgaXMgbm90IGEgc3ltYm9sIScpO1xuICAgIGZvciAodmFyIGtleSBpbiBTeW1ib2xSZWdpc3RyeSkgaWYgKFN5bWJvbFJlZ2lzdHJ5W2tleV0gPT09IHN5bSkgcmV0dXJuIGtleTtcbiAgfSxcbiAgdXNlU2V0dGVyOiBmdW5jdGlvbiAoKSB7IHNldHRlciA9IHRydWU7IH0sXG4gIHVzZVNpbXBsZTogZnVuY3Rpb24gKCkgeyBzZXR0ZXIgPSBmYWxzZTsgfVxufSk7XG5cbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogIVVTRV9OQVRJVkUsICdPYmplY3QnLCB7XG4gIC8vIDE5LjEuMi4yIE9iamVjdC5jcmVhdGUoTyBbLCBQcm9wZXJ0aWVzXSlcbiAgY3JlYXRlOiAkY3JlYXRlLFxuICAvLyAxOS4xLjIuNCBPYmplY3QuZGVmaW5lUHJvcGVydHkoTywgUCwgQXR0cmlidXRlcylcbiAgZGVmaW5lUHJvcGVydHk6ICRkZWZpbmVQcm9wZXJ0eSxcbiAgLy8gMTkuMS4yLjMgT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoTywgUHJvcGVydGllcylcbiAgZGVmaW5lUHJvcGVydGllczogJGRlZmluZVByb3BlcnRpZXMsXG4gIC8vIDE5LjEuMi42IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoTywgUClcbiAgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yOiAkZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yLFxuICAvLyAxOS4xLjIuNyBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhPKVxuICBnZXRPd25Qcm9wZXJ0eU5hbWVzOiAkZ2V0T3duUHJvcGVydHlOYW1lcyxcbiAgLy8gMTkuMS4yLjggT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhPKVxuICBnZXRPd25Qcm9wZXJ0eVN5bWJvbHM6ICRnZXRPd25Qcm9wZXJ0eVN5bWJvbHNcbn0pO1xuXG4vLyBDaHJvbWUgMzggYW5kIDM5IGBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzYCBmYWlscyBvbiBwcmltaXRpdmVzXG4vLyBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvdjgvaXNzdWVzL2RldGFpbD9pZD0zNDQzXG52YXIgRkFJTFNfT05fUFJJTUlUSVZFUyA9ICRmYWlscyhmdW5jdGlvbiAoKSB7ICRHT1BTLmYoMSk7IH0pO1xuXG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqIEZBSUxTX09OX1BSSU1JVElWRVMsICdPYmplY3QnLCB7XG4gIGdldE93blByb3BlcnR5U3ltYm9sczogZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlTeW1ib2xzKGl0KSB7XG4gICAgcmV0dXJuICRHT1BTLmYodG9PYmplY3QoaXQpKTtcbiAgfVxufSk7XG5cbi8vIDI0LjMuMiBKU09OLnN0cmluZ2lmeSh2YWx1ZSBbLCByZXBsYWNlciBbLCBzcGFjZV1dKVxuJEpTT04gJiYgJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAoIVVTRV9OQVRJVkUgfHwgJGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgdmFyIFMgPSAkU3ltYm9sKCk7XG4gIC8vIE1TIEVkZ2UgY29udmVydHMgc3ltYm9sIHZhbHVlcyB0byBKU09OIGFzIHt9XG4gIC8vIFdlYktpdCBjb252ZXJ0cyBzeW1ib2wgdmFsdWVzIHRvIEpTT04gYXMgbnVsbFxuICAvLyBWOCB0aHJvd3Mgb24gYm94ZWQgc3ltYm9sc1xuICByZXR1cm4gX3N0cmluZ2lmeShbU10pICE9ICdbbnVsbF0nIHx8IF9zdHJpbmdpZnkoeyBhOiBTIH0pICE9ICd7fScgfHwgX3N0cmluZ2lmeShPYmplY3QoUykpICE9ICd7fSc7XG59KSksICdKU09OJywge1xuICBzdHJpbmdpZnk6IGZ1bmN0aW9uIHN0cmluZ2lmeShpdCkge1xuICAgIHZhciBhcmdzID0gW2l0XTtcbiAgICB2YXIgaSA9IDE7XG4gICAgdmFyIHJlcGxhY2VyLCAkcmVwbGFjZXI7XG4gICAgd2hpbGUgKGFyZ3VtZW50cy5sZW5ndGggPiBpKSBhcmdzLnB1c2goYXJndW1lbnRzW2krK10pO1xuICAgICRyZXBsYWNlciA9IHJlcGxhY2VyID0gYXJnc1sxXTtcbiAgICBpZiAoIWlzT2JqZWN0KHJlcGxhY2VyKSAmJiBpdCA9PT0gdW5kZWZpbmVkIHx8IGlzU3ltYm9sKGl0KSkgcmV0dXJuOyAvLyBJRTggcmV0dXJucyBzdHJpbmcgb24gdW5kZWZpbmVkXG4gICAgaWYgKCFpc0FycmF5KHJlcGxhY2VyKSkgcmVwbGFjZXIgPSBmdW5jdGlvbiAoa2V5LCB2YWx1ZSkge1xuICAgICAgaWYgKHR5cGVvZiAkcmVwbGFjZXIgPT0gJ2Z1bmN0aW9uJykgdmFsdWUgPSAkcmVwbGFjZXIuY2FsbCh0aGlzLCBrZXksIHZhbHVlKTtcbiAgICAgIGlmICghaXNTeW1ib2wodmFsdWUpKSByZXR1cm4gdmFsdWU7XG4gICAgfTtcbiAgICBhcmdzWzFdID0gcmVwbGFjZXI7XG4gICAgcmV0dXJuIF9zdHJpbmdpZnkuYXBwbHkoJEpTT04sIGFyZ3MpO1xuICB9XG59KTtcblxuLy8gMTkuNC4zLjQgU3ltYm9sLnByb3RvdHlwZVtAQHRvUHJpbWl0aXZlXShoaW50KVxuJFN5bWJvbFtQUk9UT1RZUEVdW1RPX1BSSU1JVElWRV0gfHwgcmVxdWlyZSgnLi9faGlkZScpKCRTeW1ib2xbUFJPVE9UWVBFXSwgVE9fUFJJTUlUSVZFLCAkU3ltYm9sW1BST1RPVFlQRV0udmFsdWVPZik7XG4vLyAxOS40LjMuNSBTeW1ib2wucHJvdG90eXBlW0BAdG9TdHJpbmdUYWddXG5zZXRUb1N0cmluZ1RhZygkU3ltYm9sLCAnU3ltYm9sJyk7XG4vLyAyMC4yLjEuOSBNYXRoW0BAdG9TdHJpbmdUYWddXG5zZXRUb1N0cmluZ1RhZyhNYXRoLCAnTWF0aCcsIHRydWUpO1xuLy8gMjQuMy4zIEpTT05bQEB0b1N0cmluZ1RhZ11cbnNldFRvU3RyaW5nVGFnKGdsb2JhbC5KU09OLCAnSlNPTicsIHRydWUpO1xuIiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL19zaGFyZWQnKSgnbmF0aXZlLWZ1bmN0aW9uLXRvLXN0cmluZycsIEZ1bmN0aW9uLnRvU3RyaW5nKTtcbiIsIi8vIGFsbCBlbnVtZXJhYmxlIG9iamVjdCBrZXlzLCBpbmNsdWRlcyBzeW1ib2xzXG52YXIgZ2V0S2V5cyA9IHJlcXVpcmUoJy4vX29iamVjdC1rZXlzJyk7XG52YXIgZ09QUyA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BzJyk7XG52YXIgcElFID0gcmVxdWlyZSgnLi9fb2JqZWN0LXBpZScpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgdmFyIHJlc3VsdCA9IGdldEtleXMoaXQpO1xuICB2YXIgZ2V0U3ltYm9scyA9IGdPUFMuZjtcbiAgaWYgKGdldFN5bWJvbHMpIHtcbiAgICB2YXIgc3ltYm9scyA9IGdldFN5bWJvbHMoaXQpO1xuICAgIHZhciBpc0VudW0gPSBwSUUuZjtcbiAgICB2YXIgaSA9IDA7XG4gICAgdmFyIGtleTtcbiAgICB3aGlsZSAoc3ltYm9scy5sZW5ndGggPiBpKSBpZiAoaXNFbnVtLmNhbGwoaXQsIGtleSA9IHN5bWJvbHNbaSsrXSkpIHJlc3VsdC5wdXNoKGtleSk7XG4gIH0gcmV0dXJuIHJlc3VsdDtcbn07XG4iLCJ2YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuLy8gMTkuMS4yLjIgLyAxNS4yLjMuNSBPYmplY3QuY3JlYXRlKE8gWywgUHJvcGVydGllc10pXG4kZXhwb3J0KCRleHBvcnQuUywgJ09iamVjdCcsIHsgY3JlYXRlOiByZXF1aXJlKCcuL19vYmplY3QtY3JlYXRlJykgfSk7XG4iLCJ2YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuLy8gMTkuMS4yLjQgLyAxNS4yLjMuNiBPYmplY3QuZGVmaW5lUHJvcGVydHkoTywgUCwgQXR0cmlidXRlcylcbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogIXJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJyksICdPYmplY3QnLCB7IGRlZmluZVByb3BlcnR5OiByZXF1aXJlKCcuL19vYmplY3QtZHAnKS5mIH0pO1xuIiwidmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbi8vIDE5LjEuMi4zIC8gMTUuMi4zLjcgT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoTywgUHJvcGVydGllcylcbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogIXJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJyksICdPYmplY3QnLCB7IGRlZmluZVByb3BlcnRpZXM6IHJlcXVpcmUoJy4vX29iamVjdC1kcHMnKSB9KTtcbiIsIi8vIDE5LjEuMi42IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoTywgUClcbnZhciB0b0lPYmplY3QgPSByZXF1aXJlKCcuL190by1pb2JqZWN0Jyk7XG52YXIgJGdldE93blByb3BlcnR5RGVzY3JpcHRvciA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BkJykuZjtcblxucmVxdWlyZSgnLi9fb2JqZWN0LXNhcCcpKCdnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3InLCBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoaXQsIGtleSkge1xuICAgIHJldHVybiAkZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHRvSU9iamVjdChpdCksIGtleSk7XG4gIH07XG59KTtcbiIsIi8vIDE5LjEuMi45IE9iamVjdC5nZXRQcm90b3R5cGVPZihPKVxudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8tb2JqZWN0Jyk7XG52YXIgJGdldFByb3RvdHlwZU9mID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdwbycpO1xuXG5yZXF1aXJlKCcuL19vYmplY3Qtc2FwJykoJ2dldFByb3RvdHlwZU9mJywgZnVuY3Rpb24gKCkge1xuICByZXR1cm4gZnVuY3Rpb24gZ2V0UHJvdG90eXBlT2YoaXQpIHtcbiAgICByZXR1cm4gJGdldFByb3RvdHlwZU9mKHRvT2JqZWN0KGl0KSk7XG4gIH07XG59KTtcbiIsIi8vIDE5LjEuMi4xNCBPYmplY3Qua2V5cyhPKVxudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8tb2JqZWN0Jyk7XG52YXIgJGtleXMgPSByZXF1aXJlKCcuL19vYmplY3Qta2V5cycpO1xuXG5yZXF1aXJlKCcuL19vYmplY3Qtc2FwJykoJ2tleXMnLCBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiBmdW5jdGlvbiBrZXlzKGl0KSB7XG4gICAgcmV0dXJuICRrZXlzKHRvT2JqZWN0KGl0KSk7XG4gIH07XG59KTtcbiIsIi8vIDE5LjEuMi43IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKE8pXG5yZXF1aXJlKCcuL19vYmplY3Qtc2FwJykoJ2dldE93blByb3BlcnR5TmFtZXMnLCBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiByZXF1aXJlKCcuL19vYmplY3QtZ29wbi1leHQnKS5mO1xufSk7XG4iLCIvLyAxOS4xLjIuNSBPYmplY3QuZnJlZXplKE8pXG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbnZhciBtZXRhID0gcmVxdWlyZSgnLi9fbWV0YScpLm9uRnJlZXplO1xuXG5yZXF1aXJlKCcuL19vYmplY3Qtc2FwJykoJ2ZyZWV6ZScsIGZ1bmN0aW9uICgkZnJlZXplKSB7XG4gIHJldHVybiBmdW5jdGlvbiBmcmVlemUoaXQpIHtcbiAgICByZXR1cm4gJGZyZWV6ZSAmJiBpc09iamVjdChpdCkgPyAkZnJlZXplKG1ldGEoaXQpKSA6IGl0O1xuICB9O1xufSk7XG4iLCIvLyAxOS4xLjIuMTcgT2JqZWN0LnNlYWwoTylcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xudmFyIG1ldGEgPSByZXF1aXJlKCcuL19tZXRhJykub25GcmVlemU7XG5cbnJlcXVpcmUoJy4vX29iamVjdC1zYXAnKSgnc2VhbCcsIGZ1bmN0aW9uICgkc2VhbCkge1xuICByZXR1cm4gZnVuY3Rpb24gc2VhbChpdCkge1xuICAgIHJldHVybiAkc2VhbCAmJiBpc09iamVjdChpdCkgPyAkc2VhbChtZXRhKGl0KSkgOiBpdDtcbiAgfTtcbn0pO1xuIiwiLy8gMTkuMS4yLjE1IE9iamVjdC5wcmV2ZW50RXh0ZW5zaW9ucyhPKVxudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG52YXIgbWV0YSA9IHJlcXVpcmUoJy4vX21ldGEnKS5vbkZyZWV6ZTtcblxucmVxdWlyZSgnLi9fb2JqZWN0LXNhcCcpKCdwcmV2ZW50RXh0ZW5zaW9ucycsIGZ1bmN0aW9uICgkcHJldmVudEV4dGVuc2lvbnMpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIHByZXZlbnRFeHRlbnNpb25zKGl0KSB7XG4gICAgcmV0dXJuICRwcmV2ZW50RXh0ZW5zaW9ucyAmJiBpc09iamVjdChpdCkgPyAkcHJldmVudEV4dGVuc2lvbnMobWV0YShpdCkpIDogaXQ7XG4gIH07XG59KTtcbiIsIi8vIDE5LjEuMi4xMiBPYmplY3QuaXNGcm96ZW4oTylcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xuXG5yZXF1aXJlKCcuL19vYmplY3Qtc2FwJykoJ2lzRnJvemVuJywgZnVuY3Rpb24gKCRpc0Zyb3plbikge1xuICByZXR1cm4gZnVuY3Rpb24gaXNGcm96ZW4oaXQpIHtcbiAgICByZXR1cm4gaXNPYmplY3QoaXQpID8gJGlzRnJvemVuID8gJGlzRnJvemVuKGl0KSA6IGZhbHNlIDogdHJ1ZTtcbiAgfTtcbn0pO1xuIiwiLy8gMTkuMS4yLjEzIE9iamVjdC5pc1NlYWxlZChPKVxudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG5cbnJlcXVpcmUoJy4vX29iamVjdC1zYXAnKSgnaXNTZWFsZWQnLCBmdW5jdGlvbiAoJGlzU2VhbGVkKSB7XG4gIHJldHVybiBmdW5jdGlvbiBpc1NlYWxlZChpdCkge1xuICAgIHJldHVybiBpc09iamVjdChpdCkgPyAkaXNTZWFsZWQgPyAkaXNTZWFsZWQoaXQpIDogZmFsc2UgOiB0cnVlO1xuICB9O1xufSk7XG4iLCIvLyAxOS4xLjIuMTEgT2JqZWN0LmlzRXh0ZW5zaWJsZShPKVxudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG5cbnJlcXVpcmUoJy4vX29iamVjdC1zYXAnKSgnaXNFeHRlbnNpYmxlJywgZnVuY3Rpb24gKCRpc0V4dGVuc2libGUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIGlzRXh0ZW5zaWJsZShpdCkge1xuICAgIHJldHVybiBpc09iamVjdChpdCkgPyAkaXNFeHRlbnNpYmxlID8gJGlzRXh0ZW5zaWJsZShpdCkgOiB0cnVlIDogZmFsc2U7XG4gIH07XG59KTtcbiIsIi8vIDE5LjEuMy4xIE9iamVjdC5hc3NpZ24odGFyZ2V0LCBzb3VyY2UpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiwgJ09iamVjdCcsIHsgYXNzaWduOiByZXF1aXJlKCcuL19vYmplY3QtYXNzaWduJykgfSk7XG4iLCIvLyAxOS4xLjMuMTAgT2JqZWN0LmlzKHZhbHVlMSwgdmFsdWUyKVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbiRleHBvcnQoJGV4cG9ydC5TLCAnT2JqZWN0JywgeyBpczogcmVxdWlyZSgnLi9fc2FtZS12YWx1ZScpIH0pO1xuIiwiLy8gMTkuMS4zLjE5IE9iamVjdC5zZXRQcm90b3R5cGVPZihPLCBwcm90bylcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG4kZXhwb3J0KCRleHBvcnQuUywgJ09iamVjdCcsIHsgc2V0UHJvdG90eXBlT2Y6IHJlcXVpcmUoJy4vX3NldC1wcm90bycpLnNldCB9KTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIDE5LjEuMy42IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcoKVxudmFyIGNsYXNzb2YgPSByZXF1aXJlKCcuL19jbGFzc29mJyk7XG52YXIgdGVzdCA9IHt9O1xudGVzdFtyZXF1aXJlKCcuL193a3MnKSgndG9TdHJpbmdUYWcnKV0gPSAneic7XG5pZiAodGVzdCArICcnICE9ICdbb2JqZWN0IHpdJykge1xuICByZXF1aXJlKCcuL19yZWRlZmluZScpKE9iamVjdC5wcm90b3R5cGUsICd0b1N0cmluZycsIGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICAgIHJldHVybiAnW29iamVjdCAnICsgY2xhc3NvZih0aGlzKSArICddJztcbiAgfSwgdHJ1ZSk7XG59XG4iLCIvLyAxOS4yLjMuMiAvIDE1LjMuNC41IEZ1bmN0aW9uLnByb3RvdHlwZS5iaW5kKHRoaXNBcmcsIGFyZ3MuLi4pXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUCwgJ0Z1bmN0aW9uJywgeyBiaW5kOiByZXF1aXJlKCcuL19iaW5kJykgfSk7XG4iLCJ2YXIgZFAgPSByZXF1aXJlKCcuL19vYmplY3QtZHAnKS5mO1xudmFyIEZQcm90byA9IEZ1bmN0aW9uLnByb3RvdHlwZTtcbnZhciBuYW1lUkUgPSAvXlxccypmdW5jdGlvbiAoW14gKF0qKS87XG52YXIgTkFNRSA9ICduYW1lJztcblxuLy8gMTkuMi40LjIgbmFtZVxuTkFNRSBpbiBGUHJvdG8gfHwgcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKSAmJiBkUChGUHJvdG8sIE5BTUUsIHtcbiAgY29uZmlndXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICB0cnkge1xuICAgICAgcmV0dXJuICgnJyArIHRoaXMpLm1hdGNoKG5hbWVSRSlbMV07XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgcmV0dXJuICcnO1xuICAgIH1cbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbnZhciBnZXRQcm90b3R5cGVPZiA9IHJlcXVpcmUoJy4vX29iamVjdC1ncG8nKTtcbnZhciBIQVNfSU5TVEFOQ0UgPSByZXF1aXJlKCcuL193a3MnKSgnaGFzSW5zdGFuY2UnKTtcbnZhciBGdW5jdGlvblByb3RvID0gRnVuY3Rpb24ucHJvdG90eXBlO1xuLy8gMTkuMi4zLjYgRnVuY3Rpb24ucHJvdG90eXBlW0BAaGFzSW5zdGFuY2VdKFYpXG5pZiAoIShIQVNfSU5TVEFOQ0UgaW4gRnVuY3Rpb25Qcm90bykpIHJlcXVpcmUoJy4vX29iamVjdC1kcCcpLmYoRnVuY3Rpb25Qcm90bywgSEFTX0lOU1RBTkNFLCB7IHZhbHVlOiBmdW5jdGlvbiAoTykge1xuICBpZiAodHlwZW9mIHRoaXMgIT0gJ2Z1bmN0aW9uJyB8fCAhaXNPYmplY3QoTykpIHJldHVybiBmYWxzZTtcbiAgaWYgKCFpc09iamVjdCh0aGlzLnByb3RvdHlwZSkpIHJldHVybiBPIGluc3RhbmNlb2YgdGhpcztcbiAgLy8gZm9yIGVudmlyb25tZW50IHcvbyBuYXRpdmUgYEBAaGFzSW5zdGFuY2VgIGxvZ2ljIGVub3VnaCBgaW5zdGFuY2VvZmAsIGJ1dCBhZGQgdGhpczpcbiAgd2hpbGUgKE8gPSBnZXRQcm90b3R5cGVPZihPKSkgaWYgKHRoaXMucHJvdG90eXBlID09PSBPKSByZXR1cm4gdHJ1ZTtcbiAgcmV0dXJuIGZhbHNlO1xufSB9KTtcbiIsInZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgJHBhcnNlSW50ID0gcmVxdWlyZSgnLi9fcGFyc2UtaW50Jyk7XG4vLyAxOC4yLjUgcGFyc2VJbnQoc3RyaW5nLCByYWRpeClcbiRleHBvcnQoJGV4cG9ydC5HICsgJGV4cG9ydC5GICogKHBhcnNlSW50ICE9ICRwYXJzZUludCksIHsgcGFyc2VJbnQ6ICRwYXJzZUludCB9KTtcbiIsInZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgJHBhcnNlRmxvYXQgPSByZXF1aXJlKCcuL19wYXJzZS1mbG9hdCcpO1xuLy8gMTguMi40IHBhcnNlRmxvYXQoc3RyaW5nKVxuJGV4cG9ydCgkZXhwb3J0LkcgKyAkZXhwb3J0LkYgKiAocGFyc2VGbG9hdCAhPSAkcGFyc2VGbG9hdCksIHsgcGFyc2VGbG9hdDogJHBhcnNlRmxvYXQgfSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi9fZ2xvYmFsJyk7XG52YXIgaGFzID0gcmVxdWlyZSgnLi9faGFzJyk7XG52YXIgY29mID0gcmVxdWlyZSgnLi9fY29mJyk7XG52YXIgaW5oZXJpdElmUmVxdWlyZWQgPSByZXF1aXJlKCcuL19pbmhlcml0LWlmLXJlcXVpcmVkJyk7XG52YXIgdG9QcmltaXRpdmUgPSByZXF1aXJlKCcuL190by1wcmltaXRpdmUnKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4vX2ZhaWxzJyk7XG52YXIgZ09QTiA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BuJykuZjtcbnZhciBnT1BEID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcGQnKS5mO1xudmFyIGRQID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJykuZjtcbnZhciAkdHJpbSA9IHJlcXVpcmUoJy4vX3N0cmluZy10cmltJykudHJpbTtcbnZhciBOVU1CRVIgPSAnTnVtYmVyJztcbnZhciAkTnVtYmVyID0gZ2xvYmFsW05VTUJFUl07XG52YXIgQmFzZSA9ICROdW1iZXI7XG52YXIgcHJvdG8gPSAkTnVtYmVyLnByb3RvdHlwZTtcbi8vIE9wZXJhIH4xMiBoYXMgYnJva2VuIE9iamVjdCN0b1N0cmluZ1xudmFyIEJST0tFTl9DT0YgPSBjb2YocmVxdWlyZSgnLi9fb2JqZWN0LWNyZWF0ZScpKHByb3RvKSkgPT0gTlVNQkVSO1xudmFyIFRSSU0gPSAndHJpbScgaW4gU3RyaW5nLnByb3RvdHlwZTtcblxuLy8gNy4xLjMgVG9OdW1iZXIoYXJndW1lbnQpXG52YXIgdG9OdW1iZXIgPSBmdW5jdGlvbiAoYXJndW1lbnQpIHtcbiAgdmFyIGl0ID0gdG9QcmltaXRpdmUoYXJndW1lbnQsIGZhbHNlKTtcbiAgaWYgKHR5cGVvZiBpdCA9PSAnc3RyaW5nJyAmJiBpdC5sZW5ndGggPiAyKSB7XG4gICAgaXQgPSBUUklNID8gaXQudHJpbSgpIDogJHRyaW0oaXQsIDMpO1xuICAgIHZhciBmaXJzdCA9IGl0LmNoYXJDb2RlQXQoMCk7XG4gICAgdmFyIHRoaXJkLCByYWRpeCwgbWF4Q29kZTtcbiAgICBpZiAoZmlyc3QgPT09IDQzIHx8IGZpcnN0ID09PSA0NSkge1xuICAgICAgdGhpcmQgPSBpdC5jaGFyQ29kZUF0KDIpO1xuICAgICAgaWYgKHRoaXJkID09PSA4OCB8fCB0aGlyZCA9PT0gMTIwKSByZXR1cm4gTmFOOyAvLyBOdW1iZXIoJysweDEnKSBzaG91bGQgYmUgTmFOLCBvbGQgVjggZml4XG4gICAgfSBlbHNlIGlmIChmaXJzdCA9PT0gNDgpIHtcbiAgICAgIHN3aXRjaCAoaXQuY2hhckNvZGVBdCgxKSkge1xuICAgICAgICBjYXNlIDY2OiBjYXNlIDk4OiByYWRpeCA9IDI7IG1heENvZGUgPSA0OTsgYnJlYWs7IC8vIGZhc3QgZXF1YWwgL14wYlswMV0rJC9pXG4gICAgICAgIGNhc2UgNzk6IGNhc2UgMTExOiByYWRpeCA9IDg7IG1heENvZGUgPSA1NTsgYnJlYWs7IC8vIGZhc3QgZXF1YWwgL14wb1swLTddKyQvaVxuICAgICAgICBkZWZhdWx0OiByZXR1cm4gK2l0O1xuICAgICAgfVxuICAgICAgZm9yICh2YXIgZGlnaXRzID0gaXQuc2xpY2UoMiksIGkgPSAwLCBsID0gZGlnaXRzLmxlbmd0aCwgY29kZTsgaSA8IGw7IGkrKykge1xuICAgICAgICBjb2RlID0gZGlnaXRzLmNoYXJDb2RlQXQoaSk7XG4gICAgICAgIC8vIHBhcnNlSW50IHBhcnNlcyBhIHN0cmluZyB0byBhIGZpcnN0IHVuYXZhaWxhYmxlIHN5bWJvbFxuICAgICAgICAvLyBidXQgVG9OdW1iZXIgc2hvdWxkIHJldHVybiBOYU4gaWYgYSBzdHJpbmcgY29udGFpbnMgdW5hdmFpbGFibGUgc3ltYm9sc1xuICAgICAgICBpZiAoY29kZSA8IDQ4IHx8IGNvZGUgPiBtYXhDb2RlKSByZXR1cm4gTmFOO1xuICAgICAgfSByZXR1cm4gcGFyc2VJbnQoZGlnaXRzLCByYWRpeCk7XG4gICAgfVxuICB9IHJldHVybiAraXQ7XG59O1xuXG5pZiAoISROdW1iZXIoJyAwbzEnKSB8fCAhJE51bWJlcignMGIxJykgfHwgJE51bWJlcignKzB4MScpKSB7XG4gICROdW1iZXIgPSBmdW5jdGlvbiBOdW1iZXIodmFsdWUpIHtcbiAgICB2YXIgaXQgPSBhcmd1bWVudHMubGVuZ3RoIDwgMSA/IDAgOiB2YWx1ZTtcbiAgICB2YXIgdGhhdCA9IHRoaXM7XG4gICAgcmV0dXJuIHRoYXQgaW5zdGFuY2VvZiAkTnVtYmVyXG4gICAgICAvLyBjaGVjayBvbiAxLi5jb25zdHJ1Y3Rvcihmb28pIGNhc2VcbiAgICAgICYmIChCUk9LRU5fQ09GID8gZmFpbHMoZnVuY3Rpb24gKCkgeyBwcm90by52YWx1ZU9mLmNhbGwodGhhdCk7IH0pIDogY29mKHRoYXQpICE9IE5VTUJFUilcbiAgICAgICAgPyBpbmhlcml0SWZSZXF1aXJlZChuZXcgQmFzZSh0b051bWJlcihpdCkpLCB0aGF0LCAkTnVtYmVyKSA6IHRvTnVtYmVyKGl0KTtcbiAgfTtcbiAgZm9yICh2YXIga2V5cyA9IHJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJykgPyBnT1BOKEJhc2UpIDogKFxuICAgIC8vIEVTMzpcbiAgICAnTUFYX1ZBTFVFLE1JTl9WQUxVRSxOYU4sTkVHQVRJVkVfSU5GSU5JVFksUE9TSVRJVkVfSU5GSU5JVFksJyArXG4gICAgLy8gRVM2IChpbiBjYXNlLCBpZiBtb2R1bGVzIHdpdGggRVM2IE51bWJlciBzdGF0aWNzIHJlcXVpcmVkIGJlZm9yZSk6XG4gICAgJ0VQU0lMT04saXNGaW5pdGUsaXNJbnRlZ2VyLGlzTmFOLGlzU2FmZUludGVnZXIsTUFYX1NBRkVfSU5URUdFUiwnICtcbiAgICAnTUlOX1NBRkVfSU5URUdFUixwYXJzZUZsb2F0LHBhcnNlSW50LGlzSW50ZWdlcidcbiAgKS5zcGxpdCgnLCcpLCBqID0gMCwga2V5OyBrZXlzLmxlbmd0aCA+IGo7IGorKykge1xuICAgIGlmIChoYXMoQmFzZSwga2V5ID0ga2V5c1tqXSkgJiYgIWhhcygkTnVtYmVyLCBrZXkpKSB7XG4gICAgICBkUCgkTnVtYmVyLCBrZXksIGdPUEQoQmFzZSwga2V5KSk7XG4gICAgfVxuICB9XG4gICROdW1iZXIucHJvdG90eXBlID0gcHJvdG87XG4gIHByb3RvLmNvbnN0cnVjdG9yID0gJE51bWJlcjtcbiAgcmVxdWlyZSgnLi9fcmVkZWZpbmUnKShnbG9iYWwsIE5VTUJFUiwgJE51bWJlcik7XG59XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIHRvSW50ZWdlciA9IHJlcXVpcmUoJy4vX3RvLWludGVnZXInKTtcbnZhciBhTnVtYmVyVmFsdWUgPSByZXF1aXJlKCcuL19hLW51bWJlci12YWx1ZScpO1xudmFyIHJlcGVhdCA9IHJlcXVpcmUoJy4vX3N0cmluZy1yZXBlYXQnKTtcbnZhciAkdG9GaXhlZCA9IDEuMC50b0ZpeGVkO1xudmFyIGZsb29yID0gTWF0aC5mbG9vcjtcbnZhciBkYXRhID0gWzAsIDAsIDAsIDAsIDAsIDBdO1xudmFyIEVSUk9SID0gJ051bWJlci50b0ZpeGVkOiBpbmNvcnJlY3QgaW52b2NhdGlvbiEnO1xudmFyIFpFUk8gPSAnMCc7XG5cbnZhciBtdWx0aXBseSA9IGZ1bmN0aW9uIChuLCBjKSB7XG4gIHZhciBpID0gLTE7XG4gIHZhciBjMiA9IGM7XG4gIHdoaWxlICgrK2kgPCA2KSB7XG4gICAgYzIgKz0gbiAqIGRhdGFbaV07XG4gICAgZGF0YVtpXSA9IGMyICUgMWU3O1xuICAgIGMyID0gZmxvb3IoYzIgLyAxZTcpO1xuICB9XG59O1xudmFyIGRpdmlkZSA9IGZ1bmN0aW9uIChuKSB7XG4gIHZhciBpID0gNjtcbiAgdmFyIGMgPSAwO1xuICB3aGlsZSAoLS1pID49IDApIHtcbiAgICBjICs9IGRhdGFbaV07XG4gICAgZGF0YVtpXSA9IGZsb29yKGMgLyBuKTtcbiAgICBjID0gKGMgJSBuKSAqIDFlNztcbiAgfVxufTtcbnZhciBudW1Ub1N0cmluZyA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIGkgPSA2O1xuICB2YXIgcyA9ICcnO1xuICB3aGlsZSAoLS1pID49IDApIHtcbiAgICBpZiAocyAhPT0gJycgfHwgaSA9PT0gMCB8fCBkYXRhW2ldICE9PSAwKSB7XG4gICAgICB2YXIgdCA9IFN0cmluZyhkYXRhW2ldKTtcbiAgICAgIHMgPSBzID09PSAnJyA/IHQgOiBzICsgcmVwZWF0LmNhbGwoWkVSTywgNyAtIHQubGVuZ3RoKSArIHQ7XG4gICAgfVxuICB9IHJldHVybiBzO1xufTtcbnZhciBwb3cgPSBmdW5jdGlvbiAoeCwgbiwgYWNjKSB7XG4gIHJldHVybiBuID09PSAwID8gYWNjIDogbiAlIDIgPT09IDEgPyBwb3coeCwgbiAtIDEsIGFjYyAqIHgpIDogcG93KHggKiB4LCBuIC8gMiwgYWNjKTtcbn07XG52YXIgbG9nID0gZnVuY3Rpb24gKHgpIHtcbiAgdmFyIG4gPSAwO1xuICB2YXIgeDIgPSB4O1xuICB3aGlsZSAoeDIgPj0gNDA5Nikge1xuICAgIG4gKz0gMTI7XG4gICAgeDIgLz0gNDA5NjtcbiAgfVxuICB3aGlsZSAoeDIgPj0gMikge1xuICAgIG4gKz0gMTtcbiAgICB4MiAvPSAyO1xuICB9IHJldHVybiBuO1xufTtcblxuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiAoISEkdG9GaXhlZCAmJiAoXG4gIDAuMDAwMDgudG9GaXhlZCgzKSAhPT0gJzAuMDAwJyB8fFxuICAwLjkudG9GaXhlZCgwKSAhPT0gJzEnIHx8XG4gIDEuMjU1LnRvRml4ZWQoMikgIT09ICcxLjI1JyB8fFxuICAxMDAwMDAwMDAwMDAwMDAwMTI4LjAudG9GaXhlZCgwKSAhPT0gJzEwMDAwMDAwMDAwMDAwMDAxMjgnXG4pIHx8ICFyZXF1aXJlKCcuL19mYWlscycpKGZ1bmN0aW9uICgpIHtcbiAgLy8gVjggfiBBbmRyb2lkIDQuMy1cbiAgJHRvRml4ZWQuY2FsbCh7fSk7XG59KSksICdOdW1iZXInLCB7XG4gIHRvRml4ZWQ6IGZ1bmN0aW9uIHRvRml4ZWQoZnJhY3Rpb25EaWdpdHMpIHtcbiAgICB2YXIgeCA9IGFOdW1iZXJWYWx1ZSh0aGlzLCBFUlJPUik7XG4gICAgdmFyIGYgPSB0b0ludGVnZXIoZnJhY3Rpb25EaWdpdHMpO1xuICAgIHZhciBzID0gJyc7XG4gICAgdmFyIG0gPSBaRVJPO1xuICAgIHZhciBlLCB6LCBqLCBrO1xuICAgIGlmIChmIDwgMCB8fCBmID4gMjApIHRocm93IFJhbmdlRXJyb3IoRVJST1IpO1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zZWxmLWNvbXBhcmVcbiAgICBpZiAoeCAhPSB4KSByZXR1cm4gJ05hTic7XG4gICAgaWYgKHggPD0gLTFlMjEgfHwgeCA+PSAxZTIxKSByZXR1cm4gU3RyaW5nKHgpO1xuICAgIGlmICh4IDwgMCkge1xuICAgICAgcyA9ICctJztcbiAgICAgIHggPSAteDtcbiAgICB9XG4gICAgaWYgKHggPiAxZS0yMSkge1xuICAgICAgZSA9IGxvZyh4ICogcG93KDIsIDY5LCAxKSkgLSA2OTtcbiAgICAgIHogPSBlIDwgMCA/IHggKiBwb3coMiwgLWUsIDEpIDogeCAvIHBvdygyLCBlLCAxKTtcbiAgICAgIHogKj0gMHgxMDAwMDAwMDAwMDAwMDtcbiAgICAgIGUgPSA1MiAtIGU7XG4gICAgICBpZiAoZSA+IDApIHtcbiAgICAgICAgbXVsdGlwbHkoMCwgeik7XG4gICAgICAgIGogPSBmO1xuICAgICAgICB3aGlsZSAoaiA+PSA3KSB7XG4gICAgICAgICAgbXVsdGlwbHkoMWU3LCAwKTtcbiAgICAgICAgICBqIC09IDc7XG4gICAgICAgIH1cbiAgICAgICAgbXVsdGlwbHkocG93KDEwLCBqLCAxKSwgMCk7XG4gICAgICAgIGogPSBlIC0gMTtcbiAgICAgICAgd2hpbGUgKGogPj0gMjMpIHtcbiAgICAgICAgICBkaXZpZGUoMSA8PCAyMyk7XG4gICAgICAgICAgaiAtPSAyMztcbiAgICAgICAgfVxuICAgICAgICBkaXZpZGUoMSA8PCBqKTtcbiAgICAgICAgbXVsdGlwbHkoMSwgMSk7XG4gICAgICAgIGRpdmlkZSgyKTtcbiAgICAgICAgbSA9IG51bVRvU3RyaW5nKCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBtdWx0aXBseSgwLCB6KTtcbiAgICAgICAgbXVsdGlwbHkoMSA8PCAtZSwgMCk7XG4gICAgICAgIG0gPSBudW1Ub1N0cmluZygpICsgcmVwZWF0LmNhbGwoWkVSTywgZik7XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChmID4gMCkge1xuICAgICAgayA9IG0ubGVuZ3RoO1xuICAgICAgbSA9IHMgKyAoayA8PSBmID8gJzAuJyArIHJlcGVhdC5jYWxsKFpFUk8sIGYgLSBrKSArIG0gOiBtLnNsaWNlKDAsIGsgLSBmKSArICcuJyArIG0uc2xpY2UoayAtIGYpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgbSA9IHMgKyBtO1xuICAgIH0gcmV0dXJuIG07XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciAkZmFpbHMgPSByZXF1aXJlKCcuL19mYWlscycpO1xudmFyIGFOdW1iZXJWYWx1ZSA9IHJlcXVpcmUoJy4vX2EtbnVtYmVyLXZhbHVlJyk7XG52YXIgJHRvUHJlY2lzaW9uID0gMS4wLnRvUHJlY2lzaW9uO1xuXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqICgkZmFpbHMoZnVuY3Rpb24gKCkge1xuICAvLyBJRTctXG4gIHJldHVybiAkdG9QcmVjaXNpb24uY2FsbCgxLCB1bmRlZmluZWQpICE9PSAnMSc7XG59KSB8fCAhJGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgLy8gVjggfiBBbmRyb2lkIDQuMy1cbiAgJHRvUHJlY2lzaW9uLmNhbGwoe30pO1xufSkpLCAnTnVtYmVyJywge1xuICB0b1ByZWNpc2lvbjogZnVuY3Rpb24gdG9QcmVjaXNpb24ocHJlY2lzaW9uKSB7XG4gICAgdmFyIHRoYXQgPSBhTnVtYmVyVmFsdWUodGhpcywgJ051bWJlciN0b1ByZWNpc2lvbjogaW5jb3JyZWN0IGludm9jYXRpb24hJyk7XG4gICAgcmV0dXJuIHByZWNpc2lvbiA9PT0gdW5kZWZpbmVkID8gJHRvUHJlY2lzaW9uLmNhbGwodGhhdCkgOiAkdG9QcmVjaXNpb24uY2FsbCh0aGF0LCBwcmVjaXNpb24pO1xuICB9XG59KTtcbiIsIi8vIDIwLjEuMi4xIE51bWJlci5FUFNJTE9OXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ051bWJlcicsIHsgRVBTSUxPTjogTWF0aC5wb3coMiwgLTUyKSB9KTtcbiIsIi8vIDIwLjEuMi4yIE51bWJlci5pc0Zpbml0ZShudW1iZXIpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIF9pc0Zpbml0ZSA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpLmlzRmluaXRlO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ051bWJlcicsIHtcbiAgaXNGaW5pdGU6IGZ1bmN0aW9uIGlzRmluaXRlKGl0KSB7XG4gICAgcmV0dXJuIHR5cGVvZiBpdCA9PSAnbnVtYmVyJyAmJiBfaXNGaW5pdGUoaXQpO1xuICB9XG59KTtcbiIsIi8vIDIwLjEuMi4zIE51bWJlci5pc0ludGVnZXIobnVtYmVyKVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdOdW1iZXInLCB7IGlzSW50ZWdlcjogcmVxdWlyZSgnLi9faXMtaW50ZWdlcicpIH0pO1xuIiwiLy8gMjAuMS4yLjQgTnVtYmVyLmlzTmFOKG51bWJlcilcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnTnVtYmVyJywge1xuICBpc05hTjogZnVuY3Rpb24gaXNOYU4obnVtYmVyKSB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXNlbGYtY29tcGFyZVxuICAgIHJldHVybiBudW1iZXIgIT0gbnVtYmVyO1xuICB9XG59KTtcbiIsIi8vIDIwLjEuMi41IE51bWJlci5pc1NhZmVJbnRlZ2VyKG51bWJlcilcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgaXNJbnRlZ2VyID0gcmVxdWlyZSgnLi9faXMtaW50ZWdlcicpO1xudmFyIGFicyA9IE1hdGguYWJzO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ051bWJlcicsIHtcbiAgaXNTYWZlSW50ZWdlcjogZnVuY3Rpb24gaXNTYWZlSW50ZWdlcihudW1iZXIpIHtcbiAgICByZXR1cm4gaXNJbnRlZ2VyKG51bWJlcikgJiYgYWJzKG51bWJlcikgPD0gMHgxZmZmZmZmZmZmZmZmZjtcbiAgfVxufSk7XG4iLCIvLyAyMC4xLjIuNiBOdW1iZXIuTUFYX1NBRkVfSU5URUdFUlxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdOdW1iZXInLCB7IE1BWF9TQUZFX0lOVEVHRVI6IDB4MWZmZmZmZmZmZmZmZmYgfSk7XG4iLCIvLyAyMC4xLjIuMTAgTnVtYmVyLk1JTl9TQUZFX0lOVEVHRVJcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnTnVtYmVyJywgeyBNSU5fU0FGRV9JTlRFR0VSOiAtMHgxZmZmZmZmZmZmZmZmZiB9KTtcbiIsInZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgJHBhcnNlRmxvYXQgPSByZXF1aXJlKCcuL19wYXJzZS1mbG9hdCcpO1xuLy8gMjAuMS4yLjEyIE51bWJlci5wYXJzZUZsb2F0KHN0cmluZylcbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogKE51bWJlci5wYXJzZUZsb2F0ICE9ICRwYXJzZUZsb2F0KSwgJ051bWJlcicsIHsgcGFyc2VGbG9hdDogJHBhcnNlRmxvYXQgfSk7XG4iLCJ2YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyICRwYXJzZUludCA9IHJlcXVpcmUoJy4vX3BhcnNlLWludCcpO1xuLy8gMjAuMS4yLjEzIE51bWJlci5wYXJzZUludChzdHJpbmcsIHJhZGl4KVxuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAoTnVtYmVyLnBhcnNlSW50ICE9ICRwYXJzZUludCksICdOdW1iZXInLCB7IHBhcnNlSW50OiAkcGFyc2VJbnQgfSk7XG4iLCIvLyAyMC4yLjIuMyBNYXRoLmFjb3NoKHgpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIGxvZzFwID0gcmVxdWlyZSgnLi9fbWF0aC1sb2cxcCcpO1xudmFyIHNxcnQgPSBNYXRoLnNxcnQ7XG52YXIgJGFjb3NoID0gTWF0aC5hY29zaDtcblxuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAhKCRhY29zaFxuICAvLyBWOCBidWc6IGh0dHBzOi8vY29kZS5nb29nbGUuY29tL3AvdjgvaXNzdWVzL2RldGFpbD9pZD0zNTA5XG4gICYmIE1hdGguZmxvb3IoJGFjb3NoKE51bWJlci5NQVhfVkFMVUUpKSA9PSA3MTBcbiAgLy8gVG9yIEJyb3dzZXIgYnVnOiBNYXRoLmFjb3NoKEluZmluaXR5KSAtPiBOYU5cbiAgJiYgJGFjb3NoKEluZmluaXR5KSA9PSBJbmZpbml0eVxuKSwgJ01hdGgnLCB7XG4gIGFjb3NoOiBmdW5jdGlvbiBhY29zaCh4KSB7XG4gICAgcmV0dXJuICh4ID0gK3gpIDwgMSA/IE5hTiA6IHggPiA5NDkwNjI2NS42MjQyNTE1NlxuICAgICAgPyBNYXRoLmxvZyh4KSArIE1hdGguTE4yXG4gICAgICA6IGxvZzFwKHggLSAxICsgc3FydCh4IC0gMSkgKiBzcXJ0KHggKyAxKSk7XG4gIH1cbn0pO1xuIiwiLy8gMjAuMi4yLjUgTWF0aC5hc2luaCh4KVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciAkYXNpbmggPSBNYXRoLmFzaW5oO1xuXG5mdW5jdGlvbiBhc2luaCh4KSB7XG4gIHJldHVybiAhaXNGaW5pdGUoeCA9ICt4KSB8fCB4ID09IDAgPyB4IDogeCA8IDAgPyAtYXNpbmgoLXgpIDogTWF0aC5sb2coeCArIE1hdGguc3FydCh4ICogeCArIDEpKTtcbn1cblxuLy8gVG9yIEJyb3dzZXIgYnVnOiBNYXRoLmFzaW5oKDApIC0+IC0wXG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqICEoJGFzaW5oICYmIDEgLyAkYXNpbmgoMCkgPiAwKSwgJ01hdGgnLCB7IGFzaW5oOiBhc2luaCB9KTtcbiIsIi8vIDIwLjIuMi43IE1hdGguYXRhbmgoeClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgJGF0YW5oID0gTWF0aC5hdGFuaDtcblxuLy8gVG9yIEJyb3dzZXIgYnVnOiBNYXRoLmF0YW5oKC0wKSAtPiAwXG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqICEoJGF0YW5oICYmIDEgLyAkYXRhbmgoLTApIDwgMCksICdNYXRoJywge1xuICBhdGFuaDogZnVuY3Rpb24gYXRhbmgoeCkge1xuICAgIHJldHVybiAoeCA9ICt4KSA9PSAwID8geCA6IE1hdGgubG9nKCgxICsgeCkgLyAoMSAtIHgpKSAvIDI7XG4gIH1cbn0pO1xuIiwiLy8gMjAuMi4yLjkgTWF0aC5jYnJ0KHgpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIHNpZ24gPSByZXF1aXJlKCcuL19tYXRoLXNpZ24nKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdNYXRoJywge1xuICBjYnJ0OiBmdW5jdGlvbiBjYnJ0KHgpIHtcbiAgICByZXR1cm4gc2lnbih4ID0gK3gpICogTWF0aC5wb3coTWF0aC5hYnMoeCksIDEgLyAzKTtcbiAgfVxufSk7XG4iLCIvLyAyMC4yLjIuMTEgTWF0aC5jbHozMih4KVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdNYXRoJywge1xuICBjbHozMjogZnVuY3Rpb24gY2x6MzIoeCkge1xuICAgIHJldHVybiAoeCA+Pj49IDApID8gMzEgLSBNYXRoLmZsb29yKE1hdGgubG9nKHggKyAwLjUpICogTWF0aC5MT0cyRSkgOiAzMjtcbiAgfVxufSk7XG4iLCIvLyAyMC4yLjIuMTIgTWF0aC5jb3NoKHgpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIGV4cCA9IE1hdGguZXhwO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ01hdGgnLCB7XG4gIGNvc2g6IGZ1bmN0aW9uIGNvc2goeCkge1xuICAgIHJldHVybiAoZXhwKHggPSAreCkgKyBleHAoLXgpKSAvIDI7XG4gIH1cbn0pO1xuIiwiLy8gMjAuMi4yLjE0IE1hdGguZXhwbTEoeClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgJGV4cG0xID0gcmVxdWlyZSgnLi9fbWF0aC1leHBtMScpO1xuXG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqICgkZXhwbTEgIT0gTWF0aC5leHBtMSksICdNYXRoJywgeyBleHBtMTogJGV4cG0xIH0pO1xuIiwiLy8gMjAuMi4yLjE2IE1hdGguZnJvdW5kKHgpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ01hdGgnLCB7IGZyb3VuZDogcmVxdWlyZSgnLi9fbWF0aC1mcm91bmQnKSB9KTtcbiIsIi8vIDIwLjIuMi4xNiBNYXRoLmZyb3VuZCh4KVxudmFyIHNpZ24gPSByZXF1aXJlKCcuL19tYXRoLXNpZ24nKTtcbnZhciBwb3cgPSBNYXRoLnBvdztcbnZhciBFUFNJTE9OID0gcG93KDIsIC01Mik7XG52YXIgRVBTSUxPTjMyID0gcG93KDIsIC0yMyk7XG52YXIgTUFYMzIgPSBwb3coMiwgMTI3KSAqICgyIC0gRVBTSUxPTjMyKTtcbnZhciBNSU4zMiA9IHBvdygyLCAtMTI2KTtcblxudmFyIHJvdW5kVGllc1RvRXZlbiA9IGZ1bmN0aW9uIChuKSB7XG4gIHJldHVybiBuICsgMSAvIEVQU0lMT04gLSAxIC8gRVBTSUxPTjtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gTWF0aC5mcm91bmQgfHwgZnVuY3Rpb24gZnJvdW5kKHgpIHtcbiAgdmFyICRhYnMgPSBNYXRoLmFicyh4KTtcbiAgdmFyICRzaWduID0gc2lnbih4KTtcbiAgdmFyIGEsIHJlc3VsdDtcbiAgaWYgKCRhYnMgPCBNSU4zMikgcmV0dXJuICRzaWduICogcm91bmRUaWVzVG9FdmVuKCRhYnMgLyBNSU4zMiAvIEVQU0lMT04zMikgKiBNSU4zMiAqIEVQU0lMT04zMjtcbiAgYSA9ICgxICsgRVBTSUxPTjMyIC8gRVBTSUxPTikgKiAkYWJzO1xuICByZXN1bHQgPSBhIC0gKGEgLSAkYWJzKTtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXNlbGYtY29tcGFyZVxuICBpZiAocmVzdWx0ID4gTUFYMzIgfHwgcmVzdWx0ICE9IHJlc3VsdCkgcmV0dXJuICRzaWduICogSW5maW5pdHk7XG4gIHJldHVybiAkc2lnbiAqIHJlc3VsdDtcbn07XG4iLCIvLyAyMC4yLjIuMTcgTWF0aC5oeXBvdChbdmFsdWUxWywgdmFsdWUyWywg4oCmIF1dXSlcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgYWJzID0gTWF0aC5hYnM7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnTWF0aCcsIHtcbiAgaHlwb3Q6IGZ1bmN0aW9uIGh5cG90KHZhbHVlMSwgdmFsdWUyKSB7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW51c2VkLXZhcnNcbiAgICB2YXIgc3VtID0gMDtcbiAgICB2YXIgaSA9IDA7XG4gICAgdmFyIGFMZW4gPSBhcmd1bWVudHMubGVuZ3RoO1xuICAgIHZhciBsYXJnID0gMDtcbiAgICB2YXIgYXJnLCBkaXY7XG4gICAgd2hpbGUgKGkgPCBhTGVuKSB7XG4gICAgICBhcmcgPSBhYnMoYXJndW1lbnRzW2krK10pO1xuICAgICAgaWYgKGxhcmcgPCBhcmcpIHtcbiAgICAgICAgZGl2ID0gbGFyZyAvIGFyZztcbiAgICAgICAgc3VtID0gc3VtICogZGl2ICogZGl2ICsgMTtcbiAgICAgICAgbGFyZyA9IGFyZztcbiAgICAgIH0gZWxzZSBpZiAoYXJnID4gMCkge1xuICAgICAgICBkaXYgPSBhcmcgLyBsYXJnO1xuICAgICAgICBzdW0gKz0gZGl2ICogZGl2O1xuICAgICAgfSBlbHNlIHN1bSArPSBhcmc7XG4gICAgfVxuICAgIHJldHVybiBsYXJnID09PSBJbmZpbml0eSA/IEluZmluaXR5IDogbGFyZyAqIE1hdGguc3FydChzdW0pO1xuICB9XG59KTtcbiIsIi8vIDIwLjIuMi4xOCBNYXRoLmltdWwoeCwgeSlcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgJGltdWwgPSBNYXRoLmltdWw7XG5cbi8vIHNvbWUgV2ViS2l0IHZlcnNpb25zIGZhaWxzIHdpdGggYmlnIG51bWJlcnMsIHNvbWUgaGFzIHdyb25nIGFyaXR5XG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqIHJlcXVpcmUoJy4vX2ZhaWxzJykoZnVuY3Rpb24gKCkge1xuICByZXR1cm4gJGltdWwoMHhmZmZmZmZmZiwgNSkgIT0gLTUgfHwgJGltdWwubGVuZ3RoICE9IDI7XG59KSwgJ01hdGgnLCB7XG4gIGltdWw6IGZ1bmN0aW9uIGltdWwoeCwgeSkge1xuICAgIHZhciBVSU5UMTYgPSAweGZmZmY7XG4gICAgdmFyIHhuID0gK3g7XG4gICAgdmFyIHluID0gK3k7XG4gICAgdmFyIHhsID0gVUlOVDE2ICYgeG47XG4gICAgdmFyIHlsID0gVUlOVDE2ICYgeW47XG4gICAgcmV0dXJuIDAgfCB4bCAqIHlsICsgKChVSU5UMTYgJiB4biA+Pj4gMTYpICogeWwgKyB4bCAqIChVSU5UMTYgJiB5biA+Pj4gMTYpIDw8IDE2ID4+PiAwKTtcbiAgfVxufSk7XG4iLCIvLyAyMC4yLjIuMjEgTWF0aC5sb2cxMCh4KVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdNYXRoJywge1xuICBsb2cxMDogZnVuY3Rpb24gbG9nMTAoeCkge1xuICAgIHJldHVybiBNYXRoLmxvZyh4KSAqIE1hdGguTE9HMTBFO1xuICB9XG59KTtcbiIsIi8vIDIwLjIuMi4yMCBNYXRoLmxvZzFwKHgpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ01hdGgnLCB7IGxvZzFwOiByZXF1aXJlKCcuL19tYXRoLWxvZzFwJykgfSk7XG4iLCIvLyAyMC4yLjIuMjIgTWF0aC5sb2cyKHgpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ01hdGgnLCB7XG4gIGxvZzI6IGZ1bmN0aW9uIGxvZzIoeCkge1xuICAgIHJldHVybiBNYXRoLmxvZyh4KSAvIE1hdGguTE4yO1xuICB9XG59KTtcbiIsIi8vIDIwLjIuMi4yOCBNYXRoLnNpZ24oeClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnTWF0aCcsIHsgc2lnbjogcmVxdWlyZSgnLi9fbWF0aC1zaWduJykgfSk7XG4iLCIvLyAyMC4yLjIuMzAgTWF0aC5zaW5oKHgpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIGV4cG0xID0gcmVxdWlyZSgnLi9fbWF0aC1leHBtMScpO1xudmFyIGV4cCA9IE1hdGguZXhwO1xuXG4vLyBWOCBuZWFyIENocm9taXVtIDM4IGhhcyBhIHByb2JsZW0gd2l0aCB2ZXJ5IHNtYWxsIG51bWJlcnNcbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogcmVxdWlyZSgnLi9fZmFpbHMnKShmdW5jdGlvbiAoKSB7XG4gIHJldHVybiAhTWF0aC5zaW5oKC0yZS0xNykgIT0gLTJlLTE3O1xufSksICdNYXRoJywge1xuICBzaW5oOiBmdW5jdGlvbiBzaW5oKHgpIHtcbiAgICByZXR1cm4gTWF0aC5hYnMoeCA9ICt4KSA8IDFcbiAgICAgID8gKGV4cG0xKHgpIC0gZXhwbTEoLXgpKSAvIDJcbiAgICAgIDogKGV4cCh4IC0gMSkgLSBleHAoLXggLSAxKSkgKiAoTWF0aC5FIC8gMik7XG4gIH1cbn0pO1xuIiwiLy8gMjAuMi4yLjMzIE1hdGgudGFuaCh4KVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBleHBtMSA9IHJlcXVpcmUoJy4vX21hdGgtZXhwbTEnKTtcbnZhciBleHAgPSBNYXRoLmV4cDtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdNYXRoJywge1xuICB0YW5oOiBmdW5jdGlvbiB0YW5oKHgpIHtcbiAgICB2YXIgYSA9IGV4cG0xKHggPSAreCk7XG4gICAgdmFyIGIgPSBleHBtMSgteCk7XG4gICAgcmV0dXJuIGEgPT0gSW5maW5pdHkgPyAxIDogYiA9PSBJbmZpbml0eSA/IC0xIDogKGEgLSBiKSAvIChleHAoeCkgKyBleHAoLXgpKTtcbiAgfVxufSk7XG4iLCIvLyAyMC4yLjIuMzQgTWF0aC50cnVuYyh4KVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdNYXRoJywge1xuICB0cnVuYzogZnVuY3Rpb24gdHJ1bmMoaXQpIHtcbiAgICByZXR1cm4gKGl0ID4gMCA/IE1hdGguZmxvb3IgOiBNYXRoLmNlaWwpKGl0KTtcbiAgfVxufSk7XG4iLCJ2YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIHRvQWJzb2x1dGVJbmRleCA9IHJlcXVpcmUoJy4vX3RvLWFic29sdXRlLWluZGV4Jyk7XG52YXIgZnJvbUNoYXJDb2RlID0gU3RyaW5nLmZyb21DaGFyQ29kZTtcbnZhciAkZnJvbUNvZGVQb2ludCA9IFN0cmluZy5mcm9tQ29kZVBvaW50O1xuXG4vLyBsZW5ndGggc2hvdWxkIGJlIDEsIG9sZCBGRiBwcm9ibGVtXG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqICghISRmcm9tQ29kZVBvaW50ICYmICRmcm9tQ29kZVBvaW50Lmxlbmd0aCAhPSAxKSwgJ1N0cmluZycsIHtcbiAgLy8gMjEuMS4yLjIgU3RyaW5nLmZyb21Db2RlUG9pbnQoLi4uY29kZVBvaW50cylcbiAgZnJvbUNvZGVQb2ludDogZnVuY3Rpb24gZnJvbUNvZGVQb2ludCh4KSB7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW51c2VkLXZhcnNcbiAgICB2YXIgcmVzID0gW107XG4gICAgdmFyIGFMZW4gPSBhcmd1bWVudHMubGVuZ3RoO1xuICAgIHZhciBpID0gMDtcbiAgICB2YXIgY29kZTtcbiAgICB3aGlsZSAoYUxlbiA+IGkpIHtcbiAgICAgIGNvZGUgPSArYXJndW1lbnRzW2krK107XG4gICAgICBpZiAodG9BYnNvbHV0ZUluZGV4KGNvZGUsIDB4MTBmZmZmKSAhPT0gY29kZSkgdGhyb3cgUmFuZ2VFcnJvcihjb2RlICsgJyBpcyBub3QgYSB2YWxpZCBjb2RlIHBvaW50Jyk7XG4gICAgICByZXMucHVzaChjb2RlIDwgMHgxMDAwMFxuICAgICAgICA/IGZyb21DaGFyQ29kZShjb2RlKVxuICAgICAgICA6IGZyb21DaGFyQ29kZSgoKGNvZGUgLT0gMHgxMDAwMCkgPj4gMTApICsgMHhkODAwLCBjb2RlICUgMHg0MDAgKyAweGRjMDApXG4gICAgICApO1xuICAgIH0gcmV0dXJuIHJlcy5qb2luKCcnKTtcbiAgfVxufSk7XG4iLCJ2YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIHRvSU9iamVjdCA9IHJlcXVpcmUoJy4vX3RvLWlvYmplY3QnKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ1N0cmluZycsIHtcbiAgLy8gMjEuMS4yLjQgU3RyaW5nLnJhdyhjYWxsU2l0ZSwgLi4uc3Vic3RpdHV0aW9ucylcbiAgcmF3OiBmdW5jdGlvbiByYXcoY2FsbFNpdGUpIHtcbiAgICB2YXIgdHBsID0gdG9JT2JqZWN0KGNhbGxTaXRlLnJhdyk7XG4gICAgdmFyIGxlbiA9IHRvTGVuZ3RoKHRwbC5sZW5ndGgpO1xuICAgIHZhciBhTGVuID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgICB2YXIgcmVzID0gW107XG4gICAgdmFyIGkgPSAwO1xuICAgIHdoaWxlIChsZW4gPiBpKSB7XG4gICAgICByZXMucHVzaChTdHJpbmcodHBsW2krK10pKTtcbiAgICAgIGlmIChpIDwgYUxlbikgcmVzLnB1c2goU3RyaW5nKGFyZ3VtZW50c1tpXSkpO1xuICAgIH0gcmV0dXJuIHJlcy5qb2luKCcnKTtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG4vLyAyMS4xLjMuMjUgU3RyaW5nLnByb3RvdHlwZS50cmltKClcbnJlcXVpcmUoJy4vX3N0cmluZy10cmltJykoJ3RyaW0nLCBmdW5jdGlvbiAoJHRyaW0pIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIHRyaW0oKSB7XG4gICAgcmV0dXJuICR0cmltKHRoaXMsIDMpO1xuICB9O1xufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJGF0ID0gcmVxdWlyZSgnLi9fc3RyaW5nLWF0JykodHJ1ZSk7XG5cbi8vIDIxLjEuMy4yNyBTdHJpbmcucHJvdG90eXBlW0BAaXRlcmF0b3JdKClcbnJlcXVpcmUoJy4vX2l0ZXItZGVmaW5lJykoU3RyaW5nLCAnU3RyaW5nJywgZnVuY3Rpb24gKGl0ZXJhdGVkKSB7XG4gIHRoaXMuX3QgPSBTdHJpbmcoaXRlcmF0ZWQpOyAvLyB0YXJnZXRcbiAgdGhpcy5faSA9IDA7ICAgICAgICAgICAgICAgIC8vIG5leHQgaW5kZXhcbi8vIDIxLjEuNS4yLjEgJVN0cmluZ0l0ZXJhdG9yUHJvdG90eXBlJS5uZXh0KClcbn0sIGZ1bmN0aW9uICgpIHtcbiAgdmFyIE8gPSB0aGlzLl90O1xuICB2YXIgaW5kZXggPSB0aGlzLl9pO1xuICB2YXIgcG9pbnQ7XG4gIGlmIChpbmRleCA+PSBPLmxlbmd0aCkgcmV0dXJuIHsgdmFsdWU6IHVuZGVmaW5lZCwgZG9uZTogdHJ1ZSB9O1xuICBwb2ludCA9ICRhdChPLCBpbmRleCk7XG4gIHRoaXMuX2kgKz0gcG9pbnQubGVuZ3RoO1xuICByZXR1cm4geyB2YWx1ZTogcG9pbnQsIGRvbmU6IGZhbHNlIH07XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgJGF0ID0gcmVxdWlyZSgnLi9fc3RyaW5nLWF0JykoZmFsc2UpO1xuJGV4cG9ydCgkZXhwb3J0LlAsICdTdHJpbmcnLCB7XG4gIC8vIDIxLjEuMy4zIFN0cmluZy5wcm90b3R5cGUuY29kZVBvaW50QXQocG9zKVxuICBjb2RlUG9pbnRBdDogZnVuY3Rpb24gY29kZVBvaW50QXQocG9zKSB7XG4gICAgcmV0dXJuICRhdCh0aGlzLCBwb3MpO1xuICB9XG59KTtcbiIsIi8vIDIxLjEuMy42IFN0cmluZy5wcm90b3R5cGUuZW5kc1dpdGgoc2VhcmNoU3RyaW5nIFssIGVuZFBvc2l0aW9uXSlcbid1c2Ugc3RyaWN0JztcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuL190by1sZW5ndGgnKTtcbnZhciBjb250ZXh0ID0gcmVxdWlyZSgnLi9fc3RyaW5nLWNvbnRleHQnKTtcbnZhciBFTkRTX1dJVEggPSAnZW5kc1dpdGgnO1xudmFyICRlbmRzV2l0aCA9ICcnW0VORFNfV0lUSF07XG5cbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogcmVxdWlyZSgnLi9fZmFpbHMtaXMtcmVnZXhwJykoRU5EU19XSVRIKSwgJ1N0cmluZycsIHtcbiAgZW5kc1dpdGg6IGZ1bmN0aW9uIGVuZHNXaXRoKHNlYXJjaFN0cmluZyAvKiAsIGVuZFBvc2l0aW9uID0gQGxlbmd0aCAqLykge1xuICAgIHZhciB0aGF0ID0gY29udGV4dCh0aGlzLCBzZWFyY2hTdHJpbmcsIEVORFNfV0lUSCk7XG4gICAgdmFyIGVuZFBvc2l0aW9uID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQ7XG4gICAgdmFyIGxlbiA9IHRvTGVuZ3RoKHRoYXQubGVuZ3RoKTtcbiAgICB2YXIgZW5kID0gZW5kUG9zaXRpb24gPT09IHVuZGVmaW5lZCA/IGxlbiA6IE1hdGgubWluKHRvTGVuZ3RoKGVuZFBvc2l0aW9uKSwgbGVuKTtcbiAgICB2YXIgc2VhcmNoID0gU3RyaW5nKHNlYXJjaFN0cmluZyk7XG4gICAgcmV0dXJuICRlbmRzV2l0aFxuICAgICAgPyAkZW5kc1dpdGguY2FsbCh0aGF0LCBzZWFyY2gsIGVuZClcbiAgICAgIDogdGhhdC5zbGljZShlbmQgLSBzZWFyY2gubGVuZ3RoLCBlbmQpID09PSBzZWFyY2g7XG4gIH1cbn0pO1xuIiwiLy8gMjEuMS4zLjcgU3RyaW5nLnByb3RvdHlwZS5pbmNsdWRlcyhzZWFyY2hTdHJpbmcsIHBvc2l0aW9uID0gMClcbid1c2Ugc3RyaWN0JztcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgY29udGV4dCA9IHJlcXVpcmUoJy4vX3N0cmluZy1jb250ZXh0Jyk7XG52YXIgSU5DTFVERVMgPSAnaW5jbHVkZXMnO1xuXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqIHJlcXVpcmUoJy4vX2ZhaWxzLWlzLXJlZ2V4cCcpKElOQ0xVREVTKSwgJ1N0cmluZycsIHtcbiAgaW5jbHVkZXM6IGZ1bmN0aW9uIGluY2x1ZGVzKHNlYXJjaFN0cmluZyAvKiAsIHBvc2l0aW9uID0gMCAqLykge1xuICAgIHJldHVybiAhIX5jb250ZXh0KHRoaXMsIHNlYXJjaFN0cmluZywgSU5DTFVERVMpXG4gICAgICAuaW5kZXhPZihzZWFyY2hTdHJpbmcsIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKTtcbiAgfVxufSk7XG4iLCJ2YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUCwgJ1N0cmluZycsIHtcbiAgLy8gMjEuMS4zLjEzIFN0cmluZy5wcm90b3R5cGUucmVwZWF0KGNvdW50KVxuICByZXBlYXQ6IHJlcXVpcmUoJy4vX3N0cmluZy1yZXBlYXQnKVxufSk7XG4iLCIvLyAyMS4xLjMuMTggU3RyaW5nLnByb3RvdHlwZS5zdGFydHNXaXRoKHNlYXJjaFN0cmluZyBbLCBwb3NpdGlvbiBdKVxuJ3VzZSBzdHJpY3QnO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpO1xudmFyIGNvbnRleHQgPSByZXF1aXJlKCcuL19zdHJpbmctY29udGV4dCcpO1xudmFyIFNUQVJUU19XSVRIID0gJ3N0YXJ0c1dpdGgnO1xudmFyICRzdGFydHNXaXRoID0gJydbU1RBUlRTX1dJVEhdO1xuXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqIHJlcXVpcmUoJy4vX2ZhaWxzLWlzLXJlZ2V4cCcpKFNUQVJUU19XSVRIKSwgJ1N0cmluZycsIHtcbiAgc3RhcnRzV2l0aDogZnVuY3Rpb24gc3RhcnRzV2l0aChzZWFyY2hTdHJpbmcgLyogLCBwb3NpdGlvbiA9IDAgKi8pIHtcbiAgICB2YXIgdGhhdCA9IGNvbnRleHQodGhpcywgc2VhcmNoU3RyaW5nLCBTVEFSVFNfV0lUSCk7XG4gICAgdmFyIGluZGV4ID0gdG9MZW5ndGgoTWF0aC5taW4oYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQsIHRoYXQubGVuZ3RoKSk7XG4gICAgdmFyIHNlYXJjaCA9IFN0cmluZyhzZWFyY2hTdHJpbmcpO1xuICAgIHJldHVybiAkc3RhcnRzV2l0aFxuICAgICAgPyAkc3RhcnRzV2l0aC5jYWxsKHRoYXQsIHNlYXJjaCwgaW5kZXgpXG4gICAgICA6IHRoYXQuc2xpY2UoaW5kZXgsIGluZGV4ICsgc2VhcmNoLmxlbmd0aCkgPT09IHNlYXJjaDtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG4vLyBCLjIuMy4yIFN0cmluZy5wcm90b3R5cGUuYW5jaG9yKG5hbWUpXG5yZXF1aXJlKCcuL19zdHJpbmctaHRtbCcpKCdhbmNob3InLCBmdW5jdGlvbiAoY3JlYXRlSFRNTCkge1xuICByZXR1cm4gZnVuY3Rpb24gYW5jaG9yKG5hbWUpIHtcbiAgICByZXR1cm4gY3JlYXRlSFRNTCh0aGlzLCAnYScsICduYW1lJywgbmFtZSk7XG4gIH07XG59KTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIEIuMi4zLjMgU3RyaW5nLnByb3RvdHlwZS5iaWcoKVxucmVxdWlyZSgnLi9fc3RyaW5nLWh0bWwnKSgnYmlnJywgZnVuY3Rpb24gKGNyZWF0ZUhUTUwpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIGJpZygpIHtcbiAgICByZXR1cm4gY3JlYXRlSFRNTCh0aGlzLCAnYmlnJywgJycsICcnKTtcbiAgfTtcbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gQi4yLjMuNCBTdHJpbmcucHJvdG90eXBlLmJsaW5rKClcbnJlcXVpcmUoJy4vX3N0cmluZy1odG1sJykoJ2JsaW5rJywgZnVuY3Rpb24gKGNyZWF0ZUhUTUwpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIGJsaW5rKCkge1xuICAgIHJldHVybiBjcmVhdGVIVE1MKHRoaXMsICdibGluaycsICcnLCAnJyk7XG4gIH07XG59KTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIEIuMi4zLjUgU3RyaW5nLnByb3RvdHlwZS5ib2xkKClcbnJlcXVpcmUoJy4vX3N0cmluZy1odG1sJykoJ2JvbGQnLCBmdW5jdGlvbiAoY3JlYXRlSFRNTCkge1xuICByZXR1cm4gZnVuY3Rpb24gYm9sZCgpIHtcbiAgICByZXR1cm4gY3JlYXRlSFRNTCh0aGlzLCAnYicsICcnLCAnJyk7XG4gIH07XG59KTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIEIuMi4zLjYgU3RyaW5nLnByb3RvdHlwZS5maXhlZCgpXG5yZXF1aXJlKCcuL19zdHJpbmctaHRtbCcpKCdmaXhlZCcsIGZ1bmN0aW9uIChjcmVhdGVIVE1MKSB7XG4gIHJldHVybiBmdW5jdGlvbiBmaXhlZCgpIHtcbiAgICByZXR1cm4gY3JlYXRlSFRNTCh0aGlzLCAndHQnLCAnJywgJycpO1xuICB9O1xufSk7XG4iLCIndXNlIHN0cmljdCc7XG4vLyBCLjIuMy43IFN0cmluZy5wcm90b3R5cGUuZm9udGNvbG9yKGNvbG9yKVxucmVxdWlyZSgnLi9fc3RyaW5nLWh0bWwnKSgnZm9udGNvbG9yJywgZnVuY3Rpb24gKGNyZWF0ZUhUTUwpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIGZvbnRjb2xvcihjb2xvcikge1xuICAgIHJldHVybiBjcmVhdGVIVE1MKHRoaXMsICdmb250JywgJ2NvbG9yJywgY29sb3IpO1xuICB9O1xufSk7XG4iLCIndXNlIHN0cmljdCc7XG4vLyBCLjIuMy44IFN0cmluZy5wcm90b3R5cGUuZm9udHNpemUoc2l6ZSlcbnJlcXVpcmUoJy4vX3N0cmluZy1odG1sJykoJ2ZvbnRzaXplJywgZnVuY3Rpb24gKGNyZWF0ZUhUTUwpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIGZvbnRzaXplKHNpemUpIHtcbiAgICByZXR1cm4gY3JlYXRlSFRNTCh0aGlzLCAnZm9udCcsICdzaXplJywgc2l6ZSk7XG4gIH07XG59KTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIEIuMi4zLjkgU3RyaW5nLnByb3RvdHlwZS5pdGFsaWNzKClcbnJlcXVpcmUoJy4vX3N0cmluZy1odG1sJykoJ2l0YWxpY3MnLCBmdW5jdGlvbiAoY3JlYXRlSFRNTCkge1xuICByZXR1cm4gZnVuY3Rpb24gaXRhbGljcygpIHtcbiAgICByZXR1cm4gY3JlYXRlSFRNTCh0aGlzLCAnaScsICcnLCAnJyk7XG4gIH07XG59KTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIEIuMi4zLjEwIFN0cmluZy5wcm90b3R5cGUubGluayh1cmwpXG5yZXF1aXJlKCcuL19zdHJpbmctaHRtbCcpKCdsaW5rJywgZnVuY3Rpb24gKGNyZWF0ZUhUTUwpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIGxpbmsodXJsKSB7XG4gICAgcmV0dXJuIGNyZWF0ZUhUTUwodGhpcywgJ2EnLCAnaHJlZicsIHVybCk7XG4gIH07XG59KTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIEIuMi4zLjExIFN0cmluZy5wcm90b3R5cGUuc21hbGwoKVxucmVxdWlyZSgnLi9fc3RyaW5nLWh0bWwnKSgnc21hbGwnLCBmdW5jdGlvbiAoY3JlYXRlSFRNTCkge1xuICByZXR1cm4gZnVuY3Rpb24gc21hbGwoKSB7XG4gICAgcmV0dXJuIGNyZWF0ZUhUTUwodGhpcywgJ3NtYWxsJywgJycsICcnKTtcbiAgfTtcbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gQi4yLjMuMTIgU3RyaW5nLnByb3RvdHlwZS5zdHJpa2UoKVxucmVxdWlyZSgnLi9fc3RyaW5nLWh0bWwnKSgnc3RyaWtlJywgZnVuY3Rpb24gKGNyZWF0ZUhUTUwpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIHN0cmlrZSgpIHtcbiAgICByZXR1cm4gY3JlYXRlSFRNTCh0aGlzLCAnc3RyaWtlJywgJycsICcnKTtcbiAgfTtcbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gQi4yLjMuMTMgU3RyaW5nLnByb3RvdHlwZS5zdWIoKVxucmVxdWlyZSgnLi9fc3RyaW5nLWh0bWwnKSgnc3ViJywgZnVuY3Rpb24gKGNyZWF0ZUhUTUwpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIHN1YigpIHtcbiAgICByZXR1cm4gY3JlYXRlSFRNTCh0aGlzLCAnc3ViJywgJycsICcnKTtcbiAgfTtcbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gQi4yLjMuMTQgU3RyaW5nLnByb3RvdHlwZS5zdXAoKVxucmVxdWlyZSgnLi9fc3RyaW5nLWh0bWwnKSgnc3VwJywgZnVuY3Rpb24gKGNyZWF0ZUhUTUwpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIHN1cCgpIHtcbiAgICByZXR1cm4gY3JlYXRlSFRNTCh0aGlzLCAnc3VwJywgJycsICcnKTtcbiAgfTtcbn0pO1xuIiwiLy8gMjAuMy4zLjEgLyAxNS45LjQuNCBEYXRlLm5vdygpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ0RhdGUnLCB7IG5vdzogZnVuY3Rpb24gKCkgeyByZXR1cm4gbmV3IERhdGUoKS5nZXRUaW1lKCk7IH0gfSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8tb2JqZWN0Jyk7XG52YXIgdG9QcmltaXRpdmUgPSByZXF1aXJlKCcuL190by1wcmltaXRpdmUnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiByZXF1aXJlKCcuL19mYWlscycpKGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIG5ldyBEYXRlKE5hTikudG9KU09OKCkgIT09IG51bGxcbiAgICB8fCBEYXRlLnByb3RvdHlwZS50b0pTT04uY2FsbCh7IHRvSVNPU3RyaW5nOiBmdW5jdGlvbiAoKSB7IHJldHVybiAxOyB9IH0pICE9PSAxO1xufSksICdEYXRlJywge1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW51c2VkLXZhcnNcbiAgdG9KU09OOiBmdW5jdGlvbiB0b0pTT04oa2V5KSB7XG4gICAgdmFyIE8gPSB0b09iamVjdCh0aGlzKTtcbiAgICB2YXIgcHYgPSB0b1ByaW1pdGl2ZShPKTtcbiAgICByZXR1cm4gdHlwZW9mIHB2ID09ICdudW1iZXInICYmICFpc0Zpbml0ZShwdikgPyBudWxsIDogTy50b0lTT1N0cmluZygpO1xuICB9XG59KTtcbiIsIi8vIDIwLjMuNC4zNiAvIDE1LjkuNS40MyBEYXRlLnByb3RvdHlwZS50b0lTT1N0cmluZygpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIHRvSVNPU3RyaW5nID0gcmVxdWlyZSgnLi9fZGF0ZS10by1pc28tc3RyaW5nJyk7XG5cbi8vIFBoYW50b21KUyAvIG9sZCBXZWJLaXQgaGFzIGEgYnJva2VuIGltcGxlbWVudGF0aW9uc1xuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiAoRGF0ZS5wcm90b3R5cGUudG9JU09TdHJpbmcgIT09IHRvSVNPU3RyaW5nKSwgJ0RhdGUnLCB7XG4gIHRvSVNPU3RyaW5nOiB0b0lTT1N0cmluZ1xufSk7XG4iLCIndXNlIHN0cmljdCc7XG4vLyAyMC4zLjQuMzYgLyAxNS45LjUuNDMgRGF0ZS5wcm90b3R5cGUudG9JU09TdHJpbmcoKVxudmFyIGZhaWxzID0gcmVxdWlyZSgnLi9fZmFpbHMnKTtcbnZhciBnZXRUaW1lID0gRGF0ZS5wcm90b3R5cGUuZ2V0VGltZTtcbnZhciAkdG9JU09TdHJpbmcgPSBEYXRlLnByb3RvdHlwZS50b0lTT1N0cmluZztcblxudmFyIGx6ID0gZnVuY3Rpb24gKG51bSkge1xuICByZXR1cm4gbnVtID4gOSA/IG51bSA6ICcwJyArIG51bTtcbn07XG5cbi8vIFBoYW50b21KUyAvIG9sZCBXZWJLaXQgaGFzIGEgYnJva2VuIGltcGxlbWVudGF0aW9uc1xubW9kdWxlLmV4cG9ydHMgPSAoZmFpbHMoZnVuY3Rpb24gKCkge1xuICByZXR1cm4gJHRvSVNPU3RyaW5nLmNhbGwobmV3IERhdGUoLTVlMTMgLSAxKSkgIT0gJzAzODUtMDctMjVUMDc6MDY6MzkuOTk5Wic7XG59KSB8fCAhZmFpbHMoZnVuY3Rpb24gKCkge1xuICAkdG9JU09TdHJpbmcuY2FsbChuZXcgRGF0ZShOYU4pKTtcbn0pKSA/IGZ1bmN0aW9uIHRvSVNPU3RyaW5nKCkge1xuICBpZiAoIWlzRmluaXRlKGdldFRpbWUuY2FsbCh0aGlzKSkpIHRocm93IFJhbmdlRXJyb3IoJ0ludmFsaWQgdGltZSB2YWx1ZScpO1xuICB2YXIgZCA9IHRoaXM7XG4gIHZhciB5ID0gZC5nZXRVVENGdWxsWWVhcigpO1xuICB2YXIgbSA9IGQuZ2V0VVRDTWlsbGlzZWNvbmRzKCk7XG4gIHZhciBzID0geSA8IDAgPyAnLScgOiB5ID4gOTk5OSA/ICcrJyA6ICcnO1xuICByZXR1cm4gcyArICgnMDAwMDAnICsgTWF0aC5hYnMoeSkpLnNsaWNlKHMgPyAtNiA6IC00KSArXG4gICAgJy0nICsgbHooZC5nZXRVVENNb250aCgpICsgMSkgKyAnLScgKyBseihkLmdldFVUQ0RhdGUoKSkgK1xuICAgICdUJyArIGx6KGQuZ2V0VVRDSG91cnMoKSkgKyAnOicgKyBseihkLmdldFVUQ01pbnV0ZXMoKSkgK1xuICAgICc6JyArIGx6KGQuZ2V0VVRDU2Vjb25kcygpKSArICcuJyArIChtID4gOTkgPyBtIDogJzAnICsgbHoobSkpICsgJ1onO1xufSA6ICR0b0lTT1N0cmluZztcbiIsInZhciBEYXRlUHJvdG8gPSBEYXRlLnByb3RvdHlwZTtcbnZhciBJTlZBTElEX0RBVEUgPSAnSW52YWxpZCBEYXRlJztcbnZhciBUT19TVFJJTkcgPSAndG9TdHJpbmcnO1xudmFyICR0b1N0cmluZyA9IERhdGVQcm90b1tUT19TVFJJTkddO1xudmFyIGdldFRpbWUgPSBEYXRlUHJvdG8uZ2V0VGltZTtcbmlmIChuZXcgRGF0ZShOYU4pICsgJycgIT0gSU5WQUxJRF9EQVRFKSB7XG4gIHJlcXVpcmUoJy4vX3JlZGVmaW5lJykoRGF0ZVByb3RvLCBUT19TVFJJTkcsIGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICAgIHZhciB2YWx1ZSA9IGdldFRpbWUuY2FsbCh0aGlzKTtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tc2VsZi1jb21wYXJlXG4gICAgcmV0dXJuIHZhbHVlID09PSB2YWx1ZSA/ICR0b1N0cmluZy5jYWxsKHRoaXMpIDogSU5WQUxJRF9EQVRFO1xuICB9KTtcbn1cbiIsInZhciBUT19QUklNSVRJVkUgPSByZXF1aXJlKCcuL193a3MnKSgndG9QcmltaXRpdmUnKTtcbnZhciBwcm90byA9IERhdGUucHJvdG90eXBlO1xuXG5pZiAoIShUT19QUklNSVRJVkUgaW4gcHJvdG8pKSByZXF1aXJlKCcuL19oaWRlJykocHJvdG8sIFRPX1BSSU1JVElWRSwgcmVxdWlyZSgnLi9fZGF0ZS10by1wcmltaXRpdmUnKSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciB0b1ByaW1pdGl2ZSA9IHJlcXVpcmUoJy4vX3RvLXByaW1pdGl2ZScpO1xudmFyIE5VTUJFUiA9ICdudW1iZXInO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChoaW50KSB7XG4gIGlmIChoaW50ICE9PSAnc3RyaW5nJyAmJiBoaW50ICE9PSBOVU1CRVIgJiYgaGludCAhPT0gJ2RlZmF1bHQnKSB0aHJvdyBUeXBlRXJyb3IoJ0luY29ycmVjdCBoaW50Jyk7XG4gIHJldHVybiB0b1ByaW1pdGl2ZShhbk9iamVjdCh0aGlzKSwgaGludCAhPSBOVU1CRVIpO1xufTtcbiIsIi8vIDIyLjEuMi4yIC8gMTUuNC4zLjIgQXJyYXkuaXNBcnJheShhcmcpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ0FycmF5JywgeyBpc0FycmF5OiByZXF1aXJlKCcuL19pcy1hcnJheScpIH0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGN0eCA9IHJlcXVpcmUoJy4vX2N0eCcpO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4vX3RvLW9iamVjdCcpO1xudmFyIGNhbGwgPSByZXF1aXJlKCcuL19pdGVyLWNhbGwnKTtcbnZhciBpc0FycmF5SXRlciA9IHJlcXVpcmUoJy4vX2lzLWFycmF5LWl0ZXInKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpO1xudmFyIGNyZWF0ZVByb3BlcnR5ID0gcmVxdWlyZSgnLi9fY3JlYXRlLXByb3BlcnR5Jyk7XG52YXIgZ2V0SXRlckZuID0gcmVxdWlyZSgnLi9jb3JlLmdldC1pdGVyYXRvci1tZXRob2QnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAhcmVxdWlyZSgnLi9faXRlci1kZXRlY3QnKShmdW5jdGlvbiAoaXRlcikgeyBBcnJheS5mcm9tKGl0ZXIpOyB9KSwgJ0FycmF5Jywge1xuICAvLyAyMi4xLjIuMSBBcnJheS5mcm9tKGFycmF5TGlrZSwgbWFwZm4gPSB1bmRlZmluZWQsIHRoaXNBcmcgPSB1bmRlZmluZWQpXG4gIGZyb206IGZ1bmN0aW9uIGZyb20oYXJyYXlMaWtlIC8qICwgbWFwZm4gPSB1bmRlZmluZWQsIHRoaXNBcmcgPSB1bmRlZmluZWQgKi8pIHtcbiAgICB2YXIgTyA9IHRvT2JqZWN0KGFycmF5TGlrZSk7XG4gICAgdmFyIEMgPSB0eXBlb2YgdGhpcyA9PSAnZnVuY3Rpb24nID8gdGhpcyA6IEFycmF5O1xuICAgIHZhciBhTGVuID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgICB2YXIgbWFwZm4gPSBhTGVuID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZDtcbiAgICB2YXIgbWFwcGluZyA9IG1hcGZuICE9PSB1bmRlZmluZWQ7XG4gICAgdmFyIGluZGV4ID0gMDtcbiAgICB2YXIgaXRlckZuID0gZ2V0SXRlckZuKE8pO1xuICAgIHZhciBsZW5ndGgsIHJlc3VsdCwgc3RlcCwgaXRlcmF0b3I7XG4gICAgaWYgKG1hcHBpbmcpIG1hcGZuID0gY3R4KG1hcGZuLCBhTGVuID4gMiA/IGFyZ3VtZW50c1syXSA6IHVuZGVmaW5lZCwgMik7XG4gICAgLy8gaWYgb2JqZWN0IGlzbid0IGl0ZXJhYmxlIG9yIGl0J3MgYXJyYXkgd2l0aCBkZWZhdWx0IGl0ZXJhdG9yIC0gdXNlIHNpbXBsZSBjYXNlXG4gICAgaWYgKGl0ZXJGbiAhPSB1bmRlZmluZWQgJiYgIShDID09IEFycmF5ICYmIGlzQXJyYXlJdGVyKGl0ZXJGbikpKSB7XG4gICAgICBmb3IgKGl0ZXJhdG9yID0gaXRlckZuLmNhbGwoTyksIHJlc3VsdCA9IG5ldyBDKCk7ICEoc3RlcCA9IGl0ZXJhdG9yLm5leHQoKSkuZG9uZTsgaW5kZXgrKykge1xuICAgICAgICBjcmVhdGVQcm9wZXJ0eShyZXN1bHQsIGluZGV4LCBtYXBwaW5nID8gY2FsbChpdGVyYXRvciwgbWFwZm4sIFtzdGVwLnZhbHVlLCBpbmRleF0sIHRydWUpIDogc3RlcC52YWx1ZSk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGxlbmd0aCA9IHRvTGVuZ3RoKE8ubGVuZ3RoKTtcbiAgICAgIGZvciAocmVzdWx0ID0gbmV3IEMobGVuZ3RoKTsgbGVuZ3RoID4gaW5kZXg7IGluZGV4KyspIHtcbiAgICAgICAgY3JlYXRlUHJvcGVydHkocmVzdWx0LCBpbmRleCwgbWFwcGluZyA/IG1hcGZuKE9baW5kZXhdLCBpbmRleCkgOiBPW2luZGV4XSk7XG4gICAgICB9XG4gICAgfVxuICAgIHJlc3VsdC5sZW5ndGggPSBpbmRleDtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgY3JlYXRlUHJvcGVydHkgPSByZXF1aXJlKCcuL19jcmVhdGUtcHJvcGVydHknKTtcblxuLy8gV2ViS2l0IEFycmF5Lm9mIGlzbid0IGdlbmVyaWNcbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogcmVxdWlyZSgnLi9fZmFpbHMnKShmdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIEYoKSB7IC8qIGVtcHR5ICovIH1cbiAgcmV0dXJuICEoQXJyYXkub2YuY2FsbChGKSBpbnN0YW5jZW9mIEYpO1xufSksICdBcnJheScsIHtcbiAgLy8gMjIuMS4yLjMgQXJyYXkub2YoIC4uLml0ZW1zKVxuICBvZjogZnVuY3Rpb24gb2YoLyogLi4uYXJncyAqLykge1xuICAgIHZhciBpbmRleCA9IDA7XG4gICAgdmFyIGFMZW4gPSBhcmd1bWVudHMubGVuZ3RoO1xuICAgIHZhciByZXN1bHQgPSBuZXcgKHR5cGVvZiB0aGlzID09ICdmdW5jdGlvbicgPyB0aGlzIDogQXJyYXkpKGFMZW4pO1xuICAgIHdoaWxlIChhTGVuID4gaW5kZXgpIGNyZWF0ZVByb3BlcnR5KHJlc3VsdCwgaW5kZXgsIGFyZ3VtZW50c1tpbmRleCsrXSk7XG4gICAgcmVzdWx0Lmxlbmd0aCA9IGFMZW47XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG4vLyAyMi4xLjMuMTMgQXJyYXkucHJvdG90eXBlLmpvaW4oc2VwYXJhdG9yKVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciB0b0lPYmplY3QgPSByZXF1aXJlKCcuL190by1pb2JqZWN0Jyk7XG52YXIgYXJyYXlKb2luID0gW10uam9pbjtcblxuLy8gZmFsbGJhY2sgZm9yIG5vdCBhcnJheS1saWtlIHN0cmluZ3NcbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogKHJlcXVpcmUoJy4vX2lvYmplY3QnKSAhPSBPYmplY3QgfHwgIXJlcXVpcmUoJy4vX3N0cmljdC1tZXRob2QnKShhcnJheUpvaW4pKSwgJ0FycmF5Jywge1xuICBqb2luOiBmdW5jdGlvbiBqb2luKHNlcGFyYXRvcikge1xuICAgIHJldHVybiBhcnJheUpvaW4uY2FsbCh0b0lPYmplY3QodGhpcyksIHNlcGFyYXRvciA9PT0gdW5kZWZpbmVkID8gJywnIDogc2VwYXJhdG9yKTtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIGh0bWwgPSByZXF1aXJlKCcuL19odG1sJyk7XG52YXIgY29mID0gcmVxdWlyZSgnLi9fY29mJyk7XG52YXIgdG9BYnNvbHV0ZUluZGV4ID0gcmVxdWlyZSgnLi9fdG8tYWJzb2x1dGUtaW5kZXgnKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpO1xudmFyIGFycmF5U2xpY2UgPSBbXS5zbGljZTtcblxuLy8gZmFsbGJhY2sgZm9yIG5vdCBhcnJheS1saWtlIEVTMyBzdHJpbmdzIGFuZCBET00gb2JqZWN0c1xuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiByZXF1aXJlKCcuL19mYWlscycpKGZ1bmN0aW9uICgpIHtcbiAgaWYgKGh0bWwpIGFycmF5U2xpY2UuY2FsbChodG1sKTtcbn0pLCAnQXJyYXknLCB7XG4gIHNsaWNlOiBmdW5jdGlvbiBzbGljZShiZWdpbiwgZW5kKSB7XG4gICAgdmFyIGxlbiA9IHRvTGVuZ3RoKHRoaXMubGVuZ3RoKTtcbiAgICB2YXIga2xhc3MgPSBjb2YodGhpcyk7XG4gICAgZW5kID0gZW5kID09PSB1bmRlZmluZWQgPyBsZW4gOiBlbmQ7XG4gICAgaWYgKGtsYXNzID09ICdBcnJheScpIHJldHVybiBhcnJheVNsaWNlLmNhbGwodGhpcywgYmVnaW4sIGVuZCk7XG4gICAgdmFyIHN0YXJ0ID0gdG9BYnNvbHV0ZUluZGV4KGJlZ2luLCBsZW4pO1xuICAgIHZhciB1cFRvID0gdG9BYnNvbHV0ZUluZGV4KGVuZCwgbGVuKTtcbiAgICB2YXIgc2l6ZSA9IHRvTGVuZ3RoKHVwVG8gLSBzdGFydCk7XG4gICAgdmFyIGNsb25lZCA9IG5ldyBBcnJheShzaXplKTtcbiAgICB2YXIgaSA9IDA7XG4gICAgZm9yICg7IGkgPCBzaXplOyBpKyspIGNsb25lZFtpXSA9IGtsYXNzID09ICdTdHJpbmcnXG4gICAgICA/IHRoaXMuY2hhckF0KHN0YXJ0ICsgaSlcbiAgICAgIDogdGhpc1tzdGFydCArIGldO1xuICAgIHJldHVybiBjbG9uZWQ7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBhRnVuY3Rpb24gPSByZXF1aXJlKCcuL19hLWZ1bmN0aW9uJyk7XG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuL190by1vYmplY3QnKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4vX2ZhaWxzJyk7XG52YXIgJHNvcnQgPSBbXS5zb3J0O1xudmFyIHRlc3QgPSBbMSwgMiwgM107XG5cbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogKGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgLy8gSUU4LVxuICB0ZXN0LnNvcnQodW5kZWZpbmVkKTtcbn0pIHx8ICFmYWlscyhmdW5jdGlvbiAoKSB7XG4gIC8vIFY4IGJ1Z1xuICB0ZXN0LnNvcnQobnVsbCk7XG4gIC8vIE9sZCBXZWJLaXRcbn0pIHx8ICFyZXF1aXJlKCcuL19zdHJpY3QtbWV0aG9kJykoJHNvcnQpKSwgJ0FycmF5Jywge1xuICAvLyAyMi4xLjMuMjUgQXJyYXkucHJvdG90eXBlLnNvcnQoY29tcGFyZWZuKVxuICBzb3J0OiBmdW5jdGlvbiBzb3J0KGNvbXBhcmVmbikge1xuICAgIHJldHVybiBjb21wYXJlZm4gPT09IHVuZGVmaW5lZFxuICAgICAgPyAkc29ydC5jYWxsKHRvT2JqZWN0KHRoaXMpKVxuICAgICAgOiAkc29ydC5jYWxsKHRvT2JqZWN0KHRoaXMpLCBhRnVuY3Rpb24oY29tcGFyZWZuKSk7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciAkZm9yRWFjaCA9IHJlcXVpcmUoJy4vX2FycmF5LW1ldGhvZHMnKSgwKTtcbnZhciBTVFJJQ1QgPSByZXF1aXJlKCcuL19zdHJpY3QtbWV0aG9kJykoW10uZm9yRWFjaCwgdHJ1ZSk7XG5cbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogIVNUUklDVCwgJ0FycmF5Jywge1xuICAvLyAyMi4xLjMuMTAgLyAxNS40LjQuMTggQXJyYXkucHJvdG90eXBlLmZvckVhY2goY2FsbGJhY2tmbiBbLCB0aGlzQXJnXSlcbiAgZm9yRWFjaDogZnVuY3Rpb24gZm9yRWFjaChjYWxsYmFja2ZuIC8qICwgdGhpc0FyZyAqLykge1xuICAgIHJldHVybiAkZm9yRWFjaCh0aGlzLCBjYWxsYmFja2ZuLCBhcmd1bWVudHNbMV0pO1xuICB9XG59KTtcbiIsInZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xudmFyIGlzQXJyYXkgPSByZXF1aXJlKCcuL19pcy1hcnJheScpO1xudmFyIFNQRUNJRVMgPSByZXF1aXJlKCcuL193a3MnKSgnc3BlY2llcycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChvcmlnaW5hbCkge1xuICB2YXIgQztcbiAgaWYgKGlzQXJyYXkob3JpZ2luYWwpKSB7XG4gICAgQyA9IG9yaWdpbmFsLmNvbnN0cnVjdG9yO1xuICAgIC8vIGNyb3NzLXJlYWxtIGZhbGxiYWNrXG4gICAgaWYgKHR5cGVvZiBDID09ICdmdW5jdGlvbicgJiYgKEMgPT09IEFycmF5IHx8IGlzQXJyYXkoQy5wcm90b3R5cGUpKSkgQyA9IHVuZGVmaW5lZDtcbiAgICBpZiAoaXNPYmplY3QoQykpIHtcbiAgICAgIEMgPSBDW1NQRUNJRVNdO1xuICAgICAgaWYgKEMgPT09IG51bGwpIEMgPSB1bmRlZmluZWQ7XG4gICAgfVxuICB9IHJldHVybiBDID09PSB1bmRlZmluZWQgPyBBcnJheSA6IEM7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciAkbWFwID0gcmVxdWlyZSgnLi9fYXJyYXktbWV0aG9kcycpKDEpO1xuXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqICFyZXF1aXJlKCcuL19zdHJpY3QtbWV0aG9kJykoW10ubWFwLCB0cnVlKSwgJ0FycmF5Jywge1xuICAvLyAyMi4xLjMuMTUgLyAxNS40LjQuMTkgQXJyYXkucHJvdG90eXBlLm1hcChjYWxsYmFja2ZuIFssIHRoaXNBcmddKVxuICBtYXA6IGZ1bmN0aW9uIG1hcChjYWxsYmFja2ZuIC8qICwgdGhpc0FyZyAqLykge1xuICAgIHJldHVybiAkbWFwKHRoaXMsIGNhbGxiYWNrZm4sIGFyZ3VtZW50c1sxXSk7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciAkZmlsdGVyID0gcmVxdWlyZSgnLi9fYXJyYXktbWV0aG9kcycpKDIpO1xuXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqICFyZXF1aXJlKCcuL19zdHJpY3QtbWV0aG9kJykoW10uZmlsdGVyLCB0cnVlKSwgJ0FycmF5Jywge1xuICAvLyAyMi4xLjMuNyAvIDE1LjQuNC4yMCBBcnJheS5wcm90b3R5cGUuZmlsdGVyKGNhbGxiYWNrZm4gWywgdGhpc0FyZ10pXG4gIGZpbHRlcjogZnVuY3Rpb24gZmlsdGVyKGNhbGxiYWNrZm4gLyogLCB0aGlzQXJnICovKSB7XG4gICAgcmV0dXJuICRmaWx0ZXIodGhpcywgY2FsbGJhY2tmbiwgYXJndW1lbnRzWzFdKTtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyICRzb21lID0gcmVxdWlyZSgnLi9fYXJyYXktbWV0aG9kcycpKDMpO1xuXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqICFyZXF1aXJlKCcuL19zdHJpY3QtbWV0aG9kJykoW10uc29tZSwgdHJ1ZSksICdBcnJheScsIHtcbiAgLy8gMjIuMS4zLjIzIC8gMTUuNC40LjE3IEFycmF5LnByb3RvdHlwZS5zb21lKGNhbGxiYWNrZm4gWywgdGhpc0FyZ10pXG4gIHNvbWU6IGZ1bmN0aW9uIHNvbWUoY2FsbGJhY2tmbiAvKiAsIHRoaXNBcmcgKi8pIHtcbiAgICByZXR1cm4gJHNvbWUodGhpcywgY2FsbGJhY2tmbiwgYXJndW1lbnRzWzFdKTtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyICRldmVyeSA9IHJlcXVpcmUoJy4vX2FycmF5LW1ldGhvZHMnKSg0KTtcblxuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiAhcmVxdWlyZSgnLi9fc3RyaWN0LW1ldGhvZCcpKFtdLmV2ZXJ5LCB0cnVlKSwgJ0FycmF5Jywge1xuICAvLyAyMi4xLjMuNSAvIDE1LjQuNC4xNiBBcnJheS5wcm90b3R5cGUuZXZlcnkoY2FsbGJhY2tmbiBbLCB0aGlzQXJnXSlcbiAgZXZlcnk6IGZ1bmN0aW9uIGV2ZXJ5KGNhbGxiYWNrZm4gLyogLCB0aGlzQXJnICovKSB7XG4gICAgcmV0dXJuICRldmVyeSh0aGlzLCBjYWxsYmFja2ZuLCBhcmd1bWVudHNbMV0pO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgJHJlZHVjZSA9IHJlcXVpcmUoJy4vX2FycmF5LXJlZHVjZScpO1xuXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqICFyZXF1aXJlKCcuL19zdHJpY3QtbWV0aG9kJykoW10ucmVkdWNlLCB0cnVlKSwgJ0FycmF5Jywge1xuICAvLyAyMi4xLjMuMTggLyAxNS40LjQuMjEgQXJyYXkucHJvdG90eXBlLnJlZHVjZShjYWxsYmFja2ZuIFssIGluaXRpYWxWYWx1ZV0pXG4gIHJlZHVjZTogZnVuY3Rpb24gcmVkdWNlKGNhbGxiYWNrZm4gLyogLCBpbml0aWFsVmFsdWUgKi8pIHtcbiAgICByZXR1cm4gJHJlZHVjZSh0aGlzLCBjYWxsYmFja2ZuLCBhcmd1bWVudHMubGVuZ3RoLCBhcmd1bWVudHNbMV0sIGZhbHNlKTtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyICRyZWR1Y2UgPSByZXF1aXJlKCcuL19hcnJheS1yZWR1Y2UnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiAhcmVxdWlyZSgnLi9fc3RyaWN0LW1ldGhvZCcpKFtdLnJlZHVjZVJpZ2h0LCB0cnVlKSwgJ0FycmF5Jywge1xuICAvLyAyMi4xLjMuMTkgLyAxNS40LjQuMjIgQXJyYXkucHJvdG90eXBlLnJlZHVjZVJpZ2h0KGNhbGxiYWNrZm4gWywgaW5pdGlhbFZhbHVlXSlcbiAgcmVkdWNlUmlnaHQ6IGZ1bmN0aW9uIHJlZHVjZVJpZ2h0KGNhbGxiYWNrZm4gLyogLCBpbml0aWFsVmFsdWUgKi8pIHtcbiAgICByZXR1cm4gJHJlZHVjZSh0aGlzLCBjYWxsYmFja2ZuLCBhcmd1bWVudHMubGVuZ3RoLCBhcmd1bWVudHNbMV0sIHRydWUpO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgJGluZGV4T2YgPSByZXF1aXJlKCcuL19hcnJheS1pbmNsdWRlcycpKGZhbHNlKTtcbnZhciAkbmF0aXZlID0gW10uaW5kZXhPZjtcbnZhciBORUdBVElWRV9aRVJPID0gISEkbmF0aXZlICYmIDEgLyBbMV0uaW5kZXhPZigxLCAtMCkgPCAwO1xuXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqIChORUdBVElWRV9aRVJPIHx8ICFyZXF1aXJlKCcuL19zdHJpY3QtbWV0aG9kJykoJG5hdGl2ZSkpLCAnQXJyYXknLCB7XG4gIC8vIDIyLjEuMy4xMSAvIDE1LjQuNC4xNCBBcnJheS5wcm90b3R5cGUuaW5kZXhPZihzZWFyY2hFbGVtZW50IFssIGZyb21JbmRleF0pXG4gIGluZGV4T2Y6IGZ1bmN0aW9uIGluZGV4T2Yoc2VhcmNoRWxlbWVudCAvKiAsIGZyb21JbmRleCA9IDAgKi8pIHtcbiAgICByZXR1cm4gTkVHQVRJVkVfWkVST1xuICAgICAgLy8gY29udmVydCAtMCB0byArMFxuICAgICAgPyAkbmF0aXZlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgfHwgMFxuICAgICAgOiAkaW5kZXhPZih0aGlzLCBzZWFyY2hFbGVtZW50LCBhcmd1bWVudHNbMV0pO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgdG9JT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8taW9iamVjdCcpO1xudmFyIHRvSW50ZWdlciA9IHJlcXVpcmUoJy4vX3RvLWludGVnZXInKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpO1xudmFyICRuYXRpdmUgPSBbXS5sYXN0SW5kZXhPZjtcbnZhciBORUdBVElWRV9aRVJPID0gISEkbmF0aXZlICYmIDEgLyBbMV0ubGFzdEluZGV4T2YoMSwgLTApIDwgMDtcblxuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiAoTkVHQVRJVkVfWkVSTyB8fCAhcmVxdWlyZSgnLi9fc3RyaWN0LW1ldGhvZCcpKCRuYXRpdmUpKSwgJ0FycmF5Jywge1xuICAvLyAyMi4xLjMuMTQgLyAxNS40LjQuMTUgQXJyYXkucHJvdG90eXBlLmxhc3RJbmRleE9mKHNlYXJjaEVsZW1lbnQgWywgZnJvbUluZGV4XSlcbiAgbGFzdEluZGV4T2Y6IGZ1bmN0aW9uIGxhc3RJbmRleE9mKHNlYXJjaEVsZW1lbnQgLyogLCBmcm9tSW5kZXggPSBAWyotMV0gKi8pIHtcbiAgICAvLyBjb252ZXJ0IC0wIHRvICswXG4gICAgaWYgKE5FR0FUSVZFX1pFUk8pIHJldHVybiAkbmF0aXZlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgfHwgMDtcbiAgICB2YXIgTyA9IHRvSU9iamVjdCh0aGlzKTtcbiAgICB2YXIgbGVuZ3RoID0gdG9MZW5ndGgoTy5sZW5ndGgpO1xuICAgIHZhciBpbmRleCA9IGxlbmd0aCAtIDE7XG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPiAxKSBpbmRleCA9IE1hdGgubWluKGluZGV4LCB0b0ludGVnZXIoYXJndW1lbnRzWzFdKSk7XG4gICAgaWYgKGluZGV4IDwgMCkgaW5kZXggPSBsZW5ndGggKyBpbmRleDtcbiAgICBmb3IgKDtpbmRleCA+PSAwOyBpbmRleC0tKSBpZiAoaW5kZXggaW4gTykgaWYgKE9baW5kZXhdID09PSBzZWFyY2hFbGVtZW50KSByZXR1cm4gaW5kZXggfHwgMDtcbiAgICByZXR1cm4gLTE7XG4gIH1cbn0pO1xuIiwiLy8gMjIuMS4zLjMgQXJyYXkucHJvdG90eXBlLmNvcHlXaXRoaW4odGFyZ2V0LCBzdGFydCwgZW5kID0gdGhpcy5sZW5ndGgpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUCwgJ0FycmF5JywgeyBjb3B5V2l0aGluOiByZXF1aXJlKCcuL19hcnJheS1jb3B5LXdpdGhpbicpIH0pO1xuXG5yZXF1aXJlKCcuL19hZGQtdG8tdW5zY29wYWJsZXMnKSgnY29weVdpdGhpbicpO1xuIiwiLy8gMjIuMS4zLjYgQXJyYXkucHJvdG90eXBlLmZpbGwodmFsdWUsIHN0YXJ0ID0gMCwgZW5kID0gdGhpcy5sZW5ndGgpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUCwgJ0FycmF5JywgeyBmaWxsOiByZXF1aXJlKCcuL19hcnJheS1maWxsJykgfSk7XG5cbnJlcXVpcmUoJy4vX2FkZC10by11bnNjb3BhYmxlcycpKCdmaWxsJyk7XG4iLCIndXNlIHN0cmljdCc7XG4vLyAyMi4xLjMuOCBBcnJheS5wcm90b3R5cGUuZmluZChwcmVkaWNhdGUsIHRoaXNBcmcgPSB1bmRlZmluZWQpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyICRmaW5kID0gcmVxdWlyZSgnLi9fYXJyYXktbWV0aG9kcycpKDUpO1xudmFyIEtFWSA9ICdmaW5kJztcbnZhciBmb3JjZWQgPSB0cnVlO1xuLy8gU2hvdWxkbid0IHNraXAgaG9sZXNcbmlmIChLRVkgaW4gW10pIEFycmF5KDEpW0tFWV0oZnVuY3Rpb24gKCkgeyBmb3JjZWQgPSBmYWxzZTsgfSk7XG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqIGZvcmNlZCwgJ0FycmF5Jywge1xuICBmaW5kOiBmdW5jdGlvbiBmaW5kKGNhbGxiYWNrZm4gLyogLCB0aGF0ID0gdW5kZWZpbmVkICovKSB7XG4gICAgcmV0dXJuICRmaW5kKHRoaXMsIGNhbGxiYWNrZm4sIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKTtcbiAgfVxufSk7XG5yZXF1aXJlKCcuL19hZGQtdG8tdW5zY29wYWJsZXMnKShLRVkpO1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gMjIuMS4zLjkgQXJyYXkucHJvdG90eXBlLmZpbmRJbmRleChwcmVkaWNhdGUsIHRoaXNBcmcgPSB1bmRlZmluZWQpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyICRmaW5kID0gcmVxdWlyZSgnLi9fYXJyYXktbWV0aG9kcycpKDYpO1xudmFyIEtFWSA9ICdmaW5kSW5kZXgnO1xudmFyIGZvcmNlZCA9IHRydWU7XG4vLyBTaG91bGRuJ3Qgc2tpcCBob2xlc1xuaWYgKEtFWSBpbiBbXSkgQXJyYXkoMSlbS0VZXShmdW5jdGlvbiAoKSB7IGZvcmNlZCA9IGZhbHNlOyB9KTtcbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogZm9yY2VkLCAnQXJyYXknLCB7XG4gIGZpbmRJbmRleDogZnVuY3Rpb24gZmluZEluZGV4KGNhbGxiYWNrZm4gLyogLCB0aGF0ID0gdW5kZWZpbmVkICovKSB7XG4gICAgcmV0dXJuICRmaW5kKHRoaXMsIGNhbGxiYWNrZm4sIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKTtcbiAgfVxufSk7XG5yZXF1aXJlKCcuL19hZGQtdG8tdW5zY29wYWJsZXMnKShLRVkpO1xuIiwicmVxdWlyZSgnLi9fc2V0LXNwZWNpZXMnKSgnQXJyYXknKTtcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuL19nbG9iYWwnKTtcbnZhciBpbmhlcml0SWZSZXF1aXJlZCA9IHJlcXVpcmUoJy4vX2luaGVyaXQtaWYtcmVxdWlyZWQnKTtcbnZhciBkUCA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpLmY7XG52YXIgZ09QTiA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BuJykuZjtcbnZhciBpc1JlZ0V4cCA9IHJlcXVpcmUoJy4vX2lzLXJlZ2V4cCcpO1xudmFyICRmbGFncyA9IHJlcXVpcmUoJy4vX2ZsYWdzJyk7XG52YXIgJFJlZ0V4cCA9IGdsb2JhbC5SZWdFeHA7XG52YXIgQmFzZSA9ICRSZWdFeHA7XG52YXIgcHJvdG8gPSAkUmVnRXhwLnByb3RvdHlwZTtcbnZhciByZTEgPSAvYS9nO1xudmFyIHJlMiA9IC9hL2c7XG4vLyBcIm5ld1wiIGNyZWF0ZXMgYSBuZXcgb2JqZWN0LCBvbGQgd2Via2l0IGJ1Z2d5IGhlcmVcbnZhciBDT1JSRUNUX05FVyA9IG5ldyAkUmVnRXhwKHJlMSkgIT09IHJlMTtcblxuaWYgKHJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJykgJiYgKCFDT1JSRUNUX05FVyB8fCByZXF1aXJlKCcuL19mYWlscycpKGZ1bmN0aW9uICgpIHtcbiAgcmUyW3JlcXVpcmUoJy4vX3drcycpKCdtYXRjaCcpXSA9IGZhbHNlO1xuICAvLyBSZWdFeHAgY29uc3RydWN0b3IgY2FuIGFsdGVyIGZsYWdzIGFuZCBJc1JlZ0V4cCB3b3JrcyBjb3JyZWN0IHdpdGggQEBtYXRjaFxuICByZXR1cm4gJFJlZ0V4cChyZTEpICE9IHJlMSB8fCAkUmVnRXhwKHJlMikgPT0gcmUyIHx8ICRSZWdFeHAocmUxLCAnaScpICE9ICcvYS9pJztcbn0pKSkge1xuICAkUmVnRXhwID0gZnVuY3Rpb24gUmVnRXhwKHAsIGYpIHtcbiAgICB2YXIgdGlSRSA9IHRoaXMgaW5zdGFuY2VvZiAkUmVnRXhwO1xuICAgIHZhciBwaVJFID0gaXNSZWdFeHAocCk7XG4gICAgdmFyIGZpVSA9IGYgPT09IHVuZGVmaW5lZDtcbiAgICByZXR1cm4gIXRpUkUgJiYgcGlSRSAmJiBwLmNvbnN0cnVjdG9yID09PSAkUmVnRXhwICYmIGZpVSA/IHBcbiAgICAgIDogaW5oZXJpdElmUmVxdWlyZWQoQ09SUkVDVF9ORVdcbiAgICAgICAgPyBuZXcgQmFzZShwaVJFICYmICFmaVUgPyBwLnNvdXJjZSA6IHAsIGYpXG4gICAgICAgIDogQmFzZSgocGlSRSA9IHAgaW5zdGFuY2VvZiAkUmVnRXhwKSA/IHAuc291cmNlIDogcCwgcGlSRSAmJiBmaVUgPyAkZmxhZ3MuY2FsbChwKSA6IGYpXG4gICAgICAsIHRpUkUgPyB0aGlzIDogcHJvdG8sICRSZWdFeHApO1xuICB9O1xuICB2YXIgcHJveHkgPSBmdW5jdGlvbiAoa2V5KSB7XG4gICAga2V5IGluICRSZWdFeHAgfHwgZFAoJFJlZ0V4cCwga2V5LCB7XG4gICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIEJhc2Vba2V5XTsgfSxcbiAgICAgIHNldDogZnVuY3Rpb24gKGl0KSB7IEJhc2Vba2V5XSA9IGl0OyB9XG4gICAgfSk7XG4gIH07XG4gIGZvciAodmFyIGtleXMgPSBnT1BOKEJhc2UpLCBpID0gMDsga2V5cy5sZW5ndGggPiBpOykgcHJveHkoa2V5c1tpKytdKTtcbiAgcHJvdG8uY29uc3RydWN0b3IgPSAkUmVnRXhwO1xuICAkUmVnRXhwLnByb3RvdHlwZSA9IHByb3RvO1xuICByZXF1aXJlKCcuL19yZWRlZmluZScpKGdsb2JhbCwgJ1JlZ0V4cCcsICRSZWdFeHApO1xufVxuXG5yZXF1aXJlKCcuL19zZXQtc3BlY2llcycpKCdSZWdFeHAnKTtcbiIsIid1c2Ugc3RyaWN0JztcbnJlcXVpcmUoJy4vZXM2LnJlZ2V4cC5mbGFncycpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgJGZsYWdzID0gcmVxdWlyZSgnLi9fZmxhZ3MnKTtcbnZhciBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJyk7XG52YXIgVE9fU1RSSU5HID0gJ3RvU3RyaW5nJztcbnZhciAkdG9TdHJpbmcgPSAvLi9bVE9fU1RSSU5HXTtcblxudmFyIGRlZmluZSA9IGZ1bmN0aW9uIChmbikge1xuICByZXF1aXJlKCcuL19yZWRlZmluZScpKFJlZ0V4cC5wcm90b3R5cGUsIFRPX1NUUklORywgZm4sIHRydWUpO1xufTtcblxuLy8gMjEuMi41LjE0IFJlZ0V4cC5wcm90b3R5cGUudG9TdHJpbmcoKVxuaWYgKHJlcXVpcmUoJy4vX2ZhaWxzJykoZnVuY3Rpb24gKCkgeyByZXR1cm4gJHRvU3RyaW5nLmNhbGwoeyBzb3VyY2U6ICdhJywgZmxhZ3M6ICdiJyB9KSAhPSAnL2EvYic7IH0pKSB7XG4gIGRlZmluZShmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgICB2YXIgUiA9IGFuT2JqZWN0KHRoaXMpO1xuICAgIHJldHVybiAnLycuY29uY2F0KFIuc291cmNlLCAnLycsXG4gICAgICAnZmxhZ3MnIGluIFIgPyBSLmZsYWdzIDogIURFU0NSSVBUT1JTICYmIFIgaW5zdGFuY2VvZiBSZWdFeHAgPyAkZmxhZ3MuY2FsbChSKSA6IHVuZGVmaW5lZCk7XG4gIH0pO1xuLy8gRkY0NC0gUmVnRXhwI3RvU3RyaW5nIGhhcyBhIHdyb25nIG5hbWVcbn0gZWxzZSBpZiAoJHRvU3RyaW5nLm5hbWUgIT0gVE9fU1RSSU5HKSB7XG4gIGRlZmluZShmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgICByZXR1cm4gJHRvU3RyaW5nLmNhbGwodGhpcyk7XG4gIH0pO1xufVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpO1xudmFyIGFkdmFuY2VTdHJpbmdJbmRleCA9IHJlcXVpcmUoJy4vX2FkdmFuY2Utc3RyaW5nLWluZGV4Jyk7XG52YXIgcmVnRXhwRXhlYyA9IHJlcXVpcmUoJy4vX3JlZ2V4cC1leGVjLWFic3RyYWN0Jyk7XG5cbi8vIEBAbWF0Y2ggbG9naWNcbnJlcXVpcmUoJy4vX2ZpeC1yZS13a3MnKSgnbWF0Y2gnLCAxLCBmdW5jdGlvbiAoZGVmaW5lZCwgTUFUQ0gsICRtYXRjaCwgbWF5YmVDYWxsTmF0aXZlKSB7XG4gIHJldHVybiBbXG4gICAgLy8gYFN0cmluZy5wcm90b3R5cGUubWF0Y2hgIG1ldGhvZFxuICAgIC8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLXN0cmluZy5wcm90b3R5cGUubWF0Y2hcbiAgICBmdW5jdGlvbiBtYXRjaChyZWdleHApIHtcbiAgICAgIHZhciBPID0gZGVmaW5lZCh0aGlzKTtcbiAgICAgIHZhciBmbiA9IHJlZ2V4cCA9PSB1bmRlZmluZWQgPyB1bmRlZmluZWQgOiByZWdleHBbTUFUQ0hdO1xuICAgICAgcmV0dXJuIGZuICE9PSB1bmRlZmluZWQgPyBmbi5jYWxsKHJlZ2V4cCwgTykgOiBuZXcgUmVnRXhwKHJlZ2V4cClbTUFUQ0hdKFN0cmluZyhPKSk7XG4gICAgfSxcbiAgICAvLyBgUmVnRXhwLnByb3RvdHlwZVtAQG1hdGNoXWAgbWV0aG9kXG4gICAgLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtcmVnZXhwLnByb3RvdHlwZS1AQG1hdGNoXG4gICAgZnVuY3Rpb24gKHJlZ2V4cCkge1xuICAgICAgdmFyIHJlcyA9IG1heWJlQ2FsbE5hdGl2ZSgkbWF0Y2gsIHJlZ2V4cCwgdGhpcyk7XG4gICAgICBpZiAocmVzLmRvbmUpIHJldHVybiByZXMudmFsdWU7XG4gICAgICB2YXIgcnggPSBhbk9iamVjdChyZWdleHApO1xuICAgICAgdmFyIFMgPSBTdHJpbmcodGhpcyk7XG4gICAgICBpZiAoIXJ4Lmdsb2JhbCkgcmV0dXJuIHJlZ0V4cEV4ZWMocngsIFMpO1xuICAgICAgdmFyIGZ1bGxVbmljb2RlID0gcngudW5pY29kZTtcbiAgICAgIHJ4Lmxhc3RJbmRleCA9IDA7XG4gICAgICB2YXIgQSA9IFtdO1xuICAgICAgdmFyIG4gPSAwO1xuICAgICAgdmFyIHJlc3VsdDtcbiAgICAgIHdoaWxlICgocmVzdWx0ID0gcmVnRXhwRXhlYyhyeCwgUykpICE9PSBudWxsKSB7XG4gICAgICAgIHZhciBtYXRjaFN0ciA9IFN0cmluZyhyZXN1bHRbMF0pO1xuICAgICAgICBBW25dID0gbWF0Y2hTdHI7XG4gICAgICAgIGlmIChtYXRjaFN0ciA9PT0gJycpIHJ4Lmxhc3RJbmRleCA9IGFkdmFuY2VTdHJpbmdJbmRleChTLCB0b0xlbmd0aChyeC5sYXN0SW5kZXgpLCBmdWxsVW5pY29kZSk7XG4gICAgICAgIG4rKztcbiAgICAgIH1cbiAgICAgIHJldHVybiBuID09PSAwID8gbnVsbCA6IEE7XG4gICAgfVxuICBdO1xufSk7XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8tb2JqZWN0Jyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuL190by1sZW5ndGgnKTtcbnZhciB0b0ludGVnZXIgPSByZXF1aXJlKCcuL190by1pbnRlZ2VyJyk7XG52YXIgYWR2YW5jZVN0cmluZ0luZGV4ID0gcmVxdWlyZSgnLi9fYWR2YW5jZS1zdHJpbmctaW5kZXgnKTtcbnZhciByZWdFeHBFeGVjID0gcmVxdWlyZSgnLi9fcmVnZXhwLWV4ZWMtYWJzdHJhY3QnKTtcbnZhciBtYXggPSBNYXRoLm1heDtcbnZhciBtaW4gPSBNYXRoLm1pbjtcbnZhciBmbG9vciA9IE1hdGguZmxvb3I7XG52YXIgU1VCU1RJVFVUSU9OX1NZTUJPTFMgPSAvXFwkKFskJmAnXXxcXGRcXGQ/fDxbXj5dKj4pL2c7XG52YXIgU1VCU1RJVFVUSU9OX1NZTUJPTFNfTk9fTkFNRUQgPSAvXFwkKFskJmAnXXxcXGRcXGQ/KS9nO1xuXG52YXIgbWF5YmVUb1N0cmluZyA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gaXQgPT09IHVuZGVmaW5lZCA/IGl0IDogU3RyaW5nKGl0KTtcbn07XG5cbi8vIEBAcmVwbGFjZSBsb2dpY1xucmVxdWlyZSgnLi9fZml4LXJlLXdrcycpKCdyZXBsYWNlJywgMiwgZnVuY3Rpb24gKGRlZmluZWQsIFJFUExBQ0UsICRyZXBsYWNlLCBtYXliZUNhbGxOYXRpdmUpIHtcbiAgcmV0dXJuIFtcbiAgICAvLyBgU3RyaW5nLnByb3RvdHlwZS5yZXBsYWNlYCBtZXRob2RcbiAgICAvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1zdHJpbmcucHJvdG90eXBlLnJlcGxhY2VcbiAgICBmdW5jdGlvbiByZXBsYWNlKHNlYXJjaFZhbHVlLCByZXBsYWNlVmFsdWUpIHtcbiAgICAgIHZhciBPID0gZGVmaW5lZCh0aGlzKTtcbiAgICAgIHZhciBmbiA9IHNlYXJjaFZhbHVlID09IHVuZGVmaW5lZCA/IHVuZGVmaW5lZCA6IHNlYXJjaFZhbHVlW1JFUExBQ0VdO1xuICAgICAgcmV0dXJuIGZuICE9PSB1bmRlZmluZWRcbiAgICAgICAgPyBmbi5jYWxsKHNlYXJjaFZhbHVlLCBPLCByZXBsYWNlVmFsdWUpXG4gICAgICAgIDogJHJlcGxhY2UuY2FsbChTdHJpbmcoTyksIHNlYXJjaFZhbHVlLCByZXBsYWNlVmFsdWUpO1xuICAgIH0sXG4gICAgLy8gYFJlZ0V4cC5wcm90b3R5cGVbQEByZXBsYWNlXWAgbWV0aG9kXG4gICAgLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtcmVnZXhwLnByb3RvdHlwZS1AQHJlcGxhY2VcbiAgICBmdW5jdGlvbiAocmVnZXhwLCByZXBsYWNlVmFsdWUpIHtcbiAgICAgIHZhciByZXMgPSBtYXliZUNhbGxOYXRpdmUoJHJlcGxhY2UsIHJlZ2V4cCwgdGhpcywgcmVwbGFjZVZhbHVlKTtcbiAgICAgIGlmIChyZXMuZG9uZSkgcmV0dXJuIHJlcy52YWx1ZTtcblxuICAgICAgdmFyIHJ4ID0gYW5PYmplY3QocmVnZXhwKTtcbiAgICAgIHZhciBTID0gU3RyaW5nKHRoaXMpO1xuICAgICAgdmFyIGZ1bmN0aW9uYWxSZXBsYWNlID0gdHlwZW9mIHJlcGxhY2VWYWx1ZSA9PT0gJ2Z1bmN0aW9uJztcbiAgICAgIGlmICghZnVuY3Rpb25hbFJlcGxhY2UpIHJlcGxhY2VWYWx1ZSA9IFN0cmluZyhyZXBsYWNlVmFsdWUpO1xuICAgICAgdmFyIGdsb2JhbCA9IHJ4Lmdsb2JhbDtcbiAgICAgIGlmIChnbG9iYWwpIHtcbiAgICAgICAgdmFyIGZ1bGxVbmljb2RlID0gcngudW5pY29kZTtcbiAgICAgICAgcngubGFzdEluZGV4ID0gMDtcbiAgICAgIH1cbiAgICAgIHZhciByZXN1bHRzID0gW107XG4gICAgICB3aGlsZSAodHJ1ZSkge1xuICAgICAgICB2YXIgcmVzdWx0ID0gcmVnRXhwRXhlYyhyeCwgUyk7XG4gICAgICAgIGlmIChyZXN1bHQgPT09IG51bGwpIGJyZWFrO1xuICAgICAgICByZXN1bHRzLnB1c2gocmVzdWx0KTtcbiAgICAgICAgaWYgKCFnbG9iYWwpIGJyZWFrO1xuICAgICAgICB2YXIgbWF0Y2hTdHIgPSBTdHJpbmcocmVzdWx0WzBdKTtcbiAgICAgICAgaWYgKG1hdGNoU3RyID09PSAnJykgcngubGFzdEluZGV4ID0gYWR2YW5jZVN0cmluZ0luZGV4KFMsIHRvTGVuZ3RoKHJ4Lmxhc3RJbmRleCksIGZ1bGxVbmljb2RlKTtcbiAgICAgIH1cbiAgICAgIHZhciBhY2N1bXVsYXRlZFJlc3VsdCA9ICcnO1xuICAgICAgdmFyIG5leHRTb3VyY2VQb3NpdGlvbiA9IDA7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHJlc3VsdHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgcmVzdWx0ID0gcmVzdWx0c1tpXTtcbiAgICAgICAgdmFyIG1hdGNoZWQgPSBTdHJpbmcocmVzdWx0WzBdKTtcbiAgICAgICAgdmFyIHBvc2l0aW9uID0gbWF4KG1pbih0b0ludGVnZXIocmVzdWx0LmluZGV4KSwgUy5sZW5ndGgpLCAwKTtcbiAgICAgICAgdmFyIGNhcHR1cmVzID0gW107XG4gICAgICAgIC8vIE5PVEU6IFRoaXMgaXMgZXF1aXZhbGVudCB0b1xuICAgICAgICAvLyAgIGNhcHR1cmVzID0gcmVzdWx0LnNsaWNlKDEpLm1hcChtYXliZVRvU3RyaW5nKVxuICAgICAgICAvLyBidXQgZm9yIHNvbWUgcmVhc29uIGBuYXRpdmVTbGljZS5jYWxsKHJlc3VsdCwgMSwgcmVzdWx0Lmxlbmd0aClgIChjYWxsZWQgaW5cbiAgICAgICAgLy8gdGhlIHNsaWNlIHBvbHlmaWxsIHdoZW4gc2xpY2luZyBuYXRpdmUgYXJyYXlzKSBcImRvZXNuJ3Qgd29ya1wiIGluIHNhZmFyaSA5IGFuZFxuICAgICAgICAvLyBjYXVzZXMgYSBjcmFzaCAoaHR0cHM6Ly9wYXN0ZWJpbi5jb20vTjIxUXplUUEpIHdoZW4gdHJ5aW5nIHRvIGRlYnVnIGl0LlxuICAgICAgICBmb3IgKHZhciBqID0gMTsgaiA8IHJlc3VsdC5sZW5ndGg7IGorKykgY2FwdHVyZXMucHVzaChtYXliZVRvU3RyaW5nKHJlc3VsdFtqXSkpO1xuICAgICAgICB2YXIgbmFtZWRDYXB0dXJlcyA9IHJlc3VsdC5ncm91cHM7XG4gICAgICAgIGlmIChmdW5jdGlvbmFsUmVwbGFjZSkge1xuICAgICAgICAgIHZhciByZXBsYWNlckFyZ3MgPSBbbWF0Y2hlZF0uY29uY2F0KGNhcHR1cmVzLCBwb3NpdGlvbiwgUyk7XG4gICAgICAgICAgaWYgKG5hbWVkQ2FwdHVyZXMgIT09IHVuZGVmaW5lZCkgcmVwbGFjZXJBcmdzLnB1c2gobmFtZWRDYXB0dXJlcyk7XG4gICAgICAgICAgdmFyIHJlcGxhY2VtZW50ID0gU3RyaW5nKHJlcGxhY2VWYWx1ZS5hcHBseSh1bmRlZmluZWQsIHJlcGxhY2VyQXJncykpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJlcGxhY2VtZW50ID0gZ2V0U3Vic3RpdHV0aW9uKG1hdGNoZWQsIFMsIHBvc2l0aW9uLCBjYXB0dXJlcywgbmFtZWRDYXB0dXJlcywgcmVwbGFjZVZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAocG9zaXRpb24gPj0gbmV4dFNvdXJjZVBvc2l0aW9uKSB7XG4gICAgICAgICAgYWNjdW11bGF0ZWRSZXN1bHQgKz0gUy5zbGljZShuZXh0U291cmNlUG9zaXRpb24sIHBvc2l0aW9uKSArIHJlcGxhY2VtZW50O1xuICAgICAgICAgIG5leHRTb3VyY2VQb3NpdGlvbiA9IHBvc2l0aW9uICsgbWF0Y2hlZC5sZW5ndGg7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBhY2N1bXVsYXRlZFJlc3VsdCArIFMuc2xpY2UobmV4dFNvdXJjZVBvc2l0aW9uKTtcbiAgICB9XG4gIF07XG5cbiAgICAvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1nZXRzdWJzdGl0dXRpb25cbiAgZnVuY3Rpb24gZ2V0U3Vic3RpdHV0aW9uKG1hdGNoZWQsIHN0ciwgcG9zaXRpb24sIGNhcHR1cmVzLCBuYW1lZENhcHR1cmVzLCByZXBsYWNlbWVudCkge1xuICAgIHZhciB0YWlsUG9zID0gcG9zaXRpb24gKyBtYXRjaGVkLmxlbmd0aDtcbiAgICB2YXIgbSA9IGNhcHR1cmVzLmxlbmd0aDtcbiAgICB2YXIgc3ltYm9scyA9IFNVQlNUSVRVVElPTl9TWU1CT0xTX05PX05BTUVEO1xuICAgIGlmIChuYW1lZENhcHR1cmVzICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIG5hbWVkQ2FwdHVyZXMgPSB0b09iamVjdChuYW1lZENhcHR1cmVzKTtcbiAgICAgIHN5bWJvbHMgPSBTVUJTVElUVVRJT05fU1lNQk9MUztcbiAgICB9XG4gICAgcmV0dXJuICRyZXBsYWNlLmNhbGwocmVwbGFjZW1lbnQsIHN5bWJvbHMsIGZ1bmN0aW9uIChtYXRjaCwgY2gpIHtcbiAgICAgIHZhciBjYXB0dXJlO1xuICAgICAgc3dpdGNoIChjaC5jaGFyQXQoMCkpIHtcbiAgICAgICAgY2FzZSAnJCc6IHJldHVybiAnJCc7XG4gICAgICAgIGNhc2UgJyYnOiByZXR1cm4gbWF0Y2hlZDtcbiAgICAgICAgY2FzZSAnYCc6IHJldHVybiBzdHIuc2xpY2UoMCwgcG9zaXRpb24pO1xuICAgICAgICBjYXNlIFwiJ1wiOiByZXR1cm4gc3RyLnNsaWNlKHRhaWxQb3MpO1xuICAgICAgICBjYXNlICc8JzpcbiAgICAgICAgICBjYXB0dXJlID0gbmFtZWRDYXB0dXJlc1tjaC5zbGljZSgxLCAtMSldO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBkZWZhdWx0OiAvLyBcXGRcXGQ/XG4gICAgICAgICAgdmFyIG4gPSArY2g7XG4gICAgICAgICAgaWYgKG4gPT09IDApIHJldHVybiBtYXRjaDtcbiAgICAgICAgICBpZiAobiA+IG0pIHtcbiAgICAgICAgICAgIHZhciBmID0gZmxvb3IobiAvIDEwKTtcbiAgICAgICAgICAgIGlmIChmID09PSAwKSByZXR1cm4gbWF0Y2g7XG4gICAgICAgICAgICBpZiAoZiA8PSBtKSByZXR1cm4gY2FwdHVyZXNbZiAtIDFdID09PSB1bmRlZmluZWQgPyBjaC5jaGFyQXQoMSkgOiBjYXB0dXJlc1tmIC0gMV0gKyBjaC5jaGFyQXQoMSk7XG4gICAgICAgICAgICByZXR1cm4gbWF0Y2g7XG4gICAgICAgICAgfVxuICAgICAgICAgIGNhcHR1cmUgPSBjYXB0dXJlc1tuIC0gMV07XG4gICAgICB9XG4gICAgICByZXR1cm4gY2FwdHVyZSA9PT0gdW5kZWZpbmVkID8gJycgOiBjYXB0dXJlO1xuICAgIH0pO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgc2FtZVZhbHVlID0gcmVxdWlyZSgnLi9fc2FtZS12YWx1ZScpO1xudmFyIHJlZ0V4cEV4ZWMgPSByZXF1aXJlKCcuL19yZWdleHAtZXhlYy1hYnN0cmFjdCcpO1xuXG4vLyBAQHNlYXJjaCBsb2dpY1xucmVxdWlyZSgnLi9fZml4LXJlLXdrcycpKCdzZWFyY2gnLCAxLCBmdW5jdGlvbiAoZGVmaW5lZCwgU0VBUkNILCAkc2VhcmNoLCBtYXliZUNhbGxOYXRpdmUpIHtcbiAgcmV0dXJuIFtcbiAgICAvLyBgU3RyaW5nLnByb3RvdHlwZS5zZWFyY2hgIG1ldGhvZFxuICAgIC8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLXN0cmluZy5wcm90b3R5cGUuc2VhcmNoXG4gICAgZnVuY3Rpb24gc2VhcmNoKHJlZ2V4cCkge1xuICAgICAgdmFyIE8gPSBkZWZpbmVkKHRoaXMpO1xuICAgICAgdmFyIGZuID0gcmVnZXhwID09IHVuZGVmaW5lZCA/IHVuZGVmaW5lZCA6IHJlZ2V4cFtTRUFSQ0hdO1xuICAgICAgcmV0dXJuIGZuICE9PSB1bmRlZmluZWQgPyBmbi5jYWxsKHJlZ2V4cCwgTykgOiBuZXcgUmVnRXhwKHJlZ2V4cClbU0VBUkNIXShTdHJpbmcoTykpO1xuICAgIH0sXG4gICAgLy8gYFJlZ0V4cC5wcm90b3R5cGVbQEBzZWFyY2hdYCBtZXRob2RcbiAgICAvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1yZWdleHAucHJvdG90eXBlLUBAc2VhcmNoXG4gICAgZnVuY3Rpb24gKHJlZ2V4cCkge1xuICAgICAgdmFyIHJlcyA9IG1heWJlQ2FsbE5hdGl2ZSgkc2VhcmNoLCByZWdleHAsIHRoaXMpO1xuICAgICAgaWYgKHJlcy5kb25lKSByZXR1cm4gcmVzLnZhbHVlO1xuICAgICAgdmFyIHJ4ID0gYW5PYmplY3QocmVnZXhwKTtcbiAgICAgIHZhciBTID0gU3RyaW5nKHRoaXMpO1xuICAgICAgdmFyIHByZXZpb3VzTGFzdEluZGV4ID0gcngubGFzdEluZGV4O1xuICAgICAgaWYgKCFzYW1lVmFsdWUocHJldmlvdXNMYXN0SW5kZXgsIDApKSByeC5sYXN0SW5kZXggPSAwO1xuICAgICAgdmFyIHJlc3VsdCA9IHJlZ0V4cEV4ZWMocngsIFMpO1xuICAgICAgaWYgKCFzYW1lVmFsdWUocngubGFzdEluZGV4LCBwcmV2aW91c0xhc3RJbmRleCkpIHJ4Lmxhc3RJbmRleCA9IHByZXZpb3VzTGFzdEluZGV4O1xuICAgICAgcmV0dXJuIHJlc3VsdCA9PT0gbnVsbCA/IC0xIDogcmVzdWx0LmluZGV4O1xuICAgIH1cbiAgXTtcbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgaXNSZWdFeHAgPSByZXF1aXJlKCcuL19pcy1yZWdleHAnKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIHNwZWNpZXNDb25zdHJ1Y3RvciA9IHJlcXVpcmUoJy4vX3NwZWNpZXMtY29uc3RydWN0b3InKTtcbnZhciBhZHZhbmNlU3RyaW5nSW5kZXggPSByZXF1aXJlKCcuL19hZHZhbmNlLXN0cmluZy1pbmRleCcpO1xudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi9fdG8tbGVuZ3RoJyk7XG52YXIgY2FsbFJlZ0V4cEV4ZWMgPSByZXF1aXJlKCcuL19yZWdleHAtZXhlYy1hYnN0cmFjdCcpO1xudmFyIHJlZ2V4cEV4ZWMgPSByZXF1aXJlKCcuL19yZWdleHAtZXhlYycpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi9fZmFpbHMnKTtcbnZhciAkbWluID0gTWF0aC5taW47XG52YXIgJHB1c2ggPSBbXS5wdXNoO1xudmFyICRTUExJVCA9ICdzcGxpdCc7XG52YXIgTEVOR1RIID0gJ2xlbmd0aCc7XG52YXIgTEFTVF9JTkRFWCA9ICdsYXN0SW5kZXgnO1xudmFyIE1BWF9VSU5UMzIgPSAweGZmZmZmZmZmO1xuXG4vLyBiYWJlbC1taW5pZnkgdHJhbnNwaWxlcyBSZWdFeHAoJ3gnLCAneScpIC0+IC94L3kgYW5kIGl0IGNhdXNlcyBTeW50YXhFcnJvclxudmFyIFNVUFBPUlRTX1kgPSAhZmFpbHMoZnVuY3Rpb24gKCkgeyBSZWdFeHAoTUFYX1VJTlQzMiwgJ3knKTsgfSk7XG5cbi8vIEBAc3BsaXQgbG9naWNcbnJlcXVpcmUoJy4vX2ZpeC1yZS13a3MnKSgnc3BsaXQnLCAyLCBmdW5jdGlvbiAoZGVmaW5lZCwgU1BMSVQsICRzcGxpdCwgbWF5YmVDYWxsTmF0aXZlKSB7XG4gIHZhciBpbnRlcm5hbFNwbGl0O1xuICBpZiAoXG4gICAgJ2FiYmMnWyRTUExJVF0oLyhiKSovKVsxXSA9PSAnYycgfHxcbiAgICAndGVzdCdbJFNQTElUXSgvKD86KS8sIC0xKVtMRU5HVEhdICE9IDQgfHxcbiAgICAnYWInWyRTUExJVF0oLyg/OmFiKSovKVtMRU5HVEhdICE9IDIgfHxcbiAgICAnLidbJFNQTElUXSgvKC4/KSguPykvKVtMRU5HVEhdICE9IDQgfHxcbiAgICAnLidbJFNQTElUXSgvKCkoKS8pW0xFTkdUSF0gPiAxIHx8XG4gICAgJydbJFNQTElUXSgvLj8vKVtMRU5HVEhdXG4gICkge1xuICAgIC8vIGJhc2VkIG9uIGVzNS1zaGltIGltcGxlbWVudGF0aW9uLCBuZWVkIHRvIHJld29yayBpdFxuICAgIGludGVybmFsU3BsaXQgPSBmdW5jdGlvbiAoc2VwYXJhdG9yLCBsaW1pdCkge1xuICAgICAgdmFyIHN0cmluZyA9IFN0cmluZyh0aGlzKTtcbiAgICAgIGlmIChzZXBhcmF0b3IgPT09IHVuZGVmaW5lZCAmJiBsaW1pdCA9PT0gMCkgcmV0dXJuIFtdO1xuICAgICAgLy8gSWYgYHNlcGFyYXRvcmAgaXMgbm90IGEgcmVnZXgsIHVzZSBuYXRpdmUgc3BsaXRcbiAgICAgIGlmICghaXNSZWdFeHAoc2VwYXJhdG9yKSkgcmV0dXJuICRzcGxpdC5jYWxsKHN0cmluZywgc2VwYXJhdG9yLCBsaW1pdCk7XG4gICAgICB2YXIgb3V0cHV0ID0gW107XG4gICAgICB2YXIgZmxhZ3MgPSAoc2VwYXJhdG9yLmlnbm9yZUNhc2UgPyAnaScgOiAnJykgK1xuICAgICAgICAgICAgICAgICAgKHNlcGFyYXRvci5tdWx0aWxpbmUgPyAnbScgOiAnJykgK1xuICAgICAgICAgICAgICAgICAgKHNlcGFyYXRvci51bmljb2RlID8gJ3UnIDogJycpICtcbiAgICAgICAgICAgICAgICAgIChzZXBhcmF0b3Iuc3RpY2t5ID8gJ3knIDogJycpO1xuICAgICAgdmFyIGxhc3RMYXN0SW5kZXggPSAwO1xuICAgICAgdmFyIHNwbGl0TGltaXQgPSBsaW1pdCA9PT0gdW5kZWZpbmVkID8gTUFYX1VJTlQzMiA6IGxpbWl0ID4+PiAwO1xuICAgICAgLy8gTWFrZSBgZ2xvYmFsYCBhbmQgYXZvaWQgYGxhc3RJbmRleGAgaXNzdWVzIGJ5IHdvcmtpbmcgd2l0aCBhIGNvcHlcbiAgICAgIHZhciBzZXBhcmF0b3JDb3B5ID0gbmV3IFJlZ0V4cChzZXBhcmF0b3Iuc291cmNlLCBmbGFncyArICdnJyk7XG4gICAgICB2YXIgbWF0Y2gsIGxhc3RJbmRleCwgbGFzdExlbmd0aDtcbiAgICAgIHdoaWxlIChtYXRjaCA9IHJlZ2V4cEV4ZWMuY2FsbChzZXBhcmF0b3JDb3B5LCBzdHJpbmcpKSB7XG4gICAgICAgIGxhc3RJbmRleCA9IHNlcGFyYXRvckNvcHlbTEFTVF9JTkRFWF07XG4gICAgICAgIGlmIChsYXN0SW5kZXggPiBsYXN0TGFzdEluZGV4KSB7XG4gICAgICAgICAgb3V0cHV0LnB1c2goc3RyaW5nLnNsaWNlKGxhc3RMYXN0SW5kZXgsIG1hdGNoLmluZGV4KSk7XG4gICAgICAgICAgaWYgKG1hdGNoW0xFTkdUSF0gPiAxICYmIG1hdGNoLmluZGV4IDwgc3RyaW5nW0xFTkdUSF0pICRwdXNoLmFwcGx5KG91dHB1dCwgbWF0Y2guc2xpY2UoMSkpO1xuICAgICAgICAgIGxhc3RMZW5ndGggPSBtYXRjaFswXVtMRU5HVEhdO1xuICAgICAgICAgIGxhc3RMYXN0SW5kZXggPSBsYXN0SW5kZXg7XG4gICAgICAgICAgaWYgKG91dHB1dFtMRU5HVEhdID49IHNwbGl0TGltaXQpIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGlmIChzZXBhcmF0b3JDb3B5W0xBU1RfSU5ERVhdID09PSBtYXRjaC5pbmRleCkgc2VwYXJhdG9yQ29weVtMQVNUX0lOREVYXSsrOyAvLyBBdm9pZCBhbiBpbmZpbml0ZSBsb29wXG4gICAgICB9XG4gICAgICBpZiAobGFzdExhc3RJbmRleCA9PT0gc3RyaW5nW0xFTkdUSF0pIHtcbiAgICAgICAgaWYgKGxhc3RMZW5ndGggfHwgIXNlcGFyYXRvckNvcHkudGVzdCgnJykpIG91dHB1dC5wdXNoKCcnKTtcbiAgICAgIH0gZWxzZSBvdXRwdXQucHVzaChzdHJpbmcuc2xpY2UobGFzdExhc3RJbmRleCkpO1xuICAgICAgcmV0dXJuIG91dHB1dFtMRU5HVEhdID4gc3BsaXRMaW1pdCA/IG91dHB1dC5zbGljZSgwLCBzcGxpdExpbWl0KSA6IG91dHB1dDtcbiAgICB9O1xuICAvLyBDaGFrcmEsIFY4XG4gIH0gZWxzZSBpZiAoJzAnWyRTUExJVF0odW5kZWZpbmVkLCAwKVtMRU5HVEhdKSB7XG4gICAgaW50ZXJuYWxTcGxpdCA9IGZ1bmN0aW9uIChzZXBhcmF0b3IsIGxpbWl0KSB7XG4gICAgICByZXR1cm4gc2VwYXJhdG9yID09PSB1bmRlZmluZWQgJiYgbGltaXQgPT09IDAgPyBbXSA6ICRzcGxpdC5jYWxsKHRoaXMsIHNlcGFyYXRvciwgbGltaXQpO1xuICAgIH07XG4gIH0gZWxzZSB7XG4gICAgaW50ZXJuYWxTcGxpdCA9ICRzcGxpdDtcbiAgfVxuXG4gIHJldHVybiBbXG4gICAgLy8gYFN0cmluZy5wcm90b3R5cGUuc3BsaXRgIG1ldGhvZFxuICAgIC8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLXN0cmluZy5wcm90b3R5cGUuc3BsaXRcbiAgICBmdW5jdGlvbiBzcGxpdChzZXBhcmF0b3IsIGxpbWl0KSB7XG4gICAgICB2YXIgTyA9IGRlZmluZWQodGhpcyk7XG4gICAgICB2YXIgc3BsaXR0ZXIgPSBzZXBhcmF0b3IgPT0gdW5kZWZpbmVkID8gdW5kZWZpbmVkIDogc2VwYXJhdG9yW1NQTElUXTtcbiAgICAgIHJldHVybiBzcGxpdHRlciAhPT0gdW5kZWZpbmVkXG4gICAgICAgID8gc3BsaXR0ZXIuY2FsbChzZXBhcmF0b3IsIE8sIGxpbWl0KVxuICAgICAgICA6IGludGVybmFsU3BsaXQuY2FsbChTdHJpbmcoTyksIHNlcGFyYXRvciwgbGltaXQpO1xuICAgIH0sXG4gICAgLy8gYFJlZ0V4cC5wcm90b3R5cGVbQEBzcGxpdF1gIG1ldGhvZFxuICAgIC8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLXJlZ2V4cC5wcm90b3R5cGUtQEBzcGxpdFxuICAgIC8vXG4gICAgLy8gTk9URTogVGhpcyBjYW5ub3QgYmUgcHJvcGVybHkgcG9seWZpbGxlZCBpbiBlbmdpbmVzIHRoYXQgZG9uJ3Qgc3VwcG9ydFxuICAgIC8vIHRoZSAneScgZmxhZy5cbiAgICBmdW5jdGlvbiAocmVnZXhwLCBsaW1pdCkge1xuICAgICAgdmFyIHJlcyA9IG1heWJlQ2FsbE5hdGl2ZShpbnRlcm5hbFNwbGl0LCByZWdleHAsIHRoaXMsIGxpbWl0LCBpbnRlcm5hbFNwbGl0ICE9PSAkc3BsaXQpO1xuICAgICAgaWYgKHJlcy5kb25lKSByZXR1cm4gcmVzLnZhbHVlO1xuXG4gICAgICB2YXIgcnggPSBhbk9iamVjdChyZWdleHApO1xuICAgICAgdmFyIFMgPSBTdHJpbmcodGhpcyk7XG4gICAgICB2YXIgQyA9IHNwZWNpZXNDb25zdHJ1Y3RvcihyeCwgUmVnRXhwKTtcblxuICAgICAgdmFyIHVuaWNvZGVNYXRjaGluZyA9IHJ4LnVuaWNvZGU7XG4gICAgICB2YXIgZmxhZ3MgPSAocnguaWdub3JlQ2FzZSA/ICdpJyA6ICcnKSArXG4gICAgICAgICAgICAgICAgICAocngubXVsdGlsaW5lID8gJ20nIDogJycpICtcbiAgICAgICAgICAgICAgICAgIChyeC51bmljb2RlID8gJ3UnIDogJycpICtcbiAgICAgICAgICAgICAgICAgIChTVVBQT1JUU19ZID8gJ3knIDogJ2cnKTtcblxuICAgICAgLy8gXig/ICsgcnggKyApIGlzIG5lZWRlZCwgaW4gY29tYmluYXRpb24gd2l0aCBzb21lIFMgc2xpY2luZywgdG9cbiAgICAgIC8vIHNpbXVsYXRlIHRoZSAneScgZmxhZy5cbiAgICAgIHZhciBzcGxpdHRlciA9IG5ldyBDKFNVUFBPUlRTX1kgPyByeCA6ICdeKD86JyArIHJ4LnNvdXJjZSArICcpJywgZmxhZ3MpO1xuICAgICAgdmFyIGxpbSA9IGxpbWl0ID09PSB1bmRlZmluZWQgPyBNQVhfVUlOVDMyIDogbGltaXQgPj4+IDA7XG4gICAgICBpZiAobGltID09PSAwKSByZXR1cm4gW107XG4gICAgICBpZiAoUy5sZW5ndGggPT09IDApIHJldHVybiBjYWxsUmVnRXhwRXhlYyhzcGxpdHRlciwgUykgPT09IG51bGwgPyBbU10gOiBbXTtcbiAgICAgIHZhciBwID0gMDtcbiAgICAgIHZhciBxID0gMDtcbiAgICAgIHZhciBBID0gW107XG4gICAgICB3aGlsZSAocSA8IFMubGVuZ3RoKSB7XG4gICAgICAgIHNwbGl0dGVyLmxhc3RJbmRleCA9IFNVUFBPUlRTX1kgPyBxIDogMDtcbiAgICAgICAgdmFyIHogPSBjYWxsUmVnRXhwRXhlYyhzcGxpdHRlciwgU1VQUE9SVFNfWSA/IFMgOiBTLnNsaWNlKHEpKTtcbiAgICAgICAgdmFyIGU7XG4gICAgICAgIGlmIChcbiAgICAgICAgICB6ID09PSBudWxsIHx8XG4gICAgICAgICAgKGUgPSAkbWluKHRvTGVuZ3RoKHNwbGl0dGVyLmxhc3RJbmRleCArIChTVVBQT1JUU19ZID8gMCA6IHEpKSwgUy5sZW5ndGgpKSA9PT0gcFxuICAgICAgICApIHtcbiAgICAgICAgICBxID0gYWR2YW5jZVN0cmluZ0luZGV4KFMsIHEsIHVuaWNvZGVNYXRjaGluZyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgQS5wdXNoKFMuc2xpY2UocCwgcSkpO1xuICAgICAgICAgIGlmIChBLmxlbmd0aCA9PT0gbGltKSByZXR1cm4gQTtcbiAgICAgICAgICBmb3IgKHZhciBpID0gMTsgaSA8PSB6Lmxlbmd0aCAtIDE7IGkrKykge1xuICAgICAgICAgICAgQS5wdXNoKHpbaV0pO1xuICAgICAgICAgICAgaWYgKEEubGVuZ3RoID09PSBsaW0pIHJldHVybiBBO1xuICAgICAgICAgIH1cbiAgICAgICAgICBxID0gcCA9IGU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIEEucHVzaChTLnNsaWNlKHApKTtcbiAgICAgIHJldHVybiBBO1xuICAgIH1cbiAgXTtcbn0pO1xuIiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpO1xudmFyIG1hY3JvdGFzayA9IHJlcXVpcmUoJy4vX3Rhc2snKS5zZXQ7XG52YXIgT2JzZXJ2ZXIgPSBnbG9iYWwuTXV0YXRpb25PYnNlcnZlciB8fCBnbG9iYWwuV2ViS2l0TXV0YXRpb25PYnNlcnZlcjtcbnZhciBwcm9jZXNzID0gZ2xvYmFsLnByb2Nlc3M7XG52YXIgUHJvbWlzZSA9IGdsb2JhbC5Qcm9taXNlO1xudmFyIGlzTm9kZSA9IHJlcXVpcmUoJy4vX2NvZicpKHByb2Nlc3MpID09ICdwcm9jZXNzJztcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBoZWFkLCBsYXN0LCBub3RpZnk7XG5cbiAgdmFyIGZsdXNoID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBwYXJlbnQsIGZuO1xuICAgIGlmIChpc05vZGUgJiYgKHBhcmVudCA9IHByb2Nlc3MuZG9tYWluKSkgcGFyZW50LmV4aXQoKTtcbiAgICB3aGlsZSAoaGVhZCkge1xuICAgICAgZm4gPSBoZWFkLmZuO1xuICAgICAgaGVhZCA9IGhlYWQubmV4dDtcbiAgICAgIHRyeSB7XG4gICAgICAgIGZuKCk7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGlmIChoZWFkKSBub3RpZnkoKTtcbiAgICAgICAgZWxzZSBsYXN0ID0gdW5kZWZpbmVkO1xuICAgICAgICB0aHJvdyBlO1xuICAgICAgfVxuICAgIH0gbGFzdCA9IHVuZGVmaW5lZDtcbiAgICBpZiAocGFyZW50KSBwYXJlbnQuZW50ZXIoKTtcbiAgfTtcblxuICAvLyBOb2RlLmpzXG4gIGlmIChpc05vZGUpIHtcbiAgICBub3RpZnkgPSBmdW5jdGlvbiAoKSB7XG4gICAgICBwcm9jZXNzLm5leHRUaWNrKGZsdXNoKTtcbiAgICB9O1xuICAvLyBicm93c2VycyB3aXRoIE11dGF0aW9uT2JzZXJ2ZXIsIGV4Y2VwdCBpT1MgU2FmYXJpIC0gaHR0cHM6Ly9naXRodWIuY29tL3psb2lyb2NrL2NvcmUtanMvaXNzdWVzLzMzOVxuICB9IGVsc2UgaWYgKE9ic2VydmVyICYmICEoZ2xvYmFsLm5hdmlnYXRvciAmJiBnbG9iYWwubmF2aWdhdG9yLnN0YW5kYWxvbmUpKSB7XG4gICAgdmFyIHRvZ2dsZSA9IHRydWU7XG4gICAgdmFyIG5vZGUgPSBkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZSgnJyk7XG4gICAgbmV3IE9ic2VydmVyKGZsdXNoKS5vYnNlcnZlKG5vZGUsIHsgY2hhcmFjdGVyRGF0YTogdHJ1ZSB9KTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1uZXdcbiAgICBub3RpZnkgPSBmdW5jdGlvbiAoKSB7XG4gICAgICBub2RlLmRhdGEgPSB0b2dnbGUgPSAhdG9nZ2xlO1xuICAgIH07XG4gIC8vIGVudmlyb25tZW50cyB3aXRoIG1heWJlIG5vbi1jb21wbGV0ZWx5IGNvcnJlY3QsIGJ1dCBleGlzdGVudCBQcm9taXNlXG4gIH0gZWxzZSBpZiAoUHJvbWlzZSAmJiBQcm9taXNlLnJlc29sdmUpIHtcbiAgICAvLyBQcm9taXNlLnJlc29sdmUgd2l0aG91dCBhbiBhcmd1bWVudCB0aHJvd3MgYW4gZXJyb3IgaW4gTEcgV2ViT1MgMlxuICAgIHZhciBwcm9taXNlID0gUHJvbWlzZS5yZXNvbHZlKHVuZGVmaW5lZCk7XG4gICAgbm90aWZ5ID0gZnVuY3Rpb24gKCkge1xuICAgICAgcHJvbWlzZS50aGVuKGZsdXNoKTtcbiAgICB9O1xuICAvLyBmb3Igb3RoZXIgZW52aXJvbm1lbnRzIC0gbWFjcm90YXNrIGJhc2VkIG9uOlxuICAvLyAtIHNldEltbWVkaWF0ZVxuICAvLyAtIE1lc3NhZ2VDaGFubmVsXG4gIC8vIC0gd2luZG93LnBvc3RNZXNzYWdcbiAgLy8gLSBvbnJlYWR5c3RhdGVjaGFuZ2VcbiAgLy8gLSBzZXRUaW1lb3V0XG4gIH0gZWxzZSB7XG4gICAgbm90aWZ5ID0gZnVuY3Rpb24gKCkge1xuICAgICAgLy8gc3RyYW5nZSBJRSArIHdlYnBhY2sgZGV2IHNlcnZlciBidWcgLSB1c2UgLmNhbGwoZ2xvYmFsKVxuICAgICAgbWFjcm90YXNrLmNhbGwoZ2xvYmFsLCBmbHVzaCk7XG4gICAgfTtcbiAgfVxuXG4gIHJldHVybiBmdW5jdGlvbiAoZm4pIHtcbiAgICB2YXIgdGFzayA9IHsgZm46IGZuLCBuZXh0OiB1bmRlZmluZWQgfTtcbiAgICBpZiAobGFzdCkgbGFzdC5uZXh0ID0gdGFzaztcbiAgICBpZiAoIWhlYWQpIHtcbiAgICAgIGhlYWQgPSB0YXNrO1xuICAgICAgbm90aWZ5KCk7XG4gICAgfSBsYXN0ID0gdGFzaztcbiAgfTtcbn07XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChleGVjKSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuIHsgZTogZmFsc2UsIHY6IGV4ZWMoKSB9O1xuICB9IGNhdGNoIChlKSB7XG4gICAgcmV0dXJuIHsgZTogdHJ1ZSwgdjogZSB9O1xuICB9XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIHN0cm9uZyA9IHJlcXVpcmUoJy4vX2NvbGxlY3Rpb24tc3Ryb25nJyk7XG52YXIgdmFsaWRhdGUgPSByZXF1aXJlKCcuL192YWxpZGF0ZS1jb2xsZWN0aW9uJyk7XG52YXIgTUFQID0gJ01hcCc7XG5cbi8vIDIzLjEgTWFwIE9iamVjdHNcbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9fY29sbGVjdGlvbicpKE1BUCwgZnVuY3Rpb24gKGdldCkge1xuICByZXR1cm4gZnVuY3Rpb24gTWFwKCkgeyByZXR1cm4gZ2V0KHRoaXMsIGFyZ3VtZW50cy5sZW5ndGggPiAwID8gYXJndW1lbnRzWzBdIDogdW5kZWZpbmVkKTsgfTtcbn0sIHtcbiAgLy8gMjMuMS4zLjYgTWFwLnByb3RvdHlwZS5nZXQoa2V5KVxuICBnZXQ6IGZ1bmN0aW9uIGdldChrZXkpIHtcbiAgICB2YXIgZW50cnkgPSBzdHJvbmcuZ2V0RW50cnkodmFsaWRhdGUodGhpcywgTUFQKSwga2V5KTtcbiAgICByZXR1cm4gZW50cnkgJiYgZW50cnkudjtcbiAgfSxcbiAgLy8gMjMuMS4zLjkgTWFwLnByb3RvdHlwZS5zZXQoa2V5LCB2YWx1ZSlcbiAgc2V0OiBmdW5jdGlvbiBzZXQoa2V5LCB2YWx1ZSkge1xuICAgIHJldHVybiBzdHJvbmcuZGVmKHZhbGlkYXRlKHRoaXMsIE1BUCksIGtleSA9PT0gMCA/IDAgOiBrZXksIHZhbHVlKTtcbiAgfVxufSwgc3Ryb25nLCB0cnVlKTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBzdHJvbmcgPSByZXF1aXJlKCcuL19jb2xsZWN0aW9uLXN0cm9uZycpO1xudmFyIHZhbGlkYXRlID0gcmVxdWlyZSgnLi9fdmFsaWRhdGUtY29sbGVjdGlvbicpO1xudmFyIFNFVCA9ICdTZXQnO1xuXG4vLyAyMy4yIFNldCBPYmplY3RzXG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vX2NvbGxlY3Rpb24nKShTRVQsIGZ1bmN0aW9uIChnZXQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIFNldCgpIHsgcmV0dXJuIGdldCh0aGlzLCBhcmd1bWVudHMubGVuZ3RoID4gMCA/IGFyZ3VtZW50c1swXSA6IHVuZGVmaW5lZCk7IH07XG59LCB7XG4gIC8vIDIzLjIuMy4xIFNldC5wcm90b3R5cGUuYWRkKHZhbHVlKVxuICBhZGQ6IGZ1bmN0aW9uIGFkZCh2YWx1ZSkge1xuICAgIHJldHVybiBzdHJvbmcuZGVmKHZhbGlkYXRlKHRoaXMsIFNFVCksIHZhbHVlID0gdmFsdWUgPT09IDAgPyAwIDogdmFsdWUsIHZhbHVlKTtcbiAgfVxufSwgc3Ryb25nKTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuL19nbG9iYWwnKTtcbnZhciBlYWNoID0gcmVxdWlyZSgnLi9fYXJyYXktbWV0aG9kcycpKDApO1xudmFyIHJlZGVmaW5lID0gcmVxdWlyZSgnLi9fcmVkZWZpbmUnKTtcbnZhciBtZXRhID0gcmVxdWlyZSgnLi9fbWV0YScpO1xudmFyIGFzc2lnbiA9IHJlcXVpcmUoJy4vX29iamVjdC1hc3NpZ24nKTtcbnZhciB3ZWFrID0gcmVxdWlyZSgnLi9fY29sbGVjdGlvbi13ZWFrJyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbnZhciB2YWxpZGF0ZSA9IHJlcXVpcmUoJy4vX3ZhbGlkYXRlLWNvbGxlY3Rpb24nKTtcbnZhciBOQVRJVkVfV0VBS19NQVAgPSByZXF1aXJlKCcuL192YWxpZGF0ZS1jb2xsZWN0aW9uJyk7XG52YXIgSVNfSUUxMSA9ICFnbG9iYWwuQWN0aXZlWE9iamVjdCAmJiAnQWN0aXZlWE9iamVjdCcgaW4gZ2xvYmFsO1xudmFyIFdFQUtfTUFQID0gJ1dlYWtNYXAnO1xudmFyIGdldFdlYWsgPSBtZXRhLmdldFdlYWs7XG52YXIgaXNFeHRlbnNpYmxlID0gT2JqZWN0LmlzRXh0ZW5zaWJsZTtcbnZhciB1bmNhdWdodEZyb3plblN0b3JlID0gd2Vhay51ZnN0b3JlO1xudmFyIEludGVybmFsTWFwO1xuXG52YXIgd3JhcHBlciA9IGZ1bmN0aW9uIChnZXQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIFdlYWtNYXAoKSB7XG4gICAgcmV0dXJuIGdldCh0aGlzLCBhcmd1bWVudHMubGVuZ3RoID4gMCA/IGFyZ3VtZW50c1swXSA6IHVuZGVmaW5lZCk7XG4gIH07XG59O1xuXG52YXIgbWV0aG9kcyA9IHtcbiAgLy8gMjMuMy4zLjMgV2Vha01hcC5wcm90b3R5cGUuZ2V0KGtleSlcbiAgZ2V0OiBmdW5jdGlvbiBnZXQoa2V5KSB7XG4gICAgaWYgKGlzT2JqZWN0KGtleSkpIHtcbiAgICAgIHZhciBkYXRhID0gZ2V0V2VhayhrZXkpO1xuICAgICAgaWYgKGRhdGEgPT09IHRydWUpIHJldHVybiB1bmNhdWdodEZyb3plblN0b3JlKHZhbGlkYXRlKHRoaXMsIFdFQUtfTUFQKSkuZ2V0KGtleSk7XG4gICAgICByZXR1cm4gZGF0YSA/IGRhdGFbdGhpcy5faV0gOiB1bmRlZmluZWQ7XG4gICAgfVxuICB9LFxuICAvLyAyMy4zLjMuNSBXZWFrTWFwLnByb3RvdHlwZS5zZXQoa2V5LCB2YWx1ZSlcbiAgc2V0OiBmdW5jdGlvbiBzZXQoa2V5LCB2YWx1ZSkge1xuICAgIHJldHVybiB3ZWFrLmRlZih2YWxpZGF0ZSh0aGlzLCBXRUFLX01BUCksIGtleSwgdmFsdWUpO1xuICB9XG59O1xuXG4vLyAyMy4zIFdlYWtNYXAgT2JqZWN0c1xudmFyICRXZWFrTWFwID0gbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL19jb2xsZWN0aW9uJykoV0VBS19NQVAsIHdyYXBwZXIsIG1ldGhvZHMsIHdlYWssIHRydWUsIHRydWUpO1xuXG4vLyBJRTExIFdlYWtNYXAgZnJvemVuIGtleXMgZml4XG5pZiAoTkFUSVZFX1dFQUtfTUFQICYmIElTX0lFMTEpIHtcbiAgSW50ZXJuYWxNYXAgPSB3ZWFrLmdldENvbnN0cnVjdG9yKHdyYXBwZXIsIFdFQUtfTUFQKTtcbiAgYXNzaWduKEludGVybmFsTWFwLnByb3RvdHlwZSwgbWV0aG9kcyk7XG4gIG1ldGEuTkVFRCA9IHRydWU7XG4gIGVhY2goWydkZWxldGUnLCAnaGFzJywgJ2dldCcsICdzZXQnXSwgZnVuY3Rpb24gKGtleSkge1xuICAgIHZhciBwcm90byA9ICRXZWFrTWFwLnByb3RvdHlwZTtcbiAgICB2YXIgbWV0aG9kID0gcHJvdG9ba2V5XTtcbiAgICByZWRlZmluZShwcm90bywga2V5LCBmdW5jdGlvbiAoYSwgYikge1xuICAgICAgLy8gc3RvcmUgZnJvemVuIG9iamVjdHMgb24gaW50ZXJuYWwgd2Vha21hcCBzaGltXG4gICAgICBpZiAoaXNPYmplY3QoYSkgJiYgIWlzRXh0ZW5zaWJsZShhKSkge1xuICAgICAgICBpZiAoIXRoaXMuX2YpIHRoaXMuX2YgPSBuZXcgSW50ZXJuYWxNYXAoKTtcbiAgICAgICAgdmFyIHJlc3VsdCA9IHRoaXMuX2Zba2V5XShhLCBiKTtcbiAgICAgICAgcmV0dXJuIGtleSA9PSAnc2V0JyA/IHRoaXMgOiByZXN1bHQ7XG4gICAgICAvLyBzdG9yZSBhbGwgdGhlIHJlc3Qgb24gbmF0aXZlIHdlYWttYXBcbiAgICAgIH0gcmV0dXJuIG1ldGhvZC5jYWxsKHRoaXMsIGEsIGIpO1xuICAgIH0pO1xuICB9KTtcbn1cbiIsIid1c2Ugc3RyaWN0JztcbnZhciB3ZWFrID0gcmVxdWlyZSgnLi9fY29sbGVjdGlvbi13ZWFrJyk7XG52YXIgdmFsaWRhdGUgPSByZXF1aXJlKCcuL192YWxpZGF0ZS1jb2xsZWN0aW9uJyk7XG52YXIgV0VBS19TRVQgPSAnV2Vha1NldCc7XG5cbi8vIDIzLjQgV2Vha1NldCBPYmplY3RzXG5yZXF1aXJlKCcuL19jb2xsZWN0aW9uJykoV0VBS19TRVQsIGZ1bmN0aW9uIChnZXQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIFdlYWtTZXQoKSB7IHJldHVybiBnZXQodGhpcywgYXJndW1lbnRzLmxlbmd0aCA+IDAgPyBhcmd1bWVudHNbMF0gOiB1bmRlZmluZWQpOyB9O1xufSwge1xuICAvLyAyMy40LjMuMSBXZWFrU2V0LnByb3RvdHlwZS5hZGQodmFsdWUpXG4gIGFkZDogZnVuY3Rpb24gYWRkKHZhbHVlKSB7XG4gICAgcmV0dXJuIHdlYWsuZGVmKHZhbGlkYXRlKHRoaXMsIFdFQUtfU0VUKSwgdmFsdWUsIHRydWUpO1xuICB9XG59LCB3ZWFrLCBmYWxzZSwgdHJ1ZSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyICR0eXBlZCA9IHJlcXVpcmUoJy4vX3R5cGVkJyk7XG52YXIgYnVmZmVyID0gcmVxdWlyZSgnLi9fdHlwZWQtYnVmZmVyJyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciB0b0Fic29sdXRlSW5kZXggPSByZXF1aXJlKCcuL190by1hYnNvbHV0ZS1pbmRleCcpO1xudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi9fdG8tbGVuZ3RoJyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbnZhciBBcnJheUJ1ZmZlciA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpLkFycmF5QnVmZmVyO1xudmFyIHNwZWNpZXNDb25zdHJ1Y3RvciA9IHJlcXVpcmUoJy4vX3NwZWNpZXMtY29uc3RydWN0b3InKTtcbnZhciAkQXJyYXlCdWZmZXIgPSBidWZmZXIuQXJyYXlCdWZmZXI7XG52YXIgJERhdGFWaWV3ID0gYnVmZmVyLkRhdGFWaWV3O1xudmFyICRpc1ZpZXcgPSAkdHlwZWQuQUJWICYmIEFycmF5QnVmZmVyLmlzVmlldztcbnZhciAkc2xpY2UgPSAkQXJyYXlCdWZmZXIucHJvdG90eXBlLnNsaWNlO1xudmFyIFZJRVcgPSAkdHlwZWQuVklFVztcbnZhciBBUlJBWV9CVUZGRVIgPSAnQXJyYXlCdWZmZXInO1xuXG4kZXhwb3J0KCRleHBvcnQuRyArICRleHBvcnQuVyArICRleHBvcnQuRiAqIChBcnJheUJ1ZmZlciAhPT0gJEFycmF5QnVmZmVyKSwgeyBBcnJheUJ1ZmZlcjogJEFycmF5QnVmZmVyIH0pO1xuXG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqICEkdHlwZWQuQ09OU1RSLCBBUlJBWV9CVUZGRVIsIHtcbiAgLy8gMjQuMS4zLjEgQXJyYXlCdWZmZXIuaXNWaWV3KGFyZylcbiAgaXNWaWV3OiBmdW5jdGlvbiBpc1ZpZXcoaXQpIHtcbiAgICByZXR1cm4gJGlzVmlldyAmJiAkaXNWaWV3KGl0KSB8fCBpc09iamVjdChpdCkgJiYgVklFVyBpbiBpdDtcbiAgfVxufSk7XG5cbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5VICsgJGV4cG9ydC5GICogcmVxdWlyZSgnLi9fZmFpbHMnKShmdW5jdGlvbiAoKSB7XG4gIHJldHVybiAhbmV3ICRBcnJheUJ1ZmZlcigyKS5zbGljZSgxLCB1bmRlZmluZWQpLmJ5dGVMZW5ndGg7XG59KSwgQVJSQVlfQlVGRkVSLCB7XG4gIC8vIDI0LjEuNC4zIEFycmF5QnVmZmVyLnByb3RvdHlwZS5zbGljZShzdGFydCwgZW5kKVxuICBzbGljZTogZnVuY3Rpb24gc2xpY2Uoc3RhcnQsIGVuZCkge1xuICAgIGlmICgkc2xpY2UgIT09IHVuZGVmaW5lZCAmJiBlbmQgPT09IHVuZGVmaW5lZCkgcmV0dXJuICRzbGljZS5jYWxsKGFuT2JqZWN0KHRoaXMpLCBzdGFydCk7IC8vIEZGIGZpeFxuICAgIHZhciBsZW4gPSBhbk9iamVjdCh0aGlzKS5ieXRlTGVuZ3RoO1xuICAgIHZhciBmaXJzdCA9IHRvQWJzb2x1dGVJbmRleChzdGFydCwgbGVuKTtcbiAgICB2YXIgZmluID0gdG9BYnNvbHV0ZUluZGV4KGVuZCA9PT0gdW5kZWZpbmVkID8gbGVuIDogZW5kLCBsZW4pO1xuICAgIHZhciByZXN1bHQgPSBuZXcgKHNwZWNpZXNDb25zdHJ1Y3Rvcih0aGlzLCAkQXJyYXlCdWZmZXIpKSh0b0xlbmd0aChmaW4gLSBmaXJzdCkpO1xuICAgIHZhciB2aWV3UyA9IG5ldyAkRGF0YVZpZXcodGhpcyk7XG4gICAgdmFyIHZpZXdUID0gbmV3ICREYXRhVmlldyhyZXN1bHQpO1xuICAgIHZhciBpbmRleCA9IDA7XG4gICAgd2hpbGUgKGZpcnN0IDwgZmluKSB7XG4gICAgICB2aWV3VC5zZXRVaW50OChpbmRleCsrLCB2aWV3Uy5nZXRVaW50OChmaXJzdCsrKSk7XG4gICAgfSByZXR1cm4gcmVzdWx0O1xuICB9XG59KTtcblxucmVxdWlyZSgnLi9fc2V0LXNwZWNpZXMnKShBUlJBWV9CVUZGRVIpO1xuIiwidmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbiRleHBvcnQoJGV4cG9ydC5HICsgJGV4cG9ydC5XICsgJGV4cG9ydC5GICogIXJlcXVpcmUoJy4vX3R5cGVkJykuQUJWLCB7XG4gIERhdGFWaWV3OiByZXF1aXJlKCcuL190eXBlZC1idWZmZXInKS5EYXRhVmlld1xufSk7XG4iLCJyZXF1aXJlKCcuL190eXBlZC1hcnJheScpKCdJbnQ4JywgMSwgZnVuY3Rpb24gKGluaXQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIEludDhBcnJheShkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpIHtcbiAgICByZXR1cm4gaW5pdCh0aGlzLCBkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpO1xuICB9O1xufSk7XG4iLCJyZXF1aXJlKCcuL190eXBlZC1hcnJheScpKCdVaW50OCcsIDEsIGZ1bmN0aW9uIChpbml0KSB7XG4gIHJldHVybiBmdW5jdGlvbiBVaW50OEFycmF5KGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCkge1xuICAgIHJldHVybiBpbml0KHRoaXMsIGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCk7XG4gIH07XG59KTtcbiIsInJlcXVpcmUoJy4vX3R5cGVkLWFycmF5JykoJ1VpbnQ4JywgMSwgZnVuY3Rpb24gKGluaXQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIFVpbnQ4Q2xhbXBlZEFycmF5KGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCkge1xuICAgIHJldHVybiBpbml0KHRoaXMsIGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCk7XG4gIH07XG59LCB0cnVlKTtcbiIsInJlcXVpcmUoJy4vX3R5cGVkLWFycmF5JykoJ0ludDE2JywgMiwgZnVuY3Rpb24gKGluaXQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIEludDE2QXJyYXkoZGF0YSwgYnl0ZU9mZnNldCwgbGVuZ3RoKSB7XG4gICAgcmV0dXJuIGluaXQodGhpcywgZGF0YSwgYnl0ZU9mZnNldCwgbGVuZ3RoKTtcbiAgfTtcbn0pO1xuIiwicmVxdWlyZSgnLi9fdHlwZWQtYXJyYXknKSgnVWludDE2JywgMiwgZnVuY3Rpb24gKGluaXQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIFVpbnQxNkFycmF5KGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCkge1xuICAgIHJldHVybiBpbml0KHRoaXMsIGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCk7XG4gIH07XG59KTtcbiIsInJlcXVpcmUoJy4vX3R5cGVkLWFycmF5JykoJ0ludDMyJywgNCwgZnVuY3Rpb24gKGluaXQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIEludDMyQXJyYXkoZGF0YSwgYnl0ZU9mZnNldCwgbGVuZ3RoKSB7XG4gICAgcmV0dXJuIGluaXQodGhpcywgZGF0YSwgYnl0ZU9mZnNldCwgbGVuZ3RoKTtcbiAgfTtcbn0pO1xuIiwicmVxdWlyZSgnLi9fdHlwZWQtYXJyYXknKSgnVWludDMyJywgNCwgZnVuY3Rpb24gKGluaXQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIFVpbnQzMkFycmF5KGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCkge1xuICAgIHJldHVybiBpbml0KHRoaXMsIGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCk7XG4gIH07XG59KTtcbiIsInJlcXVpcmUoJy4vX3R5cGVkLWFycmF5JykoJ0Zsb2F0MzInLCA0LCBmdW5jdGlvbiAoaW5pdCkge1xuICByZXR1cm4gZnVuY3Rpb24gRmxvYXQzMkFycmF5KGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCkge1xuICAgIHJldHVybiBpbml0KHRoaXMsIGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCk7XG4gIH07XG59KTtcbiIsInJlcXVpcmUoJy4vX3R5cGVkLWFycmF5JykoJ0Zsb2F0NjQnLCA4LCBmdW5jdGlvbiAoaW5pdCkge1xuICByZXR1cm4gZnVuY3Rpb24gRmxvYXQ2NEFycmF5KGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCkge1xuICAgIHJldHVybiBpbml0KHRoaXMsIGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCk7XG4gIH07XG59KTtcbiIsIi8vIDI2LjEuMSBSZWZsZWN0LmFwcGx5KHRhcmdldCwgdGhpc0FyZ3VtZW50LCBhcmd1bWVudHNMaXN0KVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBhRnVuY3Rpb24gPSByZXF1aXJlKCcuL19hLWZ1bmN0aW9uJyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciByQXBwbHkgPSAocmVxdWlyZSgnLi9fZ2xvYmFsJykuUmVmbGVjdCB8fCB7fSkuYXBwbHk7XG52YXIgZkFwcGx5ID0gRnVuY3Rpb24uYXBwbHk7XG4vLyBNUyBFZGdlIGFyZ3VtZW50c0xpc3QgYXJndW1lbnQgaXMgb3B0aW9uYWxcbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogIXJlcXVpcmUoJy4vX2ZhaWxzJykoZnVuY3Rpb24gKCkge1xuICByQXBwbHkoZnVuY3Rpb24gKCkgeyAvKiBlbXB0eSAqLyB9KTtcbn0pLCAnUmVmbGVjdCcsIHtcbiAgYXBwbHk6IGZ1bmN0aW9uIGFwcGx5KHRhcmdldCwgdGhpc0FyZ3VtZW50LCBhcmd1bWVudHNMaXN0KSB7XG4gICAgdmFyIFQgPSBhRnVuY3Rpb24odGFyZ2V0KTtcbiAgICB2YXIgTCA9IGFuT2JqZWN0KGFyZ3VtZW50c0xpc3QpO1xuICAgIHJldHVybiByQXBwbHkgPyByQXBwbHkoVCwgdGhpc0FyZ3VtZW50LCBMKSA6IGZBcHBseS5jYWxsKFQsIHRoaXNBcmd1bWVudCwgTCk7XG4gIH1cbn0pO1xuIiwiLy8gMjYuMS4yIFJlZmxlY3QuY29uc3RydWN0KHRhcmdldCwgYXJndW1lbnRzTGlzdCBbLCBuZXdUYXJnZXRdKVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBjcmVhdGUgPSByZXF1aXJlKCcuL19vYmplY3QtY3JlYXRlJyk7XG52YXIgYUZ1bmN0aW9uID0gcmVxdWlyZSgnLi9fYS1mdW5jdGlvbicpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4vX2ZhaWxzJyk7XG52YXIgYmluZCA9IHJlcXVpcmUoJy4vX2JpbmQnKTtcbnZhciByQ29uc3RydWN0ID0gKHJlcXVpcmUoJy4vX2dsb2JhbCcpLlJlZmxlY3QgfHwge30pLmNvbnN0cnVjdDtcblxuLy8gTVMgRWRnZSBzdXBwb3J0cyBvbmx5IDIgYXJndW1lbnRzIGFuZCBhcmd1bWVudHNMaXN0IGFyZ3VtZW50IGlzIG9wdGlvbmFsXG4vLyBGRiBOaWdodGx5IHNldHMgdGhpcmQgYXJndW1lbnQgYXMgYG5ldy50YXJnZXRgLCBidXQgZG9lcyBub3QgY3JlYXRlIGB0aGlzYCBmcm9tIGl0XG52YXIgTkVXX1RBUkdFVF9CVUcgPSBmYWlscyhmdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIEYoKSB7IC8qIGVtcHR5ICovIH1cbiAgcmV0dXJuICEockNvbnN0cnVjdChmdW5jdGlvbiAoKSB7IC8qIGVtcHR5ICovIH0sIFtdLCBGKSBpbnN0YW5jZW9mIEYpO1xufSk7XG52YXIgQVJHU19CVUcgPSAhZmFpbHMoZnVuY3Rpb24gKCkge1xuICByQ29uc3RydWN0KGZ1bmN0aW9uICgpIHsgLyogZW1wdHkgKi8gfSk7XG59KTtcblxuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAoTkVXX1RBUkdFVF9CVUcgfHwgQVJHU19CVUcpLCAnUmVmbGVjdCcsIHtcbiAgY29uc3RydWN0OiBmdW5jdGlvbiBjb25zdHJ1Y3QoVGFyZ2V0LCBhcmdzIC8qICwgbmV3VGFyZ2V0ICovKSB7XG4gICAgYUZ1bmN0aW9uKFRhcmdldCk7XG4gICAgYW5PYmplY3QoYXJncyk7XG4gICAgdmFyIG5ld1RhcmdldCA9IGFyZ3VtZW50cy5sZW5ndGggPCAzID8gVGFyZ2V0IDogYUZ1bmN0aW9uKGFyZ3VtZW50c1syXSk7XG4gICAgaWYgKEFSR1NfQlVHICYmICFORVdfVEFSR0VUX0JVRykgcmV0dXJuIHJDb25zdHJ1Y3QoVGFyZ2V0LCBhcmdzLCBuZXdUYXJnZXQpO1xuICAgIGlmIChUYXJnZXQgPT0gbmV3VGFyZ2V0KSB7XG4gICAgICAvLyB3L28gYWx0ZXJlZCBuZXdUYXJnZXQsIG9wdGltaXphdGlvbiBmb3IgMC00IGFyZ3VtZW50c1xuICAgICAgc3dpdGNoIChhcmdzLmxlbmd0aCkge1xuICAgICAgICBjYXNlIDA6IHJldHVybiBuZXcgVGFyZ2V0KCk7XG4gICAgICAgIGNhc2UgMTogcmV0dXJuIG5ldyBUYXJnZXQoYXJnc1swXSk7XG4gICAgICAgIGNhc2UgMjogcmV0dXJuIG5ldyBUYXJnZXQoYXJnc1swXSwgYXJnc1sxXSk7XG4gICAgICAgIGNhc2UgMzogcmV0dXJuIG5ldyBUYXJnZXQoYXJnc1swXSwgYXJnc1sxXSwgYXJnc1syXSk7XG4gICAgICAgIGNhc2UgNDogcmV0dXJuIG5ldyBUYXJnZXQoYXJnc1swXSwgYXJnc1sxXSwgYXJnc1syXSwgYXJnc1szXSk7XG4gICAgICB9XG4gICAgICAvLyB3L28gYWx0ZXJlZCBuZXdUYXJnZXQsIGxvdCBvZiBhcmd1bWVudHMgY2FzZVxuICAgICAgdmFyICRhcmdzID0gW251bGxdO1xuICAgICAgJGFyZ3MucHVzaC5hcHBseSgkYXJncywgYXJncyk7XG4gICAgICByZXR1cm4gbmV3IChiaW5kLmFwcGx5KFRhcmdldCwgJGFyZ3MpKSgpO1xuICAgIH1cbiAgICAvLyB3aXRoIGFsdGVyZWQgbmV3VGFyZ2V0LCBub3Qgc3VwcG9ydCBidWlsdC1pbiBjb25zdHJ1Y3RvcnNcbiAgICB2YXIgcHJvdG8gPSBuZXdUYXJnZXQucHJvdG90eXBlO1xuICAgIHZhciBpbnN0YW5jZSA9IGNyZWF0ZShpc09iamVjdChwcm90bykgPyBwcm90byA6IE9iamVjdC5wcm90b3R5cGUpO1xuICAgIHZhciByZXN1bHQgPSBGdW5jdGlvbi5hcHBseS5jYWxsKFRhcmdldCwgaW5zdGFuY2UsIGFyZ3MpO1xuICAgIHJldHVybiBpc09iamVjdChyZXN1bHQpID8gcmVzdWx0IDogaW5zdGFuY2U7XG4gIH1cbn0pO1xuIiwiLy8gMjYuMS4zIFJlZmxlY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBwcm9wZXJ0eUtleSwgYXR0cmlidXRlcylcbnZhciBkUCA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIHRvUHJpbWl0aXZlID0gcmVxdWlyZSgnLi9fdG8tcHJpbWl0aXZlJyk7XG5cbi8vIE1TIEVkZ2UgaGFzIGJyb2tlbiBSZWZsZWN0LmRlZmluZVByb3BlcnR5IC0gdGhyb3dpbmcgaW5zdGVhZCBvZiByZXR1cm5pbmcgZmFsc2VcbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogcmVxdWlyZSgnLi9fZmFpbHMnKShmdW5jdGlvbiAoKSB7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bmRlZlxuICBSZWZsZWN0LmRlZmluZVByb3BlcnR5KGRQLmYoe30sIDEsIHsgdmFsdWU6IDEgfSksIDEsIHsgdmFsdWU6IDIgfSk7XG59KSwgJ1JlZmxlY3QnLCB7XG4gIGRlZmluZVByb3BlcnR5OiBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIHByb3BlcnR5S2V5LCBhdHRyaWJ1dGVzKSB7XG4gICAgYW5PYmplY3QodGFyZ2V0KTtcbiAgICBwcm9wZXJ0eUtleSA9IHRvUHJpbWl0aXZlKHByb3BlcnR5S2V5LCB0cnVlKTtcbiAgICBhbk9iamVjdChhdHRyaWJ1dGVzKTtcbiAgICB0cnkge1xuICAgICAgZFAuZih0YXJnZXQsIHByb3BlcnR5S2V5LCBhdHRyaWJ1dGVzKTtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH1cbn0pO1xuIiwiLy8gMjYuMS40IFJlZmxlY3QuZGVsZXRlUHJvcGVydHkodGFyZ2V0LCBwcm9wZXJ0eUtleSlcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgZ09QRCA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BkJykuZjtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ1JlZmxlY3QnLCB7XG4gIGRlbGV0ZVByb3BlcnR5OiBmdW5jdGlvbiBkZWxldGVQcm9wZXJ0eSh0YXJnZXQsIHByb3BlcnR5S2V5KSB7XG4gICAgdmFyIGRlc2MgPSBnT1BEKGFuT2JqZWN0KHRhcmdldCksIHByb3BlcnR5S2V5KTtcbiAgICByZXR1cm4gZGVzYyAmJiAhZGVzYy5jb25maWd1cmFibGUgPyBmYWxzZSA6IGRlbGV0ZSB0YXJnZXRbcHJvcGVydHlLZXldO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIDI2LjEuNSBSZWZsZWN0LmVudW1lcmF0ZSh0YXJnZXQpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgRW51bWVyYXRlID0gZnVuY3Rpb24gKGl0ZXJhdGVkKSB7XG4gIHRoaXMuX3QgPSBhbk9iamVjdChpdGVyYXRlZCk7IC8vIHRhcmdldFxuICB0aGlzLl9pID0gMDsgICAgICAgICAgICAgICAgICAvLyBuZXh0IGluZGV4XG4gIHZhciBrZXlzID0gdGhpcy5fayA9IFtdOyAgICAgIC8vIGtleXNcbiAgdmFyIGtleTtcbiAgZm9yIChrZXkgaW4gaXRlcmF0ZWQpIGtleXMucHVzaChrZXkpO1xufTtcbnJlcXVpcmUoJy4vX2l0ZXItY3JlYXRlJykoRW51bWVyYXRlLCAnT2JqZWN0JywgZnVuY3Rpb24gKCkge1xuICB2YXIgdGhhdCA9IHRoaXM7XG4gIHZhciBrZXlzID0gdGhhdC5faztcbiAgdmFyIGtleTtcbiAgZG8ge1xuICAgIGlmICh0aGF0Ll9pID49IGtleXMubGVuZ3RoKSByZXR1cm4geyB2YWx1ZTogdW5kZWZpbmVkLCBkb25lOiB0cnVlIH07XG4gIH0gd2hpbGUgKCEoKGtleSA9IGtleXNbdGhhdC5faSsrXSkgaW4gdGhhdC5fdCkpO1xuICByZXR1cm4geyB2YWx1ZToga2V5LCBkb25lOiBmYWxzZSB9O1xufSk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnUmVmbGVjdCcsIHtcbiAgZW51bWVyYXRlOiBmdW5jdGlvbiBlbnVtZXJhdGUodGFyZ2V0KSB7XG4gICAgcmV0dXJuIG5ldyBFbnVtZXJhdGUodGFyZ2V0KTtcbiAgfVxufSk7XG4iLCIvLyAyNi4xLjYgUmVmbGVjdC5nZXQodGFyZ2V0LCBwcm9wZXJ0eUtleSBbLCByZWNlaXZlcl0pXG52YXIgZ09QRCA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BkJyk7XG52YXIgZ2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKCcuL19vYmplY3QtZ3BvJyk7XG52YXIgaGFzID0gcmVxdWlyZSgnLi9faGFzJyk7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcblxuZnVuY3Rpb24gZ2V0KHRhcmdldCwgcHJvcGVydHlLZXkgLyogLCByZWNlaXZlciAqLykge1xuICB2YXIgcmVjZWl2ZXIgPSBhcmd1bWVudHMubGVuZ3RoIDwgMyA/IHRhcmdldCA6IGFyZ3VtZW50c1syXTtcbiAgdmFyIGRlc2MsIHByb3RvO1xuICBpZiAoYW5PYmplY3QodGFyZ2V0KSA9PT0gcmVjZWl2ZXIpIHJldHVybiB0YXJnZXRbcHJvcGVydHlLZXldO1xuICBpZiAoZGVzYyA9IGdPUEQuZih0YXJnZXQsIHByb3BlcnR5S2V5KSkgcmV0dXJuIGhhcyhkZXNjLCAndmFsdWUnKVxuICAgID8gZGVzYy52YWx1ZVxuICAgIDogZGVzYy5nZXQgIT09IHVuZGVmaW5lZFxuICAgICAgPyBkZXNjLmdldC5jYWxsKHJlY2VpdmVyKVxuICAgICAgOiB1bmRlZmluZWQ7XG4gIGlmIChpc09iamVjdChwcm90byA9IGdldFByb3RvdHlwZU9mKHRhcmdldCkpKSByZXR1cm4gZ2V0KHByb3RvLCBwcm9wZXJ0eUtleSwgcmVjZWl2ZXIpO1xufVxuXG4kZXhwb3J0KCRleHBvcnQuUywgJ1JlZmxlY3QnLCB7IGdldDogZ2V0IH0pO1xuIiwiLy8gMjYuMS43IFJlZmxlY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHRhcmdldCwgcHJvcGVydHlLZXkpXG52YXIgZ09QRCA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BkJyk7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnUmVmbGVjdCcsIHtcbiAgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yOiBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodGFyZ2V0LCBwcm9wZXJ0eUtleSkge1xuICAgIHJldHVybiBnT1BELmYoYW5PYmplY3QodGFyZ2V0KSwgcHJvcGVydHlLZXkpO1xuICB9XG59KTtcbiIsIi8vIDI2LjEuOCBSZWZsZWN0LmdldFByb3RvdHlwZU9mKHRhcmdldClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgZ2V0UHJvdG8gPSByZXF1aXJlKCcuL19vYmplY3QtZ3BvJyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdSZWZsZWN0Jywge1xuICBnZXRQcm90b3R5cGVPZjogZnVuY3Rpb24gZ2V0UHJvdG90eXBlT2YodGFyZ2V0KSB7XG4gICAgcmV0dXJuIGdldFByb3RvKGFuT2JqZWN0KHRhcmdldCkpO1xuICB9XG59KTtcbiIsIi8vIDI2LjEuOSBSZWZsZWN0Lmhhcyh0YXJnZXQsIHByb3BlcnR5S2V5KVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdSZWZsZWN0Jywge1xuICBoYXM6IGZ1bmN0aW9uIGhhcyh0YXJnZXQsIHByb3BlcnR5S2V5KSB7XG4gICAgcmV0dXJuIHByb3BlcnR5S2V5IGluIHRhcmdldDtcbiAgfVxufSk7XG4iLCIvLyAyNi4xLjEwIFJlZmxlY3QuaXNFeHRlbnNpYmxlKHRhcmdldClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciAkaXNFeHRlbnNpYmxlID0gT2JqZWN0LmlzRXh0ZW5zaWJsZTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdSZWZsZWN0Jywge1xuICBpc0V4dGVuc2libGU6IGZ1bmN0aW9uIGlzRXh0ZW5zaWJsZSh0YXJnZXQpIHtcbiAgICBhbk9iamVjdCh0YXJnZXQpO1xuICAgIHJldHVybiAkaXNFeHRlbnNpYmxlID8gJGlzRXh0ZW5zaWJsZSh0YXJnZXQpIDogdHJ1ZTtcbiAgfVxufSk7XG4iLCIvLyAyNi4xLjExIFJlZmxlY3Qub3duS2V5cyh0YXJnZXQpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ1JlZmxlY3QnLCB7IG93bktleXM6IHJlcXVpcmUoJy4vX293bi1rZXlzJykgfSk7XG4iLCIvLyAyNi4xLjEyIFJlZmxlY3QucHJldmVudEV4dGVuc2lvbnModGFyZ2V0KVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyICRwcmV2ZW50RXh0ZW5zaW9ucyA9IE9iamVjdC5wcmV2ZW50RXh0ZW5zaW9ucztcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdSZWZsZWN0Jywge1xuICBwcmV2ZW50RXh0ZW5zaW9uczogZnVuY3Rpb24gcHJldmVudEV4dGVuc2lvbnModGFyZ2V0KSB7XG4gICAgYW5PYmplY3QodGFyZ2V0KTtcbiAgICB0cnkge1xuICAgICAgaWYgKCRwcmV2ZW50RXh0ZW5zaW9ucykgJHByZXZlbnRFeHRlbnNpb25zKHRhcmdldCk7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG59KTtcbiIsIi8vIDI2LjEuMTMgUmVmbGVjdC5zZXQodGFyZ2V0LCBwcm9wZXJ0eUtleSwgViBbLCByZWNlaXZlcl0pXG52YXIgZFAgPSByZXF1aXJlKCcuL19vYmplY3QtZHAnKTtcbnZhciBnT1BEID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcGQnKTtcbnZhciBnZXRQcm90b3R5cGVPZiA9IHJlcXVpcmUoJy4vX29iamVjdC1ncG8nKTtcbnZhciBoYXMgPSByZXF1aXJlKCcuL19oYXMnKTtcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgY3JlYXRlRGVzYyA9IHJlcXVpcmUoJy4vX3Byb3BlcnR5LWRlc2MnKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG5cbmZ1bmN0aW9uIHNldCh0YXJnZXQsIHByb3BlcnR5S2V5LCBWIC8qICwgcmVjZWl2ZXIgKi8pIHtcbiAgdmFyIHJlY2VpdmVyID0gYXJndW1lbnRzLmxlbmd0aCA8IDQgPyB0YXJnZXQgOiBhcmd1bWVudHNbM107XG4gIHZhciBvd25EZXNjID0gZ09QRC5mKGFuT2JqZWN0KHRhcmdldCksIHByb3BlcnR5S2V5KTtcbiAgdmFyIGV4aXN0aW5nRGVzY3JpcHRvciwgcHJvdG87XG4gIGlmICghb3duRGVzYykge1xuICAgIGlmIChpc09iamVjdChwcm90byA9IGdldFByb3RvdHlwZU9mKHRhcmdldCkpKSB7XG4gICAgICByZXR1cm4gc2V0KHByb3RvLCBwcm9wZXJ0eUtleSwgViwgcmVjZWl2ZXIpO1xuICAgIH1cbiAgICBvd25EZXNjID0gY3JlYXRlRGVzYygwKTtcbiAgfVxuICBpZiAoaGFzKG93bkRlc2MsICd2YWx1ZScpKSB7XG4gICAgaWYgKG93bkRlc2Mud3JpdGFibGUgPT09IGZhbHNlIHx8ICFpc09iamVjdChyZWNlaXZlcikpIHJldHVybiBmYWxzZTtcbiAgICBpZiAoZXhpc3RpbmdEZXNjcmlwdG9yID0gZ09QRC5mKHJlY2VpdmVyLCBwcm9wZXJ0eUtleSkpIHtcbiAgICAgIGlmIChleGlzdGluZ0Rlc2NyaXB0b3IuZ2V0IHx8IGV4aXN0aW5nRGVzY3JpcHRvci5zZXQgfHwgZXhpc3RpbmdEZXNjcmlwdG9yLndyaXRhYmxlID09PSBmYWxzZSkgcmV0dXJuIGZhbHNlO1xuICAgICAgZXhpc3RpbmdEZXNjcmlwdG9yLnZhbHVlID0gVjtcbiAgICAgIGRQLmYocmVjZWl2ZXIsIHByb3BlcnR5S2V5LCBleGlzdGluZ0Rlc2NyaXB0b3IpO1xuICAgIH0gZWxzZSBkUC5mKHJlY2VpdmVyLCBwcm9wZXJ0eUtleSwgY3JlYXRlRGVzYygwLCBWKSk7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgcmV0dXJuIG93bkRlc2Muc2V0ID09PSB1bmRlZmluZWQgPyBmYWxzZSA6IChvd25EZXNjLnNldC5jYWxsKHJlY2VpdmVyLCBWKSwgdHJ1ZSk7XG59XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnUmVmbGVjdCcsIHsgc2V0OiBzZXQgfSk7XG4iLCIvLyAyNi4xLjE0IFJlZmxlY3Quc2V0UHJvdG90eXBlT2YodGFyZ2V0LCBwcm90bylcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgc2V0UHJvdG8gPSByZXF1aXJlKCcuL19zZXQtcHJvdG8nKTtcblxuaWYgKHNldFByb3RvKSAkZXhwb3J0KCRleHBvcnQuUywgJ1JlZmxlY3QnLCB7XG4gIHNldFByb3RvdHlwZU9mOiBmdW5jdGlvbiBzZXRQcm90b3R5cGVPZih0YXJnZXQsIHByb3RvKSB7XG4gICAgc2V0UHJvdG8uY2hlY2sodGFyZ2V0LCBwcm90byk7XG4gICAgdHJ5IHtcbiAgICAgIHNldFByb3RvLnNldCh0YXJnZXQsIHByb3RvKTtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH1cbn0pO1xuIiwicmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9lczcuYXJyYXkuaW5jbHVkZXMnKTtcbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9fY29yZScpLkFycmF5LmluY2x1ZGVzO1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gaHR0cHM6Ly9naXRodWIuY29tL3RjMzkvQXJyYXkucHJvdG90eXBlLmluY2x1ZGVzXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyICRpbmNsdWRlcyA9IHJlcXVpcmUoJy4vX2FycmF5LWluY2x1ZGVzJykodHJ1ZSk7XG5cbiRleHBvcnQoJGV4cG9ydC5QLCAnQXJyYXknLCB7XG4gIGluY2x1ZGVzOiBmdW5jdGlvbiBpbmNsdWRlcyhlbCAvKiAsIGZyb21JbmRleCA9IDAgKi8pIHtcbiAgICByZXR1cm4gJGluY2x1ZGVzKHRoaXMsIGVsLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCk7XG4gIH1cbn0pO1xuXG5yZXF1aXJlKCcuL19hZGQtdG8tdW5zY29wYWJsZXMnKSgnaW5jbHVkZXMnKTtcbiIsInJlcXVpcmUoJy4uLy4uL21vZHVsZXMvZXM3LmFycmF5LmZsYXQtbWFwJyk7XG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4uLy4uL21vZHVsZXMvX2NvcmUnKS5BcnJheS5mbGF0TWFwO1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9wcm9wb3NhbC1mbGF0TWFwLyNzZWMtQXJyYXkucHJvdG90eXBlLmZsYXRNYXBcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgZmxhdHRlbkludG9BcnJheSA9IHJlcXVpcmUoJy4vX2ZsYXR0ZW4taW50by1hcnJheScpO1xudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8tb2JqZWN0Jyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuL190by1sZW5ndGgnKTtcbnZhciBhRnVuY3Rpb24gPSByZXF1aXJlKCcuL19hLWZ1bmN0aW9uJyk7XG52YXIgYXJyYXlTcGVjaWVzQ3JlYXRlID0gcmVxdWlyZSgnLi9fYXJyYXktc3BlY2llcy1jcmVhdGUnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlAsICdBcnJheScsIHtcbiAgZmxhdE1hcDogZnVuY3Rpb24gZmxhdE1hcChjYWxsYmFja2ZuIC8qICwgdGhpc0FyZyAqLykge1xuICAgIHZhciBPID0gdG9PYmplY3QodGhpcyk7XG4gICAgdmFyIHNvdXJjZUxlbiwgQTtcbiAgICBhRnVuY3Rpb24oY2FsbGJhY2tmbik7XG4gICAgc291cmNlTGVuID0gdG9MZW5ndGgoTy5sZW5ndGgpO1xuICAgIEEgPSBhcnJheVNwZWNpZXNDcmVhdGUoTywgMCk7XG4gICAgZmxhdHRlbkludG9BcnJheShBLCBPLCBPLCBzb3VyY2VMZW4sIDAsIDEsIGNhbGxiYWNrZm4sIGFyZ3VtZW50c1sxXSk7XG4gICAgcmV0dXJuIEE7XG4gIH1cbn0pO1xuXG5yZXF1aXJlKCcuL19hZGQtdG8tdW5zY29wYWJsZXMnKSgnZmxhdE1hcCcpO1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9wcm9wb3NhbC1mbGF0TWFwLyNzZWMtRmxhdHRlbkludG9BcnJheVxudmFyIGlzQXJyYXkgPSByZXF1aXJlKCcuL19pcy1hcnJheScpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuL190by1sZW5ndGgnKTtcbnZhciBjdHggPSByZXF1aXJlKCcuL19jdHgnKTtcbnZhciBJU19DT05DQVRfU1BSRUFEQUJMRSA9IHJlcXVpcmUoJy4vX3drcycpKCdpc0NvbmNhdFNwcmVhZGFibGUnKTtcblxuZnVuY3Rpb24gZmxhdHRlbkludG9BcnJheSh0YXJnZXQsIG9yaWdpbmFsLCBzb3VyY2UsIHNvdXJjZUxlbiwgc3RhcnQsIGRlcHRoLCBtYXBwZXIsIHRoaXNBcmcpIHtcbiAgdmFyIHRhcmdldEluZGV4ID0gc3RhcnQ7XG4gIHZhciBzb3VyY2VJbmRleCA9IDA7XG4gIHZhciBtYXBGbiA9IG1hcHBlciA/IGN0eChtYXBwZXIsIHRoaXNBcmcsIDMpIDogZmFsc2U7XG4gIHZhciBlbGVtZW50LCBzcHJlYWRhYmxlO1xuXG4gIHdoaWxlIChzb3VyY2VJbmRleCA8IHNvdXJjZUxlbikge1xuICAgIGlmIChzb3VyY2VJbmRleCBpbiBzb3VyY2UpIHtcbiAgICAgIGVsZW1lbnQgPSBtYXBGbiA/IG1hcEZuKHNvdXJjZVtzb3VyY2VJbmRleF0sIHNvdXJjZUluZGV4LCBvcmlnaW5hbCkgOiBzb3VyY2Vbc291cmNlSW5kZXhdO1xuXG4gICAgICBzcHJlYWRhYmxlID0gZmFsc2U7XG4gICAgICBpZiAoaXNPYmplY3QoZWxlbWVudCkpIHtcbiAgICAgICAgc3ByZWFkYWJsZSA9IGVsZW1lbnRbSVNfQ09OQ0FUX1NQUkVBREFCTEVdO1xuICAgICAgICBzcHJlYWRhYmxlID0gc3ByZWFkYWJsZSAhPT0gdW5kZWZpbmVkID8gISFzcHJlYWRhYmxlIDogaXNBcnJheShlbGVtZW50KTtcbiAgICAgIH1cblxuICAgICAgaWYgKHNwcmVhZGFibGUgJiYgZGVwdGggPiAwKSB7XG4gICAgICAgIHRhcmdldEluZGV4ID0gZmxhdHRlbkludG9BcnJheSh0YXJnZXQsIG9yaWdpbmFsLCBlbGVtZW50LCB0b0xlbmd0aChlbGVtZW50Lmxlbmd0aCksIHRhcmdldEluZGV4LCBkZXB0aCAtIDEpIC0gMTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmICh0YXJnZXRJbmRleCA+PSAweDFmZmZmZmZmZmZmZmZmKSB0aHJvdyBUeXBlRXJyb3IoKTtcbiAgICAgICAgdGFyZ2V0W3RhcmdldEluZGV4XSA9IGVsZW1lbnQ7XG4gICAgICB9XG5cbiAgICAgIHRhcmdldEluZGV4Kys7XG4gICAgfVxuICAgIHNvdXJjZUluZGV4Kys7XG4gIH1cbiAgcmV0dXJuIHRhcmdldEluZGV4O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGZsYXR0ZW5JbnRvQXJyYXk7XG4iLCJyZXF1aXJlKCcuLi8uLi9tb2R1bGVzL2VzNy5zdHJpbmcucGFkLXN0YXJ0Jyk7XG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4uLy4uL21vZHVsZXMvX2NvcmUnKS5TdHJpbmcucGFkU3RhcnQ7XG4iLCIndXNlIHN0cmljdCc7XG4vLyBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9wcm9wb3NhbC1zdHJpbmctcGFkLXN0YXJ0LWVuZFxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciAkcGFkID0gcmVxdWlyZSgnLi9fc3RyaW5nLXBhZCcpO1xudmFyIHVzZXJBZ2VudCA9IHJlcXVpcmUoJy4vX3VzZXItYWdlbnQnKTtcblxuLy8gaHR0cHM6Ly9naXRodWIuY29tL3psb2lyb2NrL2NvcmUtanMvaXNzdWVzLzI4MFxudmFyIFdFQktJVF9CVUcgPSAvVmVyc2lvblxcLzEwXFwuXFxkKyhcXC5cXGQrKT8oIE1vYmlsZVxcL1xcdyspPyBTYWZhcmlcXC8vLnRlc3QodXNlckFnZW50KTtcblxuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiBXRUJLSVRfQlVHLCAnU3RyaW5nJywge1xuICBwYWRTdGFydDogZnVuY3Rpb24gcGFkU3RhcnQobWF4TGVuZ3RoIC8qICwgZmlsbFN0cmluZyA9ICcgJyAqLykge1xuICAgIHJldHVybiAkcGFkKHRoaXMsIG1heExlbmd0aCwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQsIHRydWUpO1xuICB9XG59KTtcbiIsInJlcXVpcmUoJy4uLy4uL21vZHVsZXMvZXM3LnN0cmluZy5wYWQtZW5kJyk7XG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4uLy4uL21vZHVsZXMvX2NvcmUnKS5TdHJpbmcucGFkRW5kO1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gaHR0cHM6Ly9naXRodWIuY29tL3RjMzkvcHJvcG9zYWwtc3RyaW5nLXBhZC1zdGFydC1lbmRcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgJHBhZCA9IHJlcXVpcmUoJy4vX3N0cmluZy1wYWQnKTtcbnZhciB1c2VyQWdlbnQgPSByZXF1aXJlKCcuL191c2VyLWFnZW50Jyk7XG5cbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS96bG9pcm9jay9jb3JlLWpzL2lzc3Vlcy8yODBcbnZhciBXRUJLSVRfQlVHID0gL1ZlcnNpb25cXC8xMFxcLlxcZCsoXFwuXFxkKyk/KCBNb2JpbGVcXC9cXHcrKT8gU2FmYXJpXFwvLy50ZXN0KHVzZXJBZ2VudCk7XG5cbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogV0VCS0lUX0JVRywgJ1N0cmluZycsIHtcbiAgcGFkRW5kOiBmdW5jdGlvbiBwYWRFbmQobWF4TGVuZ3RoIC8qICwgZmlsbFN0cmluZyA9ICcgJyAqLykge1xuICAgIHJldHVybiAkcGFkKHRoaXMsIG1heExlbmd0aCwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQsIGZhbHNlKTtcbiAgfVxufSk7XG4iLCJyZXF1aXJlKCcuLi8uLi9tb2R1bGVzL2VzNy5zdHJpbmcudHJpbS1sZWZ0Jyk7XG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4uLy4uL21vZHVsZXMvX2NvcmUnKS5TdHJpbmcudHJpbUxlZnQ7XG4iLCIndXNlIHN0cmljdCc7XG4vLyBodHRwczovL2dpdGh1Yi5jb20vc2VibWFya2JhZ2UvZWNtYXNjcmlwdC1zdHJpbmctbGVmdC1yaWdodC10cmltXG5yZXF1aXJlKCcuL19zdHJpbmctdHJpbScpKCd0cmltTGVmdCcsIGZ1bmN0aW9uICgkdHJpbSkge1xuICByZXR1cm4gZnVuY3Rpb24gdHJpbUxlZnQoKSB7XG4gICAgcmV0dXJuICR0cmltKHRoaXMsIDEpO1xuICB9O1xufSwgJ3RyaW1TdGFydCcpO1xuIiwicmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9lczcuc3RyaW5nLnRyaW0tcmlnaHQnKTtcbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9fY29yZScpLlN0cmluZy50cmltUmlnaHQ7XG4iLCIndXNlIHN0cmljdCc7XG4vLyBodHRwczovL2dpdGh1Yi5jb20vc2VibWFya2JhZ2UvZWNtYXNjcmlwdC1zdHJpbmctbGVmdC1yaWdodC10cmltXG5yZXF1aXJlKCcuL19zdHJpbmctdHJpbScpKCd0cmltUmlnaHQnLCBmdW5jdGlvbiAoJHRyaW0pIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIHRyaW1SaWdodCgpIHtcbiAgICByZXR1cm4gJHRyaW0odGhpcywgMik7XG4gIH07XG59LCAndHJpbUVuZCcpO1xuIiwicmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9lczcuc3ltYm9sLmFzeW5jLWl0ZXJhdG9yJyk7XG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4uLy4uL21vZHVsZXMvX3drcy1leHQnKS5mKCdhc3luY0l0ZXJhdG9yJyk7XG4iLCJyZXF1aXJlKCcuL193a3MtZGVmaW5lJykoJ2FzeW5jSXRlcmF0b3InKTtcbiIsInJlcXVpcmUoJy4uLy4uL21vZHVsZXMvZXM3Lm9iamVjdC5nZXQtb3duLXByb3BlcnR5LWRlc2NyaXB0b3JzJyk7XG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4uLy4uL21vZHVsZXMvX2NvcmUnKS5PYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycztcbiIsIi8vIGh0dHBzOi8vZ2l0aHViLmNvbS90YzM5L3Byb3Bvc2FsLW9iamVjdC1nZXRvd25wcm9wZXJ0eWRlc2NyaXB0b3JzXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIG93bktleXMgPSByZXF1aXJlKCcuL19vd24ta2V5cycpO1xudmFyIHRvSU9iamVjdCA9IHJlcXVpcmUoJy4vX3RvLWlvYmplY3QnKTtcbnZhciBnT1BEID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcGQnKTtcbnZhciBjcmVhdGVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4vX2NyZWF0ZS1wcm9wZXJ0eScpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ09iamVjdCcsIHtcbiAgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yczogZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyhvYmplY3QpIHtcbiAgICB2YXIgTyA9IHRvSU9iamVjdChvYmplY3QpO1xuICAgIHZhciBnZXREZXNjID0gZ09QRC5mO1xuICAgIHZhciBrZXlzID0gb3duS2V5cyhPKTtcbiAgICB2YXIgcmVzdWx0ID0ge307XG4gICAgdmFyIGkgPSAwO1xuICAgIHZhciBrZXksIGRlc2M7XG4gICAgd2hpbGUgKGtleXMubGVuZ3RoID4gaSkge1xuICAgICAgZGVzYyA9IGdldERlc2MoTywga2V5ID0ga2V5c1tpKytdKTtcbiAgICAgIGlmIChkZXNjICE9PSB1bmRlZmluZWQpIGNyZWF0ZVByb3BlcnR5KHJlc3VsdCwga2V5LCBkZXNjKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxufSk7XG4iLCJyZXF1aXJlKCcuLi8uLi9tb2R1bGVzL2VzNy5vYmplY3QudmFsdWVzJyk7XG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4uLy4uL21vZHVsZXMvX2NvcmUnKS5PYmplY3QudmFsdWVzO1xuIiwiLy8gaHR0cHM6Ly9naXRodWIuY29tL3RjMzkvcHJvcG9zYWwtb2JqZWN0LXZhbHVlcy1lbnRyaWVzXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyICR2YWx1ZXMgPSByZXF1aXJlKCcuL19vYmplY3QtdG8tYXJyYXknKShmYWxzZSk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnT2JqZWN0Jywge1xuICB2YWx1ZXM6IGZ1bmN0aW9uIHZhbHVlcyhpdCkge1xuICAgIHJldHVybiAkdmFsdWVzKGl0KTtcbiAgfVxufSk7XG4iLCJyZXF1aXJlKCcuLi8uLi9tb2R1bGVzL2VzNy5vYmplY3QuZW50cmllcycpO1xubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuLi8uLi9tb2R1bGVzL19jb3JlJykuT2JqZWN0LmVudHJpZXM7XG4iLCIvLyBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9wcm9wb3NhbC1vYmplY3QtdmFsdWVzLWVudHJpZXNcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgJGVudHJpZXMgPSByZXF1aXJlKCcuL19vYmplY3QtdG8tYXJyYXknKSh0cnVlKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdPYmplY3QnLCB7XG4gIGVudHJpZXM6IGZ1bmN0aW9uIGVudHJpZXMoaXQpIHtcbiAgICByZXR1cm4gJGVudHJpZXMoaXQpO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnJlcXVpcmUoJy4uLy4uL21vZHVsZXMvZXM2LnByb21pc2UnKTtcbnJlcXVpcmUoJy4uLy4uL21vZHVsZXMvZXM3LnByb21pc2UuZmluYWxseScpO1xubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuLi8uLi9tb2R1bGVzL19jb3JlJykuUHJvbWlzZVsnZmluYWxseSddO1xuIiwiLy8gaHR0cHM6Ly9naXRodWIuY29tL3RjMzkvcHJvcG9zYWwtcHJvbWlzZS1maW5hbGx5XG4ndXNlIHN0cmljdCc7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIGNvcmUgPSByZXF1aXJlKCcuL19jb3JlJyk7XG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi9fZ2xvYmFsJyk7XG52YXIgc3BlY2llc0NvbnN0cnVjdG9yID0gcmVxdWlyZSgnLi9fc3BlY2llcy1jb25zdHJ1Y3RvcicpO1xudmFyIHByb21pc2VSZXNvbHZlID0gcmVxdWlyZSgnLi9fcHJvbWlzZS1yZXNvbHZlJyk7XG5cbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5SLCAnUHJvbWlzZScsIHsgJ2ZpbmFsbHknOiBmdW5jdGlvbiAob25GaW5hbGx5KSB7XG4gIHZhciBDID0gc3BlY2llc0NvbnN0cnVjdG9yKHRoaXMsIGNvcmUuUHJvbWlzZSB8fCBnbG9iYWwuUHJvbWlzZSk7XG4gIHZhciBpc0Z1bmN0aW9uID0gdHlwZW9mIG9uRmluYWxseSA9PSAnZnVuY3Rpb24nO1xuICByZXR1cm4gdGhpcy50aGVuKFxuICAgIGlzRnVuY3Rpb24gPyBmdW5jdGlvbiAoeCkge1xuICAgICAgcmV0dXJuIHByb21pc2VSZXNvbHZlKEMsIG9uRmluYWxseSgpKS50aGVuKGZ1bmN0aW9uICgpIHsgcmV0dXJuIHg7IH0pO1xuICAgIH0gOiBvbkZpbmFsbHksXG4gICAgaXNGdW5jdGlvbiA/IGZ1bmN0aW9uIChlKSB7XG4gICAgICByZXR1cm4gcHJvbWlzZVJlc29sdmUoQywgb25GaW5hbGx5KCkpLnRoZW4oZnVuY3Rpb24gKCkgeyB0aHJvdyBlOyB9KTtcbiAgICB9IDogb25GaW5hbGx5XG4gICk7XG59IH0pO1xuIiwicmVxdWlyZSgnLi4vbW9kdWxlcy93ZWIudGltZXJzJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL3dlYi5pbW1lZGlhdGUnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvd2ViLmRvbS5pdGVyYWJsZScpO1xubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuLi9tb2R1bGVzL19jb3JlJyk7XG4iLCIvLyBpZTktIHNldFRpbWVvdXQgJiBzZXRJbnRlcnZhbCBhZGRpdGlvbmFsIHBhcmFtZXRlcnMgZml4XG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi9fZ2xvYmFsJyk7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIHVzZXJBZ2VudCA9IHJlcXVpcmUoJy4vX3VzZXItYWdlbnQnKTtcbnZhciBzbGljZSA9IFtdLnNsaWNlO1xudmFyIE1TSUUgPSAvTVNJRSAuXFwuLy50ZXN0KHVzZXJBZ2VudCk7IC8vIDwtIGRpcnR5IGllOS0gY2hlY2tcbnZhciB3cmFwID0gZnVuY3Rpb24gKHNldCkge1xuICByZXR1cm4gZnVuY3Rpb24gKGZuLCB0aW1lIC8qICwgLi4uYXJncyAqLykge1xuICAgIHZhciBib3VuZEFyZ3MgPSBhcmd1bWVudHMubGVuZ3RoID4gMjtcbiAgICB2YXIgYXJncyA9IGJvdW5kQXJncyA/IHNsaWNlLmNhbGwoYXJndW1lbnRzLCAyKSA6IGZhbHNlO1xuICAgIHJldHVybiBzZXQoYm91bmRBcmdzID8gZnVuY3Rpb24gKCkge1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLW5ldy1mdW5jXG4gICAgICAodHlwZW9mIGZuID09ICdmdW5jdGlvbicgPyBmbiA6IEZ1bmN0aW9uKGZuKSkuYXBwbHkodGhpcywgYXJncyk7XG4gICAgfSA6IGZuLCB0aW1lKTtcbiAgfTtcbn07XG4kZXhwb3J0KCRleHBvcnQuRyArICRleHBvcnQuQiArICRleHBvcnQuRiAqIE1TSUUsIHtcbiAgc2V0VGltZW91dDogd3JhcChnbG9iYWwuc2V0VGltZW91dCksXG4gIHNldEludGVydmFsOiB3cmFwKGdsb2JhbC5zZXRJbnRlcnZhbClcbn0pO1xuIiwidmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciAkdGFzayA9IHJlcXVpcmUoJy4vX3Rhc2snKTtcbiRleHBvcnQoJGV4cG9ydC5HICsgJGV4cG9ydC5CLCB7XG4gIHNldEltbWVkaWF0ZTogJHRhc2suc2V0LFxuICBjbGVhckltbWVkaWF0ZTogJHRhc2suY2xlYXJcbn0pO1xuIiwidmFyICRpdGVyYXRvcnMgPSByZXF1aXJlKCcuL2VzNi5hcnJheS5pdGVyYXRvcicpO1xudmFyIGdldEtleXMgPSByZXF1aXJlKCcuL19vYmplY3Qta2V5cycpO1xudmFyIHJlZGVmaW5lID0gcmVxdWlyZSgnLi9fcmVkZWZpbmUnKTtcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuL19nbG9iYWwnKTtcbnZhciBoaWRlID0gcmVxdWlyZSgnLi9faGlkZScpO1xudmFyIEl0ZXJhdG9ycyA9IHJlcXVpcmUoJy4vX2l0ZXJhdG9ycycpO1xudmFyIHdrcyA9IHJlcXVpcmUoJy4vX3drcycpO1xudmFyIElURVJBVE9SID0gd2tzKCdpdGVyYXRvcicpO1xudmFyIFRPX1NUUklOR19UQUcgPSB3a3MoJ3RvU3RyaW5nVGFnJyk7XG52YXIgQXJyYXlWYWx1ZXMgPSBJdGVyYXRvcnMuQXJyYXk7XG5cbnZhciBET01JdGVyYWJsZXMgPSB7XG4gIENTU1J1bGVMaXN0OiB0cnVlLCAvLyBUT0RPOiBOb3Qgc3BlYyBjb21wbGlhbnQsIHNob3VsZCBiZSBmYWxzZS5cbiAgQ1NTU3R5bGVEZWNsYXJhdGlvbjogZmFsc2UsXG4gIENTU1ZhbHVlTGlzdDogZmFsc2UsXG4gIENsaWVudFJlY3RMaXN0OiBmYWxzZSxcbiAgRE9NUmVjdExpc3Q6IGZhbHNlLFxuICBET01TdHJpbmdMaXN0OiBmYWxzZSxcbiAgRE9NVG9rZW5MaXN0OiB0cnVlLFxuICBEYXRhVHJhbnNmZXJJdGVtTGlzdDogZmFsc2UsXG4gIEZpbGVMaXN0OiBmYWxzZSxcbiAgSFRNTEFsbENvbGxlY3Rpb246IGZhbHNlLFxuICBIVE1MQ29sbGVjdGlvbjogZmFsc2UsXG4gIEhUTUxGb3JtRWxlbWVudDogZmFsc2UsXG4gIEhUTUxTZWxlY3RFbGVtZW50OiBmYWxzZSxcbiAgTWVkaWFMaXN0OiB0cnVlLCAvLyBUT0RPOiBOb3Qgc3BlYyBjb21wbGlhbnQsIHNob3VsZCBiZSBmYWxzZS5cbiAgTWltZVR5cGVBcnJheTogZmFsc2UsXG4gIE5hbWVkTm9kZU1hcDogZmFsc2UsXG4gIE5vZGVMaXN0OiB0cnVlLFxuICBQYWludFJlcXVlc3RMaXN0OiBmYWxzZSxcbiAgUGx1Z2luOiBmYWxzZSxcbiAgUGx1Z2luQXJyYXk6IGZhbHNlLFxuICBTVkdMZW5ndGhMaXN0OiBmYWxzZSxcbiAgU1ZHTnVtYmVyTGlzdDogZmFsc2UsXG4gIFNWR1BhdGhTZWdMaXN0OiBmYWxzZSxcbiAgU1ZHUG9pbnRMaXN0OiBmYWxzZSxcbiAgU1ZHU3RyaW5nTGlzdDogZmFsc2UsXG4gIFNWR1RyYW5zZm9ybUxpc3Q6IGZhbHNlLFxuICBTb3VyY2VCdWZmZXJMaXN0OiBmYWxzZSxcbiAgU3R5bGVTaGVldExpc3Q6IHRydWUsIC8vIFRPRE86IE5vdCBzcGVjIGNvbXBsaWFudCwgc2hvdWxkIGJlIGZhbHNlLlxuICBUZXh0VHJhY2tDdWVMaXN0OiBmYWxzZSxcbiAgVGV4dFRyYWNrTGlzdDogZmFsc2UsXG4gIFRvdWNoTGlzdDogZmFsc2Vcbn07XG5cbmZvciAodmFyIGNvbGxlY3Rpb25zID0gZ2V0S2V5cyhET01JdGVyYWJsZXMpLCBpID0gMDsgaSA8IGNvbGxlY3Rpb25zLmxlbmd0aDsgaSsrKSB7XG4gIHZhciBOQU1FID0gY29sbGVjdGlvbnNbaV07XG4gIHZhciBleHBsaWNpdCA9IERPTUl0ZXJhYmxlc1tOQU1FXTtcbiAgdmFyIENvbGxlY3Rpb24gPSBnbG9iYWxbTkFNRV07XG4gIHZhciBwcm90byA9IENvbGxlY3Rpb24gJiYgQ29sbGVjdGlvbi5wcm90b3R5cGU7XG4gIHZhciBrZXk7XG4gIGlmIChwcm90bykge1xuICAgIGlmICghcHJvdG9bSVRFUkFUT1JdKSBoaWRlKHByb3RvLCBJVEVSQVRPUiwgQXJyYXlWYWx1ZXMpO1xuICAgIGlmICghcHJvdG9bVE9fU1RSSU5HX1RBR10pIGhpZGUocHJvdG8sIFRPX1NUUklOR19UQUcsIE5BTUUpO1xuICAgIEl0ZXJhdG9yc1tOQU1FXSA9IEFycmF5VmFsdWVzO1xuICAgIGlmIChleHBsaWNpdCkgZm9yIChrZXkgaW4gJGl0ZXJhdG9ycykgaWYgKCFwcm90b1trZXldKSByZWRlZmluZShwcm90bywga2V5LCAkaXRlcmF0b3JzW2tleV0sIHRydWUpO1xuICB9XG59XG4iLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxNC1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbnZhciBydW50aW1lID0gKGZ1bmN0aW9uIChleHBvcnRzKSB7XG4gIFwidXNlIHN0cmljdFwiO1xuXG4gIHZhciBPcCA9IE9iamVjdC5wcm90b3R5cGU7XG4gIHZhciBoYXNPd24gPSBPcC5oYXNPd25Qcm9wZXJ0eTtcbiAgdmFyIHVuZGVmaW5lZDsgLy8gTW9yZSBjb21wcmVzc2libGUgdGhhbiB2b2lkIDAuXG4gIHZhciAkU3ltYm9sID0gdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiID8gU3ltYm9sIDoge307XG4gIHZhciBpdGVyYXRvclN5bWJvbCA9ICRTeW1ib2wuaXRlcmF0b3IgfHwgXCJAQGl0ZXJhdG9yXCI7XG4gIHZhciBhc3luY0l0ZXJhdG9yU3ltYm9sID0gJFN5bWJvbC5hc3luY0l0ZXJhdG9yIHx8IFwiQEBhc3luY0l0ZXJhdG9yXCI7XG4gIHZhciB0b1N0cmluZ1RhZ1N5bWJvbCA9ICRTeW1ib2wudG9TdHJpbmdUYWcgfHwgXCJAQHRvU3RyaW5nVGFnXCI7XG5cbiAgZnVuY3Rpb24gZGVmaW5lKG9iaiwga2V5LCB2YWx1ZSkge1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwge1xuICAgICAgdmFsdWU6IHZhbHVlLFxuICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgIHdyaXRhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgcmV0dXJuIG9ialtrZXldO1xuICB9XG4gIHRyeSB7XG4gICAgLy8gSUUgOCBoYXMgYSBicm9rZW4gT2JqZWN0LmRlZmluZVByb3BlcnR5IHRoYXQgb25seSB3b3JrcyBvbiBET00gb2JqZWN0cy5cbiAgICBkZWZpbmUoe30sIFwiXCIpO1xuICB9IGNhdGNoIChlcnIpIHtcbiAgICBkZWZpbmUgPSBmdW5jdGlvbihvYmosIGtleSwgdmFsdWUpIHtcbiAgICAgIHJldHVybiBvYmpba2V5XSA9IHZhbHVlO1xuICAgIH07XG4gIH1cblxuICBmdW5jdGlvbiB3cmFwKGlubmVyRm4sIG91dGVyRm4sIHNlbGYsIHRyeUxvY3NMaXN0KSB7XG4gICAgLy8gSWYgb3V0ZXJGbiBwcm92aWRlZCBhbmQgb3V0ZXJGbi5wcm90b3R5cGUgaXMgYSBHZW5lcmF0b3IsIHRoZW4gb3V0ZXJGbi5wcm90b3R5cGUgaW5zdGFuY2VvZiBHZW5lcmF0b3IuXG4gICAgdmFyIHByb3RvR2VuZXJhdG9yID0gb3V0ZXJGbiAmJiBvdXRlckZuLnByb3RvdHlwZSBpbnN0YW5jZW9mIEdlbmVyYXRvciA/IG91dGVyRm4gOiBHZW5lcmF0b3I7XG4gICAgdmFyIGdlbmVyYXRvciA9IE9iamVjdC5jcmVhdGUocHJvdG9HZW5lcmF0b3IucHJvdG90eXBlKTtcbiAgICB2YXIgY29udGV4dCA9IG5ldyBDb250ZXh0KHRyeUxvY3NMaXN0IHx8IFtdKTtcblxuICAgIC8vIFRoZSAuX2ludm9rZSBtZXRob2QgdW5pZmllcyB0aGUgaW1wbGVtZW50YXRpb25zIG9mIHRoZSAubmV4dCxcbiAgICAvLyAudGhyb3csIGFuZCAucmV0dXJuIG1ldGhvZHMuXG4gICAgZ2VuZXJhdG9yLl9pbnZva2UgPSBtYWtlSW52b2tlTWV0aG9kKGlubmVyRm4sIHNlbGYsIGNvbnRleHQpO1xuXG4gICAgcmV0dXJuIGdlbmVyYXRvcjtcbiAgfVxuICBleHBvcnRzLndyYXAgPSB3cmFwO1xuXG4gIC8vIFRyeS9jYXRjaCBoZWxwZXIgdG8gbWluaW1pemUgZGVvcHRpbWl6YXRpb25zLiBSZXR1cm5zIGEgY29tcGxldGlvblxuICAvLyByZWNvcmQgbGlrZSBjb250ZXh0LnRyeUVudHJpZXNbaV0uY29tcGxldGlvbi4gVGhpcyBpbnRlcmZhY2UgY291bGRcbiAgLy8gaGF2ZSBiZWVuIChhbmQgd2FzIHByZXZpb3VzbHkpIGRlc2lnbmVkIHRvIHRha2UgYSBjbG9zdXJlIHRvIGJlXG4gIC8vIGludm9rZWQgd2l0aG91dCBhcmd1bWVudHMsIGJ1dCBpbiBhbGwgdGhlIGNhc2VzIHdlIGNhcmUgYWJvdXQgd2VcbiAgLy8gYWxyZWFkeSBoYXZlIGFuIGV4aXN0aW5nIG1ldGhvZCB3ZSB3YW50IHRvIGNhbGwsIHNvIHRoZXJlJ3Mgbm8gbmVlZFxuICAvLyB0byBjcmVhdGUgYSBuZXcgZnVuY3Rpb24gb2JqZWN0LiBXZSBjYW4gZXZlbiBnZXQgYXdheSB3aXRoIGFzc3VtaW5nXG4gIC8vIHRoZSBtZXRob2QgdGFrZXMgZXhhY3RseSBvbmUgYXJndW1lbnQsIHNpbmNlIHRoYXQgaGFwcGVucyB0byBiZSB0cnVlXG4gIC8vIGluIGV2ZXJ5IGNhc2UsIHNvIHdlIGRvbid0IGhhdmUgdG8gdG91Y2ggdGhlIGFyZ3VtZW50cyBvYmplY3QuIFRoZVxuICAvLyBvbmx5IGFkZGl0aW9uYWwgYWxsb2NhdGlvbiByZXF1aXJlZCBpcyB0aGUgY29tcGxldGlvbiByZWNvcmQsIHdoaWNoXG4gIC8vIGhhcyBhIHN0YWJsZSBzaGFwZSBhbmQgc28gaG9wZWZ1bGx5IHNob3VsZCBiZSBjaGVhcCB0byBhbGxvY2F0ZS5cbiAgZnVuY3Rpb24gdHJ5Q2F0Y2goZm4sIG9iaiwgYXJnKSB7XG4gICAgdHJ5IHtcbiAgICAgIHJldHVybiB7IHR5cGU6IFwibm9ybWFsXCIsIGFyZzogZm4uY2FsbChvYmosIGFyZykgfTtcbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgIHJldHVybiB7IHR5cGU6IFwidGhyb3dcIiwgYXJnOiBlcnIgfTtcbiAgICB9XG4gIH1cblxuICB2YXIgR2VuU3RhdGVTdXNwZW5kZWRTdGFydCA9IFwic3VzcGVuZGVkU3RhcnRcIjtcbiAgdmFyIEdlblN0YXRlU3VzcGVuZGVkWWllbGQgPSBcInN1c3BlbmRlZFlpZWxkXCI7XG4gIHZhciBHZW5TdGF0ZUV4ZWN1dGluZyA9IFwiZXhlY3V0aW5nXCI7XG4gIHZhciBHZW5TdGF0ZUNvbXBsZXRlZCA9IFwiY29tcGxldGVkXCI7XG5cbiAgLy8gUmV0dXJuaW5nIHRoaXMgb2JqZWN0IGZyb20gdGhlIGlubmVyRm4gaGFzIHRoZSBzYW1lIGVmZmVjdCBhc1xuICAvLyBicmVha2luZyBvdXQgb2YgdGhlIGRpc3BhdGNoIHN3aXRjaCBzdGF0ZW1lbnQuXG4gIHZhciBDb250aW51ZVNlbnRpbmVsID0ge307XG5cbiAgLy8gRHVtbXkgY29uc3RydWN0b3IgZnVuY3Rpb25zIHRoYXQgd2UgdXNlIGFzIHRoZSAuY29uc3RydWN0b3IgYW5kXG4gIC8vIC5jb25zdHJ1Y3Rvci5wcm90b3R5cGUgcHJvcGVydGllcyBmb3IgZnVuY3Rpb25zIHRoYXQgcmV0dXJuIEdlbmVyYXRvclxuICAvLyBvYmplY3RzLiBGb3IgZnVsbCBzcGVjIGNvbXBsaWFuY2UsIHlvdSBtYXkgd2lzaCB0byBjb25maWd1cmUgeW91clxuICAvLyBtaW5pZmllciBub3QgdG8gbWFuZ2xlIHRoZSBuYW1lcyBvZiB0aGVzZSB0d28gZnVuY3Rpb25zLlxuICBmdW5jdGlvbiBHZW5lcmF0b3IoKSB7fVxuICBmdW5jdGlvbiBHZW5lcmF0b3JGdW5jdGlvbigpIHt9XG4gIGZ1bmN0aW9uIEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlKCkge31cblxuICAvLyBUaGlzIGlzIGEgcG9seWZpbGwgZm9yICVJdGVyYXRvclByb3RvdHlwZSUgZm9yIGVudmlyb25tZW50cyB0aGF0XG4gIC8vIGRvbid0IG5hdGl2ZWx5IHN1cHBvcnQgaXQuXG4gIHZhciBJdGVyYXRvclByb3RvdHlwZSA9IHt9O1xuICBJdGVyYXRvclByb3RvdHlwZVtpdGVyYXRvclN5bWJvbF0gPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgdmFyIGdldFByb3RvID0gT2JqZWN0LmdldFByb3RvdHlwZU9mO1xuICB2YXIgTmF0aXZlSXRlcmF0b3JQcm90b3R5cGUgPSBnZXRQcm90byAmJiBnZXRQcm90byhnZXRQcm90byh2YWx1ZXMoW10pKSk7XG4gIGlmIChOYXRpdmVJdGVyYXRvclByb3RvdHlwZSAmJlxuICAgICAgTmF0aXZlSXRlcmF0b3JQcm90b3R5cGUgIT09IE9wICYmXG4gICAgICBoYXNPd24uY2FsbChOYXRpdmVJdGVyYXRvclByb3RvdHlwZSwgaXRlcmF0b3JTeW1ib2wpKSB7XG4gICAgLy8gVGhpcyBlbnZpcm9ubWVudCBoYXMgYSBuYXRpdmUgJUl0ZXJhdG9yUHJvdG90eXBlJTsgdXNlIGl0IGluc3RlYWRcbiAgICAvLyBvZiB0aGUgcG9seWZpbGwuXG4gICAgSXRlcmF0b3JQcm90b3R5cGUgPSBOYXRpdmVJdGVyYXRvclByb3RvdHlwZTtcbiAgfVxuXG4gIHZhciBHcCA9IEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlLnByb3RvdHlwZSA9XG4gICAgR2VuZXJhdG9yLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoSXRlcmF0b3JQcm90b3R5cGUpO1xuICBHZW5lcmF0b3JGdW5jdGlvbi5wcm90b3R5cGUgPSBHcC5jb25zdHJ1Y3RvciA9IEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlO1xuICBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IEdlbmVyYXRvckZ1bmN0aW9uO1xuICBHZW5lcmF0b3JGdW5jdGlvbi5kaXNwbGF5TmFtZSA9IGRlZmluZShcbiAgICBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZSxcbiAgICB0b1N0cmluZ1RhZ1N5bWJvbCxcbiAgICBcIkdlbmVyYXRvckZ1bmN0aW9uXCJcbiAgKTtcblxuICAvLyBIZWxwZXIgZm9yIGRlZmluaW5nIHRoZSAubmV4dCwgLnRocm93LCBhbmQgLnJldHVybiBtZXRob2RzIG9mIHRoZVxuICAvLyBJdGVyYXRvciBpbnRlcmZhY2UgaW4gdGVybXMgb2YgYSBzaW5nbGUgLl9pbnZva2UgbWV0aG9kLlxuICBmdW5jdGlvbiBkZWZpbmVJdGVyYXRvck1ldGhvZHMocHJvdG90eXBlKSB7XG4gICAgW1wibmV4dFwiLCBcInRocm93XCIsIFwicmV0dXJuXCJdLmZvckVhY2goZnVuY3Rpb24obWV0aG9kKSB7XG4gICAgICBkZWZpbmUocHJvdG90eXBlLCBtZXRob2QsIGZ1bmN0aW9uKGFyZykge1xuICAgICAgICByZXR1cm4gdGhpcy5faW52b2tlKG1ldGhvZCwgYXJnKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9XG5cbiAgZXhwb3J0cy5pc0dlbmVyYXRvckZ1bmN0aW9uID0gZnVuY3Rpb24oZ2VuRnVuKSB7XG4gICAgdmFyIGN0b3IgPSB0eXBlb2YgZ2VuRnVuID09PSBcImZ1bmN0aW9uXCIgJiYgZ2VuRnVuLmNvbnN0cnVjdG9yO1xuICAgIHJldHVybiBjdG9yXG4gICAgICA/IGN0b3IgPT09IEdlbmVyYXRvckZ1bmN0aW9uIHx8XG4gICAgICAgIC8vIEZvciB0aGUgbmF0aXZlIEdlbmVyYXRvckZ1bmN0aW9uIGNvbnN0cnVjdG9yLCB0aGUgYmVzdCB3ZSBjYW5cbiAgICAgICAgLy8gZG8gaXMgdG8gY2hlY2sgaXRzIC5uYW1lIHByb3BlcnR5LlxuICAgICAgICAoY3Rvci5kaXNwbGF5TmFtZSB8fCBjdG9yLm5hbWUpID09PSBcIkdlbmVyYXRvckZ1bmN0aW9uXCJcbiAgICAgIDogZmFsc2U7XG4gIH07XG5cbiAgZXhwb3J0cy5tYXJrID0gZnVuY3Rpb24oZ2VuRnVuKSB7XG4gICAgaWYgKE9iamVjdC5zZXRQcm90b3R5cGVPZikge1xuICAgICAgT2JqZWN0LnNldFByb3RvdHlwZU9mKGdlbkZ1biwgR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGUpO1xuICAgIH0gZWxzZSB7XG4gICAgICBnZW5GdW4uX19wcm90b19fID0gR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGU7XG4gICAgICBkZWZpbmUoZ2VuRnVuLCB0b1N0cmluZ1RhZ1N5bWJvbCwgXCJHZW5lcmF0b3JGdW5jdGlvblwiKTtcbiAgICB9XG4gICAgZ2VuRnVuLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoR3ApO1xuICAgIHJldHVybiBnZW5GdW47XG4gIH07XG5cbiAgLy8gV2l0aGluIHRoZSBib2R5IG9mIGFueSBhc3luYyBmdW5jdGlvbiwgYGF3YWl0IHhgIGlzIHRyYW5zZm9ybWVkIHRvXG4gIC8vIGB5aWVsZCByZWdlbmVyYXRvclJ1bnRpbWUuYXdyYXAoeClgLCBzbyB0aGF0IHRoZSBydW50aW1lIGNhbiB0ZXN0XG4gIC8vIGBoYXNPd24uY2FsbCh2YWx1ZSwgXCJfX2F3YWl0XCIpYCB0byBkZXRlcm1pbmUgaWYgdGhlIHlpZWxkZWQgdmFsdWUgaXNcbiAgLy8gbWVhbnQgdG8gYmUgYXdhaXRlZC5cbiAgZXhwb3J0cy5hd3JhcCA9IGZ1bmN0aW9uKGFyZykge1xuICAgIHJldHVybiB7IF9fYXdhaXQ6IGFyZyB9O1xuICB9O1xuXG4gIGZ1bmN0aW9uIEFzeW5jSXRlcmF0b3IoZ2VuZXJhdG9yLCBQcm9taXNlSW1wbCkge1xuICAgIGZ1bmN0aW9uIGludm9rZShtZXRob2QsIGFyZywgcmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICB2YXIgcmVjb3JkID0gdHJ5Q2F0Y2goZ2VuZXJhdG9yW21ldGhvZF0sIGdlbmVyYXRvciwgYXJnKTtcbiAgICAgIGlmIChyZWNvcmQudHlwZSA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgIHJlamVjdChyZWNvcmQuYXJnKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZhciByZXN1bHQgPSByZWNvcmQuYXJnO1xuICAgICAgICB2YXIgdmFsdWUgPSByZXN1bHQudmFsdWU7XG4gICAgICAgIGlmICh2YWx1ZSAmJlxuICAgICAgICAgICAgdHlwZW9mIHZhbHVlID09PSBcIm9iamVjdFwiICYmXG4gICAgICAgICAgICBoYXNPd24uY2FsbCh2YWx1ZSwgXCJfX2F3YWl0XCIpKSB7XG4gICAgICAgICAgcmV0dXJuIFByb21pc2VJbXBsLnJlc29sdmUodmFsdWUuX19hd2FpdCkudGhlbihmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICAgICAgaW52b2tlKFwibmV4dFwiLCB2YWx1ZSwgcmVzb2x2ZSwgcmVqZWN0KTtcbiAgICAgICAgICB9LCBmdW5jdGlvbihlcnIpIHtcbiAgICAgICAgICAgIGludm9rZShcInRocm93XCIsIGVyciwgcmVzb2x2ZSwgcmVqZWN0KTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBQcm9taXNlSW1wbC5yZXNvbHZlKHZhbHVlKS50aGVuKGZ1bmN0aW9uKHVud3JhcHBlZCkge1xuICAgICAgICAgIC8vIFdoZW4gYSB5aWVsZGVkIFByb21pc2UgaXMgcmVzb2x2ZWQsIGl0cyBmaW5hbCB2YWx1ZSBiZWNvbWVzXG4gICAgICAgICAgLy8gdGhlIC52YWx1ZSBvZiB0aGUgUHJvbWlzZTx7dmFsdWUsZG9uZX0+IHJlc3VsdCBmb3IgdGhlXG4gICAgICAgICAgLy8gY3VycmVudCBpdGVyYXRpb24uXG4gICAgICAgICAgcmVzdWx0LnZhbHVlID0gdW53cmFwcGVkO1xuICAgICAgICAgIHJlc29sdmUocmVzdWx0KTtcbiAgICAgICAgfSwgZnVuY3Rpb24oZXJyb3IpIHtcbiAgICAgICAgICAvLyBJZiBhIHJlamVjdGVkIFByb21pc2Ugd2FzIHlpZWxkZWQsIHRocm93IHRoZSByZWplY3Rpb24gYmFja1xuICAgICAgICAgIC8vIGludG8gdGhlIGFzeW5jIGdlbmVyYXRvciBmdW5jdGlvbiBzbyBpdCBjYW4gYmUgaGFuZGxlZCB0aGVyZS5cbiAgICAgICAgICByZXR1cm4gaW52b2tlKFwidGhyb3dcIiwgZXJyb3IsIHJlc29sdmUsIHJlamVjdCk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cblxuICAgIHZhciBwcmV2aW91c1Byb21pc2U7XG5cbiAgICBmdW5jdGlvbiBlbnF1ZXVlKG1ldGhvZCwgYXJnKSB7XG4gICAgICBmdW5jdGlvbiBjYWxsSW52b2tlV2l0aE1ldGhvZEFuZEFyZygpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlSW1wbChmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgICBpbnZva2UobWV0aG9kLCBhcmcsIHJlc29sdmUsIHJlamVjdCk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gcHJldmlvdXNQcm9taXNlID1cbiAgICAgICAgLy8gSWYgZW5xdWV1ZSBoYXMgYmVlbiBjYWxsZWQgYmVmb3JlLCB0aGVuIHdlIHdhbnQgdG8gd2FpdCB1bnRpbFxuICAgICAgICAvLyBhbGwgcHJldmlvdXMgUHJvbWlzZXMgaGF2ZSBiZWVuIHJlc29sdmVkIGJlZm9yZSBjYWxsaW5nIGludm9rZSxcbiAgICAgICAgLy8gc28gdGhhdCByZXN1bHRzIGFyZSBhbHdheXMgZGVsaXZlcmVkIGluIHRoZSBjb3JyZWN0IG9yZGVyLiBJZlxuICAgICAgICAvLyBlbnF1ZXVlIGhhcyBub3QgYmVlbiBjYWxsZWQgYmVmb3JlLCB0aGVuIGl0IGlzIGltcG9ydGFudCB0b1xuICAgICAgICAvLyBjYWxsIGludm9rZSBpbW1lZGlhdGVseSwgd2l0aG91dCB3YWl0aW5nIG9uIGEgY2FsbGJhY2sgdG8gZmlyZSxcbiAgICAgICAgLy8gc28gdGhhdCB0aGUgYXN5bmMgZ2VuZXJhdG9yIGZ1bmN0aW9uIGhhcyB0aGUgb3Bwb3J0dW5pdHkgdG8gZG9cbiAgICAgICAgLy8gYW55IG5lY2Vzc2FyeSBzZXR1cCBpbiBhIHByZWRpY3RhYmxlIHdheS4gVGhpcyBwcmVkaWN0YWJpbGl0eVxuICAgICAgICAvLyBpcyB3aHkgdGhlIFByb21pc2UgY29uc3RydWN0b3Igc3luY2hyb25vdXNseSBpbnZva2VzIGl0c1xuICAgICAgICAvLyBleGVjdXRvciBjYWxsYmFjaywgYW5kIHdoeSBhc3luYyBmdW5jdGlvbnMgc3luY2hyb25vdXNseVxuICAgICAgICAvLyBleGVjdXRlIGNvZGUgYmVmb3JlIHRoZSBmaXJzdCBhd2FpdC4gU2luY2Ugd2UgaW1wbGVtZW50IHNpbXBsZVxuICAgICAgICAvLyBhc3luYyBmdW5jdGlvbnMgaW4gdGVybXMgb2YgYXN5bmMgZ2VuZXJhdG9ycywgaXQgaXMgZXNwZWNpYWxseVxuICAgICAgICAvLyBpbXBvcnRhbnQgdG8gZ2V0IHRoaXMgcmlnaHQsIGV2ZW4gdGhvdWdoIGl0IHJlcXVpcmVzIGNhcmUuXG4gICAgICAgIHByZXZpb3VzUHJvbWlzZSA/IHByZXZpb3VzUHJvbWlzZS50aGVuKFxuICAgICAgICAgIGNhbGxJbnZva2VXaXRoTWV0aG9kQW5kQXJnLFxuICAgICAgICAgIC8vIEF2b2lkIHByb3BhZ2F0aW5nIGZhaWx1cmVzIHRvIFByb21pc2VzIHJldHVybmVkIGJ5IGxhdGVyXG4gICAgICAgICAgLy8gaW52b2NhdGlvbnMgb2YgdGhlIGl0ZXJhdG9yLlxuICAgICAgICAgIGNhbGxJbnZva2VXaXRoTWV0aG9kQW5kQXJnXG4gICAgICAgICkgOiBjYWxsSW52b2tlV2l0aE1ldGhvZEFuZEFyZygpO1xuICAgIH1cblxuICAgIC8vIERlZmluZSB0aGUgdW5pZmllZCBoZWxwZXIgbWV0aG9kIHRoYXQgaXMgdXNlZCB0byBpbXBsZW1lbnQgLm5leHQsXG4gICAgLy8gLnRocm93LCBhbmQgLnJldHVybiAoc2VlIGRlZmluZUl0ZXJhdG9yTWV0aG9kcykuXG4gICAgdGhpcy5faW52b2tlID0gZW5xdWV1ZTtcbiAgfVxuXG4gIGRlZmluZUl0ZXJhdG9yTWV0aG9kcyhBc3luY0l0ZXJhdG9yLnByb3RvdHlwZSk7XG4gIEFzeW5jSXRlcmF0b3IucHJvdG90eXBlW2FzeW5jSXRlcmF0b3JTeW1ib2xdID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB0aGlzO1xuICB9O1xuICBleHBvcnRzLkFzeW5jSXRlcmF0b3IgPSBBc3luY0l0ZXJhdG9yO1xuXG4gIC8vIE5vdGUgdGhhdCBzaW1wbGUgYXN5bmMgZnVuY3Rpb25zIGFyZSBpbXBsZW1lbnRlZCBvbiB0b3Agb2ZcbiAgLy8gQXN5bmNJdGVyYXRvciBvYmplY3RzOyB0aGV5IGp1c3QgcmV0dXJuIGEgUHJvbWlzZSBmb3IgdGhlIHZhbHVlIG9mXG4gIC8vIHRoZSBmaW5hbCByZXN1bHQgcHJvZHVjZWQgYnkgdGhlIGl0ZXJhdG9yLlxuICBleHBvcnRzLmFzeW5jID0gZnVuY3Rpb24oaW5uZXJGbiwgb3V0ZXJGbiwgc2VsZiwgdHJ5TG9jc0xpc3QsIFByb21pc2VJbXBsKSB7XG4gICAgaWYgKFByb21pc2VJbXBsID09PSB2b2lkIDApIFByb21pc2VJbXBsID0gUHJvbWlzZTtcblxuICAgIHZhciBpdGVyID0gbmV3IEFzeW5jSXRlcmF0b3IoXG4gICAgICB3cmFwKGlubmVyRm4sIG91dGVyRm4sIHNlbGYsIHRyeUxvY3NMaXN0KSxcbiAgICAgIFByb21pc2VJbXBsXG4gICAgKTtcblxuICAgIHJldHVybiBleHBvcnRzLmlzR2VuZXJhdG9yRnVuY3Rpb24ob3V0ZXJGbilcbiAgICAgID8gaXRlciAvLyBJZiBvdXRlckZuIGlzIGEgZ2VuZXJhdG9yLCByZXR1cm4gdGhlIGZ1bGwgaXRlcmF0b3IuXG4gICAgICA6IGl0ZXIubmV4dCgpLnRoZW4oZnVuY3Rpb24ocmVzdWx0KSB7XG4gICAgICAgICAgcmV0dXJuIHJlc3VsdC5kb25lID8gcmVzdWx0LnZhbHVlIDogaXRlci5uZXh0KCk7XG4gICAgICAgIH0pO1xuICB9O1xuXG4gIGZ1bmN0aW9uIG1ha2VJbnZva2VNZXRob2QoaW5uZXJGbiwgc2VsZiwgY29udGV4dCkge1xuICAgIHZhciBzdGF0ZSA9IEdlblN0YXRlU3VzcGVuZGVkU3RhcnQ7XG5cbiAgICByZXR1cm4gZnVuY3Rpb24gaW52b2tlKG1ldGhvZCwgYXJnKSB7XG4gICAgICBpZiAoc3RhdGUgPT09IEdlblN0YXRlRXhlY3V0aW5nKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIkdlbmVyYXRvciBpcyBhbHJlYWR5IHJ1bm5pbmdcIik7XG4gICAgICB9XG5cbiAgICAgIGlmIChzdGF0ZSA9PT0gR2VuU3RhdGVDb21wbGV0ZWQpIHtcbiAgICAgICAgaWYgKG1ldGhvZCA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgICAgdGhyb3cgYXJnO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gQmUgZm9yZ2l2aW5nLCBwZXIgMjUuMy4zLjMuMyBvZiB0aGUgc3BlYzpcbiAgICAgICAgLy8gaHR0cHM6Ly9wZW9wbGUubW96aWxsYS5vcmcvfmpvcmVuZG9yZmYvZXM2LWRyYWZ0Lmh0bWwjc2VjLWdlbmVyYXRvcnJlc3VtZVxuICAgICAgICByZXR1cm4gZG9uZVJlc3VsdCgpO1xuICAgICAgfVxuXG4gICAgICBjb250ZXh0Lm1ldGhvZCA9IG1ldGhvZDtcbiAgICAgIGNvbnRleHQuYXJnID0gYXJnO1xuXG4gICAgICB3aGlsZSAodHJ1ZSkge1xuICAgICAgICB2YXIgZGVsZWdhdGUgPSBjb250ZXh0LmRlbGVnYXRlO1xuICAgICAgICBpZiAoZGVsZWdhdGUpIHtcbiAgICAgICAgICB2YXIgZGVsZWdhdGVSZXN1bHQgPSBtYXliZUludm9rZURlbGVnYXRlKGRlbGVnYXRlLCBjb250ZXh0KTtcbiAgICAgICAgICBpZiAoZGVsZWdhdGVSZXN1bHQpIHtcbiAgICAgICAgICAgIGlmIChkZWxlZ2F0ZVJlc3VsdCA9PT0gQ29udGludWVTZW50aW5lbCkgY29udGludWU7XG4gICAgICAgICAgICByZXR1cm4gZGVsZWdhdGVSZXN1bHQ7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGNvbnRleHQubWV0aG9kID09PSBcIm5leHRcIikge1xuICAgICAgICAgIC8vIFNldHRpbmcgY29udGV4dC5fc2VudCBmb3IgbGVnYWN5IHN1cHBvcnQgb2YgQmFiZWwnc1xuICAgICAgICAgIC8vIGZ1bmN0aW9uLnNlbnQgaW1wbGVtZW50YXRpb24uXG4gICAgICAgICAgY29udGV4dC5zZW50ID0gY29udGV4dC5fc2VudCA9IGNvbnRleHQuYXJnO1xuXG4gICAgICAgIH0gZWxzZSBpZiAoY29udGV4dC5tZXRob2QgPT09IFwidGhyb3dcIikge1xuICAgICAgICAgIGlmIChzdGF0ZSA9PT0gR2VuU3RhdGVTdXNwZW5kZWRTdGFydCkge1xuICAgICAgICAgICAgc3RhdGUgPSBHZW5TdGF0ZUNvbXBsZXRlZDtcbiAgICAgICAgICAgIHRocm93IGNvbnRleHQuYXJnO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGNvbnRleHQuZGlzcGF0Y2hFeGNlcHRpb24oY29udGV4dC5hcmcpO1xuXG4gICAgICAgIH0gZWxzZSBpZiAoY29udGV4dC5tZXRob2QgPT09IFwicmV0dXJuXCIpIHtcbiAgICAgICAgICBjb250ZXh0LmFicnVwdChcInJldHVyblwiLCBjb250ZXh0LmFyZyk7XG4gICAgICAgIH1cblxuICAgICAgICBzdGF0ZSA9IEdlblN0YXRlRXhlY3V0aW5nO1xuXG4gICAgICAgIHZhciByZWNvcmQgPSB0cnlDYXRjaChpbm5lckZuLCBzZWxmLCBjb250ZXh0KTtcbiAgICAgICAgaWYgKHJlY29yZC50eXBlID09PSBcIm5vcm1hbFwiKSB7XG4gICAgICAgICAgLy8gSWYgYW4gZXhjZXB0aW9uIGlzIHRocm93biBmcm9tIGlubmVyRm4sIHdlIGxlYXZlIHN0YXRlID09PVxuICAgICAgICAgIC8vIEdlblN0YXRlRXhlY3V0aW5nIGFuZCBsb29wIGJhY2sgZm9yIGFub3RoZXIgaW52b2NhdGlvbi5cbiAgICAgICAgICBzdGF0ZSA9IGNvbnRleHQuZG9uZVxuICAgICAgICAgICAgPyBHZW5TdGF0ZUNvbXBsZXRlZFxuICAgICAgICAgICAgOiBHZW5TdGF0ZVN1c3BlbmRlZFlpZWxkO1xuXG4gICAgICAgICAgaWYgKHJlY29yZC5hcmcgPT09IENvbnRpbnVlU2VudGluZWwpIHtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB2YWx1ZTogcmVjb3JkLmFyZyxcbiAgICAgICAgICAgIGRvbmU6IGNvbnRleHQuZG9uZVxuICAgICAgICAgIH07XG5cbiAgICAgICAgfSBlbHNlIGlmIChyZWNvcmQudHlwZSA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgICAgc3RhdGUgPSBHZW5TdGF0ZUNvbXBsZXRlZDtcbiAgICAgICAgICAvLyBEaXNwYXRjaCB0aGUgZXhjZXB0aW9uIGJ5IGxvb3BpbmcgYmFjayBhcm91bmQgdG8gdGhlXG4gICAgICAgICAgLy8gY29udGV4dC5kaXNwYXRjaEV4Y2VwdGlvbihjb250ZXh0LmFyZykgY2FsbCBhYm92ZS5cbiAgICAgICAgICBjb250ZXh0Lm1ldGhvZCA9IFwidGhyb3dcIjtcbiAgICAgICAgICBjb250ZXh0LmFyZyA9IHJlY29yZC5hcmc7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9O1xuICB9XG5cbiAgLy8gQ2FsbCBkZWxlZ2F0ZS5pdGVyYXRvcltjb250ZXh0Lm1ldGhvZF0oY29udGV4dC5hcmcpIGFuZCBoYW5kbGUgdGhlXG4gIC8vIHJlc3VsdCwgZWl0aGVyIGJ5IHJldHVybmluZyBhIHsgdmFsdWUsIGRvbmUgfSByZXN1bHQgZnJvbSB0aGVcbiAgLy8gZGVsZWdhdGUgaXRlcmF0b3IsIG9yIGJ5IG1vZGlmeWluZyBjb250ZXh0Lm1ldGhvZCBhbmQgY29udGV4dC5hcmcsXG4gIC8vIHNldHRpbmcgY29udGV4dC5kZWxlZ2F0ZSB0byBudWxsLCBhbmQgcmV0dXJuaW5nIHRoZSBDb250aW51ZVNlbnRpbmVsLlxuICBmdW5jdGlvbiBtYXliZUludm9rZURlbGVnYXRlKGRlbGVnYXRlLCBjb250ZXh0KSB7XG4gICAgdmFyIG1ldGhvZCA9IGRlbGVnYXRlLml0ZXJhdG9yW2NvbnRleHQubWV0aG9kXTtcbiAgICBpZiAobWV0aG9kID09PSB1bmRlZmluZWQpIHtcbiAgICAgIC8vIEEgLnRocm93IG9yIC5yZXR1cm4gd2hlbiB0aGUgZGVsZWdhdGUgaXRlcmF0b3IgaGFzIG5vIC50aHJvd1xuICAgICAgLy8gbWV0aG9kIGFsd2F5cyB0ZXJtaW5hdGVzIHRoZSB5aWVsZCogbG9vcC5cbiAgICAgIGNvbnRleHQuZGVsZWdhdGUgPSBudWxsO1xuXG4gICAgICBpZiAoY29udGV4dC5tZXRob2QgPT09IFwidGhyb3dcIikge1xuICAgICAgICAvLyBOb3RlOiBbXCJyZXR1cm5cIl0gbXVzdCBiZSB1c2VkIGZvciBFUzMgcGFyc2luZyBjb21wYXRpYmlsaXR5LlxuICAgICAgICBpZiAoZGVsZWdhdGUuaXRlcmF0b3JbXCJyZXR1cm5cIl0pIHtcbiAgICAgICAgICAvLyBJZiB0aGUgZGVsZWdhdGUgaXRlcmF0b3IgaGFzIGEgcmV0dXJuIG1ldGhvZCwgZ2l2ZSBpdCBhXG4gICAgICAgICAgLy8gY2hhbmNlIHRvIGNsZWFuIHVwLlxuICAgICAgICAgIGNvbnRleHQubWV0aG9kID0gXCJyZXR1cm5cIjtcbiAgICAgICAgICBjb250ZXh0LmFyZyA9IHVuZGVmaW5lZDtcbiAgICAgICAgICBtYXliZUludm9rZURlbGVnYXRlKGRlbGVnYXRlLCBjb250ZXh0KTtcblxuICAgICAgICAgIGlmIChjb250ZXh0Lm1ldGhvZCA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgICAgICAvLyBJZiBtYXliZUludm9rZURlbGVnYXRlKGNvbnRleHQpIGNoYW5nZWQgY29udGV4dC5tZXRob2QgZnJvbVxuICAgICAgICAgICAgLy8gXCJyZXR1cm5cIiB0byBcInRocm93XCIsIGxldCB0aGF0IG92ZXJyaWRlIHRoZSBUeXBlRXJyb3IgYmVsb3cuXG4gICAgICAgICAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBjb250ZXh0Lm1ldGhvZCA9IFwidGhyb3dcIjtcbiAgICAgICAgY29udGV4dC5hcmcgPSBuZXcgVHlwZUVycm9yKFxuICAgICAgICAgIFwiVGhlIGl0ZXJhdG9yIGRvZXMgbm90IHByb3ZpZGUgYSAndGhyb3cnIG1ldGhvZFwiKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gICAgfVxuXG4gICAgdmFyIHJlY29yZCA9IHRyeUNhdGNoKG1ldGhvZCwgZGVsZWdhdGUuaXRlcmF0b3IsIGNvbnRleHQuYXJnKTtcblxuICAgIGlmIChyZWNvcmQudHlwZSA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICBjb250ZXh0Lm1ldGhvZCA9IFwidGhyb3dcIjtcbiAgICAgIGNvbnRleHQuYXJnID0gcmVjb3JkLmFyZztcbiAgICAgIGNvbnRleHQuZGVsZWdhdGUgPSBudWxsO1xuICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gICAgfVxuXG4gICAgdmFyIGluZm8gPSByZWNvcmQuYXJnO1xuXG4gICAgaWYgKCEgaW5mbykge1xuICAgICAgY29udGV4dC5tZXRob2QgPSBcInRocm93XCI7XG4gICAgICBjb250ZXh0LmFyZyA9IG5ldyBUeXBlRXJyb3IoXCJpdGVyYXRvciByZXN1bHQgaXMgbm90IGFuIG9iamVjdFwiKTtcbiAgICAgIGNvbnRleHQuZGVsZWdhdGUgPSBudWxsO1xuICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gICAgfVxuXG4gICAgaWYgKGluZm8uZG9uZSkge1xuICAgICAgLy8gQXNzaWduIHRoZSByZXN1bHQgb2YgdGhlIGZpbmlzaGVkIGRlbGVnYXRlIHRvIHRoZSB0ZW1wb3JhcnlcbiAgICAgIC8vIHZhcmlhYmxlIHNwZWNpZmllZCBieSBkZWxlZ2F0ZS5yZXN1bHROYW1lIChzZWUgZGVsZWdhdGVZaWVsZCkuXG4gICAgICBjb250ZXh0W2RlbGVnYXRlLnJlc3VsdE5hbWVdID0gaW5mby52YWx1ZTtcblxuICAgICAgLy8gUmVzdW1lIGV4ZWN1dGlvbiBhdCB0aGUgZGVzaXJlZCBsb2NhdGlvbiAoc2VlIGRlbGVnYXRlWWllbGQpLlxuICAgICAgY29udGV4dC5uZXh0ID0gZGVsZWdhdGUubmV4dExvYztcblxuICAgICAgLy8gSWYgY29udGV4dC5tZXRob2Qgd2FzIFwidGhyb3dcIiBidXQgdGhlIGRlbGVnYXRlIGhhbmRsZWQgdGhlXG4gICAgICAvLyBleGNlcHRpb24sIGxldCB0aGUgb3V0ZXIgZ2VuZXJhdG9yIHByb2NlZWQgbm9ybWFsbHkuIElmXG4gICAgICAvLyBjb250ZXh0Lm1ldGhvZCB3YXMgXCJuZXh0XCIsIGZvcmdldCBjb250ZXh0LmFyZyBzaW5jZSBpdCBoYXMgYmVlblxuICAgICAgLy8gXCJjb25zdW1lZFwiIGJ5IHRoZSBkZWxlZ2F0ZSBpdGVyYXRvci4gSWYgY29udGV4dC5tZXRob2Qgd2FzXG4gICAgICAvLyBcInJldHVyblwiLCBhbGxvdyB0aGUgb3JpZ2luYWwgLnJldHVybiBjYWxsIHRvIGNvbnRpbnVlIGluIHRoZVxuICAgICAgLy8gb3V0ZXIgZ2VuZXJhdG9yLlxuICAgICAgaWYgKGNvbnRleHQubWV0aG9kICE9PSBcInJldHVyblwiKSB7XG4gICAgICAgIGNvbnRleHQubWV0aG9kID0gXCJuZXh0XCI7XG4gICAgICAgIGNvbnRleHQuYXJnID0gdW5kZWZpbmVkO1xuICAgICAgfVxuXG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIFJlLXlpZWxkIHRoZSByZXN1bHQgcmV0dXJuZWQgYnkgdGhlIGRlbGVnYXRlIG1ldGhvZC5cbiAgICAgIHJldHVybiBpbmZvO1xuICAgIH1cblxuICAgIC8vIFRoZSBkZWxlZ2F0ZSBpdGVyYXRvciBpcyBmaW5pc2hlZCwgc28gZm9yZ2V0IGl0IGFuZCBjb250aW51ZSB3aXRoXG4gICAgLy8gdGhlIG91dGVyIGdlbmVyYXRvci5cbiAgICBjb250ZXh0LmRlbGVnYXRlID0gbnVsbDtcbiAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgfVxuXG4gIC8vIERlZmluZSBHZW5lcmF0b3IucHJvdG90eXBlLntuZXh0LHRocm93LHJldHVybn0gaW4gdGVybXMgb2YgdGhlXG4gIC8vIHVuaWZpZWQgLl9pbnZva2UgaGVscGVyIG1ldGhvZC5cbiAgZGVmaW5lSXRlcmF0b3JNZXRob2RzKEdwKTtcblxuICBkZWZpbmUoR3AsIHRvU3RyaW5nVGFnU3ltYm9sLCBcIkdlbmVyYXRvclwiKTtcblxuICAvLyBBIEdlbmVyYXRvciBzaG91bGQgYWx3YXlzIHJldHVybiBpdHNlbGYgYXMgdGhlIGl0ZXJhdG9yIG9iamVjdCB3aGVuIHRoZVxuICAvLyBAQGl0ZXJhdG9yIGZ1bmN0aW9uIGlzIGNhbGxlZCBvbiBpdC4gU29tZSBicm93c2VycycgaW1wbGVtZW50YXRpb25zIG9mIHRoZVxuICAvLyBpdGVyYXRvciBwcm90b3R5cGUgY2hhaW4gaW5jb3JyZWN0bHkgaW1wbGVtZW50IHRoaXMsIGNhdXNpbmcgdGhlIEdlbmVyYXRvclxuICAvLyBvYmplY3QgdG8gbm90IGJlIHJldHVybmVkIGZyb20gdGhpcyBjYWxsLiBUaGlzIGVuc3VyZXMgdGhhdCBkb2Vzbid0IGhhcHBlbi5cbiAgLy8gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9mYWNlYm9vay9yZWdlbmVyYXRvci9pc3N1ZXMvMjc0IGZvciBtb3JlIGRldGFpbHMuXG4gIEdwW2l0ZXJhdG9yU3ltYm9sXSA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIEdwLnRvU3RyaW5nID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIFwiW29iamVjdCBHZW5lcmF0b3JdXCI7XG4gIH07XG5cbiAgZnVuY3Rpb24gcHVzaFRyeUVudHJ5KGxvY3MpIHtcbiAgICB2YXIgZW50cnkgPSB7IHRyeUxvYzogbG9jc1swXSB9O1xuXG4gICAgaWYgKDEgaW4gbG9jcykge1xuICAgICAgZW50cnkuY2F0Y2hMb2MgPSBsb2NzWzFdO1xuICAgIH1cblxuICAgIGlmICgyIGluIGxvY3MpIHtcbiAgICAgIGVudHJ5LmZpbmFsbHlMb2MgPSBsb2NzWzJdO1xuICAgICAgZW50cnkuYWZ0ZXJMb2MgPSBsb2NzWzNdO1xuICAgIH1cblxuICAgIHRoaXMudHJ5RW50cmllcy5wdXNoKGVudHJ5KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHJlc2V0VHJ5RW50cnkoZW50cnkpIHtcbiAgICB2YXIgcmVjb3JkID0gZW50cnkuY29tcGxldGlvbiB8fCB7fTtcbiAgICByZWNvcmQudHlwZSA9IFwibm9ybWFsXCI7XG4gICAgZGVsZXRlIHJlY29yZC5hcmc7XG4gICAgZW50cnkuY29tcGxldGlvbiA9IHJlY29yZDtcbiAgfVxuXG4gIGZ1bmN0aW9uIENvbnRleHQodHJ5TG9jc0xpc3QpIHtcbiAgICAvLyBUaGUgcm9vdCBlbnRyeSBvYmplY3QgKGVmZmVjdGl2ZWx5IGEgdHJ5IHN0YXRlbWVudCB3aXRob3V0IGEgY2F0Y2hcbiAgICAvLyBvciBhIGZpbmFsbHkgYmxvY2spIGdpdmVzIHVzIGEgcGxhY2UgdG8gc3RvcmUgdmFsdWVzIHRocm93biBmcm9tXG4gICAgLy8gbG9jYXRpb25zIHdoZXJlIHRoZXJlIGlzIG5vIGVuY2xvc2luZyB0cnkgc3RhdGVtZW50LlxuICAgIHRoaXMudHJ5RW50cmllcyA9IFt7IHRyeUxvYzogXCJyb290XCIgfV07XG4gICAgdHJ5TG9jc0xpc3QuZm9yRWFjaChwdXNoVHJ5RW50cnksIHRoaXMpO1xuICAgIHRoaXMucmVzZXQodHJ1ZSk7XG4gIH1cblxuICBleHBvcnRzLmtleXMgPSBmdW5jdGlvbihvYmplY3QpIHtcbiAgICB2YXIga2V5cyA9IFtdO1xuICAgIGZvciAodmFyIGtleSBpbiBvYmplY3QpIHtcbiAgICAgIGtleXMucHVzaChrZXkpO1xuICAgIH1cbiAgICBrZXlzLnJldmVyc2UoKTtcblxuICAgIC8vIFJhdGhlciB0aGFuIHJldHVybmluZyBhbiBvYmplY3Qgd2l0aCBhIG5leHQgbWV0aG9kLCB3ZSBrZWVwXG4gICAgLy8gdGhpbmdzIHNpbXBsZSBhbmQgcmV0dXJuIHRoZSBuZXh0IGZ1bmN0aW9uIGl0c2VsZi5cbiAgICByZXR1cm4gZnVuY3Rpb24gbmV4dCgpIHtcbiAgICAgIHdoaWxlIChrZXlzLmxlbmd0aCkge1xuICAgICAgICB2YXIga2V5ID0ga2V5cy5wb3AoKTtcbiAgICAgICAgaWYgKGtleSBpbiBvYmplY3QpIHtcbiAgICAgICAgICBuZXh0LnZhbHVlID0ga2V5O1xuICAgICAgICAgIG5leHQuZG9uZSA9IGZhbHNlO1xuICAgICAgICAgIHJldHVybiBuZXh0O1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8vIFRvIGF2b2lkIGNyZWF0aW5nIGFuIGFkZGl0aW9uYWwgb2JqZWN0LCB3ZSBqdXN0IGhhbmcgdGhlIC52YWx1ZVxuICAgICAgLy8gYW5kIC5kb25lIHByb3BlcnRpZXMgb2ZmIHRoZSBuZXh0IGZ1bmN0aW9uIG9iamVjdCBpdHNlbGYuIFRoaXNcbiAgICAgIC8vIGFsc28gZW5zdXJlcyB0aGF0IHRoZSBtaW5pZmllciB3aWxsIG5vdCBhbm9ueW1pemUgdGhlIGZ1bmN0aW9uLlxuICAgICAgbmV4dC5kb25lID0gdHJ1ZTtcbiAgICAgIHJldHVybiBuZXh0O1xuICAgIH07XG4gIH07XG5cbiAgZnVuY3Rpb24gdmFsdWVzKGl0ZXJhYmxlKSB7XG4gICAgaWYgKGl0ZXJhYmxlKSB7XG4gICAgICB2YXIgaXRlcmF0b3JNZXRob2QgPSBpdGVyYWJsZVtpdGVyYXRvclN5bWJvbF07XG4gICAgICBpZiAoaXRlcmF0b3JNZXRob2QpIHtcbiAgICAgICAgcmV0dXJuIGl0ZXJhdG9yTWV0aG9kLmNhbGwoaXRlcmFibGUpO1xuICAgICAgfVxuXG4gICAgICBpZiAodHlwZW9mIGl0ZXJhYmxlLm5leHQgPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICByZXR1cm4gaXRlcmFibGU7XG4gICAgICB9XG5cbiAgICAgIGlmICghaXNOYU4oaXRlcmFibGUubGVuZ3RoKSkge1xuICAgICAgICB2YXIgaSA9IC0xLCBuZXh0ID0gZnVuY3Rpb24gbmV4dCgpIHtcbiAgICAgICAgICB3aGlsZSAoKytpIDwgaXRlcmFibGUubGVuZ3RoKSB7XG4gICAgICAgICAgICBpZiAoaGFzT3duLmNhbGwoaXRlcmFibGUsIGkpKSB7XG4gICAgICAgICAgICAgIG5leHQudmFsdWUgPSBpdGVyYWJsZVtpXTtcbiAgICAgICAgICAgICAgbmV4dC5kb25lID0gZmFsc2U7XG4gICAgICAgICAgICAgIHJldHVybiBuZXh0O1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgIG5leHQudmFsdWUgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgbmV4dC5kb25lID0gdHJ1ZTtcblxuICAgICAgICAgIHJldHVybiBuZXh0O1xuICAgICAgICB9O1xuXG4gICAgICAgIHJldHVybiBuZXh0Lm5leHQgPSBuZXh0O1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIFJldHVybiBhbiBpdGVyYXRvciB3aXRoIG5vIHZhbHVlcy5cbiAgICByZXR1cm4geyBuZXh0OiBkb25lUmVzdWx0IH07XG4gIH1cbiAgZXhwb3J0cy52YWx1ZXMgPSB2YWx1ZXM7XG5cbiAgZnVuY3Rpb24gZG9uZVJlc3VsdCgpIHtcbiAgICByZXR1cm4geyB2YWx1ZTogdW5kZWZpbmVkLCBkb25lOiB0cnVlIH07XG4gIH1cblxuICBDb250ZXh0LnByb3RvdHlwZSA9IHtcbiAgICBjb25zdHJ1Y3RvcjogQ29udGV4dCxcblxuICAgIHJlc2V0OiBmdW5jdGlvbihza2lwVGVtcFJlc2V0KSB7XG4gICAgICB0aGlzLnByZXYgPSAwO1xuICAgICAgdGhpcy5uZXh0ID0gMDtcbiAgICAgIC8vIFJlc2V0dGluZyBjb250ZXh0Ll9zZW50IGZvciBsZWdhY3kgc3VwcG9ydCBvZiBCYWJlbCdzXG4gICAgICAvLyBmdW5jdGlvbi5zZW50IGltcGxlbWVudGF0aW9uLlxuICAgICAgdGhpcy5zZW50ID0gdGhpcy5fc2VudCA9IHVuZGVmaW5lZDtcbiAgICAgIHRoaXMuZG9uZSA9IGZhbHNlO1xuICAgICAgdGhpcy5kZWxlZ2F0ZSA9IG51bGw7XG5cbiAgICAgIHRoaXMubWV0aG9kID0gXCJuZXh0XCI7XG4gICAgICB0aGlzLmFyZyA9IHVuZGVmaW5lZDtcblxuICAgICAgdGhpcy50cnlFbnRyaWVzLmZvckVhY2gocmVzZXRUcnlFbnRyeSk7XG5cbiAgICAgIGlmICghc2tpcFRlbXBSZXNldCkge1xuICAgICAgICBmb3IgKHZhciBuYW1lIGluIHRoaXMpIHtcbiAgICAgICAgICAvLyBOb3Qgc3VyZSBhYm91dCB0aGUgb3B0aW1hbCBvcmRlciBvZiB0aGVzZSBjb25kaXRpb25zOlxuICAgICAgICAgIGlmIChuYW1lLmNoYXJBdCgwKSA9PT0gXCJ0XCIgJiZcbiAgICAgICAgICAgICAgaGFzT3duLmNhbGwodGhpcywgbmFtZSkgJiZcbiAgICAgICAgICAgICAgIWlzTmFOKCtuYW1lLnNsaWNlKDEpKSkge1xuICAgICAgICAgICAgdGhpc1tuYW1lXSA9IHVuZGVmaW5lZDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuXG4gICAgc3RvcDogZnVuY3Rpb24oKSB7XG4gICAgICB0aGlzLmRvbmUgPSB0cnVlO1xuXG4gICAgICB2YXIgcm9vdEVudHJ5ID0gdGhpcy50cnlFbnRyaWVzWzBdO1xuICAgICAgdmFyIHJvb3RSZWNvcmQgPSByb290RW50cnkuY29tcGxldGlvbjtcbiAgICAgIGlmIChyb290UmVjb3JkLnR5cGUgPT09IFwidGhyb3dcIikge1xuICAgICAgICB0aHJvdyByb290UmVjb3JkLmFyZztcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRoaXMucnZhbDtcbiAgICB9LFxuXG4gICAgZGlzcGF0Y2hFeGNlcHRpb246IGZ1bmN0aW9uKGV4Y2VwdGlvbikge1xuICAgICAgaWYgKHRoaXMuZG9uZSkge1xuICAgICAgICB0aHJvdyBleGNlcHRpb247XG4gICAgICB9XG5cbiAgICAgIHZhciBjb250ZXh0ID0gdGhpcztcbiAgICAgIGZ1bmN0aW9uIGhhbmRsZShsb2MsIGNhdWdodCkge1xuICAgICAgICByZWNvcmQudHlwZSA9IFwidGhyb3dcIjtcbiAgICAgICAgcmVjb3JkLmFyZyA9IGV4Y2VwdGlvbjtcbiAgICAgICAgY29udGV4dC5uZXh0ID0gbG9jO1xuXG4gICAgICAgIGlmIChjYXVnaHQpIHtcbiAgICAgICAgICAvLyBJZiB0aGUgZGlzcGF0Y2hlZCBleGNlcHRpb24gd2FzIGNhdWdodCBieSBhIGNhdGNoIGJsb2NrLFxuICAgICAgICAgIC8vIHRoZW4gbGV0IHRoYXQgY2F0Y2ggYmxvY2sgaGFuZGxlIHRoZSBleGNlcHRpb24gbm9ybWFsbHkuXG4gICAgICAgICAgY29udGV4dC5tZXRob2QgPSBcIm5leHRcIjtcbiAgICAgICAgICBjb250ZXh0LmFyZyA9IHVuZGVmaW5lZDtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiAhISBjYXVnaHQ7XG4gICAgICB9XG5cbiAgICAgIGZvciAodmFyIGkgPSB0aGlzLnRyeUVudHJpZXMubGVuZ3RoIC0gMTsgaSA+PSAwOyAtLWkpIHtcbiAgICAgICAgdmFyIGVudHJ5ID0gdGhpcy50cnlFbnRyaWVzW2ldO1xuICAgICAgICB2YXIgcmVjb3JkID0gZW50cnkuY29tcGxldGlvbjtcblxuICAgICAgICBpZiAoZW50cnkudHJ5TG9jID09PSBcInJvb3RcIikge1xuICAgICAgICAgIC8vIEV4Y2VwdGlvbiB0aHJvd24gb3V0c2lkZSBvZiBhbnkgdHJ5IGJsb2NrIHRoYXQgY291bGQgaGFuZGxlXG4gICAgICAgICAgLy8gaXQsIHNvIHNldCB0aGUgY29tcGxldGlvbiB2YWx1ZSBvZiB0aGUgZW50aXJlIGZ1bmN0aW9uIHRvXG4gICAgICAgICAgLy8gdGhyb3cgdGhlIGV4Y2VwdGlvbi5cbiAgICAgICAgICByZXR1cm4gaGFuZGxlKFwiZW5kXCIpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGVudHJ5LnRyeUxvYyA8PSB0aGlzLnByZXYpIHtcbiAgICAgICAgICB2YXIgaGFzQ2F0Y2ggPSBoYXNPd24uY2FsbChlbnRyeSwgXCJjYXRjaExvY1wiKTtcbiAgICAgICAgICB2YXIgaGFzRmluYWxseSA9IGhhc093bi5jYWxsKGVudHJ5LCBcImZpbmFsbHlMb2NcIik7XG5cbiAgICAgICAgICBpZiAoaGFzQ2F0Y2ggJiYgaGFzRmluYWxseSkge1xuICAgICAgICAgICAgaWYgKHRoaXMucHJldiA8IGVudHJ5LmNhdGNoTG9jKSB7XG4gICAgICAgICAgICAgIHJldHVybiBoYW5kbGUoZW50cnkuY2F0Y2hMb2MsIHRydWUpO1xuICAgICAgICAgICAgfSBlbHNlIGlmICh0aGlzLnByZXYgPCBlbnRyeS5maW5hbGx5TG9jKSB7XG4gICAgICAgICAgICAgIHJldHVybiBoYW5kbGUoZW50cnkuZmluYWxseUxvYyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICB9IGVsc2UgaWYgKGhhc0NhdGNoKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5wcmV2IDwgZW50cnkuY2F0Y2hMb2MpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGhhbmRsZShlbnRyeS5jYXRjaExvYywgdHJ1ZSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICB9IGVsc2UgaWYgKGhhc0ZpbmFsbHkpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLnByZXYgPCBlbnRyeS5maW5hbGx5TG9jKSB7XG4gICAgICAgICAgICAgIHJldHVybiBoYW5kbGUoZW50cnkuZmluYWxseUxvYyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwidHJ5IHN0YXRlbWVudCB3aXRob3V0IGNhdGNoIG9yIGZpbmFsbHlcIik7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcblxuICAgIGFicnVwdDogZnVuY3Rpb24odHlwZSwgYXJnKSB7XG4gICAgICBmb3IgKHZhciBpID0gdGhpcy50cnlFbnRyaWVzLmxlbmd0aCAtIDE7IGkgPj0gMDsgLS1pKSB7XG4gICAgICAgIHZhciBlbnRyeSA9IHRoaXMudHJ5RW50cmllc1tpXTtcbiAgICAgICAgaWYgKGVudHJ5LnRyeUxvYyA8PSB0aGlzLnByZXYgJiZcbiAgICAgICAgICAgIGhhc093bi5jYWxsKGVudHJ5LCBcImZpbmFsbHlMb2NcIikgJiZcbiAgICAgICAgICAgIHRoaXMucHJldiA8IGVudHJ5LmZpbmFsbHlMb2MpIHtcbiAgICAgICAgICB2YXIgZmluYWxseUVudHJ5ID0gZW50cnk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKGZpbmFsbHlFbnRyeSAmJlxuICAgICAgICAgICh0eXBlID09PSBcImJyZWFrXCIgfHxcbiAgICAgICAgICAgdHlwZSA9PT0gXCJjb250aW51ZVwiKSAmJlxuICAgICAgICAgIGZpbmFsbHlFbnRyeS50cnlMb2MgPD0gYXJnICYmXG4gICAgICAgICAgYXJnIDw9IGZpbmFsbHlFbnRyeS5maW5hbGx5TG9jKSB7XG4gICAgICAgIC8vIElnbm9yZSB0aGUgZmluYWxseSBlbnRyeSBpZiBjb250cm9sIGlzIG5vdCBqdW1waW5nIHRvIGFcbiAgICAgICAgLy8gbG9jYXRpb24gb3V0c2lkZSB0aGUgdHJ5L2NhdGNoIGJsb2NrLlxuICAgICAgICBmaW5hbGx5RW50cnkgPSBudWxsO1xuICAgICAgfVxuXG4gICAgICB2YXIgcmVjb3JkID0gZmluYWxseUVudHJ5ID8gZmluYWxseUVudHJ5LmNvbXBsZXRpb24gOiB7fTtcbiAgICAgIHJlY29yZC50eXBlID0gdHlwZTtcbiAgICAgIHJlY29yZC5hcmcgPSBhcmc7XG5cbiAgICAgIGlmIChmaW5hbGx5RW50cnkpIHtcbiAgICAgICAgdGhpcy5tZXRob2QgPSBcIm5leHRcIjtcbiAgICAgICAgdGhpcy5uZXh0ID0gZmluYWxseUVudHJ5LmZpbmFsbHlMb2M7XG4gICAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdGhpcy5jb21wbGV0ZShyZWNvcmQpO1xuICAgIH0sXG5cbiAgICBjb21wbGV0ZTogZnVuY3Rpb24ocmVjb3JkLCBhZnRlckxvYykge1xuICAgICAgaWYgKHJlY29yZC50eXBlID09PSBcInRocm93XCIpIHtcbiAgICAgICAgdGhyb3cgcmVjb3JkLmFyZztcbiAgICAgIH1cblxuICAgICAgaWYgKHJlY29yZC50eXBlID09PSBcImJyZWFrXCIgfHxcbiAgICAgICAgICByZWNvcmQudHlwZSA9PT0gXCJjb250aW51ZVwiKSB7XG4gICAgICAgIHRoaXMubmV4dCA9IHJlY29yZC5hcmc7XG4gICAgICB9IGVsc2UgaWYgKHJlY29yZC50eXBlID09PSBcInJldHVyblwiKSB7XG4gICAgICAgIHRoaXMucnZhbCA9IHRoaXMuYXJnID0gcmVjb3JkLmFyZztcbiAgICAgICAgdGhpcy5tZXRob2QgPSBcInJldHVyblwiO1xuICAgICAgICB0aGlzLm5leHQgPSBcImVuZFwiO1xuICAgICAgfSBlbHNlIGlmIChyZWNvcmQudHlwZSA9PT0gXCJub3JtYWxcIiAmJiBhZnRlckxvYykge1xuICAgICAgICB0aGlzLm5leHQgPSBhZnRlckxvYztcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gICAgfSxcblxuICAgIGZpbmlzaDogZnVuY3Rpb24oZmluYWxseUxvYykge1xuICAgICAgZm9yICh2YXIgaSA9IHRoaXMudHJ5RW50cmllcy5sZW5ndGggLSAxOyBpID49IDA7IC0taSkge1xuICAgICAgICB2YXIgZW50cnkgPSB0aGlzLnRyeUVudHJpZXNbaV07XG4gICAgICAgIGlmIChlbnRyeS5maW5hbGx5TG9jID09PSBmaW5hbGx5TG9jKSB7XG4gICAgICAgICAgdGhpcy5jb21wbGV0ZShlbnRyeS5jb21wbGV0aW9uLCBlbnRyeS5hZnRlckxvYyk7XG4gICAgICAgICAgcmVzZXRUcnlFbnRyeShlbnRyeSk7XG4gICAgICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuXG4gICAgXCJjYXRjaFwiOiBmdW5jdGlvbih0cnlMb2MpIHtcbiAgICAgIGZvciAodmFyIGkgPSB0aGlzLnRyeUVudHJpZXMubGVuZ3RoIC0gMTsgaSA+PSAwOyAtLWkpIHtcbiAgICAgICAgdmFyIGVudHJ5ID0gdGhpcy50cnlFbnRyaWVzW2ldO1xuICAgICAgICBpZiAoZW50cnkudHJ5TG9jID09PSB0cnlMb2MpIHtcbiAgICAgICAgICB2YXIgcmVjb3JkID0gZW50cnkuY29tcGxldGlvbjtcbiAgICAgICAgICBpZiAocmVjb3JkLnR5cGUgPT09IFwidGhyb3dcIikge1xuICAgICAgICAgICAgdmFyIHRocm93biA9IHJlY29yZC5hcmc7XG4gICAgICAgICAgICByZXNldFRyeUVudHJ5KGVudHJ5KTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIHRocm93bjtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvLyBUaGUgY29udGV4dC5jYXRjaCBtZXRob2QgbXVzdCBvbmx5IGJlIGNhbGxlZCB3aXRoIGEgbG9jYXRpb25cbiAgICAgIC8vIGFyZ3VtZW50IHRoYXQgY29ycmVzcG9uZHMgdG8gYSBrbm93biBjYXRjaCBibG9jay5cbiAgICAgIHRocm93IG5ldyBFcnJvcihcImlsbGVnYWwgY2F0Y2ggYXR0ZW1wdFwiKTtcbiAgICB9LFxuXG4gICAgZGVsZWdhdGVZaWVsZDogZnVuY3Rpb24oaXRlcmFibGUsIHJlc3VsdE5hbWUsIG5leHRMb2MpIHtcbiAgICAgIHRoaXMuZGVsZWdhdGUgPSB7XG4gICAgICAgIGl0ZXJhdG9yOiB2YWx1ZXMoaXRlcmFibGUpLFxuICAgICAgICByZXN1bHROYW1lOiByZXN1bHROYW1lLFxuICAgICAgICBuZXh0TG9jOiBuZXh0TG9jXG4gICAgICB9O1xuXG4gICAgICBpZiAodGhpcy5tZXRob2QgPT09IFwibmV4dFwiKSB7XG4gICAgICAgIC8vIERlbGliZXJhdGVseSBmb3JnZXQgdGhlIGxhc3Qgc2VudCB2YWx1ZSBzbyB0aGF0IHdlIGRvbid0XG4gICAgICAgIC8vIGFjY2lkZW50YWxseSBwYXNzIGl0IG9uIHRvIHRoZSBkZWxlZ2F0ZS5cbiAgICAgICAgdGhpcy5hcmcgPSB1bmRlZmluZWQ7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgIH1cbiAgfTtcblxuICAvLyBSZWdhcmRsZXNzIG9mIHdoZXRoZXIgdGhpcyBzY3JpcHQgaXMgZXhlY3V0aW5nIGFzIGEgQ29tbW9uSlMgbW9kdWxlXG4gIC8vIG9yIG5vdCwgcmV0dXJuIHRoZSBydW50aW1lIG9iamVjdCBzbyB0aGF0IHdlIGNhbiBkZWNsYXJlIHRoZSB2YXJpYWJsZVxuICAvLyByZWdlbmVyYXRvclJ1bnRpbWUgaW4gdGhlIG91dGVyIHNjb3BlLCB3aGljaCBhbGxvd3MgdGhpcyBtb2R1bGUgdG8gYmVcbiAgLy8gaW5qZWN0ZWQgZWFzaWx5IGJ5IGBiaW4vcmVnZW5lcmF0b3IgLS1pbmNsdWRlLXJ1bnRpbWUgc2NyaXB0LmpzYC5cbiAgcmV0dXJuIGV4cG9ydHM7XG5cbn0oXG4gIC8vIElmIHRoaXMgc2NyaXB0IGlzIGV4ZWN1dGluZyBhcyBhIENvbW1vbkpTIG1vZHVsZSwgdXNlIG1vZHVsZS5leHBvcnRzXG4gIC8vIGFzIHRoZSByZWdlbmVyYXRvclJ1bnRpbWUgbmFtZXNwYWNlLiBPdGhlcndpc2UgY3JlYXRlIGEgbmV3IGVtcHR5XG4gIC8vIG9iamVjdC4gRWl0aGVyIHdheSwgdGhlIHJlc3VsdGluZyBvYmplY3Qgd2lsbCBiZSB1c2VkIHRvIGluaXRpYWxpemVcbiAgLy8gdGhlIHJlZ2VuZXJhdG9yUnVudGltZSB2YXJpYWJsZSBhdCB0aGUgdG9wIG9mIHRoaXMgZmlsZS5cbiAgdHlwZW9mIG1vZHVsZSA9PT0gXCJvYmplY3RcIiA/IG1vZHVsZS5leHBvcnRzIDoge31cbikpO1xuXG50cnkge1xuICByZWdlbmVyYXRvclJ1bnRpbWUgPSBydW50aW1lO1xufSBjYXRjaCAoYWNjaWRlbnRhbFN0cmljdE1vZGUpIHtcbiAgLy8gVGhpcyBtb2R1bGUgc2hvdWxkIG5vdCBiZSBydW5uaW5nIGluIHN0cmljdCBtb2RlLCBzbyB0aGUgYWJvdmVcbiAgLy8gYXNzaWdubWVudCBzaG91bGQgYWx3YXlzIHdvcmsgdW5sZXNzIHNvbWV0aGluZyBpcyBtaXNjb25maWd1cmVkLiBKdXN0XG4gIC8vIGluIGNhc2UgcnVudGltZS5qcyBhY2NpZGVudGFsbHkgcnVucyBpbiBzdHJpY3QgbW9kZSwgd2UgY2FuIGVzY2FwZVxuICAvLyBzdHJpY3QgbW9kZSB1c2luZyBhIGdsb2JhbCBGdW5jdGlvbiBjYWxsLiBUaGlzIGNvdWxkIGNvbmNlaXZhYmx5IGZhaWxcbiAgLy8gaWYgYSBDb250ZW50IFNlY3VyaXR5IFBvbGljeSBmb3JiaWRzIHVzaW5nIEZ1bmN0aW9uLCBidXQgaW4gdGhhdCBjYXNlXG4gIC8vIHRoZSBwcm9wZXIgc29sdXRpb24gaXMgdG8gZml4IHRoZSBhY2NpZGVudGFsIHN0cmljdCBtb2RlIHByb2JsZW0uIElmXG4gIC8vIHlvdSd2ZSBtaXNjb25maWd1cmVkIHlvdXIgYnVuZGxlciB0byBmb3JjZSBzdHJpY3QgbW9kZSBhbmQgYXBwbGllZCBhXG4gIC8vIENTUCB0byBmb3JiaWQgRnVuY3Rpb24sIGFuZCB5b3UncmUgbm90IHdpbGxpbmcgdG8gZml4IGVpdGhlciBvZiB0aG9zZVxuICAvLyBwcm9ibGVtcywgcGxlYXNlIGRldGFpbCB5b3VyIHVuaXF1ZSBwcmVkaWNhbWVudCBpbiBhIEdpdEh1YiBpc3N1ZS5cbiAgRnVuY3Rpb24oXCJyXCIsIFwicmVnZW5lcmF0b3JSdW50aW1lID0gclwiKShydW50aW1lKTtcbn1cbiIsInJlcXVpcmUoJy4uL21vZHVsZXMvZXM3Lmdsb2JhbCcpO1xubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuLi9tb2R1bGVzL19jb3JlJykuZ2xvYmFsO1xuIiwiLy8gaHR0cHM6Ly9naXRodWIuY29tL3RjMzkvcHJvcG9zYWwtZ2xvYmFsXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuRywgeyBnbG9iYWw6IHJlcXVpcmUoJy4vX2dsb2JhbCcpIH0pO1xuIiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpO1xudmFyIGNvcmUgPSByZXF1aXJlKCcuL19jb3JlJyk7XG52YXIgY3R4ID0gcmVxdWlyZSgnLi9fY3R4Jyk7XG52YXIgaGlkZSA9IHJlcXVpcmUoJy4vX2hpZGUnKTtcbnZhciBoYXMgPSByZXF1aXJlKCcuL19oYXMnKTtcbnZhciBQUk9UT1RZUEUgPSAncHJvdG90eXBlJztcblxudmFyICRleHBvcnQgPSBmdW5jdGlvbiAodHlwZSwgbmFtZSwgc291cmNlKSB7XG4gIHZhciBJU19GT1JDRUQgPSB0eXBlICYgJGV4cG9ydC5GO1xuICB2YXIgSVNfR0xPQkFMID0gdHlwZSAmICRleHBvcnQuRztcbiAgdmFyIElTX1NUQVRJQyA9IHR5cGUgJiAkZXhwb3J0LlM7XG4gIHZhciBJU19QUk9UTyA9IHR5cGUgJiAkZXhwb3J0LlA7XG4gIHZhciBJU19CSU5EID0gdHlwZSAmICRleHBvcnQuQjtcbiAgdmFyIElTX1dSQVAgPSB0eXBlICYgJGV4cG9ydC5XO1xuICB2YXIgZXhwb3J0cyA9IElTX0dMT0JBTCA/IGNvcmUgOiBjb3JlW25hbWVdIHx8IChjb3JlW25hbWVdID0ge30pO1xuICB2YXIgZXhwUHJvdG8gPSBleHBvcnRzW1BST1RPVFlQRV07XG4gIHZhciB0YXJnZXQgPSBJU19HTE9CQUwgPyBnbG9iYWwgOiBJU19TVEFUSUMgPyBnbG9iYWxbbmFtZV0gOiAoZ2xvYmFsW25hbWVdIHx8IHt9KVtQUk9UT1RZUEVdO1xuICB2YXIga2V5LCBvd24sIG91dDtcbiAgaWYgKElTX0dMT0JBTCkgc291cmNlID0gbmFtZTtcbiAgZm9yIChrZXkgaW4gc291cmNlKSB7XG4gICAgLy8gY29udGFpbnMgaW4gbmF0aXZlXG4gICAgb3duID0gIUlTX0ZPUkNFRCAmJiB0YXJnZXQgJiYgdGFyZ2V0W2tleV0gIT09IHVuZGVmaW5lZDtcbiAgICBpZiAob3duICYmIGhhcyhleHBvcnRzLCBrZXkpKSBjb250aW51ZTtcbiAgICAvLyBleHBvcnQgbmF0aXZlIG9yIHBhc3NlZFxuICAgIG91dCA9IG93biA/IHRhcmdldFtrZXldIDogc291cmNlW2tleV07XG4gICAgLy8gcHJldmVudCBnbG9iYWwgcG9sbHV0aW9uIGZvciBuYW1lc3BhY2VzXG4gICAgZXhwb3J0c1trZXldID0gSVNfR0xPQkFMICYmIHR5cGVvZiB0YXJnZXRba2V5XSAhPSAnZnVuY3Rpb24nID8gc291cmNlW2tleV1cbiAgICAvLyBiaW5kIHRpbWVycyB0byBnbG9iYWwgZm9yIGNhbGwgZnJvbSBleHBvcnQgY29udGV4dFxuICAgIDogSVNfQklORCAmJiBvd24gPyBjdHgob3V0LCBnbG9iYWwpXG4gICAgLy8gd3JhcCBnbG9iYWwgY29uc3RydWN0b3JzIGZvciBwcmV2ZW50IGNoYW5nZSB0aGVtIGluIGxpYnJhcnlcbiAgICA6IElTX1dSQVAgJiYgdGFyZ2V0W2tleV0gPT0gb3V0ID8gKGZ1bmN0aW9uIChDKSB7XG4gICAgICB2YXIgRiA9IGZ1bmN0aW9uIChhLCBiLCBjKSB7XG4gICAgICAgIGlmICh0aGlzIGluc3RhbmNlb2YgQykge1xuICAgICAgICAgIHN3aXRjaCAoYXJndW1lbnRzLmxlbmd0aCkge1xuICAgICAgICAgICAgY2FzZSAwOiByZXR1cm4gbmV3IEMoKTtcbiAgICAgICAgICAgIGNhc2UgMTogcmV0dXJuIG5ldyBDKGEpO1xuICAgICAgICAgICAgY2FzZSAyOiByZXR1cm4gbmV3IEMoYSwgYik7XG4gICAgICAgICAgfSByZXR1cm4gbmV3IEMoYSwgYiwgYyk7XG4gICAgICAgIH0gcmV0dXJuIEMuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICAgIH07XG4gICAgICBGW1BST1RPVFlQRV0gPSBDW1BST1RPVFlQRV07XG4gICAgICByZXR1cm4gRjtcbiAgICAvLyBtYWtlIHN0YXRpYyB2ZXJzaW9ucyBmb3IgcHJvdG90eXBlIG1ldGhvZHNcbiAgICB9KShvdXQpIDogSVNfUFJPVE8gJiYgdHlwZW9mIG91dCA9PSAnZnVuY3Rpb24nID8gY3R4KEZ1bmN0aW9uLmNhbGwsIG91dCkgOiBvdXQ7XG4gICAgLy8gZXhwb3J0IHByb3RvIG1ldGhvZHMgdG8gY29yZS4lQ09OU1RSVUNUT1IlLm1ldGhvZHMuJU5BTUUlXG4gICAgaWYgKElTX1BST1RPKSB7XG4gICAgICAoZXhwb3J0cy52aXJ0dWFsIHx8IChleHBvcnRzLnZpcnR1YWwgPSB7fSkpW2tleV0gPSBvdXQ7XG4gICAgICAvLyBleHBvcnQgcHJvdG8gbWV0aG9kcyB0byBjb3JlLiVDT05TVFJVQ1RPUiUucHJvdG90eXBlLiVOQU1FJVxuICAgICAgaWYgKHR5cGUgJiAkZXhwb3J0LlIgJiYgZXhwUHJvdG8gJiYgIWV4cFByb3RvW2tleV0pIGhpZGUoZXhwUHJvdG8sIGtleSwgb3V0KTtcbiAgICB9XG4gIH1cbn07XG4vLyB0eXBlIGJpdG1hcFxuJGV4cG9ydC5GID0gMTsgICAvLyBmb3JjZWRcbiRleHBvcnQuRyA9IDI7ICAgLy8gZ2xvYmFsXG4kZXhwb3J0LlMgPSA0OyAgIC8vIHN0YXRpY1xuJGV4cG9ydC5QID0gODsgICAvLyBwcm90b1xuJGV4cG9ydC5CID0gMTY7ICAvLyBiaW5kXG4kZXhwb3J0LlcgPSAzMjsgIC8vIHdyYXBcbiRleHBvcnQuVSA9IDY0OyAgLy8gc2FmZVxuJGV4cG9ydC5SID0gMTI4OyAvLyByZWFsIHByb3RvIG1ldGhvZCBmb3IgYGxpYnJhcnlgXG5tb2R1bGUuZXhwb3J0cyA9ICRleHBvcnQ7XG4iLCIvLyBvcHRpb25hbCAvIHNpbXBsZSBjb250ZXh0IGJpbmRpbmdcbnZhciBhRnVuY3Rpb24gPSByZXF1aXJlKCcuL19hLWZ1bmN0aW9uJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChmbiwgdGhhdCwgbGVuZ3RoKSB7XG4gIGFGdW5jdGlvbihmbik7XG4gIGlmICh0aGF0ID09PSB1bmRlZmluZWQpIHJldHVybiBmbjtcbiAgc3dpdGNoIChsZW5ndGgpIHtcbiAgICBjYXNlIDE6IHJldHVybiBmdW5jdGlvbiAoYSkge1xuICAgICAgcmV0dXJuIGZuLmNhbGwodGhhdCwgYSk7XG4gICAgfTtcbiAgICBjYXNlIDI6IHJldHVybiBmdW5jdGlvbiAoYSwgYikge1xuICAgICAgcmV0dXJuIGZuLmNhbGwodGhhdCwgYSwgYik7XG4gICAgfTtcbiAgICBjYXNlIDM6IHJldHVybiBmdW5jdGlvbiAoYSwgYiwgYykge1xuICAgICAgcmV0dXJuIGZuLmNhbGwodGhhdCwgYSwgYiwgYyk7XG4gICAgfTtcbiAgfVxuICByZXR1cm4gZnVuY3Rpb24gKC8qIC4uLmFyZ3MgKi8pIHtcbiAgICByZXR1cm4gZm4uYXBwbHkodGhhdCwgYXJndW1lbnRzKTtcbiAgfTtcbn07XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICBpZiAodHlwZW9mIGl0ICE9ICdmdW5jdGlvbicpIHRocm93IFR5cGVFcnJvcihpdCArICcgaXMgbm90IGEgZnVuY3Rpb24hJyk7XG4gIHJldHVybiBpdDtcbn07XG4iLCJ2YXIgZFAgPSByZXF1aXJlKCcuL19vYmplY3QtZHAnKTtcbnZhciBjcmVhdGVEZXNjID0gcmVxdWlyZSgnLi9fcHJvcGVydHktZGVzYycpO1xubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpID8gZnVuY3Rpb24gKG9iamVjdCwga2V5LCB2YWx1ZSkge1xuICByZXR1cm4gZFAuZihvYmplY3QsIGtleSwgY3JlYXRlRGVzYygxLCB2YWx1ZSkpO1xufSA6IGZ1bmN0aW9uIChvYmplY3QsIGtleSwgdmFsdWUpIHtcbiAgb2JqZWN0W2tleV0gPSB2YWx1ZTtcbiAgcmV0dXJuIG9iamVjdDtcbn07XG4iLCJ2YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciBJRThfRE9NX0RFRklORSA9IHJlcXVpcmUoJy4vX2llOC1kb20tZGVmaW5lJyk7XG52YXIgdG9QcmltaXRpdmUgPSByZXF1aXJlKCcuL190by1wcmltaXRpdmUnKTtcbnZhciBkUCA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eTtcblxuZXhwb3J0cy5mID0gcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKSA/IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSA6IGZ1bmN0aW9uIGRlZmluZVByb3BlcnR5KE8sIFAsIEF0dHJpYnV0ZXMpIHtcbiAgYW5PYmplY3QoTyk7XG4gIFAgPSB0b1ByaW1pdGl2ZShQLCB0cnVlKTtcbiAgYW5PYmplY3QoQXR0cmlidXRlcyk7XG4gIGlmIChJRThfRE9NX0RFRklORSkgdHJ5IHtcbiAgICByZXR1cm4gZFAoTywgUCwgQXR0cmlidXRlcyk7XG4gIH0gY2F0Y2ggKGUpIHsgLyogZW1wdHkgKi8gfVxuICBpZiAoJ2dldCcgaW4gQXR0cmlidXRlcyB8fCAnc2V0JyBpbiBBdHRyaWJ1dGVzKSB0aHJvdyBUeXBlRXJyb3IoJ0FjY2Vzc29ycyBub3Qgc3VwcG9ydGVkIScpO1xuICBpZiAoJ3ZhbHVlJyBpbiBBdHRyaWJ1dGVzKSBPW1BdID0gQXR0cmlidXRlcy52YWx1ZTtcbiAgcmV0dXJuIE87XG59O1xuIiwidmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICBpZiAoIWlzT2JqZWN0KGl0KSkgdGhyb3cgVHlwZUVycm9yKGl0ICsgJyBpcyBub3QgYW4gb2JqZWN0IScpO1xuICByZXR1cm4gaXQ7XG59O1xuIiwibW9kdWxlLmV4cG9ydHMgPSAhcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKSAmJiAhcmVxdWlyZSgnLi9fZmFpbHMnKShmdW5jdGlvbiAoKSB7XG4gIHJldHVybiBPYmplY3QuZGVmaW5lUHJvcGVydHkocmVxdWlyZSgnLi9fZG9tLWNyZWF0ZScpKCdkaXYnKSwgJ2EnLCB7IGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gNzsgfSB9KS5hICE9IDc7XG59KTtcbiIsInZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xudmFyIGRvY3VtZW50ID0gcmVxdWlyZSgnLi9fZ2xvYmFsJykuZG9jdW1lbnQ7XG4vLyB0eXBlb2YgZG9jdW1lbnQuY3JlYXRlRWxlbWVudCBpcyAnb2JqZWN0JyBpbiBvbGQgSUVcbnZhciBpcyA9IGlzT2JqZWN0KGRvY3VtZW50KSAmJiBpc09iamVjdChkb2N1bWVudC5jcmVhdGVFbGVtZW50KTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBpcyA/IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoaXQpIDoge307XG59O1xuIiwiLy8gNy4xLjEgVG9QcmltaXRpdmUoaW5wdXQgWywgUHJlZmVycmVkVHlwZV0pXG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbi8vIGluc3RlYWQgb2YgdGhlIEVTNiBzcGVjIHZlcnNpb24sIHdlIGRpZG4ndCBpbXBsZW1lbnQgQEB0b1ByaW1pdGl2ZSBjYXNlXG4vLyBhbmQgdGhlIHNlY29uZCBhcmd1bWVudCAtIGZsYWcgLSBwcmVmZXJyZWQgdHlwZSBpcyBhIHN0cmluZ1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQsIFMpIHtcbiAgaWYgKCFpc09iamVjdChpdCkpIHJldHVybiBpdDtcbiAgdmFyIGZuLCB2YWw7XG4gIGlmIChTICYmIHR5cGVvZiAoZm4gPSBpdC50b1N0cmluZykgPT0gJ2Z1bmN0aW9uJyAmJiAhaXNPYmplY3QodmFsID0gZm4uY2FsbChpdCkpKSByZXR1cm4gdmFsO1xuICBpZiAodHlwZW9mIChmbiA9IGl0LnZhbHVlT2YpID09ICdmdW5jdGlvbicgJiYgIWlzT2JqZWN0KHZhbCA9IGZuLmNhbGwoaXQpKSkgcmV0dXJuIHZhbDtcbiAgaWYgKCFTICYmIHR5cGVvZiAoZm4gPSBpdC50b1N0cmluZykgPT0gJ2Z1bmN0aW9uJyAmJiAhaXNPYmplY3QodmFsID0gZm4uY2FsbChpdCkpKSByZXR1cm4gdmFsO1xuICB0aHJvdyBUeXBlRXJyb3IoXCJDYW4ndCBjb252ZXJ0IG9iamVjdCB0byBwcmltaXRpdmUgdmFsdWVcIik7XG59O1xuIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoYml0bWFwLCB2YWx1ZSkge1xuICByZXR1cm4ge1xuICAgIGVudW1lcmFibGU6ICEoYml0bWFwICYgMSksXG4gICAgY29uZmlndXJhYmxlOiAhKGJpdG1hcCAmIDIpLFxuICAgIHdyaXRhYmxlOiAhKGJpdG1hcCAmIDQpLFxuICAgIHZhbHVlOiB2YWx1ZVxuICB9O1xufTtcbiIsInZhciBoYXNPd25Qcm9wZXJ0eSA9IHt9Lmhhc093blByb3BlcnR5O1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQsIGtleSkge1xuICByZXR1cm4gaGFzT3duUHJvcGVydHkuY2FsbChpdCwga2V5KTtcbn07XG4iLCJpbXBvcnQge2dldEF1dGgsIGxvb2t1cEl0ZW1zQnlJRH0gZnJvbSAnLi9yZXF1ZXN0cy5qcydcbmltcG9ydCB7Z2V0RnVsbElEc0Zyb21QYXRofSBmcm9tICcuL2NvbW1vbi5qcydcbmltcG9ydCB7c2V0VGV4dEFuZEZ1bmN0aW9uX3N1YnNjcmliZSxzZXRUZXh0QW5kRnVuY3Rpb25fdW5zdWJzY3JpYmV9IGZyb20gJy4vY29udGVudC1jb21tb24uanMnXG5pbXBvcnQgYnJvd3NlciBmcm9tICd3ZWJleHRlbnNpb24tcG9seWZpbGwnXG5cbmNvbnN0IFVTRVJfREVMRVRFRCA9ICdyZXYtdXNlci1kZWxldGVkJ1xuY29uc3QgTU9EX1JFTU9WRUQgPSAncmV2LW1vZC1yZW1vdmVkJ1xuY29uc3QgaWRfbWF0Y2hfY29tbWVudCA9IC9edDFfLisvXG5jb25zdCBpZF9tYXRjaF9wb3N0ID0gL150M18uKy9cblxuZXhwb3J0IGNvbnN0IHJlZGRpdE1vZGlmaWNhdGlvbnMgPSAob3RoZXJfc3Vic2NyaXB0aW9ucywgaGlkZV9zdWJzY3JpYmUsIG1vbml0b3JfcXVhcmFudGluZWQpID0+IHtcbiAgICBjb25zdCBpc05ld1JlZGRpdCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNTSE9SVENVVF9GT0NVU0FCTEVfRElWJykgIT09IG51bGxcbiAgICBpZlRocmVhZFBhZ2Vfc2hvd1JlbW92YWxTdGF0dXMoaXNOZXdSZWRkaXQsIG1vbml0b3JfcXVhcmFudGluZWQpXG4gICAgaWYgKCEgaGlkZV9zdWJzY3JpYmUpIHtcbiAgICAgICAgaWYgKCAhIGlzTmV3UmVkZGl0ICkge1xuICAgICAgICAgICAgY29uc3Qgc2VsZWN0b3IgPSAnLnRoaW5nLmxpbmssIC50aGluZy5jb21tZW50J1xuICAgICAgICAgICAgYWRkU3Vic2NyaWJlTGlua3Nfb2xkUmVkZGl0KCQoc2VsZWN0b3IpLCBvdGhlcl9zdWJzY3JpcHRpb25zKVxuICAgICAgICAgICAgJChkb2N1bWVudCkuYXJyaXZlKHNlbGVjdG9yLCAoZWxlbWVudCkgPT4ge1xuICAgICAgICAgICAgICAgIGFkZFN1YnNjcmliZUxpbmtzX29sZFJlZGRpdChbZWxlbWVudF0sIG90aGVyX3N1YnNjcmlwdGlvbnMpXG4gICAgICAgICAgICB9KVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgbGV0IHNlbGVjdG9yX2NvbW1lbnRzID0gJy5Db21tZW50J1xuICAgICAgICAgICAgYWRkU3Vic2NyaWJlTGlua3NfbmV3UmVkZGl0X2NvbW1lbnRzKCQoc2VsZWN0b3JfY29tbWVudHMpLCBvdGhlcl9zdWJzY3JpcHRpb25zKVxuICAgICAgICAgICAgJChkb2N1bWVudCkuYXJyaXZlKHNlbGVjdG9yX2NvbW1lbnRzLCAoZWxlbWVudCkgPT4ge1xuICAgICAgICAgICAgICAgIGFkZFN1YnNjcmliZUxpbmtzX25ld1JlZGRpdF9jb21tZW50cyhbZWxlbWVudF0sIG90aGVyX3N1YnNjcmlwdGlvbnMpXG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgY29uc3Qgc2VsZWN0b3JfcG9zdHMgPSAnLlBvc3QnXG4gICAgICAgICAgICBhZGRTdWJzY3JpYmVMaW5rc19uZXdSZWRkaXRfcG9zdHMoJChzZWxlY3Rvcl9wb3N0cyksIG90aGVyX3N1YnNjcmlwdGlvbnMpXG4gICAgICAgICAgICAkKGRvY3VtZW50KS5hcnJpdmUoc2VsZWN0b3JfcG9zdHMsIChlbGVtZW50KSA9PiB7XG4gICAgICAgICAgICAgICAgYWRkU3Vic2NyaWJlTGlua3NfbmV3UmVkZGl0X3Bvc3RzKFtlbGVtZW50XSwgb3RoZXJfc3Vic2NyaXB0aW9ucylcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICBjb25zdCBzZWxlY3Rvcl9uZXdQb3N0ID0gJy5Qb3N0IGRpdltkYXRhLXRlc3QtaWQ9XCJwb3N0LWNvbnRlbnRcIl0nXG4gICAgICAgICAgICAkKGRvY3VtZW50KS5hcnJpdmUoc2VsZWN0b3JfbmV3UG9zdCwgKGVsZW1lbnQpID0+IHtcbiAgICAgICAgICAgICAgICBzaG93UmVtb3ZhbFN0YXR1c0ZvclRocmVhZE92ZXJsYXkoZWxlbWVudCwgbW9uaXRvcl9xdWFyYW50aW5lZClcbiAgICAgICAgICAgIH0pXG4gICAgICAgIH1cbiAgICB9XG59XG5cbmNvbnN0IGlmVGhyZWFkUGFnZV9zaG93UmVtb3ZhbFN0YXR1cyA9IChpc05ld1JlZGRpdCwgbW9uaXRvcl9xdWFyYW50aW5lZCwgbmV3UmVkZGl0VGFyZ2V0ID0gJy5Qb3N0JywgcG9zdERhdGEgPSB7fSkgPT4ge1xuICAgIGNvbnN0IFtwb3N0SUQsIGNvbW1lbnRJRCwgdXNlciwgc3VicmVkZGl0XSA9IGdldEZ1bGxJRHNGcm9tUGF0aCh3aW5kb3cubG9jYXRpb24ucGF0aG5hbWUpXG4gICAgLy8gbGlua3MgdG8gY29tbWVudHMgb24gbmV3IHJlZGRpdCBkbyBub3QgaGF2ZSByb2JvdHMgbm9pbmRleCxub2ZvbGxvdywgc28gbmVlZCB0byBsb29rdXAgZGF0YSBpZiBoYXZlbid0IGFscmVhZHlcbiAgICBpZiAoaXNOZXdSZWRkaXQgJiYgY29tbWVudElEICYmIE9iamVjdC5rZXlzKHBvc3REYXRhKS5sZW5ndGggPT09IDApIHtcbiAgICAgICAgYnJvd3Nlci5ydW50aW1lLnNlbmRNZXNzYWdlKHthY3Rpb246ICdnZXQtcmVkZGl0LWl0ZW1zLWJ5LWlkJywgaWRzOiBbcG9zdElEXSwgbW9uaXRvcl9xdWFyYW50aW5lZH0pXG4gICAgICAgIC50aGVuKHJlc3BvbnNlID0+IHtcbiAgICAgICAgICAgIGlmICghIHJlc3BvbnNlIHx8ICEgcmVzcG9uc2UuaXRlbXMgfHwgISByZXNwb25zZS5pdGVtcy5sZW5ndGgpIHJldHVyblxuICAgICAgICAgICAgcG9zdERhdGEgPSByZXNwb25zZS5pdGVtc1swXS5kYXRhXG4gICAgICAgICAgICBzaG93UmVtb3ZhbFN0YXR1cyh7aXNOZXdSZWRkaXQsIG5ld1JlZGRpdFRhcmdldCwgcG9zdERhdGF9KVxuICAgICAgICB9KVxuICAgIH0gZWxzZSB7XG4gICAgICAgIHNob3dSZW1vdmFsU3RhdHVzKHtpc05ld1JlZGRpdCwgbmV3UmVkZGl0VGFyZ2V0LCBwb3N0RGF0YX0pXG4gICAgfVxuXG59XG5cbmNvbnN0IHNob3dSZW1vdmFsU3RhdHVzID0gKHtpc05ld1JlZGRpdCwgbmV3UmVkZGl0VGFyZ2V0ID0gJy5Qb3N0JywgcG9zdERhdGEgPSB7fX0pID0+IHtcbiAgICBjb25zdCBbcG9zdElELCBjb21tZW50SUQsIHVzZXIsIHN1YnJlZGRpdF0gPSBnZXRGdWxsSURzRnJvbVBhdGgod2luZG93LmxvY2F0aW9uLnBhdGhuYW1lKVxuICAgIGxldCBjbGFzc05hbWUgPSB1bmRlZmluZWQsIG1lc3NhZ2VfMSA9IHVuZGVmaW5lZFxuICAgIGlmIChwb3N0SUQpIHtcbiAgICAgICAgaWYgKCQoJ21ldGFbbmFtZT1cInJvYm90c1wiXVtjb250ZW50PVwibm9pbmRleCxub2ZvbGxvd1wiXScpLmxlbmd0aCB8fFxuICAgICAgICAgICAgKCdpc19yb2JvdF9pbmRleGFibGUnIGluIHBvc3REYXRhICYmICEgcG9zdERhdGEuaXNfcm9ib3RfaW5kZXhhYmxlKSApIHtcbiAgICAgICAgICAgIGNvbnN0IGF1dGhvciA9IHBvc3REYXRhLmF1dGhvciB8fCAkKCcubGluayAudG9wLW1hdHRlciAuYXV0aG9yJykuZmlyc3QoKS50ZXh0KCkgfHwgJCgnLmxpbmsgLnRvcC1tYXR0ZXIgLnRhZ2xpbmUgc3Bhbjpjb250YWlucyhcIltkZWxldGVkXVwiKScpLnRleHQoKSB8fCAkKCcuUG9zdCBzcGFuOmNvbnRhaW5zKFwidS9bZGVsZXRlZF1cIiknKS5maXJzdCgpLnRleHQoKVxuICAgICAgICAgICAgaWYgKChhdXRob3IgPT09ICdbZGVsZXRlZF0nIHx8IGF1dGhvciA9PT0gJ3UvW2RlbGV0ZWRdJykgJiYgcG9zdERhdGEucmVtb3ZlZF9ieV9jYXRlZ29yeSAhPT0gJ21vZGVyYXRvcicpIHtcbiAgICAgICAgICAgICAgICBjbGFzc05hbWUgPSBVU0VSX0RFTEVURURcbiAgICAgICAgICAgICAgICBtZXNzYWdlXzEgPSBgVGhpcyBwb3N0IHdhcyBlaXRoZXIgZGVsZXRlZCBieSB0aGUgcGVyc29uIHdobyBwb3N0ZWQgaXQsIG9yIHJlbW92ZWQgYnkgYSBtb2RlcmF0b3IgYW5kIHRoZW4gZGVsZXRlZCBieSB0aGUgcGVyc29uIHdobyBwb3N0ZWQgaXQuYFxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBjbGFzc05hbWUgPSBNT0RfUkVNT1ZFRFxuICAgICAgICAgICAgICAgIG1lc3NhZ2VfMSA9IGBUaGlzIHBvc3QgaXMgdW5hcHByb3ZlZC4gSXQgaXMgZWl0aGVyIHdhaXRpbmcgdG8gYmUgYXBwcm92ZWQsIG9yIGl0IHdhcyByZW1vdmVkIGJ5IHNvbWVvbmUgb3Igc29tZSByb2JvdC5gXG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAobWVzc2FnZV8xKSB7XG4gICAgICAgIGNvbnN0IG9wdGlvbnNJRCA9ICdnb3RvLW9wdGlvbnMtZnJvbS1jb250ZW50J1xuICAgICAgICBjb25zdCBtZXNzYWdlXzIgPSBgIEl0IGlzIG5vdCBjdXJyZW50bHkgdmlzaWJsZSBpbiByLyR7c3VicmVkZGl0fSBhbmQgbWF5IG5vdCBhcHBlYXIgaW4gd2ViIHNlYXJjaCByZXN1bHRzLmBcbiAgICAgICAgY29uc3QgZnJvbSA9IGA8ZGl2IGNsYXNzPVwicmV2LWZyb21cIj48YSBpZD1cIiR7b3B0aW9uc0lEfVwiIGhyZWY9XCIjXCI+UmV2ZWRkaXQgUmVhbC1UaW1lPC9hPiBub3RlPC9kaXY+YFxuICAgICAgICBjb25zdCBwb3N0X3BhdGggPSB3aW5kb3cubG9jYXRpb24ucGF0aG5hbWUuc3BsaXQoJy8nLDYpLmpvaW4oJy8nKVxuICAgICAgICBjb25zdCByZXZlZGRpdF9saW5rID0gYDxwPjxhIGhyZWY9XCJodHRwczovL3d3dy5yZXZlZGRpdC5jb20ke3Bvc3RfcGF0aH0vXCI+VmlldyB0aGUgcG9zdCBvbiBSZXZlZGRpdC5jb208L2E+PC9wPmBcbiAgICAgICAgaWYgKCEgaXNOZXdSZWRkaXQpIHtcbiAgICAgICAgICAgIG1lc3NhZ2VfMSArPSBgIFZpZXcgdGhlIHBvc3QgPGEgaHJlZj1cImh0dHBzOi8vbmV3LnJlZGRpdC5jb20ke3Bvc3RfcGF0aH0vXCI+b24gbmV3IHJlZGRpdDwvYT4gZm9yIG1vcmUgZGV0YWlscy5gXG4gICAgICAgICAgICBjb25zdCAkaHRtbF9tZXNzYWdlID0gJChgPGRpdiBjbGFzcz1cInJlZGRpdC1pbmZvYmFyIG1kLWNvbnRhaW5lci1zbWFsbCAke2NsYXNzTmFtZX1cIj5gKVxuICAgICAgICAgICAgICAgIC5hcHBlbmQoZnJvbSlcbiAgICAgICAgICAgICAgICAuYXBwZW5kKGA8ZGl2IGNsYXNzPVwibWRcIj48cD4ke21lc3NhZ2VfMX0ke21lc3NhZ2VfMn08L3A+JHtyZXZlZGRpdF9saW5rfTwvZGl2PmApXG4gICAgICAgICAgICAkaHRtbF9tZXNzYWdlLnByZXBlbmRUbygnZGl2LmNvbnRlbnRbcm9sZT1cIm1haW5cIl0nKVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgbWVzc2FnZV8xICs9IGAgTW9yZSBkZXRhaWxzIG1heSBhcHBlYXIgaW4gYSBtZXNzYWdlIGFib3ZlIGZyb20gcmVkZGl0LmBcbiAgICAgICAgICAgIGNvbnN0ICRodG1sX3dyYXAgPSAkKGA8ZGl2IGNsYXNzPVwicmV2LW5ldy1yZWRkaXQtbWVzc2FnZS13cmFwICR7Y2xhc3NOYW1lfVwiPiR7ZnJvbX08L2Rpdj5gKVxuICAgICAgICAgICAgY29uc3QgJGh0bWxfY29udGVudCA9ICQoYDxkaXYgY2xhc3M9XCJyZXYtbmV3LXJlZGRpdC1tZXNzYWdlLWNvbnRlbnRcIj48L2Rpdj5gKVxuICAgICAgICAgICAgY29uc3QgJGh0bWxfZGVzY3JpcHRpb24gPSAkKGA8ZGl2IGNsYXNzPVwicmV2LW5ldy1yZWRkaXQtbWVzc2FnZS1jb250ZW50LWRlc2NyaXB0aW9uXCI+JHttZXNzYWdlXzF9JHttZXNzYWdlXzJ9PC9kaXY+YClcbiAgICAgICAgICAgICRodG1sX2NvbnRlbnQuYXBwZW5kKCRodG1sX2Rlc2NyaXB0aW9uKVxuICAgICAgICAgICAgJGh0bWxfY29udGVudC5hcHBlbmQocmV2ZWRkaXRfbGluaylcbiAgICAgICAgICAgICRodG1sX3dyYXAuYXBwZW5kKCRodG1sX2NvbnRlbnQpXG4gICAgICAgICAgICAkKG5ld1JlZGRpdFRhcmdldCkuZmlyc3QoKS5hZnRlcigkaHRtbF93cmFwKVxuICAgICAgICB9XG4gICAgICAgICQoYCMke29wdGlvbnNJRH1gKS5jbGljaygoKSA9PiBicm93c2VyLnJ1bnRpbWUuc2VuZE1lc3NhZ2Uoe2FjdGlvbjogJ29wZW4tb3B0aW9ucyd9KSlcbiAgICB9XG59XG5cbmNvbnN0IHNob3dSZW1vdmFsU3RhdHVzRm9yVGhyZWFkT3ZlcmxheSA9IChlbGVtZW50LCBtb25pdG9yX3F1YXJhbnRpbmVkKSA9PiB7XG4gICAgY29uc3QgW3Bvc3RJRCwgY29tbWVudElELCB1c2VyLCBzdWJyZWRkaXRdID0gZ2V0RnVsbElEc0Zyb21QYXRoKHdpbmRvdy5sb2NhdGlvbi5wYXRobmFtZSlcbiAgICAvLyBidWlsdCBmb3IgQ2hyb21lLCBpLmUuLCBpbmNvZ25pdG8gbW9kZSBpcyAnc3BsaXQnIGFuZCBDT1JCIGFwcGxpZXNcbiAgICBpZiAoX19CVUlMVF9GT1JfXyA9PT0gJ2Nocm9tZScpIHtcbiAgICAgICAgYnJvd3Nlci5ydW50aW1lLnNlbmRNZXNzYWdlKHthY3Rpb246ICdnZXQtcmVkZGl0LWl0ZW1zLWJ5LWlkJywgaWRzOiBbcG9zdElEXSwgbW9uaXRvcl9xdWFyYW50aW5lZH0pXG4gICAgICAgIC50aGVuKHJlc3BvbnNlID0+IHtcbiAgICAgICAgICAgIGlmICghIHJlc3BvbnNlIHx8ICEgcmVzcG9uc2UuaXRlbXMgfHwgISByZXNwb25zZS5pdGVtcy5sZW5ndGgpIHJldHVyblxuICAgICAgICAgICAgY29uc3QgcG9zdERhdGEgPSByZXNwb25zZS5pdGVtc1swXS5kYXRhXG4gICAgICAgICAgICBpZlRocmVhZFBhZ2Vfc2hvd1JlbW92YWxTdGF0dXModHJ1ZSwgbW9uaXRvcl9xdWFyYW50aW5lZCwgZWxlbWVudC5wYXJlbnROb2RlLCBwb3N0RGF0YSlcbiAgICAgICAgfSlcbiAgICB9IGVsc2Uge1xuICAgICAgICAvLyBidWlsdCBmb3IgRmlyZWZveCwgaS5lLiwgaW5jb2duaXRvIG1vZGUgaXMgJ3NwYW5uaW5nJyBhbmQgY29udGVudCBzY3JpcHRzXG4gICAgICAgIC8vIGFyZSBhbGxvd2VkIHRvIHNlbmQgY3Jvc3Mtb3JpZ2luIHJlcXVlc3RzXG4gICAgICAgIGdldEF1dGgoKVxuICAgICAgICAudGhlbihhdXRoID0+IHtcbiAgICAgICAgICAgIHJldHVybiBsb29rdXBJdGVtc0J5SUQoW3Bvc3RJRF0sIGF1dGgsIG1vbml0b3JfcXVhcmFudGluZWQpXG4gICAgICAgIH0pXG4gICAgICAgIC50aGVuKGl0ZW1zID0+IHtcbiAgICAgICAgICAgIC8vIGlmIHJlcXVlc3QgZmFpbHMsIGl0ZW1zIGlzIG51bGxcbiAgICAgICAgICAgIGlmICghIGl0ZW1zKSByZXR1cm5cbiAgICAgICAgICAgIGNvbnN0IHBvc3REYXRhID0gaXRlbXNbMF0uZGF0YVxuICAgICAgICAgICAgaWZUaHJlYWRQYWdlX3Nob3dSZW1vdmFsU3RhdHVzKHRydWUsIG1vbml0b3JfcXVhcmFudGluZWQsIGVsZW1lbnQucGFyZW50Tm9kZSwgcG9zdERhdGEpXG4gICAgICAgIH0pXG4gICAgfVxufVxuXG5jb25zdCBnZXRJRF9uZXdSZWRkaXQgPSAoZWxlbWVudCwgaWRfbWF0Y2gpID0+IHtcbiAgICBsZXQgaWQgPSBlbGVtZW50LmlkXG4gICAgaWYgKGlkICYmIGlkLm1hdGNoKGlkX21hdGNoKSkgcmV0dXJuIGlkXG4gICAgaWQgPSAkKGVsZW1lbnQpLmF0dHIoJ2NsYXNzJykuc3BsaXQoL1xccysvKS5maWx0ZXIoYyA9PiBjLm1hdGNoKGlkX21hdGNoKSlbMF1cbiAgICBpZiAoaWQgJiYgaWQubWF0Y2goaWRfbWF0Y2gpKSByZXR1cm4gaWRcbiAgICBpZCA9IGVsZW1lbnQucGFyZW50Tm9kZS5pZFxuICAgIGlmIChpZCAmJiBpZC5tYXRjaChpZF9tYXRjaCkpIHJldHVybiBpZFxuICAgIGlkID0gJChlbGVtZW50KS5jbG9zZXN0KCdkaXZbdGFiaW5kZXg9LTFdJykuYXR0cignaWQnKVxuICAgIHJldHVybiBpZFxufVxuXG5jb25zdCBhZGRTdWJzY3JpYmVMaW5rc19uZXdSZWRkaXRfY29tbWVudHMgPSAoZWxlbWVudHMsIHN1YnNjcmlwdGlvbnMpID0+IHtcbiAgICAkKGVsZW1lbnRzKS5lYWNoKChpZHgsIHRhcmdldGVkRWxlbWVudCkgPT4ge1xuICAgICAgICBjb25zdCBlbGVtZW50ID0gJCh0YXJnZXRlZEVsZW1lbnQpLmNsb3Nlc3QoJy5Db21tZW50JylbMF1cbiAgICAgICAgY29uc3QgaWQgPSBnZXRJRF9uZXdSZWRkaXQoZWxlbWVudCwgaWRfbWF0Y2hfY29tbWVudClcbiAgICAgICAgaWYgKCEgaWQgfHwgISBpZC5tYXRjaChpZF9tYXRjaF9jb21tZW50KSkgcmV0dXJuXG4gICAgICAgIGxldCAkYnV0dG9uID0gZ2V0QnV0dG9uKGVsZW1lbnQsICdzYXZlJylcbiAgICAgICAgbGV0IGFwcGVuZEJ1dHRvblRvID0gJGJ1dHRvbi5wYXJlbnQoKVxuICAgICAgICBpZiAoISAkYnV0dG9uLmxlbmd0aCkge1xuICAgICAgICAgICAgJGJ1dHRvbiA9IGdldEJ1dHRvbihlbGVtZW50LCAnc2hhcmUnKVxuICAgICAgICAgICAgYXBwZW5kQnV0dG9uVG8gPSAkYnV0dG9uLnBhcmVudCgpXG4gICAgICAgICAgICBpZiAoISAkYnV0dG9uLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgICRidXR0b24gPSAkKCc8YnV0dG9uPi4uLjwvYnV0dG9uPicpXG4gICAgICAgICAgICAgICAgYXBwZW5kQnV0dG9uVG8gPSBlbGVtZW50XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgJGJ1dHRvbl9jbG9uZSA9ICRidXR0b24uY2xvbmUoKVxuICAgICAgICBsZXQgY29tbWVudEJvZHkgPSAnJ1xuICAgICAgICBjb25zdCBib2R5RWxlbWVudCA9IGVsZW1lbnQucXVlcnlTZWxlY3RvcignLlJpY2hUZXh0SlNPTi1yb290JylcbiAgICAgICAgaWYgKGJvZHlFbGVtZW50KSB7XG4gICAgICAgICAgICBjb21tZW50Qm9keSA9IGJvZHlFbGVtZW50LnRleHRDb250ZW50XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlkIGluIHN1YnNjcmlwdGlvbnMpIHtcbiAgICAgICAgICAgIHNldFRleHRBbmRGdW5jdGlvbl91bnN1YnNjcmliZShpZCwgJGJ1dHRvbl9jbG9uZSwgY29tbWVudEJvZHkpLmFwcGVuZFRvKGFwcGVuZEJ1dHRvblRvKVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgc2V0VGV4dEFuZEZ1bmN0aW9uX3N1YnNjcmliZShpZCwgJGJ1dHRvbl9jbG9uZSwgY29tbWVudEJvZHkpLmFwcGVuZFRvKGFwcGVuZEJ1dHRvblRvKVxuICAgICAgICB9XG4gICAgfSlcbn1cblxuY29uc3QgZ2V0QnV0dG9uID0gKGVsZW1lbnQsIGJ1dHRvbl9zZWFyY2hfdGV4dCkgPT4ge1xuICAgIHJldHVybiAkKGVsZW1lbnQpLmZpbmQoYGJ1dHRvbjplcXVhbHNpKFwiJHtidXR0b25fc2VhcmNoX3RleHR9XCIpYCkuZmlyc3QoKVxufVxuXG5jb25zdCBhZGRTdWJzY3JpYmVMaW5rc19uZXdSZWRkaXRfcG9zdHMgPSAoZWxlbWVudHMsIHN1YnNjcmlwdGlvbnMpID0+IHtcbiAgICAkKGVsZW1lbnRzKS5lYWNoKChpZHgsIGVsZW1lbnQpID0+IHtcbiAgICAgICAgY29uc3QgaWQgPSBnZXRJRF9uZXdSZWRkaXQoZWxlbWVudCwgaWRfbWF0Y2hfcG9zdClcbiAgICAgICAgaWYgKCEgaWQgfHwgISBpZC5tYXRjaChpZF9tYXRjaF9wb3N0KSkgcmV0dXJuXG4gICAgICAgIGNvbnN0ICRidXR0b24gPSAkKGVsZW1lbnQpLmZpbmQoJ2J1dHRvbiA6ZXF1YWxzaShcInNhdmVcIiknKS5maXJzdCgpLnBhcmVudCgpXG4gICAgICAgIGNvbnN0ICRidXR0b25fY2xvbmUgPSAkYnV0dG9uLmNsb25lKClcbiAgICAgICAgJGJ1dHRvbl9jbG9uZS5maW5kKCdpLmljb24nKS5maXJzdCgpLnBhcmVudCgpLnJlbW92ZSgpXG4gICAgICAgIGNvbnN0ICRsYXN0X2J1dHRvbiA9ICRidXR0b24ucGFyZW50KCkuY2hpbGRyZW4oJ2J1dHRvbicpLmxhc3QoKVxuICAgICAgICBpZiAoaWQgaW4gc3Vic2NyaXB0aW9ucykge1xuICAgICAgICAgICAgc2V0VGV4dEFuZEZ1bmN0aW9uX3Vuc3Vic2NyaWJlKGlkLCAkYnV0dG9uX2Nsb25lKS5pbnNlcnRBZnRlcigkbGFzdF9idXR0b24pXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBzZXRUZXh0QW5kRnVuY3Rpb25fc3Vic2NyaWJlKGlkLCAkYnV0dG9uX2Nsb25lKS5pbnNlcnRBZnRlcigkbGFzdF9idXR0b24pXG4gICAgICAgIH1cbiAgICB9KVxufVxuXG5jb25zdCBhZGRTdWJzY3JpYmVMaW5rc19vbGRSZWRkaXQgPSAoZWxlbWVudHMsIHN1YnNjcmlwdGlvbnMpID0+IHtcbiAgICAkKGVsZW1lbnRzKS5lYWNoKChpZHgsIGVsZW1lbnQpID0+IHtcbiAgICAgICAgbGV0IGlkID0gZWxlbWVudC5nZXRBdHRyaWJ1dGUoJ2RhdGEtZnVsbG5hbWUnKVxuICAgICAgICBpZiAoISBpZCkge1xuICAgICAgICAgICAgY29uc3QgW3Bvc3RJRCwgY29tbWVudElELCB1c2VyLCBzdWJyZWRkaXRdID0gZ2V0RnVsbElEc0Zyb21QYXRoKGVsZW1lbnQuZ2V0QXR0cmlidXRlKCdkYXRhLXBlcm1hbGluaycpIHx8ICcnKVxuICAgICAgICAgICAgaWYgKGNvbW1lbnRJRCkge1xuICAgICAgICAgICAgICAgIGlkID0gY29tbWVudElEXG4gICAgICAgICAgICB9IGVsc2UgaWYgKHBvc3RJRCkge1xuICAgICAgICAgICAgICAgIGlkID0gcG9zdElEXG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCEgaWQpIHJldHVyblxuICAgICAgICBjb25zdCBidXR0b25zID0gZWxlbWVudC5xdWVyeVNlbGVjdG9yKCd1bC5idXR0b25zJylcbiAgICAgICAgaWYgKCEgYnV0dG9ucykgcmV0dXJuXG4gICAgICAgIGxldCBjb21tZW50Qm9keSA9ICcnXG4gICAgICAgIGNvbnN0IGJvZHlFbGVtZW50ID0gZWxlbWVudC5xdWVyeVNlbGVjdG9yKCcudXNlcnRleHQtYm9keScpXG4gICAgICAgIGlmIChib2R5RWxlbWVudCAmJiBpZC5tYXRjaCgvXnQxXy8pKSB7XG4gICAgICAgICAgICBjb21tZW50Qm9keSA9IGJvZHlFbGVtZW50LnRleHRDb250ZW50XG4gICAgICAgIH1cblxuICAgICAgICBsZXQgJG5ld0J1dHRvbiA9IHNldFRleHRBbmRGdW5jdGlvbl9zdWJzY3JpYmUoaWQsICQoYDxhIGhyZWY9XCJcIj5gKVswXSwgY29tbWVudEJvZHkpXG4gICAgICAgIGlmIChpZCBpbiBzdWJzY3JpcHRpb25zKSB7XG4gICAgICAgICAgICAkbmV3QnV0dG9uID0gc2V0VGV4dEFuZEZ1bmN0aW9uX3Vuc3Vic2NyaWJlKGlkLCAkKGA8YSBocmVmPVwiXCI+YClbMF0sIGNvbW1lbnRCb2R5KVxuICAgICAgICB9XG4gICAgICAgICQoYnV0dG9ucykuYXBwZW5kKCRuZXdCdXR0b24ud3JhcCgnPGxpPicpLnBhcmVudCgpKVxuICAgIH0pXG59XG4iLCJpbXBvcnQge21hcmtJRHNBc1NlZW5JZlN1YnNjcmliZWR9IGZyb20gJy4vc3RvcmFnZS5qcydcbmltcG9ydCB7c2V0VGV4dEFuZEZ1bmN0aW9uX3N1YnNjcmliZSxzZXRUZXh0QW5kRnVuY3Rpb25fdW5zdWJzY3JpYmV9IGZyb20gJy4vY29udGVudC1jb21tb24uanMnXG5pbXBvcnQgYnJvd3NlciBmcm9tICd3ZWJleHRlbnNpb24tcG9seWZpbGwnXG5cbmNvbnN0IGlkX21hdGNoID0gL150WzEzXV8uKy9cblxuZXhwb3J0IGNvbnN0IHJldmRkaXRNb2RpZmljYXRpb25zID0gKHN0b3JhZ2UsIHVzZXIsIGlzVXNlclBhZ2UsIGlzSW5mb1BhZ2UpID0+IHtcbiAgICBpZiAoaXNVc2VyUGFnZSB8fCBpc0luZm9QYWdlKSB7XG4gICAgICAgIHdhaXRGb3JBZGRlZE5vZGVfd2l0aE1pbkF0dFZhbHVlKCdudW1JdGVtc0xvYWRlZCcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5tYWluJyksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdkYXRhLW51bWl0ZW1zbG9hZGVkJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgMSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZmluZElEc0ZvclVzZXJBbmRNYXJrKHN0b3JhZ2UsIHVzZXIsIGlzVXNlclBhZ2UpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pXG4gICAgfVxuXG4gICAgY29uc3Qgc2VsZWN0b3JfcG9zdHMgPSAnLnBvc3Q6bm90KC5kZWxldGVkKSdcbiAgICBjb25zdCBzZWxlY3Rvcl9jb21tZW50cyA9ICcuY29tbWVudC1ib2R5LWFuZC1saW5rcydcbiAgICAkKGRvY3VtZW50KS5hcnJpdmUoc2VsZWN0b3JfY29tbWVudHMsIChlbGVtZW50KSA9PiB7XG4gICAgICAgIGFkZFN1YnNjcmliZUxpbmtzX3JldmRkaXRfY29tbWVudHMoW2VsZW1lbnRdLCBzdG9yYWdlLm90aGVyX3N1YnNjcmlwdGlvbnMpXG4gICAgfSlcbiAgICBhZGRTdWJzY3JpYmVMaW5rc19yZXZkZGl0X2NvbW1lbnRzKCQoc2VsZWN0b3JfY29tbWVudHMpLCBzdG9yYWdlLm90aGVyX3N1YnNjcmlwdGlvbnMpXG4gICAgJChkb2N1bWVudCkuYXJyaXZlKHNlbGVjdG9yX3Bvc3RzLCAoZWxlbWVudCkgPT4ge1xuICAgICAgICBhZGRTdWJzY3JpYmVMaW5rc19yZXZkZGl0X3Bvc3RzKFtlbGVtZW50XSwgc3RvcmFnZS5vdGhlcl9zdWJzY3JpcHRpb25zKVxuICAgIH0pXG4gICAgc2V0VGltZW91dCgoKSA9PiB7IC8vIHRoaXMgZGVsYXkgaXMgbmVjZXNzYXJ5IHRvIG1ha2UgYnV0dG9uIGFwcGVhciBvbiB0aHJlYWQtcGFnZSBwb3N0IGl0ZW1zLCBub3Qgc3VyZSB3aHlcbiAgICAgICAgYWRkU3Vic2NyaWJlTGlua3NfcmV2ZGRpdF9wb3N0cygkKHNlbGVjdG9yX3Bvc3RzKSwgc3RvcmFnZS5vdGhlcl9zdWJzY3JpcHRpb25zKVxuICAgIH0sIDIwMDApXG5cbn1cblxuY29uc3QgYWRkU3Vic2NyaWJlTGlua3NfcmV2ZGRpdF9jb21tZW50cyA9IChlbGVtZW50cywgc3Vic2NyaXB0aW9ucykgPT4ge1xuICAgICQoZWxlbWVudHMpLmVhY2goKGlkeCwgdGFyZ2V0ZWRFbGVtZW50KSA9PiB7XG4gICAgICAgIGNvbnN0IGVsZW1lbnQgPSB0YXJnZXRlZEVsZW1lbnQucGFyZW50Tm9kZVxuICAgICAgICBpZiAoZWxlbWVudC5jbGFzc0xpc3QuY29udGFpbnMoJ2RlbGV0ZWQnKSkgcmV0dXJuXG4gICAgICAgIGNvbnN0IGlkID0gZWxlbWVudC5pZFxuICAgICAgICBjb25zdCBsaW5rcyA9IGVsZW1lbnQucXVlcnlTZWxlY3RvcignLmNvbW1lbnQtbGlua3MnKVxuICAgICAgICBsZXQgY29tbWVudEJvZHkgPSAnJ1xuICAgICAgICBsZXQgYm9keUVsZW1lbnQgPSBlbGVtZW50LnF1ZXJ5U2VsZWN0b3IoJy5jb21tZW50LWJvZHknKVxuICAgICAgICBpZiAoYm9keUVsZW1lbnQgJiYgaWQubWF0Y2goL150MV8vKSkge1xuICAgICAgICAgICAgY29tbWVudEJvZHkgPSBib2R5RWxlbWVudC50ZXh0Q29udGVudFxuICAgICAgICB9XG4gICAgICAgIGxldCAkbmV3TGluayA9IHNldFRleHRBbmRGdW5jdGlvbl9zdWJzY3JpYmUoaWQsICQoYDxhIGhyZWY9XCJcIj5gKVswXSwgY29tbWVudEJvZHkpXG4gICAgICAgIGlmIChpZCBpbiBzdWJzY3JpcHRpb25zKSB7XG4gICAgICAgICAgICAkbmV3TGluayA9IHNldFRleHRBbmRGdW5jdGlvbl91bnN1YnNjcmliZShpZCwgJChgPGEgaHJlZj1cIlwiPmApWzBdLCBjb21tZW50Qm9keSlcbiAgICAgICAgfVxuICAgICAgICAkKGxpbmtzKS5hcHBlbmQoJG5ld0xpbmspXG4gICAgfSlcbn1cblxuY29uc3QgYWRkU3Vic2NyaWJlTGlua3NfcmV2ZGRpdF9wb3N0cyA9IChlbGVtZW50cywgc3Vic2NyaXB0aW9ucykgPT4ge1xuICAgICQoZWxlbWVudHMpLmVhY2goKGlkeCwgZWxlbWVudCkgPT4ge1xuICAgICAgICBjb25zdCBpZCA9IGVsZW1lbnQuaWRcbiAgICAgICAgY29uc3QgbGlua3MgPSBlbGVtZW50LnF1ZXJ5U2VsZWN0b3IoJy5wb3N0LWxpbmtzJylcbiAgICAgICAgbGV0ICRuZXdMaW5rID0gc2V0VGV4dEFuZEZ1bmN0aW9uX3N1YnNjcmliZShpZCwgJChgPGEgaHJlZj1cIlwiPmApWzBdKVxuICAgICAgICBpZiAoaWQgaW4gc3Vic2NyaXB0aW9ucykge1xuICAgICAgICAgICAgJG5ld0xpbmsgPSBzZXRUZXh0QW5kRnVuY3Rpb25fdW5zdWJzY3JpYmUoaWQsICQoYDxhIGhyZWY9XCJcIj5gKVswXSlcbiAgICAgICAgfVxuICAgICAgICAkKGxpbmtzKS5hcHBlbmQoJG5ld0xpbmspXG4gICAgfSlcbn1cblxuZnVuY3Rpb24gd2FpdEZvckFkZGVkTm9kZV93aXRoTWluQXR0VmFsdWUoaWQsIHBhcmVudCwgYXR0cmlidXRlLCBtaW5BdHRyaWJ1dGVWYWx1ZSwgZG9uZSkge1xuICAgIG5ldyBNdXRhdGlvbk9ic2VydmVyKGZ1bmN0aW9uKG11dGF0aW9ucykge1xuICAgICAgICB2YXIgZWwgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChpZCk7XG4gICAgICAgIGlmIChlbCAmJiBlbC5nZXRBdHRyaWJ1dGUoYXR0cmlidXRlKSA+PSBtaW5BdHRyaWJ1dGVWYWx1ZSkge1xuICAgICAgICAgICAgdGhpcy5kaXNjb25uZWN0KCk7XG4gICAgICAgICAgICBkb25lKCk7XG4gICAgICAgIH1cbiAgICB9KS5vYnNlcnZlKHBhcmVudCB8fCBkb2N1bWVudCwge1xuICAgICAgICBjaGlsZExpc3Q6IHRydWUsXG4gICAgICAgIHN1YnRyZWU6IHRydWVcbiAgICB9KTtcbn1cblxuZnVuY3Rpb24gZmluZElEc0ZvclVzZXJBbmRNYXJrKHN0b3JhZ2UsIHVzZXIsIGlzVXNlclBhZ2UpIHtcbiAgICBjb25zdCBzZWVuX3JlbW92ZWRfaWRzID0gZ2V0SURzSGFzaEZyb21TZWxlY3RvcignLmNvbW1lbnQucmVtb3ZlZCwgLnBvc3QucmVtb3ZlZCwgLmNvbW1lbnQuZGVsZXRlZCwgLnBvc3QuZGVsZXRlZCcpXG4gICAgY29uc3Qgc2Vlbl9hcHByb3ZlZF9pZHMgPSBnZXRJRHNIYXNoRnJvbVNlbGVjdG9yKCcuY29tbWVudDpub3QoLnJlbW92ZWQpLCAucG9zdDpub3QoLnJlbW92ZWQpJylcbiAgICBjb25zdCBzZWVuX2xvY2tlZF9pZHMgPSBnZXRJRHNIYXNoRnJvbVNlbGVjdG9yKCcuY29tbWVudC5sb2NrZWQsIC5wb3N0LmxvY2tlZCcpXG4gICAgY29uc3Qgc2Vlbl91bmxvY2tlZF9pZHMgPSBnZXRJRHNIYXNoRnJvbVNlbGVjdG9yKCcuY29tbWVudDpub3QoLmxvY2tlZCknLCAnLnBvc3Q6bm90KC5sb2NrZWQpJylcbiAgICBtYXJrSURzQXNTZWVuSWZTdWJzY3JpYmVkKHN0b3JhZ2UsIHVzZXIsIGlzVXNlclBhZ2UsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWVuX3JlbW92ZWRfaWRzLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2Vlbl9hcHByb3ZlZF9pZHMsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWVuX2xvY2tlZF9pZHMsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWVuX3VubG9ja2VkX2lkcyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChzKSA9PiB7XG4gICAgICAgIGNocm9tZS5ydW50aW1lLnNlbmRNZXNzYWdlKHthY3Rpb246ICd1cGRhdGUtYmFkZ2UnfSlcbiAgICB9KVxufVxuXG5mdW5jdGlvbiBnZXRJRHNIYXNoRnJvbVNlbGVjdG9yKHNlbGVjdG9yKSB7XG4gICAgY29uc3QgaGFzaCA9IHt9XG4gICAgJChzZWxlY3RvcikuZWFjaChmdW5jdGlvbigpIHtcbiAgICAgICAgY29uc3QgaWQgPSB0aGlzLmdldEF0dHJpYnV0ZSgnaWQnKVxuICAgICAgICBoYXNoW2lkXSA9IHRoaXMuZ2V0QXR0cmlidXRlKCdkYXRhLWNyZWF0ZWRfdXRjJylcbiAgICB9KVxuICAgIHJldHVybiBoYXNoXG59XG4iLCJpbXBvcnQge2dldFN1YnNjcmliZWRVc2Vyc193aXRoU2VlbkFuZFVuc2VlbklEcywgc3Vic2NyaWJlVXNlcn0gZnJvbSAnLi9zdG9yYWdlLmpzJ1xuaW1wb3J0IHtyZWRkaXRNb2RpZmljYXRpb25zfSBmcm9tICcuL2NvbnRlbnQtcmVkZGl0LmpzJ1xuaW1wb3J0IHtyZXZkZGl0TW9kaWZpY2F0aW9uc30gZnJvbSAnLi9jb250ZW50LXJldmRkaXQuanMnXG5pbXBvcnQge2dldExvZ2dlZGluVXNlcn0gZnJvbSAnLi9yZXF1ZXN0cy5qcydcbmltcG9ydCBicm93c2VyIGZyb20gJ3dlYmV4dGVuc2lvbi1wb2x5ZmlsbCdcblxuXG5cbihmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gcXVlcnlVc2VyIChtZXNzYWdlLCBzZW5kZXIsIHJlc3BvbnNlKSB7XG4gICAgICAgIGlmIChtZXNzYWdlLmFjdGlvbiA9PT0gJ3F1ZXJ5LXVzZXInKSB7XG4gICAgICAgICAgICByZXR1cm4gZ2V0TG9nZ2VkaW5Vc2VyKClcbiAgICAgICAgICAgIC50aGVuKCh1c2VyKSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKHVzZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHN1YnNjcmliZVVzZXIodXNlciwgKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgd2luZG93LmxvY2F0aW9uLmhyZWY9YGh0dHBzOi8vd3d3LnJldmVkZGl0LmNvbS91c2VyLyR7dXNlcn0/YWxsPXRydWVgXG4gICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSgnZmFpbGVkJylcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KVxuICAgICAgICB9XG4gICAgfVxuICAgICQuZXh0ZW5kKCQuZXhwcltcIjpcIl0sIHtcbiAgICAgICAgXCJlcXVhbHNpXCI6IChlbGVtLCBpLCBtYXRjaCwgYXJyYXkpID0+IHtcbiAgICAgICAgICAgIHJldHVybiAoZWxlbS50ZXh0Q29udGVudCB8fCBlbGVtLmlubmVyVGV4dCB8fCBcIlwiKS50b0xvd2VyQ2FzZSgpLnRyaW0oKSA9PT0gbWF0Y2hbM10udG9Mb3dlckNhc2UoKS50cmltKClcbiAgICAgICAgfVxuICAgIH0pO1xuICAgIHdpbmRvdy5sb2NhbFN0b3JhZ2Uuc2V0SXRlbSgnaGFzU2Vlbkxhbmd1YWdlTW9kYWwnLCB0cnVlKVxuICAgIHdpbmRvdy5sb2NhbFN0b3JhZ2Uuc2V0SXRlbSgnaGFzTm90aWZpZXJFeHRlbnNpb24nLCB0cnVlKVxuICAgIGJyb3dzZXIucnVudGltZS5vbk1lc3NhZ2UuYWRkTGlzdGVuZXIocXVlcnlVc2VyKVxuXG4gICAgY29uc3QgZXh0ZW5zaW9uU2F5c05vU3Vic2NyaXB0aW9ucyA9ICdleHRlbnNpb25TYXlzTm9TdWJzY3JpcHRpb25zJ1xuICAgIGxldCB1c2VyID0gJ290aGVyJ1xuICAgIGxldCBpc1VzZXJQYWdlID0gZmFsc2VcbiAgICBsZXQgaXNJbmZvUGFnZSA9IGZhbHNlXG4gICAgbGV0IGlzUmVkZGl0ID0gZmFsc2VcbiAgICBqUXVlcnkoZG9jdW1lbnQpLnJlYWR5KCgpID0+IHtcbiAgICAgICAgY29uc3QgbWF0Y2hlcyA9IHdpbmRvdy5sb2NhdGlvbi5ocmVmLm1hdGNoKC9eaHR0cHM/OlxcL1xcL1teL10qKHJlZGRpdFxcLmNvbXxyZXZlZGRpdFxcLmNvbXxsb2NhbGhvc3QpLylcbiAgICAgICAgaWYgKG1hdGNoZXMpIHtcbiAgICAgICAgICAgIGlzUmVkZGl0ID0gbWF0Y2hlc1sxXSA9PT0gJ3JlZGRpdC5jb20nXG4gICAgICAgICAgICBjb25zdCBwYXRoUGFydHMgPSB3aW5kb3cubG9jYXRpb24ucGF0aG5hbWUuc3BsaXQoJy8nKVxuICAgICAgICAgICAgaWYgKHBhdGhQYXJ0c1sxXSA9PT0gJ3VzZXInICYmIHBhdGhQYXJ0cy5sZW5ndGggPj0gMyAmJiBwYXRoUGFydHNbMl0pIHtcbiAgICAgICAgICAgICAgICB1c2VyID0gd2luZG93LmxvY2F0aW9uLnBhdGhuYW1lLnNwbGl0KCcvJylbMl07XG4gICAgICAgICAgICAgICAgaXNVc2VyUGFnZSA9IHRydWVcbiAgICAgICAgICAgIH0gZWxzZSBpZiAocGF0aFBhcnRzWzFdID09PSAnaW5mbycpIHtcbiAgICAgICAgICAgICAgICBpc0luZm9QYWdlID0gdHJ1ZVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGdldFN1YnNjcmliZWRVc2Vyc193aXRoU2VlbkFuZFVuc2VlbklEcygodXNlcnMsIHN0b3JhZ2UpID0+IHtcbiAgICAgICAgICAgIGlmIChPYmplY3Qua2V5cyh1c2VycykuZmlsdGVyKHggPT4geCAhPT0gJ290aGVyJykubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICAgICAgd2luZG93LmxvY2FsU3RvcmFnZS5zZXRJdGVtKGV4dGVuc2lvblNheXNOb1N1YnNjcmlwdGlvbnMsIHRydWUpXG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHdpbmRvdy5sb2NhbFN0b3JhZ2UucmVtb3ZlSXRlbShleHRlbnNpb25TYXlzTm9TdWJzY3JpcHRpb25zKVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGlzUmVkZGl0KSB7XG4gICAgICAgICAgICAgICAgcmVkZGl0TW9kaWZpY2F0aW9ucyhzdG9yYWdlLm90aGVyX3N1YnNjcmlwdGlvbnMsIHN0b3JhZ2Uub3B0aW9ucy5oaWRlX3N1YnNjcmliZSwgc3RvcmFnZS5vcHRpb25zLm1vbml0b3JfcXVhcmFudGluZWQpXG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldmRkaXRNb2RpZmljYXRpb25zKHN0b3JhZ2UsIHVzZXIsIGlzVXNlclBhZ2UsIGlzSW5mb1BhZ2UpXG4gICAgICAgICAgICB9XG4gICAgICAgIH0pXG4gICAgfSk7XG59KSgpO1xuIl0sInNvdXJjZVJvb3QiOiIifQ==