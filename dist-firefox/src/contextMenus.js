!function(e){var t={};function n(r){if(t[r])return t[r].exports;var o=t[r]={i:r,l:!1,exports:{}};return e[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)n.d(r,o,function(t){return e[t]}.bind(null,o));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=312)}({1:function(e,t,n){"use strict";n.r(t),n.d(t,"INTERVAL_DEFAULT",function(){return u}),n.d(t,"MAX_SYNC_STORAGE_ITEMS_PER_OBJECT",function(){return s}),n.d(t,"MAX_SYNC_STORAGE_CHANGES",function(){return a}),n.d(t,"MAX_OTHER_SUBSCRIPTIONS",function(){return f}),n.d(t,"REMOVED",function(){return d}),n.d(t,"APPROVED",function(){return l}),n.d(t,"LOCKED",function(){return h}),n.d(t,"UNLOCKED",function(){return m}),n.d(t,"EDITED",function(){return b}),n.d(t,"DELETED",function(){return g}),n.d(t,"getObjectNamesForThing",function(){return O}),n.d(t,"markEverythingAsSeen",function(){return w}),n.d(t,"markThingAsSeen",function(){return k}),n.d(t,"setStorageUpdateBadge",function(){return j}),n.d(t,"markIDsAsSeenIfSubscribed",function(){return S}),n.d(t,"subscribeId",function(){return I}),n.d(t,"unsubscribeId",function(){return D}),n.d(t,"getSubscribedIds",function(){return A}),n.d(t,"subscribeUser",function(){return T}),n.d(t,"unsubscribeUser",function(){return C}),n.d(t,"initStorage",function(){return P}),n.d(t,"getSubscribedUsers_withSeenAndUnseenIDs",function(){return M}),n.d(t,"getSubscribedUsers_withUnseenIDs",function(){return R}),n.d(t,"getUnseenIDs_thing",function(){return U}),n.d(t,"getIDs_thing",function(){return L}),n.d(t,"getLocalStorageItems",function(){return x}),n.d(t,"saveLocalStorageItems",function(){return N}),n.d(t,"addLocalStorageItems",function(){return F}),n.d(t,"getItemFromLocalStorage",function(){return B}),n.d(t,"getAllChanges",function(){return V}),n.d(t,"getOptions",function(){return G}),n.d(t,"saveOptions",function(){return X});var r=n(2);function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter(function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable})),n.push.apply(n,r)}return n}function c(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(n,!0).forEach(function(t){i(e,t,n[t])}):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(n).forEach(function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))})}return e}function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var u=1,s=130,a=100,f=100,d=1,l=2,h=3,m=4,b=5,g=6,p={changes:[],removed:{},approved:{},locked:{},unlocked:{}},v=function(e,t,n){return n?e+"_u_"+t:e+"_"+t},y=function(e,t){var n=!(arguments.length>2&&void 0!==arguments[2])||arguments[2];Object.keys(p).forEach(function(r){e[v(r,t,n)]=p[r]})},O=function(e){var t=!(arguments.length>1&&void 0!==arguments[1])||arguments[1],n={};return Object.keys(p).forEach(function(r){n[r]=v(r,e,t)}),n},_=function(e){var t={};return y(t,e,!0),t},w=function(){return browser.storage.sync.get(null).then(function(e){return Object.keys(e.user_subscriptions).forEach(function(t){k(e,t,!0)}),k(e,"other",!1),j(e)})},k=function(e,t,n){var r=O(t,n);delete r.changes;var o=[];Object.values(r).forEach(function(e){o.push(e)}),o.forEach(function(t){Object.values(e[t]).forEach(function(e){e.u=!1})})},j=function(e){return browser.storage.sync.set(e).then(function(e){return browser.runtime.sendMessage({action:"update-badge"})})},E=function(e,t,n,o,c){var i=e[t[n]];Object.keys(o).forEach(function(e){e in i?i[e].u=!1:c&&(i[e]=new r.ItemForStorage(o[e],!1))})},S=function(e,t,n,r,o,c,i){var u=arguments.length>7&&void 0!==arguments[7]?arguments[7]:function(){},s=O(t,n);delete s.changes;var a=e.user_subscriptions[t];!a&&n||(E(e,s,"removed",r,n),E(e,s,"approved",o,n),E(e,s,"locked",c,n),E(e,s,"unlocked",i,n),chrome.storage.sync.set(e,u))},I=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:function(){},n="other_subscriptions";chrome.storage.sync.get(n,function(o){o[n][e]={t:Math.floor((new Date).getTime()/1e3)};var c=Object(r.trimDict_by_numberValuedAttribute)(o[n],f,"t");chrome.storage.sync.set(i({},n,c),t)})},D=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:function(){},n="other_subscriptions",r=O("other",!1);delete r.changes,chrome.storage.sync.get(Object.values(r).concat(n),function(o){delete o[n][e],Object.values(r).forEach(function(t){e in o[t]&&delete o[t][e]}),chrome.storage.sync.set(o,function(){chrome.runtime.sendMessage({action:"update-badge"},t)})})},A=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:function(){},t="other_subscriptions";chrome.storage.sync.get(t,function(n){e(Object.keys(n[t]))})},T=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:function(){},n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:function(){},r=_(e);chrome.storage.sync.get("user_subscriptions",function(o){var i=o.user_subscriptions;e in i?n("already subscribed to this user"):Object.keys(i).length<5?(i[e]=!0,chrome.storage.sync.set(c({user_subscriptions:i},r),t)):n("maximum number of subscriptions reached")})},C=function(e,t){var n=Object.keys(_(e));chrome.storage.sync.get("user_subscriptions",function(r){var o=r.user_subscriptions;delete o[e],chrome.storage.sync.set({user_subscriptions:o},function(){chrome.storage.sync.remove(n,function(){var n=v("items",e,!0);chrome.runtime.sendMessage({action:"update-badge"}),chrome.storage.local.remove(n,t)})})})},P=function(e){chrome.storage.sync.get(null,function(t){var n;0===Object.keys(t).length?chrome.storage.sync.set((y(n={user_subscriptions:{},other_subscriptions:{},options:{interval:u,custom_clientid:"",removal_status:{track:!0,notify:!0},lock_status:{track:!0,notify:!0}}},"other",!1),n),e):e()})},M=function(e){chrome.storage.sync.get(null,function(t){var n=Object.keys(t.user_subscriptions),r={};n.forEach(function(e){r[e]=L(e,!0,t)}),r.other=L("other",!1,t),e(r,t)})},R=function(e){chrome.storage.sync.get(null,function(t){var n=Object.keys(t.user_subscriptions),r={};n.forEach(function(e){r[e]=U(e,!0,t)}),r.other=U("other",!1,t),e(r)})},U=function(e,t,n){return L(e,t,n).unseen},L=function(e,t,n){var r=n.options.removal_status.track,o=n.options.lock_status.track,c={},i={},u=[],s=O(e,t);return r&&u.push(s.removed,s.approved),o&&u.push(s.locked,s.unlocked),u.forEach(function(e){Object.keys(n[e]).forEach(function(t){n[e][t].u?c[t]=!0:i[t]=!0})}),{unseen:Object.keys(c),seen:Object.keys(i)}},x=function(e,t){var n=v("items",e,t);return browser.storage.local.get(i({},n,{})).then(function(e){return e[n]})},N=function(e,t,n){var r=v("items",e,t);return browser.storage.local.set(i({},r,n))},F=function(e,t,n){var r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:function(){},o=v("items",t,n);chrome.storage.local.get(i({},o,{}),function(t){var n=t[o];Object.keys(e).forEach(function(t){n[t]=e[t]});var c=n;Object.keys(n).length>500&&(c=trimDictOfItems_by_utcAttribute(n,500,"o")),chrome.storage.local.set(i({},o,c),r)})},B=function(e,t,n,o){var c=v("items",e,t);return c in o&&n in o[c]?new r.LocalStorageItem({object:o[c][n]}):""},V=function(e){chrome.storage.sync.get("user_subscriptions",function(t){var n=[v("changes","other",!1)],r={changes_other:"other"};Object.keys(t.user_subscriptions).forEach(function(e){var t=v("changes",e,!0);n.push(t),r[t]=e}),chrome.storage.sync.get(n,function(t){var o={};n.forEach(function(e){e in t&&t[e].length&&(o[r[e]]=t[e])}),e(o)})})},G=function(e){return browser.storage.sync.get(["user_subscriptions","other_subscriptions","options"]).then(function(t){var n=Object.keys(t.user_subscriptions),r=Object.keys(t.other_subscriptions),o=t.options;return e(n,r,o)}).catch(console.log)},X=function(e,t,n,r,o,c,i){chrome.storage.sync.set({options:{interval:e,custom_clientid:t,removal_status:{track:n,notify:r},lock_status:{track:o,notify:c}}},i)}},2:function(e,t,n){"use strict";n.r(t),n.d(t,"ALARM_NAME",function(){return u}),n.d(t,"createTab",function(){return s}),n.d(t,"getFullIDsFromURL",function(){return a}),n.d(t,"getFullIDsFromPath",function(){return l}),n.d(t,"reformatRedditText",function(){return h}),n.d(t,"isRemovedItem",function(){return m}),n.d(t,"isComment",function(){return b}),n.d(t,"isRemovedComment",function(){return g}),n.d(t,"isUserDeletedComment",function(){return p}),n.d(t,"isUserDeletedPost",function(){return v}),n.d(t,"isUserDeletedItem",function(){return y}),n.d(t,"isRemovedPost",function(){return O}),n.d(t,"trimDict_by_numberValuedAttribute",function(){return _}),n.d(t,"sortDict_by_numberValuedAttribute",function(){return w}),n.d(t,"ItemForStorage",function(){return k}),n.d(t,"ChangeForStorage",function(){return j}),n.d(t,"LocalStorageItem",function(){return E}),n.d(t,"setAlarm",function(){return S}),n.d(t,"alphaLowerSort",function(){return I}),n.d(t,"goToOptions",function(){return D}),n.d(t,"showError",function(){return A}),n.d(t,"pprint",function(){return T}),n.d(t,"getPrettyTimeLength",function(){return C}),n.d(t,"getPrettyDate",function(){return P}),n.d(t,"createNotification",function(){return M}),n.d(t,"updateBadgeUnseenCount",function(){return R});var r=n(1);function o(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function c(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function i(e,t,n){return t&&c(e.prototype,t),n&&c(e,n),e}var u="notifyme",s=function(e){chrome.tabs.create({url:e},function(t){t?chrome.windows.update(t.windowId,{focused:!0}):chrome.windows.create({url:e},function(e){chrome.windows.update(e.id,{focused:!0})})})},a=function(e){var t=e.replace(/https:\/\/[^\/]*re(ve)?ddit.com/,"");return l(t)},f=/^\/(v|r|user)\/([^\/]+)\/comments\/([^\/]+)\/[^\/]*(?:\/([^\/?&#]+))?/,d=/^\/(?:user|y|u)\/([^\/?&#]+)\/?/,l=function(e){var t=void 0,n=void 0,r=void 0,o=void 0,c=e.match(f),i=e.match(d);c?("user"===c[1]?r=c[2]:o=c[2],c[3]&&(t="t3_"+c[3]),c[4]&&(n="t1_"+c[4])):i&&(r=i[1]);return[t,n,r,o]},h=function(e){return e.replace(/&amp;/g,"&").replace(/&gt;/g,">").replace(/&lt;/g,"<").replace(/\s+/g," ").substr(0,300)},m=function(e){return b(e.name)?g(e):O(e)},b=function(e){return"t1"===e.substr(0,2)},g=function(e){return("[removed]"===e.body.replace(/\\/g,"")||"[deleted]"===e.body.replace(/\\/g,""))&&"[deleted]"===e.author.replace(/\\/g,"")},p=function(e){return"[deleted]"===e.body.replace(/\\/g,"")&&"[deleted]"===e.author.replace(/\\/g,"")},v=function(e){return!e.is_robot_indexable&&"[deleted]"===e.author.replace(/\\/g,"")},y=function(e){return b(e.name)?p(e):v(e)},O=function(e){return!e.is_robot_indexable},_=function(e,t,n){var r=w(e,n).slice(0,t),o={};return r.forEach(function(e){o[e[0]]=e[1]}),o},w=function(e,t){var n=Object.keys(e).map(function(t){return[t,e[t]]});return n.sort(function(e,n){return n[1][t]-e[1][t]}),n},k=function(){function e(t,n){o(this,e),this.c=t,this.u=n}return i(e,[{key:"getCreatedUTC",value:function(){return this.c}},{key:"getUnseen",value:function(){return this.u}}]),e}(),j=function(){function e(t){var n=t.id,r=void 0===n?null:n,c=t.observed_utc,i=void 0===c?null:c,u=t.change_type,s=void 0===u?null:u,a=t.object,f=void 0===a?null:a;o(this,e),f?(this.i=f.i,this.o=f.o,this.g=f.g):(this.i=r,this.o=i,this.g=s)}return i(e,[{key:"getID",value:function(){return this.i}},{key:"getObservedUTC",value:function(){return this.o}},{key:"getChangeType",value:function(){switch(this.g){case r.REMOVED:return"mod removed";case r.DELETED:return"user deleted";case r.APPROVED:return"approved";case r.LOCKED:return"locked";case r.UNLOCKED:return"unlocked";case r.EDITED:return"edited"}}}]),e}(),E=function(){function e(t){var n=t.item,r=void 0===n?null:n,c=t.observed_utc,i=void 0===c?null:c,u=t.object,s=void 0===u?null:u;if(o(this,e),s)this.t=s.t,this.o=s.o,this.c=s.c;else{var a="";a=b(r.name)?h(r.body):r.title,this.t=a,this.o=i,this.c=r.created_utc}}return i(e,[{key:"setText",value:function(e){this.t=h(e)}},{key:"getText",value:function(){return this.t}},{key:"getObservedUTC",value:function(){return this.o}},{key:"getCreatedUTC",value:function(){return this.c}}]),e}();function S(e){chrome.alarms.clear(u),chrome.alarms.create(u,{delayInMinutes:1,periodInMinutes:e})}function I(e,t){var n=e.toLowerCase(),r=t.toLowerCase();return n<r?-1:n>r?1:0}function D(){chrome.runtime.openOptionsPage?(chrome.runtime.openOptionsPage(),window.close()):window.open(chrome.runtime.getURL("/src/options.html"))}function A(e,t){$('<div class="rr-error">'+e+"</div>").appendTo(t).delay(2400).fadeTo(400,0,function(){$(this).remove()})}function T(e){console.log(JSON.stringify(e,null,"\t"))}var C=function(e){var t=[[60,"second","seconds"],[60,"minute","minutes"],[24,"hour","hours"],[7,"day","days"],[365/12/7,"week","weeks"],[12,"month","months"],[10,"year","years"],[10,"decade","decades"],[10,"century","centuries"],[10,"millenium","millenia"]];if(e<60)return e+" seconds";for(var n=e,r=0;r<t.length;r++){var o=t[r][0],c=t[r][1],i=t[r][2];if(n<o){var u=n-Math.floor(n),s=Math.round(u*t[r-1][0]);if(t[r-1][0]===s&&(n+=1,s=0),(Math.floor(n)>1||0==Math.floor(n))&&(c=i),r>1&&s>0){var a=t[r-1][1];s>1&&(a=t[r-1][2]),c+=", "+String(s)+" "+a}return String(Math.floor(n))+" "+c}n/=o}},P=function(e){var t=Math.floor((new Date).getTime()/1e3)-e;return C(t)+" ago"},M=function(e){var t=e.notificationId,n=e.title,r=e.message;location.protocol.match(/^http/)?chrome.runtime.sendMessage({action:"create-notification",options:{notificationId:t,title:n,message:r}}):chrome.notifications.create(t,{type:"basic",iconUrl:"/icons/128.png",title:n,message:r})},R=function(){location.protocol.match(/^http/)?chrome.runtime.sendMessage({action:"update-badge"}):Object(r.getSubscribedUsers_withUnseenIDs)(function(e){var t=0;Object.values(e).forEach(function(e){t+=e.length});var n=t.toString();0==t&&(n=""),chrome.browserAction.setBadgeBackgroundColor({color:"red"}),chrome.browserAction.setBadgeText({text:n})})}},28:function(e,t,n){"use strict";n.r(t),n.d(t,"lookupItemsByID",function(){return a}),n.d(t,"lookupItemsByUser",function(){return m}),n.d(t,"handleFetchErrors",function(){return b}),n.d(t,"getRedditData",function(){return g}),n.d(t,"getRedditToken",function(){return p}),n.d(t,"getAuth",function(){return v}),n.d(t,"getLocalAuth",function(){return y}),n.d(t,"getCookie",function(){return O}),n.d(t,"getLocalOrAppAuth",function(){return w}),n.d(t,"getLoggedinUser",function(){return k});var r=n(1);function o(e,t,n,r,o,c,i){try{var u=e[c](i),s=u.value}catch(e){return void n(e)}u.done?t(s):Promise.resolve(s).then(r,o)}function c(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter(function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable})),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?c(n,!0).forEach(function(t){u(e,t,n[t])}):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):c(n).forEach(function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))})}return e}function u(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e){return function(e){if(Array.isArray(e)){for(var t=0,n=new Array(e.length);t<e.length;t++)n[t]=e[t];return n}}(e)||function(e){if(Symbol.iterator in Object(e)||"[object Arguments]"===Object.prototype.toString.call(e))return Array.from(e)}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}var a=function(e,t){var n={id:e,raw_json:1},r="?"+Object.keys(n).map(function(e){return"".concat(e,"=").concat(n[e])}).join("&");return h.apply(void 0,s(_("api/info",r,t)))},f={name:"reddit_session",url:"https://reddit.com"},d=["name","value","domain","path","secure","httpOnly","storeId"],l=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"https://reddit.com";if(!e)return e;var n=Object.keys(e).filter(function(e){return d.includes(e)}).reduce(function(t,n){return i({},t,u({},n,e[n]))},{});return n.url=t,n},h=function(){var e,t=(e=regeneratorRuntime.mark(function e(t,n){var r,o;return regeneratorRuntime.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:return e.t0=l,e.next=3,browser.cookies.get(f);case 3:if(e.t1=e.sent,r=(0,e.t0)(e.t1),browser.cookies.set({domain:"reddit.com",url:"https://reddit.com",name:"_options",value:"{%22pref_quarantine_optin%22:true}"}),!r){e.next=9;break}return e.next=9,browser.cookies.remove(f);case 9:if(o=window.fetch(t,n).then(b).then(g).catch(console.log),!r){e.next=13;break}return e.next=13,browser.cookies.set(r);case 13:return e.abrupt("return",o);case 14:case"end":return e.stop()}},e)}),function(){var t=this,n=arguments;return new Promise(function(r,c){var i=e.apply(t,n);function u(e){o(i,r,c,u,s,"next",e)}function s(e){o(i,r,c,u,s,"throw",e)}u(void 0)})});return function(e,n){return t.apply(this,arguments)}}(),m=function(e,t,n,r,o){var c={limit:100,sort:n,raw_json:1};t&&(c.after=t),r&&(c.t=r);var i="user/".concat(e,"/overview.json"),u="?"+Object.keys(c).map(function(e){return"".concat(e,"=").concat(c[e])}).join("&");return h.apply(void 0,s(_(i,u,o)))},b=function(e){if(!e.ok)throw Error(e.statusText);return e.json()},g=function(e){if(!e||!e.data||!e.data.children)throw Error("reddit data is not defined");return e.data.children},p=function(e){if(!e||!e.access_token)throw Error("access token is not defined");return e.access_token},v=function(){return Object(r.getOptions)(function(e,t,n){var r="SEw1uvRd6kxFEw";if(n.custom_clientid&&"testing"===(r=n.custom_clientid))return"none";var o={headers:{Authorization:"Basic ".concat(window.btoa("".concat(r,":"))),"Content-Type":"application/x-www-form-urlencoded; charset=utf-8"},method:"POST",body:"grant_type=".concat(encodeURIComponent("https://oauth.reddit.com/grants/installed_client"),"&device_id=DO_NOT_TRACK_THIS_DEVICE")};return window.fetch("https://www.reddit.com/api/v1/access_token",o).then(b).then(p).then(function(e){return{headers:{Authorization:"bearer ".concat(e)}}}).catch(console.log)})},y=function(){return window.fetch("https://mod.reddit.com/mail/all").then(function(e){O({url:"https://mod.reddit.com",name:"token"}).then(function(e){if(e){var t=new RegExp("[^A-Za-z0-9+/].*?$"),n=e.value.replace(t,""),r=atob(n),o=JSON.parse(r);return"accessToken"in o&&o.accessToken?{headers:{Authorization:"bearer ".concat(o.accessToken)}}:null}return null})})},O=function(e){var t=e.url,n=e.name;return location.protocol.match(/^http/)?browser.runtime.sendMessage({action:"get-cookie",options:{url:t,name:n}}).then(function(e){return e.cookie}):browser.cookies.get({url:t,name:n})},_=function(e,t,n){if(n&&"none"!==n)return["https://oauth.reddit.com/"+e+t,n];var r="https://www.reddit.com/"+e;return"api/info"===e&&(r+=".json"),[r+=t]},w=function(){return y().then(function(e){return e||v()}).catch(console.log)},k=function(){return window.fetch("https://www.reddit.com/api/me.json").then(b).then(j).catch(console.log)},j=function(e){if(!e||!e.data||!e.data.name)throw Error("reddit username is not defined");return e.data.name}},312:function(e,t,n){"use strict";n.r(t),n.d(t,"setupContextualMenu",function(){return u});var r=n(1),o=n(2),c=n(64);function i(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=[],r=!0,o=!1,c=void 0;try{for(var i,u=e[Symbol.iterator]();!(r=(i=u.next()).done)&&(n.push(i.value),!t||n.length!==t);r=!0);}catch(e){o=!0,c=e}finally{try{r||null==u.return||u.return()}finally{if(o)throw c}}return n}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}()}var u=function(){chrome.contextMenus.removeAll(function(){chrome.contextMenus.create({id:"reveddit-subscribe",title:"reveddit subscribe",contexts:["link"],targetUrlPatterns:["https://*.reddit.com/r/*/comments/*","https://www.reveddit.com/r/*/comments/*","https://*.reddit.com/user/*","https://www.reveddit.com/user/*"]})}),chrome.contextMenus.onClicked.addListener(function(e,t){if("reveddit-subscribe"==e.menuItemId){var n=e.linkUrl,u=i(Object(o.getFullIDsFromURL)(n),3),s=u[0],a=u[1],f=u[2];a?(Object(r.subscribeId)(a),Object(c.b)(a,n)):s?(Object(r.subscribeId)(s),Object(c.b)(s,n)):f?Object(r.subscribeUser)(f):alert("Unable to subscribe to this ".concat("link",", it is not a comment, post or user.\n\n").concat(n))}})}},64:function(e,t,n){"use strict";n.d(t,"b",function(){return f}),n.d(t,"a",function(){return d});var r=n(28),o=n(1),c=n(2);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var u=0,s=1,a=2,f=function(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:function(){},o=u;t.match(/^https:\/\/www.reveddit.com/)&&(o=s),chrome.storage.sync.get(null,function(t){Object(r.getAuth)().then(function(r){l([e],"other",!1,r,t,o,{},n)})})},d=function(){chrome.storage.sync.get(null,function(e){var t=Object.keys(e.user_subscriptions),n=Object.keys(e.other_subscriptions);(t.length||n.length)&&Object(r.getAuth)().then(function(n){!function(e,t){var n=Object.keys(t.other_subscriptions);n.length&&l(n,"other",!1,e,t,a)}(n,e),function e(t,n,o){if(t.length){var c=t[0];Object(r.lookupItemsByUser)(c,"","new","",n).then(function(r){if(r){var i=[],u={};r.forEach(function(e){i.push(e.data.name),u[e.data.name]=e.data}),l(i,c,!0,n,o,a,u,function(){e(t.slice(1),n,o)})}})}}(t,n,e)})})};function l(e,t,n,u,s,a){var f=arguments.length>6&&void 0!==arguments[6]?arguments[6]:{},d=arguments.length>7&&void 0!==arguments[7]?arguments[7]:function(){};Object(r.lookupItemsByID)(e,u).then(function(e){if(e){var r=s.options.removal_status,u=s.options.lock_status,l=Object(o.getObjectNamesForThing)(t,n),m=s[l.removed]||{},b=s[l.approved]||{},g=s[l.locked]||{},p=s[l.unlocked]||{},v=s[l.changes]||[];n||(f={});var y=[],O=[],_=[],w=[];e.forEach(function(e){var t=e.data;n||(f[t.name]=t),Object(c.isRemovedItem)(t)?y.push(t.name):O.push(t.name),t.locked?_.push(t.name):w.push(t.name)});var k={},j=[],E=0;Object(o.getLocalStorageItems)(t,n).then(function(e){var s;r.track&&(E+=h(y,o.REMOVED,"mod removed",m,O,o.APPROVED,"approved",b,v,f,r.notify,k,j,n,a,e)),u.track&&(E+=h(_,o.LOCKED,"locked",g,w,o.UNLOCKED,"unlocked",p,v,f,u.notify,k,j,n,a,e)),E&&j.length&&Object(c.createNotification)({notificationId:t,title:t,message:"".concat(E," new [").concat(j.join(", "),"] actions, click to view")}),chrome.storage.sync.set((i(s={},l.removed,Object(c.trimDict_by_numberValuedAttribute)(m,o.MAX_SYNC_STORAGE_ITEMS_PER_OBJECT,"c")),i(s,l.approved,Object(c.trimDict_by_numberValuedAttribute)(b,o.MAX_SYNC_STORAGE_ITEMS_PER_OBJECT,"c")),i(s,l.locked,Object(c.trimDict_by_numberValuedAttribute)(g,o.MAX_SYNC_STORAGE_ITEMS_PER_OBJECT,"c")),i(s,l.unlocked,Object(c.trimDict_by_numberValuedAttribute)(p,o.MAX_SYNC_STORAGE_ITEMS_PER_OBJECT,"c")),i(s,l.changes,v.slice(-o.MAX_SYNC_STORAGE_CHANGES)),s),function(){Object(c.updateBadgeUnseenCount)(),Object(o.addLocalStorageItems)(k,t,n,d)})})}})}function h(e,t,n,r,i,a,f,d,l,h,m,b,g,p,v,y){var O=[],_=[],w=[],k=Math.floor(new Date/1e3);e.forEach(function(e){var n=h[e];if(p||y[e]||(b[e]=new c.LocalStorageItem({item:n,observed_utc:k})),!(e in r)){var i=!0;if((v===u&&t!==o.REMOVED||v===s)&&(i=!1),r[e]=new c.ItemForStorage(n.created_utc,i),delete d[e],i){var a=t;Object(c.isUserDeletedItem)(n)?(a=o.DELETED,w.push(e)):O.push(e),l.push(new c.ChangeForStorage({id:e,observed_utc:k,change_type:a}))}p&&(b[e]=new c.LocalStorageItem({item:n,observed_utc:k}))}}),i.forEach(function(e){var t=h[e];p||y[e]||(b[e]=new c.LocalStorageItem({item:t,observed_utc:k})),e in r?(d[e]=new c.ItemForStorage(t.created_utc,!0),delete r[e],l.push(new c.ChangeForStorage({id:e,observed_utc:k,change_type:a})),_.push(e),b[e]=new c.LocalStorageItem({item:t,observed_utc:k})):d[e]=new c.ItemForStorage(t.created_utc,!1)});var j=O.length+_.length+w.length;return m&&j&&(O.length&&g.push(n),w.length&&g.push("user deleted"),_.length&&g.push(f)),j}}});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,