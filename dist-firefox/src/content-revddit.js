!function(e){var t={};function n(r){if(t[r])return t[r].exports;var o=t[r]={i:r,l:!1,exports:{}};return e[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)n.d(r,o,function(t){return e[t]}.bind(null,o));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=315)}({1:function(e,t,n){"use strict";n.r(t),n.d(t,"INTERVAL_DEFAULT",function(){return u}),n.d(t,"SEEN_COUNT_DEFAULT",function(){return m}),n.d(t,"MAX_SYNC_STORAGE_ITEMS_PER_OBJECT",function(){return g}),n.d(t,"MAX_SYNC_STORAGE_CHANGES",function(){return l}),n.d(t,"MAX_OTHER_SUBSCRIPTIONS",function(){return d}),n.d(t,"REMOVED",function(){return f}),n.d(t,"APPROVED",function(){return h}),n.d(t,"LOCKED",function(){return A}),n.d(t,"UNLOCKED",function(){return b}),n.d(t,"EDITED",function(){return p}),n.d(t,"DELETED",function(){return v}),n.d(t,"getObjectNamesForThing",function(){return k}),n.d(t,"markEverythingAsSeen",function(){return O}),n.d(t,"markThingAsSeen",function(){return E}),n.d(t,"setStorageUpdateBadge",function(){return j}),n.d(t,"markIDsAsSeenIfSubscribed",function(){return T}),n.d(t,"subscribeId",function(){return C}),n.d(t,"unsubscribeId",function(){return I}),n.d(t,"getSubscribedIds",function(){return P}),n.d(t,"subscribeUser",function(){return D}),n.d(t,"unsubscribeUser",function(){return M}),n.d(t,"initStorage",function(){return L}),n.d(t,"getSubscribedUsers_withSeenAndUnseenIDs",function(){return R}),n.d(t,"getSubscribedUsers_withUnseenIDs",function(){return U}),n.d(t,"getUnseenIDs_thing",function(){return N}),n.d(t,"getIDs_thing",function(){return F}),n.d(t,"getLocalStorageItems",function(){return $}),n.d(t,"saveLocalStorageItems",function(){return B}),n.d(t,"addLocalStorageItems",function(){return q}),n.d(t,"getItemFromLocalStorage",function(){return V}),n.d(t,"getAllChanges",function(){return G}),n.d(t,"getOptions",function(){return z}),n.d(t,"saveOptions",function(){return X});var r=n(2),o=n(3),s=n.n(o);function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter(function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable})),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(n,!0).forEach(function(t){c(e,t,n[t])}):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(n).forEach(function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))})}return e}function c(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var u=1,m=2,g=130,l=100,d=100,f=1,h=2,A=3,b=4,p=5,v=6,y={changes:[],removed:{},approved:{},locked:{},unlocked:{}},x=function(e,t,n){return n?e+"_u_"+t:e+"_"+t},_=function(e,t){var n=!(arguments.length>2&&void 0!==arguments[2])||arguments[2];Object.keys(y).forEach(function(r){e[x(r,t,n)]=y[r]})},k=function(e){var t=!(arguments.length>1&&void 0!==arguments[1])||arguments[1],n={};return Object.keys(y).forEach(function(r){n[r]=x(r,e,t)}),n},w=function(e){var t={};return _(t,e,!0),t},O=function(){return s.a.storage.sync.get(null).then(function(e){return Object.keys(e.user_subscriptions).forEach(function(t){E(e,t,!0)}),E(e,"other",!1),j(e)})},E=function(e,t,n){var r=k(t,n);delete r.changes;var o=[];Object.values(r).forEach(function(e){o.push(e)}),o.forEach(function(t){Object.values(e[t]).forEach(function(e){e.u=!1})})},j=function(e){return s.a.storage.sync.set(e).then(function(e){return s.a.runtime.sendMessage({action:"update-badge"})})},S=function(e,t,n,o,s){var i=e[t[n]];Object.keys(o).forEach(function(e){e in i?i[e].u=!1:s&&(i[e]=new r.ItemForStorage(o[e],!1))})},T=function(e,t,n,r,o,s,i){var a=arguments.length>7&&void 0!==arguments[7]?arguments[7]:function(){},c=k(t,n);delete c.changes;var u=e.user_subscriptions[t];!u&&n||(S(e,c,"removed",r,n),S(e,c,"approved",o,n),S(e,c,"locked",s,n),S(e,c,"unlocked",i,n),chrome.storage.sync.set(e,a))},C=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:function(){},n="other_subscriptions";chrome.storage.sync.get(n,function(o){o[n][e]={t:Math.floor((new Date).getTime()/1e3)};var s=Object(r.trimDict_by_numberValuedAttribute)(o[n],d,"t");chrome.storage.sync.set(c({},n,s),t)})},I=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:function(){},n="other_subscriptions",r=k("other",!1);delete r.changes,chrome.storage.sync.get(Object.values(r).concat(n),function(o){delete o[n][e],Object.values(r).forEach(function(t){e in o[t]&&delete o[t][e]}),chrome.storage.sync.set(o,function(){chrome.runtime.sendMessage({action:"update-badge"},t)})})},P=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:function(){},t="other_subscriptions";chrome.storage.sync.get(t,function(n){e(Object.keys(n[t]))})},D=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:function(){},n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:function(){},r=w(e);chrome.storage.sync.get("user_subscriptions",function(o){var s=o.user_subscriptions;e in s?n("already subscribed to this user"):Object.keys(s).length<5?(s[e]=!0,chrome.storage.sync.set(a({user_subscriptions:s},r),t)):n("maximum number of subscriptions reached")})},M=function(e,t){var n=Object.keys(w(e));chrome.storage.sync.get("user_subscriptions",function(r){var o=r.user_subscriptions;delete o[e],chrome.storage.sync.set({user_subscriptions:o},function(){chrome.storage.sync.remove(n,function(){var n=x("items",e,!0);chrome.runtime.sendMessage({action:"update-badge"}),chrome.storage.local.remove(n,t)})})})},L=function(e){chrome.storage.sync.get(null,function(t){var n;0===Object.keys(t).length?chrome.storage.sync.set((_(n={user_subscriptions:{},other_subscriptions:{},options:{interval:u,seen_count:m,custom_clientid:"",removal_status:{track:!0,notify:!0},lock_status:{track:!0,notify:!0},monitor_quarantined:!1},last_check:null,last_check_quarantined:null},"other",!1),n),e):e()})},R=function(e){chrome.storage.sync.get(null,function(t){var n=Object.keys(t.user_subscriptions),r={};n.forEach(function(e){r[e]=F(e,!0,t)}),r.other=F("other",!1,t),e(r,t)})},U=function(e){chrome.storage.sync.get(null,function(t){var n=Object.keys(t.user_subscriptions),r={};n.forEach(function(e){r[e]=N(e,!0,t)}),r.other=N("other",!1,t),e(r)})},N=function(e,t,n){return F(e,t,n).unseen},F=function(e,t,n){var r=n.options.removal_status.track,o=n.options.lock_status.track,s={},i={},a=[],c=k(e,t);return r&&a.push(c.removed,c.approved),o&&a.push(c.locked,c.unlocked),a.forEach(function(e){Object.keys(n[e]).forEach(function(t){n[e][t].u?s[t]=!0:i[t]=!0})}),{unseen:Object.keys(s),seen:Object.keys(i)}},$=function(e,t){var n=x("items",e,t);return s.a.storage.local.get(c({},n,{})).then(function(e){return e[n]})},B=function(e,t,n){var r=x("items",e,t);return s.a.storage.local.set(c({},r,n))},q=function(e,t,n){var r=x("items",t,n);return chrome.storage.local.get(c({},r,{}),function(t){var n=t[r];Object.keys(e).forEach(function(t){n[t]=e[t]});var o=n;return Object.keys(n).length>500&&(o=trimDictOfItems_by_utcAttribute(n,500,"o")),s.a.storage.local.set(c({},r,o))})},V=function(e,t,n,o){var s=x("items",e,t);return s in o&&n in o[s]?new r.LocalStorageItem({object:o[s][n]}):""},G=function(e){chrome.storage.sync.get("user_subscriptions",function(t){var n=[x("changes","other",!1)],r={changes_other:"other"};Object.keys(t.user_subscriptions).forEach(function(e){var t=x("changes",e,!0);n.push(t),r[t]=e}),chrome.storage.sync.get(n,function(t){var o={};n.forEach(function(e){e in t&&t[e].length&&(o[r[e]]=t[e])}),e(o)})})},z=function(e){return s.a.storage.sync.get(["user_subscriptions","other_subscriptions","options"]).then(function(t){var n=Object.keys(t.user_subscriptions),r=Object.keys(t.other_subscriptions),o=t.options;return e(n,r,o)}).catch(console.log)},X=function(e,t,n,r,o,s,i,a,c,u){chrome.storage.sync.set({options:{seen_count:e,interval:t,custom_clientid:n,removal_status:{track:r,notify:o},lock_status:{track:s,notify:i},hide_subscribe:a,monitor_quarantined:c}},u)}},2:function(e,t,n){"use strict";n.r(t),n.d(t,"ALARM_NAME",function(){return a}),n.d(t,"createTab",function(){return c}),n.d(t,"getFullIDsFromURL",function(){return u}),n.d(t,"getFullIDsFromPath",function(){return l}),n.d(t,"reformatRedditText",function(){return d}),n.d(t,"isRemovedItem",function(){return f}),n.d(t,"isComment",function(){return h}),n.d(t,"isRemovedComment",function(){return A}),n.d(t,"isUserDeletedComment",function(){return b}),n.d(t,"isUserDeletedPost",function(){return p}),n.d(t,"isUserDeletedItem",function(){return v}),n.d(t,"isRemovedPost",function(){return y}),n.d(t,"trimDict_by_numberValuedAttribute",function(){return x}),n.d(t,"sortDict_by_numberValuedAttribute",function(){return _}),n.d(t,"ItemForStorage",function(){return k}),n.d(t,"ChangeForStorage",function(){return w}),n.d(t,"LocalStorageItem",function(){return O}),n.d(t,"setAlarm",function(){return E}),n.d(t,"alphaLowerSort",function(){return j}),n.d(t,"goToOptions",function(){return S}),n.d(t,"showError",function(){return T}),n.d(t,"pprint",function(){return C}),n.d(t,"getPrettyTimeLength",function(){return I}),n.d(t,"getPrettyDate",function(){return P}),n.d(t,"createNotification",function(){return D}),n.d(t,"updateBadgeUnseenCount",function(){return M});var r=n(1);n(3);function o(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function s(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function i(e,t,n){return t&&s(e.prototype,t),n&&s(e,n),e}var a="notifyme",c=function(e){chrome.tabs.create({url:e},function(t){t?chrome.windows.update(t.windowId,{focused:!0}):chrome.windows.create({url:e},function(e){chrome.windows.update(e.id,{focused:!0})})})},u=function(e){var t=e.replace(/https:\/\/[^/]*re(ve)?ddit.com/,"");return l(t)},m=/^\/(v|r|user)\/([^/]+)\/comments\/([^/]+)\/[^/]*(?:\/([^/?&#]+))?/,g=/^\/(?:user|y|u)\/([^/?&#]+)\/?/,l=function(e){var t=void 0,n=void 0,r=void 0,o=void 0,s=e.match(m),i=e.match(g);s?("user"===s[1]?r=s[2]:o=s[2],s[3]&&(t="t3_"+s[3]),s[4]&&(n="t1_"+s[4])):i&&(r=i[1]);return[t,n,r,o]},d=function(e){return e.replace(/&amp;/g,"&").replace(/&gt;/g,">").replace(/&lt;/g,"<").replace(/\s+/g," ").substr(0,300)},f=function(e){return h(e.name)?A(e):y(e)},h=function(e){return"t1"===e.substr(0,2)},A=function(e){return("[removed]"===e.body.replace(/\\/g,"")||"[deleted]"===e.body.replace(/\\/g,""))&&"[deleted]"===e.author.replace(/\\/g,"")},b=function(e){return"[deleted]"===e.body.replace(/\\/g,"")&&"[deleted]"===e.author.replace(/\\/g,"")},p=function(e){return!e.is_robot_indexable&&"[deleted]"===e.author.replace(/\\/g,"")},v=function(e){return h(e.name)?b(e):p(e)},y=function(e){return!e.is_robot_indexable},x=function(e,t,n){var r=_(e,n).slice(0,t),o={};return r.forEach(function(e){o[e[0]]=e[1]}),o},_=function(e,t){var n=Object.keys(e).map(function(t){return[t,e[t]]});return n.sort(function(e,n){return n[1][t]-e[1][t]}),n},k=function(){function e(t,n){o(this,e),this.c=t,this.u=n}return i(e,[{key:"getCreatedUTC",value:function(){return this.c}},{key:"getUnseen",value:function(){return this.u}}]),e}(),w=function(){function e(t){var n=t.id,r=void 0===n?null:n,s=t.observed_utc,i=void 0===s?null:s,a=t.change_type,c=void 0===a?null:a,u=t.seen_count,m=void 0===u?null:u,g=t.object,l=void 0===g?null:g;o(this,e),l?(this.i=l.i,this.o=l.o,this.g=l.g,this.n=l.n):(this.i=r,this.o=i,this.g=c,this.n=m)}return i(e,[{key:"getID",value:function(){return this.i}},{key:"getObservedUTC",value:function(){return this.o}},{key:"getChangeType",value:function(){switch(this.g){case r.REMOVED:return"mod removed";case r.DELETED:return"user deleted";case r.APPROVED:return"approved";case r.LOCKED:return"locked";case r.UNLOCKED:return"unlocked";case r.EDITED:return"edited"}}},{key:"getSeenCount",value:function(){return this.n}}]),e}(),O=function(){function e(t){var n=t.item,r=void 0===n?null:n,s=t.observed_utc,i=void 0===s?null:s,a=t.object,c=void 0===a?null:a;if(o(this,e),c)this.t=c.t,this.o=c.o,this.c=c.c,this.n=c.n||0;else{var u="";u=h(r.name)?d(r.body):r.title,this.t=u,this.o=i,this.c=r.created_utc,this.n=0}}return i(e,[{key:"setText",value:function(e){this.t=d(e)}},{key:"getText",value:function(){return this.t}},{key:"getObservedUTC",value:function(){return this.o}},{key:"getCreatedUTC",value:function(){return this.c}},{key:"getSeenCount",value:function(){return this.n}},{key:"incrementSeenCount",value:function(){void 0===this.n&&(this.n=0),this.n+=1}}]),e}();function E(e){chrome.alarms.clear(a),chrome.alarms.create(a,{delayInMinutes:1,periodInMinutes:e})}function j(e,t){var n=e.toLowerCase(),r=t.toLowerCase();return n<r?-1:n>r?1:0}function S(){chrome.runtime.openOptionsPage?(chrome.runtime.openOptionsPage(),window.close()):window.open(chrome.runtime.getURL("/src/options.html"))}function T(e,t){$('<div class="rr-error">'+e+"</div>").appendTo(t).delay(2400).fadeTo(400,0,function(){$(this).remove()})}function C(e){console.log(JSON.stringify(e,null,"\t"))}var I=function(e){var t=[[60,"second","seconds"],[60,"minute","minutes"],[24,"hour","hours"],[7,"day","days"],[365/12/7,"week","weeks"],[12,"month","months"],[10,"year","years"],[10,"decade","decades"],[10,"century","centuries"],[10,"millenium","millenia"]];if(e<60)return e+" seconds";for(var n=e,r=0;r<t.length;r++){var o=t[r][0],s=t[r][1],i=t[r][2];if(n<o){var a=n-Math.floor(n),c=Math.round(a*t[r-1][0]);if(t[r-1][0]===c&&(n+=1,c=0),(Math.floor(n)>1||0==Math.floor(n))&&(s=i),r>1&&c>0){var u=t[r-1][1];c>1&&(u=t[r-1][2]),s+=", "+String(c)+" "+u}return String(Math.floor(n))+" "+s}n/=o}},P=function(e){var t=Math.floor((new Date).getTime()/1e3)-e;return I(t)+" ago"},D=function(e){var t=e.notificationId,n=e.title,r=e.message;location.protocol.match(/^http/)?chrome.runtime.sendMessage({action:"create-notification",options:{notificationId:t,title:n,message:r}}):chrome.notifications.create(t,{type:"basic",iconUrl:"/icons/128.png",title:n,message:r})},M=function(){location.protocol.match(/^http/)?chrome.runtime.sendMessage({action:"update-badge"}):Object(r.getSubscribedUsers_withUnseenIDs)(function(e){var t=0;Object.values(e).forEach(function(e){t+=e.length});var n=t.toString();0==t&&(n=""),chrome.browserAction.setBadgeBackgroundColor({color:"red"}),chrome.browserAction.setBadgeText({text:n})})}},29:function(e,t,n){"use strict";n.r(t),n.d(t,"lookupItemsByID",function(){return g}),n.d(t,"lookupItemsByUser",function(){return A}),n.d(t,"handleFetchErrors",function(){return b}),n.d(t,"getRedditToken",function(){return v}),n.d(t,"getAuth",function(){return y}),n.d(t,"getLocalAuth",function(){return x}),n.d(t,"getCookie",function(){return _}),n.d(t,"getLocalOrAppAuth",function(){return w}),n.d(t,"getLoggedinUser",function(){return O});var r=n(1),o=n(3),s=n.n(o);function i(e,t,n,r,o,s,i){try{var a=e[s](i),c=a.value}catch(e){return void n(e)}a.done?t(c):Promise.resolve(c).then(r,o)}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter(function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable})),n.push.apply(n,r)}return n}function c(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(n,!0).forEach(function(t){u(e,t,n[t])}):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(n).forEach(function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))})}return e}function u(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function m(e){return function(e){if(Array.isArray(e)){for(var t=0,n=new Array(e.length);t<e.length;t++)n[t]=e[t];return n}}(e)||function(e){if(Symbol.iterator in Object(e)||"[object Arguments]"===Object.prototype.toString.call(e))return Array.from(e)}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}var g=function(e,t){var n=arguments.length>2&&void 0!==arguments[2]&&arguments[2],r=arguments.length>3&&void 0!==arguments[3]&&arguments[3],o=arguments.length>4&&void 0!==arguments[4]?arguments[4]:[],s={id:e,raw_json:1};r&&(s.quarantined_subreddits=o.join(","));var i="?"+Object.keys(s).map(function(e){return"".concat(e,"=").concat(s[e])}).join("&");return h.apply(void 0,m(k("api/info",i,t,r)).concat([n]))},l={name:"reddit_session",url:"https://reddit.com"},d=["name","value","domain","path","secure","httpOnly","storeId"],f=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"https://reddit.com";if(!e)return e;var n=Object.keys(e).filter(function(e){return d.includes(e)}).reduce(function(t,n){return c({},t,u({},n,e[n]))},{});return n.url=t,n},h=function(){var e,t=(e=regeneratorRuntime.mark(function e(t,n){var r,o,i,a=arguments;return regeneratorRuntime.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:return r=a.length>2&&void 0!==a[2]&&a[2],e.next=3,s.a.cookies.set({domain:"reddit.com",url:"https://reddit.com",name:"_options",value:"{%22pref_quarantine_optin%22:true}"});case 3:if(!r){e.next=12;break}return e.t0=f,e.next=7,s.a.cookies.get(l);case 7:if(e.t1=e.sent,!(o=(0,e.t0)(e.t1))){e.next=12;break}return e.next=12,s.a.cookies.remove(l);case 12:if(n||(n={}),n.cache="reload",i=fetch(t,n).then(b).then(p).catch(console.log),!o){e.next=18;break}return e.next=18,s.a.cookies.set(o);case 18:return e.abrupt("return",i);case 19:case"end":return e.stop()}},e)}),function(){var t=this,n=arguments;return new Promise(function(r,o){var s=e.apply(t,n);function a(e){i(s,r,o,a,c,"next",e)}function c(e){i(s,r,o,a,c,"throw",e)}a(void 0)})});return function(e,n){return t.apply(this,arguments)}}(),A=function(e,t,n,r,o,s,i){var a={limit:100,sort:n,raw_json:1};t&&(a.after=t),r&&(a.t=r);var c="user/".concat(e,"/overview.json"),u="?"+Object.keys(a).map(function(e){return"".concat(e,"=").concat(a[e])}).join("&");return h.apply(void 0,m(k(c,u,i,s)).concat([o]))},b=function(e){if(!e.ok)throw Error(e.statusText);return e.json()},p=function(e){if(e&&e.user&&e.user.items)return e;if(!e||!e.data||!e.data.children)throw Error("reddit data is not defined");return e.data.children},v=function(e){if(!e||!e.access_token)throw Error("access token is not defined");return e.access_token},y=function(){return Object(r.getOptions)(function(e,t,n){var r="SEw1uvRd6kxFEw";if(n.custom_clientid&&"testing"===(r=n.custom_clientid))return"none";var o={headers:{Authorization:"Basic ".concat(btoa("".concat(r,":"))),"Content-Type":"application/x-www-form-urlencoded; charset=utf-8"},method:"POST",body:"grant_type=".concat(encodeURIComponent("https://oauth.reddit.com/grants/installed_client"),"&device_id=DO_NOT_TRACK_THIS_DEVICE")};return fetch("https://www.reddit.com/api/v1/access_token",o).then(b).then(v).then(function(e){return{headers:{Authorization:"bearer ".concat(e)}}}).catch(console.log)})},x=function(){return fetch("https://mod.reddit.com/mail/all").then(function(e){_({url:"https://mod.reddit.com",name:"token"}).then(function(e){if(e){var t=new RegExp("[^A-Za-z0-9+/].*?$"),n=e.value.replace(t,""),r=atob(n),o=JSON.parse(r);return"accessToken"in o&&o.accessToken?{headers:{Authorization:"bearer ".concat(o.accessToken)}}:null}return null})})},_=function(e){var t=e.url,n=e.name;return location.protocol.match(/^http/)?s.a.runtime.sendMessage({action:"get-cookie",options:{url:t,name:n}}).then(function(e){return e.cookie}):s.a.cookies.get({url:t,name:n})},k=function(e,t,n,r){if(n&&"none"!==n){var o="https://oauth.reddit.com/",s=e+t;return r&&(o="https://cred2.reveddit.com/",s+="&give_it_to_me=1"),[o+s,n]}var i=(r?"https://wred.reveddit.com/":"https://www.reddit.com/")+e;return"api/info"===e&&(i+=".json"),[i+=t]},w=function(){return x().then(function(e){return e||y()}).catch(console.log)},O=function(){return fetch("https://www.reddit.com/api/me.json").then(b).then(E).catch(console.log)},E=function(e){if(!e||!e.data||!e.data.name)throw Error("reddit username is not defined");return e.data.name}},3:function(e,t,n){var r,o,s;o=[e],void 0===(s="function"==typeof(r=function(e){"use strict";if("undefined"==typeof browser||Object.getPrototypeOf(browser)!==Object.prototype){const t="The message port closed before a response was received.",n="Returning a Promise is the preferred way to send a reply from an onMessage/onMessageExternal listener, as the sendResponse will be removed from the specs (See https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/runtime/onMessage)",r=e=>{const r={alarms:{clear:{minArgs:0,maxArgs:1},clearAll:{minArgs:0,maxArgs:0},get:{minArgs:0,maxArgs:1},getAll:{minArgs:0,maxArgs:0}},bookmarks:{create:{minArgs:1,maxArgs:1},get:{minArgs:1,maxArgs:1},getChildren:{minArgs:1,maxArgs:1},getRecent:{minArgs:1,maxArgs:1},getSubTree:{minArgs:1,maxArgs:1},getTree:{minArgs:0,maxArgs:0},move:{minArgs:2,maxArgs:2},remove:{minArgs:1,maxArgs:1},removeTree:{minArgs:1,maxArgs:1},search:{minArgs:1,maxArgs:1},update:{minArgs:2,maxArgs:2}},browserAction:{disable:{minArgs:0,maxArgs:1,fallbackToNoCallback:!0},enable:{minArgs:0,maxArgs:1,fallbackToNoCallback:!0},getBadgeBackgroundColor:{minArgs:1,maxArgs:1},getBadgeText:{minArgs:1,maxArgs:1},getPopup:{minArgs:1,maxArgs:1},getTitle:{minArgs:1,maxArgs:1},openPopup:{minArgs:0,maxArgs:0},setBadgeBackgroundColor:{minArgs:1,maxArgs:1,fallbackToNoCallback:!0},setBadgeText:{minArgs:1,maxArgs:1,fallbackToNoCallback:!0},setIcon:{minArgs:1,maxArgs:1},setPopup:{minArgs:1,maxArgs:1,fallbackToNoCallback:!0},setTitle:{minArgs:1,maxArgs:1,fallbackToNoCallback:!0}},browsingData:{remove:{minArgs:2,maxArgs:2},removeCache:{minArgs:1,maxArgs:1},removeCookies:{minArgs:1,maxArgs:1},removeDownloads:{minArgs:1,maxArgs:1},removeFormData:{minArgs:1,maxArgs:1},removeHistory:{minArgs:1,maxArgs:1},removeLocalStorage:{minArgs:1,maxArgs:1},removePasswords:{minArgs:1,maxArgs:1},removePluginData:{minArgs:1,maxArgs:1},settings:{minArgs:0,maxArgs:0}},commands:{getAll:{minArgs:0,maxArgs:0}},contextMenus:{remove:{minArgs:1,maxArgs:1},removeAll:{minArgs:0,maxArgs:0},update:{minArgs:2,maxArgs:2}},cookies:{get:{minArgs:1,maxArgs:1},getAll:{minArgs:1,maxArgs:1},getAllCookieStores:{minArgs:0,maxArgs:0},remove:{minArgs:1,maxArgs:1},set:{minArgs:1,maxArgs:1}},devtools:{inspectedWindow:{eval:{minArgs:1,maxArgs:2,singleCallbackArg:!1}},panels:{create:{minArgs:3,maxArgs:3,singleCallbackArg:!0}}},downloads:{cancel:{minArgs:1,maxArgs:1},download:{minArgs:1,maxArgs:1},erase:{minArgs:1,maxArgs:1},getFileIcon:{minArgs:1,maxArgs:2},open:{minArgs:1,maxArgs:1,fallbackToNoCallback:!0},pause:{minArgs:1,maxArgs:1},removeFile:{minArgs:1,maxArgs:1},resume:{minArgs:1,maxArgs:1},search:{minArgs:1,maxArgs:1},show:{minArgs:1,maxArgs:1,fallbackToNoCallback:!0}},extension:{isAllowedFileSchemeAccess:{minArgs:0,maxArgs:0},isAllowedIncognitoAccess:{minArgs:0,maxArgs:0}},history:{addUrl:{minArgs:1,maxArgs:1},deleteAll:{minArgs:0,maxArgs:0},deleteRange:{minArgs:1,maxArgs:1},deleteUrl:{minArgs:1,maxArgs:1},getVisits:{minArgs:1,maxArgs:1},search:{minArgs:1,maxArgs:1}},i18n:{detectLanguage:{minArgs:1,maxArgs:1},getAcceptLanguages:{minArgs:0,maxArgs:0}},identity:{launchWebAuthFlow:{minArgs:1,maxArgs:1}},idle:{queryState:{minArgs:1,maxArgs:1}},management:{get:{minArgs:1,maxArgs:1},getAll:{minArgs:0,maxArgs:0},getSelf:{minArgs:0,maxArgs:0},setEnabled:{minArgs:2,maxArgs:2},uninstallSelf:{minArgs:0,maxArgs:1}},notifications:{clear:{minArgs:1,maxArgs:1},create:{minArgs:1,maxArgs:2},getAll:{minArgs:0,maxArgs:0},getPermissionLevel:{minArgs:0,maxArgs:0},update:{minArgs:2,maxArgs:2}},pageAction:{getPopup:{minArgs:1,maxArgs:1},getTitle:{minArgs:1,maxArgs:1},hide:{minArgs:1,maxArgs:1,fallbackToNoCallback:!0},setIcon:{minArgs:1,maxArgs:1},setPopup:{minArgs:1,maxArgs:1,fallbackToNoCallback:!0},setTitle:{minArgs:1,maxArgs:1,fallbackToNoCallback:!0},show:{minArgs:1,maxArgs:1,fallbackToNoCallback:!0}},permissions:{contains:{minArgs:1,maxArgs:1},getAll:{minArgs:0,maxArgs:0},remove:{minArgs:1,maxArgs:1},request:{minArgs:1,maxArgs:1}},runtime:{getBackgroundPage:{minArgs:0,maxArgs:0},getPlatformInfo:{minArgs:0,maxArgs:0},openOptionsPage:{minArgs:0,maxArgs:0},requestUpdateCheck:{minArgs:0,maxArgs:0},sendMessage:{minArgs:1,maxArgs:3},sendNativeMessage:{minArgs:2,maxArgs:2},setUninstallURL:{minArgs:1,maxArgs:1}},sessions:{getDevices:{minArgs:0,maxArgs:1},getRecentlyClosed:{minArgs:0,maxArgs:1},restore:{minArgs:0,maxArgs:1}},storage:{local:{clear:{minArgs:0,maxArgs:0},get:{minArgs:0,maxArgs:1},getBytesInUse:{minArgs:0,maxArgs:1},remove:{minArgs:1,maxArgs:1},set:{minArgs:1,maxArgs:1}},managed:{get:{minArgs:0,maxArgs:1},getBytesInUse:{minArgs:0,maxArgs:1}},sync:{clear:{minArgs:0,maxArgs:0},get:{minArgs:0,maxArgs:1},getBytesInUse:{minArgs:0,maxArgs:1},remove:{minArgs:1,maxArgs:1},set:{minArgs:1,maxArgs:1}}},tabs:{captureVisibleTab:{minArgs:0,maxArgs:2},create:{minArgs:1,maxArgs:1},detectLanguage:{minArgs:0,maxArgs:1},discard:{minArgs:0,maxArgs:1},duplicate:{minArgs:1,maxArgs:1},executeScript:{minArgs:1,maxArgs:2},get:{minArgs:1,maxArgs:1},getCurrent:{minArgs:0,maxArgs:0},getZoom:{minArgs:0,maxArgs:1},getZoomSettings:{minArgs:0,maxArgs:1},highlight:{minArgs:1,maxArgs:1},insertCSS:{minArgs:1,maxArgs:2},move:{minArgs:2,maxArgs:2},query:{minArgs:1,maxArgs:1},reload:{minArgs:0,maxArgs:2},remove:{minArgs:1,maxArgs:1},removeCSS:{minArgs:1,maxArgs:2},sendMessage:{minArgs:2,maxArgs:3},setZoom:{minArgs:1,maxArgs:2},setZoomSettings:{minArgs:1,maxArgs:2},update:{minArgs:1,maxArgs:2}},topSites:{get:{minArgs:0,maxArgs:0}},webNavigation:{getAllFrames:{minArgs:1,maxArgs:1},getFrame:{minArgs:1,maxArgs:1}},webRequest:{handlerBehaviorChanged:{minArgs:0,maxArgs:0}},windows:{create:{minArgs:0,maxArgs:1},get:{minArgs:1,maxArgs:2},getAll:{minArgs:0,maxArgs:1},getCurrent:{minArgs:0,maxArgs:1},getLastFocused:{minArgs:0,maxArgs:1},remove:{minArgs:1,maxArgs:1},update:{minArgs:2,maxArgs:2}}};if(0===Object.keys(r).length)throw new Error("api-metadata.json has not been included in browser-polyfill");const o=(t,n)=>(...r)=>{e.runtime.lastError?t.reject(e.runtime.lastError):n.singleCallbackArg||r.length<=1&&!1!==n.singleCallbackArg?t.resolve(r[0]):t.resolve(r)},s=e=>1==e?"argument":"arguments",i=(e,t,n)=>new Proxy(t,{apply:(t,r,o)=>n.call(r,e,...o)});let a=Function.call.bind(Object.prototype.hasOwnProperty);const c=(e,t={},n={})=>{let r=Object.create(null),u={has:(t,n)=>n in e||n in r,get(u,m,g){if(m in r)return r[m];if(!(m in e))return;let l=e[m];if("function"==typeof l)if("function"==typeof t[m])l=i(e,e[m],t[m]);else if(a(n,m)){let t=((e,t)=>(function(n,...r){if(r.length<t.minArgs)throw new Error(`Expected at least ${t.minArgs} ${s(t.minArgs)} for ${e}(), got ${r.length}`);if(r.length>t.maxArgs)throw new Error(`Expected at most ${t.maxArgs} ${s(t.maxArgs)} for ${e}(), got ${r.length}`);return new Promise((s,i)=>{if(t.fallbackToNoCallback)try{n[e](...r,o({resolve:s,reject:i},t))}catch(o){console.warn(`${e} API method doesn't seem to support the callback parameter, `+"falling back to call it without a callback: ",o),n[e](...r),t.fallbackToNoCallback=!1,t.noCallback=!0,s()}else t.noCallback?(n[e](...r),s()):n[e](...r,o({resolve:s,reject:i},t))})}))(m,n[m]);l=i(e,e[m],t)}else l=l.bind(e);else{if("object"!=typeof l||null===l||!a(t,m)&&!a(n,m))return Object.defineProperty(r,m,{configurable:!0,enumerable:!0,get:()=>e[m],set(t){e[m]=t}}),l;l=c(l,t[m],n[m])}return r[m]=l,l},set:(t,n,o,s)=>(n in r?r[n]=o:e[n]=o,!0),defineProperty:(e,t,n)=>Reflect.defineProperty(r,t,n),deleteProperty:(e,t)=>Reflect.deleteProperty(r,t)},m=Object.create(e);return new Proxy(m,u)},u=e=>({addListener(t,n,...r){t.addListener(e.get(n),...r)},hasListener:(t,n)=>t.hasListener(e.get(n)),removeListener(t,n){t.removeListener(e.get(n))}});let m=!1;const g=new class extends WeakMap{constructor(e,t){super(t),this.createItem=e}get(e){return this.has(e)||this.set(e,this.createItem(e)),super.get(e)}}(e=>"function"!=typeof e?e:function(t,r,o){let s,i,a=!1,c=new Promise(e=>{s=function(t){m||(console.warn(n,(new Error).stack),m=!0),a=!0,e(t)}});try{i=e(t,r,s)}catch(e){i=Promise.reject(e)}const u=!0!==i&&(e=>e&&"object"==typeof e&&"function"==typeof e.then)(i);if(!0!==i&&!u&&!a)return!1;const g=e=>{e.then(e=>{o(e)},e=>{let t;t=e&&(e instanceof Error||"string"==typeof e.message)?e.message:"An unexpected error occurred",o({__mozWebExtensionPolyfillReject__:!0,message:t})}).catch(e=>{console.error("Failed to send onMessage rejected reply",e)})};return g(u?i:c),!0}),l=(n,r,o,...i)=>{if(i.length<r.minArgs)throw new Error(`Expected at least ${r.minArgs} ${s(r.minArgs)} for ${n}(), got ${i.length}`);if(i.length>r.maxArgs)throw new Error(`Expected at most ${r.maxArgs} ${s(r.maxArgs)} for ${n}(), got ${i.length}`);return new Promise((n,r)=>{const s=(({reject:n,resolve:r},o)=>{e.runtime.lastError?e.runtime.lastError.message===t?r():n(e.runtime.lastError):o&&o.__mozWebExtensionPolyfillReject__?n(new Error(o.message)):r(o)}).bind(null,{resolve:n,reject:r});i.push(s),o.sendMessage(...i)})},d={runtime:{onMessage:u(g),onMessageExternal:u(g),sendMessage:l.bind(null,"sendMessage",{minArgs:1,maxArgs:3})},tabs:{sendMessage:l.bind(null,"sendMessage",{minArgs:2,maxArgs:3})}},f={clear:{minArgs:1,maxArgs:1},get:{minArgs:1,maxArgs:1},set:{minArgs:1,maxArgs:1}};return r.privacy={network:{networkPredictionEnabled:f,webRTCIPHandlingPolicy:f},services:{passwordSavingEnabled:f},websites:{hyperlinkAuditingEnabled:f,referrersEnabled:f}},c(e,d,r)};if("object"!=typeof chrome||!chrome||!chrome.runtime||!chrome.runtime.id)throw new Error("This script should only be loaded in a browser extension.");e.exports=r(chrome)}else e.exports=browser})?r.apply(t,o):r)||(e.exports=s)},315:function(e,t,n){"use strict";n.r(t),n.d(t,"revdditModifications",function(){return s});var r=n(1),o=n(64),s=(n(3),function(e,t,n,o){var s,u,m,g,l;(n||o)&&(s="numItemsLoaded",u=document.querySelector(".main"),m="data-numitemsloaded",g=1,l=function(){!function(e,t,n){var o=c(".comment.removed, .post.removed, .comment.deleted, .post.deleted"),s=c(".comment:not(.removed), .post:not(.removed)"),i=c(".comment.locked, .post.locked"),a=c(".comment:not(.locked)");Object(r.markIDsAsSeenIfSubscribed)(e,t,n,o,s,i,a,function(e){chrome.runtime.sendMessage({action:"update-badge"})})}(e,t,n)},new MutationObserver(function(e){var t=document.getElementById(s);t&&t.getAttribute(m)>=g&&(this.disconnect(),l())}).observe(u||document,{childList:!0,subtree:!0}));$(document).arrive(".comment-body-and-links",function(t){i([t],e.other_subscriptions)}),i($(".comment-body-and-links"),e.other_subscriptions),$(document).arrive(".post:not(.deleted)",function(t){a([t],e.other_subscriptions)}),setTimeout(function(){a($(".post:not(.deleted)"),e.other_subscriptions)},2e3)}),i=function(e,t){$(e).each(function(e,n){var r=n.parentNode;if(!r.classList.contains("deleted")){var s=r.id,i=r.querySelector(".comment-links"),a="",c=r.querySelector(".comment-body");c&&s.match(/^t1_/)&&(a=c.textContent);var u=Object(o.setTextAndFunction_subscribe)(s,$('<a href="">')[0],a);s in t&&(u=Object(o.setTextAndFunction_unsubscribe)(s,$('<a href="">')[0],a)),$(i).append(u)}})},a=function(e,t){$(e).each(function(e,n){var r=n.id,s=n.querySelector(".post-links"),i=Object(o.setTextAndFunction_subscribe)(r,$('<a href="">')[0]);r in t&&(i=Object(o.setTextAndFunction_unsubscribe)(r,$('<a href="">')[0])),$(s).append(i)})};function c(e){var t={};return $(e).each(function(){var e=this.getAttribute("id");t[e]=this.getAttribute("data-created_utc")}),t}},64:function(e,t,n){"use strict";n.r(t),n.d(t,"setTextAndFunction_subscribe",function(){return m}),n.d(t,"setTextAndFunction_unsubscribe",function(){return g});var r=n(1),o=n(2),s=n(65);n(3);function i(e,t,n,r,o,s,i){try{var a=e[s](i),c=a.value}catch(e){return void n(e)}a.done?t(c):Promise.resolve(c).then(r,o)}function a(e){return function(){var t=this,n=arguments;return new Promise(function(r,o){var s=e.apply(t,n);function a(e){i(s,r,o,a,c,"next",e)}function c(e){i(s,r,o,a,c,"throw",e)}a(void 0)})}}var c="unsubscribe-rev",u="subscribe-rev";location.hostname.match(/reveddit\.com$/)&&(c="unsubscribe",u="subscribe");var m=function(e,t,n){return $(t).text(u).off("click").click(function(t){return l(e,t.target,n)})},g=function(e,t,n){return $(t).text(c).off("click").click(function(t){return d(e,t.target,n)})},l=function(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"";return Object(r.subscribeId)(e,a(regeneratorRuntime.mark(function i(){return regeneratorRuntime.wrap(function(i){for(;;)switch(i.prev=i.next){case 0:return g(e,t,n),i.next=3,Object(s.b)(e,window.location.href);case 3:n&&Object(r.getLocalStorageItems)("other",!1).then(function(t){var s=t[e];if(s){var i=new o.LocalStorageItem({object:s});i.setText(n),t[e]=i,Object(r.saveLocalStorageItems)("other",!1,t)}});case 4:case"end":return i.stop()}},i)}))),!1},d=function(e,t,n){return Object(r.unsubscribeId)(e,function(){m(e,t,n)}),!1}},65:function(e,t,n){"use strict";n.d(t,"b",function(){return f}),n.d(t,"a",function(){return h});var r=n(29),o=n(1),s=n(2),i=n(3),a=n.n(i);function c(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function u(e,t,n,r,o,s,i){try{var a=e[s](i),c=a.value}catch(e){return void n(e)}a.done?t(c):Promise.resolve(c).then(r,o)}function m(e){return function(){var t=this,n=arguments;return new Promise(function(r,o){var s=e.apply(t,n);function i(e){u(s,r,o,i,a,"next",e)}function a(e){u(s,r,o,i,a,"throw",e)}i(void 0)})}}var g=0,l=1,d=2,f=function(e,t){var n=g;return t.match(/^https:\/\/www.reveddit.com/)&&(n=l),chrome.storage.sync.get(null,function(t){Object(r.getAuth)().then(function(r){return b([e],"other",!1,r,t,n,{})})})},h=function(){chrome.storage.sync.get(null,function(e){var t=Object.keys(e.user_subscriptions),n=Object.keys(e.other_subscriptions);if(t.length||n.length){var o=Math.floor(new Date/1e3);(!e.last_check_quarantined||o-e.last_check_quarantined>432e3)&&(e.tempVar_monitor_quarantined=!0),Object(r.getAuth)().then(function(n){return function(e,t){var n=Object.keys(t.other_subscriptions);n.length&&b(n,"other",!1,e,t,d)}(n,e),A(t,n,e)}).then(function(){var t={last_check:o};e.tempVar_monitor_quarantined&&(t.last_check_quarantined=o),e.tempVar_quarantined_content_found&&(t.options=e.options,t.options.monitor_quarantined=!0),chrome.storage.sync.set(t)})}})},A=function(){var e=m(regeneratorRuntime.mark(function e(t,n,o){var s;return regeneratorRuntime.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:if(!t.length){e.next=3;break}return s=t[0],e.abrupt("return",Object(r.lookupItemsByUser)(s,"","new","",o.options.monitor_quarantined,o.tempVar_monitor_quarantined,n).then(function(e){if(e){var r=[],i=new Set,a={};return e.user&&e.user.items&&(e=e.user.items),e.forEach(function(e){e.data&&e.data.name&&(e=e.data),r.push(e.name),a[e.name]=e,e.quarantine&&(i.add(e.subreddit),o.tempVar_quarantined_content_found=!0)}),b(r,s,!0,n,o,d,a,Array.from(i)).then(function(){return A(t.slice(1),n,o)})}}));case 3:case"end":return e.stop()}},e)}));return function(t,n,r){return e.apply(this,arguments)}}();var b=function(){var e=m(regeneratorRuntime.mark(function e(t,n,i,u,m,g){var l,d,f,h,A=arguments;return regeneratorRuntime.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:return l=A.length>6&&void 0!==A[6]?A[6]:{},d=A.length>7&&void 0!==A[7]?A[7]:[],h=m.options.monitor_quarantined,f=location.protocol.match(/^http/)?a.a.runtime.sendMessage({action:"get-reddit-items-by-id",ids:t,monitor_quarantined:h}):Object(r.lookupItemsByID)(t,u,h,m.tempVar_monitor_quarantined,d),e.abrupt("return",f.then(function(e){if(e){var t=Array.isArray(e)?e:e.items;if(t){var r=m.options.removal_status,a=m.options.lock_status,u=m.options.seen_count||o.SEEN_COUNT_DEFAULT,d=Object(o.getObjectNamesForThing)(n,i),f=m[d.removed]||{},h=m[d.approved]||{},A=m[d.locked]||{},b=m[d.unlocked]||{},v=m[d.changes]||[];i||(l={});var y=[],x=[],_=[],k=[];t.forEach(function(e){var t=e.data;i||(l[t.name]=t),Object(s.isRemovedItem)(t)?y.push(t.name):x.push(t.name),t.locked?_.push(t.name):k.push(t.name)});var w={},O=[],E=0;return Object(o.getLocalStorageItems)(n,i).then(function(e){var t;return r.track&&(E+=p(y,o.REMOVED,"mod removed",f,x,o.APPROVED,"approved",h,v,l,r.notify,w,O,i,g,e,u)),a.track&&(E+=p(_,o.LOCKED,"locked",A,k,o.UNLOCKED,"unlocked",b,v,l,a.notify,w,O,i,g,e,u)),E&&O.length&&Object(s.createNotification)({notificationId:n,title:n,message:"".concat(E," new [").concat(O.join(", "),"] actions, click to view")}),chrome.storage.sync.set((c(t={},d.removed,Object(s.trimDict_by_numberValuedAttribute)(f,o.MAX_SYNC_STORAGE_ITEMS_PER_OBJECT,"c")),c(t,d.approved,Object(s.trimDict_by_numberValuedAttribute)(h,o.MAX_SYNC_STORAGE_ITEMS_PER_OBJECT,"c")),c(t,d.locked,Object(s.trimDict_by_numberValuedAttribute)(A,o.MAX_SYNC_STORAGE_ITEMS_PER_OBJECT,"c")),c(t,d.unlocked,Object(s.trimDict_by_numberValuedAttribute)(b,o.MAX_SYNC_STORAGE_ITEMS_PER_OBJECT,"c")),c(t,d.changes,v.slice(-o.MAX_SYNC_STORAGE_CHANGES)),t),function(){return Object(s.updateBadgeUnseenCount)(),Object(o.addLocalStorageItems)(w,n,i)})})}}}));case 5:case"end":return e.stop()}},e)}));return function(t,n,r,o,s,i){return e.apply(this,arguments)}}();function p(e,t,n,r,i,a,c,u,m,d,f,h,A,b,p,v,y){var x=[],_=[],k=[],w=Math.floor(new Date/1e3);e.forEach(function(e){var n=d[e];if(b||v[e]||(h[e]=new s.LocalStorageItem({item:n,observed_utc:w})),!(e in r)){var i=!0;if((p===g&&t!==o.REMOVED||p===l)&&(i=!1),r[e]=new s.ItemForStorage(n.created_utc,i),delete u[e],i){var a=t;Object(s.isUserDeletedItem)(n)?(a=o.DELETED,k.push(e)):x.push(e),m.push(new s.ChangeForStorage({id:e,observed_utc:w,change_type:a}))}b&&(h[e]=new s.LocalStorageItem({item:n,observed_utc:w}))}}),i.forEach(function(e){var t=d[e];if(b||v[e]||(h[e]=new s.LocalStorageItem({item:t,observed_utc:w})),e in r){var n=new s.LocalStorageItem({object:v[e]});n.incrementSeenCount();var o=n.getSeenCount();o>=y?(u[e]=new s.ItemForStorage(t.created_utc,!0),delete r[e],m.push(new s.ChangeForStorage({id:e,observed_utc:w,change_type:a,seen_count:o})),_.push(e),h[e]=new s.LocalStorageItem({item:t,observed_utc:w})):h[e]=n}else u[e]=new s.ItemForStorage(t.created_utc,!1)});var O=x.length+_.length+k.length;return f&&O&&(x.length&&A.push(n),k.length&&A.push("user deleted"),_.length&&A.push(c)),O}}});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,