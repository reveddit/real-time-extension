!function(e){var t={};function n(r){if(t[r])return t[r].exports;var o=t[r]={i:r,l:!1,exports:{}};return e[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)n.d(r,o,function(t){return e[t]}.bind(null,o));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=314)}({1:function(e,t,n){"use strict";n.r(t),n.d(t,"INTERVAL_DEFAULT",function(){return u}),n.d(t,"SEEN_COUNT_DEFAULT",function(){return m}),n.d(t,"MAX_SYNC_STORAGE_ITEMS_PER_OBJECT",function(){return g}),n.d(t,"MAX_SYNC_STORAGE_CHANGES",function(){return l}),n.d(t,"MAX_OTHER_SUBSCRIPTIONS",function(){return d}),n.d(t,"REMOVED",function(){return f}),n.d(t,"APPROVED",function(){return h}),n.d(t,"LOCKED",function(){return p}),n.d(t,"UNLOCKED",function(){return A}),n.d(t,"EDITED",function(){return b}),n.d(t,"DELETED",function(){return v}),n.d(t,"getObjectNamesForThing",function(){return w}),n.d(t,"markEverythingAsSeen",function(){return O}),n.d(t,"markThingAsSeen",function(){return j}),n.d(t,"setStorageUpdateBadge",function(){return E}),n.d(t,"markIDsAsSeenIfSubscribed",function(){return T}),n.d(t,"subscribeId",function(){return C}),n.d(t,"unsubscribeId",function(){return I}),n.d(t,"getSubscribedIds",function(){return P}),n.d(t,"subscribeUser",function(){return D}),n.d(t,"unsubscribeUser",function(){return R}),n.d(t,"initStorage",function(){return M}),n.d(t,"getSubscribedUsers_withSeenAndUnseenIDs",function(){return L}),n.d(t,"getSubscribedUsers_withUnseenIDs",function(){return $}),n.d(t,"getUnseenIDs_thing",function(){return F}),n.d(t,"getIDs_thing",function(){return N}),n.d(t,"getLocalStorageItems",function(){return U}),n.d(t,"saveLocalStorageItems",function(){return q}),n.d(t,"addLocalStorageItems",function(){return B}),n.d(t,"getItemFromLocalStorage",function(){return V}),n.d(t,"getAllChanges",function(){return G}),n.d(t,"getOptions",function(){return z}),n.d(t,"saveOptions",function(){return J});var r=n(2),o=n(3),i=n.n(o);function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter(function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable})),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(n,!0).forEach(function(t){c(e,t,n[t])}):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(n).forEach(function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))})}return e}function c(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var u=1,m=2,g=130,l=100,d=100,f=1,h=2,p=3,A=4,b=5,v=6,y={changes:[],removed:{},approved:{},locked:{},unlocked:{}},x=function(e,t,n){return n?e+"_u_"+t:e+"_"+t},_=function(e,t){var n=!(arguments.length>2&&void 0!==arguments[2])||arguments[2];Object.keys(y).forEach(function(r){e[x(r,t,n)]=y[r]})},w=function(e){var t=!(arguments.length>1&&void 0!==arguments[1])||arguments[1],n={};return Object.keys(y).forEach(function(r){n[r]=x(r,e,t)}),n},k=function(e){var t={};return _(t,e,!0),t},O=function(){return i.a.storage.sync.get(null).then(function(e){return Object.keys(e.user_subscriptions).forEach(function(t){j(e,t,!0)}),j(e,"other",!1),E(e)})},j=function(e,t,n){var r=w(t,n);delete r.changes;var o=[];Object.values(r).forEach(function(e){o.push(e)}),o.forEach(function(t){Object.values(e[t]).forEach(function(e){e.u=!1})})},E=function(e){return i.a.storage.sync.set(e).then(function(e){return i.a.runtime.sendMessage({action:"update-badge"})})},S=function(e,t,n,o,i){var s=e[t[n]];Object.keys(o).forEach(function(e){e in s?s[e].u=!1:i&&(s[e]=new r.ItemForStorage(o[e],!1))})},T=function(e,t,n,r,o,i,s){var a=arguments.length>7&&void 0!==arguments[7]?arguments[7]:function(){},c=w(t,n);delete c.changes;var u=e.user_subscriptions[t];!u&&n||(S(e,c,"removed",r,n),S(e,c,"approved",o,n),S(e,c,"locked",i,n),S(e,c,"unlocked",s,n),chrome.storage.sync.set(e,a))},C=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:function(){},n="other_subscriptions";chrome.storage.sync.get(n,function(o){o[n][e]={t:Math.floor((new Date).getTime()/1e3)};var i=Object(r.trimDict_by_numberValuedAttribute)(o[n],d,"t");chrome.storage.sync.set(c({},n,i),t)})},I=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:function(){},n="other_subscriptions",r=w("other",!1);delete r.changes,chrome.storage.sync.get(Object.values(r).concat(n),function(o){delete o[n][e],Object.values(r).forEach(function(t){e in o[t]&&delete o[t][e]}),chrome.storage.sync.set(o,function(){chrome.runtime.sendMessage({action:"update-badge"},t)})})},P=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:function(){},t="other_subscriptions";chrome.storage.sync.get(t,function(n){e(Object.keys(n[t]))})},D=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:function(){},n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:function(){},r=k(e);chrome.storage.sync.get("user_subscriptions",function(o){var i=o.user_subscriptions;e in i?n("already subscribed to this user"):Object.keys(i).length<5?(i[e]=!0,chrome.storage.sync.set(a({user_subscriptions:i},r),t)):n("maximum number of subscriptions reached")})},R=function(e,t){var n=Object.keys(k(e));chrome.storage.sync.get("user_subscriptions",function(r){var o=r.user_subscriptions;delete o[e],chrome.storage.sync.set({user_subscriptions:o},function(){chrome.storage.sync.remove(n,function(){var n=x("items",e,!0);chrome.runtime.sendMessage({action:"update-badge"}),chrome.storage.local.remove(n,t)})})})},M=function(e){chrome.storage.sync.get(null,function(t){var n;0===Object.keys(t).length?chrome.storage.sync.set((_(n={user_subscriptions:{},other_subscriptions:{},options:{interval:u,seen_count:m,custom_clientid:"",removal_status:{track:!0,notify:!0},lock_status:{track:!0,notify:!0},monitor_quarantined:!1},last_check:null,last_check_quarantined:null},"other",!1),n),e):e()})},L=function(e){chrome.storage.sync.get(null,function(t){var n=Object.keys(t.user_subscriptions),r={};n.forEach(function(e){r[e]=N(e,!0,t)}),r.other=N("other",!1,t),e(r,t)})},$=function(e){chrome.storage.sync.get(null,function(t){var n=Object.keys(t.user_subscriptions),r={};n.forEach(function(e){r[e]=F(e,!0,t)}),r.other=F("other",!1,t),e(r)})},F=function(e,t,n){return N(e,t,n).unseen},N=function(e,t,n){var r=n.options.removal_status.track,o=n.options.lock_status.track,i={},s={},a=[],c=w(e,t);return r&&a.push(c.removed,c.approved),o&&a.push(c.locked,c.unlocked),a.forEach(function(e){Object.keys(n[e]).forEach(function(t){n[e][t].u?i[t]=!0:s[t]=!0})}),{unseen:Object.keys(i),seen:Object.keys(s)}},U=function(e,t){var n=x("items",e,t);return i.a.storage.local.get(c({},n,{})).then(function(e){return e[n]})},q=function(e,t,n){var r=x("items",e,t);return i.a.storage.local.set(c({},r,n))},B=function(e,t,n){var o=x("items",t,n);return chrome.storage.local.get(c({},o,{}),function(t){var n=t[o];Object.keys(e).forEach(function(t){n[t]=e[t]});var s=n;return Object.keys(n).length>500&&(s=Object(r.trimDict_by_numberValuedAttribute)(n,500,"o")),i.a.storage.local.set(c({},o,s))})},V=function(e,t,n,o){var i=x("items",e,t);return i in o&&n in o[i]?new r.LocalStorageItem({object:o[i][n]}):""},G=function(e){chrome.storage.sync.get("user_subscriptions",function(t){var n=[x("changes","other",!1)],r={changes_other:"other"};Object.keys(t.user_subscriptions).forEach(function(e){var t=x("changes",e,!0);n.push(t),r[t]=e}),chrome.storage.sync.get(n,function(t){var o={};n.forEach(function(e){e in t&&t[e].length&&(o[r[e]]=t[e])}),e(o)})})},z=function(e){return i.a.storage.sync.get(["user_subscriptions","other_subscriptions","options"]).then(function(t){var n=Object.keys(t.user_subscriptions),r=Object.keys(t.other_subscriptions),o=t.options;return e(n,r,o)}).catch(console.log)},J=function(e,t,n,r,o,i,s,a,c,u){chrome.storage.sync.set({options:{seen_count:e,interval:t,custom_clientid:n,removal_status:{track:r,notify:o},lock_status:{track:i,notify:s},hide_subscribe:a,monitor_quarantined:c}},u)}},2:function(e,t,n){"use strict";n.r(t),n.d(t,"ALARM_NAME",function(){return a}),n.d(t,"createTab",function(){return c}),n.d(t,"getFullIDsFromURL",function(){return u}),n.d(t,"getFullIDsFromPath",function(){return l}),n.d(t,"reformatRedditText",function(){return d}),n.d(t,"isRemovedItem",function(){return f}),n.d(t,"isComment",function(){return h}),n.d(t,"isRemovedComment",function(){return p}),n.d(t,"isUserDeletedComment",function(){return A}),n.d(t,"isUserDeletedPost",function(){return b}),n.d(t,"isUserDeletedItem",function(){return v}),n.d(t,"isRemovedPost",function(){return y}),n.d(t,"trimDict_by_numberValuedAttribute",function(){return x}),n.d(t,"sortDict_by_numberValuedAttribute",function(){return _}),n.d(t,"ItemForStorage",function(){return w}),n.d(t,"ChangeForStorage",function(){return k}),n.d(t,"LocalStorageItem",function(){return O}),n.d(t,"setAlarm",function(){return j}),n.d(t,"alphaLowerSort",function(){return E}),n.d(t,"goToOptions",function(){return S}),n.d(t,"showError",function(){return T}),n.d(t,"pprint",function(){return C}),n.d(t,"getPrettyTimeLength",function(){return I}),n.d(t,"getPrettyDate",function(){return P}),n.d(t,"createNotification",function(){return D}),n.d(t,"updateBadgeUnseenCount",function(){return R});var r=n(1);n(3);function o(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function i(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function s(e,t,n){return t&&i(e.prototype,t),n&&i(e,n),e}var a="notifyme",c=function(e){chrome.tabs.create({url:e},function(t){t?chrome.windows.update(t.windowId,{focused:!0}):chrome.windows.create({url:e},function(e){chrome.windows.update(e.id,{focused:!0})})})},u=function(e){var t=e.replace(/https:\/\/[^/]*re(ve)?ddit.com/,"");return l(t)},m=/^\/(v|r|user)\/([^/]+)\/comments\/([^/]+)\/[^/]*(?:\/([^/?&#]+))?/,g=/^\/(?:user|y|u)\/([^/?&#]+)\/?/,l=function(e){var t=void 0,n=void 0,r=void 0,o=void 0,i=e.match(m),s=e.match(g);i?("user"===i[1]?r=i[2]:o=i[2],i[3]&&(t="t3_"+i[3]),i[4]&&(n="t1_"+i[4])):s&&(r=s[1]);return[t,n,r,o]},d=function(e){return e.replace(/&amp;/g,"&").replace(/&gt;/g,">").replace(/&lt;/g,"<").replace(/\s+/g," ").substr(0,300)},f=function(e){return h(e.name)?p(e):y(e)},h=function(e){return"t1"===e.substr(0,2)},p=function(e){return("[removed]"===e.body.replace(/\\/g,"")||"[deleted]"===e.body.replace(/\\/g,""))&&"[deleted]"===e.author.replace(/\\/g,"")},A=function(e){return"[deleted]"===e.body.replace(/\\/g,"")&&"[deleted]"===e.author.replace(/\\/g,"")},b=function(e){return!e.is_robot_indexable&&"[deleted]"===e.author.replace(/\\/g,"")},v=function(e){return h(e.name)?A(e):b(e)},y=function(e){return!e.is_robot_indexable},x=function(e,t,n){var r=_(e,n).slice(0,t),o={};return r.forEach(function(e){o[e[0]]=e[1]}),o},_=function(e,t){var n=Object.keys(e).map(function(t){return[t,e[t]]});return n.sort(function(e,n){return n[1][t]-e[1][t]}),n},w=function(){function e(t,n){o(this,e),this.c=t,this.u=n}return s(e,[{key:"getCreatedUTC",value:function(){return this.c}},{key:"getUnseen",value:function(){return this.u}}]),e}(),k=function(){function e(t){var n=t.id,r=void 0===n?null:n,i=t.observed_utc,s=void 0===i?null:i,a=t.change_type,c=void 0===a?null:a,u=t.seen_count,m=void 0===u?null:u,g=t.object,l=void 0===g?null:g;o(this,e),l?(this.i=l.i,this.o=l.o,this.g=l.g,this.n=l.n):(this.i=r,this.o=s,this.g=c,this.n=m)}return s(e,[{key:"getID",value:function(){return this.i}},{key:"getObservedUTC",value:function(){return this.o}},{key:"getChangeTypeInternal",value:function(){return this.g}},{key:"getChangeType",value:function(){switch(this.g){case r.REMOVED:return"mod removed";case r.DELETED:return"user deleted";case r.APPROVED:return"approved";case r.LOCKED:return"locked";case r.UNLOCKED:return"unlocked";case r.EDITED:return"edited"}}},{key:"getSeenCount",value:function(){return this.n}}]),e}(),O=function(){function e(t){var n=t.item,r=void 0===n?null:n,i=t.observed_utc,s=void 0===i?null:i,a=t.object,c=void 0===a?null:a;if(o(this,e),c)this.t=c.t,this.o=c.o,this.c=c.c,this.n=c.n||0;else{var u="";u=h(r.name)?d(r.body):r.title,this.t=u,this.o=s,this.c=r.created_utc,this.n=0}}return s(e,[{key:"setText",value:function(e){this.t=d(e)}},{key:"getText",value:function(){return this.t}},{key:"getObservedUTC",value:function(){return this.o}},{key:"getCreatedUTC",value:function(){return this.c}},{key:"resetSeenCount",value:function(){this.n=0}},{key:"getSeenCount",value:function(){return this.n}},{key:"incrementSeenCount",value:function(){return void 0===this.n&&(this.n=0),this.n+=1,this.n}}]),e}();function j(e){chrome.alarms.clear(a),chrome.alarms.create(a,{delayInMinutes:1,periodInMinutes:e})}function E(e,t){var n=e.toLowerCase(),r=t.toLowerCase();return n<r?-1:n>r?1:0}function S(){chrome.runtime.openOptionsPage?(chrome.runtime.openOptionsPage(),window.close()):window.open(chrome.runtime.getURL("/src/options.html"))}function T(e,t){$('<div class="rr-error">'+e+"</div>").appendTo(t).delay(2400).fadeTo(400,0,function(){$(this).remove()})}function C(e){console.log(JSON.stringify(e,null,"\t"))}var I=function(e){var t=[[60,"second","seconds"],[60,"minute","minutes"],[24,"hour","hours"],[7,"day","days"],[365/12/7,"week","weeks"],[12,"month","months"],[10,"year","years"],[10,"decade","decades"],[10,"century","centuries"],[10,"millenium","millenia"]];if(e<60)return e+" seconds";for(var n=e,r=0;r<t.length;r++){var o=t[r][0],i=t[r][1],s=t[r][2];if(n<o){var a=n-Math.floor(n),c=Math.round(a*t[r-1][0]);if(t[r-1][0]===c&&(n+=1,c=0),(Math.floor(n)>1||0==Math.floor(n))&&(i=s),r>1&&c>0){var u=t[r-1][1];c>1&&(u=t[r-1][2]),i+=", "+String(c)+" "+u}return String(Math.floor(n))+" "+i}n/=o}},P=function(e){var t=Math.floor((new Date).getTime()/1e3)-e;return I(t)+" ago"},D=function(e){var t=e.notificationId,n=e.title,r=e.message;location.protocol.match(/^http/)?chrome.runtime.sendMessage({action:"create-notification",options:{notificationId:t,title:n,message:r}}):chrome.notifications.create(t,{type:"basic",iconUrl:"/icons/128.png",title:n,message:r})},R=function(){location.protocol.match(/^http/)?chrome.runtime.sendMessage({action:"update-badge"}):Object(r.getSubscribedUsers_withUnseenIDs)(function(e){var t=0;Object.values(e).forEach(function(e){t+=e.length});var n=t.toString();0==t&&(n=""),chrome.browserAction.setBadgeBackgroundColor({color:"red"}),chrome.browserAction.setBadgeText({text:n})})}},29:function(e,t,n){"use strict";n.r(t),n.d(t,"lookupItemsByID",function(){return g}),n.d(t,"lookupItemsByUser",function(){return p}),n.d(t,"handleFetchErrors",function(){return A}),n.d(t,"getRedditToken",function(){return v}),n.d(t,"getAuth",function(){return y}),n.d(t,"getLocalAuth",function(){return x}),n.d(t,"getCookie",function(){return _}),n.d(t,"getLocalOrAppAuth",function(){return k}),n.d(t,"getLoggedinUser",function(){return O});var r=n(1),o=n(3),i=n.n(o);function s(e,t,n,r,o,i,s){try{var a=e[i](s),c=a.value}catch(e){return void n(e)}a.done?t(c):Promise.resolve(c).then(r,o)}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter(function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable})),n.push.apply(n,r)}return n}function c(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(n,!0).forEach(function(t){u(e,t,n[t])}):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(n).forEach(function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))})}return e}function u(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function m(e){return function(e){if(Array.isArray(e)){for(var t=0,n=new Array(e.length);t<e.length;t++)n[t]=e[t];return n}}(e)||function(e){if(Symbol.iterator in Object(e)||"[object Arguments]"===Object.prototype.toString.call(e))return Array.from(e)}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}var g=function(e,t){var n=arguments.length>2&&void 0!==arguments[2]&&arguments[2],r=arguments.length>3&&void 0!==arguments[3]&&arguments[3],o=arguments.length>4&&void 0!==arguments[4]?arguments[4]:[],i={id:e,raw_json:1};r&&(i.quarantined_subreddits=o.join(","));var s="?"+Object.keys(i).map(function(e){return"".concat(e,"=").concat(i[e])}).join("&");return h.apply(void 0,m(w("api/info",s,t,r)).concat([n]))},l={name:"reddit_session",url:"https://reddit.com"},d=["name","value","domain","path","secure","httpOnly","storeId"],f=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"https://reddit.com";if(!e)return e;var n=Object.keys(e).filter(function(e){return d.includes(e)}).reduce(function(t,n){return c({},t,u({},n,e[n]))},{});return n.url=t,n},h=function(){var e,t=(e=regeneratorRuntime.mark(function e(t,n){var r,o,s,a=arguments;return regeneratorRuntime.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:return r=a.length>2&&void 0!==a[2]&&a[2],e.next=3,i.a.cookies.set({domain:"reddit.com",url:"https://reddit.com",name:"_options",value:"{%22pref_quarantine_optin%22:true}"});case 3:if(!r){e.next=12;break}return e.t0=f,e.next=7,i.a.cookies.get(l);case 7:if(e.t1=e.sent,!(o=(0,e.t0)(e.t1))){e.next=12;break}return e.next=12,i.a.cookies.remove(l);case 12:if(n||(n={}),n.cache="reload",s=fetch(t,n).then(A).then(b).catch(console.log),!o){e.next=18;break}return e.next=18,i.a.cookies.set(o);case 18:return e.abrupt("return",s);case 19:case"end":return e.stop()}},e)}),function(){var t=this,n=arguments;return new Promise(function(r,o){var i=e.apply(t,n);function a(e){s(i,r,o,a,c,"next",e)}function c(e){s(i,r,o,a,c,"throw",e)}a(void 0)})});return function(e,n){return t.apply(this,arguments)}}(),p=function(e,t,n,r,o,i,s){var a={limit:100,sort:n,raw_json:1};t&&(a.after=t),r&&(a.t=r);var c="user/".concat(e,"/overview.json"),u="?"+Object.keys(a).map(function(e){return"".concat(e,"=").concat(a[e])}).join("&");return h.apply(void 0,m(w(c,u,s,i)).concat([o]))},A=function(e){if(!e.ok)throw Error(e.statusText);return e.json()},b=function(e){if(e&&e.user&&e.user.items)return e;if(!e||!e.data||!e.data.children)throw Error("reddit data is not defined");return e.data.children},v=function(e){if(!e||!e.access_token)throw Error("access token is not defined");return e.access_token},y=function(){return Object(r.getOptions)(function(e,t,n){var r="SEw1uvRd6kxFEw";if(n.custom_clientid&&"testing"===(r=n.custom_clientid))return"none";var o={headers:{Authorization:"Basic ".concat(btoa("".concat(r,":"))),"Content-Type":"application/x-www-form-urlencoded; charset=utf-8"},method:"POST",body:"grant_type=".concat(encodeURIComponent("https://oauth.reddit.com/grants/installed_client"),"&device_id=DO_NOT_TRACK_THIS_DEVICE")};return fetch("https://www.reddit.com/api/v1/access_token",o).then(A).then(v).then(function(e){return{headers:{Authorization:"bearer ".concat(e)}}}).catch(console.log)})},x=function(){return fetch("https://mod.reddit.com/mail/all").then(function(e){_({url:"https://mod.reddit.com",name:"token"}).then(function(e){if(e){var t=new RegExp("[^A-Za-z0-9+/].*?$"),n=e.value.replace(t,""),r=atob(n),o=JSON.parse(r);return"accessToken"in o&&o.accessToken?{headers:{Authorization:"bearer ".concat(o.accessToken)}}:null}return null})})},_=function(e){var t=e.url,n=e.name;return location.protocol.match(/^http/)?i.a.runtime.sendMessage({action:"get-cookie",options:{url:t,name:n}}).then(function(e){return e.cookie}):i.a.cookies.get({url:t,name:n})},w=function(e,t,n,r){if(n&&"none"!==n){var o="https://oauth.reddit.com/",i=e+t;return r&&(o="https://cred2.reveddit.com/",i+="&give_it_to_me=1"),[o+i,n]}var s=(r?"https://wred.reveddit.com/":"https://www.reddit.com/")+e;return"api/info"===e&&(s+=".json"),[s+=t]},k=function(){return x().then(function(e){return e||y()}).catch(console.log)},O=function(){return fetch("https://www.reddit.com/api/me.json").then(A).then(j).catch(console.log)},j=function(e){if(!e||!e.data||!e.data.name)throw Error("reddit username is not defined");return e.data.name}},3:function(e,t,n){var r,o,i;o=[e],void 0===(i="function"==typeof(r=function(e){"use strict";if("undefined"==typeof browser||Object.getPrototypeOf(browser)!==Object.prototype){const t="The message port closed before a response was received.",n="Returning a Promise is the preferred way to send a reply from an onMessage/onMessageExternal listener, as the sendResponse will be removed from the specs (See https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/runtime/onMessage)",r=e=>{const r={alarms:{clear:{minArgs:0,maxArgs:1},clearAll:{minArgs:0,maxArgs:0},get:{minArgs:0,maxArgs:1},getAll:{minArgs:0,maxArgs:0}},bookmarks:{create:{minArgs:1,maxArgs:1},get:{minArgs:1,maxArgs:1},getChildren:{minArgs:1,maxArgs:1},getRecent:{minArgs:1,maxArgs:1},getSubTree:{minArgs:1,maxArgs:1},getTree:{minArgs:0,maxArgs:0},move:{minArgs:2,maxArgs:2},remove:{minArgs:1,maxArgs:1},removeTree:{minArgs:1,maxArgs:1},search:{minArgs:1,maxArgs:1},update:{minArgs:2,maxArgs:2}},browserAction:{disable:{minArgs:0,maxArgs:1,fallbackToNoCallback:!0},enable:{minArgs:0,maxArgs:1,fallbackToNoCallback:!0},getBadgeBackgroundColor:{minArgs:1,maxArgs:1},getBadgeText:{minArgs:1,maxArgs:1},getPopup:{minArgs:1,maxArgs:1},getTitle:{minArgs:1,maxArgs:1},openPopup:{minArgs:0,maxArgs:0},setBadgeBackgroundColor:{minArgs:1,maxArgs:1,fallbackToNoCallback:!0},setBadgeText:{minArgs:1,maxArgs:1,fallbackToNoCallback:!0},setIcon:{minArgs:1,maxArgs:1},setPopup:{minArgs:1,maxArgs:1,fallbackToNoCallback:!0},setTitle:{minArgs:1,maxArgs:1,fallbackToNoCallback:!0}},browsingData:{remove:{minArgs:2,maxArgs:2},removeCache:{minArgs:1,maxArgs:1},removeCookies:{minArgs:1,maxArgs:1},removeDownloads:{minArgs:1,maxArgs:1},removeFormData:{minArgs:1,maxArgs:1},removeHistory:{minArgs:1,maxArgs:1},removeLocalStorage:{minArgs:1,maxArgs:1},removePasswords:{minArgs:1,maxArgs:1},removePluginData:{minArgs:1,maxArgs:1},settings:{minArgs:0,maxArgs:0}},commands:{getAll:{minArgs:0,maxArgs:0}},contextMenus:{remove:{minArgs:1,maxArgs:1},removeAll:{minArgs:0,maxArgs:0},update:{minArgs:2,maxArgs:2}},cookies:{get:{minArgs:1,maxArgs:1},getAll:{minArgs:1,maxArgs:1},getAllCookieStores:{minArgs:0,maxArgs:0},remove:{minArgs:1,maxArgs:1},set:{minArgs:1,maxArgs:1}},devtools:{inspectedWindow:{eval:{minArgs:1,maxArgs:2,singleCallbackArg:!1}},panels:{create:{minArgs:3,maxArgs:3,singleCallbackArg:!0}}},downloads:{cancel:{minArgs:1,maxArgs:1},download:{minArgs:1,maxArgs:1},erase:{minArgs:1,maxArgs:1},getFileIcon:{minArgs:1,maxArgs:2},open:{minArgs:1,maxArgs:1,fallbackToNoCallback:!0},pause:{minArgs:1,maxArgs:1},removeFile:{minArgs:1,maxArgs:1},resume:{minArgs:1,maxArgs:1},search:{minArgs:1,maxArgs:1},show:{minArgs:1,maxArgs:1,fallbackToNoCallback:!0}},extension:{isAllowedFileSchemeAccess:{minArgs:0,maxArgs:0},isAllowedIncognitoAccess:{minArgs:0,maxArgs:0}},history:{addUrl:{minArgs:1,maxArgs:1},deleteAll:{minArgs:0,maxArgs:0},deleteRange:{minArgs:1,maxArgs:1},deleteUrl:{minArgs:1,maxArgs:1},getVisits:{minArgs:1,maxArgs:1},search:{minArgs:1,maxArgs:1}},i18n:{detectLanguage:{minArgs:1,maxArgs:1},getAcceptLanguages:{minArgs:0,maxArgs:0}},identity:{launchWebAuthFlow:{minArgs:1,maxArgs:1}},idle:{queryState:{minArgs:1,maxArgs:1}},management:{get:{minArgs:1,maxArgs:1},getAll:{minArgs:0,maxArgs:0},getSelf:{minArgs:0,maxArgs:0},setEnabled:{minArgs:2,maxArgs:2},uninstallSelf:{minArgs:0,maxArgs:1}},notifications:{clear:{minArgs:1,maxArgs:1},create:{minArgs:1,maxArgs:2},getAll:{minArgs:0,maxArgs:0},getPermissionLevel:{minArgs:0,maxArgs:0},update:{minArgs:2,maxArgs:2}},pageAction:{getPopup:{minArgs:1,maxArgs:1},getTitle:{minArgs:1,maxArgs:1},hide:{minArgs:1,maxArgs:1,fallbackToNoCallback:!0},setIcon:{minArgs:1,maxArgs:1},setPopup:{minArgs:1,maxArgs:1,fallbackToNoCallback:!0},setTitle:{minArgs:1,maxArgs:1,fallbackToNoCallback:!0},show:{minArgs:1,maxArgs:1,fallbackToNoCallback:!0}},permissions:{contains:{minArgs:1,maxArgs:1},getAll:{minArgs:0,maxArgs:0},remove:{minArgs:1,maxArgs:1},request:{minArgs:1,maxArgs:1}},runtime:{getBackgroundPage:{minArgs:0,maxArgs:0},getPlatformInfo:{minArgs:0,maxArgs:0},openOptionsPage:{minArgs:0,maxArgs:0},requestUpdateCheck:{minArgs:0,maxArgs:0},sendMessage:{minArgs:1,maxArgs:3},sendNativeMessage:{minArgs:2,maxArgs:2},setUninstallURL:{minArgs:1,maxArgs:1}},sessions:{getDevices:{minArgs:0,maxArgs:1},getRecentlyClosed:{minArgs:0,maxArgs:1},restore:{minArgs:0,maxArgs:1}},storage:{local:{clear:{minArgs:0,maxArgs:0},get:{minArgs:0,maxArgs:1},getBytesInUse:{minArgs:0,maxArgs:1},remove:{minArgs:1,maxArgs:1},set:{minArgs:1,maxArgs:1}},managed:{get:{minArgs:0,maxArgs:1},getBytesInUse:{minArgs:0,maxArgs:1}},sync:{clear:{minArgs:0,maxArgs:0},get:{minArgs:0,maxArgs:1},getBytesInUse:{minArgs:0,maxArgs:1},remove:{minArgs:1,maxArgs:1},set:{minArgs:1,maxArgs:1}}},tabs:{captureVisibleTab:{minArgs:0,maxArgs:2},create:{minArgs:1,maxArgs:1},detectLanguage:{minArgs:0,maxArgs:1},discard:{minArgs:0,maxArgs:1},duplicate:{minArgs:1,maxArgs:1},executeScript:{minArgs:1,maxArgs:2},get:{minArgs:1,maxArgs:1},getCurrent:{minArgs:0,maxArgs:0},getZoom:{minArgs:0,maxArgs:1},getZoomSettings:{minArgs:0,maxArgs:1},highlight:{minArgs:1,maxArgs:1},insertCSS:{minArgs:1,maxArgs:2},move:{minArgs:2,maxArgs:2},query:{minArgs:1,maxArgs:1},reload:{minArgs:0,maxArgs:2},remove:{minArgs:1,maxArgs:1},removeCSS:{minArgs:1,maxArgs:2},sendMessage:{minArgs:2,maxArgs:3},setZoom:{minArgs:1,maxArgs:2},setZoomSettings:{minArgs:1,maxArgs:2},update:{minArgs:1,maxArgs:2}},topSites:{get:{minArgs:0,maxArgs:0}},webNavigation:{getAllFrames:{minArgs:1,maxArgs:1},getFrame:{minArgs:1,maxArgs:1}},webRequest:{handlerBehaviorChanged:{minArgs:0,maxArgs:0}},windows:{create:{minArgs:0,maxArgs:1},get:{minArgs:1,maxArgs:2},getAll:{minArgs:0,maxArgs:1},getCurrent:{minArgs:0,maxArgs:1},getLastFocused:{minArgs:0,maxArgs:1},remove:{minArgs:1,maxArgs:1},update:{minArgs:2,maxArgs:2}}};if(0===Object.keys(r).length)throw new Error("api-metadata.json has not been included in browser-polyfill");const o=(t,n)=>(...r)=>{e.runtime.lastError?t.reject(e.runtime.lastError):n.singleCallbackArg||r.length<=1&&!1!==n.singleCallbackArg?t.resolve(r[0]):t.resolve(r)},i=e=>1==e?"argument":"arguments",s=(e,t,n)=>new Proxy(t,{apply:(t,r,o)=>n.call(r,e,...o)});let a=Function.call.bind(Object.prototype.hasOwnProperty);const c=(e,t={},n={})=>{let r=Object.create(null),u={has:(t,n)=>n in e||n in r,get(u,m,g){if(m in r)return r[m];if(!(m in e))return;let l=e[m];if("function"==typeof l)if("function"==typeof t[m])l=s(e,e[m],t[m]);else if(a(n,m)){let t=((e,t)=>(function(n,...r){if(r.length<t.minArgs)throw new Error(`Expected at least ${t.minArgs} ${i(t.minArgs)} for ${e}(), got ${r.length}`);if(r.length>t.maxArgs)throw new Error(`Expected at most ${t.maxArgs} ${i(t.maxArgs)} for ${e}(), got ${r.length}`);return new Promise((i,s)=>{if(t.fallbackToNoCallback)try{n[e](...r,o({resolve:i,reject:s},t))}catch(o){console.warn(`${e} API method doesn't seem to support the callback parameter, `+"falling back to call it without a callback: ",o),n[e](...r),t.fallbackToNoCallback=!1,t.noCallback=!0,i()}else t.noCallback?(n[e](...r),i()):n[e](...r,o({resolve:i,reject:s},t))})}))(m,n[m]);l=s(e,e[m],t)}else l=l.bind(e);else{if("object"!=typeof l||null===l||!a(t,m)&&!a(n,m))return Object.defineProperty(r,m,{configurable:!0,enumerable:!0,get:()=>e[m],set(t){e[m]=t}}),l;l=c(l,t[m],n[m])}return r[m]=l,l},set:(t,n,o,i)=>(n in r?r[n]=o:e[n]=o,!0),defineProperty:(e,t,n)=>Reflect.defineProperty(r,t,n),deleteProperty:(e,t)=>Reflect.deleteProperty(r,t)},m=Object.create(e);return new Proxy(m,u)},u=e=>({addListener(t,n,...r){t.addListener(e.get(n),...r)},hasListener:(t,n)=>t.hasListener(e.get(n)),removeListener(t,n){t.removeListener(e.get(n))}});let m=!1;const g=new class extends WeakMap{constructor(e,t){super(t),this.createItem=e}get(e){return this.has(e)||this.set(e,this.createItem(e)),super.get(e)}}(e=>"function"!=typeof e?e:function(t,r,o){let i,s,a=!1,c=new Promise(e=>{i=function(t){m||(console.warn(n,(new Error).stack),m=!0),a=!0,e(t)}});try{s=e(t,r,i)}catch(e){s=Promise.reject(e)}const u=!0!==s&&(e=>e&&"object"==typeof e&&"function"==typeof e.then)(s);if(!0!==s&&!u&&!a)return!1;const g=e=>{e.then(e=>{o(e)},e=>{let t;t=e&&(e instanceof Error||"string"==typeof e.message)?e.message:"An unexpected error occurred",o({__mozWebExtensionPolyfillReject__:!0,message:t})}).catch(e=>{console.error("Failed to send onMessage rejected reply",e)})};return g(u?s:c),!0}),l=(n,r,o,...s)=>{if(s.length<r.minArgs)throw new Error(`Expected at least ${r.minArgs} ${i(r.minArgs)} for ${n}(), got ${s.length}`);if(s.length>r.maxArgs)throw new Error(`Expected at most ${r.maxArgs} ${i(r.maxArgs)} for ${n}(), got ${s.length}`);return new Promise((n,r)=>{const i=(({reject:n,resolve:r},o)=>{e.runtime.lastError?e.runtime.lastError.message===t?r():n(e.runtime.lastError):o&&o.__mozWebExtensionPolyfillReject__?n(new Error(o.message)):r(o)}).bind(null,{resolve:n,reject:r});s.push(i),o.sendMessage(...s)})},d={runtime:{onMessage:u(g),onMessageExternal:u(g),sendMessage:l.bind(null,"sendMessage",{minArgs:1,maxArgs:3})},tabs:{sendMessage:l.bind(null,"sendMessage",{minArgs:2,maxArgs:3})}},f={clear:{minArgs:1,maxArgs:1},get:{minArgs:1,maxArgs:1},set:{minArgs:1,maxArgs:1}};return r.privacy={network:{networkPredictionEnabled:f,webRTCIPHandlingPolicy:f},services:{passwordSavingEnabled:f},websites:{hyperlinkAuditingEnabled:f,referrersEnabled:f}},c(e,d,r)};if("object"!=typeof chrome||!chrome||!chrome.runtime||!chrome.runtime.id)throw new Error("This script should only be loaded in a browser extension.");e.exports=r(chrome)}else e.exports=browser})?r.apply(t,o):r)||(e.exports=i)},314:function(e,t,n){"use strict";n.r(t),n.d(t,"redditModifications",function(){return g});var r=n(29),o=n(2),i=n(64),s=n(3),a=n.n(s);function c(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=[],r=!0,o=!1,i=void 0;try{for(var s,a=e[Symbol.iterator]();!(r=(s=a.next()).done)&&(n.push(s.value),!t||n.length!==t);r=!0);}catch(e){o=!0,i=e}finally{try{r||null==a.return||a.return()}finally{if(o)throw i}}return n}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}()}var u=/^t1_.+/,m=/^t3_.+/,g=function(e,t,n){var r=null!==document.querySelector("#SHORTCUT_FOCUSABLE_DIV");if(l(r,n),r){if(!t){p($(".Comment"),e),$(document).arrive(".Comment",function(t){p([t],e)});b($(".Post"),e),$(document).arrive(".Post",function(t){b([t],e)})}$(document).arrive('.Post div[data-test-id="post-content"]',function(e){f(e,n)})}else if(!t){var o=".thing.link, .thing.comment";v($(o),e),$(document).arrive(o,function(t){v([t],e)})}},l=function(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:".Post",r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:{},i=Object(o.getFullIDsFromPath)(window.location.pathname),s=c(i,4),u=s[0];s[1],s[2],s[3];e&&0===Object.keys(r).length?a.a.runtime.sendMessage({action:"get-reddit-items-by-id",ids:[u],monitor_quarantined:t}).then(function(t){t&&t.items&&t.items.length&&(r=t.items[0].data,d({isNewReddit:e,newRedditTarget:n,postData:r}))}):d({isNewReddit:e,newRedditTarget:n,postData:r})},d=function(e){var t=e.isNewReddit,n=e.newRedditTarget,r=void 0===n?".Post":n,i=e.postData,s=void 0===i?{}:i,u=c(Object(o.getFullIDsFromPath)(window.location.pathname),4),m=u[0],g=(u[1],u[2],u[3]),l=void 0,d=void 0;if(m&&($('meta[name="robots"][content="noindex,nofollow"], meta[name="robots"][content="noindex"]').length||"is_robot_indexable"in s&&!s.is_robot_indexable)){var f=s.author||$(".link .top-matter .author").first().text()||$('.link .top-matter .tagline span:contains("[deleted]")').text()||$('.Post span:contains("u/[deleted]")').first().text();"[deleted]"!==f&&"u/[deleted]"!==f||"moderator"===s.removed_by_category?(l="rev-mod-removed",d="This post is unapproved. It is either waiting to be approved, or it was removed by someone or some robot."):(l="rev-user-deleted",d="This post was either deleted by the person who posted it, or removed by a moderator and then deleted by the person who posted it.")}if(d){var h=" It is not currently visible in r/".concat(g," and may not appear in web search results."),p='<div class="rev-from"><a id="'.concat("goto-options-from-content",'" href="#">Reveddit Real-Time</a> note</div>'),A=window.location.pathname.split("/",6).join("/"),b='<p><a href="https://www.reveddit.com'.concat(A,'/">View the post on Reveddit.com</a></p>');if(t){d+=" More details may appear in a message above from reddit.";var v=$('<div class="rev-new-reddit-message-wrap '.concat(l,'">').concat(p,"</div>")),y=$('<div class="rev-new-reddit-message-content"></div>'),x=$('<div class="rev-new-reddit-message-content-description">'.concat(d).concat(h,"</div>"));y.append(x),y.append(b),v.append(y),$(r).first().after(v)}else{d+=' View the post <a href="https://new.reddit.com'.concat(A,'/">on new reddit</a> for more details.'),$('<div class="reddit-infobar md-container-small '.concat(l,'">')).append(p).append('<div class="md"><p>'.concat(d).concat(h,"</p>").concat(b,"</div>")).prependTo('div.content[role="main"]')}$("#".concat("goto-options-from-content")).click(function(){return a.a.runtime.sendMessage({action:"open-options"})})}},f=function(e,t){var n=c(Object(o.getFullIDsFromPath)(window.location.pathname),4),i=n[0];n[1],n[2],n[3];Object(r.getAuth)().then(function(e){return Object(r.lookupItemsByID)([i],e,t)}).then(function(n){if(n){var r=n[0].data;l(!0,t,e.parentNode,r)}})},h=function(e,t){var n=e.id;return n&&n.match(t)?n:(n=$(e).attr("class").split(/\s+/).filter(function(e){return e.match(t)})[0])&&n.match(t)?n:(n=e.parentNode.id)&&n.match(t)?n:n=$(e).closest("div[tabindex=-1]").attr("id")},p=function(e,t){$(e).each(function(e,n){var r=$(n).closest(".Comment")[0],o=h(r,u);if(o&&o.match(u)){var s=A(r,"save"),a=s.parent();s.length||(a=(s=A(r,"share")).parent(),s.length||(s=$("<button>...</button>"),a=r));var c=s.clone(),m="",g=r.querySelector(".RichTextJSON-root");g&&(m=g.textContent),o in t?Object(i.setTextAndFunction_unsubscribe)(o,c,m).appendTo(a):Object(i.setTextAndFunction_subscribe)(o,c,m).appendTo(a)}})},A=function(e,t){return $(e).find('button:equalsi("'.concat(t,'")')).first()},b=function(e,t){$(e).each(function(e,n){var r=h(n,m);if(r&&r.match(m)){var o=$(n).find('button :equalsi("save")').first().parent(),s=o.clone();s.find("i.icon").first().parent().remove();var a=o.parent().children("button").last();r in t?Object(i.setTextAndFunction_unsubscribe)(r,s).insertAfter(a):Object(i.setTextAndFunction_subscribe)(r,s).insertAfter(a)}})},v=function(e,t){$(e).each(function(e,n){var r=n.getAttribute("data-fullname");if(!r){var s=c(Object(o.getFullIDsFromPath)(n.getAttribute("data-permalink")||""),4),a=s[0],u=s[1];s[2],s[3];u?r=u:a&&(r=a)}if(r){var m=n.querySelector("ul.buttons");if(m){var g="",l=n.querySelector(".usertext-body");l&&r.match(/^t1_/)&&(g=l.textContent);var d=Object(i.setTextAndFunction_subscribe)(r,$('<a href="">')[0],g);r in t&&(d=Object(i.setTextAndFunction_unsubscribe)(r,$('<a href="">')[0],g)),$(m).append(d.wrap("<li>").parent())}}})}},64:function(e,t,n){"use strict";n.r(t),n.d(t,"setTextAndFunction_subscribe",function(){return m}),n.d(t,"setTextAndFunction_unsubscribe",function(){return g});var r=n(1),o=n(2),i=n(65);n(3);function s(e,t,n,r,o,i,s){try{var a=e[i](s),c=a.value}catch(e){return void n(e)}a.done?t(c):Promise.resolve(c).then(r,o)}function a(e){return function(){var t=this,n=arguments;return new Promise(function(r,o){var i=e.apply(t,n);function a(e){s(i,r,o,a,c,"next",e)}function c(e){s(i,r,o,a,c,"throw",e)}a(void 0)})}}var c="unsubscribe-rev",u="subscribe-rev";location.hostname.match(/reveddit\.com$/)&&(c="unsubscribe",u="subscribe");var m=function(e,t,n){return $(t).text(u).off("click").click(function(t){return l(e,t.target,n)})},g=function(e,t,n){return $(t).text(c).off("click").click(function(t){return d(e,t.target,n)})},l=function(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"";return Object(r.subscribeId)(e,a(regeneratorRuntime.mark(function s(){return regeneratorRuntime.wrap(function(s){for(;;)switch(s.prev=s.next){case 0:return g(e,t,n),s.next=3,Object(i.b)(e,window.location.href);case 3:n&&Object(r.getLocalStorageItems)("other",!1).then(function(t){var i=t[e];if(i){var s=new o.LocalStorageItem({object:i});s.setText(n),t[e]=s,Object(r.saveLocalStorageItems)("other",!1,t)}});case 4:case"end":return s.stop()}},s)}))),!1},d=function(e,t,n){return Object(r.unsubscribeId)(e,function(){m(e,t,n)}),!1}},65:function(e,t,n){"use strict";n.d(t,"b",function(){return h}),n.d(t,"a",function(){return p});var r=n(29),o=n(1),i=n(2),s=n(3),a=n.n(s);function c(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function u(e,t,n,r,o,i,s){try{var a=e[i](s),c=a.value}catch(e){return void n(e)}a.done?t(c):Promise.resolve(c).then(r,o)}function m(e){return function(){var t=this,n=arguments;return new Promise(function(r,o){var i=e.apply(t,n);function s(e){u(i,r,o,s,a,"next",e)}function a(e){u(i,r,o,s,a,"throw",e)}s(void 0)})}}var g=0,l=1,d=2,f=Math.floor(60*Math.random())+60,h=function(e,t){var n=g;return t.match(/^https:\/\/www.reveddit.com/)&&(n=l),chrome.storage.sync.get(null,function(t){Object(r.getAuth)().then(function(r){return b([e],"other",!1,r,t,n,{})})})},p=function(){chrome.storage.sync.get(null,function(e){var t=Object.keys(e.user_subscriptions),n=Object.keys(e.other_subscriptions);if(t.length||n.length){var o=Math.floor(new Date/1e3);(!e.last_check_quarantined||o-e.last_check_quarantined>432e3)&&(e.tempVar_monitor_quarantined=!0),Object(r.getAuth)().then(function(n){return function(e,t){var n=Object.keys(t.other_subscriptions);n.length&&b(n,"other",!1,e,t,d)}(n,e),A(t,n,e)}).then(function(){var t={last_check:o};e.tempVar_monitor_quarantined&&(t.last_check_quarantined=o),e.tempVar_quarantined_content_found&&(t.options=e.options,t.options.monitor_quarantined=!0),chrome.storage.sync.set(t)})}})},A=function(){var e=m(regeneratorRuntime.mark(function e(t,n,o){var i;return regeneratorRuntime.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:if(!t.length){e.next=3;break}return i=t[0],e.abrupt("return",Object(r.lookupItemsByUser)(i,"","new","",o.options.monitor_quarantined,o.tempVar_monitor_quarantined,n).then(function(e){if(e){var r=[],s=new Set,a={};return e.user&&e.user.items&&(e=e.user.items),e.forEach(function(e){e.data&&e.data.name&&(e=e.data),r.push(e.name),a[e.name]=e,e.quarantine&&(s.add(e.subreddit),o.tempVar_quarantined_content_found=!0)}),b(r,i,!0,n,o,d,a,Array.from(s)).then(function(){return A(t.slice(1),n,o)})}}));case 3:case"end":return e.stop()}},e)}));return function(t,n,r){return e.apply(this,arguments)}}();var b=function(){var e=m(regeneratorRuntime.mark(function e(t,n,s,u,m,g){var l,d,f,h,p=arguments;return regeneratorRuntime.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:return l=p.length>6&&void 0!==p[6]?p[6]:{},d=p.length>7&&void 0!==p[7]?p[7]:[],h=m.options.monitor_quarantined,f=location.protocol.match(/^http/)?a.a.runtime.sendMessage({action:"get-reddit-items-by-id",ids:t,monitor_quarantined:h}):Object(r.lookupItemsByID)(t,u,h,m.tempVar_monitor_quarantined,d),e.abrupt("return",f.then(function(e){if(e){var t=Array.isArray(e)?e:e.items;if(t){var r=m.options.removal_status,a=m.options.lock_status,u=m.options.seen_count||o.SEEN_COUNT_DEFAULT,d=Object(o.getObjectNamesForThing)(n,s),f=m[d.removed]||{},h=m[d.approved]||{},p=m[d.locked]||{},A=m[d.unlocked]||{},b=m[d.changes]||[];s||(l={});var v=[],x=[],_=[],w=[];t.forEach(function(e){var t=e.data;s||(l[t.name]=t),Object(i.isRemovedItem)(t)?v.push(t.name):x.push(t.name),t.locked?_.push(t.name):w.push(t.name)});var k={},O=[],j=0;return Object(o.getLocalStorageItems)(n,s).then(function(e){var t;return r.track&&(j+=y(v,o.REMOVED,"mod removed",f,x,o.APPROVED,"approved",h,b,l,r.notify,k,O,s,g,e,u)),a.track&&(j+=y(_,o.LOCKED,"locked",p,w,o.UNLOCKED,"unlocked",A,b,l,a.notify,k,O,s,g,e,u)),j&&O.length&&Object(i.createNotification)({notificationId:n,title:n,message:"".concat(j," new [").concat(O.join(", "),"] actions, click to view")}),chrome.storage.sync.set((c(t={},d.removed,Object(i.trimDict_by_numberValuedAttribute)(f,o.MAX_SYNC_STORAGE_ITEMS_PER_OBJECT,"c")),c(t,d.approved,Object(i.trimDict_by_numberValuedAttribute)(h,o.MAX_SYNC_STORAGE_ITEMS_PER_OBJECT,"c")),c(t,d.locked,Object(i.trimDict_by_numberValuedAttribute)(p,o.MAX_SYNC_STORAGE_ITEMS_PER_OBJECT,"c")),c(t,d.unlocked,Object(i.trimDict_by_numberValuedAttribute)(A,o.MAX_SYNC_STORAGE_ITEMS_PER_OBJECT,"c")),c(t,d.changes,b.slice(-o.MAX_SYNC_STORAGE_CHANGES)),t),function(){return Object(i.updateBadgeUnseenCount)(),Object(o.addLocalStorageItems)(k,n,s)})})}}}));case 5:case"end":return e.stop()}},e)}));return function(t,n,r,o,i,s){return e.apply(this,arguments)}}(),v=function(e,t,n){var r=!0,o=!1,s=void 0;try{for(var a,c=n[Symbol.iterator]();!(r=(a=c.next()).done);r=!0){var u=a.value,m=u;if(m instanceof i.ChangeForStorage||(m=new i.ChangeForStorage({object:u})),m.getID()===e&&t===m.getChangeTypeInternal())return!0}}catch(e){o=!0,s=e}finally{try{r||null==c.return||c.return()}finally{if(o)throw s}}return!1};function y(e,t,n,r,s,a,c,u,m,d,h,p,A,b,y,x,_){var w=[],k=[],O=[],j=Math.floor(new Date/1e3);e.forEach(function(e){var n=d[e],s=x[e];if(b||s){if(s){var a=new i.LocalStorageItem({object:s});a.resetSeenCount(),p[e]=a}}else p[e]=new i.LocalStorageItem({item:n,observed_utc:j});if(!(e in r)){var c=!0;if((y===g&&t!==o.REMOVED||y===l)&&(c=!1),r[e]=new i.ItemForStorage(n.created_utc,c),delete u[e],c){var f=t;Object(i.isUserDeletedItem)(n)?(f=o.DELETED,O.push(e)):w.push(e),m.push(new i.ChangeForStorage({id:e,observed_utc:j,change_type:f}))}b&&(p[e]=new i.LocalStorageItem({item:n,observed_utc:j}))}}),s.forEach(function(e){var t=d[e];if(b||x[e]||(p[e]=new i.LocalStorageItem({item:t,observed_utc:j})),e in r){var n=new i.LocalStorageItem({object:x[e]}),o=n.incrementSeenCount();if(o>=_)!v(e,a,m)||o>=f?(u[e]=new i.ItemForStorage(t.created_utc,!0),delete r[e],m.push(new i.ChangeForStorage({id:e,observed_utc:j,change_type:a,seen_count:o})),k.push(e),p[e]=new i.LocalStorageItem({item:t,observed_utc:j})):p[e]=n;else p[e]=n}else u[e]=new i.ItemForStorage(t.created_utc,!1)});var E=w.length+k.length+O.length;return h&&E&&(w.length&&A.push(n),O.length&&A.push("user deleted"),k.length&&A.push(c)),E}}});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,