!function(e){var r={};function t(n){if(r[n])return r[n].exports;var o=r[n]={i:n,l:!1,exports:{}};return e[n].call(o.exports,o,o.exports,t),o.l=!0,o.exports}t.m=e,t.c=r,t.d=function(e,r,n){t.o(e,r)||Object.defineProperty(e,r,{enumerable:!0,get:n})},t.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},t.t=function(e,r){if(1&r&&(e=t(e)),8&r)return e;if(4&r&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(t.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&r&&"string"!=typeof e)for(var o in e)t.d(n,o,function(r){return e[r]}.bind(null,o));return n},t.n=function(e){var r=e&&e.__esModule?function(){return e.default}:function(){return e};return t.d(r,"a",r),r},t.o=function(e,r){return Object.prototype.hasOwnProperty.call(e,r)},t.p="",t(t.s=29)}({1:function(e,r,t){"use strict";t.r(r),t.d(r,"INTERVAL_DEFAULT",function(){return u}),t.d(r,"MAX_SYNC_STORAGE_ITEMS_PER_OBJECT",function(){return g}),t.d(r,"MAX_SYNC_STORAGE_CHANGES",function(){return m}),t.d(r,"MAX_OTHER_SUBSCRIPTIONS",function(){return l}),t.d(r,"REMOVED",function(){return d}),t.d(r,"APPROVED",function(){return f}),t.d(r,"LOCKED",function(){return A}),t.d(r,"UNLOCKED",function(){return h}),t.d(r,"EDITED",function(){return p}),t.d(r,"DELETED",function(){return b}),t.d(r,"getObjectNamesForThing",function(){return k}),t.d(r,"markEverythingAsSeen",function(){return O}),t.d(r,"markThingAsSeen",function(){return _}),t.d(r,"setStorageUpdateBadge",function(){return j}),t.d(r,"markIDsAsSeenIfSubscribed",function(){return P}),t.d(r,"subscribeId",function(){return T}),t.d(r,"unsubscribeId",function(){return S}),t.d(r,"getSubscribedIds",function(){return C}),t.d(r,"subscribeUser",function(){return I}),t.d(r,"unsubscribeUser",function(){return D}),t.d(r,"initStorage",function(){return M}),t.d(r,"getSubscribedUsers_withSeenAndUnseenIDs",function(){return L}),t.d(r,"getSubscribedUsers_withUnseenIDs",function(){return R}),t.d(r,"getUnseenIDs_thing",function(){return U}),t.d(r,"getIDs_thing",function(){return N}),t.d(r,"getLocalStorageItems",function(){return F}),t.d(r,"saveLocalStorageItems",function(){return B}),t.d(r,"addLocalStorageItems",function(){return $}),t.d(r,"getItemFromLocalStorage",function(){return V}),t.d(r,"getAllChanges",function(){return q}),t.d(r,"getOptions",function(){return z}),t.d(r,"saveOptions",function(){return W});var n=t(2),o=t(3),s=t.n(o);function i(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);r&&(n=n.filter(function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable})),t.push.apply(t,n)}return t}function a(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?i(t,!0).forEach(function(r){c(e,r,t[r])}):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(t).forEach(function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))})}return e}function c(e,r,t){return r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}var u=1,g=130,m=100,l=100,d=1,f=2,A=3,h=4,p=5,b=6,v={changes:[],removed:{},approved:{},locked:{},unlocked:{}},x=function(e,r,t){return t?e+"_u_"+r:e+"_"+r},y=function(e,r){var t=!(arguments.length>2&&void 0!==arguments[2])||arguments[2];Object.keys(v).forEach(function(n){e[x(n,r,t)]=v[n]})},k=function(e){var r=!(arguments.length>1&&void 0!==arguments[1])||arguments[1],t={};return Object.keys(v).forEach(function(n){t[n]=x(n,e,r)}),t},w=function(e){var r={};return y(r,e,!0),r},O=function(){return s.a.storage.sync.get(null).then(function(e){return Object.keys(e.user_subscriptions).forEach(function(r){_(e,r,!0)}),_(e,"other",!1),j(e)})},_=function(e,r,t){var n=k(r,t);delete n.changes;var o=[];Object.values(n).forEach(function(e){o.push(e)}),o.forEach(function(r){Object.values(e[r]).forEach(function(e){e.u=!1})})},j=function(e){return s.a.storage.sync.set(e).then(function(e){return s.a.runtime.sendMessage({action:"update-badge"})})},E=function(e,r,t,o,s){var i=e[r[t]];Object.keys(o).forEach(function(e){e in i?i[e].u=!1:s&&(i[e]=new n.ItemForStorage(o[e],!1))})},P=function(e,r,t,n,o,s,i){var a=arguments.length>7&&void 0!==arguments[7]?arguments[7]:function(){},c=k(r,t);delete c.changes;var u=e.user_subscriptions[r];!u&&t||(E(e,c,"removed",n,t),E(e,c,"approved",o,t),E(e,c,"locked",s,t),E(e,c,"unlocked",i,t),chrome.storage.sync.set(e,a))},T=function(e){var r=arguments.length>1&&void 0!==arguments[1]?arguments[1]:function(){},t="other_subscriptions";chrome.storage.sync.get(t,function(o){o[t][e]={t:Math.floor((new Date).getTime()/1e3)};var s=Object(n.trimDict_by_numberValuedAttribute)(o[t],l,"t");chrome.storage.sync.set(c({},t,s),r)})},S=function(e){var r=arguments.length>1&&void 0!==arguments[1]?arguments[1]:function(){},t="other_subscriptions",n=k("other",!1);delete n.changes,chrome.storage.sync.get(Object.values(n).concat(t),function(o){delete o[t][e],Object.values(n).forEach(function(r){e in o[r]&&delete o[r][e]}),chrome.storage.sync.set(o,function(){chrome.runtime.sendMessage({action:"update-badge"},r)})})},C=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:function(){},r="other_subscriptions";chrome.storage.sync.get(r,function(t){e(Object.keys(t[r]))})},I=function(e){var r=arguments.length>1&&void 0!==arguments[1]?arguments[1]:function(){},t=arguments.length>2&&void 0!==arguments[2]?arguments[2]:function(){},n=w(e);chrome.storage.sync.get("user_subscriptions",function(o){var s=o.user_subscriptions;e in s?t("already subscribed to this user"):Object.keys(s).length<5?(s[e]=!0,chrome.storage.sync.set(a({user_subscriptions:s},n),r)):t("maximum number of subscriptions reached")})},D=function(e,r){var t=Object.keys(w(e));chrome.storage.sync.get("user_subscriptions",function(n){var o=n.user_subscriptions;delete o[e],chrome.storage.sync.set({user_subscriptions:o},function(){chrome.storage.sync.remove(t,function(){var t=x("items",e,!0);chrome.runtime.sendMessage({action:"update-badge"}),chrome.storage.local.remove(t,r)})})})},M=function(e){chrome.storage.sync.get(null,function(r){var t;0===Object.keys(r).length?chrome.storage.sync.set((y(t={user_subscriptions:{},other_subscriptions:{},options:{interval:u,custom_clientid:"",removal_status:{track:!0,notify:!0},lock_status:{track:!0,notify:!0},monitor_quarantined:!1},last_check:null,last_check_quarantined:null},"other",!1),t),e):e()})},L=function(e){chrome.storage.sync.get(null,function(r){var t=Object.keys(r.user_subscriptions),n={};t.forEach(function(e){n[e]=N(e,!0,r)}),n.other=N("other",!1,r),e(n,r)})},R=function(e){chrome.storage.sync.get(null,function(r){var t=Object.keys(r.user_subscriptions),n={};t.forEach(function(e){n[e]=U(e,!0,r)}),n.other=U("other",!1,r),e(n)})},U=function(e,r,t){return N(e,r,t).unseen},N=function(e,r,t){var n=t.options.removal_status.track,o=t.options.lock_status.track,s={},i={},a=[],c=k(e,r);return n&&a.push(c.removed,c.approved),o&&a.push(c.locked,c.unlocked),a.forEach(function(e){Object.keys(t[e]).forEach(function(r){t[e][r].u?s[r]=!0:i[r]=!0})}),{unseen:Object.keys(s),seen:Object.keys(i)}},F=function(e,r){var t=x("items",e,r);return s.a.storage.local.get(c({},t,{})).then(function(e){return e[t]})},B=function(e,r,t){var n=x("items",e,r);return s.a.storage.local.set(c({},n,t))},$=function(e,r,t){var n=x("items",r,t);return chrome.storage.local.get(c({},n,{}),function(r){var t=r[n];Object.keys(e).forEach(function(r){t[r]=e[r]});var o=t;return Object.keys(t).length>500&&(o=trimDictOfItems_by_utcAttribute(t,500,"o")),s.a.storage.local.set(c({},n,o))})},V=function(e,r,t,o){var s=x("items",e,r);return s in o&&t in o[s]?new n.LocalStorageItem({object:o[s][t]}):""},q=function(e){chrome.storage.sync.get("user_subscriptions",function(r){var t=[x("changes","other",!1)],n={changes_other:"other"};Object.keys(r.user_subscriptions).forEach(function(e){var r=x("changes",e,!0);t.push(r),n[r]=e}),chrome.storage.sync.get(t,function(r){var o={};t.forEach(function(e){e in r&&r[e].length&&(o[n[e]]=r[e])}),e(o)})})},z=function(e){return s.a.storage.sync.get(["user_subscriptions","other_subscriptions","options"]).then(function(r){var t=Object.keys(r.user_subscriptions),n=Object.keys(r.other_subscriptions),o=r.options;return e(t,n,o)}).catch(console.log)},W=function(e,r,t,n,o,s,i,a,c){chrome.storage.sync.set({options:{interval:e,custom_clientid:r,removal_status:{track:t,notify:n},lock_status:{track:o,notify:s},hide_subscribe:i,monitor_quarantined:a}},c)}},2:function(e,r,t){"use strict";t.r(r),t.d(r,"ALARM_NAME",function(){return a}),t.d(r,"createTab",function(){return c}),t.d(r,"getFullIDsFromURL",function(){return u}),t.d(r,"getFullIDsFromPath",function(){return l}),t.d(r,"reformatRedditText",function(){return d}),t.d(r,"isRemovedItem",function(){return f}),t.d(r,"isComment",function(){return A}),t.d(r,"isRemovedComment",function(){return h}),t.d(r,"isUserDeletedComment",function(){return p}),t.d(r,"isUserDeletedPost",function(){return b}),t.d(r,"isUserDeletedItem",function(){return v}),t.d(r,"isRemovedPost",function(){return x}),t.d(r,"trimDict_by_numberValuedAttribute",function(){return y}),t.d(r,"sortDict_by_numberValuedAttribute",function(){return k}),t.d(r,"ItemForStorage",function(){return w}),t.d(r,"ChangeForStorage",function(){return O}),t.d(r,"LocalStorageItem",function(){return _}),t.d(r,"setAlarm",function(){return j}),t.d(r,"alphaLowerSort",function(){return E}),t.d(r,"goToOptions",function(){return P}),t.d(r,"showError",function(){return T}),t.d(r,"pprint",function(){return S}),t.d(r,"getPrettyTimeLength",function(){return C}),t.d(r,"getPrettyDate",function(){return I}),t.d(r,"createNotification",function(){return D}),t.d(r,"updateBadgeUnseenCount",function(){return M});var n=t(1);t(3);function o(e,r){if(!(e instanceof r))throw new TypeError("Cannot call a class as a function")}function s(e,r){for(var t=0;t<r.length;t++){var n=r[t];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}function i(e,r,t){return r&&s(e.prototype,r),t&&s(e,t),e}var a="notifyme",c=function(e){chrome.tabs.create({url:e},function(r){r?chrome.windows.update(r.windowId,{focused:!0}):chrome.windows.create({url:e},function(e){chrome.windows.update(e.id,{focused:!0})})})},u=function(e){var r=e.replace(/https:\/\/[^/]*re(ve)?ddit.com/,"");return l(r)},g=/^\/(v|r|user)\/([^/]+)\/comments\/([^/]+)\/[^/]*(?:\/([^/?&#]+))?/,m=/^\/(?:user|y|u)\/([^/?&#]+)\/?/,l=function(e){var r=void 0,t=void 0,n=void 0,o=void 0,s=e.match(g),i=e.match(m);s?("user"===s[1]?n=s[2]:o=s[2],s[3]&&(r="t3_"+s[3]),s[4]&&(t="t1_"+s[4])):i&&(n=i[1]);return[r,t,n,o]},d=function(e){return e.replace(/&amp;/g,"&").replace(/&gt;/g,">").replace(/&lt;/g,"<").replace(/\s+/g," ").substr(0,300)},f=function(e){return A(e.name)?h(e):x(e)},A=function(e){return"t1"===e.substr(0,2)},h=function(e){return("[removed]"===e.body.replace(/\\/g,"")||"[deleted]"===e.body.replace(/\\/g,""))&&"[deleted]"===e.author.replace(/\\/g,"")},p=function(e){return"[deleted]"===e.body.replace(/\\/g,"")&&"[deleted]"===e.author.replace(/\\/g,"")},b=function(e){return!e.is_robot_indexable&&"[deleted]"===e.author.replace(/\\/g,"")},v=function(e){return A(e.name)?p(e):b(e)},x=function(e){return!e.is_robot_indexable},y=function(e,r,t){var n=k(e,t).slice(0,r),o={};return n.forEach(function(e){o[e[0]]=e[1]}),o},k=function(e,r){var t=Object.keys(e).map(function(r){return[r,e[r]]});return t.sort(function(e,t){return t[1][r]-e[1][r]}),t},w=function(){function e(r,t){o(this,e),this.c=r,this.u=t}return i(e,[{key:"getCreatedUTC",value:function(){return this.c}},{key:"getUnseen",value:function(){return this.u}}]),e}(),O=function(){function e(r){var t=r.id,n=void 0===t?null:t,s=r.observed_utc,i=void 0===s?null:s,a=r.change_type,c=void 0===a?null:a,u=r.object,g=void 0===u?null:u;o(this,e),g?(this.i=g.i,this.o=g.o,this.g=g.g):(this.i=n,this.o=i,this.g=c)}return i(e,[{key:"getID",value:function(){return this.i}},{key:"getObservedUTC",value:function(){return this.o}},{key:"getChangeType",value:function(){switch(this.g){case n.REMOVED:return"mod removed";case n.DELETED:return"user deleted";case n.APPROVED:return"approved";case n.LOCKED:return"locked";case n.UNLOCKED:return"unlocked";case n.EDITED:return"edited"}}}]),e}(),_=function(){function e(r){var t=r.item,n=void 0===t?null:t,s=r.observed_utc,i=void 0===s?null:s,a=r.object,c=void 0===a?null:a;if(o(this,e),c)this.t=c.t,this.o=c.o,this.c=c.c;else{var u="";u=A(n.name)?d(n.body):n.title,this.t=u,this.o=i,this.c=n.created_utc}}return i(e,[{key:"setText",value:function(e){this.t=d(e)}},{key:"getText",value:function(){return this.t}},{key:"getObservedUTC",value:function(){return this.o}},{key:"getCreatedUTC",value:function(){return this.c}}]),e}();function j(e){chrome.alarms.clear(a),chrome.alarms.create(a,{delayInMinutes:1,periodInMinutes:e})}function E(e,r){var t=e.toLowerCase(),n=r.toLowerCase();return t<n?-1:t>n?1:0}function P(){chrome.runtime.openOptionsPage?(chrome.runtime.openOptionsPage(),window.close()):window.open(chrome.runtime.getURL("/src/options.html"))}function T(e,r){$('<div class="rr-error">'+e+"</div>").appendTo(r).delay(2400).fadeTo(400,0,function(){$(this).remove()})}function S(e){console.log(JSON.stringify(e,null,"\t"))}var C=function(e){var r=[[60,"second","seconds"],[60,"minute","minutes"],[24,"hour","hours"],[7,"day","days"],[365/12/7,"week","weeks"],[12,"month","months"],[10,"year","years"],[10,"decade","decades"],[10,"century","centuries"],[10,"millenium","millenia"]];if(e<60)return e+" seconds";for(var t=e,n=0;n<r.length;n++){var o=r[n][0],s=r[n][1],i=r[n][2];if(t<o){var a=t-Math.floor(t),c=Math.round(a*r[n-1][0]);if(r[n-1][0]===c&&(t+=1,c=0),(Math.floor(t)>1||0==Math.floor(t))&&(s=i),n>1&&c>0){var u=r[n-1][1];c>1&&(u=r[n-1][2]),s+=", "+String(c)+" "+u}return String(Math.floor(t))+" "+s}t/=o}},I=function(e){var r=Math.floor((new Date).getTime()/1e3)-e;return C(r)+" ago"},D=function(e){var r=e.notificationId,t=e.title,n=e.message;location.protocol.match(/^http/)?chrome.runtime.sendMessage({action:"create-notification",options:{notificationId:r,title:t,message:n}}):chrome.notifications.create(r,{type:"basic",iconUrl:"/icons/128.png",title:t,message:n})},M=function(){location.protocol.match(/^http/)?chrome.runtime.sendMessage({action:"update-badge"}):Object(n.getSubscribedUsers_withUnseenIDs)(function(e){var r=0;Object.values(e).forEach(function(e){r+=e.length});var t=r.toString();0==r&&(t=""),chrome.browserAction.setBadgeBackgroundColor({color:"red"}),chrome.browserAction.setBadgeText({text:t})})}},29:function(e,r,t){"use strict";t.r(r),t.d(r,"lookupItemsByID",function(){return m}),t.d(r,"lookupItemsByUser",function(){return h}),t.d(r,"handleFetchErrors",function(){return p}),t.d(r,"getRedditData",function(){return b}),t.d(r,"getRedditToken",function(){return v}),t.d(r,"getAuth",function(){return x}),t.d(r,"getLocalAuth",function(){return y}),t.d(r,"getCookie",function(){return k}),t.d(r,"getLocalOrAppAuth",function(){return O}),t.d(r,"getLoggedinUser",function(){return _});var n=t(1),o=t(3),s=t.n(o);function i(e,r,t,n,o,s,i){try{var a=e[s](i),c=a.value}catch(e){return void t(e)}a.done?r(c):Promise.resolve(c).then(n,o)}function a(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);r&&(n=n.filter(function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable})),t.push.apply(t,n)}return t}function c(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?a(t,!0).forEach(function(r){u(e,r,t[r])}):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(t).forEach(function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))})}return e}function u(e,r,t){return r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}function g(e){return function(e){if(Array.isArray(e)){for(var r=0,t=new Array(e.length);r<e.length;r++)t[r]=e[r];return t}}(e)||function(e){if(Symbol.iterator in Object(e)||"[object Arguments]"===Object.prototype.toString.call(e))return Array.from(e)}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}var m=function(e,r){var t=arguments.length>2&&void 0!==arguments[2]&&arguments[2],n=arguments.length>3&&void 0!==arguments[3]&&arguments[3],o={id:e,raw_json:1},s="?"+Object.keys(o).map(function(e){return"".concat(e,"=").concat(o[e])}).join("&");return A.apply(void 0,g(w("api/info",s,r,n)).concat([t]))},l={name:"reddit_session",url:"https://reddit.com"},d=["name","value","domain","path","secure","httpOnly","storeId"],f=function(e){var r=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"https://reddit.com";if(!e)return e;var t=Object.keys(e).filter(function(e){return d.includes(e)}).reduce(function(r,t){return c({},r,u({},t,e[t]))},{});return t.url=r,t},A=function(){var e,r=(e=regeneratorRuntime.mark(function e(r,t){var n,o,i,a=arguments;return regeneratorRuntime.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:return n=a.length>2&&void 0!==a[2]&&a[2],e.next=3,s.a.cookies.set({domain:"reddit.com",url:"https://reddit.com",name:"_options",value:"{%22pref_quarantine_optin%22:true}"});case 3:if(!n){e.next=12;break}return e.t0=f,e.next=7,s.a.cookies.get(l);case 7:if(e.t1=e.sent,!(o=(0,e.t0)(e.t1))){e.next=12;break}return e.next=12,s.a.cookies.remove(l);case 12:if(i=fetch(r,t).then(p).then(b).catch(console.log),!o){e.next=16;break}return e.next=16,s.a.cookies.set(o);case 16:return e.abrupt("return",i);case 17:case"end":return e.stop()}},e)}),function(){var r=this,t=arguments;return new Promise(function(n,o){var s=e.apply(r,t);function a(e){i(s,n,o,a,c,"next",e)}function c(e){i(s,n,o,a,c,"throw",e)}a(void 0)})});return function(e,t){return r.apply(this,arguments)}}(),h=function(e,r,t,n,o,s,i){var a={limit:100,sort:t,raw_json:1};r&&(a.after=r),n&&(a.t=n);var c="user/".concat(e,"/overview.json"),u="?"+Object.keys(a).map(function(e){return"".concat(e,"=").concat(a[e])}).join("&");return A.apply(void 0,g(w(c,u,i,s)).concat([o]))},p=function(e){if(!e.ok)throw Error(e.statusText);return e.json()},b=function(e){if(!e||!e.data||!e.data.children)throw Error("reddit data is not defined");return e.data.children},v=function(e){if(!e||!e.access_token)throw Error("access token is not defined");return e.access_token},x=function(){return Object(n.getOptions)(function(e,r,t){var n="SEw1uvRd6kxFEw";if(t.custom_clientid&&"testing"===(n=t.custom_clientid))return"none";var o={headers:{Authorization:"Basic ".concat(btoa("".concat(n,":"))),"Content-Type":"application/x-www-form-urlencoded; charset=utf-8"},method:"POST",body:"grant_type=".concat(encodeURIComponent("https://oauth.reddit.com/grants/installed_client"),"&device_id=DO_NOT_TRACK_THIS_DEVICE")};return fetch("https://www.reddit.com/api/v1/access_token",o).then(p).then(v).then(function(e){return{headers:{Authorization:"bearer ".concat(e)}}}).catch(console.log)})},y=function(){return fetch("https://mod.reddit.com/mail/all").then(function(e){k({url:"https://mod.reddit.com",name:"token"}).then(function(e){if(e){var r=new RegExp("[^A-Za-z0-9+/].*?$"),t=e.value.replace(r,""),n=atob(t),o=JSON.parse(n);return"accessToken"in o&&o.accessToken?{headers:{Authorization:"bearer ".concat(o.accessToken)}}:null}return null})})},k=function(e){var r=e.url,t=e.name;return location.protocol.match(/^http/)?s.a.runtime.sendMessage({action:"get-cookie",options:{url:r,name:t}}).then(function(e){return e.cookie}):s.a.cookies.get({url:r,name:t})},w=function(e,r,t,n){if(t&&"none"!==t)return[(n?"https://ored.reveddit.com/":"https://oauth.reddit.com/")+e+r,t];var o=(n?"https://wred.reveddit.com/":"https://www.reddit.com/")+e;return"api/info"===e&&(o+=".json"),[o+=r]},O=function(){return y().then(function(e){return e||x()}).catch(console.log)},_=function(){return fetch("https://www.reddit.com/api/me.json").then(p).then(j).catch(console.log)},j=function(e){if(!e||!e.data||!e.data.name)throw Error("reddit username is not defined");return e.data.name}},3:function(e,r,t){var n,o,s;o=[e],void 0===(s="function"==typeof(n=function(e){"use strict";if("undefined"==typeof browser||Object.getPrototypeOf(browser)!==Object.prototype){const r="The message port closed before a response was received.",t="Returning a Promise is the preferred way to send a reply from an onMessage/onMessageExternal listener, as the sendResponse will be removed from the specs (See https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/runtime/onMessage)",n=e=>{const n={alarms:{clear:{minArgs:0,maxArgs:1},clearAll:{minArgs:0,maxArgs:0},get:{minArgs:0,maxArgs:1},getAll:{minArgs:0,maxArgs:0}},bookmarks:{create:{minArgs:1,maxArgs:1},get:{minArgs:1,maxArgs:1},getChildren:{minArgs:1,maxArgs:1},getRecent:{minArgs:1,maxArgs:1},getSubTree:{minArgs:1,maxArgs:1},getTree:{minArgs:0,maxArgs:0},move:{minArgs:2,maxArgs:2},remove:{minArgs:1,maxArgs:1},removeTree:{minArgs:1,maxArgs:1},search:{minArgs:1,maxArgs:1},update:{minArgs:2,maxArgs:2}},browserAction:{disable:{minArgs:0,maxArgs:1,fallbackToNoCallback:!0},enable:{minArgs:0,maxArgs:1,fallbackToNoCallback:!0},getBadgeBackgroundColor:{minArgs:1,maxArgs:1},getBadgeText:{minArgs:1,maxArgs:1},getPopup:{minArgs:1,maxArgs:1},getTitle:{minArgs:1,maxArgs:1},openPopup:{minArgs:0,maxArgs:0},setBadgeBackgroundColor:{minArgs:1,maxArgs:1,fallbackToNoCallback:!0},setBadgeText:{minArgs:1,maxArgs:1,fallbackToNoCallback:!0},setIcon:{minArgs:1,maxArgs:1},setPopup:{minArgs:1,maxArgs:1,fallbackToNoCallback:!0},setTitle:{minArgs:1,maxArgs:1,fallbackToNoCallback:!0}},browsingData:{remove:{minArgs:2,maxArgs:2},removeCache:{minArgs:1,maxArgs:1},removeCookies:{minArgs:1,maxArgs:1},removeDownloads:{minArgs:1,maxArgs:1},removeFormData:{minArgs:1,maxArgs:1},removeHistory:{minArgs:1,maxArgs:1},removeLocalStorage:{minArgs:1,maxArgs:1},removePasswords:{minArgs:1,maxArgs:1},removePluginData:{minArgs:1,maxArgs:1},settings:{minArgs:0,maxArgs:0}},commands:{getAll:{minArgs:0,maxArgs:0}},contextMenus:{remove:{minArgs:1,maxArgs:1},removeAll:{minArgs:0,maxArgs:0},update:{minArgs:2,maxArgs:2}},cookies:{get:{minArgs:1,maxArgs:1},getAll:{minArgs:1,maxArgs:1},getAllCookieStores:{minArgs:0,maxArgs:0},remove:{minArgs:1,maxArgs:1},set:{minArgs:1,maxArgs:1}},devtools:{inspectedWindow:{eval:{minArgs:1,maxArgs:2,singleCallbackArg:!1}},panels:{create:{minArgs:3,maxArgs:3,singleCallbackArg:!0}}},downloads:{cancel:{minArgs:1,maxArgs:1},download:{minArgs:1,maxArgs:1},erase:{minArgs:1,maxArgs:1},getFileIcon:{minArgs:1,maxArgs:2},open:{minArgs:1,maxArgs:1,fallbackToNoCallback:!0},pause:{minArgs:1,maxArgs:1},removeFile:{minArgs:1,maxArgs:1},resume:{minArgs:1,maxArgs:1},search:{minArgs:1,maxArgs:1},show:{minArgs:1,maxArgs:1,fallbackToNoCallback:!0}},extension:{isAllowedFileSchemeAccess:{minArgs:0,maxArgs:0},isAllowedIncognitoAccess:{minArgs:0,maxArgs:0}},history:{addUrl:{minArgs:1,maxArgs:1},deleteAll:{minArgs:0,maxArgs:0},deleteRange:{minArgs:1,maxArgs:1},deleteUrl:{minArgs:1,maxArgs:1},getVisits:{minArgs:1,maxArgs:1},search:{minArgs:1,maxArgs:1}},i18n:{detectLanguage:{minArgs:1,maxArgs:1},getAcceptLanguages:{minArgs:0,maxArgs:0}},identity:{launchWebAuthFlow:{minArgs:1,maxArgs:1}},idle:{queryState:{minArgs:1,maxArgs:1}},management:{get:{minArgs:1,maxArgs:1},getAll:{minArgs:0,maxArgs:0},getSelf:{minArgs:0,maxArgs:0},setEnabled:{minArgs:2,maxArgs:2},uninstallSelf:{minArgs:0,maxArgs:1}},notifications:{clear:{minArgs:1,maxArgs:1},create:{minArgs:1,maxArgs:2},getAll:{minArgs:0,maxArgs:0},getPermissionLevel:{minArgs:0,maxArgs:0},update:{minArgs:2,maxArgs:2}},pageAction:{getPopup:{minArgs:1,maxArgs:1},getTitle:{minArgs:1,maxArgs:1},hide:{minArgs:1,maxArgs:1,fallbackToNoCallback:!0},setIcon:{minArgs:1,maxArgs:1},setPopup:{minArgs:1,maxArgs:1,fallbackToNoCallback:!0},setTitle:{minArgs:1,maxArgs:1,fallbackToNoCallback:!0},show:{minArgs:1,maxArgs:1,fallbackToNoCallback:!0}},permissions:{contains:{minArgs:1,maxArgs:1},getAll:{minArgs:0,maxArgs:0},remove:{minArgs:1,maxArgs:1},request:{minArgs:1,maxArgs:1}},runtime:{getBackgroundPage:{minArgs:0,maxArgs:0},getPlatformInfo:{minArgs:0,maxArgs:0},openOptionsPage:{minArgs:0,maxArgs:0},requestUpdateCheck:{minArgs:0,maxArgs:0},sendMessage:{minArgs:1,maxArgs:3},sendNativeMessage:{minArgs:2,maxArgs:2},setUninstallURL:{minArgs:1,maxArgs:1}},sessions:{getDevices:{minArgs:0,maxArgs:1},getRecentlyClosed:{minArgs:0,maxArgs:1},restore:{minArgs:0,maxArgs:1}},storage:{local:{clear:{minArgs:0,maxArgs:0},get:{minArgs:0,maxArgs:1},getBytesInUse:{minArgs:0,maxArgs:1},remove:{minArgs:1,maxArgs:1},set:{minArgs:1,maxArgs:1}},managed:{get:{minArgs:0,maxArgs:1},getBytesInUse:{minArgs:0,maxArgs:1}},sync:{clear:{minArgs:0,maxArgs:0},get:{minArgs:0,maxArgs:1},getBytesInUse:{minArgs:0,maxArgs:1},remove:{minArgs:1,maxArgs:1},set:{minArgs:1,maxArgs:1}}},tabs:{captureVisibleTab:{minArgs:0,maxArgs:2},create:{minArgs:1,maxArgs:1},detectLanguage:{minArgs:0,maxArgs:1},discard:{minArgs:0,maxArgs:1},duplicate:{minArgs:1,maxArgs:1},executeScript:{minArgs:1,maxArgs:2},get:{minArgs:1,maxArgs:1},getCurrent:{minArgs:0,maxArgs:0},getZoom:{minArgs:0,maxArgs:1},getZoomSettings:{minArgs:0,maxArgs:1},highlight:{minArgs:1,maxArgs:1},insertCSS:{minArgs:1,maxArgs:2},move:{minArgs:2,maxArgs:2},query:{minArgs:1,maxArgs:1},reload:{minArgs:0,maxArgs:2},remove:{minArgs:1,maxArgs:1},removeCSS:{minArgs:1,maxArgs:2},sendMessage:{minArgs:2,maxArgs:3},setZoom:{minArgs:1,maxArgs:2},setZoomSettings:{minArgs:1,maxArgs:2},update:{minArgs:1,maxArgs:2}},topSites:{get:{minArgs:0,maxArgs:0}},webNavigation:{getAllFrames:{minArgs:1,maxArgs:1},getFrame:{minArgs:1,maxArgs:1}},webRequest:{handlerBehaviorChanged:{minArgs:0,maxArgs:0}},windows:{create:{minArgs:0,maxArgs:1},get:{minArgs:1,maxArgs:2},getAll:{minArgs:0,maxArgs:1},getCurrent:{minArgs:0,maxArgs:1},getLastFocused:{minArgs:0,maxArgs:1},remove:{minArgs:1,maxArgs:1},update:{minArgs:2,maxArgs:2}}};if(0===Object.keys(n).length)throw new Error("api-metadata.json has not been included in browser-polyfill");const o=(r,t)=>(...n)=>{e.runtime.lastError?r.reject(e.runtime.lastError):t.singleCallbackArg||n.length<=1&&!1!==t.singleCallbackArg?r.resolve(n[0]):r.resolve(n)},s=e=>1==e?"argument":"arguments",i=(e,r,t)=>new Proxy(r,{apply:(r,n,o)=>t.call(n,e,...o)});let a=Function.call.bind(Object.prototype.hasOwnProperty);const c=(e,r={},t={})=>{let n=Object.create(null),u={has:(r,t)=>t in e||t in n,get(u,g,m){if(g in n)return n[g];if(!(g in e))return;let l=e[g];if("function"==typeof l)if("function"==typeof r[g])l=i(e,e[g],r[g]);else if(a(t,g)){let r=((e,r)=>(function(t,...n){if(n.length<r.minArgs)throw new Error(`Expected at least ${r.minArgs} ${s(r.minArgs)} for ${e}(), got ${n.length}`);if(n.length>r.maxArgs)throw new Error(`Expected at most ${r.maxArgs} ${s(r.maxArgs)} for ${e}(), got ${n.length}`);return new Promise((s,i)=>{if(r.fallbackToNoCallback)try{t[e](...n,o({resolve:s,reject:i},r))}catch(o){console.warn(`${e} API method doesn't seem to support the callback parameter, `+"falling back to call it without a callback: ",o),t[e](...n),r.fallbackToNoCallback=!1,r.noCallback=!0,s()}else r.noCallback?(t[e](...n),s()):t[e](...n,o({resolve:s,reject:i},r))})}))(g,t[g]);l=i(e,e[g],r)}else l=l.bind(e);else{if("object"!=typeof l||null===l||!a(r,g)&&!a(t,g))return Object.defineProperty(n,g,{configurable:!0,enumerable:!0,get:()=>e[g],set(r){e[g]=r}}),l;l=c(l,r[g],t[g])}return n[g]=l,l},set:(r,t,o,s)=>(t in n?n[t]=o:e[t]=o,!0),defineProperty:(e,r,t)=>Reflect.defineProperty(n,r,t),deleteProperty:(e,r)=>Reflect.deleteProperty(n,r)},g=Object.create(e);return new Proxy(g,u)},u=e=>({addListener(r,t,...n){r.addListener(e.get(t),...n)},hasListener:(r,t)=>r.hasListener(e.get(t)),removeListener(r,t){r.removeListener(e.get(t))}});let g=!1;const m=new class extends WeakMap{constructor(e,r){super(r),this.createItem=e}get(e){return this.has(e)||this.set(e,this.createItem(e)),super.get(e)}}(e=>"function"!=typeof e?e:function(r,n,o){let s,i,a=!1,c=new Promise(e=>{s=function(r){g||(console.warn(t,(new Error).stack),g=!0),a=!0,e(r)}});try{i=e(r,n,s)}catch(e){i=Promise.reject(e)}const u=!0!==i&&(e=>e&&"object"==typeof e&&"function"==typeof e.then)(i);if(!0!==i&&!u&&!a)return!1;const m=e=>{e.then(e=>{o(e)},e=>{let r;r=e&&(e instanceof Error||"string"==typeof e.message)?e.message:"An unexpected error occurred",o({__mozWebExtensionPolyfillReject__:!0,message:r})}).catch(e=>{console.error("Failed to send onMessage rejected reply",e)})};return m(u?i:c),!0}),l=(t,n,o,...i)=>{if(i.length<n.minArgs)throw new Error(`Expected at least ${n.minArgs} ${s(n.minArgs)} for ${t}(), got ${i.length}`);if(i.length>n.maxArgs)throw new Error(`Expected at most ${n.maxArgs} ${s(n.maxArgs)} for ${t}(), got ${i.length}`);return new Promise((t,n)=>{const s=(({reject:t,resolve:n},o)=>{e.runtime.lastError?e.runtime.lastError.message===r?n():t(e.runtime.lastError):o&&o.__mozWebExtensionPolyfillReject__?t(new Error(o.message)):n(o)}).bind(null,{resolve:t,reject:n});i.push(s),o.sendMessage(...i)})},d={runtime:{onMessage:u(m),onMessageExternal:u(m),sendMessage:l.bind(null,"sendMessage",{minArgs:1,maxArgs:3})},tabs:{sendMessage:l.bind(null,"sendMessage",{minArgs:2,maxArgs:3})}},f={clear:{minArgs:1,maxArgs:1},get:{minArgs:1,maxArgs:1},set:{minArgs:1,maxArgs:1}};return n.privacy={network:{networkPredictionEnabled:f,webRTCIPHandlingPolicy:f},services:{passwordSavingEnabled:f},websites:{hyperlinkAuditingEnabled:f,referrersEnabled:f}},c(e,d,n)};if("object"!=typeof chrome||!chrome||!chrome.runtime||!chrome.runtime.id)throw new Error("This script should only be loaded in a browser extension.");e.exports=n(chrome)}else e.exports=browser})?n.apply(r,o):n)||(e.exports=s)}});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,