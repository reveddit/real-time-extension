!function(e){var t={};function n(r){if(t[r])return t[r].exports;var o=t[r]={i:r,l:!1,exports:{}};return e[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)n.d(r,o,function(t){return e[t]}.bind(null,o));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=12)}({0:function(e,t,n){"use strict";n.r(t),n.d(t,"INTERVAL_DEFAULT",function(){return i}),n.d(t,"MAX_SYNC_STORAGE_ITEMS_PER_OBJECT",function(){return s}),n.d(t,"MAX_SYNC_STORAGE_CHANGES",function(){return a}),n.d(t,"MAX_OTHER_SUBSCRIPTIONS",function(){return f}),n.d(t,"REMOVED",function(){return d}),n.d(t,"APPROVED",function(){return l}),n.d(t,"LOCKED",function(){return h}),n.d(t,"UNLOCKED",function(){return g}),n.d(t,"EDITED",function(){return p}),n.d(t,"DELETED",function(){return b}),n.d(t,"getObjectNamesForThing",function(){return O}),n.d(t,"markEverythingAsSeen",function(){return k}),n.d(t,"markThingAsSeen",function(){return w}),n.d(t,"setStorageUpdateBadge",function(){return j}),n.d(t,"markIDsAsSeenIfSubscribed",function(){return T}),n.d(t,"subscribeId",function(){return D}),n.d(t,"unsubscribeId",function(){return S}),n.d(t,"getSubscribedIds",function(){return C}),n.d(t,"subscribeUser",function(){return I}),n.d(t,"unsubscribeUser",function(){return P}),n.d(t,"initStorage",function(){return U}),n.d(t,"getSubscribedUsers_withSeenAndUnseenIDs",function(){return x}),n.d(t,"getSubscribedUsers_withUnseenIDs",function(){return A}),n.d(t,"getUnseenIDs_thing",function(){return M}),n.d(t,"getIDs_thing",function(){return L}),n.d(t,"getLocalStorageItems",function(){return $}),n.d(t,"saveLocalStorageItems",function(){return R}),n.d(t,"addLocalStorageItems",function(){return F}),n.d(t,"getItemFromLocalStorage",function(){return N}),n.d(t,"getAllChanges",function(){return B}),n.d(t,"getOptions",function(){return V}),n.d(t,"saveOptions",function(){return K});var r=n(1);function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter(function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable})),n.push.apply(n,r)}return n}function c(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(n,!0).forEach(function(t){u(e,t,n[t])}):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(n).forEach(function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))})}return e}function u(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var i=1,s=130,a=100,f=100,d=1,l=2,h=3,g=4,p=5,b=6,m={changes:[],removed:{},approved:{},locked:{},unlocked:{}},v=function(e,t,n){return n?e+"_u_"+t:e+"_"+t},y=function(e,t){var n=!(arguments.length>2&&void 0!==arguments[2])||arguments[2];Object.keys(m).forEach(function(r){e[v(r,t,n)]=m[r]})},O=function(e){var t=!(arguments.length>1&&void 0!==arguments[1])||arguments[1],n={};return Object.keys(m).forEach(function(r){n[r]=v(r,e,t)}),n},_=function(e){var t={};return y(t,e,!0),t},k=function(){return browser.storage.sync.get(null).then(function(e){return Object.keys(e.user_subscriptions).forEach(function(t){w(e,t,!0)}),w(e,"other",!1),j(e)})},w=function(e,t,n){var r=O(t,n);delete r.changes;var o=[];Object.values(r).forEach(function(e){o.push(e)}),o.forEach(function(t){Object.values(e[t]).forEach(function(e){e.u=!1})})},j=function(e){return browser.storage.sync.set(e).then(function(e){return browser.runtime.sendMessage({action:"update-badge"})})},E=function(e,t,n,o,c){var u=e[t[n]];Object.keys(o).forEach(function(e){e in u?u[e].u=!1:c&&(u[e]=new r.ItemForStorage(o[e],!1))})},T=function(e,t,n,r,o,c,u){var i=arguments.length>7&&void 0!==arguments[7]?arguments[7]:function(){},s=O(t,n);delete s.changes;var a=e.user_subscriptions[t];!a&&n||(E(e,s,"removed",r,n),E(e,s,"approved",o,n),E(e,s,"locked",c,n),E(e,s,"unlocked",u,n),chrome.storage.sync.set(e,i))},D=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:function(){},n="other_subscriptions";chrome.storage.sync.get(n,function(o){o[n][e]={t:Math.floor((new Date).getTime()/1e3)};var c=Object(r.trimDict_by_numberValuedAttribute)(o[n],f,"t");chrome.storage.sync.set(u({},n,c),t)})},S=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:function(){},n="other_subscriptions",r=O("other",!1);delete r.changes,chrome.storage.sync.get(Object.values(r).concat(n),function(o){delete o[n][e],Object.values(r).forEach(function(t){e in o[t]&&delete o[t][e]}),chrome.storage.sync.set(o,function(){chrome.runtime.sendMessage({action:"update-badge"},t)})})},C=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:function(){},t="other_subscriptions";chrome.storage.sync.get(t,function(n){e(Object.keys(n[t]))})},I=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:function(){},n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:function(){},r=_(e);chrome.storage.sync.get("user_subscriptions",function(o){var u=o.user_subscriptions;e in u?n("already subscribed to this user"):Object.keys(u).length<5?(u[e]=!0,chrome.storage.sync.set(c({user_subscriptions:u},r),t)):n("maximum number of subscriptions reached")})},P=function(e,t){var n=Object.keys(_(e));chrome.storage.sync.get("user_subscriptions",function(r){var o=r.user_subscriptions;delete o[e],chrome.storage.sync.set({user_subscriptions:o},function(){chrome.storage.sync.remove(n,function(){var n=v("items",e,!0);chrome.runtime.sendMessage({action:"update-badge"}),chrome.storage.local.remove(n,t)})})})},U=function(e){chrome.storage.sync.get(null,function(t){var n;0===Object.keys(t).length?chrome.storage.sync.set((y(n={user_subscriptions:{},other_subscriptions:{},options:{interval:i,custom_clientid:"",removal_status:{track:!0,notify:!0},lock_status:{track:!0,notify:!0}}},"other",!1),n),e):e()})},x=function(e){chrome.storage.sync.get(null,function(t){var n=Object.keys(t.user_subscriptions),r={};n.forEach(function(e){r[e]=L(e,!0,t)}),r.other=L("other",!1,t),e(r,t)})},A=function(e){chrome.storage.sync.get(null,function(t){var n=Object.keys(t.user_subscriptions),r={};n.forEach(function(e){r[e]=M(e,!0,t)}),r.other=M("other",!1,t),e(r)})},M=function(e,t,n){return L(e,t,n).unseen},L=function(e,t,n){var r=n.options.removal_status.track,o=n.options.lock_status.track,c={},u={},i=[],s=O(e,t);return r&&i.push(s.removed,s.approved),o&&i.push(s.locked,s.unlocked),i.forEach(function(e){Object.keys(n[e]).forEach(function(t){n[e][t].u?c[t]=!0:u[t]=!0})}),{unseen:Object.keys(c),seen:Object.keys(u)}},$=function(e,t){var n=v("items",e,t);return browser.storage.local.get(u({},n,{})).then(function(e){return e[n]})},R=function(e,t,n){var r=v("items",e,t);return browser.storage.local.set(u({},r,n))},F=function(e,t,n){var r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:function(){},o=v("items",t,n);chrome.storage.local.get(u({},o,{}),function(t){var n=t[o];Object.keys(e).forEach(function(t){n[t]=e[t]});var c=n;Object.keys(n).length>500&&(c=trimDictOfItems_by_utcAttribute(n,500,"o")),chrome.storage.local.set(u({},o,c),r)})},N=function(e,t,n,o){var c=v("items",e,t);return c in o&&n in o[c]?new r.LocalStorageItem({object:o[c][n]}):""},B=function(e){chrome.storage.sync.get("user_subscriptions",function(t){var n=[v("changes","other",!1)],r={changes_other:"other"};Object.keys(t.user_subscriptions).forEach(function(e){var t=v("changes",e,!0);n.push(t),r[t]=e}),chrome.storage.sync.get(n,function(t){var o={};n.forEach(function(e){e in t&&t[e].length&&(o[r[e]]=t[e])}),e(o)})})},V=function(e){return browser.storage.sync.get(["user_subscriptions","other_subscriptions","options"]).then(function(t){var n=Object.keys(t.user_subscriptions),r=Object.keys(t.other_subscriptions),o=t.options;return e(n,r,o)}).catch(console.log)},K=function(e,t,n,r,o,c,u){chrome.storage.sync.set({options:{interval:e,custom_clientid:t,removal_status:{track:n,notify:r},lock_status:{track:o,notify:c}}},u)}},1:function(e,t,n){"use strict";n.r(t),n.d(t,"ALARM_NAME",function(){return i}),n.d(t,"createTab",function(){return s}),n.d(t,"getFullIDsFromURL",function(){return a}),n.d(t,"getFullIDsFromPath",function(){return l}),n.d(t,"reformatRedditText",function(){return h}),n.d(t,"isRemovedItem",function(){return g}),n.d(t,"isComment",function(){return p}),n.d(t,"isRemovedComment",function(){return b}),n.d(t,"isUserDeletedComment",function(){return m}),n.d(t,"isUserDeletedPost",function(){return v}),n.d(t,"isUserDeletedItem",function(){return y}),n.d(t,"isRemovedPost",function(){return O}),n.d(t,"trimDict_by_numberValuedAttribute",function(){return _}),n.d(t,"sortDict_by_numberValuedAttribute",function(){return k}),n.d(t,"ItemForStorage",function(){return w}),n.d(t,"ChangeForStorage",function(){return j}),n.d(t,"LocalStorageItem",function(){return E}),n.d(t,"setAlarm",function(){return T}),n.d(t,"alphaLowerSort",function(){return D}),n.d(t,"goToOptions",function(){return S}),n.d(t,"showError",function(){return C}),n.d(t,"pprint",function(){return I}),n.d(t,"getPrettyTimeLength",function(){return P}),n.d(t,"getPrettyDate",function(){return U}),n.d(t,"createNotification",function(){return x}),n.d(t,"updateBadgeUnseenCount",function(){return A});var r=n(0);function o(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function c(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function u(e,t,n){return t&&c(e.prototype,t),n&&c(e,n),e}var i="notifyme",s=function(e){chrome.tabs.create({url:e},function(t){t?chrome.windows.update(t.windowId,{focused:!0}):chrome.windows.create({url:e},function(e){chrome.windows.update(e.id,{focused:!0})})})},a=function(e){var t=e.replace(/https:\/\/[^/]*re(ve)?ddit.com/,"");return l(t)},f=/^\/(r|user)\/([^/]+)\/comments\/([^/]+)\/[^/]*(?:\/([^/?&#]+))?/,d=/^\/user\/([^/?&#]+)\/?/,l=function(e){var t=void 0,n=void 0,r=void 0,o=void 0,c=e.match(f),u=e.match(d);c?("user"===c[1]?r=c[2]:o=c[2],c[3]&&(t="t3_"+c[3]),c[4]&&(n="t1_"+c[4])):u&&(r=u[1]);return[t,n,r,o]},h=function(e){return e.replace(/&amp;/g,"&").replace(/&gt;/g,">").replace(/&lt;/g,"<").replace(/\s+/g," ").substr(0,300)},g=function(e){return p(e.name)?b(e):O(e)},p=function(e){return"t1"===e.substr(0,2)},b=function(e){return("[removed]"===e.body.replace(/\\/g,"")||"[deleted]"===e.body.replace(/\\/g,""))&&"[deleted]"===e.author.replace(/\\/g,"")},m=function(e){return"[deleted]"===e.body.replace(/\\/g,"")&&"[deleted]"===e.author.replace(/\\/g,"")},v=function(e){return!e.is_robot_indexable&&"[deleted]"===e.author.replace(/\\/g,"")},y=function(e){return p(e.name)?m(e):v(e)},O=function(e){return!e.is_robot_indexable},_=function(e,t,n){var r=k(e,n).slice(0,t),o={};return r.forEach(function(e){o[e[0]]=e[1]}),o},k=function(e,t){var n=Object.keys(e).map(function(t){return[t,e[t]]});return n.sort(function(e,n){return n[1][t]-e[1][t]}),n},w=function(){function e(t,n){o(this,e),this.c=t,this.u=n}return u(e,[{key:"getCreatedUTC",value:function(){return this.c}},{key:"getUnseen",value:function(){return this.u}}]),e}(),j=function(){function e(t){var n=t.id,r=void 0===n?null:n,c=t.observed_utc,u=void 0===c?null:c,i=t.change_type,s=void 0===i?null:i,a=t.object,f=void 0===a?null:a;o(this,e),f?(this.i=f.i,this.o=f.o,this.g=f.g):(this.i=r,this.o=u,this.g=s)}return u(e,[{key:"getID",value:function(){return this.i}},{key:"getObservedUTC",value:function(){return this.o}},{key:"getChangeType",value:function(){switch(this.g){case r.REMOVED:return"mod removed";case r.DELETED:return"user deleted";case r.APPROVED:return"approved";case r.LOCKED:return"locked";case r.UNLOCKED:return"unlocked";case r.EDITED:return"edited"}}}]),e}(),E=function(){function e(t){var n=t.item,r=void 0===n?null:n,c=t.observed_utc,u=void 0===c?null:c,i=t.object,s=void 0===i?null:i;if(o(this,e),s)this.t=s.t,this.o=s.o,this.c=s.c;else{var a="";a=p(r.name)?h(r.body):r.title,this.t=a,this.o=u,this.c=r.created_utc}}return u(e,[{key:"setText",value:function(e){this.t=h(e)}},{key:"getText",value:function(){return this.t}},{key:"getObservedUTC",value:function(){return this.o}},{key:"getCreatedUTC",value:function(){return this.c}}]),e}();function T(e){chrome.alarms.clear(i),chrome.alarms.create(i,{delayInMinutes:1,periodInMinutes:e})}function D(e,t){var n=e.toLowerCase(),r=t.toLowerCase();return n<r?-1:n>r?1:0}function S(){chrome.runtime.openOptionsPage?(chrome.runtime.openOptionsPage(),window.close()):window.open(chrome.runtime.getURL("/src/options.html"))}function C(e,t){$('<div class="rr-error">'+e+"</div>").appendTo(t).delay(2400).fadeTo(400,0,function(){$(this).remove()})}function I(e){console.log(JSON.stringify(e,null,"\t"))}var P=function(e){var t=[[60,"second","seconds"],[60,"minute","minutes"],[24,"hour","hours"],[7,"day","days"],[365/12/7,"week","weeks"],[12,"month","months"],[10,"year","years"],[10,"decade","decades"],[10,"century","centuries"],[10,"millenium","millenia"]];if(e<60)return e+" seconds";for(var n=e,r=0;r<t.length;r++){var o=t[r][0],c=t[r][1],u=t[r][2];if(n<o){var i=n-Math.floor(n),s=Math.round(i*t[r-1][0]);if(t[r-1][0]===s&&(n+=1,s=0),(Math.floor(n)>1||0==Math.floor(n))&&(c=u),r>1&&s>0){var a=t[r-1][1];s>1&&(a=t[r-1][2]),c+=", "+String(s)+" "+a}return String(Math.floor(n))+" "+c}n/=o}},U=function(e){var t=Math.floor((new Date).getTime()/1e3)-e;return P(t)+" ago"},x=function(e){var t=e.notificationId,n=e.title,r=e.message;location.protocol.match(/^http/)?chrome.runtime.sendMessage({action:"create-notification",options:{notificationId:t,title:n,message:r}}):chrome.notifications.create(t,{type:"basic",iconUrl:"/icons/128.png",title:n,message:r})},A=function(){location.protocol.match(/^http/)?chrome.runtime.sendMessage({action:"update-badge"}):Object(r.getSubscribedUsers_withUnseenIDs)(function(e){var t=0;Object.values(e).forEach(function(e){t+=e.length});var n=t.toString();0==t&&(n=""),chrome.browserAction.setBadgeBackgroundColor({color:"red"}),chrome.browserAction.setBadgeText({text:n})})}},12:function(e,t,n){"use strict";n.r(t);var r=n(0),o=n(1);Object(r.getAllChanges)(function(e){chrome.storage.local.get(null,function(t){var n=[];Object.keys(e).forEach(function(t){e[t].forEach(function(e){var r=new o.ChangeForStorage({object:e});r.user=t,n.push(r)})}),n.sort(function(e,t){return t.getObservedUTC()-e.getObservedUTC()}),n.length>0?function(e,t){var n=$("<table>").addClass("history"),c=$("<tr>");$("<th>").text("action").appendTo(c),$("<th>").html("action observed time &#x25BC;").appendTo(c),$("<th>").text("time between item creation and observed action").appendTo(c),$("<th>").text("type").appendTo(c),$("<th>").text("author").appendTo(c),$("<th>").text("link").appendTo(c),n.append(c),e.forEach(function(e){var c=e.getID(),u=e.getObservedUTC(),i=e.getChangeType(),s=e.user,a=!0;"other"===s&&(a=!1);var f=Object(r.getItemFromLocalStorage)(s,a,c,t),d=Object(o.isComment)(c)?"comment":"post",l=c,h="n/a",g="";if(f){var p=f.getCreatedUTC();f.getText().trim()&&(l=f.getText().trim()),h=Object(o.getPrettyTimeLength)(u-p),g=new Date(1e3*p)}var b=$("<tr>");$("<td>").addClass("action-column").append('<span class="action '.concat(i,'">').concat(i.replace(/ /g,"&nbsp;"),"</span>")).appendTo(b);var m,v=new Date(1e3*u);$("<td>").attr("title",v).text(Object(o.getPrettyDate)(u)).appendTo(b),$("<td>").attr("title",g).text(h).appendTo(b),$("<td>").text(d).appendTo(b),$("<td>").text(s).appendTo(b),m=a?"https://www.reveddit.com/user/".concat(s,"?show=").concat(c,"&removal_status=all"):"https://www.reveddit.com/info?id=".concat(c,"&removal_status=all");var y=$("<a/>",{href:m,text:l});$("<td>").append(y).appendTo(b),n.append(b)}),n.appendTo("#tables")}(n,t):($(".legend").hide(),$("<p>No actions observed since extension installation. Subscribe to a user or a post or comment to track changes.</p>").appendTo("#tables"))})})}});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,