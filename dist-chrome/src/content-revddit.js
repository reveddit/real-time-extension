!function(e){var t={};function r(n){if(t[n])return t[n].exports;var o=t[n]={i:n,l:!1,exports:{}};return e[n].call(o.exports,o,o.exports,r),o.l=!0,o.exports}r.m=e,r.c=t,r.d=function(e,t,n){r.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},r.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},r.t=function(e,t){if(1&t&&(e=r(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(r.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)r.d(n,o,function(t){return e[t]}.bind(null,o));return n},r.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return r.d(t,"a",t),t},r.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},r.p="",r(r.s=315)}({1:function(e,t,r){"use strict";r.r(t),r.d(t,"INTERVAL_DEFAULT",function(){return u}),r.d(t,"MAX_SYNC_STORAGE_ITEMS_PER_OBJECT",function(){return g}),r.d(t,"MAX_SYNC_STORAGE_CHANGES",function(){return m}),r.d(t,"MAX_OTHER_SUBSCRIPTIONS",function(){return l}),r.d(t,"REMOVED",function(){return d}),r.d(t,"APPROVED",function(){return f}),r.d(t,"LOCKED",function(){return A}),r.d(t,"UNLOCKED",function(){return h}),r.d(t,"EDITED",function(){return b}),r.d(t,"DELETED",function(){return p}),r.d(t,"getObjectNamesForThing",function(){return k}),r.d(t,"markEverythingAsSeen",function(){return O}),r.d(t,"markThingAsSeen",function(){return w}),r.d(t,"setStorageUpdateBadge",function(){return E}),r.d(t,"markIDsAsSeenIfSubscribed",function(){return S}),r.d(t,"subscribeId",function(){return T}),r.d(t,"unsubscribeId",function(){return I}),r.d(t,"getSubscribedIds",function(){return C}),r.d(t,"subscribeUser",function(){return P}),r.d(t,"unsubscribeUser",function(){return D}),r.d(t,"initStorage",function(){return M}),r.d(t,"getSubscribedUsers_withSeenAndUnseenIDs",function(){return L}),r.d(t,"getSubscribedUsers_withUnseenIDs",function(){return R}),r.d(t,"getUnseenIDs_thing",function(){return N}),r.d(t,"getIDs_thing",function(){return U}),r.d(t,"getLocalStorageItems",function(){return $}),r.d(t,"saveLocalStorageItems",function(){return F}),r.d(t,"addLocalStorageItems",function(){return B}),r.d(t,"getItemFromLocalStorage",function(){return V}),r.d(t,"getAllChanges",function(){return q}),r.d(t,"getOptions",function(){return G}),r.d(t,"saveOptions",function(){return z});var n=r(2),o=r(3),s=r.n(o);function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter(function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable})),r.push.apply(r,n)}return r}function a(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(r,!0).forEach(function(t){c(e,t,r[t])}):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(r).forEach(function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))})}return e}function c(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}var u=1,g=130,m=100,l=100,d=1,f=2,A=3,h=4,b=5,p=6,v={changes:[],removed:{},approved:{},locked:{},unlocked:{}},x=function(e,t,r){return r?e+"_u_"+t:e+"_"+t},y=function(e,t){var r=!(arguments.length>2&&void 0!==arguments[2])||arguments[2];Object.keys(v).forEach(function(n){e[x(n,t,r)]=v[n]})},k=function(e){var t=!(arguments.length>1&&void 0!==arguments[1])||arguments[1],r={};return Object.keys(v).forEach(function(n){r[n]=x(n,e,t)}),r},_=function(e){var t={};return y(t,e,!0),t},O=function(){return s.a.storage.sync.get(null).then(function(e){return Object.keys(e.user_subscriptions).forEach(function(t){w(e,t,!0)}),w(e,"other",!1),E(e)})},w=function(e,t,r){var n=k(t,r);delete n.changes;var o=[];Object.values(n).forEach(function(e){o.push(e)}),o.forEach(function(t){Object.values(e[t]).forEach(function(e){e.u=!1})})},E=function(e){return s.a.storage.sync.set(e).then(function(e){return s.a.runtime.sendMessage({action:"update-badge"})})},j=function(e,t,r,o,s){var i=e[t[r]];Object.keys(o).forEach(function(e){e in i?i[e].u=!1:s&&(i[e]=new n.ItemForStorage(o[e],!1))})},S=function(e,t,r,n,o,s,i){var a=arguments.length>7&&void 0!==arguments[7]?arguments[7]:function(){},c=k(t,r);delete c.changes;var u=e.user_subscriptions[t];!u&&r||(j(e,c,"removed",n,r),j(e,c,"approved",o,r),j(e,c,"locked",s,r),j(e,c,"unlocked",i,r),chrome.storage.sync.set(e,a))},T=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:function(){},r="other_subscriptions";chrome.storage.sync.get(r,function(o){o[r][e]={t:Math.floor((new Date).getTime()/1e3)};var s=Object(n.trimDict_by_numberValuedAttribute)(o[r],l,"t");chrome.storage.sync.set(c({},r,s),t)})},I=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:function(){},r="other_subscriptions",n=k("other",!1);delete n.changes,chrome.storage.sync.get(Object.values(n).concat(r),function(o){delete o[r][e],Object.values(n).forEach(function(t){e in o[t]&&delete o[t][e]}),chrome.storage.sync.set(o,function(){chrome.runtime.sendMessage({action:"update-badge"},t)})})},C=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:function(){},t="other_subscriptions";chrome.storage.sync.get(t,function(r){e(Object.keys(r[t]))})},P=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:function(){},r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:function(){},n=_(e);chrome.storage.sync.get("user_subscriptions",function(o){var s=o.user_subscriptions;e in s?r("already subscribed to this user"):Object.keys(s).length<5?(s[e]=!0,chrome.storage.sync.set(a({user_subscriptions:s},n),t)):r("maximum number of subscriptions reached")})},D=function(e,t){var r=Object.keys(_(e));chrome.storage.sync.get("user_subscriptions",function(n){var o=n.user_subscriptions;delete o[e],chrome.storage.sync.set({user_subscriptions:o},function(){chrome.storage.sync.remove(r,function(){var r=x("items",e,!0);chrome.runtime.sendMessage({action:"update-badge"}),chrome.storage.local.remove(r,t)})})})},M=function(e){chrome.storage.sync.get(null,function(t){var r;0===Object.keys(t).length?chrome.storage.sync.set((y(r={user_subscriptions:{},other_subscriptions:{},options:{interval:u,custom_clientid:"",removal_status:{track:!0,notify:!0},lock_status:{track:!0,notify:!0}}},"other",!1),r),e):e()})},L=function(e){chrome.storage.sync.get(null,function(t){var r=Object.keys(t.user_subscriptions),n={};r.forEach(function(e){n[e]=U(e,!0,t)}),n.other=U("other",!1,t),e(n,t)})},R=function(e){chrome.storage.sync.get(null,function(t){var r=Object.keys(t.user_subscriptions),n={};r.forEach(function(e){n[e]=N(e,!0,t)}),n.other=N("other",!1,t),e(n)})},N=function(e,t,r){return U(e,t,r).unseen},U=function(e,t,r){var n=r.options.removal_status.track,o=r.options.lock_status.track,s={},i={},a=[],c=k(e,t);return n&&a.push(c.removed,c.approved),o&&a.push(c.locked,c.unlocked),a.forEach(function(e){Object.keys(r[e]).forEach(function(t){r[e][t].u?s[t]=!0:i[t]=!0})}),{unseen:Object.keys(s),seen:Object.keys(i)}},$=function(e,t){var r=x("items",e,t);return s.a.storage.local.get(c({},r,{})).then(function(e){return e[r]})},F=function(e,t,r){var n=x("items",e,t);return s.a.storage.local.set(c({},n,r))},B=function(e,t,r){var n=arguments.length>3&&void 0!==arguments[3]?arguments[3]:function(){},o=x("items",t,r);chrome.storage.local.get(c({},o,{}),function(t){var r=t[o];Object.keys(e).forEach(function(t){r[t]=e[t]});var s=r;Object.keys(r).length>500&&(s=trimDictOfItems_by_utcAttribute(r,500,"o")),chrome.storage.local.set(c({},o,s),n)})},V=function(e,t,r,o){var s=x("items",e,t);return s in o&&r in o[s]?new n.LocalStorageItem({object:o[s][r]}):""},q=function(e){chrome.storage.sync.get("user_subscriptions",function(t){var r=[x("changes","other",!1)],n={changes_other:"other"};Object.keys(t.user_subscriptions).forEach(function(e){var t=x("changes",e,!0);r.push(t),n[t]=e}),chrome.storage.sync.get(r,function(t){var o={};r.forEach(function(e){e in t&&t[e].length&&(o[n[e]]=t[e])}),e(o)})})},G=function(e){return s.a.storage.sync.get(["user_subscriptions","other_subscriptions","options"]).then(function(t){var r=Object.keys(t.user_subscriptions),n=Object.keys(t.other_subscriptions),o=t.options;return e(r,n,o)}).catch(console.log)},z=function(e,t,r,n,o,s,i){chrome.storage.sync.set({options:{interval:e,custom_clientid:t,removal_status:{track:r,notify:n},lock_status:{track:o,notify:s}}},i)}},2:function(e,t,r){"use strict";r.r(t),r.d(t,"ALARM_NAME",function(){return a}),r.d(t,"createTab",function(){return c}),r.d(t,"getFullIDsFromURL",function(){return u}),r.d(t,"getFullIDsFromPath",function(){return l}),r.d(t,"reformatRedditText",function(){return d}),r.d(t,"isRemovedItem",function(){return f}),r.d(t,"isComment",function(){return A}),r.d(t,"isRemovedComment",function(){return h}),r.d(t,"isUserDeletedComment",function(){return b}),r.d(t,"isUserDeletedPost",function(){return p}),r.d(t,"isUserDeletedItem",function(){return v}),r.d(t,"isRemovedPost",function(){return x}),r.d(t,"trimDict_by_numberValuedAttribute",function(){return y}),r.d(t,"sortDict_by_numberValuedAttribute",function(){return k}),r.d(t,"ItemForStorage",function(){return _}),r.d(t,"ChangeForStorage",function(){return O}),r.d(t,"LocalStorageItem",function(){return w}),r.d(t,"setAlarm",function(){return E}),r.d(t,"alphaLowerSort",function(){return j}),r.d(t,"goToOptions",function(){return S}),r.d(t,"showError",function(){return T}),r.d(t,"pprint",function(){return I}),r.d(t,"getPrettyTimeLength",function(){return C}),r.d(t,"getPrettyDate",function(){return P}),r.d(t,"createNotification",function(){return D}),r.d(t,"updateBadgeUnseenCount",function(){return M});var n=r(1);r(3);function o(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function s(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}function i(e,t,r){return t&&s(e.prototype,t),r&&s(e,r),e}var a="notifyme",c=function(e){chrome.tabs.create({url:e},function(t){t?chrome.windows.update(t.windowId,{focused:!0}):chrome.windows.create({url:e},function(e){chrome.windows.update(e.id,{focused:!0})})})},u=function(e){var t=e.replace(/https:\/\/[^\/]*re(ve)?ddit.com/,"");return l(t)},g=/^\/(v|r|user)\/([^\/]+)\/comments\/([^\/]+)\/[^\/]*(?:\/([^\/?&#]+))?/,m=/^\/(?:user|y|u)\/([^\/?&#]+)\/?/,l=function(e){var t=void 0,r=void 0,n=void 0,o=void 0,s=e.match(g),i=e.match(m);s?("user"===s[1]?n=s[2]:o=s[2],s[3]&&(t="t3_"+s[3]),s[4]&&(r="t1_"+s[4])):i&&(n=i[1]);return[t,r,n,o]},d=function(e){return e.replace(/&amp;/g,"&").replace(/&gt;/g,">").replace(/&lt;/g,"<").replace(/\s+/g," ").substr(0,300)},f=function(e){return A(e.name)?h(e):x(e)},A=function(e){return"t1"===e.substr(0,2)},h=function(e){return("[removed]"===e.body.replace(/\\/g,"")||"[deleted]"===e.body.replace(/\\/g,""))&&"[deleted]"===e.author.replace(/\\/g,"")},b=function(e){return"[deleted]"===e.body.replace(/\\/g,"")&&"[deleted]"===e.author.replace(/\\/g,"")},p=function(e){return!e.is_robot_indexable&&"[deleted]"===e.author.replace(/\\/g,"")},v=function(e){return A(e.name)?b(e):p(e)},x=function(e){return!e.is_robot_indexable},y=function(e,t,r){var n=k(e,r).slice(0,t),o={};return n.forEach(function(e){o[e[0]]=e[1]}),o},k=function(e,t){var r=Object.keys(e).map(function(t){return[t,e[t]]});return r.sort(function(e,r){return r[1][t]-e[1][t]}),r},_=function(){function e(t,r){o(this,e),this.c=t,this.u=r}return i(e,[{key:"getCreatedUTC",value:function(){return this.c}},{key:"getUnseen",value:function(){return this.u}}]),e}(),O=function(){function e(t){var r=t.id,n=void 0===r?null:r,s=t.observed_utc,i=void 0===s?null:s,a=t.change_type,c=void 0===a?null:a,u=t.object,g=void 0===u?null:u;o(this,e),g?(this.i=g.i,this.o=g.o,this.g=g.g):(this.i=n,this.o=i,this.g=c)}return i(e,[{key:"getID",value:function(){return this.i}},{key:"getObservedUTC",value:function(){return this.o}},{key:"getChangeType",value:function(){switch(this.g){case n.REMOVED:return"mod removed";case n.DELETED:return"user deleted";case n.APPROVED:return"approved";case n.LOCKED:return"locked";case n.UNLOCKED:return"unlocked";case n.EDITED:return"edited"}}}]),e}(),w=function(){function e(t){var r=t.item,n=void 0===r?null:r,s=t.observed_utc,i=void 0===s?null:s,a=t.object,c=void 0===a?null:a;if(o(this,e),c)this.t=c.t,this.o=c.o,this.c=c.c;else{var u="";u=A(n.name)?d(n.body):n.title,this.t=u,this.o=i,this.c=n.created_utc}}return i(e,[{key:"setText",value:function(e){this.t=d(e)}},{key:"getText",value:function(){return this.t}},{key:"getObservedUTC",value:function(){return this.o}},{key:"getCreatedUTC",value:function(){return this.c}}]),e}();function E(e){chrome.alarms.clear(a),chrome.alarms.create(a,{delayInMinutes:1,periodInMinutes:e})}function j(e,t){var r=e.toLowerCase(),n=t.toLowerCase();return r<n?-1:r>n?1:0}function S(){chrome.runtime.openOptionsPage?(chrome.runtime.openOptionsPage(),window.close()):window.open(chrome.runtime.getURL("/src/options.html"))}function T(e,t){$('<div class="rr-error">'+e+"</div>").appendTo(t).delay(2400).fadeTo(400,0,function(){$(this).remove()})}function I(e){console.log(JSON.stringify(e,null,"\t"))}var C=function(e){var t=[[60,"second","seconds"],[60,"minute","minutes"],[24,"hour","hours"],[7,"day","days"],[365/12/7,"week","weeks"],[12,"month","months"],[10,"year","years"],[10,"decade","decades"],[10,"century","centuries"],[10,"millenium","millenia"]];if(e<60)return e+" seconds";for(var r=e,n=0;n<t.length;n++){var o=t[n][0],s=t[n][1],i=t[n][2];if(r<o){var a=r-Math.floor(r),c=Math.round(a*t[n-1][0]);if(t[n-1][0]===c&&(r+=1,c=0),(Math.floor(r)>1||0==Math.floor(r))&&(s=i),n>1&&c>0){var u=t[n-1][1];c>1&&(u=t[n-1][2]),s+=", "+String(c)+" "+u}return String(Math.floor(r))+" "+s}r/=o}},P=function(e){var t=Math.floor((new Date).getTime()/1e3)-e;return C(t)+" ago"},D=function(e){var t=e.notificationId,r=e.title,n=e.message;location.protocol.match(/^http/)?chrome.runtime.sendMessage({action:"create-notification",options:{notificationId:t,title:r,message:n}}):registration.showNotification(r,{body:n,data:t,icon:"/icons/128.png",message:n})},M=function(){location.protocol.match(/^http/)?chrome.runtime.sendMessage({action:"update-badge"}):Object(n.getSubscribedUsers_withUnseenIDs)(function(e){var t=0;Object.values(e).forEach(function(e){t+=e.length});var r=t.toString();0==t&&(r=""),chrome.action.setBadgeBackgroundColor({color:"red"}),chrome.action.setBadgeText({text:r})})}},3:function(e,t,r){var n,o,s;o=[e],void 0===(s="function"==typeof(n=function(e){"use strict";if("undefined"==typeof browser||Object.getPrototypeOf(browser)!==Object.prototype){const t="The message port closed before a response was received.",r="Returning a Promise is the preferred way to send a reply from an onMessage/onMessageExternal listener, as the sendResponse will be removed from the specs (See https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/runtime/onMessage)",n=e=>{const n={alarms:{clear:{minArgs:0,maxArgs:1},clearAll:{minArgs:0,maxArgs:0},get:{minArgs:0,maxArgs:1},getAll:{minArgs:0,maxArgs:0}},bookmarks:{create:{minArgs:1,maxArgs:1},get:{minArgs:1,maxArgs:1},getChildren:{minArgs:1,maxArgs:1},getRecent:{minArgs:1,maxArgs:1},getSubTree:{minArgs:1,maxArgs:1},getTree:{minArgs:0,maxArgs:0},move:{minArgs:2,maxArgs:2},remove:{minArgs:1,maxArgs:1},removeTree:{minArgs:1,maxArgs:1},search:{minArgs:1,maxArgs:1},update:{minArgs:2,maxArgs:2}},browserAction:{disable:{minArgs:0,maxArgs:1,fallbackToNoCallback:!0},enable:{minArgs:0,maxArgs:1,fallbackToNoCallback:!0},getBadgeBackgroundColor:{minArgs:1,maxArgs:1},getBadgeText:{minArgs:1,maxArgs:1},getPopup:{minArgs:1,maxArgs:1},getTitle:{minArgs:1,maxArgs:1},openPopup:{minArgs:0,maxArgs:0},setBadgeBackgroundColor:{minArgs:1,maxArgs:1,fallbackToNoCallback:!0},setBadgeText:{minArgs:1,maxArgs:1,fallbackToNoCallback:!0},setIcon:{minArgs:1,maxArgs:1},setPopup:{minArgs:1,maxArgs:1,fallbackToNoCallback:!0},setTitle:{minArgs:1,maxArgs:1,fallbackToNoCallback:!0}},browsingData:{remove:{minArgs:2,maxArgs:2},removeCache:{minArgs:1,maxArgs:1},removeCookies:{minArgs:1,maxArgs:1},removeDownloads:{minArgs:1,maxArgs:1},removeFormData:{minArgs:1,maxArgs:1},removeHistory:{minArgs:1,maxArgs:1},removeLocalStorage:{minArgs:1,maxArgs:1},removePasswords:{minArgs:1,maxArgs:1},removePluginData:{minArgs:1,maxArgs:1},settings:{minArgs:0,maxArgs:0}},commands:{getAll:{minArgs:0,maxArgs:0}},contextMenus:{remove:{minArgs:1,maxArgs:1},removeAll:{minArgs:0,maxArgs:0},update:{minArgs:2,maxArgs:2}},cookies:{get:{minArgs:1,maxArgs:1},getAll:{minArgs:1,maxArgs:1},getAllCookieStores:{minArgs:0,maxArgs:0},remove:{minArgs:1,maxArgs:1},set:{minArgs:1,maxArgs:1}},devtools:{inspectedWindow:{eval:{minArgs:1,maxArgs:2,singleCallbackArg:!1}},panels:{create:{minArgs:3,maxArgs:3,singleCallbackArg:!0}}},downloads:{cancel:{minArgs:1,maxArgs:1},download:{minArgs:1,maxArgs:1},erase:{minArgs:1,maxArgs:1},getFileIcon:{minArgs:1,maxArgs:2},open:{minArgs:1,maxArgs:1,fallbackToNoCallback:!0},pause:{minArgs:1,maxArgs:1},removeFile:{minArgs:1,maxArgs:1},resume:{minArgs:1,maxArgs:1},search:{minArgs:1,maxArgs:1},show:{minArgs:1,maxArgs:1,fallbackToNoCallback:!0}},extension:{isAllowedFileSchemeAccess:{minArgs:0,maxArgs:0},isAllowedIncognitoAccess:{minArgs:0,maxArgs:0}},history:{addUrl:{minArgs:1,maxArgs:1},deleteAll:{minArgs:0,maxArgs:0},deleteRange:{minArgs:1,maxArgs:1},deleteUrl:{minArgs:1,maxArgs:1},getVisits:{minArgs:1,maxArgs:1},search:{minArgs:1,maxArgs:1}},i18n:{detectLanguage:{minArgs:1,maxArgs:1},getAcceptLanguages:{minArgs:0,maxArgs:0}},identity:{launchWebAuthFlow:{minArgs:1,maxArgs:1}},idle:{queryState:{minArgs:1,maxArgs:1}},management:{get:{minArgs:1,maxArgs:1},getAll:{minArgs:0,maxArgs:0},getSelf:{minArgs:0,maxArgs:0},setEnabled:{minArgs:2,maxArgs:2},uninstallSelf:{minArgs:0,maxArgs:1}},notifications:{clear:{minArgs:1,maxArgs:1},create:{minArgs:1,maxArgs:2},getAll:{minArgs:0,maxArgs:0},getPermissionLevel:{minArgs:0,maxArgs:0},update:{minArgs:2,maxArgs:2}},pageAction:{getPopup:{minArgs:1,maxArgs:1},getTitle:{minArgs:1,maxArgs:1},hide:{minArgs:1,maxArgs:1,fallbackToNoCallback:!0},setIcon:{minArgs:1,maxArgs:1},setPopup:{minArgs:1,maxArgs:1,fallbackToNoCallback:!0},setTitle:{minArgs:1,maxArgs:1,fallbackToNoCallback:!0},show:{minArgs:1,maxArgs:1,fallbackToNoCallback:!0}},permissions:{contains:{minArgs:1,maxArgs:1},getAll:{minArgs:0,maxArgs:0},remove:{minArgs:1,maxArgs:1},request:{minArgs:1,maxArgs:1}},runtime:{getBackgroundPage:{minArgs:0,maxArgs:0},getPlatformInfo:{minArgs:0,maxArgs:0},openOptionsPage:{minArgs:0,maxArgs:0},requestUpdateCheck:{minArgs:0,maxArgs:0},sendMessage:{minArgs:1,maxArgs:3},sendNativeMessage:{minArgs:2,maxArgs:2},setUninstallURL:{minArgs:1,maxArgs:1}},sessions:{getDevices:{minArgs:0,maxArgs:1},getRecentlyClosed:{minArgs:0,maxArgs:1},restore:{minArgs:0,maxArgs:1}},storage:{local:{clear:{minArgs:0,maxArgs:0},get:{minArgs:0,maxArgs:1},getBytesInUse:{minArgs:0,maxArgs:1},remove:{minArgs:1,maxArgs:1},set:{minArgs:1,maxArgs:1}},managed:{get:{minArgs:0,maxArgs:1},getBytesInUse:{minArgs:0,maxArgs:1}},sync:{clear:{minArgs:0,maxArgs:0},get:{minArgs:0,maxArgs:1},getBytesInUse:{minArgs:0,maxArgs:1},remove:{minArgs:1,maxArgs:1},set:{minArgs:1,maxArgs:1}}},tabs:{captureVisibleTab:{minArgs:0,maxArgs:2},create:{minArgs:1,maxArgs:1},detectLanguage:{minArgs:0,maxArgs:1},discard:{minArgs:0,maxArgs:1},duplicate:{minArgs:1,maxArgs:1},executeScript:{minArgs:1,maxArgs:2},get:{minArgs:1,maxArgs:1},getCurrent:{minArgs:0,maxArgs:0},getZoom:{minArgs:0,maxArgs:1},getZoomSettings:{minArgs:0,maxArgs:1},highlight:{minArgs:1,maxArgs:1},insertCSS:{minArgs:1,maxArgs:2},move:{minArgs:2,maxArgs:2},query:{minArgs:1,maxArgs:1},reload:{minArgs:0,maxArgs:2},remove:{minArgs:1,maxArgs:1},removeCSS:{minArgs:1,maxArgs:2},sendMessage:{minArgs:2,maxArgs:3},setZoom:{minArgs:1,maxArgs:2},setZoomSettings:{minArgs:1,maxArgs:2},update:{minArgs:1,maxArgs:2}},topSites:{get:{minArgs:0,maxArgs:0}},webNavigation:{getAllFrames:{minArgs:1,maxArgs:1},getFrame:{minArgs:1,maxArgs:1}},webRequest:{handlerBehaviorChanged:{minArgs:0,maxArgs:0}},windows:{create:{minArgs:0,maxArgs:1},get:{minArgs:1,maxArgs:2},getAll:{minArgs:0,maxArgs:1},getCurrent:{minArgs:0,maxArgs:1},getLastFocused:{minArgs:0,maxArgs:1},remove:{minArgs:1,maxArgs:1},update:{minArgs:2,maxArgs:2}}};if(0===Object.keys(n).length)throw new Error("api-metadata.json has not been included in browser-polyfill");const o=(t,r)=>(...n)=>{e.runtime.lastError?t.reject(e.runtime.lastError):r.singleCallbackArg||n.length<=1&&!1!==r.singleCallbackArg?t.resolve(n[0]):t.resolve(n)},s=e=>1==e?"argument":"arguments",i=(e,t,r)=>new Proxy(t,{apply:(t,n,o)=>r.call(n,e,...o)});let a=Function.call.bind(Object.prototype.hasOwnProperty);const c=(e,t={},r={})=>{let n=Object.create(null),u={has:(t,r)=>r in e||r in n,get(u,g,m){if(g in n)return n[g];if(!(g in e))return;let l=e[g];if("function"==typeof l)if("function"==typeof t[g])l=i(e,e[g],t[g]);else if(a(r,g)){let t=((e,t)=>(function(r,...n){if(n.length<t.minArgs)throw new Error(`Expected at least ${t.minArgs} ${s(t.minArgs)} for ${e}(), got ${n.length}`);if(n.length>t.maxArgs)throw new Error(`Expected at most ${t.maxArgs} ${s(t.maxArgs)} for ${e}(), got ${n.length}`);return new Promise((s,i)=>{if(t.fallbackToNoCallback)try{r[e](...n,o({resolve:s,reject:i},t))}catch(o){console.warn(`${e} API method doesn't seem to support the callback parameter, `+"falling back to call it without a callback: ",o),r[e](...n),t.fallbackToNoCallback=!1,t.noCallback=!0,s()}else t.noCallback?(r[e](...n),s()):r[e](...n,o({resolve:s,reject:i},t))})}))(g,r[g]);l=i(e,e[g],t)}else l=l.bind(e);else{if("object"!=typeof l||null===l||!a(t,g)&&!a(r,g))return Object.defineProperty(n,g,{configurable:!0,enumerable:!0,get:()=>e[g],set(t){e[g]=t}}),l;l=c(l,t[g],r[g])}return n[g]=l,l},set:(t,r,o,s)=>(r in n?n[r]=o:e[r]=o,!0),defineProperty:(e,t,r)=>Reflect.defineProperty(n,t,r),deleteProperty:(e,t)=>Reflect.deleteProperty(n,t)},g=Object.create(e);return new Proxy(g,u)},u=e=>({addListener(t,r,...n){t.addListener(e.get(r),...n)},hasListener:(t,r)=>t.hasListener(e.get(r)),removeListener(t,r){t.removeListener(e.get(r))}});let g=!1;const m=new class extends WeakMap{constructor(e,t){super(t),this.createItem=e}get(e){return this.has(e)||this.set(e,this.createItem(e)),super.get(e)}}(e=>"function"!=typeof e?e:function(t,n,o){let s,i,a=!1,c=new Promise(e=>{s=function(t){g||(console.warn(r,(new Error).stack),g=!0),a=!0,e(t)}});try{i=e(t,n,s)}catch(e){i=Promise.reject(e)}const u=!0!==i&&(e=>e&&"object"==typeof e&&"function"==typeof e.then)(i);if(!0!==i&&!u&&!a)return!1;const m=e=>{e.then(e=>{o(e)},e=>{let t;t=e&&(e instanceof Error||"string"==typeof e.message)?e.message:"An unexpected error occurred",o({__mozWebExtensionPolyfillReject__:!0,message:t})}).catch(e=>{console.error("Failed to send onMessage rejected reply",e)})};return m(u?i:c),!0}),l=(r,n,o,...i)=>{if(i.length<n.minArgs)throw new Error(`Expected at least ${n.minArgs} ${s(n.minArgs)} for ${r}(), got ${i.length}`);if(i.length>n.maxArgs)throw new Error(`Expected at most ${n.maxArgs} ${s(n.maxArgs)} for ${r}(), got ${i.length}`);return new Promise((r,n)=>{const s=(({reject:r,resolve:n},o)=>{e.runtime.lastError?e.runtime.lastError.message===t?n():r(e.runtime.lastError):o&&o.__mozWebExtensionPolyfillReject__?r(new Error(o.message)):n(o)}).bind(null,{resolve:r,reject:n});i.push(s),o.sendMessage(...i)})},d={runtime:{onMessage:u(m),onMessageExternal:u(m),sendMessage:l.bind(null,"sendMessage",{minArgs:1,maxArgs:3})},tabs:{sendMessage:l.bind(null,"sendMessage",{minArgs:2,maxArgs:3})}},f={clear:{minArgs:1,maxArgs:1},get:{minArgs:1,maxArgs:1},set:{minArgs:1,maxArgs:1}};return n.privacy={network:{networkPredictionEnabled:f,webRTCIPHandlingPolicy:f},services:{passwordSavingEnabled:f},websites:{hyperlinkAuditingEnabled:f,referrersEnabled:f}},c(e,d,n)};if("object"!=typeof chrome||!chrome||!chrome.runtime||!chrome.runtime.id)throw new Error("This script should only be loaded in a browser extension.");e.exports=n(chrome)}else e.exports=browser})?n.apply(t,o):n)||(e.exports=s)},31:function(e,t,r){"use strict";r.r(t),r.d(t,"lookupItemsByID",function(){return m}),r.d(t,"lookupItemsByUser",function(){return h}),r.d(t,"handleFetchErrors",function(){return b}),r.d(t,"getRedditData",function(){return p}),r.d(t,"getRedditToken",function(){return v}),r.d(t,"getAuth",function(){return x}),r.d(t,"getLocalAuth",function(){return y}),r.d(t,"getCookie",function(){return k}),r.d(t,"getLocalOrAppAuth",function(){return O}),r.d(t,"getLoggedinUser",function(){return w});var n=r(1),o=r(3),s=r.n(o);function i(e,t,r,n,o,s,i){try{var a=e[s](i),c=a.value}catch(e){return void r(e)}a.done?t(c):Promise.resolve(c).then(n,o)}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter(function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable})),r.push.apply(r,n)}return r}function c(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(r,!0).forEach(function(t){u(e,t,r[t])}):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(r).forEach(function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))})}return e}function u(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function g(e){return function(e){if(Array.isArray(e)){for(var t=0,r=new Array(e.length);t<e.length;t++)r[t]=e[t];return r}}(e)||function(e){if(Symbol.iterator in Object(e)||"[object Arguments]"===Object.prototype.toString.call(e))return Array.from(e)}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}var m=function(e,t){var r={id:e,raw_json:1},n="?"+Object.keys(r).map(function(e){return"".concat(e,"=").concat(r[e])}).join("&");return A.apply(void 0,g(_("api/info",n,t)))},l={name:"reddit_session",url:"https://reddit.com"},d=["name","value","domain","path","secure","httpOnly","storeId"],f=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"https://reddit.com";if(!e)return e;var r=Object.keys(e).filter(function(e){return d.includes(e)}).reduce(function(t,r){return c({},t,u({},r,e[r]))},{});return r.url=t,r},A=function(){var e,t=(e=regeneratorRuntime.mark(function e(t,r){var n,o;return regeneratorRuntime.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:return e.t0=f,e.next=3,s.a.cookies.get(l);case 3:if(e.t1=e.sent,n=(0,e.t0)(e.t1),s.a.cookies.set({domain:"reddit.com",url:"https://reddit.com",name:"_options",value:"{%22pref_quarantine_optin%22:true}"}),!n){e.next=9;break}return e.next=9,s.a.cookies.remove(l);case 9:if(o=fetch(t,r).then(b).then(p).catch(console.log),!n){e.next=13;break}return e.next=13,s.a.cookies.set(n);case 13:return e.abrupt("return",o);case 14:case"end":return e.stop()}},e)}),function(){var t=this,r=arguments;return new Promise(function(n,o){var s=e.apply(t,r);function a(e){i(s,n,o,a,c,"next",e)}function c(e){i(s,n,o,a,c,"throw",e)}a(void 0)})});return function(e,r){return t.apply(this,arguments)}}(),h=function(e,t,r,n,o){var s={limit:100,sort:r,raw_json:1};t&&(s.after=t),n&&(s.t=n);var i="user/".concat(e,"/overview.json"),a="?"+Object.keys(s).map(function(e){return"".concat(e,"=").concat(s[e])}).join("&");return A.apply(void 0,g(_(i,a,o)))},b=function(e){if(!e.ok)throw Error(e.statusText);return e.json()},p=function(e){if(!e||!e.data||!e.data.children)throw Error("reddit data is not defined");return e.data.children},v=function(e){if(!e||!e.access_token)throw Error("access token is not defined");return e.access_token},x=function(){return Object(n.getOptions)(function(e,t,r){var n="SEw1uvRd6kxFEw";if(r.custom_clientid&&"testing"===(n=r.custom_clientid))return"none";var o={headers:{Authorization:"Basic ".concat(btoa("".concat(n,":"))),"Content-Type":"application/x-www-form-urlencoded; charset=utf-8"},method:"POST",body:"grant_type=".concat(encodeURIComponent("https://oauth.reddit.com/grants/installed_client"),"&device_id=DO_NOT_TRACK_THIS_DEVICE")};return fetch("https://www.reddit.com/api/v1/access_token",o).then(b).then(v).then(function(e){return{headers:{Authorization:"bearer ".concat(e)}}}).catch(console.log)})},y=function(){return fetch("https://mod.reddit.com/mail/all").then(function(e){k({url:"https://mod.reddit.com",name:"token"}).then(function(e){if(e){var t=new RegExp("[^A-Za-z0-9+/].*?$"),r=e.value.replace(t,""),n=atob(r),o=JSON.parse(n);return"accessToken"in o&&o.accessToken?{headers:{Authorization:"bearer ".concat(o.accessToken)}}:null}return null})})},k=function(e){var t=e.url,r=e.name;return location.protocol.match(/^http/)?s.a.runtime.sendMessage({action:"get-cookie",options:{url:t,name:r}}).then(function(e){return e.cookie}):s.a.cookies.get({url:t,name:r})},_=function(e,t,r){if(r&&"none"!==r)return["https://oauth.reddit.com/"+e+t,r];var n="https://www.reddit.com/"+e;return"api/info"===e&&(n+=".json"),[n+=t]},O=function(){return y().then(function(e){return e||x()}).catch(console.log)},w=function(){return fetch("https://www.reddit.com/api/me.json").then(b).then(E).catch(console.log)},E=function(e){if(!e||!e.data||!e.data.name)throw Error("reddit username is not defined");return e.data.name}},315:function(e,t,r){"use strict";r.r(t),r.d(t,"revdditModifications",function(){return s});var n=r(1),o=r(64),s=(r(3),function(e,t,r,o){var s,u,g,m,l;(r||o)&&(s="numItemsLoaded",u=document.querySelector(".main"),g="data-numitemsloaded",m=1,l=function(){!function(e,t,r){var o=c(".comment.removed, .post.removed, .comment.deleted, .post.deleted"),s=c(".comment:not(.removed), .post:not(.removed)"),i=c(".comment.locked, .post.locked"),a=c(".comment:not(.locked)");Object(n.markIDsAsSeenIfSubscribed)(e,t,r,o,s,i,a,function(e){chrome.runtime.sendMessage({action:"update-badge"})})}(e,t,r)},new MutationObserver(function(e){var t=document.getElementById(s);t&&t.getAttribute(g)>=m&&(this.disconnect(),l())}).observe(u||document,{childList:!0,subtree:!0}));$(document).arrive(".comment-body-and-links",function(t){i([t],e.other_subscriptions)}),i($(".comment-body-and-links"),e.other_subscriptions),$(document).arrive(".post:not(.deleted)",function(t){a([t],e.other_subscriptions)}),setTimeout(function(){a($(".post:not(.deleted)"),e.other_subscriptions)},2e3)}),i=function(e,t){$(e).each(function(e,r){var n=r.parentNode;if(!n.classList.contains("deleted")){var s=n.id,i=n.querySelector(".comment-links"),a="",c=n.querySelector(".comment-body");c&&s.match(/^t1_/)&&(a=c.textContent);var u=Object(o.setTextAndFunction_subscribe)(s,$('<a href="">')[0],a);s in t&&(u=Object(o.setTextAndFunction_unsubscribe)(s,$('<a href="">')[0],a)),$(i).append(u)}})},a=function(e,t){$(e).each(function(e,r){var n=r.id,s=r.querySelector(".post-links"),i=Object(o.setTextAndFunction_subscribe)(n,$('<a href="">')[0]);n in t&&(i=Object(o.setTextAndFunction_unsubscribe)(n,$('<a href="">')[0])),$(s).append(i)})};function c(e){var t={};return $(e).each(function(){var e=this.getAttribute("id");t[e]=this.getAttribute("data-created_utc")}),t}},64:function(e,t,r){"use strict";r.r(t),r.d(t,"setTextAndFunction_subscribe",function(){return c}),r.d(t,"setTextAndFunction_unsubscribe",function(){return u});var n=r(1),o=r(2),s=r(65),i=(r(3),"unsubscribe-rev"),a="subscribe-rev";location.hostname.match(/reveddit\.com$/)&&(i="unsubscribe",a="subscribe");var c=function(e,t,r){return $(t).text(a).off("click").click(function(t){return g(e,t.target,r)})},u=function(e,t,r){return $(t).text(i).off("click").click(function(t){return m(e,t.target,r)})},g=function(e,t){var r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"";return Object(n.subscribeId)(e,function(){u(e,t,r),Object(s.b)(e,window.location.href,function(){r&&Object(n.getLocalStorageItems)("other",!1).then(function(t){var s=t[e];if(s){var i=new o.LocalStorageItem({object:s});i.setText(r),t[e]=i,Object(n.saveLocalStorageItems)("other",!1,t)}})})}),!1},m=function(e,t,r){return Object(n.unsubscribeId)(e,function(){c(e,t,r)}),!1}},65:function(e,t,r){"use strict";r.d(t,"b",function(){return g}),r.d(t,"a",function(){return m});var n=r(31),o=r(1),s=r(2);r(3);function i(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}var a=0,c=1,u=2,g=function(e,t){var r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:function(){},o=a;t.match(/^https:\/\/www.reveddit.com/)&&(o=c),chrome.storage.sync.get(null,function(t){Object(n.getAuth)().then(function(n){l([e],"other",!1,n,t,o,{},r)})})},m=function(){chrome.storage.sync.get(null,function(e){var t=Object.keys(e.user_subscriptions),r=Object.keys(e.other_subscriptions);(t.length||r.length)&&Object(n.getAuth)().then(function(r){!function(e,t){var r=Object.keys(t.other_subscriptions);r.length&&l(r,"other",!1,e,t,u)}(r,e),function e(t,r,o){if(t.length){var s=t[0];Object(n.lookupItemsByUser)(s,"","new","",r).then(function(n){if(n){var i=[],a={};n.forEach(function(e){i.push(e.data.name),a[e.data.name]=e.data}),l(i,s,!0,r,o,u,a,function(){e(t.slice(1),r,o)})}})}}(t,r,e)})})};function l(e,t,r,a,c,u){var g=arguments.length>6&&void 0!==arguments[6]?arguments[6]:{},m=arguments.length>7&&void 0!==arguments[7]?arguments[7]:function(){};Object(n.lookupItemsByID)(e,a).then(function(e){if(e){var n=c.options.removal_status,a=c.options.lock_status,l=Object(o.getObjectNamesForThing)(t,r),f=c[l.removed]||{},A=c[l.approved]||{},h=c[l.locked]||{},b=c[l.unlocked]||{},p=c[l.changes]||[];r||(g={});var v=[],x=[],y=[],k=[];e.forEach(function(e){var t=e.data;r||(g[t.name]=t),Object(s.isRemovedItem)(t)?v.push(t.name):x.push(t.name),t.locked?y.push(t.name):k.push(t.name)});var _={},O=[],w=0;Object(o.getLocalStorageItems)(t,r).then(function(e){var c;n.track&&(w+=d(v,o.REMOVED,"mod removed",f,x,o.APPROVED,"approved",A,p,g,n.notify,_,O,r,u,e)),a.track&&(w+=d(y,o.LOCKED,"locked",h,k,o.UNLOCKED,"unlocked",b,p,g,a.notify,_,O,r,u,e)),w&&O.length&&Object(s.createNotification)({notificationId:t,title:t,message:"".concat(w," new [").concat(O.join(", "),"] actions, click to view")}),chrome.storage.sync.set((i(c={},l.removed,Object(s.trimDict_by_numberValuedAttribute)(f,o.MAX_SYNC_STORAGE_ITEMS_PER_OBJECT,"c")),i(c,l.approved,Object(s.trimDict_by_numberValuedAttribute)(A,o.MAX_SYNC_STORAGE_ITEMS_PER_OBJECT,"c")),i(c,l.locked,Object(s.trimDict_by_numberValuedAttribute)(h,o.MAX_SYNC_STORAGE_ITEMS_PER_OBJECT,"c")),i(c,l.unlocked,Object(s.trimDict_by_numberValuedAttribute)(b,o.MAX_SYNC_STORAGE_ITEMS_PER_OBJECT,"c")),i(c,l.changes,p.slice(-o.MAX_SYNC_STORAGE_CHANGES)),c),function(){Object(s.updateBadgeUnseenCount)(),Object(o.addLocalStorageItems)(_,t,r,m)})})}})}function d(e,t,r,n,i,u,g,m,l,d,f,A,h,b,p,v){var x=[],y=[],k=[],_=Math.floor(new Date/1e3);e.forEach(function(e){var r=d[e];if(b||v[e]||(A[e]=new s.LocalStorageItem({item:r,observed_utc:_})),!(e in n)){var i=!0;if((p===a&&t!==o.REMOVED||p===c)&&(i=!1),n[e]=new s.ItemForStorage(r.created_utc,i),delete m[e],i){var u=t;Object(s.isUserDeletedItem)(r)?(u=o.DELETED,k.push(e)):x.push(e),l.push(new s.ChangeForStorage({id:e,observed_utc:_,change_type:u}))}b&&(A[e]=new s.LocalStorageItem({item:r,observed_utc:_}))}}),i.forEach(function(e){var t=d[e];b||v[e]||(A[e]=new s.LocalStorageItem({item:t,observed_utc:_})),e in n?(m[e]=new s.ItemForStorage(t.created_utc,!0),delete n[e],l.push(new s.ChangeForStorage({id:e,observed_utc:_,change_type:u})),y.push(e),A[e]=new s.LocalStorageItem({item:t,observed_utc:_})):m[e]=new s.ItemForStorage(t.created_utc,!1)});var O=x.length+y.length+k.length;return f&&O&&(x.length&&h.push(r),k.length&&h.push("user deleted"),y.length&&h.push(g)),O}}});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,