!function(e){var t={};function n(r){if(t[r])return t[r].exports;var o=t[r]={i:r,l:!1,exports:{}};return e[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)n.d(r,o,function(t){return e[t]}.bind(null,o));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=313)}({1:function(e,t,n){"use strict";n.r(t),n.d(t,"INTERVAL_DEFAULT",function(){return u}),n.d(t,"MAX_SYNC_STORAGE_ITEMS_PER_OBJECT",function(){return a}),n.d(t,"MAX_SYNC_STORAGE_CHANGES",function(){return s}),n.d(t,"MAX_OTHER_SUBSCRIPTIONS",function(){return d}),n.d(t,"REMOVED",function(){return f}),n.d(t,"APPROVED",function(){return l}),n.d(t,"LOCKED",function(){return h}),n.d(t,"UNLOCKED",function(){return m}),n.d(t,"EDITED",function(){return b}),n.d(t,"DELETED",function(){return v}),n.d(t,"getObjectNamesForThing",function(){return _}),n.d(t,"markEverythingAsSeen",function(){return w}),n.d(t,"markThingAsSeen",function(){return j}),n.d(t,"setStorageUpdateBadge",function(){return k}),n.d(t,"markIDsAsSeenIfSubscribed",function(){return S}),n.d(t,"subscribeId",function(){return T}),n.d(t,"unsubscribeId",function(){return I}),n.d(t,"getSubscribedIds",function(){return A}),n.d(t,"subscribeUser",function(){return D}),n.d(t,"unsubscribeUser",function(){return P}),n.d(t,"initStorage",function(){return C}),n.d(t,"getSubscribedUsers_withSeenAndUnseenIDs",function(){return x}),n.d(t,"getSubscribedUsers_withUnseenIDs",function(){return R}),n.d(t,"getUnseenIDs_thing",function(){return M}),n.d(t,"getIDs_thing",function(){return L}),n.d(t,"getLocalStorageItems",function(){return F}),n.d(t,"saveLocalStorageItems",function(){return U}),n.d(t,"addLocalStorageItems",function(){return $}),n.d(t,"getItemFromLocalStorage",function(){return N}),n.d(t,"getAllChanges",function(){return B}),n.d(t,"getOptions",function(){return V}),n.d(t,"saveOptions",function(){return G});var r=n(2);function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter(function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable})),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(n,!0).forEach(function(t){c(e,t,n[t])}):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(n).forEach(function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))})}return e}function c(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var u=1,a=130,s=100,d=100,f=1,l=2,h=3,m=4,b=5,v=6,g={changes:[],removed:{},approved:{},locked:{},unlocked:{}},p=function(e,t,n){return n?e+"_u_"+t:e+"_"+t},y=function(e,t){var n=!(arguments.length>2&&void 0!==arguments[2])||arguments[2];Object.keys(g).forEach(function(r){e[p(r,t,n)]=g[r]})},_=function(e){var t=!(arguments.length>1&&void 0!==arguments[1])||arguments[1],n={};return Object.keys(g).forEach(function(r){n[r]=p(r,e,t)}),n},O=function(e){var t={};return y(t,e,!0),t},w=function(){return browser.storage.sync.get(null).then(function(e){return Object.keys(e.user_subscriptions).forEach(function(t){j(e,t,!0)}),j(e,"other",!1),k(e)})},j=function(e,t,n){var r=_(t,n);delete r.changes;var o=[];Object.values(r).forEach(function(e){o.push(e)}),o.forEach(function(t){Object.values(e[t]).forEach(function(e){e.u=!1})})},k=function(e){return browser.storage.sync.set(e).then(function(e){return browser.runtime.sendMessage({action:"update-badge"})})},E=function(e,t,n,o,i){var c=e[t[n]];Object.keys(o).forEach(function(e){e in c?c[e].u=!1:i&&(c[e]=new r.ItemForStorage(o[e],!1))})},S=function(e,t,n,r,o,i,c){var u=arguments.length>7&&void 0!==arguments[7]?arguments[7]:function(){},a=_(t,n);delete a.changes;var s=e.user_subscriptions[t];!s&&n||(E(e,a,"removed",r,n),E(e,a,"approved",o,n),E(e,a,"locked",i,n),E(e,a,"unlocked",c,n),chrome.storage.sync.set(e,u))},T=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:function(){},n="other_subscriptions";chrome.storage.sync.get(n,function(o){o[n][e]={t:Math.floor((new Date).getTime()/1e3)};var i=Object(r.trimDict_by_numberValuedAttribute)(o[n],d,"t");chrome.storage.sync.set(c({},n,i),t)})},I=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:function(){},n="other_subscriptions",r=_("other",!1);delete r.changes,chrome.storage.sync.get(Object.values(r).concat(n),function(o){delete o[n][e],Object.values(r).forEach(function(t){e in o[t]&&delete o[t][e]}),chrome.storage.sync.set(o,function(){chrome.runtime.sendMessage({action:"update-badge"},t)})})},A=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:function(){},t="other_subscriptions";chrome.storage.sync.get(t,function(n){e(Object.keys(n[t]))})},D=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:function(){},n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:function(){},r=O(e);chrome.storage.sync.get("user_subscriptions",function(o){var c=o.user_subscriptions;e in c?n("already subscribed to this user"):Object.keys(c).length<5?(c[e]=!0,chrome.storage.sync.set(i({user_subscriptions:c},r),t)):n("maximum number of subscriptions reached")})},P=function(e,t){var n=Object.keys(O(e));chrome.storage.sync.get("user_subscriptions",function(r){var o=r.user_subscriptions;delete o[e],chrome.storage.sync.set({user_subscriptions:o},function(){chrome.storage.sync.remove(n,function(){var n=p("items",e,!0);chrome.runtime.sendMessage({action:"update-badge"}),chrome.storage.local.remove(n,t)})})})},C=function(e){chrome.storage.sync.get(null,function(t){var n;0===Object.keys(t).length?chrome.storage.sync.set((y(n={user_subscriptions:{},other_subscriptions:{},options:{interval:u,custom_clientid:"",removal_status:{track:!0,notify:!0},lock_status:{track:!0,notify:!0}}},"other",!1),n),e):e()})},x=function(e){chrome.storage.sync.get(null,function(t){var n=Object.keys(t.user_subscriptions),r={};n.forEach(function(e){r[e]=L(e,!0,t)}),r.other=L("other",!1,t),e(r,t)})},R=function(e){chrome.storage.sync.get(null,function(t){var n=Object.keys(t.user_subscriptions),r={};n.forEach(function(e){r[e]=M(e,!0,t)}),r.other=M("other",!1,t),e(r)})},M=function(e,t,n){return L(e,t,n).unseen},L=function(e,t,n){var r=n.options.removal_status.track,o=n.options.lock_status.track,i={},c={},u=[],a=_(e,t);return r&&u.push(a.removed,a.approved),o&&u.push(a.locked,a.unlocked),u.forEach(function(e){Object.keys(n[e]).forEach(function(t){n[e][t].u?i[t]=!0:c[t]=!0})}),{unseen:Object.keys(i),seen:Object.keys(c)}},F=function(e,t){var n=p("items",e,t);return browser.storage.local.get(c({},n,{})).then(function(e){return e[n]})},U=function(e,t,n){var r=p("items",e,t);return browser.storage.local.set(c({},r,n))},$=function(e,t,n){var r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:function(){},o=p("items",t,n);chrome.storage.local.get(c({},o,{}),function(t){var n=t[o];Object.keys(e).forEach(function(t){n[t]=e[t]});var i=n;Object.keys(n).length>500&&(i=trimDictOfItems_by_utcAttribute(n,500,"o")),chrome.storage.local.set(c({},o,i),r)})},N=function(e,t,n,o){var i=p("items",e,t);return i in o&&n in o[i]?new r.LocalStorageItem({object:o[i][n]}):""},B=function(e){chrome.storage.sync.get("user_subscriptions",function(t){var n=[p("changes","other",!1)],r={changes_other:"other"};Object.keys(t.user_subscriptions).forEach(function(e){var t=p("changes",e,!0);n.push(t),r[t]=e}),chrome.storage.sync.get(n,function(t){var o={};n.forEach(function(e){e in t&&t[e].length&&(o[r[e]]=t[e])}),e(o)})})},V=function(e){return browser.storage.sync.get(["user_subscriptions","other_subscriptions","options"]).then(function(t){var n=Object.keys(t.user_subscriptions),r=Object.keys(t.other_subscriptions),o=t.options;return e(n,r,o)}).catch(console.log)},G=function(e,t,n,r,o,i,c){chrome.storage.sync.set({options:{interval:e,custom_clientid:t,removal_status:{track:n,notify:r},lock_status:{track:o,notify:i}}},c)}},2:function(e,t,n){"use strict";n.r(t),n.d(t,"ALARM_NAME",function(){return u}),n.d(t,"createTab",function(){return a}),n.d(t,"getFullIDsFromURL",function(){return s}),n.d(t,"getFullIDsFromPath",function(){return l}),n.d(t,"reformatRedditText",function(){return h}),n.d(t,"isRemovedItem",function(){return m}),n.d(t,"isComment",function(){return b}),n.d(t,"isRemovedComment",function(){return v}),n.d(t,"isUserDeletedComment",function(){return g}),n.d(t,"isUserDeletedPost",function(){return p}),n.d(t,"isUserDeletedItem",function(){return y}),n.d(t,"isRemovedPost",function(){return _}),n.d(t,"trimDict_by_numberValuedAttribute",function(){return O}),n.d(t,"sortDict_by_numberValuedAttribute",function(){return w}),n.d(t,"ItemForStorage",function(){return j}),n.d(t,"ChangeForStorage",function(){return k}),n.d(t,"LocalStorageItem",function(){return E}),n.d(t,"setAlarm",function(){return S}),n.d(t,"alphaLowerSort",function(){return T}),n.d(t,"goToOptions",function(){return I}),n.d(t,"showError",function(){return A}),n.d(t,"pprint",function(){return D}),n.d(t,"getPrettyTimeLength",function(){return P}),n.d(t,"getPrettyDate",function(){return C}),n.d(t,"createNotification",function(){return x}),n.d(t,"updateBadgeUnseenCount",function(){return R});var r=n(1);function o(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function i(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function c(e,t,n){return t&&i(e.prototype,t),n&&i(e,n),e}var u="notifyme",a=function(e){chrome.tabs.create({url:e},function(t){t?chrome.windows.update(t.windowId,{focused:!0}):chrome.windows.create({url:e},function(e){chrome.windows.update(e.id,{focused:!0})})})},s=function(e){var t=e.replace(/https:\/\/[^\/]*re(ve)?ddit.com/,"");return l(t)},d=/^\/(v|r|user)\/([^\/]+)\/comments\/([^\/]+)\/[^\/]*(?:\/([^\/?&#]+))?/,f=/^\/(?:user|y|u)\/([^\/?&#]+)\/?/,l=function(e){var t=void 0,n=void 0,r=void 0,o=void 0,i=e.match(d),c=e.match(f);i?("user"===i[1]?r=i[2]:o=i[2],i[3]&&(t="t3_"+i[3]),i[4]&&(n="t1_"+i[4])):c&&(r=c[1]);return[t,n,r,o]},h=function(e){return e.replace(/&amp;/g,"&").replace(/&gt;/g,">").replace(/&lt;/g,"<").replace(/\s+/g," ").substr(0,300)},m=function(e){return b(e.name)?v(e):_(e)},b=function(e){return"t1"===e.substr(0,2)},v=function(e){return("[removed]"===e.body.replace(/\\/g,"")||"[deleted]"===e.body.replace(/\\/g,""))&&"[deleted]"===e.author.replace(/\\/g,"")},g=function(e){return"[deleted]"===e.body.replace(/\\/g,"")&&"[deleted]"===e.author.replace(/\\/g,"")},p=function(e){return!e.is_robot_indexable&&"[deleted]"===e.author.replace(/\\/g,"")},y=function(e){return b(e.name)?g(e):p(e)},_=function(e){return!e.is_robot_indexable},O=function(e,t,n){var r=w(e,n).slice(0,t),o={};return r.forEach(function(e){o[e[0]]=e[1]}),o},w=function(e,t){var n=Object.keys(e).map(function(t){return[t,e[t]]});return n.sort(function(e,n){return n[1][t]-e[1][t]}),n},j=function(){function e(t,n){o(this,e),this.c=t,this.u=n}return c(e,[{key:"getCreatedUTC",value:function(){return this.c}},{key:"getUnseen",value:function(){return this.u}}]),e}(),k=function(){function e(t){var n=t.id,r=void 0===n?null:n,i=t.observed_utc,c=void 0===i?null:i,u=t.change_type,a=void 0===u?null:u,s=t.object,d=void 0===s?null:s;o(this,e),d?(this.i=d.i,this.o=d.o,this.g=d.g):(this.i=r,this.o=c,this.g=a)}return c(e,[{key:"getID",value:function(){return this.i}},{key:"getObservedUTC",value:function(){return this.o}},{key:"getChangeType",value:function(){switch(this.g){case r.REMOVED:return"mod removed";case r.DELETED:return"user deleted";case r.APPROVED:return"approved";case r.LOCKED:return"locked";case r.UNLOCKED:return"unlocked";case r.EDITED:return"edited"}}}]),e}(),E=function(){function e(t){var n=t.item,r=void 0===n?null:n,i=t.observed_utc,c=void 0===i?null:i,u=t.object,a=void 0===u?null:u;if(o(this,e),a)this.t=a.t,this.o=a.o,this.c=a.c;else{var s="";s=b(r.name)?h(r.body):r.title,this.t=s,this.o=c,this.c=r.created_utc}}return c(e,[{key:"setText",value:function(e){this.t=h(e)}},{key:"getText",value:function(){return this.t}},{key:"getObservedUTC",value:function(){return this.o}},{key:"getCreatedUTC",value:function(){return this.c}}]),e}();function S(e){chrome.alarms.clear(u),chrome.alarms.create(u,{delayInMinutes:1,periodInMinutes:e})}function T(e,t){var n=e.toLowerCase(),r=t.toLowerCase();return n<r?-1:n>r?1:0}function I(){chrome.runtime.openOptionsPage?(chrome.runtime.openOptionsPage(),window.close()):window.open(chrome.runtime.getURL("/src/options.html"))}function A(e,t){$('<div class="rr-error">'+e+"</div>").appendTo(t).delay(2400).fadeTo(400,0,function(){$(this).remove()})}function D(e){console.log(JSON.stringify(e,null,"\t"))}var P=function(e){var t=[[60,"second","seconds"],[60,"minute","minutes"],[24,"hour","hours"],[7,"day","days"],[365/12/7,"week","weeks"],[12,"month","months"],[10,"year","years"],[10,"decade","decades"],[10,"century","centuries"],[10,"millenium","millenia"]];if(e<60)return e+" seconds";for(var n=e,r=0;r<t.length;r++){var o=t[r][0],i=t[r][1],c=t[r][2];if(n<o){var u=n-Math.floor(n),a=Math.round(u*t[r-1][0]);if(t[r-1][0]===a&&(n+=1,a=0),(Math.floor(n)>1||0==Math.floor(n))&&(i=c),r>1&&a>0){var s=t[r-1][1];a>1&&(s=t[r-1][2]),i+=", "+String(a)+" "+s}return String(Math.floor(n))+" "+i}n/=o}},C=function(e){var t=Math.floor((new Date).getTime()/1e3)-e;return P(t)+" ago"},x=function(e){var t=e.notificationId,n=e.title,r=e.message;location.protocol.match(/^http/)?chrome.runtime.sendMessage({action:"create-notification",options:{notificationId:t,title:n,message:r}}):chrome.notifications.create(t,{type:"basic",iconUrl:"/icons/128.png",title:n,message:r})},R=function(){location.protocol.match(/^http/)?chrome.runtime.sendMessage({action:"update-badge"}):Object(r.getSubscribedUsers_withUnseenIDs)(function(e){var t=0;Object.values(e).forEach(function(e){t+=e.length});var n=t.toString();0==t&&(n=""),chrome.browserAction.setBadgeBackgroundColor({color:"red"}),chrome.browserAction.setBadgeText({text:n})})}},30:function(e,t,n){"use strict";n.r(t),n.d(t,"lookupItemsByID",function(){return s}),n.d(t,"lookupItemsByUser",function(){return m}),n.d(t,"handleFetchErrors",function(){return b}),n.d(t,"getRedditData",function(){return v}),n.d(t,"getRedditToken",function(){return g}),n.d(t,"getAuth",function(){return p}),n.d(t,"getLocalAuth",function(){return y}),n.d(t,"getCookie",function(){return _}),n.d(t,"getLocalOrAppAuth",function(){return w}),n.d(t,"getLoggedinUser",function(){return j});var r=n(1);function o(e,t,n,r,o,i,c){try{var u=e[i](c),a=u.value}catch(e){return void n(e)}u.done?t(a):Promise.resolve(a).then(r,o)}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter(function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable})),n.push.apply(n,r)}return n}function c(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(n,!0).forEach(function(t){u(e,t,n[t])}):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(n).forEach(function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))})}return e}function u(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e){return function(e){if(Array.isArray(e)){for(var t=0,n=new Array(e.length);t<e.length;t++)n[t]=e[t];return n}}(e)||function(e){if(Symbol.iterator in Object(e)||"[object Arguments]"===Object.prototype.toString.call(e))return Array.from(e)}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}var s=function(e,t){var n={id:e,raw_json:1},r="?"+Object.keys(n).map(function(e){return"".concat(e,"=").concat(n[e])}).join("&");return h.apply(void 0,a(O("api/info",r,t)))},d={name:"reddit_session",url:"https://reddit.com"},f=["name","value","domain","path","secure","httpOnly","storeId"],l=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"https://reddit.com";if(!e)return e;var n=Object.keys(e).filter(function(e){return f.includes(e)}).reduce(function(t,n){return c({},t,u({},n,e[n]))},{});return n.url=t,n},h=function(){var e,t=(e=regeneratorRuntime.mark(function e(t,n){var r,o;return regeneratorRuntime.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:return e.t0=l,e.next=3,browser.cookies.get(d);case 3:if(e.t1=e.sent,r=(0,e.t0)(e.t1),browser.cookies.set({domain:"reddit.com",url:"https://reddit.com",name:"_options",value:"{%22pref_quarantine_optin%22:true}"}),!r){e.next=9;break}return e.next=9,browser.cookies.remove(d);case 9:if(o=window.fetch(t,n).then(b).then(v).catch(console.log),!r){e.next=13;break}return e.next=13,browser.cookies.set(r);case 13:return e.abrupt("return",o);case 14:case"end":return e.stop()}},e)}),function(){var t=this,n=arguments;return new Promise(function(r,i){var c=e.apply(t,n);function u(e){o(c,r,i,u,a,"next",e)}function a(e){o(c,r,i,u,a,"throw",e)}u(void 0)})});return function(e,n){return t.apply(this,arguments)}}(),m=function(e,t,n,r,o){var i={limit:100,sort:n,raw_json:1};t&&(i.after=t),r&&(i.t=r);var c="user/".concat(e,"/overview.json"),u="?"+Object.keys(i).map(function(e){return"".concat(e,"=").concat(i[e])}).join("&");return h.apply(void 0,a(O(c,u,o)))},b=function(e){if(!e.ok)throw Error(e.statusText);return e.json()},v=function(e){if(!e||!e.data||!e.data.children)throw Error("reddit data is not defined");return e.data.children},g=function(e){if(!e||!e.access_token)throw Error("access token is not defined");return e.access_token},p=function(){return Object(r.getOptions)(function(e,t,n){var r="SEw1uvRd6kxFEw";if(n.custom_clientid&&"testing"===(r=n.custom_clientid))return"none";var o={headers:{Authorization:"Basic ".concat(window.btoa("".concat(r,":"))),"Content-Type":"application/x-www-form-urlencoded; charset=utf-8"},method:"POST",body:"grant_type=".concat(encodeURIComponent("https://oauth.reddit.com/grants/installed_client"),"&device_id=DO_NOT_TRACK_THIS_DEVICE")};return window.fetch("https://www.reddit.com/api/v1/access_token",o).then(b).then(g).then(function(e){return{headers:{Authorization:"bearer ".concat(e)}}}).catch(console.log)})},y=function(){return window.fetch("https://mod.reddit.com/mail/all").then(function(e){_({url:"https://mod.reddit.com",name:"token"}).then(function(e){if(e){var t=new RegExp("[^A-Za-z0-9+/].*?$"),n=e.value.replace(t,""),r=atob(n),o=JSON.parse(r);return"accessToken"in o&&o.accessToken?{headers:{Authorization:"bearer ".concat(o.accessToken)}}:null}return null})})},_=function(e){var t=e.url,n=e.name;return location.protocol.match(/^http/)?browser.runtime.sendMessage({action:"get-cookie",options:{url:t,name:n}}).then(function(e){return e.cookie}):browser.cookies.get({url:t,name:n})},O=function(e,t,n){if(n&&"none"!==n)return["https://oauth.reddit.com/"+e+t,n];var r="https://www.reddit.com/"+e;return"api/info"===e&&(r+=".json"),[r+=t]},w=function(){return y().then(function(e){return e||p()}).catch(console.log)},j=function(){return window.fetch("https://www.reddit.com/api/me.json").then(b).then(k).catch(console.log)},k=function(e){if(!e||!e.data||!e.data.name)throw Error("reddit username is not defined");return e.data.name}},313:function(e,t,n){"use strict";n.r(t),n.d(t,"redditModifications",function(){return a});n(30);var r=n(2),o=n(63);function i(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=[],r=!0,o=!1,i=void 0;try{for(var c,u=e[Symbol.iterator]();!(r=(c=u.next()).done)&&(n.push(c.value),!t||n.length!==t);r=!0);}catch(e){o=!0,i=e}finally{try{r||null==u.return||u.return()}finally{if(o)throw i}}return n}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}()}var c=/^t1_.+/,u=/^t3_.+/,a=function(e){var t=null!==document.querySelector("#SHORTCUT_FOCUSABLE_DIV");if(s(t),t){h($(".Comment"),e),$(document).arrive(".Comment",function(t){h([t],e)});b($(".Post"),e),$(document).arrive(".Post",function(t){b([t],e)});$(document).arrive('.Post div[data-test-id="post-content"]',function(e){f(e)})}else{var n=".thing.link, .thing.comment";v($(n),e),$(document).arrive(n,function(t){v([t],e)})}},s=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:".Post",n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},o=Object(r.getFullIDsFromPath)(window.location.pathname),c=i(o,4),u=c[0],a=c[1];c[2],c[3];e&&a&&0===Object.keys(n).length?browser.runtime.sendMessage({action:"get-reddit-items-by-id",ids:[u]}).then(function(r){r&&r.items&&r.items.length&&(n=r.items[0].data,d({isNewReddit:e,newRedditTarget:t,postData:n}))}):d({isNewReddit:e,newRedditTarget:t,postData:n})},d=function(e){var t=e.isNewReddit,n=e.newRedditTarget,o=void 0===n?".Post":n,c=e.postData,u=void 0===c?{}:c,a=i(Object(r.getFullIDsFromPath)(window.location.pathname),4),s=a[0],d=(a[1],a[2],a[3]),f=void 0,l=void 0;if(s&&($('meta[name="robots"][content="noindex,nofollow"]').length||"is_robot_indexable"in u&&!u.is_robot_indexable)){var h=u.author||$(".link .top-matter .author").first().text()||$('.link .top-matter .tagline span:contains("[deleted]")').text()||$('.Post span:contains("u/[deleted]")').first().text();"[deleted]"===h||"u/[deleted]"===h?(f="rev-user-deleted",l="This post was deleted by the person who posted it."):(f="rev-mod-removed",l="This post is unapproved. It is either waiting to be approved, or it was removed by someone or some robot.")}if(l){var m=" It is not currently visible in r/".concat(d," and will not appear in web search results."),b='<div class="rev-from"><a href="https://www.reveddit.com/about">re(ve)ddit</a> note</div>';if(t){"rev-user-deleted"!==f&&(l+=" More details may appear in a message above from reddit.");var v=$('<div class="rev-new-reddit-message-wrap '.concat(f,'">').concat(b,"</div>")),g=$('<div class="rev-new-reddit-message-content"></div>'),p=$('<div class="rev-new-reddit-message-content-description">'.concat(l).concat(m,"</div>"));g.append(p),v.append(g),$(o).first().after(v)}else{"rev-user-deleted"!==f&&(l+=' View the post <a href="https://new.reddit.com'.concat(window.location.pathname,'">on new reddit</a> for more details.')),$('<div class="reddit-infobar md-container-small '.concat(f,'">')).append(b).append('<div class="md"><p>'.concat(l).concat(m,"</p></div>")).prependTo('div.content[role="main"]')}}},f=function(e){var t=i(Object(r.getFullIDsFromPath)(window.location.pathname),4),n=t[0];t[1],t[2],t[3];browser.runtime.sendMessage({action:"get-reddit-items-by-id",ids:[n]}).then(function(t){if(t&&t.items&&t.items.length){var n=t.items[0].data;s(!0,e.parentNode,n)}})},l=function(e,t){var n=e.id;return n&&n.match(t)?n:(n=$(e).attr("class").split(/\s+/).filter(function(e){return e.match(t)})[0])&&n.match(t)?n:(n=e.parentNode.id)&&n.match(t)?n:n=$(e).closest("div[tabindex=-1]").attr("id")},h=function(e,t){$(e).each(function(e,n){var r=$(n).closest(".Comment")[0],i=l(r,c);if(i&&i.match(c)){var u=m(r,"save"),a=u.parent();u.length||(a=(u=m(r,"share")).parent(),u.length||(u=$("<button>...</button>"),a=r));var s=u.clone(),d="",f=r.querySelector(".RichTextJSON-root");f&&(d=f.textContent),i in t?Object(o.setTextAndFunction_unsubscribe)(i,s,d).appendTo(a):Object(o.setTextAndFunction_subscribe)(i,s,d).appendTo(a)}})},m=function(e,t){return $(e).find('button:equalsi("'.concat(t,'")')).first()},b=function(e,t){$(e).each(function(e,n){var r=l(n,u);if(r&&r.match(u)){var i=$(n).find('button :equalsi("save")').first().parent(),c=i.clone();c.find("i.icon").first().parent().remove();var a=i.parent().children("button").last();r in t?Object(o.setTextAndFunction_unsubscribe)(r,c).insertAfter(a):Object(o.setTextAndFunction_subscribe)(r,c).insertAfter(a)}})},v=function(e,t){$(e).each(function(e,n){var c=n.getAttribute("data-fullname");if(!c){var u=i(Object(r.getFullIDsFromPath)(n.getAttribute("data-permalink")||""),4),a=u[0],s=u[1];u[2],u[3];s?c=s:a&&(c=a)}if(c){var d=n.querySelector("ul.buttons");if(d){var f="",l=n.querySelector(".usertext-body");l&&c.match(/^t1_/)&&(f=l.textContent);var h=Object(o.setTextAndFunction_subscribe)(c,$('<a href="">')[0],f);c in t&&(h=Object(o.setTextAndFunction_unsubscribe)(c,$('<a href="">')[0],f)),$(d).append(h.wrap("<li>").parent())}}})}},63:function(e,t,n){"use strict";n.r(t),n.d(t,"setTextAndFunction_subscribe",function(){return a}),n.d(t,"setTextAndFunction_unsubscribe",function(){return s});var r=n(1),o=n(2),i=n(64),c="unsubscribe-rev",u="subscribe-rev";location.hostname.match(/reveddit\.com$/)&&(c="unsubscribe",u="subscribe");var a=function(e,t,n){return $(t).text(u).off("click").click(function(t){return d(e,t.target,n)})},s=function(e,t,n){return $(t).text(c).off("click").click(function(t){return f(e,t.target,n)})},d=function(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"";return Object(r.subscribeId)(e,function(){s(e,t,n),Object(i.b)(e,window.location.href,function(){n&&Object(r.getLocalStorageItems)("other",!1).then(function(t){var i=t[e];if(i){var c=new o.LocalStorageItem({object:i});c.setText(n),t[e]=c,Object(r.saveLocalStorageItems)("other",!1,t)}})})}),!1},f=function(e,t,n){return Object(r.unsubscribeId)(e,function(){a(e,t,n)}),!1}},64:function(e,t,n){"use strict";n.d(t,"b",function(){return d}),n.d(t,"a",function(){return f});var r=n(30),o=n(1),i=n(2);function c(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var u=0,a=1,s=2,d=function(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:function(){},o=u;t.match(/^https:\/\/www.reveddit.com/)&&(o=a),chrome.storage.sync.get(null,function(t){Object(r.getAuth)().then(function(r){l([e],"other",!1,r,t,o,{},n)})})},f=function(){chrome.storage.sync.get(null,function(e){var t=Object.keys(e.user_subscriptions),n=Object.keys(e.other_subscriptions);(t.length||n.length)&&Object(r.getAuth)().then(function(n){!function(e,t){var n=Object.keys(t.other_subscriptions);n.length&&l(n,"other",!1,e,t,s)}(n,e),function e(t,n,o){if(t.length){var i=t[0];Object(r.lookupItemsByUser)(i,"","new","",n).then(function(r){if(r){var c=[],u={};r.forEach(function(e){c.push(e.data.name),u[e.data.name]=e.data}),l(c,i,!0,n,o,s,u,function(){e(t.slice(1),n,o)})}})}}(t,n,e)})})};function l(e,t,n,u,a,s){var d=arguments.length>6&&void 0!==arguments[6]?arguments[6]:{},f=arguments.length>7&&void 0!==arguments[7]?arguments[7]:function(){};Object(r.lookupItemsByID)(e,u).then(function(e){if(e){var r=a.options.removal_status,u=a.options.lock_status,l=Object(o.getObjectNamesForThing)(t,n),m=a[l.removed]||{},b=a[l.approved]||{},v=a[l.locked]||{},g=a[l.unlocked]||{},p=a[l.changes]||[];n||(d={});var y=[],_=[],O=[],w=[];e.forEach(function(e){var t=e.data;n||(d[t.name]=t),Object(i.isRemovedItem)(t)?y.push(t.name):_.push(t.name),t.locked?O.push(t.name):w.push(t.name)});var j={},k=[],E=0;Object(o.getLocalStorageItems)(t,n).then(function(e){var a;r.track&&(E+=h(y,o.REMOVED,"mod removed",m,_,o.APPROVED,"approved",b,p,d,r.notify,j,k,n,s,e)),u.track&&(E+=h(O,o.LOCKED,"locked",v,w,o.UNLOCKED,"unlocked",g,p,d,u.notify,j,k,n,s,e)),E&&k.length&&Object(i.createNotification)({notificationId:t,title:t,message:"".concat(E," new [").concat(k.join(", "),"] actions, click to view")}),chrome.storage.sync.set((c(a={},l.removed,Object(i.trimDict_by_numberValuedAttribute)(m,o.MAX_SYNC_STORAGE_ITEMS_PER_OBJECT,"c")),c(a,l.approved,Object(i.trimDict_by_numberValuedAttribute)(b,o.MAX_SYNC_STORAGE_ITEMS_PER_OBJECT,"c")),c(a,l.locked,Object(i.trimDict_by_numberValuedAttribute)(v,o.MAX_SYNC_STORAGE_ITEMS_PER_OBJECT,"c")),c(a,l.unlocked,Object(i.trimDict_by_numberValuedAttribute)(g,o.MAX_SYNC_STORAGE_ITEMS_PER_OBJECT,"c")),c(a,l.changes,p.slice(-o.MAX_SYNC_STORAGE_CHANGES)),a),function(){Object(i.updateBadgeUnseenCount)(),Object(o.addLocalStorageItems)(j,t,n,f)})})}})}function h(e,t,n,r,c,s,d,f,l,h,m,b,v,g,p,y){var _=[],O=[],w=[],j=Math.floor(new Date/1e3);e.forEach(function(e){var n=h[e];if(g||y[e]||(b[e]=new i.LocalStorageItem({item:n,observed_utc:j})),!(e in r)){var c=!0;if((p===u&&t!==o.REMOVED||p===a)&&(c=!1),r[e]=new i.ItemForStorage(n.created_utc,c),delete f[e],c){var s=t;Object(i.isUserDeletedItem)(n)?(s=o.DELETED,w.push(e)):_.push(e),l.push(new i.ChangeForStorage({id:e,observed_utc:j,change_type:s}))}g&&(b[e]=new i.LocalStorageItem({item:n,observed_utc:j}))}}),c.forEach(function(e){var t=h[e];g||y[e]||(b[e]=new i.LocalStorageItem({item:t,observed_utc:j})),e in r?(f[e]=new i.ItemForStorage(t.created_utc,!0),delete r[e],l.push(new i.ChangeForStorage({id:e,observed_utc:j,change_type:s})),O.push(e),b[e]=new i.LocalStorageItem({item:t,observed_utc:j})):f[e]=new i.ItemForStorage(t.created_utc,!1)});var k=_.length+O.length+w.length;return m&&k&&(_.length&&v.push(n),w.length&&v.push("user deleted"),O.length&&v.push(d)),k}}});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,