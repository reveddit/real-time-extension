!function(t){var n={};function e(r){if(n[r])return n[r].exports;var o=n[r]={i:r,l:!1,exports:{}};return t[r].call(o.exports,o,o.exports,e),o.l=!0,o.exports}e.m=t,e.c=n,e.d=function(t,n,r){e.o(t,n)||Object.defineProperty(t,n,{enumerable:!0,get:r})},e.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},e.t=function(t,n){if(1&n&&(t=e(t)),8&n)return t;if(4&n&&"object"==typeof t&&t&&t.__esModule)return t;var r=Object.create(null);if(e.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:t}),2&n&&"string"!=typeof t)for(var o in t)e.d(r,o,function(n){return t[n]}.bind(null,o));return r},e.n=function(t){var n=t&&t.__esModule?function(){return t.default}:function(){return t};return e.d(n,"a",n),n},e.o=function(t,n){return Object.prototype.hasOwnProperty.call(t,n)},e.p="",e(e.s=318)}([function(t,n,e){var r=e(4),o=e(10),i=e(17),u=e(14),c=e(20),a=function(t,n,e){var s,f,l,h,g=t&a.F,d=t&a.G,p=t&a.S,v=t&a.P,m=t&a.B,y=d?r:p?r[n]||(r[n]={}):(r[n]||{}).prototype,b=d?o:o[n]||(o[n]={}),A=b.prototype||(b.prototype={});for(s in d&&(e=n),e)l=((f=!g&&y&&void 0!==y[s])?y:e)[s],h=m&&f?c(l,r):v&&"function"==typeof l?c(Function.call,l):l,y&&u(y,s,l,t&a.U),b[s]!=l&&i(b,s,h),v&&A[s]!=l&&(A[s]=l)};r.core=o,a.F=1,a.G=2,a.S=4,a.P=8,a.B=16,a.W=32,a.U=64,a.R=128,t.exports=a},function(t,n,e){"use strict";e.r(n),e.d(n,"INTERVAL_DEFAULT",function(){return s}),e.d(n,"SEEN_COUNT_DEFAULT",function(){return f}),e.d(n,"MAX_SYNC_STORAGE_ITEMS_PER_OBJECT",function(){return l}),e.d(n,"MAX_SYNC_STORAGE_CHANGES",function(){return h}),e.d(n,"MAX_OTHER_SUBSCRIPTIONS",function(){return g}),e.d(n,"REMOVED",function(){return d}),e.d(n,"APPROVED",function(){return p}),e.d(n,"LOCKED",function(){return v}),e.d(n,"UNLOCKED",function(){return m}),e.d(n,"EDITED",function(){return y}),e.d(n,"DELETED",function(){return b}),e.d(n,"getObjectNamesForThing",function(){return _}),e.d(n,"markEverythingAsSeen",function(){return O}),e.d(n,"markThingAsSeen",function(){return E}),e.d(n,"setStorageUpdateBadge",function(){return j}),e.d(n,"markIDsAsSeenIfSubscribed",function(){return P}),e.d(n,"subscribeId",function(){return I}),e.d(n,"unsubscribeId",function(){return T}),e.d(n,"getSubscribedIds",function(){return M}),e.d(n,"subscribeUser",function(){return F}),e.d(n,"unsubscribeUser",function(){return N}),e.d(n,"initStorage",function(){return L}),e.d(n,"getSubscribedUsers_withSeenAndUnseenIDs",function(){return R}),e.d(n,"getSubscribedUsers_withUnseenIDs",function(){return C}),e.d(n,"getUnseenIDs_thing",function(){return D}),e.d(n,"getIDs_thing",function(){return U}),e.d(n,"getLocalStorageItems",function(){return $}),e.d(n,"saveLocalStorageItems",function(){return B}),e.d(n,"addLocalStorageItems",function(){return V}),e.d(n,"getItemFromLocalStorage",function(){return W}),e.d(n,"getAllChanges",function(){return q}),e.d(n,"getOptions",function(){return G}),e.d(n,"saveOptions",function(){return z});var r=e(2),o=e(3),i=e.n(o);function u(t,n){var e=Object.keys(t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);n&&(r=r.filter(function(n){return Object.getOwnPropertyDescriptor(t,n).enumerable})),e.push.apply(e,r)}return e}function c(t){for(var n=1;n<arguments.length;n++){var e=null!=arguments[n]?arguments[n]:{};n%2?u(e,!0).forEach(function(n){a(t,n,e[n])}):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(e)):u(e).forEach(function(n){Object.defineProperty(t,n,Object.getOwnPropertyDescriptor(e,n))})}return t}function a(t,n,e){return n in t?Object.defineProperty(t,n,{value:e,enumerable:!0,configurable:!0,writable:!0}):t[n]=e,t}var s=1,f=2,l=130,h=100,g=100,d=1,p=2,v=3,m=4,y=5,b=6,A={changes:[],removed:{},approved:{},locked:{},unlocked:{}},x=function(t,n,e){return e?t+"_u_"+n:t+"_"+n},w=function(t,n){var e=!(arguments.length>2&&void 0!==arguments[2])||arguments[2];Object.keys(A).forEach(function(r){t[x(r,n,e)]=A[r]})},_=function(t){var n=!(arguments.length>1&&void 0!==arguments[1])||arguments[1],e={};return Object.keys(A).forEach(function(r){e[r]=x(r,t,n)}),e},S=function(t){var n={};return w(n,t,!0),n},O=function(){return i.a.storage.sync.get(null).then(function(t){return Object.keys(t.user_subscriptions).forEach(function(n){E(t,n,!0)}),E(t,"other",!1),j(t)})},E=function(t,n,e){var r=_(n,e);delete r.changes;var o=[];Object.values(r).forEach(function(t){o.push(t)}),o.forEach(function(n){Object.values(t[n]).forEach(function(t){t.u=!1})})},j=function(t){return i.a.storage.sync.set(t).then(function(t){return i.a.runtime.sendMessage({action:"update-badge"})})},k=function(t,n,e,o,i){var u=t[n[e]];Object.keys(o).forEach(function(t){t in u?u[t].u=!1:i&&(u[t]=new r.ItemForStorage(o[t],!1))})},P=function(t,n,e,r,o,i,u){var c=arguments.length>7&&void 0!==arguments[7]?arguments[7]:function(){},a=_(n,e);delete a.changes;var s=t.user_subscriptions[n];!s&&e||(k(t,a,"removed",r,e),k(t,a,"approved",o,e),k(t,a,"locked",i,e),k(t,a,"unlocked",u,e),chrome.storage.sync.set(t,c))},I=function(t){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:function(){},e="other_subscriptions";chrome.storage.sync.get(e,function(o){o[e][t]={t:Math.floor((new Date).getTime()/1e3)};var i=Object(r.trimDict_by_numberValuedAttribute)(o[e],g,"t");chrome.storage.sync.set(a({},e,i),n)})},T=function(t){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:function(){},e="other_subscriptions",r=_("other",!1);delete r.changes,chrome.storage.sync.get(Object.values(r).concat(e),function(o){delete o[e][t],Object.values(r).forEach(function(n){t in o[n]&&delete o[n][t]}),chrome.storage.sync.set(o,function(){chrome.runtime.sendMessage({action:"update-badge"},n)})})},M=function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:function(){},n="other_subscriptions";chrome.storage.sync.get(n,function(e){t(Object.keys(e[n]))})},F=function(t){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:function(){},e=arguments.length>2&&void 0!==arguments[2]?arguments[2]:function(){},r=S(t);chrome.storage.sync.get("user_subscriptions",function(o){var i=o.user_subscriptions;t in i?e("already subscribed to this user"):Object.keys(i).length<5?(i[t]=!0,chrome.storage.sync.set(c({user_subscriptions:i},r),n)):e("maximum number of subscriptions reached")})},N=function(t,n){var e=Object.keys(S(t));chrome.storage.sync.get("user_subscriptions",function(r){var o=r.user_subscriptions;delete o[t],chrome.storage.sync.set({user_subscriptions:o},function(){chrome.storage.sync.remove(e,function(){var e=x("items",t,!0);chrome.runtime.sendMessage({action:"update-badge"}),chrome.storage.local.remove(e,n)})})})},L=function(t){chrome.storage.sync.get(null,function(n){var e;0===Object.keys(n).length?chrome.storage.sync.set((w(e={user_subscriptions:{},other_subscriptions:{},options:{interval:s,seen_count:f,custom_clientid:"",removal_status:{track:!0,notify:!0},lock_status:{track:!0,notify:!0},monitor_quarantined:!1},last_check:null,last_check_quarantined:null},"other",!1),e),t):t()})},R=function(t){chrome.storage.sync.get(null,function(n){var e=Object.keys(n.user_subscriptions),r={};e.forEach(function(t){r[t]=U(t,!0,n)}),r.other=U("other",!1,n),t(r,n)})},C=function(t){chrome.storage.sync.get(null,function(n){var e=Object.keys(n.user_subscriptions),r={};e.forEach(function(t){r[t]=D(t,!0,n)}),r.other=D("other",!1,n),t(r)})},D=function(t,n,e){return U(t,n,e).unseen},U=function(t,n,e){var r=e.options.removal_status.track,o=e.options.lock_status.track,i={},u={},c=[],a=_(t,n);return r&&c.push(a.removed,a.approved),o&&c.push(a.locked,a.unlocked),c.forEach(function(t){Object.keys(e[t]).forEach(function(n){e[t][n].u?i[n]=!0:u[n]=!0})}),{unseen:Object.keys(i),seen:Object.keys(u)}},$=function(t,n){var e=x("items",t,n);return i.a.storage.local.get(a({},e,{})).then(function(t){return t[e]})},B=function(t,n,e){var r=x("items",t,n);return i.a.storage.local.set(a({},r,e))},V=function(t,n,e){var o=x("items",n,e);return chrome.storage.local.get(a({},o,{}),function(n){var e=n[o];Object.keys(t).forEach(function(n){e[n]=t[n]});var u=e;return Object.keys(e).length>500&&(u=Object(r.trimDict_by_numberValuedAttribute)(e,500,"o")),i.a.storage.local.set(a({},o,u))})},W=function(t,n,e,o){var i=x("items",t,n);return i in o&&e in o[i]?new r.LocalStorageItem({object:o[i][e]}):""},q=function(t){chrome.storage.sync.get("user_subscriptions",function(n){var e=[x("changes","other",!1)],r={changes_other:"other"};Object.keys(n.user_subscriptions).forEach(function(t){var n=x("changes",t,!0);e.push(n),r[n]=t}),chrome.storage.sync.get(e,function(n){var o={};e.forEach(function(t){t in n&&n[t].length&&(o[r[t]]=n[t])}),t(o)})})},G=function(t){return i.a.storage.sync.get(["user_subscriptions","other_subscriptions","options"]).then(function(n){var e=Object.keys(n.user_subscriptions),r=Object.keys(n.other_subscriptions),o=n.options;return t(e,r,o)}).catch(console.log)},z=function(t,n,e,r,o,i,u,c,a,s){chrome.storage.sync.set({options:{seen_count:t,interval:n,custom_clientid:e,removal_status:{track:r,notify:o},lock_status:{track:i,notify:u},hide_subscribe:c,monitor_quarantined:a}},s)}},function(t,n,e){"use strict";e.r(n),e.d(n,"ALARM_NAME",function(){return c}),e.d(n,"createTab",function(){return a}),e.d(n,"getFullIDsFromURL",function(){return s}),e.d(n,"getFullIDsFromPath",function(){return h}),e.d(n,"reformatRedditText",function(){return g}),e.d(n,"isRemovedItem",function(){return d}),e.d(n,"isComment",function(){return p}),e.d(n,"isRemovedComment",function(){return v}),e.d(n,"isUserDeletedComment",function(){return m}),e.d(n,"isUserDeletedPost",function(){return y}),e.d(n,"isUserDeletedItem",function(){return b}),e.d(n,"isRemovedPost",function(){return A}),e.d(n,"trimDict_by_numberValuedAttribute",function(){return x}),e.d(n,"sortDict_by_numberValuedAttribute",function(){return w}),e.d(n,"ItemForStorage",function(){return _}),e.d(n,"ChangeForStorage",function(){return S}),e.d(n,"LocalStorageItem",function(){return O}),e.d(n,"setAlarm",function(){return E}),e.d(n,"alphaLowerSort",function(){return j}),e.d(n,"goToOptions",function(){return k}),e.d(n,"showError",function(){return P}),e.d(n,"pprint",function(){return I}),e.d(n,"getPrettyTimeLength",function(){return T}),e.d(n,"getPrettyDate",function(){return M}),e.d(n,"createNotification",function(){return F}),e.d(n,"updateBadgeUnseenCount",function(){return N});var r=e(1);e(3);function o(t,n){if(!(t instanceof n))throw new TypeError("Cannot call a class as a function")}function i(t,n){for(var e=0;e<n.length;e++){var r=n[e];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function u(t,n,e){return n&&i(t.prototype,n),e&&i(t,e),t}var c="notifyme",a=function(t){chrome.tabs.create({url:t},function(n){n?chrome.windows.update(n.windowId,{focused:!0}):chrome.windows.create({url:t},function(t){chrome.windows.update(t.id,{focused:!0})})})},s=function(t){var n=t.replace(/https:\/\/[^/]*re(ve)?ddit.com/,"");return h(n)},f=/^\/(v|r|user)\/([^/]+)\/comments\/([^/]+)\/[^/]*(?:\/([^/?&#]+))?/,l=/^\/(?:user|y|u)\/([^/?&#]+)\/?/,h=function(t){var n=void 0,e=void 0,r=void 0,o=void 0,i=t.match(f),u=t.match(l);i?("user"===i[1]?r=i[2]:o=i[2],i[3]&&(n="t3_"+i[3]),i[4]&&(e="t1_"+i[4])):u&&(r=u[1]);return[n,e,r,o]},g=function(t){return t.replace(/&amp;/g,"&").replace(/&gt;/g,">").replace(/&lt;/g,"<").replace(/\s+/g," ").substr(0,300)},d=function(t){return p(t.name)?v(t):A(t)},p=function(t){return"t1"===t.substr(0,2)},v=function(t){return("[removed]"===t.body.replace(/\\/g,"")||"[deleted]"===t.body.replace(/\\/g,""))&&"[deleted]"===t.author.replace(/\\/g,"")},m=function(t){return"[deleted]"===t.body.replace(/\\/g,"")&&"[deleted]"===t.author.replace(/\\/g,"")},y=function(t){return!t.is_robot_indexable&&"[deleted]"===t.author.replace(/\\/g,"")},b=function(t){return p(t.name)?m(t):y(t)},A=function(t){return!t.is_robot_indexable},x=function(t,n,e){var r=w(t,e).slice(0,n),o={};return r.forEach(function(t){o[t[0]]=t[1]}),o},w=function(t,n){var e=Object.keys(t).map(function(n){return[n,t[n]]});return e.sort(function(t,e){return e[1][n]-t[1][n]}),e},_=function(){function t(n,e){o(this,t),this.c=n,this.u=e}return u(t,[{key:"getCreatedUTC",value:function(){return this.c}},{key:"getUnseen",value:function(){return this.u}}]),t}(),S=function(){function t(n){var e=n.id,r=void 0===e?null:e,i=n.observed_utc,u=void 0===i?null:i,c=n.change_type,a=void 0===c?null:c,s=n.seen_count,f=void 0===s?null:s,l=n.object,h=void 0===l?null:l;o(this,t),h?(this.i=h.i,this.o=h.o,this.g=h.g,this.n=h.n):(this.i=r,this.o=u,this.g=a,this.n=f)}return u(t,[{key:"getID",value:function(){return this.i}},{key:"getObservedUTC",value:function(){return this.o}},{key:"getChangeType",value:function(){switch(this.g){case r.REMOVED:return"mod removed";case r.DELETED:return"user deleted";case r.APPROVED:return"approved";case r.LOCKED:return"locked";case r.UNLOCKED:return"unlocked";case r.EDITED:return"edited"}}},{key:"getSeenCount",value:function(){return this.n}}]),t}(),O=function(){function t(n){var e=n.item,r=void 0===e?null:e,i=n.observed_utc,u=void 0===i?null:i,c=n.object,a=void 0===c?null:c;if(o(this,t),a)this.t=a.t,this.o=a.o,this.c=a.c,this.n=a.n||0;else{var s="";s=p(r.name)?g(r.body):r.title,this.t=s,this.o=u,this.c=r.created_utc,this.n=0}}return u(t,[{key:"setText",value:function(t){this.t=g(t)}},{key:"getText",value:function(){return this.t}},{key:"getObservedUTC",value:function(){return this.o}},{key:"getCreatedUTC",value:function(){return this.c}},{key:"getSeenCount",value:function(){return this.n}},{key:"incrementSeenCount",value:function(){void 0===this.n&&(this.n=0),this.n+=1}}]),t}();function E(t){chrome.alarms.clear(c),chrome.alarms.create(c,{delayInMinutes:1,periodInMinutes:t})}function j(t,n){var e=t.toLowerCase(),r=n.toLowerCase();return e<r?-1:e>r?1:0}function k(){chrome.runtime.openOptionsPage?(chrome.runtime.openOptionsPage(),window.close()):window.open(chrome.runtime.getURL("/src/options.html"))}function P(t,n){$('<div class="rr-error">'+t+"</div>").appendTo(n).delay(2400).fadeTo(400,0,function(){$(this).remove()})}function I(t){console.log(JSON.stringify(t,null,"\t"))}var T=function(t){var n=[[60,"second","seconds"],[60,"minute","minutes"],[24,"hour","hours"],[7,"day","days"],[365/12/7,"week","weeks"],[12,"month","months"],[10,"year","years"],[10,"decade","decades"],[10,"century","centuries"],[10,"millenium","millenia"]];if(t<60)return t+" seconds";for(var e=t,r=0;r<n.length;r++){var o=n[r][0],i=n[r][1],u=n[r][2];if(e<o){var c=e-Math.floor(e),a=Math.round(c*n[r-1][0]);if(n[r-1][0]===a&&(e+=1,a=0),(Math.floor(e)>1||0==Math.floor(e))&&(i=u),r>1&&a>0){var s=n[r-1][1];a>1&&(s=n[r-1][2]),i+=", "+String(a)+" "+s}return String(Math.floor(e))+" "+i}e/=o}},M=function(t){var n=Math.floor((new Date).getTime()/1e3)-t;return T(n)+" ago"},F=function(t){var n=t.notificationId,e=t.title,r=t.message;location.protocol.match(/^http/)?chrome.runtime.sendMessage({action:"create-notification",options:{notificationId:n,title:e,message:r}}):registration.showNotification(e,{body:r,data:n,icon:"/icons/128.png",message:r})},N=function(){location.protocol.match(/^http/)?chrome.runtime.sendMessage({action:"update-badge"}):Object(r.getSubscribedUsers_withUnseenIDs)(function(t){var n=0;Object.values(t).forEach(function(t){n+=t.length});var e=n.toString();0==n&&(e=""),chrome.action.setBadgeBackgroundColor({color:"red"}),chrome.action.setBadgeText({text:e})})}},function(t,n,e){var r,o,i;o=[t],void 0===(i="function"==typeof(r=function(t){"use strict";if("undefined"==typeof browser||Object.getPrototypeOf(browser)!==Object.prototype){const n="The message port closed before a response was received.",e="Returning a Promise is the preferred way to send a reply from an onMessage/onMessageExternal listener, as the sendResponse will be removed from the specs (See https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/runtime/onMessage)",r=t=>{const r={alarms:{clear:{minArgs:0,maxArgs:1},clearAll:{minArgs:0,maxArgs:0},get:{minArgs:0,maxArgs:1},getAll:{minArgs:0,maxArgs:0}},bookmarks:{create:{minArgs:1,maxArgs:1},get:{minArgs:1,maxArgs:1},getChildren:{minArgs:1,maxArgs:1},getRecent:{minArgs:1,maxArgs:1},getSubTree:{minArgs:1,maxArgs:1},getTree:{minArgs:0,maxArgs:0},move:{minArgs:2,maxArgs:2},remove:{minArgs:1,maxArgs:1},removeTree:{minArgs:1,maxArgs:1},search:{minArgs:1,maxArgs:1},update:{minArgs:2,maxArgs:2}},browserAction:{disable:{minArgs:0,maxArgs:1,fallbackToNoCallback:!0},enable:{minArgs:0,maxArgs:1,fallbackToNoCallback:!0},getBadgeBackgroundColor:{minArgs:1,maxArgs:1},getBadgeText:{minArgs:1,maxArgs:1},getPopup:{minArgs:1,maxArgs:1},getTitle:{minArgs:1,maxArgs:1},openPopup:{minArgs:0,maxArgs:0},setBadgeBackgroundColor:{minArgs:1,maxArgs:1,fallbackToNoCallback:!0},setBadgeText:{minArgs:1,maxArgs:1,fallbackToNoCallback:!0},setIcon:{minArgs:1,maxArgs:1},setPopup:{minArgs:1,maxArgs:1,fallbackToNoCallback:!0},setTitle:{minArgs:1,maxArgs:1,fallbackToNoCallback:!0}},browsingData:{remove:{minArgs:2,maxArgs:2},removeCache:{minArgs:1,maxArgs:1},removeCookies:{minArgs:1,maxArgs:1},removeDownloads:{minArgs:1,maxArgs:1},removeFormData:{minArgs:1,maxArgs:1},removeHistory:{minArgs:1,maxArgs:1},removeLocalStorage:{minArgs:1,maxArgs:1},removePasswords:{minArgs:1,maxArgs:1},removePluginData:{minArgs:1,maxArgs:1},settings:{minArgs:0,maxArgs:0}},commands:{getAll:{minArgs:0,maxArgs:0}},contextMenus:{remove:{minArgs:1,maxArgs:1},removeAll:{minArgs:0,maxArgs:0},update:{minArgs:2,maxArgs:2}},cookies:{get:{minArgs:1,maxArgs:1},getAll:{minArgs:1,maxArgs:1},getAllCookieStores:{minArgs:0,maxArgs:0},remove:{minArgs:1,maxArgs:1},set:{minArgs:1,maxArgs:1}},devtools:{inspectedWindow:{eval:{minArgs:1,maxArgs:2,singleCallbackArg:!1}},panels:{create:{minArgs:3,maxArgs:3,singleCallbackArg:!0}}},downloads:{cancel:{minArgs:1,maxArgs:1},download:{minArgs:1,maxArgs:1},erase:{minArgs:1,maxArgs:1},getFileIcon:{minArgs:1,maxArgs:2},open:{minArgs:1,maxArgs:1,fallbackToNoCallback:!0},pause:{minArgs:1,maxArgs:1},removeFile:{minArgs:1,maxArgs:1},resume:{minArgs:1,maxArgs:1},search:{minArgs:1,maxArgs:1},show:{minArgs:1,maxArgs:1,fallbackToNoCallback:!0}},extension:{isAllowedFileSchemeAccess:{minArgs:0,maxArgs:0},isAllowedIncognitoAccess:{minArgs:0,maxArgs:0}},history:{addUrl:{minArgs:1,maxArgs:1},deleteAll:{minArgs:0,maxArgs:0},deleteRange:{minArgs:1,maxArgs:1},deleteUrl:{minArgs:1,maxArgs:1},getVisits:{minArgs:1,maxArgs:1},search:{minArgs:1,maxArgs:1}},i18n:{detectLanguage:{minArgs:1,maxArgs:1},getAcceptLanguages:{minArgs:0,maxArgs:0}},identity:{launchWebAuthFlow:{minArgs:1,maxArgs:1}},idle:{queryState:{minArgs:1,maxArgs:1}},management:{get:{minArgs:1,maxArgs:1},getAll:{minArgs:0,maxArgs:0},getSelf:{minArgs:0,maxArgs:0},setEnabled:{minArgs:2,maxArgs:2},uninstallSelf:{minArgs:0,maxArgs:1}},notifications:{clear:{minArgs:1,maxArgs:1},create:{minArgs:1,maxArgs:2},getAll:{minArgs:0,maxArgs:0},getPermissionLevel:{minArgs:0,maxArgs:0},update:{minArgs:2,maxArgs:2}},pageAction:{getPopup:{minArgs:1,maxArgs:1},getTitle:{minArgs:1,maxArgs:1},hide:{minArgs:1,maxArgs:1,fallbackToNoCallback:!0},setIcon:{minArgs:1,maxArgs:1},setPopup:{minArgs:1,maxArgs:1,fallbackToNoCallback:!0},setTitle:{minArgs:1,maxArgs:1,fallbackToNoCallback:!0},show:{minArgs:1,maxArgs:1,fallbackToNoCallback:!0}},permissions:{contains:{minArgs:1,maxArgs:1},getAll:{minArgs:0,maxArgs:0},remove:{minArgs:1,maxArgs:1},request:{minArgs:1,maxArgs:1}},runtime:{getBackgroundPage:{minArgs:0,maxArgs:0},getPlatformInfo:{minArgs:0,maxArgs:0},openOptionsPage:{minArgs:0,maxArgs:0},requestUpdateCheck:{minArgs:0,maxArgs:0},sendMessage:{minArgs:1,maxArgs:3},sendNativeMessage:{minArgs:2,maxArgs:2},setUninstallURL:{minArgs:1,maxArgs:1}},sessions:{getDevices:{minArgs:0,maxArgs:1},getRecentlyClosed:{minArgs:0,maxArgs:1},restore:{minArgs:0,maxArgs:1}},storage:{local:{clear:{minArgs:0,maxArgs:0},get:{minArgs:0,maxArgs:1},getBytesInUse:{minArgs:0,maxArgs:1},remove:{minArgs:1,maxArgs:1},set:{minArgs:1,maxArgs:1}},managed:{get:{minArgs:0,maxArgs:1},getBytesInUse:{minArgs:0,maxArgs:1}},sync:{clear:{minArgs:0,maxArgs:0},get:{minArgs:0,maxArgs:1},getBytesInUse:{minArgs:0,maxArgs:1},remove:{minArgs:1,maxArgs:1},set:{minArgs:1,maxArgs:1}}},tabs:{captureVisibleTab:{minArgs:0,maxArgs:2},create:{minArgs:1,maxArgs:1},detectLanguage:{minArgs:0,maxArgs:1},discard:{minArgs:0,maxArgs:1},duplicate:{minArgs:1,maxArgs:1},executeScript:{minArgs:1,maxArgs:2},get:{minArgs:1,maxArgs:1},getCurrent:{minArgs:0,maxArgs:0},getZoom:{minArgs:0,maxArgs:1},getZoomSettings:{minArgs:0,maxArgs:1},highlight:{minArgs:1,maxArgs:1},insertCSS:{minArgs:1,maxArgs:2},move:{minArgs:2,maxArgs:2},query:{minArgs:1,maxArgs:1},reload:{minArgs:0,maxArgs:2},remove:{minArgs:1,maxArgs:1},removeCSS:{minArgs:1,maxArgs:2},sendMessage:{minArgs:2,maxArgs:3},setZoom:{minArgs:1,maxArgs:2},setZoomSettings:{minArgs:1,maxArgs:2},update:{minArgs:1,maxArgs:2}},topSites:{get:{minArgs:0,maxArgs:0}},webNavigation:{getAllFrames:{minArgs:1,maxArgs:1},getFrame:{minArgs:1,maxArgs:1}},webRequest:{handlerBehaviorChanged:{minArgs:0,maxArgs:0}},windows:{create:{minArgs:0,maxArgs:1},get:{minArgs:1,maxArgs:2},getAll:{minArgs:0,maxArgs:1},getCurrent:{minArgs:0,maxArgs:1},getLastFocused:{minArgs:0,maxArgs:1},remove:{minArgs:1,maxArgs:1},update:{minArgs:2,maxArgs:2}}};if(0===Object.keys(r).length)throw new Error("api-metadata.json has not been included in browser-polyfill");const o=(n,e)=>(...r)=>{t.runtime.lastError?n.reject(t.runtime.lastError):e.singleCallbackArg||r.length<=1&&!1!==e.singleCallbackArg?n.resolve(r[0]):n.resolve(r)},i=t=>1==t?"argument":"arguments",u=(t,n,e)=>new Proxy(n,{apply:(n,r,o)=>e.call(r,t,...o)});let c=Function.call.bind(Object.prototype.hasOwnProperty);const a=(t,n={},e={})=>{let r=Object.create(null),s={has:(n,e)=>e in t||e in r,get(s,f,l){if(f in r)return r[f];if(!(f in t))return;let h=t[f];if("function"==typeof h)if("function"==typeof n[f])h=u(t,t[f],n[f]);else if(c(e,f)){let n=((t,n)=>(function(e,...r){if(r.length<n.minArgs)throw new Error(`Expected at least ${n.minArgs} ${i(n.minArgs)} for ${t}(), got ${r.length}`);if(r.length>n.maxArgs)throw new Error(`Expected at most ${n.maxArgs} ${i(n.maxArgs)} for ${t}(), got ${r.length}`);return new Promise((i,u)=>{if(n.fallbackToNoCallback)try{e[t](...r,o({resolve:i,reject:u},n))}catch(o){console.warn(`${t} API method doesn't seem to support the callback parameter, `+"falling back to call it without a callback: ",o),e[t](...r),n.fallbackToNoCallback=!1,n.noCallback=!0,i()}else n.noCallback?(e[t](...r),i()):e[t](...r,o({resolve:i,reject:u},n))})}))(f,e[f]);h=u(t,t[f],n)}else h=h.bind(t);else{if("object"!=typeof h||null===h||!c(n,f)&&!c(e,f))return Object.defineProperty(r,f,{configurable:!0,enumerable:!0,get:()=>t[f],set(n){t[f]=n}}),h;h=a(h,n[f],e[f])}return r[f]=h,h},set:(n,e,o,i)=>(e in r?r[e]=o:t[e]=o,!0),defineProperty:(t,n,e)=>Reflect.defineProperty(r,n,e),deleteProperty:(t,n)=>Reflect.deleteProperty(r,n)},f=Object.create(t);return new Proxy(f,s)},s=t=>({addListener(n,e,...r){n.addListener(t.get(e),...r)},hasListener:(n,e)=>n.hasListener(t.get(e)),removeListener(n,e){n.removeListener(t.get(e))}});let f=!1;const l=new class extends WeakMap{constructor(t,n){super(n),this.createItem=t}get(t){return this.has(t)||this.set(t,this.createItem(t)),super.get(t)}}(t=>"function"!=typeof t?t:function(n,r,o){let i,u,c=!1,a=new Promise(t=>{i=function(n){f||(console.warn(e,(new Error).stack),f=!0),c=!0,t(n)}});try{u=t(n,r,i)}catch(t){u=Promise.reject(t)}const s=!0!==u&&(t=>t&&"object"==typeof t&&"function"==typeof t.then)(u);if(!0!==u&&!s&&!c)return!1;const l=t=>{t.then(t=>{o(t)},t=>{let n;n=t&&(t instanceof Error||"string"==typeof t.message)?t.message:"An unexpected error occurred",o({__mozWebExtensionPolyfillReject__:!0,message:n})}).catch(t=>{console.error("Failed to send onMessage rejected reply",t)})};return l(s?u:a),!0}),h=(e,r,o,...u)=>{if(u.length<r.minArgs)throw new Error(`Expected at least ${r.minArgs} ${i(r.minArgs)} for ${e}(), got ${u.length}`);if(u.length>r.maxArgs)throw new Error(`Expected at most ${r.maxArgs} ${i(r.maxArgs)} for ${e}(), got ${u.length}`);return new Promise((e,r)=>{const i=(({reject:e,resolve:r},o)=>{t.runtime.lastError?t.runtime.lastError.message===n?r():e(t.runtime.lastError):o&&o.__mozWebExtensionPolyfillReject__?e(new Error(o.message)):r(o)}).bind(null,{resolve:e,reject:r});u.push(i),o.sendMessage(...u)})},g={runtime:{onMessage:s(l),onMessageExternal:s(l),sendMessage:h.bind(null,"sendMessage",{minArgs:1,maxArgs:3})},tabs:{sendMessage:h.bind(null,"sendMessage",{minArgs:2,maxArgs:3})}},d={clear:{minArgs:1,maxArgs:1},get:{minArgs:1,maxArgs:1},set:{minArgs:1,maxArgs:1}};return r.privacy={network:{networkPredictionEnabled:d,webRTCIPHandlingPolicy:d},services:{passwordSavingEnabled:d},websites:{hyperlinkAuditingEnabled:d,referrersEnabled:d}},a(t,g,r)};if("object"!=typeof chrome||!chrome||!chrome.runtime||!chrome.runtime.id)throw new Error("This script should only be loaded in a browser extension.");t.exports=r(chrome)}else t.exports=browser})?r.apply(n,o):r)||(t.exports=i)},function(t,n){var e=t.exports="undefined"!=typeof window&&window.Math==Math?window:"undefined"!=typeof self&&self.Math==Math?self:Function("return this")();"number"==typeof __g&&(__g=e)},function(t,n){t.exports=function(t){try{return!!t()}catch(t){return!0}}},function(t,n,e){var r=e(7);t.exports=function(t){if(!r(t))throw TypeError(t+" is not an object!");return t}},function(t,n){t.exports=function(t){return"object"==typeof t?null!==t:"function"==typeof t}},function(t,n,e){var r=e(52)("wks"),o=e(33),i=e(4).Symbol,u="function"==typeof i;(t.exports=function(t){return r[t]||(r[t]=u&&i[t]||(u?i:o)("Symbol."+t))}).store=r},function(t,n,e){var r=e(22),o=Math.min;t.exports=function(t){return t>0?o(r(t),9007199254740991):0}},function(t,n){var e=t.exports={version:"2.6.11"};"number"==typeof __e&&(__e=e)},function(t,n,e){t.exports=!e(5)(function(){return 7!=Object.defineProperty({},"a",{get:function(){return 7}}).a})},function(t,n,e){var r=e(6),o=e(94),i=e(29),u=Object.defineProperty;n.f=e(11)?Object.defineProperty:function(t,n,e){if(r(t),n=i(n,!0),r(e),o)try{return u(t,n,e)}catch(t){}if("get"in e||"set"in e)throw TypeError("Accessors not supported!");return"value"in e&&(t[n]=e.value),t}},function(t,n,e){var r=e(27);t.exports=function(t){return Object(r(t))}},function(t,n,e){var r=e(4),o=e(17),i=e(16),u=e(33)("src"),c=e(131),a=(""+c).split("toString");e(10).inspectSource=function(t){return c.call(t)},(t.exports=function(t,n,e,c){var s="function"==typeof e;s&&(i(e,"name")||o(e,"name",n)),t[n]!==e&&(s&&(i(e,u)||o(e,u,t[n]?""+t[n]:a.join(String(n)))),t===r?t[n]=e:c?t[n]?t[n]=e:o(t,n,e):(delete t[n],o(t,n,e)))})(Function.prototype,"toString",function(){return"function"==typeof this&&this[u]||c.call(this)})},function(t,n,e){var r=e(0),o=e(5),i=e(27),u=/"/g,c=function(t,n,e,r){var o=String(i(t)),c="<"+n;return""!==e&&(c+=" "+e+'="'+String(r).replace(u,"&quot;")+'"'),c+">"+o+"</"+n+">"};t.exports=function(t,n){var e={};e[t]=n(c),r(r.P+r.F*o(function(){var n=""[t]('"');return n!==n.toLowerCase()||n.split('"').length>3}),"String",e)}},function(t,n){var e={}.hasOwnProperty;t.exports=function(t,n){return e.call(t,n)}},function(t,n,e){var r=e(12),o=e(32);t.exports=e(11)?function(t,n,e){return r.f(t,n,o(1,e))}:function(t,n,e){return t[n]=e,t}},function(t,n,e){var r=e(48),o=e(27);t.exports=function(t){return r(o(t))}},function(t,n,e){"use strict";var r=e(5);t.exports=function(t,n){return!!t&&r(function(){n?t.call(null,function(){},1):t.call(null)})}},function(t,n,e){var r=e(21);t.exports=function(t,n,e){if(r(t),void 0===n)return t;switch(e){case 1:return function(e){return t.call(n,e)};case 2:return function(e,r){return t.call(n,e,r)};case 3:return function(e,r,o){return t.call(n,e,r,o)}}return function(){return t.apply(n,arguments)}}},function(t,n){t.exports=function(t){if("function"!=typeof t)throw TypeError(t+" is not a function!");return t}},function(t,n){var e=Math.ceil,r=Math.floor;t.exports=function(t){return isNaN(t=+t)?0:(t>0?r:e)(t)}},function(t,n,e){var r=e(49),o=e(32),i=e(18),u=e(29),c=e(16),a=e(94),s=Object.getOwnPropertyDescriptor;n.f=e(11)?s:function(t,n){if(t=i(t),n=u(n,!0),a)try{return s(t,n)}catch(t){}if(c(t,n))return o(!r.f.call(t,n),t[n])}},function(t,n,e){var r=e(0),o=e(10),i=e(5);t.exports=function(t,n){var e=(o.Object||{})[t]||Object[t],u={};u[t]=n(e),r(r.S+r.F*i(function(){e(1)}),"Object",u)}},function(t,n,e){var r=e(20),o=e(48),i=e(13),u=e(9),c=e(110);t.exports=function(t,n){var e=1==t,a=2==t,s=3==t,f=4==t,l=6==t,h=5==t||l,g=n||c;return function(n,c,d){for(var p,v,m=i(n),y=o(m),b=r(c,d,3),A=u(y.length),x=0,w=e?g(n,A):a?g(n,0):void 0;A>x;x++)if((h||x in y)&&(v=b(p=y[x],x,m),t))if(e)w[x]=v;else if(v)switch(t){case 3:return!0;case 5:return p;case 6:return x;case 2:w.push(p)}else if(f)return!1;return l?-1:s||f?f:w}}},function(t,n){var e={}.toString;t.exports=function(t){return e.call(t).slice(8,-1)}},function(t,n){t.exports=function(t){if(null==t)throw TypeError("Can't call method on  "+t);return t}},function(t,n,e){"use strict";if(e(11)){var r=e(34),o=e(4),i=e(5),u=e(0),c=e(63),a=e(90),s=e(20),f=e(46),l=e(32),h=e(17),g=e(47),d=e(22),p=e(9),v=e(121),m=e(36),y=e(29),b=e(16),A=e(50),x=e(7),w=e(13),_=e(82),S=e(37),O=e(39),E=e(38).f,j=e(84),k=e(33),P=e(8),I=e(25),T=e(53),M=e(51),F=e(86),N=e(44),L=e(56),R=e(45),C=e(85),D=e(112),U=e(12),$=e(23),B=U.f,V=$.f,W=o.RangeError,q=o.TypeError,G=o.Uint8Array,z=Array.prototype,Y=a.ArrayBuffer,J=a.DataView,K=I(0),X=I(2),H=I(3),Z=I(4),Q=I(5),tt=I(6),nt=T(!0),et=T(!1),rt=F.values,ot=F.keys,it=F.entries,ut=z.lastIndexOf,ct=z.reduce,at=z.reduceRight,st=z.join,ft=z.sort,lt=z.slice,ht=z.toString,gt=z.toLocaleString,dt=P("iterator"),pt=P("toStringTag"),vt=k("typed_constructor"),mt=k("def_constructor"),yt=c.CONSTR,bt=c.TYPED,At=c.VIEW,xt=I(1,function(t,n){return Et(M(t,t[mt]),n)}),wt=i(function(){return 1===new G(new Uint16Array([1]).buffer)[0]}),_t=!!G&&!!G.prototype.set&&i(function(){new G(1).set({})}),St=function(t,n){var e=d(t);if(e<0||e%n)throw W("Wrong offset!");return e},Ot=function(t){if(x(t)&&bt in t)return t;throw q(t+" is not a typed array!")},Et=function(t,n){if(!(x(t)&&vt in t))throw q("It is not a typed array constructor!");return new t(n)},jt=function(t,n){return kt(M(t,t[mt]),n)},kt=function(t,n){for(var e=0,r=n.length,o=Et(t,r);r>e;)o[e]=n[e++];return o},Pt=function(t,n,e){B(t,n,{get:function(){return this._d[e]}})},It=function(t){var n,e,r,o,i,u,c=w(t),a=arguments.length,f=a>1?arguments[1]:void 0,l=void 0!==f,h=j(c);if(null!=h&&!_(h)){for(u=h.call(c),r=[],n=0;!(i=u.next()).done;n++)r.push(i.value);c=r}for(l&&a>2&&(f=s(f,arguments[2],2)),n=0,e=p(c.length),o=Et(this,e);e>n;n++)o[n]=l?f(c[n],n):c[n];return o},Tt=function(){for(var t=0,n=arguments.length,e=Et(this,n);n>t;)e[t]=arguments[t++];return e},Mt=!!G&&i(function(){gt.call(new G(1))}),Ft=function(){return gt.apply(Mt?lt.call(Ot(this)):Ot(this),arguments)},Nt={copyWithin:function(t,n){return D.call(Ot(this),t,n,arguments.length>2?arguments[2]:void 0)},every:function(t){return Z(Ot(this),t,arguments.length>1?arguments[1]:void 0)},fill:function(t){return C.apply(Ot(this),arguments)},filter:function(t){return jt(this,X(Ot(this),t,arguments.length>1?arguments[1]:void 0))},find:function(t){return Q(Ot(this),t,arguments.length>1?arguments[1]:void 0)},findIndex:function(t){return tt(Ot(this),t,arguments.length>1?arguments[1]:void 0)},forEach:function(t){K(Ot(this),t,arguments.length>1?arguments[1]:void 0)},indexOf:function(t){return et(Ot(this),t,arguments.length>1?arguments[1]:void 0)},includes:function(t){return nt(Ot(this),t,arguments.length>1?arguments[1]:void 0)},join:function(t){return st.apply(Ot(this),arguments)},lastIndexOf:function(t){return ut.apply(Ot(this),arguments)},map:function(t){return xt(Ot(this),t,arguments.length>1?arguments[1]:void 0)},reduce:function(t){return ct.apply(Ot(this),arguments)},reduceRight:function(t){return at.apply(Ot(this),arguments)},reverse:function(){for(var t,n=Ot(this).length,e=Math.floor(n/2),r=0;r<e;)t=this[r],this[r++]=this[--n],this[n]=t;return this},some:function(t){return H(Ot(this),t,arguments.length>1?arguments[1]:void 0)},sort:function(t){return ft.call(Ot(this),t)},subarray:function(t,n){var e=Ot(this),r=e.length,o=m(t,r);return new(M(e,e[mt]))(e.buffer,e.byteOffset+o*e.BYTES_PER_ELEMENT,p((void 0===n?r:m(n,r))-o))}},Lt=function(t,n){return jt(this,lt.call(Ot(this),t,n))},Rt=function(t){Ot(this);var n=St(arguments[1],1),e=this.length,r=w(t),o=p(r.length),i=0;if(o+n>e)throw W("Wrong length!");for(;i<o;)this[n+i]=r[i++]},Ct={entries:function(){return it.call(Ot(this))},keys:function(){return ot.call(Ot(this))},values:function(){return rt.call(Ot(this))}},Dt=function(t,n){return x(t)&&t[bt]&&"symbol"!=typeof n&&n in t&&String(+n)==String(n)},Ut=function(t,n){return Dt(t,n=y(n,!0))?l(2,t[n]):V(t,n)},$t=function(t,n,e){return!(Dt(t,n=y(n,!0))&&x(e)&&b(e,"value"))||b(e,"get")||b(e,"set")||e.configurable||b(e,"writable")&&!e.writable||b(e,"enumerable")&&!e.enumerable?B(t,n,e):(t[n]=e.value,t)};yt||($.f=Ut,U.f=$t),u(u.S+u.F*!yt,"Object",{getOwnPropertyDescriptor:Ut,defineProperty:$t}),i(function(){ht.call({})})&&(ht=gt=function(){return st.call(this)});var Bt=g({},Nt);g(Bt,Ct),h(Bt,dt,Ct.values),g(Bt,{slice:Lt,set:Rt,constructor:function(){},toString:ht,toLocaleString:Ft}),Pt(Bt,"buffer","b"),Pt(Bt,"byteOffset","o"),Pt(Bt,"byteLength","l"),Pt(Bt,"length","e"),B(Bt,pt,{get:function(){return this[bt]}}),t.exports=function(t,n,e,a){var s=t+((a=!!a)?"Clamped":"")+"Array",l="get"+t,g="set"+t,d=o[s],m=d||{},y=d&&O(d),b=!d||!c.ABV,w={},_=d&&d.prototype,j=function(t,e){B(t,e,{get:function(){return function(t,e){var r=t._d;return r.v[l](e*n+r.o,wt)}(this,e)},set:function(t){return function(t,e,r){var o=t._d;a&&(r=(r=Math.round(r))<0?0:r>255?255:255&r),o.v[g](e*n+o.o,r,wt)}(this,e,t)},enumerable:!0})};b?(d=e(function(t,e,r,o){f(t,d,s,"_d");var i,u,c,a,l=0,g=0;if(x(e)){if(!(e instanceof Y||"ArrayBuffer"==(a=A(e))||"SharedArrayBuffer"==a))return bt in e?kt(d,e):It.call(d,e);i=e,g=St(r,n);var m=e.byteLength;if(void 0===o){if(m%n)throw W("Wrong length!");if((u=m-g)<0)throw W("Wrong length!")}else if((u=p(o)*n)+g>m)throw W("Wrong length!");c=u/n}else c=v(e),i=new Y(u=c*n);for(h(t,"_d",{b:i,o:g,l:u,e:c,v:new J(i)});l<c;)j(t,l++)}),_=d.prototype=S(Bt),h(_,"constructor",d)):i(function(){d(1)})&&i(function(){new d(-1)})&&L(function(t){new d,new d(null),new d(1.5),new d(t)},!0)||(d=e(function(t,e,r,o){var i;return f(t,d,s),x(e)?e instanceof Y||"ArrayBuffer"==(i=A(e))||"SharedArrayBuffer"==i?void 0!==o?new m(e,St(r,n),o):void 0!==r?new m(e,St(r,n)):new m(e):bt in e?kt(d,e):It.call(d,e):new m(v(e))}),K(y!==Function.prototype?E(m).concat(E(y)):E(m),function(t){t in d||h(d,t,m[t])}),d.prototype=_,r||(_.constructor=d));var k=_[dt],P=!!k&&("values"==k.name||null==k.name),I=Ct.values;h(d,vt,!0),h(_,bt,s),h(_,At,!0),h(_,mt,d),(a?new d(1)[pt]==s:pt in _)||B(_,pt,{get:function(){return s}}),w[s]=d,u(u.G+u.W+u.F*(d!=m),w),u(u.S,s,{BYTES_PER_ELEMENT:n}),u(u.S+u.F*i(function(){m.of.call(d,1)}),s,{from:It,of:Tt}),"BYTES_PER_ELEMENT"in _||h(_,"BYTES_PER_ELEMENT",n),u(u.P,s,Nt),R(s),u(u.P+u.F*_t,s,{set:Rt}),u(u.P+u.F*!P,s,Ct),r||_.toString==ht||(_.toString=ht),u(u.P+u.F*i(function(){new d(1).slice()}),s,{slice:Lt}),u(u.P+u.F*(i(function(){return[1,2].toLocaleString()!=new d([1,2]).toLocaleString()})||!i(function(){_.toLocaleString.call([1,2])})),s,{toLocaleString:Ft}),N[s]=P?k:I,r||P||h(_,dt,I)}}else t.exports=function(){}},function(t,n,e){var r=e(7);t.exports=function(t,n){if(!r(t))return t;var e,o;if(n&&"function"==typeof(e=t.toString)&&!r(o=e.call(t)))return o;if("function"==typeof(e=t.valueOf)&&!r(o=e.call(t)))return o;if(!n&&"function"==typeof(e=t.toString)&&!r(o=e.call(t)))return o;throw TypeError("Can't convert object to primitive value")}},function(t,n,e){var r=e(33)("meta"),o=e(7),i=e(16),u=e(12).f,c=0,a=Object.isExtensible||function(){return!0},s=!e(5)(function(){return a(Object.preventExtensions({}))}),f=function(t){u(t,r,{value:{i:"O"+ ++c,w:{}}})},l=t.exports={KEY:r,NEED:!1,fastKey:function(t,n){if(!o(t))return"symbol"==typeof t?t:("string"==typeof t?"S":"P")+t;if(!i(t,r)){if(!a(t))return"F";if(!n)return"E";f(t)}return t[r].i},getWeak:function(t,n){if(!i(t,r)){if(!a(t))return!0;if(!n)return!1;f(t)}return t[r].w},onFreeze:function(t){return s&&l.NEED&&a(t)&&!i(t,r)&&f(t),t}}},function(t,n,e){"use strict";e.r(n),e.d(n,"lookupItemsByID",function(){return l}),e.d(n,"lookupItemsByUser",function(){return v}),e.d(n,"handleFetchErrors",function(){return m}),e.d(n,"getRedditToken",function(){return b}),e.d(n,"getAuth",function(){return A}),e.d(n,"getLocalAuth",function(){return x}),e.d(n,"getCookie",function(){return w}),e.d(n,"getLocalOrAppAuth",function(){return S}),e.d(n,"getLoggedinUser",function(){return O});var r=e(1),o=e(3),i=e.n(o);function u(t,n,e,r,o,i,u){try{var c=t[i](u),a=c.value}catch(t){return void e(t)}c.done?n(a):Promise.resolve(a).then(r,o)}function c(t,n){var e=Object.keys(t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);n&&(r=r.filter(function(n){return Object.getOwnPropertyDescriptor(t,n).enumerable})),e.push.apply(e,r)}return e}function a(t){for(var n=1;n<arguments.length;n++){var e=null!=arguments[n]?arguments[n]:{};n%2?c(e,!0).forEach(function(n){s(t,n,e[n])}):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(e)):c(e).forEach(function(n){Object.defineProperty(t,n,Object.getOwnPropertyDescriptor(e,n))})}return t}function s(t,n,e){return n in t?Object.defineProperty(t,n,{value:e,enumerable:!0,configurable:!0,writable:!0}):t[n]=e,t}function f(t){return function(t){if(Array.isArray(t)){for(var n=0,e=new Array(t.length);n<t.length;n++)e[n]=t[n];return e}}(t)||function(t){if(Symbol.iterator in Object(t)||"[object Arguments]"===Object.prototype.toString.call(t))return Array.from(t)}(t)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}var l=function(t,n){var e=arguments.length>2&&void 0!==arguments[2]&&arguments[2],r=arguments.length>3&&void 0!==arguments[3]&&arguments[3],o=arguments.length>4&&void 0!==arguments[4]?arguments[4]:[],i={id:t,raw_json:1};r&&(i.quarantined_subreddits=o.join(","));var u="?"+Object.keys(i).map(function(t){return"".concat(t,"=").concat(i[t])}).join("&");return p.apply(void 0,f(_("api/info",u,n,r)).concat([e]))},h={name:"reddit_session",url:"https://reddit.com"},g=["name","value","domain","path","secure","httpOnly","storeId"],d=function(t){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"https://reddit.com";if(!t)return t;var e=Object.keys(t).filter(function(t){return g.includes(t)}).reduce(function(n,e){return a({},n,s({},e,t[e]))},{});return e.url=n,e},p=function(){var t,n=(t=regeneratorRuntime.mark(function t(n,e){var r,o,u,c=arguments;return regeneratorRuntime.wrap(function(t){for(;;)switch(t.prev=t.next){case 0:return r=c.length>2&&void 0!==c[2]&&c[2],t.next=3,i.a.cookies.set({domain:"reddit.com",url:"https://reddit.com",name:"_options",value:"{%22pref_quarantine_optin%22:true}"});case 3:if(!r){t.next=12;break}return t.t0=d,t.next=7,i.a.cookies.get(h);case 7:if(t.t1=t.sent,!(o=(0,t.t0)(t.t1))){t.next=12;break}return t.next=12,i.a.cookies.remove(h);case 12:if(e||(e={}),e.cache="reload",u=fetch(n,e).then(m).then(y).catch(console.log),!o){t.next=18;break}return t.next=18,i.a.cookies.set(o);case 18:return t.abrupt("return",u);case 19:case"end":return t.stop()}},t)}),function(){var n=this,e=arguments;return new Promise(function(r,o){var i=t.apply(n,e);function c(t){u(i,r,o,c,a,"next",t)}function a(t){u(i,r,o,c,a,"throw",t)}c(void 0)})});return function(t,e){return n.apply(this,arguments)}}(),v=function(t,n,e,r,o,i,u){var c={limit:100,sort:e,raw_json:1};n&&(c.after=n),r&&(c.t=r);var a="user/".concat(t,"/overview.json"),s="?"+Object.keys(c).map(function(t){return"".concat(t,"=").concat(c[t])}).join("&");return p.apply(void 0,f(_(a,s,u,i)).concat([o]))},m=function(t){if(!t.ok)throw Error(t.statusText);return t.json()},y=function(t){if(t&&t.user&&t.user.items)return t;if(!t||!t.data||!t.data.children)throw Error("reddit data is not defined");return t.data.children},b=function(t){if(!t||!t.access_token)throw Error("access token is not defined");return t.access_token},A=function(){return Object(r.getOptions)(function(t,n,e){var r="SEw1uvRd6kxFEw";if(e.custom_clientid&&"testing"===(r=e.custom_clientid))return"none";var o={headers:{Authorization:"Basic ".concat(btoa("".concat(r,":"))),"Content-Type":"application/x-www-form-urlencoded; charset=utf-8"},method:"POST",body:"grant_type=".concat(encodeURIComponent("https://oauth.reddit.com/grants/installed_client"),"&device_id=DO_NOT_TRACK_THIS_DEVICE")};return fetch("https://www.reddit.com/api/v1/access_token",o).then(m).then(b).then(function(t){return{headers:{Authorization:"bearer ".concat(t)}}}).catch(console.log)})},x=function(){return fetch("https://mod.reddit.com/mail/all").then(function(t){w({url:"https://mod.reddit.com",name:"token"}).then(function(t){if(t){var n=new RegExp("[^A-Za-z0-9+/].*?$"),e=t.value.replace(n,""),r=atob(e),o=JSON.parse(r);return"accessToken"in o&&o.accessToken?{headers:{Authorization:"bearer ".concat(o.accessToken)}}:null}return null})})},w=function(t){var n=t.url,e=t.name;return location.protocol.match(/^http/)?i.a.runtime.sendMessage({action:"get-cookie",options:{url:n,name:e}}).then(function(t){return t.cookie}):i.a.cookies.get({url:n,name:e})},_=function(t,n,e,r){if(e&&"none"!==e){var o="https://oauth.reddit.com/",i=t+n;return r&&(o="https://cred2.reveddit.com/",i+="&give_it_to_me=1"),[o+i,e]}var u=(r?"https://wred.reveddit.com/":"https://www.reddit.com/")+t;return"api/info"===t&&(u+=".json"),[u+=n]},S=function(){return x().then(function(t){return t||A()}).catch(console.log)},O=function(){return fetch("https://www.reddit.com/api/me.json").then(m).then(E).catch(console.log)},E=function(t){if(!t||!t.data||!t.data.name)throw Error("reddit username is not defined");return t.data.name}},function(t,n){t.exports=function(t,n){return{enumerable:!(1&t),configurable:!(2&t),writable:!(4&t),value:n}}},function(t,n){var e=0,r=Math.random();t.exports=function(t){return"Symbol(".concat(void 0===t?"":t,")_",(++e+r).toString(36))}},function(t,n){t.exports=!1},function(t,n,e){var r=e(96),o=e(69);t.exports=Object.keys||function(t){return r(t,o)}},function(t,n,e){var r=e(22),o=Math.max,i=Math.min;t.exports=function(t,n){return(t=r(t))<0?o(t+n,0):i(t,n)}},function(t,n,e){var r=e(6),o=e(97),i=e(69),u=e(68)("IE_PROTO"),c=function(){},a=function(){var t,n=e(66)("iframe"),r=i.length;for(n.style.display="none",e(70).appendChild(n),n.src="javascript:",(t=n.contentWindow.document).open(),t.write("<script>document.F=Object<\/script>"),t.close(),a=t.F;r--;)delete a.prototype[i[r]];return a()};t.exports=Object.create||function(t,n){var e;return null!==t?(c.prototype=r(t),e=new c,c.prototype=null,e[u]=t):e=a(),void 0===n?e:o(e,n)}},function(t,n,e){var r=e(96),o=e(69).concat("length","prototype");n.f=Object.getOwnPropertyNames||function(t){return r(t,o)}},function(t,n,e){var r=e(16),o=e(13),i=e(68)("IE_PROTO"),u=Object.prototype;t.exports=Object.getPrototypeOf||function(t){return t=o(t),r(t,i)?t[i]:"function"==typeof t.constructor&&t instanceof t.constructor?t.constructor.prototype:t instanceof Object?u:null}},function(t,n,e){var r=e(8)("unscopables"),o=Array.prototype;null==o[r]&&e(17)(o,r,{}),t.exports=function(t){o[r][t]=!0}},function(t,n,e){var r=e(7);t.exports=function(t,n){if(!r(t)||t._t!==n)throw TypeError("Incompatible receiver, "+n+" required!");return t}},function(t,n,e){var r=e(12).f,o=e(16),i=e(8)("toStringTag");t.exports=function(t,n,e){t&&!o(t=e?t:t.prototype,i)&&r(t,i,{configurable:!0,value:n})}},function(t,n,e){var r=e(0),o=e(27),i=e(5),u=e(72),c="["+u+"]",a=RegExp("^"+c+c+"*"),s=RegExp(c+c+"*$"),f=function(t,n,e){var o={},c=i(function(){return!!u[t]()||"​"!="​"[t]()}),a=o[t]=c?n(l):u[t];e&&(o[e]=a),r(r.P+r.F*c,"String",o)},l=f.trim=function(t,n){return t=String(o(t)),1&n&&(t=t.replace(a,"")),2&n&&(t=t.replace(s,"")),t};t.exports=f},function(t,n){t.exports={}},function(t,n,e){"use strict";var r=e(4),o=e(12),i=e(11),u=e(8)("species");t.exports=function(t){var n=r[t];i&&n&&!n[u]&&o.f(n,u,{configurable:!0,get:function(){return this}})}},function(t,n){t.exports=function(t,n,e,r){if(!(t instanceof n)||void 0!==r&&r in t)throw TypeError(e+": incorrect invocation!");return t}},function(t,n,e){var r=e(14);t.exports=function(t,n,e){for(var o in n)r(t,o,n[o],e);return t}},function(t,n,e){var r=e(26);t.exports=Object("z").propertyIsEnumerable(0)?Object:function(t){return"String"==r(t)?t.split(""):Object(t)}},function(t,n){n.f={}.propertyIsEnumerable},function(t,n,e){var r=e(26),o=e(8)("toStringTag"),i="Arguments"==r(function(){return arguments}());t.exports=function(t){var n,e,u;return void 0===t?"Undefined":null===t?"Null":"string"==typeof(e=function(t,n){try{return t[n]}catch(t){}}(n=Object(t),o))?e:i?r(n):"Object"==(u=r(n))&&"function"==typeof n.callee?"Arguments":u}},function(t,n,e){var r=e(6),o=e(21),i=e(8)("species");t.exports=function(t,n){var e,u=r(t).constructor;return void 0===u||null==(e=r(u)[i])?n:o(e)}},function(t,n,e){var r=e(10),o=e(4),i=o["__core-js_shared__"]||(o["__core-js_shared__"]={});(t.exports=function(t,n){return i[t]||(i[t]=void 0!==n?n:{})})("versions",[]).push({version:r.version,mode:e(34)?"pure":"global",copyright:"© 2019 Denis Pushkarev (zloirock.ru)"})},function(t,n,e){var r=e(18),o=e(9),i=e(36);t.exports=function(t){return function(n,e,u){var c,a=r(n),s=o(a.length),f=i(u,s);if(t&&e!=e){for(;s>f;)if((c=a[f++])!=c)return!0}else for(;s>f;f++)if((t||f in a)&&a[f]===e)return t||f||0;return!t&&-1}}},function(t,n){n.f=Object.getOwnPropertySymbols},function(t,n,e){var r=e(26);t.exports=Array.isArray||function(t){return"Array"==r(t)}},function(t,n,e){var r=e(8)("iterator"),o=!1;try{var i=[7][r]();i.return=function(){o=!0},Array.from(i,function(){throw 2})}catch(t){}t.exports=function(t,n){if(!n&&!o)return!1;var e=!1;try{var i=[7],u=i[r]();u.next=function(){return{done:e=!0}},i[r]=function(){return u},t(i)}catch(t){}return e}},function(t,n,e){"use strict";var r=e(6);t.exports=function(){var t=r(this),n="";return t.global&&(n+="g"),t.ignoreCase&&(n+="i"),t.multiline&&(n+="m"),t.unicode&&(n+="u"),t.sticky&&(n+="y"),n}},function(t,n,e){"use strict";var r=e(50),o=RegExp.prototype.exec;t.exports=function(t,n){var e=t.exec;if("function"==typeof e){var i=e.call(t,n);if("object"!=typeof i)throw new TypeError("RegExp exec method returned something other than an Object or null");return i}if("RegExp"!==r(t))throw new TypeError("RegExp#exec called on incompatible receiver");return o.call(t,n)}},function(t,n,e){"use strict";e(114);var r=e(14),o=e(17),i=e(5),u=e(27),c=e(8),a=e(87),s=c("species"),f=!i(function(){var t=/./;return t.exec=function(){var t=[];return t.groups={a:"7"},t},"7"!=="".replace(t,"$<a>")}),l=function(){var t=/(?:)/,n=t.exec;t.exec=function(){return n.apply(this,arguments)};var e="ab".split(t);return 2===e.length&&"a"===e[0]&&"b"===e[1]}();t.exports=function(t,n,e){var h=c(t),g=!i(function(){var n={};return n[h]=function(){return 7},7!=""[t](n)}),d=g?!i(function(){var n=!1,e=/a/;return e.exec=function(){return n=!0,null},"split"===t&&(e.constructor={},e.constructor[s]=function(){return e}),e[h](""),!n}):void 0;if(!g||!d||"replace"===t&&!f||"split"===t&&!l){var p=/./[h],v=e(u,h,""[t],function(t,n,e,r,o){return n.exec===a?g&&!o?{done:!0,value:p.call(n,e,r)}:{done:!0,value:t.call(e,n,r)}:{done:!1}}),m=v[0],y=v[1];r(String.prototype,t,m),o(RegExp.prototype,h,2==n?function(t,n){return y.call(t,this,n)}:function(t){return y.call(t,this)})}}},function(t,n,e){var r=e(20),o=e(109),i=e(82),u=e(6),c=e(9),a=e(84),s={},f={};(n=t.exports=function(t,n,e,l,h){var g,d,p,v,m=h?function(){return t}:a(t),y=r(e,l,n?2:1),b=0;if("function"!=typeof m)throw TypeError(t+" is not iterable!");if(i(m)){for(g=c(t.length);g>b;b++)if((v=n?y(u(d=t[b])[0],d[1]):y(t[b]))===s||v===f)return v}else for(p=m.call(t);!(d=p.next()).done;)if((v=o(p,y,d.value,n))===s||v===f)return v}).BREAK=s,n.RETURN=f},function(t,n,e){var r=e(4).navigator;t.exports=r&&r.userAgent||""},function(t,n,e){"use strict";var r=e(4),o=e(0),i=e(14),u=e(47),c=e(30),a=e(60),s=e(46),f=e(7),l=e(5),h=e(56),g=e(42),d=e(73);t.exports=function(t,n,e,p,v,m){var y=r[t],b=y,A=v?"set":"add",x=b&&b.prototype,w={},_=function(t){var n=x[t];i(x,t,"delete"==t?function(t){return!(m&&!f(t))&&n.call(this,0===t?0:t)}:"has"==t?function(t){return!(m&&!f(t))&&n.call(this,0===t?0:t)}:"get"==t?function(t){return m&&!f(t)?void 0:n.call(this,0===t?0:t)}:"add"==t?function(t){return n.call(this,0===t?0:t),this}:function(t,e){return n.call(this,0===t?0:t,e),this})};if("function"==typeof b&&(m||x.forEach&&!l(function(){(new b).entries().next()}))){var S=new b,O=S[A](m?{}:-0,1)!=S,E=l(function(){S.has(1)}),j=h(function(t){new b(t)}),k=!m&&l(function(){for(var t=new b,n=5;n--;)t[A](n,n);return!t.has(-0)});j||((b=n(function(n,e){s(n,b,t);var r=d(new y,n,b);return null!=e&&a(e,v,r[A],r),r})).prototype=x,x.constructor=b),(E||k)&&(_("delete"),_("has"),v&&_("get")),(k||O)&&_(A),m&&x.clear&&delete x.clear}else b=p.getConstructor(n,t,v,A),u(b.prototype,e),c.NEED=!0;return g(b,t),w[t]=b,o(o.G+o.W+o.F*(b!=y),w),m||p.setStrong(b,t,v),b}},function(t,n,e){for(var r,o=e(4),i=e(17),u=e(33),c=u("typed_array"),a=u("view"),s=!(!o.ArrayBuffer||!o.DataView),f=s,l=0,h="Int8Array,Uint8Array,Uint8ClampedArray,Int16Array,Uint16Array,Int32Array,Uint32Array,Float32Array,Float64Array".split(",");l<9;)(r=o[h[l++]])?(i(r.prototype,c,!0),i(r.prototype,a,!0)):f=!1;t.exports={ABV:s,CONSTR:f,TYPED:c,VIEW:a}},function(t,n,e){"use strict";e.r(n),e.d(n,"setTextAndFunction_subscribe",function(){return f}),e.d(n,"setTextAndFunction_unsubscribe",function(){return l});var r=e(1),o=e(2),i=e(65);e(3);function u(t,n,e,r,o,i,u){try{var c=t[i](u),a=c.value}catch(t){return void e(t)}c.done?n(a):Promise.resolve(a).then(r,o)}function c(t){return function(){var n=this,e=arguments;return new Promise(function(r,o){var i=t.apply(n,e);function c(t){u(i,r,o,c,a,"next",t)}function a(t){u(i,r,o,c,a,"throw",t)}c(void 0)})}}var a="unsubscribe-rev",s="subscribe-rev";location.hostname.match(/reveddit\.com$/)&&(a="unsubscribe",s="subscribe");var f=function(t,n,e){return $(n).text(s).off("click").click(function(n){return h(t,n.target,e)})},l=function(t,n,e){return $(n).text(a).off("click").click(function(n){return g(t,n.target,e)})},h=function(t,n){var e=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"";return Object(r.subscribeId)(t,c(regeneratorRuntime.mark(function u(){return regeneratorRuntime.wrap(function(u){for(;;)switch(u.prev=u.next){case 0:return l(t,n,e),u.next=3,Object(i.b)(t,window.location.href);case 3:e&&Object(r.getLocalStorageItems)("other",!1).then(function(n){var i=n[t];if(i){var u=new o.LocalStorageItem({object:i});u.setText(e),n[t]=u,Object(r.saveLocalStorageItems)("other",!1,n)}});case 4:case"end":return u.stop()}},u)}))),!1},g=function(t,n,e){return Object(r.unsubscribeId)(t,function(){f(t,n,e)}),!1}},function(t,n,e){"use strict";e.d(n,"b",function(){return d}),e.d(n,"a",function(){return p});var r=e(31),o=e(1),i=e(2),u=e(3),c=e.n(u);function a(t,n,e){return n in t?Object.defineProperty(t,n,{value:e,enumerable:!0,configurable:!0,writable:!0}):t[n]=e,t}function s(t,n,e,r,o,i,u){try{var c=t[i](u),a=c.value}catch(t){return void e(t)}c.done?n(a):Promise.resolve(a).then(r,o)}function f(t){return function(){var n=this,e=arguments;return new Promise(function(r,o){var i=t.apply(n,e);function u(t){s(i,r,o,u,c,"next",t)}function c(t){s(i,r,o,u,c,"throw",t)}u(void 0)})}}var l=0,h=1,g=2,d=function(t,n){var e=l;return n.match(/^https:\/\/www.reveddit.com/)&&(e=h),chrome.storage.sync.get(null,function(n){Object(r.getAuth)().then(function(r){return m([t],"other",!1,r,n,e,{})})})},p=function(){chrome.storage.sync.get(null,function(t){var n=Object.keys(t.user_subscriptions),e=Object.keys(t.other_subscriptions);if(n.length||e.length){var o=Math.floor(new Date/1e3);(!t.last_check_quarantined||o-t.last_check_quarantined>432e3)&&(t.tempVar_monitor_quarantined=!0),Object(r.getAuth)().then(function(e){return function(t,n){var e=Object.keys(n.other_subscriptions);e.length&&m(e,"other",!1,t,n,g)}(e,t),v(n,e,t)}).then(function(){var n={last_check:o};t.tempVar_monitor_quarantined&&(n.last_check_quarantined=o),t.tempVar_quarantined_content_found&&(n.options=t.options,n.options.monitor_quarantined=!0),chrome.storage.sync.set(n)})}})},v=function(){var t=f(regeneratorRuntime.mark(function t(n,e,o){var i;return regeneratorRuntime.wrap(function(t){for(;;)switch(t.prev=t.next){case 0:if(!n.length){t.next=3;break}return i=n[0],t.abrupt("return",Object(r.lookupItemsByUser)(i,"","new","",o.options.monitor_quarantined,o.tempVar_monitor_quarantined,e).then(function(t){if(t){var r=[],u=new Set,c={};return t.user&&t.user.items&&(t=t.user.items),t.forEach(function(t){t.data&&t.data.name&&(t=t.data),r.push(t.name),c[t.name]=t,t.quarantine&&(u.add(t.subreddit),o.tempVar_quarantined_content_found=!0)}),m(r,i,!0,e,o,g,c,Array.from(u)).then(function(){return v(n.slice(1),e,o)})}}));case 3:case"end":return t.stop()}},t)}));return function(n,e,r){return t.apply(this,arguments)}}();var m=function(){var t=f(regeneratorRuntime.mark(function t(n,e,u,s,f,l){var h,g,d,p,v=arguments;return regeneratorRuntime.wrap(function(t){for(;;)switch(t.prev=t.next){case 0:return h=v.length>6&&void 0!==v[6]?v[6]:{},g=v.length>7&&void 0!==v[7]?v[7]:[],p=f.options.monitor_quarantined,d=location.protocol.match(/^http/)?c.a.runtime.sendMessage({action:"get-reddit-items-by-id",ids:n,monitor_quarantined:p}):Object(r.lookupItemsByID)(n,s,p,f.tempVar_monitor_quarantined,g),t.abrupt("return",d.then(function(t){if(t){var n=Array.isArray(t)?t:t.items;if(n){var r=f.options.removal_status,c=f.options.lock_status,s=f.options.seen_count||o.SEEN_COUNT_DEFAULT,g=Object(o.getObjectNamesForThing)(e,u),d=f[g.removed]||{},p=f[g.approved]||{},v=f[g.locked]||{},m=f[g.unlocked]||{},b=f[g.changes]||[];u||(h={});var A=[],x=[],w=[],_=[];n.forEach(function(t){var n=t.data;u||(h[n.name]=n),Object(i.isRemovedItem)(n)?A.push(n.name):x.push(n.name),n.locked?w.push(n.name):_.push(n.name)});var S={},O=[],E=0;return Object(o.getLocalStorageItems)(e,u).then(function(t){var n;return r.track&&(E+=y(A,o.REMOVED,"mod removed",d,x,o.APPROVED,"approved",p,b,h,r.notify,S,O,u,l,t,s)),c.track&&(E+=y(w,o.LOCKED,"locked",v,_,o.UNLOCKED,"unlocked",m,b,h,c.notify,S,O,u,l,t,s)),E&&O.length&&Object(i.createNotification)({notificationId:e,title:e,message:"".concat(E," new [").concat(O.join(", "),"] actions, click to view")}),chrome.storage.sync.set((a(n={},g.removed,Object(i.trimDict_by_numberValuedAttribute)(d,o.MAX_SYNC_STORAGE_ITEMS_PER_OBJECT,"c")),a(n,g.approved,Object(i.trimDict_by_numberValuedAttribute)(p,o.MAX_SYNC_STORAGE_ITEMS_PER_OBJECT,"c")),a(n,g.locked,Object(i.trimDict_by_numberValuedAttribute)(v,o.MAX_SYNC_STORAGE_ITEMS_PER_OBJECT,"c")),a(n,g.unlocked,Object(i.trimDict_by_numberValuedAttribute)(m,o.MAX_SYNC_STORAGE_ITEMS_PER_OBJECT,"c")),a(n,g.changes,b.slice(-o.MAX_SYNC_STORAGE_CHANGES)),n),function(){return Object(i.updateBadgeUnseenCount)(),Object(o.addLocalStorageItems)(S,e,u)})})}}}));case 5:case"end":return t.stop()}},t)}));return function(n,e,r,o,i,u){return t.apply(this,arguments)}}();function y(t,n,e,r,u,c,a,s,f,g,d,p,v,m,y,b,A){var x=[],w=[],_=[],S=Math.floor(new Date/1e3);t.forEach(function(t){var e=g[t];if(m||b[t]||(p[t]=new i.LocalStorageItem({item:e,observed_utc:S})),!(t in r)){var u=!0;if((y===l&&n!==o.REMOVED||y===h)&&(u=!1),r[t]=new i.ItemForStorage(e.created_utc,u),delete s[t],u){var c=n;Object(i.isUserDeletedItem)(e)?(c=o.DELETED,_.push(t)):x.push(t),f.push(new i.ChangeForStorage({id:t,observed_utc:S,change_type:c}))}m&&(p[t]=new i.LocalStorageItem({item:e,observed_utc:S}))}}),u.forEach(function(t){var n=g[t];if(m||b[t]||(p[t]=new i.LocalStorageItem({item:n,observed_utc:S})),t in r){var e=new i.LocalStorageItem({object:b[t]});e.incrementSeenCount();var o=e.getSeenCount();o>=A?(s[t]=new i.ItemForStorage(n.created_utc,!0),delete r[t],f.push(new i.ChangeForStorage({id:t,observed_utc:S,change_type:c,seen_count:o})),w.push(t),p[t]=new i.LocalStorageItem({item:n,observed_utc:S})):p[t]=e}else s[t]=new i.ItemForStorage(n.created_utc,!1)});var O=x.length+w.length+_.length;return d&&O&&(x.length&&v.push(e),_.length&&v.push("user deleted"),w.length&&v.push(a)),O}},function(t,n,e){var r=e(7),o=e(4).document,i=r(o)&&r(o.createElement);t.exports=function(t){return i?o.createElement(t):{}}},function(t,n,e){n.f=e(8)},function(t,n,e){var r=e(52)("keys"),o=e(33);t.exports=function(t){return r[t]||(r[t]=o(t))}},function(t,n){t.exports="constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf".split(",")},function(t,n,e){var r=e(4).document;t.exports=r&&r.documentElement},function(t,n,e){var r=e(7),o=e(6),i=function(t,n){if(o(t),!r(n)&&null!==n)throw TypeError(n+": can't set as prototype!")};t.exports={set:Object.setPrototypeOf||("__proto__"in{}?function(t,n,r){try{(r=e(20)(Function.call,e(23).f(Object.prototype,"__proto__").set,2))(t,[]),n=!(t instanceof Array)}catch(t){n=!0}return function(t,e){return i(t,e),n?t.__proto__=e:r(t,e),t}}({},!1):void 0),check:i}},function(t,n){t.exports="\t\n\v\f\r   ᠎             　\u2028\u2029\ufeff"},function(t,n,e){var r=e(7),o=e(71).set;t.exports=function(t,n,e){var i,u=n.constructor;return u!==e&&"function"==typeof u&&(i=u.prototype)!==e.prototype&&r(i)&&o&&o(t,i),t}},function(t,n,e){"use strict";var r=e(22),o=e(27);t.exports=function(t){var n=String(o(this)),e="",i=r(t);if(i<0||i==1/0)throw RangeError("Count can't be negative");for(;i>0;(i>>>=1)&&(n+=n))1&i&&(e+=n);return e}},function(t,n){t.exports=Math.sign||function(t){return 0==(t=+t)||t!=t?t:t<0?-1:1}},function(t,n){var e=Math.expm1;t.exports=!e||e(10)>22025.465794806718||e(10)<22025.465794806718||-2e-17!=e(-2e-17)?function(t){return 0==(t=+t)?t:t>-1e-6&&t<1e-6?t+t*t/2:Math.exp(t)-1}:e},function(t,n,e){var r=e(22),o=e(27);t.exports=function(t){return function(n,e){var i,u,c=String(o(n)),a=r(e),s=c.length;return a<0||a>=s?t?"":void 0:(i=c.charCodeAt(a))<55296||i>56319||a+1===s||(u=c.charCodeAt(a+1))<56320||u>57343?t?c.charAt(a):i:t?c.slice(a,a+2):u-56320+(i-55296<<10)+65536}}},function(t,n,e){"use strict";var r=e(34),o=e(0),i=e(14),u=e(17),c=e(44),a=e(108),s=e(42),f=e(39),l=e(8)("iterator"),h=!([].keys&&"next"in[].keys()),g=function(){return this};t.exports=function(t,n,e,d,p,v,m){a(e,n,d);var y,b,A,x=function(t){if(!h&&t in O)return O[t];switch(t){case"keys":case"values":return function(){return new e(this,t)}}return function(){return new e(this,t)}},w=n+" Iterator",_="values"==p,S=!1,O=t.prototype,E=O[l]||O["@@iterator"]||p&&O[p],j=E||x(p),k=p?_?x("entries"):j:void 0,P="Array"==n&&O.entries||E;if(P&&(A=f(P.call(new t)))!==Object.prototype&&A.next&&(s(A,w,!0),r||"function"==typeof A[l]||u(A,l,g)),_&&E&&"values"!==E.name&&(S=!0,j=function(){return E.call(this)}),r&&!m||!h&&!S&&O[l]||u(O,l,j),c[n]=j,c[w]=g,p)if(y={values:_?j:x("values"),keys:v?j:x("keys"),entries:k},m)for(b in y)b in O||i(O,b,y[b]);else o(o.P+o.F*(h||S),n,y);return y}},function(t,n,e){var r=e(80),o=e(27);t.exports=function(t,n,e){if(r(n))throw TypeError("String#"+e+" doesn't accept regex!");return String(o(t))}},function(t,n,e){var r=e(7),o=e(26),i=e(8)("match");t.exports=function(t){var n;return r(t)&&(void 0!==(n=t[i])?!!n:"RegExp"==o(t))}},function(t,n,e){var r=e(8)("match");t.exports=function(t){var n=/./;try{"/./"[t](n)}catch(e){try{return n[r]=!1,!"/./"[t](n)}catch(t){}}return!0}},function(t,n,e){var r=e(44),o=e(8)("iterator"),i=Array.prototype;t.exports=function(t){return void 0!==t&&(r.Array===t||i[o]===t)}},function(t,n,e){"use strict";var r=e(12),o=e(32);t.exports=function(t,n,e){n in t?r.f(t,n,o(0,e)):t[n]=e}},function(t,n,e){var r=e(50),o=e(8)("iterator"),i=e(44);t.exports=e(10).getIteratorMethod=function(t){if(null!=t)return t[o]||t["@@iterator"]||i[r(t)]}},function(t,n,e){"use strict";var r=e(13),o=e(36),i=e(9);t.exports=function(t){for(var n=r(this),e=i(n.length),u=arguments.length,c=o(u>1?arguments[1]:void 0,e),a=u>2?arguments[2]:void 0,s=void 0===a?e:o(a,e);s>c;)n[c++]=t;return n}},function(t,n,e){"use strict";var r=e(40),o=e(113),i=e(44),u=e(18);t.exports=e(78)(Array,"Array",function(t,n){this._t=u(t),this._i=0,this._k=n},function(){var t=this._t,n=this._k,e=this._i++;return!t||e>=t.length?(this._t=void 0,o(1)):o(0,"keys"==n?e:"values"==n?t[e]:[e,t[e]])},"values"),i.Arguments=i.Array,r("keys"),r("values"),r("entries")},function(t,n,e){"use strict";var r,o,i=e(57),u=RegExp.prototype.exec,c=String.prototype.replace,a=u,s=(r=/a/,o=/b*/g,u.call(r,"a"),u.call(o,"a"),0!==r.lastIndex||0!==o.lastIndex),f=void 0!==/()??/.exec("")[1];(s||f)&&(a=function(t){var n,e,r,o,a=this;return f&&(e=new RegExp("^"+a.source+"$(?!\\s)",i.call(a))),s&&(n=a.lastIndex),r=u.call(a,t),s&&r&&(a.lastIndex=a.global?r.index+r[0].length:n),f&&r&&r.length>1&&c.call(r[0],e,function(){for(o=1;o<arguments.length-2;o++)void 0===arguments[o]&&(r[o]=void 0)}),r}),t.exports=a},function(t,n,e){"use strict";var r=e(77)(!0);t.exports=function(t,n,e){return n+(e?r(t,n).length:1)}},function(t,n,e){var r,o,i,u=e(20),c=e(102),a=e(70),s=e(66),f=e(4),l=f.process,h=f.setImmediate,g=f.clearImmediate,d=f.MessageChannel,p=f.Dispatch,v=0,m={},y=function(){var t=+this;if(m.hasOwnProperty(t)){var n=m[t];delete m[t],n()}},b=function(t){y.call(t.data)};h&&g||(h=function(t){for(var n=[],e=1;arguments.length>e;)n.push(arguments[e++]);return m[++v]=function(){c("function"==typeof t?t:Function(t),n)},r(v),v},g=function(t){delete m[t]},"process"==e(26)(l)?r=function(t){l.nextTick(u(y,t,1))}:p&&p.now?r=function(t){p.now(u(y,t,1))}:d?(i=(o=new d).port2,o.port1.onmessage=b,r=u(i.postMessage,i,1)):f.addEventListener&&"function"==typeof postMessage&&!f.importScripts?(r=function(t){f.postMessage(t+"","*")},f.addEventListener("message",b,!1)):r="onreadystatechange"in s("script")?function(t){a.appendChild(s("script")).onreadystatechange=function(){a.removeChild(this),y.call(t)}}:function(t){setTimeout(u(y,t,1),0)}),t.exports={set:h,clear:g}},function(t,n,e){"use strict";var r=e(4),o=e(11),i=e(34),u=e(63),c=e(17),a=e(47),s=e(5),f=e(46),l=e(22),h=e(9),g=e(121),d=e(38).f,p=e(12).f,v=e(85),m=e(42),y="prototype",b="Wrong index!",A=r.ArrayBuffer,x=r.DataView,w=r.Math,_=r.RangeError,S=r.Infinity,O=A,E=w.abs,j=w.pow,k=w.floor,P=w.log,I=w.LN2,T=o?"_b":"buffer",M=o?"_l":"byteLength",F=o?"_o":"byteOffset";function N(t,n,e){var r,o,i,u=new Array(e),c=8*e-n-1,a=(1<<c)-1,s=a>>1,f=23===n?j(2,-24)-j(2,-77):0,l=0,h=t<0||0===t&&1/t<0?1:0;for((t=E(t))!=t||t===S?(o=t!=t?1:0,r=a):(r=k(P(t)/I),t*(i=j(2,-r))<1&&(r--,i*=2),(t+=r+s>=1?f/i:f*j(2,1-s))*i>=2&&(r++,i/=2),r+s>=a?(o=0,r=a):r+s>=1?(o=(t*i-1)*j(2,n),r+=s):(o=t*j(2,s-1)*j(2,n),r=0));n>=8;u[l++]=255&o,o/=256,n-=8);for(r=r<<n|o,c+=n;c>0;u[l++]=255&r,r/=256,c-=8);return u[--l]|=128*h,u}function L(t,n,e){var r,o=8*e-n-1,i=(1<<o)-1,u=i>>1,c=o-7,a=e-1,s=t[a--],f=127&s;for(s>>=7;c>0;f=256*f+t[a],a--,c-=8);for(r=f&(1<<-c)-1,f>>=-c,c+=n;c>0;r=256*r+t[a],a--,c-=8);if(0===f)f=1-u;else{if(f===i)return r?NaN:s?-S:S;r+=j(2,n),f-=u}return(s?-1:1)*r*j(2,f-n)}function R(t){return t[3]<<24|t[2]<<16|t[1]<<8|t[0]}function C(t){return[255&t]}function D(t){return[255&t,t>>8&255]}function U(t){return[255&t,t>>8&255,t>>16&255,t>>24&255]}function $(t){return N(t,52,8)}function B(t){return N(t,23,4)}function V(t,n,e){p(t[y],n,{get:function(){return this[e]}})}function W(t,n,e,r){var o=g(+e);if(o+n>t[M])throw _(b);var i=t[T]._b,u=o+t[F],c=i.slice(u,u+n);return r?c:c.reverse()}function q(t,n,e,r,o,i){var u=g(+e);if(u+n>t[M])throw _(b);for(var c=t[T]._b,a=u+t[F],s=r(+o),f=0;f<n;f++)c[a+f]=s[i?f:n-f-1]}if(u.ABV){if(!s(function(){A(1)})||!s(function(){new A(-1)})||s(function(){return new A,new A(1.5),new A(NaN),"ArrayBuffer"!=A.name})){for(var G,z=(A=function(t){return f(this,A),new O(g(t))})[y]=O[y],Y=d(O),J=0;Y.length>J;)(G=Y[J++])in A||c(A,G,O[G]);i||(z.constructor=A)}var K=new x(new A(2)),X=x[y].setInt8;K.setInt8(0,2147483648),K.setInt8(1,2147483649),!K.getInt8(0)&&K.getInt8(1)||a(x[y],{setInt8:function(t,n){X.call(this,t,n<<24>>24)},setUint8:function(t,n){X.call(this,t,n<<24>>24)}},!0)}else A=function(t){f(this,A,"ArrayBuffer");var n=g(t);this._b=v.call(new Array(n),0),this[M]=n},x=function(t,n,e){f(this,x,"DataView"),f(t,A,"DataView");var r=t[M],o=l(n);if(o<0||o>r)throw _("Wrong offset!");if(o+(e=void 0===e?r-o:h(e))>r)throw _("Wrong length!");this[T]=t,this[F]=o,this[M]=e},o&&(V(A,"byteLength","_l"),V(x,"buffer","_b"),V(x,"byteLength","_l"),V(x,"byteOffset","_o")),a(x[y],{getInt8:function(t){return W(this,1,t)[0]<<24>>24},getUint8:function(t){return W(this,1,t)[0]},getInt16:function(t){var n=W(this,2,t,arguments[1]);return(n[1]<<8|n[0])<<16>>16},getUint16:function(t){var n=W(this,2,t,arguments[1]);return n[1]<<8|n[0]},getInt32:function(t){return R(W(this,4,t,arguments[1]))},getUint32:function(t){return R(W(this,4,t,arguments[1]))>>>0},getFloat32:function(t){return L(W(this,4,t,arguments[1]),23,4)},getFloat64:function(t){return L(W(this,8,t,arguments[1]),52,8)},setInt8:function(t,n){q(this,1,t,C,n)},setUint8:function(t,n){q(this,1,t,C,n)},setInt16:function(t,n){q(this,2,t,D,n,arguments[2])},setUint16:function(t,n){q(this,2,t,D,n,arguments[2])},setInt32:function(t,n){q(this,4,t,U,n,arguments[2])},setUint32:function(t,n){q(this,4,t,U,n,arguments[2])},setFloat32:function(t,n){q(this,4,t,B,n,arguments[2])},setFloat64:function(t,n){q(this,8,t,$,n,arguments[2])}});m(A,"ArrayBuffer"),m(x,"DataView"),c(x[y],u.VIEW,!0),n.ArrayBuffer=A,n.DataView=x},function(t,n){var e=t.exports="undefined"!=typeof window&&window.Math==Math?window:"undefined"!=typeof self&&self.Math==Math?self:Function("return this")();"number"==typeof __g&&(__g=e)},function(t,n){t.exports=function(t){return"object"==typeof t?null!==t:"function"==typeof t}},function(t,n,e){t.exports=!e(126)(function(){return 7!=Object.defineProperty({},"a",{get:function(){return 7}}).a})},function(t,n,e){t.exports=!e(11)&&!e(5)(function(){return 7!=Object.defineProperty(e(66)("div"),"a",{get:function(){return 7}}).a})},function(t,n,e){var r=e(4),o=e(10),i=e(34),u=e(67),c=e(12).f;t.exports=function(t){var n=o.Symbol||(o.Symbol=i?{}:r.Symbol||{});"_"==t.charAt(0)||t in n||c(n,t,{value:u.f(t)})}},function(t,n,e){var r=e(16),o=e(18),i=e(53)(!1),u=e(68)("IE_PROTO");t.exports=function(t,n){var e,c=o(t),a=0,s=[];for(e in c)e!=u&&r(c,e)&&s.push(e);for(;n.length>a;)r(c,e=n[a++])&&(~i(s,e)||s.push(e));return s}},function(t,n,e){var r=e(12),o=e(6),i=e(35);t.exports=e(11)?Object.defineProperties:function(t,n){o(t);for(var e,u=i(n),c=u.length,a=0;c>a;)r.f(t,e=u[a++],n[e]);return t}},function(t,n,e){var r=e(18),o=e(38).f,i={}.toString,u="object"==typeof window&&window&&Object.getOwnPropertyNames?Object.getOwnPropertyNames(window):[];t.exports.f=function(t){return u&&"[object Window]"==i.call(t)?function(t){try{return o(t)}catch(t){return u.slice()}}(t):o(r(t))}},function(t,n,e){"use strict";var r=e(11),o=e(35),i=e(54),u=e(49),c=e(13),a=e(48),s=Object.assign;t.exports=!s||e(5)(function(){var t={},n={},e=Symbol(),r="abcdefghijklmnopqrst";return t[e]=7,r.split("").forEach(function(t){n[t]=t}),7!=s({},t)[e]||Object.keys(s({},n)).join("")!=r})?function(t,n){for(var e=c(t),s=arguments.length,f=1,l=i.f,h=u.f;s>f;)for(var g,d=a(arguments[f++]),p=l?o(d).concat(l(d)):o(d),v=p.length,m=0;v>m;)g=p[m++],r&&!h.call(d,g)||(e[g]=d[g]);return e}:s},function(t,n){t.exports=Object.is||function(t,n){return t===n?0!==t||1/t==1/n:t!=t&&n!=n}},function(t,n,e){"use strict";var r=e(21),o=e(7),i=e(102),u=[].slice,c={},a=function(t,n,e){if(!(n in c)){for(var r=[],o=0;o<n;o++)r[o]="a["+o+"]";c[n]=Function("F,a","return new F("+r.join(",")+")")}return c[n](t,e)};t.exports=Function.bind||function(t){var n=r(this),e=u.call(arguments,1),c=function(){var r=e.concat(u.call(arguments));return this instanceof c?a(n,r.length,r):i(n,r,t)};return o(n.prototype)&&(c.prototype=n.prototype),c}},function(t,n){t.exports=function(t,n,e){var r=void 0===e;switch(n.length){case 0:return r?t():t.call(e);case 1:return r?t(n[0]):t.call(e,n[0]);case 2:return r?t(n[0],n[1]):t.call(e,n[0],n[1]);case 3:return r?t(n[0],n[1],n[2]):t.call(e,n[0],n[1],n[2]);case 4:return r?t(n[0],n[1],n[2],n[3]):t.call(e,n[0],n[1],n[2],n[3])}return t.apply(e,n)}},function(t,n,e){var r=e(4).parseInt,o=e(43).trim,i=e(72),u=/^[-+]?0[xX]/;t.exports=8!==r(i+"08")||22!==r(i+"0x16")?function(t,n){var e=o(String(t),3);return r(e,n>>>0||(u.test(e)?16:10))}:r},function(t,n,e){var r=e(4).parseFloat,o=e(43).trim;t.exports=1/r(e(72)+"-0")!=-1/0?function(t){var n=o(String(t),3),e=r(n);return 0===e&&"-"==n.charAt(0)?-0:e}:r},function(t,n,e){var r=e(26);t.exports=function(t,n){if("number"!=typeof t&&"Number"!=r(t))throw TypeError(n);return+t}},function(t,n,e){var r=e(7),o=Math.floor;t.exports=function(t){return!r(t)&&isFinite(t)&&o(t)===t}},function(t,n){t.exports=Math.log1p||function(t){return(t=+t)>-1e-8&&t<1e-8?t-t*t/2:Math.log(1+t)}},function(t,n,e){"use strict";var r=e(37),o=e(32),i=e(42),u={};e(17)(u,e(8)("iterator"),function(){return this}),t.exports=function(t,n,e){t.prototype=r(u,{next:o(1,e)}),i(t,n+" Iterator")}},function(t,n,e){var r=e(6);t.exports=function(t,n,e,o){try{return o?n(r(e)[0],e[1]):n(e)}catch(n){var i=t.return;throw void 0!==i&&r(i.call(t)),n}}},function(t,n,e){var r=e(221);t.exports=function(t,n){return new(r(t))(n)}},function(t,n,e){var r=e(21),o=e(13),i=e(48),u=e(9);t.exports=function(t,n,e,c,a){r(n);var s=o(t),f=i(s),l=u(s.length),h=a?l-1:0,g=a?-1:1;if(e<2)for(;;){if(h in f){c=f[h],h+=g;break}if(h+=g,a?h<0:l<=h)throw TypeError("Reduce of empty array with no initial value")}for(;a?h>=0:l>h;h+=g)h in f&&(c=n(c,f[h],h,s));return c}},function(t,n,e){"use strict";var r=e(13),o=e(36),i=e(9);t.exports=[].copyWithin||function(t,n){var e=r(this),u=i(e.length),c=o(t,u),a=o(n,u),s=arguments.length>2?arguments[2]:void 0,f=Math.min((void 0===s?u:o(s,u))-a,u-c),l=1;for(a<c&&c<a+f&&(l=-1,a+=f-1,c+=f-1);f-- >0;)a in e?e[c]=e[a]:delete e[c],c+=l,a+=l;return e}},function(t,n){t.exports=function(t,n){return{value:n,done:!!t}}},function(t,n,e){"use strict";var r=e(87);e(0)({target:"RegExp",proto:!0,forced:r!==/./.exec},{exec:r})},function(t,n,e){e(11)&&"g"!=/./g.flags&&e(12).f(RegExp.prototype,"flags",{configurable:!0,get:e(57)})},function(t,n,e){"use strict";var r,o,i,u,c=e(34),a=e(4),s=e(20),f=e(50),l=e(0),h=e(7),g=e(21),d=e(46),p=e(60),v=e(51),m=e(89).set,y=e(241)(),b=e(117),A=e(242),x=e(61),w=e(118),_=a.TypeError,S=a.process,O=S&&S.versions,E=O&&O.v8||"",j=a.Promise,k="process"==f(S),P=function(){},I=o=b.f,T=!!function(){try{var t=j.resolve(1),n=(t.constructor={})[e(8)("species")]=function(t){t(P,P)};return(k||"function"==typeof PromiseRejectionEvent)&&t.then(P)instanceof n&&0!==E.indexOf("6.6")&&-1===x.indexOf("Chrome/66")}catch(t){}}(),M=function(t){var n;return!(!h(t)||"function"!=typeof(n=t.then))&&n},F=function(t,n){if(!t._n){t._n=!0;var e=t._c;y(function(){for(var r=t._v,o=1==t._s,i=0,u=function(n){var e,i,u,c=o?n.ok:n.fail,a=n.resolve,s=n.reject,f=n.domain;try{c?(o||(2==t._h&&R(t),t._h=1),!0===c?e=r:(f&&f.enter(),e=c(r),f&&(f.exit(),u=!0)),e===n.promise?s(_("Promise-chain cycle")):(i=M(e))?i.call(e,a,s):a(e)):s(r)}catch(t){f&&!u&&f.exit(),s(t)}};e.length>i;)u(e[i++]);t._c=[],t._n=!1,n&&!t._h&&N(t)})}},N=function(t){m.call(a,function(){var n,e,r,o=t._v,i=L(t);if(i&&(n=A(function(){k?S.emit("unhandledRejection",o,t):(e=a.onunhandledrejection)?e({promise:t,reason:o}):(r=a.console)&&r.error&&r.error("Unhandled promise rejection",o)}),t._h=k||L(t)?2:1),t._a=void 0,i&&n.e)throw n.v})},L=function(t){return 1!==t._h&&0===(t._a||t._c).length},R=function(t){m.call(a,function(){var n;k?S.emit("rejectionHandled",t):(n=a.onrejectionhandled)&&n({promise:t,reason:t._v})})},C=function(t){var n=this;n._d||(n._d=!0,(n=n._w||n)._v=t,n._s=2,n._a||(n._a=n._c.slice()),F(n,!0))},D=function(t){var n,e=this;if(!e._d){e._d=!0,e=e._w||e;try{if(e===t)throw _("Promise can't be resolved itself");(n=M(t))?y(function(){var r={_w:e,_d:!1};try{n.call(t,s(D,r,1),s(C,r,1))}catch(t){C.call(r,t)}}):(e._v=t,e._s=1,F(e,!1))}catch(t){C.call({_w:e,_d:!1},t)}}};T||(j=function(t){d(this,j,"Promise","_h"),g(t),r.call(this);try{t(s(D,this,1),s(C,this,1))}catch(t){C.call(this,t)}},(r=function(t){this._c=[],this._a=void 0,this._s=0,this._d=!1,this._v=void 0,this._h=0,this._n=!1}).prototype=e(47)(j.prototype,{then:function(t,n){var e=I(v(this,j));return e.ok="function"!=typeof t||t,e.fail="function"==typeof n&&n,e.domain=k?S.domain:void 0,this._c.push(e),this._a&&this._a.push(e),this._s&&F(this,!1),e.promise},catch:function(t){return this.then(void 0,t)}}),i=function(){var t=new r;this.promise=t,this.resolve=s(D,t,1),this.reject=s(C,t,1)},b.f=I=function(t){return t===j||t===u?new i(t):o(t)}),l(l.G+l.W+l.F*!T,{Promise:j}),e(42)(j,"Promise"),e(45)("Promise"),u=e(10).Promise,l(l.S+l.F*!T,"Promise",{reject:function(t){var n=I(this);return(0,n.reject)(t),n.promise}}),l(l.S+l.F*(c||!T),"Promise",{resolve:function(t){return w(c&&this===u?j:this,t)}}),l(l.S+l.F*!(T&&e(56)(function(t){j.all(t).catch(P)})),"Promise",{all:function(t){var n=this,e=I(n),r=e.resolve,o=e.reject,i=A(function(){var e=[],i=0,u=1;p(t,!1,function(t){var c=i++,a=!1;e.push(void 0),u++,n.resolve(t).then(function(t){a||(a=!0,e[c]=t,--u||r(e))},o)}),--u||r(e)});return i.e&&o(i.v),e.promise},race:function(t){var n=this,e=I(n),r=e.reject,o=A(function(){p(t,!1,function(t){n.resolve(t).then(e.resolve,r)})});return o.e&&r(o.v),e.promise}})},function(t,n,e){"use strict";var r=e(21);function o(t){var n,e;this.promise=new t(function(t,r){if(void 0!==n||void 0!==e)throw TypeError("Bad Promise constructor");n=t,e=r}),this.resolve=r(n),this.reject=r(e)}t.exports.f=function(t){return new o(t)}},function(t,n,e){var r=e(6),o=e(7),i=e(117);t.exports=function(t,n){if(r(t),o(n)&&n.constructor===t)return n;var e=i.f(t);return(0,e.resolve)(n),e.promise}},function(t,n,e){"use strict";var r=e(12).f,o=e(37),i=e(47),u=e(20),c=e(46),a=e(60),s=e(78),f=e(113),l=e(45),h=e(11),g=e(30).fastKey,d=e(41),p=h?"_s":"size",v=function(t,n){var e,r=g(n);if("F"!==r)return t._i[r];for(e=t._f;e;e=e.n)if(e.k==n)return e};t.exports={getConstructor:function(t,n,e,s){var f=t(function(t,r){c(t,f,n,"_i"),t._t=n,t._i=o(null),t._f=void 0,t._l=void 0,t[p]=0,null!=r&&a(r,e,t[s],t)});return i(f.prototype,{clear:function(){for(var t=d(this,n),e=t._i,r=t._f;r;r=r.n)r.r=!0,r.p&&(r.p=r.p.n=void 0),delete e[r.i];t._f=t._l=void 0,t[p]=0},delete:function(t){var e=d(this,n),r=v(e,t);if(r){var o=r.n,i=r.p;delete e._i[r.i],r.r=!0,i&&(i.n=o),o&&(o.p=i),e._f==r&&(e._f=o),e._l==r&&(e._l=i),e[p]--}return!!r},forEach:function(t){d(this,n);for(var e,r=u(t,arguments.length>1?arguments[1]:void 0,3);e=e?e.n:this._f;)for(r(e.v,e.k,this);e&&e.r;)e=e.p},has:function(t){return!!v(d(this,n),t)}}),h&&r(f.prototype,"size",{get:function(){return d(this,n)[p]}}),f},def:function(t,n,e){var r,o,i=v(t,n);return i?i.v=e:(t._l=i={i:o=g(n,!0),k:n,v:e,p:r=t._l,n:void 0,r:!1},t._f||(t._f=i),r&&(r.n=i),t[p]++,"F"!==o&&(t._i[o]=i)),t},getEntry:v,setStrong:function(t,n,e){s(t,n,function(t,e){this._t=d(t,n),this._k=e,this._l=void 0},function(){for(var t=this._k,n=this._l;n&&n.r;)n=n.p;return this._t&&(this._l=n=n?n.n:this._t._f)?f(0,"keys"==t?n.k:"values"==t?n.v:[n.k,n.v]):(this._t=void 0,f(1))},e?"entries":"values",!e,!0),l(n)}}},function(t,n,e){"use strict";var r=e(47),o=e(30).getWeak,i=e(6),u=e(7),c=e(46),a=e(60),s=e(25),f=e(16),l=e(41),h=s(5),g=s(6),d=0,p=function(t){return t._l||(t._l=new v)},v=function(){this.a=[]},m=function(t,n){return h(t.a,function(t){return t[0]===n})};v.prototype={get:function(t){var n=m(this,t);if(n)return n[1]},has:function(t){return!!m(this,t)},set:function(t,n){var e=m(this,t);e?e[1]=n:this.a.push([t,n])},delete:function(t){var n=g(this.a,function(n){return n[0]===t});return~n&&this.a.splice(n,1),!!~n}},t.exports={getConstructor:function(t,n,e,i){var s=t(function(t,r){c(t,s,n,"_i"),t._t=n,t._i=d++,t._l=void 0,null!=r&&a(r,e,t[i],t)});return r(s.prototype,{delete:function(t){if(!u(t))return!1;var e=o(t);return!0===e?p(l(this,n)).delete(t):e&&f(e,this._i)&&delete e[this._i]},has:function(t){if(!u(t))return!1;var e=o(t);return!0===e?p(l(this,n)).has(t):e&&f(e,this._i)}}),s},def:function(t,n,e){var r=o(i(n),!0);return!0===r?p(t).set(n,e):r[t._i]=e,t},ufstore:p}},function(t,n,e){var r=e(22),o=e(9);t.exports=function(t){if(void 0===t)return 0;var n=r(t),e=o(n);if(n!==e)throw RangeError("Wrong length!");return e}},function(t,n,e){var r=e(38),o=e(54),i=e(6),u=e(4).Reflect;t.exports=u&&u.ownKeys||function(t){var n=r.f(i(t)),e=o.f;return e?n.concat(e(t)):n}},function(t,n,e){var r=e(9),o=e(74),i=e(27);t.exports=function(t,n,e,u){var c=String(i(t)),a=c.length,s=void 0===e?" ":String(e),f=r(n);if(f<=a||""==s)return c;var l=f-a,h=o.call(s,Math.ceil(l/s.length));return h.length>l&&(h=h.slice(0,l)),u?h+c:c+h}},function(t,n,e){var r=e(11),o=e(35),i=e(18),u=e(49).f;t.exports=function(t){return function(n){for(var e,c=i(n),a=o(c),s=a.length,f=0,l=[];s>f;)e=a[f++],r&&!u.call(c,e)||l.push(t?[e,c[e]]:c[e]);return l}}},function(t,n){var e=t.exports={version:"2.6.11"};"number"==typeof __e&&(__e=e)},function(t,n){t.exports=function(t){try{return!!t()}catch(t){return!0}}},function(t,n,e){"use strict";e(128);var r,o=(r=e(300))&&r.__esModule?r:{default:r};o.default._babelPolyfill&&"undefined"!=typeof console&&console.warn&&console.warn("@babel/polyfill is loaded more than once on this page. This is probably not desirable/intended and may have consequences if different versions of the polyfills are applied sequentially. If you do need to load the polyfill more than once, use @babel/polyfill/noConflict instead to bypass the warning."),o.default._babelPolyfill=!0},function(t,n,e){"use strict";e(129),e(272),e(274),e(277),e(279),e(281),e(283),e(285),e(287),e(289),e(291),e(293),e(295),e(299)},function(t,n,e){e(130),e(133),e(134),e(135),e(136),e(137),e(138),e(139),e(140),e(141),e(142),e(143),e(144),e(145),e(146),e(147),e(148),e(149),e(150),e(151),e(152),e(153),e(154),e(155),e(156),e(157),e(158),e(159),e(160),e(161),e(162),e(163),e(164),e(165),e(166),e(167),e(168),e(169),e(170),e(171),e(172),e(173),e(174),e(176),e(177),e(178),e(179),e(180),e(181),e(182),e(183),e(184),e(185),e(186),e(187),e(188),e(189),e(190),e(191),e(192),e(193),e(194),e(195),e(196),e(197),e(198),e(199),e(200),e(201),e(202),e(203),e(204),e(205),e(206),e(207),e(208),e(209),e(211),e(212),e(214),e(215),e(216),e(217),e(218),e(219),e(220),e(222),e(223),e(224),e(225),e(226),e(227),e(228),e(229),e(230),e(231),e(232),e(233),e(234),e(86),e(235),e(114),e(236),e(115),e(237),e(238),e(239),e(240),e(116),e(243),e(244),e(245),e(246),e(247),e(248),e(249),e(250),e(251),e(252),e(253),e(254),e(255),e(256),e(257),e(258),e(259),e(260),e(261),e(262),e(263),e(264),e(265),e(266),e(267),e(268),e(269),e(270),e(271),t.exports=e(10)},function(t,n,e){"use strict";var r=e(4),o=e(16),i=e(11),u=e(0),c=e(14),a=e(30).KEY,s=e(5),f=e(52),l=e(42),h=e(33),g=e(8),d=e(67),p=e(95),v=e(132),m=e(55),y=e(6),b=e(7),A=e(13),x=e(18),w=e(29),_=e(32),S=e(37),O=e(98),E=e(23),j=e(54),k=e(12),P=e(35),I=E.f,T=k.f,M=O.f,F=r.Symbol,N=r.JSON,L=N&&N.stringify,R=g("_hidden"),C=g("toPrimitive"),D={}.propertyIsEnumerable,U=f("symbol-registry"),$=f("symbols"),B=f("op-symbols"),V=Object.prototype,W="function"==typeof F&&!!j.f,q=r.QObject,G=!q||!q.prototype||!q.prototype.findChild,z=i&&s(function(){return 7!=S(T({},"a",{get:function(){return T(this,"a",{value:7}).a}})).a})?function(t,n,e){var r=I(V,n);r&&delete V[n],T(t,n,e),r&&t!==V&&T(V,n,r)}:T,Y=function(t){var n=$[t]=S(F.prototype);return n._k=t,n},J=W&&"symbol"==typeof F.iterator?function(t){return"symbol"==typeof t}:function(t){return t instanceof F},K=function(t,n,e){return t===V&&K(B,n,e),y(t),n=w(n,!0),y(e),o($,n)?(e.enumerable?(o(t,R)&&t[R][n]&&(t[R][n]=!1),e=S(e,{enumerable:_(0,!1)})):(o(t,R)||T(t,R,_(1,{})),t[R][n]=!0),z(t,n,e)):T(t,n,e)},X=function(t,n){y(t);for(var e,r=v(n=x(n)),o=0,i=r.length;i>o;)K(t,e=r[o++],n[e]);return t},H=function(t){var n=D.call(this,t=w(t,!0));return!(this===V&&o($,t)&&!o(B,t))&&(!(n||!o(this,t)||!o($,t)||o(this,R)&&this[R][t])||n)},Z=function(t,n){if(t=x(t),n=w(n,!0),t!==V||!o($,n)||o(B,n)){var e=I(t,n);return!e||!o($,n)||o(t,R)&&t[R][n]||(e.enumerable=!0),e}},Q=function(t){for(var n,e=M(x(t)),r=[],i=0;e.length>i;)o($,n=e[i++])||n==R||n==a||r.push(n);return r},tt=function(t){for(var n,e=t===V,r=M(e?B:x(t)),i=[],u=0;r.length>u;)!o($,n=r[u++])||e&&!o(V,n)||i.push($[n]);return i};W||(c((F=function(){if(this instanceof F)throw TypeError("Symbol is not a constructor!");var t=h(arguments.length>0?arguments[0]:void 0),n=function(e){this===V&&n.call(B,e),o(this,R)&&o(this[R],t)&&(this[R][t]=!1),z(this,t,_(1,e))};return i&&G&&z(V,t,{configurable:!0,set:n}),Y(t)}).prototype,"toString",function(){return this._k}),E.f=Z,k.f=K,e(38).f=O.f=Q,e(49).f=H,j.f=tt,i&&!e(34)&&c(V,"propertyIsEnumerable",H,!0),d.f=function(t){return Y(g(t))}),u(u.G+u.W+u.F*!W,{Symbol:F});for(var nt="hasInstance,isConcatSpreadable,iterator,match,replace,search,species,split,toPrimitive,toStringTag,unscopables".split(","),et=0;nt.length>et;)g(nt[et++]);for(var rt=P(g.store),ot=0;rt.length>ot;)p(rt[ot++]);u(u.S+u.F*!W,"Symbol",{for:function(t){return o(U,t+="")?U[t]:U[t]=F(t)},keyFor:function(t){if(!J(t))throw TypeError(t+" is not a symbol!");for(var n in U)if(U[n]===t)return n},useSetter:function(){G=!0},useSimple:function(){G=!1}}),u(u.S+u.F*!W,"Object",{create:function(t,n){return void 0===n?S(t):X(S(t),n)},defineProperty:K,defineProperties:X,getOwnPropertyDescriptor:Z,getOwnPropertyNames:Q,getOwnPropertySymbols:tt});var it=s(function(){j.f(1)});u(u.S+u.F*it,"Object",{getOwnPropertySymbols:function(t){return j.f(A(t))}}),N&&u(u.S+u.F*(!W||s(function(){var t=F();return"[null]"!=L([t])||"{}"!=L({a:t})||"{}"!=L(Object(t))})),"JSON",{stringify:function(t){for(var n,e,r=[t],o=1;arguments.length>o;)r.push(arguments[o++]);if(e=n=r[1],(b(n)||void 0!==t)&&!J(t))return m(n)||(n=function(t,n){if("function"==typeof e&&(n=e.call(this,t,n)),!J(n))return n}),r[1]=n,L.apply(N,r)}}),F.prototype[C]||e(17)(F.prototype,C,F.prototype.valueOf),l(F,"Symbol"),l(Math,"Math",!0),l(r.JSON,"JSON",!0)},function(t,n,e){t.exports=e(52)("native-function-to-string",Function.toString)},function(t,n,e){var r=e(35),o=e(54),i=e(49);t.exports=function(t){var n=r(t),e=o.f;if(e)for(var u,c=e(t),a=i.f,s=0;c.length>s;)a.call(t,u=c[s++])&&n.push(u);return n}},function(t,n,e){var r=e(0);r(r.S,"Object",{create:e(37)})},function(t,n,e){var r=e(0);r(r.S+r.F*!e(11),"Object",{defineProperty:e(12).f})},function(t,n,e){var r=e(0);r(r.S+r.F*!e(11),"Object",{defineProperties:e(97)})},function(t,n,e){var r=e(18),o=e(23).f;e(24)("getOwnPropertyDescriptor",function(){return function(t,n){return o(r(t),n)}})},function(t,n,e){var r=e(13),o=e(39);e(24)("getPrototypeOf",function(){return function(t){return o(r(t))}})},function(t,n,e){var r=e(13),o=e(35);e(24)("keys",function(){return function(t){return o(r(t))}})},function(t,n,e){e(24)("getOwnPropertyNames",function(){return e(98).f})},function(t,n,e){var r=e(7),o=e(30).onFreeze;e(24)("freeze",function(t){return function(n){return t&&r(n)?t(o(n)):n}})},function(t,n,e){var r=e(7),o=e(30).onFreeze;e(24)("seal",function(t){return function(n){return t&&r(n)?t(o(n)):n}})},function(t,n,e){var r=e(7),o=e(30).onFreeze;e(24)("preventExtensions",function(t){return function(n){return t&&r(n)?t(o(n)):n}})},function(t,n,e){var r=e(7);e(24)("isFrozen",function(t){return function(n){return!r(n)||!!t&&t(n)}})},function(t,n,e){var r=e(7);e(24)("isSealed",function(t){return function(n){return!r(n)||!!t&&t(n)}})},function(t,n,e){var r=e(7);e(24)("isExtensible",function(t){return function(n){return!!r(n)&&(!t||t(n))}})},function(t,n,e){var r=e(0);r(r.S+r.F,"Object",{assign:e(99)})},function(t,n,e){var r=e(0);r(r.S,"Object",{is:e(100)})},function(t,n,e){var r=e(0);r(r.S,"Object",{setPrototypeOf:e(71).set})},function(t,n,e){"use strict";var r=e(50),o={};o[e(8)("toStringTag")]="z",o+""!="[object z]"&&e(14)(Object.prototype,"toString",function(){return"[object "+r(this)+"]"},!0)},function(t,n,e){var r=e(0);r(r.P,"Function",{bind:e(101)})},function(t,n,e){var r=e(12).f,o=Function.prototype,i=/^\s*function ([^ (]*)/;"name"in o||e(11)&&r(o,"name",{configurable:!0,get:function(){try{return(""+this).match(i)[1]}catch(t){return""}}})},function(t,n,e){"use strict";var r=e(7),o=e(39),i=e(8)("hasInstance"),u=Function.prototype;i in u||e(12).f(u,i,{value:function(t){if("function"!=typeof this||!r(t))return!1;if(!r(this.prototype))return t instanceof this;for(;t=o(t);)if(this.prototype===t)return!0;return!1}})},function(t,n,e){var r=e(0),o=e(103);r(r.G+r.F*(parseInt!=o),{parseInt:o})},function(t,n,e){var r=e(0),o=e(104);r(r.G+r.F*(parseFloat!=o),{parseFloat:o})},function(t,n,e){"use strict";var r=e(4),o=e(16),i=e(26),u=e(73),c=e(29),a=e(5),s=e(38).f,f=e(23).f,l=e(12).f,h=e(43).trim,g=r.Number,d=g,p=g.prototype,v="Number"==i(e(37)(p)),m="trim"in String.prototype,y=function(t){var n=c(t,!1);if("string"==typeof n&&n.length>2){var e,r,o,i=(n=m?n.trim():h(n,3)).charCodeAt(0);if(43===i||45===i){if(88===(e=n.charCodeAt(2))||120===e)return NaN}else if(48===i){switch(n.charCodeAt(1)){case 66:case 98:r=2,o=49;break;case 79:case 111:r=8,o=55;break;default:return+n}for(var u,a=n.slice(2),s=0,f=a.length;s<f;s++)if((u=a.charCodeAt(s))<48||u>o)return NaN;return parseInt(a,r)}}return+n};if(!g(" 0o1")||!g("0b1")||g("+0x1")){g=function(t){var n=arguments.length<1?0:t,e=this;return e instanceof g&&(v?a(function(){p.valueOf.call(e)}):"Number"!=i(e))?u(new d(y(n)),e,g):y(n)};for(var b,A=e(11)?s(d):"MAX_VALUE,MIN_VALUE,NaN,NEGATIVE_INFINITY,POSITIVE_INFINITY,EPSILON,isFinite,isInteger,isNaN,isSafeInteger,MAX_SAFE_INTEGER,MIN_SAFE_INTEGER,parseFloat,parseInt,isInteger".split(","),x=0;A.length>x;x++)o(d,b=A[x])&&!o(g,b)&&l(g,b,f(d,b));g.prototype=p,p.constructor=g,e(14)(r,"Number",g)}},function(t,n,e){"use strict";var r=e(0),o=e(22),i=e(105),u=e(74),c=1..toFixed,a=Math.floor,s=[0,0,0,0,0,0],f="Number.toFixed: incorrect invocation!",l=function(t,n){for(var e=-1,r=n;++e<6;)r+=t*s[e],s[e]=r%1e7,r=a(r/1e7)},h=function(t){for(var n=6,e=0;--n>=0;)e+=s[n],s[n]=a(e/t),e=e%t*1e7},g=function(){for(var t=6,n="";--t>=0;)if(""!==n||0===t||0!==s[t]){var e=String(s[t]);n=""===n?e:n+u.call("0",7-e.length)+e}return n},d=function(t,n,e){return 0===n?e:n%2==1?d(t,n-1,e*t):d(t*t,n/2,e)};r(r.P+r.F*(!!c&&("0.000"!==8e-5.toFixed(3)||"1"!==.9.toFixed(0)||"1.25"!==1.255.toFixed(2)||"1000000000000000128"!==(0xde0b6b3a7640080).toFixed(0))||!e(5)(function(){c.call({})})),"Number",{toFixed:function(t){var n,e,r,c,a=i(this,f),s=o(t),p="",v="0";if(s<0||s>20)throw RangeError(f);if(a!=a)return"NaN";if(a<=-1e21||a>=1e21)return String(a);if(a<0&&(p="-",a=-a),a>1e-21)if(e=(n=function(t){for(var n=0,e=t;e>=4096;)n+=12,e/=4096;for(;e>=2;)n+=1,e/=2;return n}(a*d(2,69,1))-69)<0?a*d(2,-n,1):a/d(2,n,1),e*=4503599627370496,(n=52-n)>0){for(l(0,e),r=s;r>=7;)l(1e7,0),r-=7;for(l(d(10,r,1),0),r=n-1;r>=23;)h(1<<23),r-=23;h(1<<r),l(1,1),h(2),v=g()}else l(0,e),l(1<<-n,0),v=g()+u.call("0",s);return v=s>0?p+((c=v.length)<=s?"0."+u.call("0",s-c)+v:v.slice(0,c-s)+"."+v.slice(c-s)):p+v}})},function(t,n,e){"use strict";var r=e(0),o=e(5),i=e(105),u=1..toPrecision;r(r.P+r.F*(o(function(){return"1"!==u.call(1,void 0)})||!o(function(){u.call({})})),"Number",{toPrecision:function(t){var n=i(this,"Number#toPrecision: incorrect invocation!");return void 0===t?u.call(n):u.call(n,t)}})},function(t,n,e){var r=e(0);r(r.S,"Number",{EPSILON:Math.pow(2,-52)})},function(t,n,e){var r=e(0),o=e(4).isFinite;r(r.S,"Number",{isFinite:function(t){return"number"==typeof t&&o(t)}})},function(t,n,e){var r=e(0);r(r.S,"Number",{isInteger:e(106)})},function(t,n,e){var r=e(0);r(r.S,"Number",{isNaN:function(t){return t!=t}})},function(t,n,e){var r=e(0),o=e(106),i=Math.abs;r(r.S,"Number",{isSafeInteger:function(t){return o(t)&&i(t)<=9007199254740991}})},function(t,n,e){var r=e(0);r(r.S,"Number",{MAX_SAFE_INTEGER:9007199254740991})},function(t,n,e){var r=e(0);r(r.S,"Number",{MIN_SAFE_INTEGER:-9007199254740991})},function(t,n,e){var r=e(0),o=e(104);r(r.S+r.F*(Number.parseFloat!=o),"Number",{parseFloat:o})},function(t,n,e){var r=e(0),o=e(103);r(r.S+r.F*(Number.parseInt!=o),"Number",{parseInt:o})},function(t,n,e){var r=e(0),o=e(107),i=Math.sqrt,u=Math.acosh;r(r.S+r.F*!(u&&710==Math.floor(u(Number.MAX_VALUE))&&u(1/0)==1/0),"Math",{acosh:function(t){return(t=+t)<1?NaN:t>94906265.62425156?Math.log(t)+Math.LN2:o(t-1+i(t-1)*i(t+1))}})},function(t,n,e){var r=e(0),o=Math.asinh;r(r.S+r.F*!(o&&1/o(0)>0),"Math",{asinh:function t(n){return isFinite(n=+n)&&0!=n?n<0?-t(-n):Math.log(n+Math.sqrt(n*n+1)):n}})},function(t,n,e){var r=e(0),o=Math.atanh;r(r.S+r.F*!(o&&1/o(-0)<0),"Math",{atanh:function(t){return 0==(t=+t)?t:Math.log((1+t)/(1-t))/2}})},function(t,n,e){var r=e(0),o=e(75);r(r.S,"Math",{cbrt:function(t){return o(t=+t)*Math.pow(Math.abs(t),1/3)}})},function(t,n,e){var r=e(0);r(r.S,"Math",{clz32:function(t){return(t>>>=0)?31-Math.floor(Math.log(t+.5)*Math.LOG2E):32}})},function(t,n,e){var r=e(0),o=Math.exp;r(r.S,"Math",{cosh:function(t){return(o(t=+t)+o(-t))/2}})},function(t,n,e){var r=e(0),o=e(76);r(r.S+r.F*(o!=Math.expm1),"Math",{expm1:o})},function(t,n,e){var r=e(0);r(r.S,"Math",{fround:e(175)})},function(t,n,e){var r=e(75),o=Math.pow,i=o(2,-52),u=o(2,-23),c=o(2,127)*(2-u),a=o(2,-126);t.exports=Math.fround||function(t){var n,e,o=Math.abs(t),s=r(t);return o<a?s*(o/a/u+1/i-1/i)*a*u:(e=(n=(1+u/i)*o)-(n-o))>c||e!=e?s*(1/0):s*e}},function(t,n,e){var r=e(0),o=Math.abs;r(r.S,"Math",{hypot:function(t,n){for(var e,r,i=0,u=0,c=arguments.length,a=0;u<c;)a<(e=o(arguments[u++]))?(i=i*(r=a/e)*r+1,a=e):i+=e>0?(r=e/a)*r:e;return a===1/0?1/0:a*Math.sqrt(i)}})},function(t,n,e){var r=e(0),o=Math.imul;r(r.S+r.F*e(5)(function(){return-5!=o(4294967295,5)||2!=o.length}),"Math",{imul:function(t,n){var e=+t,r=+n,o=65535&e,i=65535&r;return 0|o*i+((65535&e>>>16)*i+o*(65535&r>>>16)<<16>>>0)}})},function(t,n,e){var r=e(0);r(r.S,"Math",{log10:function(t){return Math.log(t)*Math.LOG10E}})},function(t,n,e){var r=e(0);r(r.S,"Math",{log1p:e(107)})},function(t,n,e){var r=e(0);r(r.S,"Math",{log2:function(t){return Math.log(t)/Math.LN2}})},function(t,n,e){var r=e(0);r(r.S,"Math",{sign:e(75)})},function(t,n,e){var r=e(0),o=e(76),i=Math.exp;r(r.S+r.F*e(5)(function(){return-2e-17!=!Math.sinh(-2e-17)}),"Math",{sinh:function(t){return Math.abs(t=+t)<1?(o(t)-o(-t))/2:(i(t-1)-i(-t-1))*(Math.E/2)}})},function(t,n,e){var r=e(0),o=e(76),i=Math.exp;r(r.S,"Math",{tanh:function(t){var n=o(t=+t),e=o(-t);return n==1/0?1:e==1/0?-1:(n-e)/(i(t)+i(-t))}})},function(t,n,e){var r=e(0);r(r.S,"Math",{trunc:function(t){return(t>0?Math.floor:Math.ceil)(t)}})},function(t,n,e){var r=e(0),o=e(36),i=String.fromCharCode,u=String.fromCodePoint;r(r.S+r.F*(!!u&&1!=u.length),"String",{fromCodePoint:function(t){for(var n,e=[],r=arguments.length,u=0;r>u;){if(n=+arguments[u++],o(n,1114111)!==n)throw RangeError(n+" is not a valid code point");e.push(n<65536?i(n):i(55296+((n-=65536)>>10),n%1024+56320))}return e.join("")}})},function(t,n,e){var r=e(0),o=e(18),i=e(9);r(r.S,"String",{raw:function(t){for(var n=o(t.raw),e=i(n.length),r=arguments.length,u=[],c=0;e>c;)u.push(String(n[c++])),c<r&&u.push(String(arguments[c]));return u.join("")}})},function(t,n,e){"use strict";e(43)("trim",function(t){return function(){return t(this,3)}})},function(t,n,e){"use strict";var r=e(77)(!0);e(78)(String,"String",function(t){this._t=String(t),this._i=0},function(){var t,n=this._t,e=this._i;return e>=n.length?{value:void 0,done:!0}:(t=r(n,e),this._i+=t.length,{value:t,done:!1})})},function(t,n,e){"use strict";var r=e(0),o=e(77)(!1);r(r.P,"String",{codePointAt:function(t){return o(this,t)}})},function(t,n,e){"use strict";var r=e(0),o=e(9),i=e(79),u="".endsWith;r(r.P+r.F*e(81)("endsWith"),"String",{endsWith:function(t){var n=i(this,t,"endsWith"),e=arguments.length>1?arguments[1]:void 0,r=o(n.length),c=void 0===e?r:Math.min(o(e),r),a=String(t);return u?u.call(n,a,c):n.slice(c-a.length,c)===a}})},function(t,n,e){"use strict";var r=e(0),o=e(79);r(r.P+r.F*e(81)("includes"),"String",{includes:function(t){return!!~o(this,t,"includes").indexOf(t,arguments.length>1?arguments[1]:void 0)}})},function(t,n,e){var r=e(0);r(r.P,"String",{repeat:e(74)})},function(t,n,e){"use strict";var r=e(0),o=e(9),i=e(79),u="".startsWith;r(r.P+r.F*e(81)("startsWith"),"String",{startsWith:function(t){var n=i(this,t,"startsWith"),e=o(Math.min(arguments.length>1?arguments[1]:void 0,n.length)),r=String(t);return u?u.call(n,r,e):n.slice(e,e+r.length)===r}})},function(t,n,e){"use strict";e(15)("anchor",function(t){return function(n){return t(this,"a","name",n)}})},function(t,n,e){"use strict";e(15)("big",function(t){return function(){return t(this,"big","","")}})},function(t,n,e){"use strict";e(15)("blink",function(t){return function(){return t(this,"blink","","")}})},function(t,n,e){"use strict";e(15)("bold",function(t){return function(){return t(this,"b","","")}})},function(t,n,e){"use strict";e(15)("fixed",function(t){return function(){return t(this,"tt","","")}})},function(t,n,e){"use strict";e(15)("fontcolor",function(t){return function(n){return t(this,"font","color",n)}})},function(t,n,e){"use strict";e(15)("fontsize",function(t){return function(n){return t(this,"font","size",n)}})},function(t,n,e){"use strict";e(15)("italics",function(t){return function(){return t(this,"i","","")}})},function(t,n,e){"use strict";e(15)("link",function(t){return function(n){return t(this,"a","href",n)}})},function(t,n,e){"use strict";e(15)("small",function(t){return function(){return t(this,"small","","")}})},function(t,n,e){"use strict";e(15)("strike",function(t){return function(){return t(this,"strike","","")}})},function(t,n,e){"use strict";e(15)("sub",function(t){return function(){return t(this,"sub","","")}})},function(t,n,e){"use strict";e(15)("sup",function(t){return function(){return t(this,"sup","","")}})},function(t,n,e){var r=e(0);r(r.S,"Date",{now:function(){return(new Date).getTime()}})},function(t,n,e){"use strict";var r=e(0),o=e(13),i=e(29);r(r.P+r.F*e(5)(function(){return null!==new Date(NaN).toJSON()||1!==Date.prototype.toJSON.call({toISOString:function(){return 1}})}),"Date",{toJSON:function(t){var n=o(this),e=i(n);return"number"!=typeof e||isFinite(e)?n.toISOString():null}})},function(t,n,e){var r=e(0),o=e(210);r(r.P+r.F*(Date.prototype.toISOString!==o),"Date",{toISOString:o})},function(t,n,e){"use strict";var r=e(5),o=Date.prototype.getTime,i=Date.prototype.toISOString,u=function(t){return t>9?t:"0"+t};t.exports=r(function(){return"0385-07-25T07:06:39.999Z"!=i.call(new Date(-5e13-1))})||!r(function(){i.call(new Date(NaN))})?function(){if(!isFinite(o.call(this)))throw RangeError("Invalid time value");var t=this,n=t.getUTCFullYear(),e=t.getUTCMilliseconds(),r=n<0?"-":n>9999?"+":"";return r+("00000"+Math.abs(n)).slice(r?-6:-4)+"-"+u(t.getUTCMonth()+1)+"-"+u(t.getUTCDate())+"T"+u(t.getUTCHours())+":"+u(t.getUTCMinutes())+":"+u(t.getUTCSeconds())+"."+(e>99?e:"0"+u(e))+"Z"}:i},function(t,n,e){var r=Date.prototype,o=r.toString,i=r.getTime;new Date(NaN)+""!="Invalid Date"&&e(14)(r,"toString",function(){var t=i.call(this);return t==t?o.call(this):"Invalid Date"})},function(t,n,e){var r=e(8)("toPrimitive"),o=Date.prototype;r in o||e(17)(o,r,e(213))},function(t,n,e){"use strict";var r=e(6),o=e(29);t.exports=function(t){if("string"!==t&&"number"!==t&&"default"!==t)throw TypeError("Incorrect hint");return o(r(this),"number"!=t)}},function(t,n,e){var r=e(0);r(r.S,"Array",{isArray:e(55)})},function(t,n,e){"use strict";var r=e(20),o=e(0),i=e(13),u=e(109),c=e(82),a=e(9),s=e(83),f=e(84);o(o.S+o.F*!e(56)(function(t){Array.from(t)}),"Array",{from:function(t){var n,e,o,l,h=i(t),g="function"==typeof this?this:Array,d=arguments.length,p=d>1?arguments[1]:void 0,v=void 0!==p,m=0,y=f(h);if(v&&(p=r(p,d>2?arguments[2]:void 0,2)),null==y||g==Array&&c(y))for(e=new g(n=a(h.length));n>m;m++)s(e,m,v?p(h[m],m):h[m]);else for(l=y.call(h),e=new g;!(o=l.next()).done;m++)s(e,m,v?u(l,p,[o.value,m],!0):o.value);return e.length=m,e}})},function(t,n,e){"use strict";var r=e(0),o=e(83);r(r.S+r.F*e(5)(function(){function t(){}return!(Array.of.call(t)instanceof t)}),"Array",{of:function(){for(var t=0,n=arguments.length,e=new("function"==typeof this?this:Array)(n);n>t;)o(e,t,arguments[t++]);return e.length=n,e}})},function(t,n,e){"use strict";var r=e(0),o=e(18),i=[].join;r(r.P+r.F*(e(48)!=Object||!e(19)(i)),"Array",{join:function(t){return i.call(o(this),void 0===t?",":t)}})},function(t,n,e){"use strict";var r=e(0),o=e(70),i=e(26),u=e(36),c=e(9),a=[].slice;r(r.P+r.F*e(5)(function(){o&&a.call(o)}),"Array",{slice:function(t,n){var e=c(this.length),r=i(this);if(n=void 0===n?e:n,"Array"==r)return a.call(this,t,n);for(var o=u(t,e),s=u(n,e),f=c(s-o),l=new Array(f),h=0;h<f;h++)l[h]="String"==r?this.charAt(o+h):this[o+h];return l}})},function(t,n,e){"use strict";var r=e(0),o=e(21),i=e(13),u=e(5),c=[].sort,a=[1,2,3];r(r.P+r.F*(u(function(){a.sort(void 0)})||!u(function(){a.sort(null)})||!e(19)(c)),"Array",{sort:function(t){return void 0===t?c.call(i(this)):c.call(i(this),o(t))}})},function(t,n,e){"use strict";var r=e(0),o=e(25)(0),i=e(19)([].forEach,!0);r(r.P+r.F*!i,"Array",{forEach:function(t){return o(this,t,arguments[1])}})},function(t,n,e){var r=e(7),o=e(55),i=e(8)("species");t.exports=function(t){var n;return o(t)&&("function"!=typeof(n=t.constructor)||n!==Array&&!o(n.prototype)||(n=void 0),r(n)&&null===(n=n[i])&&(n=void 0)),void 0===n?Array:n}},function(t,n,e){"use strict";var r=e(0),o=e(25)(1);r(r.P+r.F*!e(19)([].map,!0),"Array",{map:function(t){return o(this,t,arguments[1])}})},function(t,n,e){"use strict";var r=e(0),o=e(25)(2);r(r.P+r.F*!e(19)([].filter,!0),"Array",{filter:function(t){return o(this,t,arguments[1])}})},function(t,n,e){"use strict";var r=e(0),o=e(25)(3);r(r.P+r.F*!e(19)([].some,!0),"Array",{some:function(t){return o(this,t,arguments[1])}})},function(t,n,e){"use strict";var r=e(0),o=e(25)(4);r(r.P+r.F*!e(19)([].every,!0),"Array",{every:function(t){return o(this,t,arguments[1])}})},function(t,n,e){"use strict";var r=e(0),o=e(111);r(r.P+r.F*!e(19)([].reduce,!0),"Array",{reduce:function(t){return o(this,t,arguments.length,arguments[1],!1)}})},function(t,n,e){"use strict";var r=e(0),o=e(111);r(r.P+r.F*!e(19)([].reduceRight,!0),"Array",{reduceRight:function(t){return o(this,t,arguments.length,arguments[1],!0)}})},function(t,n,e){"use strict";var r=e(0),o=e(53)(!1),i=[].indexOf,u=!!i&&1/[1].indexOf(1,-0)<0;r(r.P+r.F*(u||!e(19)(i)),"Array",{indexOf:function(t){return u?i.apply(this,arguments)||0:o(this,t,arguments[1])}})},function(t,n,e){"use strict";var r=e(0),o=e(18),i=e(22),u=e(9),c=[].lastIndexOf,a=!!c&&1/[1].lastIndexOf(1,-0)<0;r(r.P+r.F*(a||!e(19)(c)),"Array",{lastIndexOf:function(t){if(a)return c.apply(this,arguments)||0;var n=o(this),e=u(n.length),r=e-1;for(arguments.length>1&&(r=Math.min(r,i(arguments[1]))),r<0&&(r=e+r);r>=0;r--)if(r in n&&n[r]===t)return r||0;return-1}})},function(t,n,e){var r=e(0);r(r.P,"Array",{copyWithin:e(112)}),e(40)("copyWithin")},function(t,n,e){var r=e(0);r(r.P,"Array",{fill:e(85)}),e(40)("fill")},function(t,n,e){"use strict";var r=e(0),o=e(25)(5),i=!0;"find"in[]&&Array(1).find(function(){i=!1}),r(r.P+r.F*i,"Array",{find:function(t){return o(this,t,arguments.length>1?arguments[1]:void 0)}}),e(40)("find")},function(t,n,e){"use strict";var r=e(0),o=e(25)(6),i="findIndex",u=!0;i in[]&&Array(1)[i](function(){u=!1}),r(r.P+r.F*u,"Array",{findIndex:function(t){return o(this,t,arguments.length>1?arguments[1]:void 0)}}),e(40)(i)},function(t,n,e){e(45)("Array")},function(t,n,e){var r=e(4),o=e(73),i=e(12).f,u=e(38).f,c=e(80),a=e(57),s=r.RegExp,f=s,l=s.prototype,h=/a/g,g=/a/g,d=new s(h)!==h;if(e(11)&&(!d||e(5)(function(){return g[e(8)("match")]=!1,s(h)!=h||s(g)==g||"/a/i"!=s(h,"i")}))){s=function(t,n){var e=this instanceof s,r=c(t),i=void 0===n;return!e&&r&&t.constructor===s&&i?t:o(d?new f(r&&!i?t.source:t,n):f((r=t instanceof s)?t.source:t,r&&i?a.call(t):n),e?this:l,s)};for(var p=function(t){t in s||i(s,t,{configurable:!0,get:function(){return f[t]},set:function(n){f[t]=n}})},v=u(f),m=0;v.length>m;)p(v[m++]);l.constructor=s,s.prototype=l,e(14)(r,"RegExp",s)}e(45)("RegExp")},function(t,n,e){"use strict";e(115);var r=e(6),o=e(57),i=e(11),u=/./.toString,c=function(t){e(14)(RegExp.prototype,"toString",t,!0)};e(5)(function(){return"/a/b"!=u.call({source:"a",flags:"b"})})?c(function(){var t=r(this);return"/".concat(t.source,"/","flags"in t?t.flags:!i&&t instanceof RegExp?o.call(t):void 0)}):"toString"!=u.name&&c(function(){return u.call(this)})},function(t,n,e){"use strict";var r=e(6),o=e(9),i=e(88),u=e(58);e(59)("match",1,function(t,n,e,c){return[function(e){var r=t(this),o=null==e?void 0:e[n];return void 0!==o?o.call(e,r):new RegExp(e)[n](String(r))},function(t){var n=c(e,t,this);if(n.done)return n.value;var a=r(t),s=String(this);if(!a.global)return u(a,s);var f=a.unicode;a.lastIndex=0;for(var l,h=[],g=0;null!==(l=u(a,s));){var d=String(l[0]);h[g]=d,""===d&&(a.lastIndex=i(s,o(a.lastIndex),f)),g++}return 0===g?null:h}]})},function(t,n,e){"use strict";var r=e(6),o=e(13),i=e(9),u=e(22),c=e(88),a=e(58),s=Math.max,f=Math.min,l=Math.floor,h=/\$([$&`']|\d\d?|<[^>]*>)/g,g=/\$([$&`']|\d\d?)/g;e(59)("replace",2,function(t,n,e,d){return[function(r,o){var i=t(this),u=null==r?void 0:r[n];return void 0!==u?u.call(r,i,o):e.call(String(i),r,o)},function(t,n){var o=d(e,t,this,n);if(o.done)return o.value;var l=r(t),h=String(this),g="function"==typeof n;g||(n=String(n));var v=l.global;if(v){var m=l.unicode;l.lastIndex=0}for(var y=[];;){var b=a(l,h);if(null===b)break;if(y.push(b),!v)break;""===String(b[0])&&(l.lastIndex=c(h,i(l.lastIndex),m))}for(var A,x="",w=0,_=0;_<y.length;_++){b=y[_];for(var S=String(b[0]),O=s(f(u(b.index),h.length),0),E=[],j=1;j<b.length;j++)E.push(void 0===(A=b[j])?A:String(A));var k=b.groups;if(g){var P=[S].concat(E,O,h);void 0!==k&&P.push(k);var I=String(n.apply(void 0,P))}else I=p(S,h,O,E,k,n);O>=w&&(x+=h.slice(w,O)+I,w=O+S.length)}return x+h.slice(w)}];function p(t,n,r,i,u,c){var a=r+t.length,s=i.length,f=g;return void 0!==u&&(u=o(u),f=h),e.call(c,f,function(e,o){var c;switch(o.charAt(0)){case"$":return"$";case"&":return t;case"`":return n.slice(0,r);case"'":return n.slice(a);case"<":c=u[o.slice(1,-1)];break;default:var f=+o;if(0===f)return e;if(f>s){var h=l(f/10);return 0===h?e:h<=s?void 0===i[h-1]?o.charAt(1):i[h-1]+o.charAt(1):e}c=i[f-1]}return void 0===c?"":c})}})},function(t,n,e){"use strict";var r=e(6),o=e(100),i=e(58);e(59)("search",1,function(t,n,e,u){return[function(e){var r=t(this),o=null==e?void 0:e[n];return void 0!==o?o.call(e,r):new RegExp(e)[n](String(r))},function(t){var n=u(e,t,this);if(n.done)return n.value;var c=r(t),a=String(this),s=c.lastIndex;o(s,0)||(c.lastIndex=0);var f=i(c,a);return o(c.lastIndex,s)||(c.lastIndex=s),null===f?-1:f.index}]})},function(t,n,e){"use strict";var r=e(80),o=e(6),i=e(51),u=e(88),c=e(9),a=e(58),s=e(87),f=e(5),l=Math.min,h=[].push,g=!f(function(){RegExp(4294967295,"y")});e(59)("split",2,function(t,n,e,f){var d;return d="c"=="abbc".split(/(b)*/)[1]||4!="test".split(/(?:)/,-1).length||2!="ab".split(/(?:ab)*/).length||4!=".".split(/(.?)(.?)/).length||".".split(/()()/).length>1||"".split(/.?/).length?function(t,n){var o=String(this);if(void 0===t&&0===n)return[];if(!r(t))return e.call(o,t,n);for(var i,u,c,a=[],f=(t.ignoreCase?"i":"")+(t.multiline?"m":"")+(t.unicode?"u":"")+(t.sticky?"y":""),l=0,g=void 0===n?4294967295:n>>>0,d=new RegExp(t.source,f+"g");(i=s.call(d,o))&&!((u=d.lastIndex)>l&&(a.push(o.slice(l,i.index)),i.length>1&&i.index<o.length&&h.apply(a,i.slice(1)),c=i[0].length,l=u,a.length>=g));)d.lastIndex===i.index&&d.lastIndex++;return l===o.length?!c&&d.test("")||a.push(""):a.push(o.slice(l)),a.length>g?a.slice(0,g):a}:"0".split(void 0,0).length?function(t,n){return void 0===t&&0===n?[]:e.call(this,t,n)}:e,[function(e,r){var o=t(this),i=null==e?void 0:e[n];return void 0!==i?i.call(e,o,r):d.call(String(o),e,r)},function(t,n){var r=f(d,t,this,n,d!==e);if(r.done)return r.value;var s=o(t),h=String(this),p=i(s,RegExp),v=s.unicode,m=(s.ignoreCase?"i":"")+(s.multiline?"m":"")+(s.unicode?"u":"")+(g?"y":"g"),y=new p(g?s:"^(?:"+s.source+")",m),b=void 0===n?4294967295:n>>>0;if(0===b)return[];if(0===h.length)return null===a(y,h)?[h]:[];for(var A=0,x=0,w=[];x<h.length;){y.lastIndex=g?x:0;var _,S=a(y,g?h:h.slice(x));if(null===S||(_=l(c(y.lastIndex+(g?0:x)),h.length))===A)x=u(h,x,v);else{if(w.push(h.slice(A,x)),w.length===b)return w;for(var O=1;O<=S.length-1;O++)if(w.push(S[O]),w.length===b)return w;x=A=_}}return w.push(h.slice(A)),w}]})},function(t,n,e){var r=e(4),o=e(89).set,i=r.MutationObserver||r.WebKitMutationObserver,u=r.process,c=r.Promise,a="process"==e(26)(u);t.exports=function(){var t,n,e,s=function(){var r,o;for(a&&(r=u.domain)&&r.exit();t;){o=t.fn,t=t.next;try{o()}catch(r){throw t?e():n=void 0,r}}n=void 0,r&&r.enter()};if(a)e=function(){u.nextTick(s)};else if(!i||r.navigator&&r.navigator.standalone)if(c&&c.resolve){var f=c.resolve(void 0);e=function(){f.then(s)}}else e=function(){o.call(r,s)};else{var l=!0,h=document.createTextNode("");new i(s).observe(h,{characterData:!0}),e=function(){h.data=l=!l}}return function(r){var o={fn:r,next:void 0};n&&(n.next=o),t||(t=o,e()),n=o}}},function(t,n){t.exports=function(t){try{return{e:!1,v:t()}}catch(t){return{e:!0,v:t}}}},function(t,n,e){"use strict";var r=e(119),o=e(41);t.exports=e(62)("Map",function(t){return function(){return t(this,arguments.length>0?arguments[0]:void 0)}},{get:function(t){var n=r.getEntry(o(this,"Map"),t);return n&&n.v},set:function(t,n){return r.def(o(this,"Map"),0===t?0:t,n)}},r,!0)},function(t,n,e){"use strict";var r=e(119),o=e(41);t.exports=e(62)("Set",function(t){return function(){return t(this,arguments.length>0?arguments[0]:void 0)}},{add:function(t){return r.def(o(this,"Set"),t=0===t?0:t,t)}},r)},function(t,n,e){"use strict";var r,o=e(4),i=e(25)(0),u=e(14),c=e(30),a=e(99),s=e(120),f=e(7),l=e(41),h=e(41),g=!o.ActiveXObject&&"ActiveXObject"in o,d=c.getWeak,p=Object.isExtensible,v=s.ufstore,m=function(t){return function(){return t(this,arguments.length>0?arguments[0]:void 0)}},y={get:function(t){if(f(t)){var n=d(t);return!0===n?v(l(this,"WeakMap")).get(t):n?n[this._i]:void 0}},set:function(t,n){return s.def(l(this,"WeakMap"),t,n)}},b=t.exports=e(62)("WeakMap",m,y,s,!0,!0);h&&g&&(a((r=s.getConstructor(m,"WeakMap")).prototype,y),c.NEED=!0,i(["delete","has","get","set"],function(t){var n=b.prototype,e=n[t];u(n,t,function(n,o){if(f(n)&&!p(n)){this._f||(this._f=new r);var i=this._f[t](n,o);return"set"==t?this:i}return e.call(this,n,o)})}))},function(t,n,e){"use strict";var r=e(120),o=e(41);e(62)("WeakSet",function(t){return function(){return t(this,arguments.length>0?arguments[0]:void 0)}},{add:function(t){return r.def(o(this,"WeakSet"),t,!0)}},r,!1,!0)},function(t,n,e){"use strict";var r=e(0),o=e(63),i=e(90),u=e(6),c=e(36),a=e(9),s=e(7),f=e(4).ArrayBuffer,l=e(51),h=i.ArrayBuffer,g=i.DataView,d=o.ABV&&f.isView,p=h.prototype.slice,v=o.VIEW;r(r.G+r.W+r.F*(f!==h),{ArrayBuffer:h}),r(r.S+r.F*!o.CONSTR,"ArrayBuffer",{isView:function(t){return d&&d(t)||s(t)&&v in t}}),r(r.P+r.U+r.F*e(5)(function(){return!new h(2).slice(1,void 0).byteLength}),"ArrayBuffer",{slice:function(t,n){if(void 0!==p&&void 0===n)return p.call(u(this),t);for(var e=u(this).byteLength,r=c(t,e),o=c(void 0===n?e:n,e),i=new(l(this,h))(a(o-r)),s=new g(this),f=new g(i),d=0;r<o;)f.setUint8(d++,s.getUint8(r++));return i}}),e(45)("ArrayBuffer")},function(t,n,e){var r=e(0);r(r.G+r.W+r.F*!e(63).ABV,{DataView:e(90).DataView})},function(t,n,e){e(28)("Int8",1,function(t){return function(n,e,r){return t(this,n,e,r)}})},function(t,n,e){e(28)("Uint8",1,function(t){return function(n,e,r){return t(this,n,e,r)}})},function(t,n,e){e(28)("Uint8",1,function(t){return function(n,e,r){return t(this,n,e,r)}},!0)},function(t,n,e){e(28)("Int16",2,function(t){return function(n,e,r){return t(this,n,e,r)}})},function(t,n,e){e(28)("Uint16",2,function(t){return function(n,e,r){return t(this,n,e,r)}})},function(t,n,e){e(28)("Int32",4,function(t){return function(n,e,r){return t(this,n,e,r)}})},function(t,n,e){e(28)("Uint32",4,function(t){return function(n,e,r){return t(this,n,e,r)}})},function(t,n,e){e(28)("Float32",4,function(t){return function(n,e,r){return t(this,n,e,r)}})},function(t,n,e){e(28)("Float64",8,function(t){return function(n,e,r){return t(this,n,e,r)}})},function(t,n,e){var r=e(0),o=e(21),i=e(6),u=(e(4).Reflect||{}).apply,c=Function.apply;r(r.S+r.F*!e(5)(function(){u(function(){})}),"Reflect",{apply:function(t,n,e){var r=o(t),a=i(e);return u?u(r,n,a):c.call(r,n,a)}})},function(t,n,e){var r=e(0),o=e(37),i=e(21),u=e(6),c=e(7),a=e(5),s=e(101),f=(e(4).Reflect||{}).construct,l=a(function(){function t(){}return!(f(function(){},[],t)instanceof t)}),h=!a(function(){f(function(){})});r(r.S+r.F*(l||h),"Reflect",{construct:function(t,n){i(t),u(n);var e=arguments.length<3?t:i(arguments[2]);if(h&&!l)return f(t,n,e);if(t==e){switch(n.length){case 0:return new t;case 1:return new t(n[0]);case 2:return new t(n[0],n[1]);case 3:return new t(n[0],n[1],n[2]);case 4:return new t(n[0],n[1],n[2],n[3])}var r=[null];return r.push.apply(r,n),new(s.apply(t,r))}var a=e.prototype,g=o(c(a)?a:Object.prototype),d=Function.apply.call(t,g,n);return c(d)?d:g}})},function(t,n,e){var r=e(12),o=e(0),i=e(6),u=e(29);o(o.S+o.F*e(5)(function(){Reflect.defineProperty(r.f({},1,{value:1}),1,{value:2})}),"Reflect",{defineProperty:function(t,n,e){i(t),n=u(n,!0),i(e);try{return r.f(t,n,e),!0}catch(t){return!1}}})},function(t,n,e){var r=e(0),o=e(23).f,i=e(6);r(r.S,"Reflect",{deleteProperty:function(t,n){var e=o(i(t),n);return!(e&&!e.configurable)&&delete t[n]}})},function(t,n,e){"use strict";var r=e(0),o=e(6),i=function(t){this._t=o(t),this._i=0;var n,e=this._k=[];for(n in t)e.push(n)};e(108)(i,"Object",function(){var t,n=this._k;do{if(this._i>=n.length)return{value:void 0,done:!0}}while(!((t=n[this._i++])in this._t));return{value:t,done:!1}}),r(r.S,"Reflect",{enumerate:function(t){return new i(t)}})},function(t,n,e){var r=e(23),o=e(39),i=e(16),u=e(0),c=e(7),a=e(6);u(u.S,"Reflect",{get:function t(n,e){var u,s,f=arguments.length<3?n:arguments[2];return a(n)===f?n[e]:(u=r.f(n,e))?i(u,"value")?u.value:void 0!==u.get?u.get.call(f):void 0:c(s=o(n))?t(s,e,f):void 0}})},function(t,n,e){var r=e(23),o=e(0),i=e(6);o(o.S,"Reflect",{getOwnPropertyDescriptor:function(t,n){return r.f(i(t),n)}})},function(t,n,e){var r=e(0),o=e(39),i=e(6);r(r.S,"Reflect",{getPrototypeOf:function(t){return o(i(t))}})},function(t,n,e){var r=e(0);r(r.S,"Reflect",{has:function(t,n){return n in t}})},function(t,n,e){var r=e(0),o=e(6),i=Object.isExtensible;r(r.S,"Reflect",{isExtensible:function(t){return o(t),!i||i(t)}})},function(t,n,e){var r=e(0);r(r.S,"Reflect",{ownKeys:e(122)})},function(t,n,e){var r=e(0),o=e(6),i=Object.preventExtensions;r(r.S,"Reflect",{preventExtensions:function(t){o(t);try{return i&&i(t),!0}catch(t){return!1}}})},function(t,n,e){var r=e(12),o=e(23),i=e(39),u=e(16),c=e(0),a=e(32),s=e(6),f=e(7);c(c.S,"Reflect",{set:function t(n,e,c){var l,h,g=arguments.length<4?n:arguments[3],d=o.f(s(n),e);if(!d){if(f(h=i(n)))return t(h,e,c,g);d=a(0)}if(u(d,"value")){if(!1===d.writable||!f(g))return!1;if(l=o.f(g,e)){if(l.get||l.set||!1===l.writable)return!1;l.value=c,r.f(g,e,l)}else r.f(g,e,a(0,c));return!0}return void 0!==d.set&&(d.set.call(g,c),!0)}})},function(t,n,e){var r=e(0),o=e(71);o&&r(r.S,"Reflect",{setPrototypeOf:function(t,n){o.check(t,n);try{return o.set(t,n),!0}catch(t){return!1}}})},function(t,n,e){e(273),t.exports=e(10).Array.includes},function(t,n,e){"use strict";var r=e(0),o=e(53)(!0);r(r.P,"Array",{includes:function(t){return o(this,t,arguments.length>1?arguments[1]:void 0)}}),e(40)("includes")},function(t,n,e){e(275),t.exports=e(10).Array.flatMap},function(t,n,e){"use strict";var r=e(0),o=e(276),i=e(13),u=e(9),c=e(21),a=e(110);r(r.P,"Array",{flatMap:function(t){var n,e,r=i(this);return c(t),n=u(r.length),e=a(r,0),o(e,r,r,n,0,1,t,arguments[1]),e}}),e(40)("flatMap")},function(t,n,e){"use strict";var r=e(55),o=e(7),i=e(9),u=e(20),c=e(8)("isConcatSpreadable");t.exports=function t(n,e,a,s,f,l,h,g){for(var d,p,v=f,m=0,y=!!h&&u(h,g,3);m<s;){if(m in a){if(d=y?y(a[m],m,e):a[m],p=!1,o(d)&&(p=void 0!==(p=d[c])?!!p:r(d)),p&&l>0)v=t(n,e,d,i(d.length),v,l-1)-1;else{if(v>=9007199254740991)throw TypeError();n[v]=d}v++}m++}return v}},function(t,n,e){e(278),t.exports=e(10).String.padStart},function(t,n,e){"use strict";var r=e(0),o=e(123),i=e(61),u=/Version\/10\.\d+(\.\d+)?( Mobile\/\w+)? Safari\//.test(i);r(r.P+r.F*u,"String",{padStart:function(t){return o(this,t,arguments.length>1?arguments[1]:void 0,!0)}})},function(t,n,e){e(280),t.exports=e(10).String.padEnd},function(t,n,e){"use strict";var r=e(0),o=e(123),i=e(61),u=/Version\/10\.\d+(\.\d+)?( Mobile\/\w+)? Safari\//.test(i);r(r.P+r.F*u,"String",{padEnd:function(t){return o(this,t,arguments.length>1?arguments[1]:void 0,!1)}})},function(t,n,e){e(282),t.exports=e(10).String.trimLeft},function(t,n,e){"use strict";e(43)("trimLeft",function(t){return function(){return t(this,1)}},"trimStart")},function(t,n,e){e(284),t.exports=e(10).String.trimRight},function(t,n,e){"use strict";e(43)("trimRight",function(t){return function(){return t(this,2)}},"trimEnd")},function(t,n,e){e(286),t.exports=e(67).f("asyncIterator")},function(t,n,e){e(95)("asyncIterator")},function(t,n,e){e(288),t.exports=e(10).Object.getOwnPropertyDescriptors},function(t,n,e){var r=e(0),o=e(122),i=e(18),u=e(23),c=e(83);r(r.S,"Object",{getOwnPropertyDescriptors:function(t){for(var n,e,r=i(t),a=u.f,s=o(r),f={},l=0;s.length>l;)void 0!==(e=a(r,n=s[l++]))&&c(f,n,e);return f}})},function(t,n,e){e(290),t.exports=e(10).Object.values},function(t,n,e){var r=e(0),o=e(124)(!1);r(r.S,"Object",{values:function(t){return o(t)}})},function(t,n,e){e(292),t.exports=e(10).Object.entries},function(t,n,e){var r=e(0),o=e(124)(!0);r(r.S,"Object",{entries:function(t){return o(t)}})},function(t,n,e){"use strict";e(116),e(294),t.exports=e(10).Promise.finally},function(t,n,e){"use strict";var r=e(0),o=e(10),i=e(4),u=e(51),c=e(118);r(r.P+r.R,"Promise",{finally:function(t){var n=u(this,o.Promise||i.Promise),e="function"==typeof t;return this.then(e?function(e){return c(n,t()).then(function(){return e})}:t,e?function(e){return c(n,t()).then(function(){throw e})}:t)}})},function(t,n,e){e(296),e(297),e(298),t.exports=e(10)},function(t,n,e){var r=e(4),o=e(0),i=e(61),u=[].slice,c=/MSIE .\./.test(i),a=function(t){return function(n,e){var r=arguments.length>2,o=!!r&&u.call(arguments,2);return t(r?function(){("function"==typeof n?n:Function(n)).apply(this,o)}:n,e)}};o(o.G+o.B+o.F*c,{setTimeout:a(r.setTimeout),setInterval:a(r.setInterval)})},function(t,n,e){var r=e(0),o=e(89);r(r.G+r.B,{setImmediate:o.set,clearImmediate:o.clear})},function(t,n,e){for(var r=e(86),o=e(35),i=e(14),u=e(4),c=e(17),a=e(44),s=e(8),f=s("iterator"),l=s("toStringTag"),h=a.Array,g={CSSRuleList:!0,CSSStyleDeclaration:!1,CSSValueList:!1,ClientRectList:!1,DOMRectList:!1,DOMStringList:!1,DOMTokenList:!0,DataTransferItemList:!1,FileList:!1,HTMLAllCollection:!1,HTMLCollection:!1,HTMLFormElement:!1,HTMLSelectElement:!1,MediaList:!0,MimeTypeArray:!1,NamedNodeMap:!1,NodeList:!0,PaintRequestList:!1,Plugin:!1,PluginArray:!1,SVGLengthList:!1,SVGNumberList:!1,SVGPathSegList:!1,SVGPointList:!1,SVGStringList:!1,SVGTransformList:!1,SourceBufferList:!1,StyleSheetList:!0,TextTrackCueList:!1,TextTrackList:!1,TouchList:!1},d=o(g),p=0;p<d.length;p++){var v,m=d[p],y=g[m],b=u[m],A=b&&b.prototype;if(A&&(A[f]||c(A,f,h),A[l]||c(A,l,m),a[m]=h,y))for(v in r)A[v]||i(A,v,r[v],!0)}},function(t,n,e){var r=function(t){"use strict";var n,e=Object.prototype,r=e.hasOwnProperty,o="function"==typeof Symbol?Symbol:{},i=o.iterator||"@@iterator",u=o.asyncIterator||"@@asyncIterator",c=o.toStringTag||"@@toStringTag";function a(t,n,e){return Object.defineProperty(t,n,{value:e,enumerable:!0,configurable:!0,writable:!0}),t[n]}try{a({},"")}catch(t){a=function(t,n,e){return t[n]=e}}function s(t,n,e,r){var o=n&&n.prototype instanceof v?n:v,i=Object.create(o.prototype),u=new k(r||[]);return i._invoke=function(t,n,e){var r=l;return function(o,i){if(r===g)throw new Error("Generator is already running");if(r===d){if("throw"===o)throw i;return I()}for(e.method=o,e.arg=i;;){var u=e.delegate;if(u){var c=O(u,e);if(c){if(c===p)continue;return c}}if("next"===e.method)e.sent=e._sent=e.arg;else if("throw"===e.method){if(r===l)throw r=d,e.arg;e.dispatchException(e.arg)}else"return"===e.method&&e.abrupt("return",e.arg);r=g;var a=f(t,n,e);if("normal"===a.type){if(r=e.done?d:h,a.arg===p)continue;return{value:a.arg,done:e.done}}"throw"===a.type&&(r=d,e.method="throw",e.arg=a.arg)}}}(t,e,u),i}function f(t,n,e){try{return{type:"normal",arg:t.call(n,e)}}catch(t){return{type:"throw",arg:t}}}t.wrap=s;var l="suspendedStart",h="suspendedYield",g="executing",d="completed",p={};function v(){}function m(){}function y(){}var b={};b[i]=function(){return this};var A=Object.getPrototypeOf,x=A&&A(A(P([])));x&&x!==e&&r.call(x,i)&&(b=x);var w=y.prototype=v.prototype=Object.create(b);function _(t){["next","throw","return"].forEach(function(n){a(t,n,function(t){return this._invoke(n,t)})})}function S(t,n){var e;this._invoke=function(o,i){function u(){return new n(function(e,u){!function e(o,i,u,c){var a=f(t[o],t,i);if("throw"!==a.type){var s=a.arg,l=s.value;return l&&"object"==typeof l&&r.call(l,"__await")?n.resolve(l.__await).then(function(t){e("next",t,u,c)},function(t){e("throw",t,u,c)}):n.resolve(l).then(function(t){s.value=t,u(s)},function(t){return e("throw",t,u,c)})}c(a.arg)}(o,i,e,u)})}return e=e?e.then(u,u):u()}}function O(t,e){var r=t.iterator[e.method];if(r===n){if(e.delegate=null,"throw"===e.method){if(t.iterator.return&&(e.method="return",e.arg=n,O(t,e),"throw"===e.method))return p;e.method="throw",e.arg=new TypeError("The iterator does not provide a 'throw' method")}return p}var o=f(r,t.iterator,e.arg);if("throw"===o.type)return e.method="throw",e.arg=o.arg,e.delegate=null,p;var i=o.arg;return i?i.done?(e[t.resultName]=i.value,e.next=t.nextLoc,"return"!==e.method&&(e.method="next",e.arg=n),e.delegate=null,p):i:(e.method="throw",e.arg=new TypeError("iterator result is not an object"),e.delegate=null,p)}function E(t){var n={tryLoc:t[0]};1 in t&&(n.catchLoc=t[1]),2 in t&&(n.finallyLoc=t[2],n.afterLoc=t[3]),this.tryEntries.push(n)}function j(t){var n=t.completion||{};n.type="normal",delete n.arg,t.completion=n}function k(t){this.tryEntries=[{tryLoc:"root"}],t.forEach(E,this),this.reset(!0)}function P(t){if(t){var e=t[i];if(e)return e.call(t);if("function"==typeof t.next)return t;if(!isNaN(t.length)){var o=-1,u=function e(){for(;++o<t.length;)if(r.call(t,o))return e.value=t[o],e.done=!1,e;return e.value=n,e.done=!0,e};return u.next=u}}return{next:I}}function I(){return{value:n,done:!0}}return m.prototype=w.constructor=y,y.constructor=m,m.displayName=a(y,c,"GeneratorFunction"),t.isGeneratorFunction=function(t){var n="function"==typeof t&&t.constructor;return!!n&&(n===m||"GeneratorFunction"===(n.displayName||n.name))},t.mark=function(t){return Object.setPrototypeOf?Object.setPrototypeOf(t,y):(t.__proto__=y,a(t,c,"GeneratorFunction")),t.prototype=Object.create(w),t},t.awrap=function(t){return{__await:t}},_(S.prototype),S.prototype[u]=function(){return this},t.AsyncIterator=S,t.async=function(n,e,r,o,i){void 0===i&&(i=Promise);var u=new S(s(n,e,r,o),i);return t.isGeneratorFunction(e)?u:u.next().then(function(t){return t.done?t.value:u.next()})},_(w),a(w,c,"Generator"),w[i]=function(){return this},w.toString=function(){return"[object Generator]"},t.keys=function(t){var n=[];for(var e in t)n.push(e);return n.reverse(),function e(){for(;n.length;){var r=n.pop();if(r in t)return e.value=r,e.done=!1,e}return e.done=!0,e}},t.values=P,k.prototype={constructor:k,reset:function(t){if(this.prev=0,this.next=0,this.sent=this._sent=n,this.done=!1,this.delegate=null,this.method="next",this.arg=n,this.tryEntries.forEach(j),!t)for(var e in this)"t"===e.charAt(0)&&r.call(this,e)&&!isNaN(+e.slice(1))&&(this[e]=n)},stop:function(){this.done=!0;var t=this.tryEntries[0].completion;if("throw"===t.type)throw t.arg;return this.rval},dispatchException:function(t){if(this.done)throw t;var e=this;function o(r,o){return c.type="throw",c.arg=t,e.next=r,o&&(e.method="next",e.arg=n),!!o}for(var i=this.tryEntries.length-1;i>=0;--i){var u=this.tryEntries[i],c=u.completion;if("root"===u.tryLoc)return o("end");if(u.tryLoc<=this.prev){var a=r.call(u,"catchLoc"),s=r.call(u,"finallyLoc");if(a&&s){if(this.prev<u.catchLoc)return o(u.catchLoc,!0);if(this.prev<u.finallyLoc)return o(u.finallyLoc)}else if(a){if(this.prev<u.catchLoc)return o(u.catchLoc,!0)}else{if(!s)throw new Error("try statement without catch or finally");if(this.prev<u.finallyLoc)return o(u.finallyLoc)}}}},abrupt:function(t,n){for(var e=this.tryEntries.length-1;e>=0;--e){var o=this.tryEntries[e];if(o.tryLoc<=this.prev&&r.call(o,"finallyLoc")&&this.prev<o.finallyLoc){var i=o;break}}i&&("break"===t||"continue"===t)&&i.tryLoc<=n&&n<=i.finallyLoc&&(i=null);var u=i?i.completion:{};return u.type=t,u.arg=n,i?(this.method="next",this.next=i.finallyLoc,p):this.complete(u)},complete:function(t,n){if("throw"===t.type)throw t.arg;return"break"===t.type||"continue"===t.type?this.next=t.arg:"return"===t.type?(this.rval=this.arg=t.arg,this.method="return",this.next="end"):"normal"===t.type&&n&&(this.next=n),p},finish:function(t){for(var n=this.tryEntries.length-1;n>=0;--n){var e=this.tryEntries[n];if(e.finallyLoc===t)return this.complete(e.completion,e.afterLoc),j(e),p}},catch:function(t){for(var n=this.tryEntries.length-1;n>=0;--n){var e=this.tryEntries[n];if(e.tryLoc===t){var r=e.completion;if("throw"===r.type){var o=r.arg;j(e)}return o}}throw new Error("illegal catch attempt")},delegateYield:function(t,e,r){return this.delegate={iterator:P(t),resultName:e,nextLoc:r},"next"===this.method&&(this.arg=n),p}},t}(t.exports);try{regeneratorRuntime=r}catch(t){Function("r","regeneratorRuntime = r")(r)}},function(t,n,e){e(301),t.exports=e(125).global},function(t,n,e){var r=e(302);r(r.G,{global:e(91)})},function(t,n,e){var r=e(91),o=e(125),i=e(303),u=e(305),c=e(312),a=function(t,n,e){var s,f,l,h=t&a.F,g=t&a.G,d=t&a.S,p=t&a.P,v=t&a.B,m=t&a.W,y=g?o:o[n]||(o[n]={}),b=y.prototype,A=g?r:d?r[n]:(r[n]||{}).prototype;for(s in g&&(e=n),e)(f=!h&&A&&void 0!==A[s])&&c(y,s)||(l=f?A[s]:e[s],y[s]=g&&"function"!=typeof A[s]?e[s]:v&&f?i(l,r):m&&A[s]==l?function(t){var n=function(n,e,r){if(this instanceof t){switch(arguments.length){case 0:return new t;case 1:return new t(n);case 2:return new t(n,e)}return new t(n,e,r)}return t.apply(this,arguments)};return n.prototype=t.prototype,n}(l):p&&"function"==typeof l?i(Function.call,l):l,p&&((y.virtual||(y.virtual={}))[s]=l,t&a.R&&b&&!b[s]&&u(b,s,l)))};a.F=1,a.G=2,a.S=4,a.P=8,a.B=16,a.W=32,a.U=64,a.R=128,t.exports=a},function(t,n,e){var r=e(304);t.exports=function(t,n,e){if(r(t),void 0===n)return t;switch(e){case 1:return function(e){return t.call(n,e)};case 2:return function(e,r){return t.call(n,e,r)};case 3:return function(e,r,o){return t.call(n,e,r,o)}}return function(){return t.apply(n,arguments)}}},function(t,n){t.exports=function(t){if("function"!=typeof t)throw TypeError(t+" is not a function!");return t}},function(t,n,e){var r=e(306),o=e(311);t.exports=e(93)?function(t,n,e){return r.f(t,n,o(1,e))}:function(t,n,e){return t[n]=e,t}},function(t,n,e){var r=e(307),o=e(308),i=e(310),u=Object.defineProperty;n.f=e(93)?Object.defineProperty:function(t,n,e){if(r(t),n=i(n,!0),r(e),o)try{return u(t,n,e)}catch(t){}if("get"in e||"set"in e)throw TypeError("Accessors not supported!");return"value"in e&&(t[n]=e.value),t}},function(t,n,e){var r=e(92);t.exports=function(t){if(!r(t))throw TypeError(t+" is not an object!");return t}},function(t,n,e){t.exports=!e(93)&&!e(126)(function(){return 7!=Object.defineProperty(e(309)("div"),"a",{get:function(){return 7}}).a})},function(t,n,e){var r=e(92),o=e(91).document,i=r(o)&&r(o.createElement);t.exports=function(t){return i?o.createElement(t):{}}},function(t,n,e){var r=e(92);t.exports=function(t,n){if(!r(t))return t;var e,o;if(n&&"function"==typeof(e=t.toString)&&!r(o=e.call(t)))return o;if("function"==typeof(e=t.valueOf)&&!r(o=e.call(t)))return o;if(!n&&"function"==typeof(e=t.toString)&&!r(o=e.call(t)))return o;throw TypeError("Can't convert object to primitive value")}},function(t,n){t.exports=function(t,n){return{enumerable:!(1&t),configurable:!(2&t),writable:!(4&t),value:n}}},function(t,n){var e={}.hasOwnProperty;t.exports=function(t,n){return e.call(t,n)}},,function(t,n,e){"use strict";e.r(n),e.d(n,"redditModifications",function(){return f});e(31);var r=e(2),o=e(64),i=e(3),u=e.n(i);function c(t,n){return function(t){if(Array.isArray(t))return t}(t)||function(t,n){var e=[],r=!0,o=!1,i=void 0;try{for(var u,c=t[Symbol.iterator]();!(r=(u=c.next()).done)&&(e.push(u.value),!n||e.length!==n);r=!0);}catch(t){o=!0,i=t}finally{try{r||null==c.return||c.return()}finally{if(o)throw i}}return e}(t,n)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}()}var a=/^t1_.+/,s=/^t3_.+/,f=function(t,n,e){var r=null!==document.querySelector("#SHORTCUT_FOCUSABLE_DIV");if(l(r,e),!n)if(r){p($(".Comment"),t),$(document).arrive(".Comment",function(n){p([n],t)});m($(".Post"),t),$(document).arrive(".Post",function(n){m([n],t)});$(document).arrive('.Post div[data-test-id="post-content"]',function(t){g(t,e)})}else{var o=".thing.link, .thing.comment";y($(o),t),$(document).arrive(o,function(n){y([n],t)})}},l=function(t,n){var e=arguments.length>2&&void 0!==arguments[2]?arguments[2]:".Post",o=arguments.length>3&&void 0!==arguments[3]?arguments[3]:{},i=Object(r.getFullIDsFromPath)(window.location.pathname),a=c(i,4),s=a[0],f=a[1];a[2],a[3];t&&f&&0===Object.keys(o).length?u.a.runtime.sendMessage({action:"get-reddit-items-by-id",ids:[s],monitor_quarantined:n}).then(function(n){n&&n.items&&n.items.length&&(o=n.items[0].data,h({isNewReddit:t,newRedditTarget:e,postData:o}))}):h({isNewReddit:t,newRedditTarget:e,postData:o})},h=function(t){var n=t.isNewReddit,e=t.newRedditTarget,o=void 0===e?".Post":e,i=t.postData,a=void 0===i?{}:i,s=c(Object(r.getFullIDsFromPath)(window.location.pathname),4),f=s[0],l=(s[1],s[2],s[3]),h=void 0,g=void 0;if(f&&($('meta[name="robots"][content="noindex,nofollow"]').length||"is_robot_indexable"in a&&!a.is_robot_indexable)){var d=a.author||$(".link .top-matter .author").first().text()||$('.link .top-matter .tagline span:contains("[deleted]")').text()||$('.Post span:contains("u/[deleted]")').first().text();"[deleted]"!==d&&"u/[deleted]"!==d||"moderator"===a.removed_by_category?(h="rev-mod-removed",g="This post is unapproved. It is either waiting to be approved, or it was removed by someone or some robot."):(h="rev-user-deleted",g="This post was either deleted by the person who posted it, or removed by a moderator and then deleted by the person who posted it.")}if(g){var p=" It is not currently visible in r/".concat(l," and may not appear in web search results."),v='<div class="rev-from"><a id="'.concat("goto-options-from-content",'" href="#">Reveddit Real-Time</a> note</div>'),m=window.location.pathname.split("/",6).join("/"),y='<p><a href="https://www.reveddit.com'.concat(m,'/">View the post on Reveddit.com</a></p>');if(n){g+=" More details may appear in a message above from reddit.";var b=$('<div class="rev-new-reddit-message-wrap '.concat(h,'">').concat(v,"</div>")),A=$('<div class="rev-new-reddit-message-content"></div>'),x=$('<div class="rev-new-reddit-message-content-description">'.concat(g).concat(p,"</div>"));A.append(x),A.append(y),b.append(A),$(o).first().after(b)}else{g+=' View the post <a href="https://new.reddit.com'.concat(m,'/">on new reddit</a> for more details.'),$('<div class="reddit-infobar md-container-small '.concat(h,'">')).append(v).append('<div class="md"><p>'.concat(g).concat(p,"</p>").concat(y,"</div>")).prependTo('div.content[role="main"]')}$("#".concat("goto-options-from-content")).click(function(){return u.a.runtime.sendMessage({action:"open-options"})})}},g=function(t,n){var e=c(Object(r.getFullIDsFromPath)(window.location.pathname),4),o=e[0];e[1],e[2],e[3];u.a.runtime.sendMessage({action:"get-reddit-items-by-id",ids:[o],monitor_quarantined:n}).then(function(e){if(e&&e.items&&e.items.length){var r=e.items[0].data;l(!0,n,t.parentNode,r)}})},d=function(t,n){var e=t.id;return e&&e.match(n)?e:(e=$(t).attr("class").split(/\s+/).filter(function(t){return t.match(n)})[0])&&e.match(n)?e:(e=t.parentNode.id)&&e.match(n)?e:e=$(t).closest("div[tabindex=-1]").attr("id")},p=function(t,n){$(t).each(function(t,e){var r=$(e).closest(".Comment")[0],i=d(r,a);if(i&&i.match(a)){var u=v(r,"save"),c=u.parent();u.length||(c=(u=v(r,"share")).parent(),u.length||(u=$("<button>...</button>"),c=r));var s=u.clone(),f="",l=r.querySelector(".RichTextJSON-root");l&&(f=l.textContent),i in n?Object(o.setTextAndFunction_unsubscribe)(i,s,f).appendTo(c):Object(o.setTextAndFunction_subscribe)(i,s,f).appendTo(c)}})},v=function(t,n){return $(t).find('button:equalsi("'.concat(n,'")')).first()},m=function(t,n){$(t).each(function(t,e){var r=d(e,s);if(r&&r.match(s)){var i=$(e).find('button :equalsi("save")').first().parent(),u=i.clone();u.find("i.icon").first().parent().remove();var c=i.parent().children("button").last();r in n?Object(o.setTextAndFunction_unsubscribe)(r,u).insertAfter(c):Object(o.setTextAndFunction_subscribe)(r,u).insertAfter(c)}})},y=function(t,n){$(t).each(function(t,e){var i=e.getAttribute("data-fullname");if(!i){var u=c(Object(r.getFullIDsFromPath)(e.getAttribute("data-permalink")||""),4),a=u[0],s=u[1];u[2],u[3];s?i=s:a&&(i=a)}if(i){var f=e.querySelector("ul.buttons");if(f){var l="",h=e.querySelector(".usertext-body");h&&i.match(/^t1_/)&&(l=h.textContent);var g=Object(o.setTextAndFunction_subscribe)(i,$('<a href="">')[0],l);i in n&&(g=Object(o.setTextAndFunction_unsubscribe)(i,$('<a href="">')[0],l)),$(f).append(g.wrap("<li>").parent())}}})}},function(t,n,e){"use strict";e.r(n),e.d(n,"revdditModifications",function(){return i});var r=e(1),o=e(64),i=(e(3),function(t,n,e,o){var i,s,f,l,h;(e||o)&&(i="numItemsLoaded",s=document.querySelector(".main"),f="data-numitemsloaded",l=1,h=function(){!function(t,n,e){var o=a(".comment.removed, .post.removed, .comment.deleted, .post.deleted"),i=a(".comment:not(.removed), .post:not(.removed)"),u=a(".comment.locked, .post.locked"),c=a(".comment:not(.locked)");Object(r.markIDsAsSeenIfSubscribed)(t,n,e,o,i,u,c,function(t){chrome.runtime.sendMessage({action:"update-badge"})})}(t,n,e)},new MutationObserver(function(t){var n=document.getElementById(i);n&&n.getAttribute(f)>=l&&(this.disconnect(),h())}).observe(s||document,{childList:!0,subtree:!0}));$(document).arrive(".comment-body-and-links",function(n){u([n],t.other_subscriptions)}),u($(".comment-body-and-links"),t.other_subscriptions),$(document).arrive(".post:not(.deleted)",function(n){c([n],t.other_subscriptions)}),setTimeout(function(){c($(".post:not(.deleted)"),t.other_subscriptions)},2e3)}),u=function(t,n){$(t).each(function(t,e){var r=e.parentNode;if(!r.classList.contains("deleted")){var i=r.id,u=r.querySelector(".comment-links"),c="",a=r.querySelector(".comment-body");a&&i.match(/^t1_/)&&(c=a.textContent);var s=Object(o.setTextAndFunction_subscribe)(i,$('<a href="">')[0],c);i in n&&(s=Object(o.setTextAndFunction_unsubscribe)(i,$('<a href="">')[0],c)),$(u).append(s)}})},c=function(t,n){$(t).each(function(t,e){var r=e.id,i=e.querySelector(".post-links"),u=Object(o.setTextAndFunction_subscribe)(r,$('<a href="">')[0]);r in n&&(u=Object(o.setTextAndFunction_unsubscribe)(r,$('<a href="">')[0])),$(i).append(u)})};function a(t){var n={};return $(t).each(function(){var t=this.getAttribute("id");n[t]=this.getAttribute("data-created_utc")}),n}},,,function(t,n,e){e(127),t.exports=e(319)},function(t,n,e){"use strict";e.r(n);var r=e(1),o=e(314),i=e(315),u=e(31),c=e(3),a=e.n(c);!function(){$.extend($.expr[":"],{equalsi:function(t,n,e,r){return(t.textContent||t.innerText||"").toLowerCase().trim()===e[3].toLowerCase().trim()}}),window.localStorage.setItem("hasSeenLanguageModal",!0),window.localStorage.setItem("hasNotifierExtension",!0),a.a.runtime.onMessage.addListener(function(t,n,e){if("query-user"===t.action)return Object(u.getLoggedinUser)().then(function(t){return t?Object(r.subscribeUser)(t,function(){window.location.href="https://www.reveddit.com/user/".concat(t,"?all=true")}):Promise.resolve("failed")})});var t="other",n=!1,e=!1,c=!1;jQuery(document).ready(function(){var u=window.location.href.match(/^https?:\/\/[^/]*(reddit\.com|reveddit\.com|localhost)/);if(u){c="reddit.com"===u[1];var a=window.location.pathname.split("/");"user"===a[1]&&a.length>=3&&a[2]?(t=window.location.pathname.split("/")[2],n=!0):"info"===a[1]&&(e=!0)}Object(r.getSubscribedUsers_withSeenAndUnseenIDs)(function(r,u){0===Object.keys(r).filter(function(t){return"other"!==t}).length?window.localStorage.setItem("extensionSaysNoSubscriptions",!0):window.localStorage.removeItem("extensionSaysNoSubscriptions"),c?Object(o.redditModifications)(u.other_subscriptions,u.options.hide_subscribe,u.options.monitor_quarantined):Object(i.revdditModifications)(u,t,n,e)})})}()}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,