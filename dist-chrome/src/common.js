!function(e){var r={};function n(t){if(r[t])return r[t].exports;var s=r[t]={i:t,l:!1,exports:{}};return e[t].call(s.exports,s,s.exports,n),s.l=!0,s.exports}n.m=e,n.c=r,n.d=function(e,r,t){n.o(e,r)||Object.defineProperty(e,r,{enumerable:!0,get:t})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,r){if(1&r&&(e=n(e)),8&r)return e;if(4&r&&"object"==typeof e&&e&&e.__esModule)return e;var t=Object.create(null);if(n.r(t),Object.defineProperty(t,"default",{enumerable:!0,value:e}),2&r&&"string"!=typeof e)for(var s in e)n.d(t,s,function(r){return e[r]}.bind(null,s));return t},n.n=function(e){var r=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(r,"a",r),r},n.o=function(e,r){return Object.prototype.hasOwnProperty.call(e,r)},n.p="",n(n.s=2)}([,function(e,r,n){"use strict";n.r(r),n.d(r,"INTERVAL_DEFAULT",function(){return g}),n.d(r,"SEEN_COUNT_DEFAULT",function(){return u}),n.d(r,"MAX_SYNC_STORAGE_ITEMS_PER_OBJECT",function(){return m}),n.d(r,"MAX_SYNC_STORAGE_CHANGES",function(){return l}),n.d(r,"MAX_OTHER_SUBSCRIPTIONS",function(){return A}),n.d(r,"REMOVED",function(){return f}),n.d(r,"APPROVED",function(){return d}),n.d(r,"LOCKED",function(){return h}),n.d(r,"UNLOCKED",function(){return b}),n.d(r,"EDITED",function(){return p}),n.d(r,"DELETED",function(){return x}),n.d(r,"getObjectNamesForThing",function(){return _}),n.d(r,"markEverythingAsSeen",function(){return O}),n.d(r,"markThingAsSeen",function(){return E}),n.d(r,"setStorageUpdateBadge",function(){return j}),n.d(r,"markIDsAsSeenIfSubscribed",function(){return S}),n.d(r,"subscribeId",function(){return T}),n.d(r,"unsubscribeId",function(){return P}),n.d(r,"getSubscribedIds",function(){return I}),n.d(r,"subscribeUser",function(){return D}),n.d(r,"unsubscribeUser",function(){return M}),n.d(r,"initStorage",function(){return L}),n.d(r,"getSubscribedUsers_withSeenAndUnseenIDs",function(){return U}),n.d(r,"getSubscribedUsers_withUnseenIDs",function(){return N}),n.d(r,"getUnseenIDs_thing",function(){return R}),n.d(r,"getIDs_thing",function(){return F}),n.d(r,"getLocalStorageItems",function(){return $}),n.d(r,"saveLocalStorageItems",function(){return B}),n.d(r,"addLocalStorageItems",function(){return V}),n.d(r,"getItemFromLocalStorage",function(){return q}),n.d(r,"getAllChanges",function(){return W}),n.d(r,"getOptions",function(){return z}),n.d(r,"saveOptions",function(){return H});var t=n(2),s=n(3),o=n.n(s);function i(e,r){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);r&&(t=t.filter(function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable})),n.push.apply(n,t)}return n}function a(e){for(var r=1;r<arguments.length;r++){var n=null!=arguments[r]?arguments[r]:{};r%2?i(n,!0).forEach(function(r){c(e,r,n[r])}):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(n).forEach(function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(n,r))})}return e}function c(e,r,n){return r in e?Object.defineProperty(e,r,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[r]=n,e}var g=1,u=2,m=130,l=100,A=100,f=1,d=2,h=3,b=4,p=5,x=6,v={changes:[],removed:{},approved:{},locked:{},unlocked:{}},y=function(e,r,n){return n?e+"_u_"+r:e+"_"+r},k=function(e,r){var n=!(arguments.length>2&&void 0!==arguments[2])||arguments[2];Object.keys(v).forEach(function(t){e[y(t,r,n)]=v[t]})},_=function(e){var r=!(arguments.length>1&&void 0!==arguments[1])||arguments[1],n={};return Object.keys(v).forEach(function(t){n[t]=y(t,e,r)}),n},w=function(e){var r={};return k(r,e,!0),r},O=function(){return o.a.storage.sync.get(null).then(function(e){return Object.keys(e.user_subscriptions).forEach(function(r){E(e,r,!0)}),E(e,"other",!1),j(e)})},E=function(e,r,n){var t=_(r,n);delete t.changes;var s=[];Object.values(t).forEach(function(e){s.push(e)}),s.forEach(function(r){Object.values(e[r]).forEach(function(e){e.u=!1})})},j=function(e){return o.a.storage.sync.set(e).then(function(e){return o.a.runtime.sendMessage({action:"update-badge"})})},C=function(e,r,n,s,o){var i=e[r[n]];Object.keys(s).forEach(function(e){e in i?i[e].u=!1:o&&(i[e]=new t.ItemForStorage(s[e],!1))})},S=function(e,r,n,t,s,o,i){var a=arguments.length>7&&void 0!==arguments[7]?arguments[7]:function(){},c=_(r,n);delete c.changes;var g=e.user_subscriptions[r];!g&&n||(C(e,c,"removed",t,n),C(e,c,"approved",s,n),C(e,c,"locked",o,n),C(e,c,"unlocked",i,n),chrome.storage.sync.set(e,a))},T=function(e){var r=arguments.length>1&&void 0!==arguments[1]?arguments[1]:function(){},n="other_subscriptions";chrome.storage.sync.get(n,function(s){s[n][e]={t:Math.floor((new Date).getTime()/1e3)};var o=Object(t.trimDict_by_numberValuedAttribute)(s[n],A,"t");chrome.storage.sync.set(c({},n,o),r)})},P=function(e){var r=arguments.length>1&&void 0!==arguments[1]?arguments[1]:function(){},n="other_subscriptions",t=_("other",!1);delete t.changes,chrome.storage.sync.get(Object.values(t).concat(n),function(s){delete s[n][e],Object.values(t).forEach(function(r){e in s[r]&&delete s[r][e]}),chrome.storage.sync.set(s,function(){chrome.runtime.sendMessage({action:"update-badge"},r)})})},I=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:function(){},r="other_subscriptions";chrome.storage.sync.get(r,function(n){e(Object.keys(n[r]))})},D=function(e){var r=arguments.length>1&&void 0!==arguments[1]?arguments[1]:function(){},n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:function(){},t=w(e);chrome.storage.sync.get("user_subscriptions",function(s){var o=s.user_subscriptions;e in o?n("already subscribed to this user"):Object.keys(o).length<5?(o[e]=!0,chrome.storage.sync.set(a({user_subscriptions:o},t),r)):n("maximum number of subscriptions reached")})},M=function(e,r){var n=Object.keys(w(e));chrome.storage.sync.get("user_subscriptions",function(t){var s=t.user_subscriptions;delete s[e],chrome.storage.sync.set({user_subscriptions:s},function(){chrome.storage.sync.remove(n,function(){var n=y("items",e,!0);chrome.runtime.sendMessage({action:"update-badge"}),chrome.storage.local.remove(n,r)})})})},L=function(e){chrome.storage.sync.get(null,function(r){var n;0===Object.keys(r).length?chrome.storage.sync.set((k(n={user_subscriptions:{},other_subscriptions:{},options:{interval:g,seen_count:u,custom_clientid:"",removal_status:{track:!0,notify:!0},lock_status:{track:!0,notify:!0},monitor_quarantined:!1},last_check:null,last_check_quarantined:null},"other",!1),n),e):e()})},U=function(e){chrome.storage.sync.get(null,function(r){var n=Object.keys(r.user_subscriptions),t={};n.forEach(function(e){t[e]=F(e,!0,r)}),t.other=F("other",!1,r),e(t,r)})},N=function(e){chrome.storage.sync.get(null,function(r){var n=Object.keys(r.user_subscriptions),t={};n.forEach(function(e){t[e]=R(e,!0,r)}),t.other=R("other",!1,r),e(t)})},R=function(e,r,n){return F(e,r,n).unseen},F=function(e,r,n){var t=n.options.removal_status.track,s=n.options.lock_status.track,o={},i={},a=[],c=_(e,r);return t&&a.push(c.removed,c.approved),s&&a.push(c.locked,c.unlocked),a.forEach(function(e){Object.keys(n[e]).forEach(function(r){n[e][r].u?o[r]=!0:i[r]=!0})}),{unseen:Object.keys(o),seen:Object.keys(i)}},$=function(e,r){var n=y("items",e,r);return o.a.storage.local.get(c({},n,{})).then(function(e){return e[n]})},B=function(e,r,n){var t=y("items",e,r);return o.a.storage.local.set(c({},t,n))},V=function(e,r,n){var s=y("items",r,n);return chrome.storage.local.get(c({},s,{}),function(r){var n=r[s];Object.keys(e).forEach(function(r){n[r]=e[r]});var i=n;return Object.keys(n).length>500&&(i=Object(t.trimDict_by_numberValuedAttribute)(n,500,"o")),o.a.storage.local.set(c({},s,i))})},q=function(e,r,n,s){var o=y("items",e,r);return o in s&&n in s[o]?new t.LocalStorageItem({object:s[o][n]}):""},W=function(e){chrome.storage.sync.get("user_subscriptions",function(r){var n=[y("changes","other",!1)],t={changes_other:"other"};Object.keys(r.user_subscriptions).forEach(function(e){var r=y("changes",e,!0);n.push(r),t[r]=e}),chrome.storage.sync.get(n,function(r){var s={};n.forEach(function(e){e in r&&r[e].length&&(s[t[e]]=r[e])}),e(s)})})},z=function(e){return o.a.storage.sync.get(["user_subscriptions","other_subscriptions","options"]).then(function(r){var n=Object.keys(r.user_subscriptions),t=Object.keys(r.other_subscriptions),s=r.options;return e(n,t,s)}).catch(console.log)},H=function(e,r,n,t,s,o,i,a,c,g){chrome.storage.sync.set({options:{seen_count:e,interval:r,custom_clientid:n,removal_status:{track:t,notify:s},lock_status:{track:o,notify:i},hide_subscribe:a,monitor_quarantined:c}},g)}},function(e,r,n){"use strict";n.r(r),n.d(r,"ALARM_NAME",function(){return a}),n.d(r,"createTab",function(){return c}),n.d(r,"getFullIDsFromURL",function(){return g}),n.d(r,"getFullIDsFromPath",function(){return l}),n.d(r,"reformatRedditText",function(){return A}),n.d(r,"isRemovedItem",function(){return f}),n.d(r,"isComment",function(){return d}),n.d(r,"isRemovedComment",function(){return h}),n.d(r,"isUserDeletedComment",function(){return b}),n.d(r,"isUserDeletedPost",function(){return p}),n.d(r,"isUserDeletedItem",function(){return x}),n.d(r,"isRemovedPost",function(){return v}),n.d(r,"trimDict_by_numberValuedAttribute",function(){return y}),n.d(r,"sortDict_by_numberValuedAttribute",function(){return k}),n.d(r,"ItemForStorage",function(){return _}),n.d(r,"ChangeForStorage",function(){return w}),n.d(r,"LocalStorageItem",function(){return O}),n.d(r,"setAlarm",function(){return E}),n.d(r,"alphaLowerSort",function(){return j}),n.d(r,"goToOptions",function(){return C}),n.d(r,"showError",function(){return S}),n.d(r,"pprint",function(){return T}),n.d(r,"getPrettyTimeLength",function(){return P}),n.d(r,"getPrettyDate",function(){return I}),n.d(r,"createNotification",function(){return D}),n.d(r,"updateBadgeUnseenCount",function(){return M});var t=n(1);n(3);function s(e,r){if(!(e instanceof r))throw new TypeError("Cannot call a class as a function")}function o(e,r){for(var n=0;n<r.length;n++){var t=r[n];t.enumerable=t.enumerable||!1,t.configurable=!0,"value"in t&&(t.writable=!0),Object.defineProperty(e,t.key,t)}}function i(e,r,n){return r&&o(e.prototype,r),n&&o(e,n),e}var a="notifyme",c=function(e){chrome.tabs.create({url:e},function(r){r?chrome.windows.update(r.windowId,{focused:!0}):chrome.windows.create({url:e},function(e){chrome.windows.update(e.id,{focused:!0})})})},g=function(e){var r=e.replace(/https:\/\/[^/]*re(ve)?ddit.com/,"");return l(r)},u=/^\/(v|r|user)\/([^/]+)\/comments\/([^/]+)\/[^/]*(?:\/([^/?&#]+))?/,m=/^\/(?:user|y|u)\/([^/?&#]+)\/?/,l=function(e){var r=void 0,n=void 0,t=void 0,s=void 0,o=e.match(u),i=e.match(m);o?("user"===o[1]?t=o[2]:s=o[2],o[3]&&(r="t3_"+o[3]),o[4]&&(n="t1_"+o[4])):i&&(t=i[1]);return[r,n,t,s]},A=function(e){return e.replace(/&amp;/g,"&").replace(/&gt;/g,">").replace(/&lt;/g,"<").replace(/\s+/g," ").substr(0,300)},f=function(e){return!!e.removal_reason||(d(e.name)?h(e):v(e))},d=function(e){return"t1"===e.substr(0,2)},h=function(e){return"["===e.author.replace(/\\/g,"")[0]&&"["===e.body.replace(/\\/g,"")[0]},b=function(e){return"[deleted]"===e.body.replace(/\\/g,"")&&"[deleted]"===e.author.replace(/\\/g,"")},p=function(e){return!e.is_robot_indexable&&"[deleted]"===e.author.replace(/\\/g,"")},x=function(e){return d(e.name)?b(e):p(e)},v=function(e){return!e.is_robot_indexable},y=function(e,r,n){var t=k(e,n).slice(0,r),s={};return t.forEach(function(e){s[e[0]]=e[1]}),s},k=function(e,r){var n=Object.keys(e).map(function(r){return[r,e[r]]});return n.sort(function(e,n){return n[1][r]-e[1][r]}),n},_=function(){function e(r,n){s(this,e),this.c=r,this.u=n}return i(e,[{key:"getCreatedUTC",value:function(){return this.c}},{key:"getUnseen",value:function(){return this.u}}]),e}(),w=function(){function e(r){var n=r.id,t=void 0===n?null:n,o=r.observed_utc,i=void 0===o?null:o,a=r.change_type,c=void 0===a?null:a,g=r.seen_count,u=void 0===g?null:g,m=r.object,l=void 0===m?null:m;s(this,e),l?(this.i=l.i,this.o=l.o,this.g=l.g,this.n=l.n):(this.i=t,this.o=i,this.g=c,this.n=u)}return i(e,[{key:"getID",value:function(){return this.i}},{key:"getObservedUTC",value:function(){return this.o}},{key:"getChangeTypeInternal",value:function(){return this.g}},{key:"getChangeType",value:function(){switch(this.g){case t.REMOVED:return"mod removed";case t.DELETED:return"user deleted";case t.APPROVED:return"approved";case t.LOCKED:return"locked";case t.UNLOCKED:return"unlocked";case t.EDITED:return"edited"}}},{key:"getSeenCount",value:function(){return this.n}}]),e}(),O=function(){function e(r){var n=r.item,t=void 0===n?null:n,o=r.observed_utc,i=void 0===o?null:o,a=r.object,c=void 0===a?null:a;if(s(this,e),c)this.t=c.t,this.o=c.o,this.c=c.c,this.n=c.n||0;else{var g="";g=d(t.name)?A(t.body):t.title,this.t=g,this.o=i,this.c=t.created_utc,this.n=0}}return i(e,[{key:"setText",value:function(e){this.t=A(e)}},{key:"getText",value:function(){return this.t}},{key:"getObservedUTC",value:function(){return this.o}},{key:"getCreatedUTC",value:function(){return this.c}},{key:"resetSeenCount",value:function(){this.n=0}},{key:"getSeenCount",value:function(){return this.n}},{key:"incrementSeenCount",value:function(){return void 0===this.n&&(this.n=0),this.n+=1,this.n}}]),e}();function E(e){chrome.alarms.clear(a),chrome.alarms.create(a,{delayInMinutes:1,periodInMinutes:e})}function j(e,r){var n=e.toLowerCase(),t=r.toLowerCase();return n<t?-1:n>t?1:0}function C(){chrome.runtime.openOptionsPage?(chrome.runtime.openOptionsPage(),window.close()):window.open(chrome.runtime.getURL("/src/options.html"))}function S(e,r){$('<div class="rr-error">'+e+"</div>").appendTo(r).delay(2400).fadeTo(400,0,function(){$(this).remove()})}function T(e){console.log(JSON.stringify(e,null,"\t"))}var P=function(e){var r=[[60,"second","seconds"],[60,"minute","minutes"],[24,"hour","hours"],[7,"day","days"],[365/12/7,"week","weeks"],[12,"month","months"],[10,"year","years"],[10,"decade","decades"],[10,"century","centuries"],[10,"millenium","millenia"]];if(e<60)return e+" seconds";for(var n=e,t=0;t<r.length;t++){var s=r[t][0],o=r[t][1],i=r[t][2];if(n<s){var a=n-Math.floor(n),c=Math.round(a*r[t-1][0]);if(r[t-1][0]===c&&(n+=1,c=0),(Math.floor(n)>1||0==Math.floor(n))&&(o=i),t>1&&c>0){var g=r[t-1][1];c>1&&(g=r[t-1][2]),o+=", "+String(c)+" "+g}return String(Math.floor(n))+" "+o}n/=s}},I=function(e){var r=Math.floor((new Date).getTime()/1e3)-e;return P(r)+" ago"},D=function(e){var r=e.notificationId,n=e.title,t=e.message;location.protocol.match(/^http/)?chrome.runtime.sendMessage({action:"create-notification",options:{notificationId:r,title:n,message:t}}):registration.showNotification(n,{body:t,data:r,icon:"/icons/128.png",message:t})},M=function(){location.protocol.match(/^http/)?chrome.runtime.sendMessage({action:"update-badge"}):Object(t.getSubscribedUsers_withUnseenIDs)(function(e){var r=0;Object.values(e).forEach(function(e){r+=e.length});var n=r.toString();0==r&&(n=""),chrome.action.setBadgeBackgroundColor({color:"red"}),chrome.action.setBadgeText({text:n})})}},function(e,r,n){var t,s,o;s=[e],void 0===(o="function"==typeof(t=function(e){"use strict";if("undefined"==typeof browser||Object.getPrototypeOf(browser)!==Object.prototype){const r="The message port closed before a response was received.",n="Returning a Promise is the preferred way to send a reply from an onMessage/onMessageExternal listener, as the sendResponse will be removed from the specs (See https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/runtime/onMessage)",t=e=>{const t={alarms:{clear:{minArgs:0,maxArgs:1},clearAll:{minArgs:0,maxArgs:0},get:{minArgs:0,maxArgs:1},getAll:{minArgs:0,maxArgs:0}},bookmarks:{create:{minArgs:1,maxArgs:1},get:{minArgs:1,maxArgs:1},getChildren:{minArgs:1,maxArgs:1},getRecent:{minArgs:1,maxArgs:1},getSubTree:{minArgs:1,maxArgs:1},getTree:{minArgs:0,maxArgs:0},move:{minArgs:2,maxArgs:2},remove:{minArgs:1,maxArgs:1},removeTree:{minArgs:1,maxArgs:1},search:{minArgs:1,maxArgs:1},update:{minArgs:2,maxArgs:2}},browserAction:{disable:{minArgs:0,maxArgs:1,fallbackToNoCallback:!0},enable:{minArgs:0,maxArgs:1,fallbackToNoCallback:!0},getBadgeBackgroundColor:{minArgs:1,maxArgs:1},getBadgeText:{minArgs:1,maxArgs:1},getPopup:{minArgs:1,maxArgs:1},getTitle:{minArgs:1,maxArgs:1},openPopup:{minArgs:0,maxArgs:0},setBadgeBackgroundColor:{minArgs:1,maxArgs:1,fallbackToNoCallback:!0},setBadgeText:{minArgs:1,maxArgs:1,fallbackToNoCallback:!0},setIcon:{minArgs:1,maxArgs:1},setPopup:{minArgs:1,maxArgs:1,fallbackToNoCallback:!0},setTitle:{minArgs:1,maxArgs:1,fallbackToNoCallback:!0}},browsingData:{remove:{minArgs:2,maxArgs:2},removeCache:{minArgs:1,maxArgs:1},removeCookies:{minArgs:1,maxArgs:1},removeDownloads:{minArgs:1,maxArgs:1},removeFormData:{minArgs:1,maxArgs:1},removeHistory:{minArgs:1,maxArgs:1},removeLocalStorage:{minArgs:1,maxArgs:1},removePasswords:{minArgs:1,maxArgs:1},removePluginData:{minArgs:1,maxArgs:1},settings:{minArgs:0,maxArgs:0}},commands:{getAll:{minArgs:0,maxArgs:0}},contextMenus:{remove:{minArgs:1,maxArgs:1},removeAll:{minArgs:0,maxArgs:0},update:{minArgs:2,maxArgs:2}},cookies:{get:{minArgs:1,maxArgs:1},getAll:{minArgs:1,maxArgs:1},getAllCookieStores:{minArgs:0,maxArgs:0},remove:{minArgs:1,maxArgs:1},set:{minArgs:1,maxArgs:1}},devtools:{inspectedWindow:{eval:{minArgs:1,maxArgs:2,singleCallbackArg:!1}},panels:{create:{minArgs:3,maxArgs:3,singleCallbackArg:!0}}},downloads:{cancel:{minArgs:1,maxArgs:1},download:{minArgs:1,maxArgs:1},erase:{minArgs:1,maxArgs:1},getFileIcon:{minArgs:1,maxArgs:2},open:{minArgs:1,maxArgs:1,fallbackToNoCallback:!0},pause:{minArgs:1,maxArgs:1},removeFile:{minArgs:1,maxArgs:1},resume:{minArgs:1,maxArgs:1},search:{minArgs:1,maxArgs:1},show:{minArgs:1,maxArgs:1,fallbackToNoCallback:!0}},extension:{isAllowedFileSchemeAccess:{minArgs:0,maxArgs:0},isAllowedIncognitoAccess:{minArgs:0,maxArgs:0}},history:{addUrl:{minArgs:1,maxArgs:1},deleteAll:{minArgs:0,maxArgs:0},deleteRange:{minArgs:1,maxArgs:1},deleteUrl:{minArgs:1,maxArgs:1},getVisits:{minArgs:1,maxArgs:1},search:{minArgs:1,maxArgs:1}},i18n:{detectLanguage:{minArgs:1,maxArgs:1},getAcceptLanguages:{minArgs:0,maxArgs:0}},identity:{launchWebAuthFlow:{minArgs:1,maxArgs:1}},idle:{queryState:{minArgs:1,maxArgs:1}},management:{get:{minArgs:1,maxArgs:1},getAll:{minArgs:0,maxArgs:0},getSelf:{minArgs:0,maxArgs:0},setEnabled:{minArgs:2,maxArgs:2},uninstallSelf:{minArgs:0,maxArgs:1}},notifications:{clear:{minArgs:1,maxArgs:1},create:{minArgs:1,maxArgs:2},getAll:{minArgs:0,maxArgs:0},getPermissionLevel:{minArgs:0,maxArgs:0},update:{minArgs:2,maxArgs:2}},pageAction:{getPopup:{minArgs:1,maxArgs:1},getTitle:{minArgs:1,maxArgs:1},hide:{minArgs:1,maxArgs:1,fallbackToNoCallback:!0},setIcon:{minArgs:1,maxArgs:1},setPopup:{minArgs:1,maxArgs:1,fallbackToNoCallback:!0},setTitle:{minArgs:1,maxArgs:1,fallbackToNoCallback:!0},show:{minArgs:1,maxArgs:1,fallbackToNoCallback:!0}},permissions:{contains:{minArgs:1,maxArgs:1},getAll:{minArgs:0,maxArgs:0},remove:{minArgs:1,maxArgs:1},request:{minArgs:1,maxArgs:1}},runtime:{getBackgroundPage:{minArgs:0,maxArgs:0},getPlatformInfo:{minArgs:0,maxArgs:0},openOptionsPage:{minArgs:0,maxArgs:0},requestUpdateCheck:{minArgs:0,maxArgs:0},sendMessage:{minArgs:1,maxArgs:3},sendNativeMessage:{minArgs:2,maxArgs:2},setUninstallURL:{minArgs:1,maxArgs:1}},sessions:{getDevices:{minArgs:0,maxArgs:1},getRecentlyClosed:{minArgs:0,maxArgs:1},restore:{minArgs:0,maxArgs:1}},storage:{local:{clear:{minArgs:0,maxArgs:0},get:{minArgs:0,maxArgs:1},getBytesInUse:{minArgs:0,maxArgs:1},remove:{minArgs:1,maxArgs:1},set:{minArgs:1,maxArgs:1}},managed:{get:{minArgs:0,maxArgs:1},getBytesInUse:{minArgs:0,maxArgs:1}},sync:{clear:{minArgs:0,maxArgs:0},get:{minArgs:0,maxArgs:1},getBytesInUse:{minArgs:0,maxArgs:1},remove:{minArgs:1,maxArgs:1},set:{minArgs:1,maxArgs:1}}},tabs:{captureVisibleTab:{minArgs:0,maxArgs:2},create:{minArgs:1,maxArgs:1},detectLanguage:{minArgs:0,maxArgs:1},discard:{minArgs:0,maxArgs:1},duplicate:{minArgs:1,maxArgs:1},executeScript:{minArgs:1,maxArgs:2},get:{minArgs:1,maxArgs:1},getCurrent:{minArgs:0,maxArgs:0},getZoom:{minArgs:0,maxArgs:1},getZoomSettings:{minArgs:0,maxArgs:1},highlight:{minArgs:1,maxArgs:1},insertCSS:{minArgs:1,maxArgs:2},move:{minArgs:2,maxArgs:2},query:{minArgs:1,maxArgs:1},reload:{minArgs:0,maxArgs:2},remove:{minArgs:1,maxArgs:1},removeCSS:{minArgs:1,maxArgs:2},sendMessage:{minArgs:2,maxArgs:3},setZoom:{minArgs:1,maxArgs:2},setZoomSettings:{minArgs:1,maxArgs:2},update:{minArgs:1,maxArgs:2}},topSites:{get:{minArgs:0,maxArgs:0}},webNavigation:{getAllFrames:{minArgs:1,maxArgs:1},getFrame:{minArgs:1,maxArgs:1}},webRequest:{handlerBehaviorChanged:{minArgs:0,maxArgs:0}},windows:{create:{minArgs:0,maxArgs:1},get:{minArgs:1,maxArgs:2},getAll:{minArgs:0,maxArgs:1},getCurrent:{minArgs:0,maxArgs:1},getLastFocused:{minArgs:0,maxArgs:1},remove:{minArgs:1,maxArgs:1},update:{minArgs:2,maxArgs:2}}};if(0===Object.keys(t).length)throw new Error("api-metadata.json has not been included in browser-polyfill");const s=(r,n)=>(...t)=>{e.runtime.lastError?r.reject(e.runtime.lastError):n.singleCallbackArg||t.length<=1&&!1!==n.singleCallbackArg?r.resolve(t[0]):r.resolve(t)},o=e=>1==e?"argument":"arguments",i=(e,r,n)=>new Proxy(r,{apply:(r,t,s)=>n.call(t,e,...s)});let a=Function.call.bind(Object.prototype.hasOwnProperty);const c=(e,r={},n={})=>{let t=Object.create(null),g={has:(r,n)=>n in e||n in t,get(g,u,m){if(u in t)return t[u];if(!(u in e))return;let l=e[u];if("function"==typeof l)if("function"==typeof r[u])l=i(e,e[u],r[u]);else if(a(n,u)){let r=((e,r)=>(function(n,...t){if(t.length<r.minArgs)throw new Error(`Expected at least ${r.minArgs} ${o(r.minArgs)} for ${e}(), got ${t.length}`);if(t.length>r.maxArgs)throw new Error(`Expected at most ${r.maxArgs} ${o(r.maxArgs)} for ${e}(), got ${t.length}`);return new Promise((o,i)=>{if(r.fallbackToNoCallback)try{n[e](...t,s({resolve:o,reject:i},r))}catch(s){console.warn(`${e} API method doesn't seem to support the callback parameter, `+"falling back to call it without a callback: ",s),n[e](...t),r.fallbackToNoCallback=!1,r.noCallback=!0,o()}else r.noCallback?(n[e](...t),o()):n[e](...t,s({resolve:o,reject:i},r))})}))(u,n[u]);l=i(e,e[u],r)}else l=l.bind(e);else{if("object"!=typeof l||null===l||!a(r,u)&&!a(n,u))return Object.defineProperty(t,u,{configurable:!0,enumerable:!0,get:()=>e[u],set(r){e[u]=r}}),l;l=c(l,r[u],n[u])}return t[u]=l,l},set:(r,n,s,o)=>(n in t?t[n]=s:e[n]=s,!0),defineProperty:(e,r,n)=>Reflect.defineProperty(t,r,n),deleteProperty:(e,r)=>Reflect.deleteProperty(t,r)},u=Object.create(e);return new Proxy(u,g)},g=e=>({addListener(r,n,...t){r.addListener(e.get(n),...t)},hasListener:(r,n)=>r.hasListener(e.get(n)),removeListener(r,n){r.removeListener(e.get(n))}});let u=!1;const m=new class extends WeakMap{constructor(e,r){super(r),this.createItem=e}get(e){return this.has(e)||this.set(e,this.createItem(e)),super.get(e)}}(e=>"function"!=typeof e?e:function(r,t,s){let o,i,a=!1,c=new Promise(e=>{o=function(r){u||(console.warn(n,(new Error).stack),u=!0),a=!0,e(r)}});try{i=e(r,t,o)}catch(e){i=Promise.reject(e)}const g=!0!==i&&(e=>e&&"object"==typeof e&&"function"==typeof e.then)(i);if(!0!==i&&!g&&!a)return!1;const m=e=>{e.then(e=>{s(e)},e=>{let r;r=e&&(e instanceof Error||"string"==typeof e.message)?e.message:"An unexpected error occurred",s({__mozWebExtensionPolyfillReject__:!0,message:r})}).catch(e=>{console.error("Failed to send onMessage rejected reply",e)})};return m(g?i:c),!0}),l=(n,t,s,...i)=>{if(i.length<t.minArgs)throw new Error(`Expected at least ${t.minArgs} ${o(t.minArgs)} for ${n}(), got ${i.length}`);if(i.length>t.maxArgs)throw new Error(`Expected at most ${t.maxArgs} ${o(t.maxArgs)} for ${n}(), got ${i.length}`);return new Promise((n,t)=>{const o=(({reject:n,resolve:t},s)=>{e.runtime.lastError?e.runtime.lastError.message===r?t():n(e.runtime.lastError):s&&s.__mozWebExtensionPolyfillReject__?n(new Error(s.message)):t(s)}).bind(null,{resolve:n,reject:t});i.push(o),s.sendMessage(...i)})},A={runtime:{onMessage:g(m),onMessageExternal:g(m),sendMessage:l.bind(null,"sendMessage",{minArgs:1,maxArgs:3})},tabs:{sendMessage:l.bind(null,"sendMessage",{minArgs:2,maxArgs:3})}},f={clear:{minArgs:1,maxArgs:1},get:{minArgs:1,maxArgs:1},set:{minArgs:1,maxArgs:1}};return t.privacy={network:{networkPredictionEnabled:f,webRTCIPHandlingPolicy:f},services:{passwordSavingEnabled:f},websites:{hyperlinkAuditingEnabled:f,referrersEnabled:f}},c(e,A,t)};if("object"!=typeof chrome||!chrome||!chrome.runtime||!chrome.runtime.id)throw new Error("This script should only be loaded in a browser extension.");e.exports=t(chrome)}else e.exports=browser})?t.apply(r,s):t)||(e.exports=o)}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,