!function(e){var r={};function t(n){if(r[n])return r[n].exports;var s=r[n]={i:n,l:!1,exports:{}};return e[n].call(s.exports,s,s.exports,t),s.l=!0,s.exports}t.m=e,t.c=r,t.d=function(e,r,n){t.o(e,r)||Object.defineProperty(e,r,{enumerable:!0,get:n})},t.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},t.t=function(e,r){if(1&r&&(e=t(e)),8&r)return e;if(4&r&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(t.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&r&&"string"!=typeof e)for(var s in e)t.d(n,s,function(r){return e[r]}.bind(null,s));return n},t.n=function(e){var r=e&&e.__esModule?function(){return e.default}:function(){return e};return t.d(r,"a",r),r},t.o=function(e,r){return Object.prototype.hasOwnProperty.call(e,r)},t.p="",t(t.s=1)}([,function(e,r,t){"use strict";t.r(r),t.d(r,"INTERVAL_DEFAULT",function(){return g}),t.d(r,"MAX_SYNC_STORAGE_ITEMS_PER_OBJECT",function(){return u}),t.d(r,"MAX_SYNC_STORAGE_CHANGES",function(){return m}),t.d(r,"MAX_OTHER_SUBSCRIPTIONS",function(){return l}),t.d(r,"REMOVED",function(){return A}),t.d(r,"APPROVED",function(){return d}),t.d(r,"LOCKED",function(){return f}),t.d(r,"UNLOCKED",function(){return h}),t.d(r,"EDITED",function(){return b}),t.d(r,"DELETED",function(){return p}),t.d(r,"getObjectNamesForThing",function(){return k}),t.d(r,"markEverythingAsSeen",function(){return O}),t.d(r,"markThingAsSeen",function(){return _}),t.d(r,"setStorageUpdateBadge",function(){return E}),t.d(r,"markIDsAsSeenIfSubscribed",function(){return C}),t.d(r,"subscribeId",function(){return P}),t.d(r,"unsubscribeId",function(){return T}),t.d(r,"getSubscribedIds",function(){return S}),t.d(r,"subscribeUser",function(){return I}),t.d(r,"unsubscribeUser",function(){return D}),t.d(r,"initStorage",function(){return M}),t.d(r,"getSubscribedUsers_withSeenAndUnseenIDs",function(){return L}),t.d(r,"getSubscribedUsers_withUnseenIDs",function(){return U}),t.d(r,"getUnseenIDs_thing",function(){return R}),t.d(r,"getIDs_thing",function(){return N}),t.d(r,"getLocalStorageItems",function(){return F}),t.d(r,"saveLocalStorageItems",function(){return $}),t.d(r,"addLocalStorageItems",function(){return B}),t.d(r,"getItemFromLocalStorage",function(){return V}),t.d(r,"getAllChanges",function(){return W}),t.d(r,"getOptions",function(){return q}),t.d(r,"saveOptions",function(){return z});var n=t(2),s=t(3),o=t.n(s);function i(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);r&&(n=n.filter(function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable})),t.push.apply(t,n)}return t}function a(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?i(t,!0).forEach(function(r){c(e,r,t[r])}):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(t).forEach(function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))})}return e}function c(e,r,t){return r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}var g=1,u=130,m=100,l=100,A=1,d=2,f=3,h=4,b=5,p=6,x={changes:[],removed:{},approved:{},locked:{},unlocked:{}},v=function(e,r,t){return t?e+"_u_"+r:e+"_"+r},y=function(e,r){var t=!(arguments.length>2&&void 0!==arguments[2])||arguments[2];Object.keys(x).forEach(function(n){e[v(n,r,t)]=x[n]})},k=function(e){var r=!(arguments.length>1&&void 0!==arguments[1])||arguments[1],t={};return Object.keys(x).forEach(function(n){t[n]=v(n,e,r)}),t},w=function(e){var r={};return y(r,e,!0),r},O=function(){return o.a.storage.sync.get(null).then(function(e){return Object.keys(e.user_subscriptions).forEach(function(r){_(e,r,!0)}),_(e,"other",!1),E(e)})},_=function(e,r,t){var n=k(r,t);delete n.changes;var s=[];Object.values(n).forEach(function(e){s.push(e)}),s.forEach(function(r){Object.values(e[r]).forEach(function(e){e.u=!1})})},E=function(e){return o.a.storage.sync.set(e).then(function(e){return o.a.runtime.sendMessage({action:"update-badge"})})},j=function(e,r,t,s,o){var i=e[r[t]];Object.keys(s).forEach(function(e){e in i?i[e].u=!1:o&&(i[e]=new n.ItemForStorage(s[e],!1))})},C=function(e,r,t,n,s,o,i){var a=arguments.length>7&&void 0!==arguments[7]?arguments[7]:function(){},c=k(r,t);delete c.changes;var g=e.user_subscriptions[r];!g&&t||(j(e,c,"removed",n,t),j(e,c,"approved",s,t),j(e,c,"locked",o,t),j(e,c,"unlocked",i,t),chrome.storage.sync.set(e,a))},P=function(e){var r=arguments.length>1&&void 0!==arguments[1]?arguments[1]:function(){},t="other_subscriptions";chrome.storage.sync.get(t,function(s){s[t][e]={t:Math.floor((new Date).getTime()/1e3)};var o=Object(n.trimDict_by_numberValuedAttribute)(s[t],l,"t");chrome.storage.sync.set(c({},t,o),r)})},T=function(e){var r=arguments.length>1&&void 0!==arguments[1]?arguments[1]:function(){},t="other_subscriptions",n=k("other",!1);delete n.changes,chrome.storage.sync.get(Object.values(n).concat(t),function(s){delete s[t][e],Object.values(n).forEach(function(r){e in s[r]&&delete s[r][e]}),chrome.storage.sync.set(s,function(){chrome.runtime.sendMessage({action:"update-badge"},r)})})},S=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:function(){},r="other_subscriptions";chrome.storage.sync.get(r,function(t){e(Object.keys(t[r]))})},I=function(e){var r=arguments.length>1&&void 0!==arguments[1]?arguments[1]:function(){},t=arguments.length>2&&void 0!==arguments[2]?arguments[2]:function(){},n=w(e);chrome.storage.sync.get("user_subscriptions",function(s){var o=s.user_subscriptions;e in o?t("already subscribed to this user"):Object.keys(o).length<5?(o[e]=!0,chrome.storage.sync.set(a({user_subscriptions:o},n),r)):t("maximum number of subscriptions reached")})},D=function(e,r){var t=Object.keys(w(e));chrome.storage.sync.get("user_subscriptions",function(n){var s=n.user_subscriptions;delete s[e],chrome.storage.sync.set({user_subscriptions:s},function(){chrome.storage.sync.remove(t,function(){var t=v("items",e,!0);chrome.runtime.sendMessage({action:"update-badge"}),chrome.storage.local.remove(t,r)})})})},M=function(e){chrome.storage.sync.get(null,function(r){var t;0===Object.keys(r).length?chrome.storage.sync.set((y(t={user_subscriptions:{},other_subscriptions:{},options:{interval:g,custom_clientid:"",removal_status:{track:!0,notify:!0},lock_status:{track:!0,notify:!0}}},"other",!1),t),e):e()})},L=function(e){chrome.storage.sync.get(null,function(r){var t=Object.keys(r.user_subscriptions),n={};t.forEach(function(e){n[e]=N(e,!0,r)}),n.other=N("other",!1,r),e(n,r)})},U=function(e){chrome.storage.sync.get(null,function(r){var t=Object.keys(r.user_subscriptions),n={};t.forEach(function(e){n[e]=R(e,!0,r)}),n.other=R("other",!1,r),e(n)})},R=function(e,r,t){return N(e,r,t).unseen},N=function(e,r,t){var n=t.options.removal_status.track,s=t.options.lock_status.track,o={},i={},a=[],c=k(e,r);return n&&a.push(c.removed,c.approved),s&&a.push(c.locked,c.unlocked),a.forEach(function(e){Object.keys(t[e]).forEach(function(r){t[e][r].u?o[r]=!0:i[r]=!0})}),{unseen:Object.keys(o),seen:Object.keys(i)}},F=function(e,r){var t=v("items",e,r);return o.a.storage.local.get(c({},t,{})).then(function(e){return e[t]})},$=function(e,r,t){var n=v("items",e,r);return o.a.storage.local.set(c({},n,t))},B=function(e,r,t){var n=arguments.length>3&&void 0!==arguments[3]?arguments[3]:function(){},s=v("items",r,t);chrome.storage.local.get(c({},s,{}),function(r){var t=r[s];Object.keys(e).forEach(function(r){t[r]=e[r]});var o=t;Object.keys(t).length>500&&(o=trimDictOfItems_by_utcAttribute(t,500,"o")),chrome.storage.local.set(c({},s,o),n)})},V=function(e,r,t,s){var o=v("items",e,r);return o in s&&t in s[o]?new n.LocalStorageItem({object:s[o][t]}):""},W=function(e){chrome.storage.sync.get("user_subscriptions",function(r){var t=[v("changes","other",!1)],n={changes_other:"other"};Object.keys(r.user_subscriptions).forEach(function(e){var r=v("changes",e,!0);t.push(r),n[r]=e}),chrome.storage.sync.get(t,function(r){var s={};t.forEach(function(e){e in r&&r[e].length&&(s[n[e]]=r[e])}),e(s)})})},q=function(e){return o.a.storage.sync.get(["user_subscriptions","other_subscriptions","options"]).then(function(r){var t=Object.keys(r.user_subscriptions),n=Object.keys(r.other_subscriptions),s=r.options;return e(t,n,s)}).catch(console.log)},z=function(e,r,t,n,s,o,i,a){chrome.storage.sync.set({options:{interval:e,custom_clientid:r,removal_status:{track:t,notify:n},lock_status:{track:s,notify:o},hide_subscribe:i}},a)}},function(e,r,t){"use strict";t.r(r),t.d(r,"ALARM_NAME",function(){return a}),t.d(r,"createTab",function(){return c}),t.d(r,"getFullIDsFromURL",function(){return g}),t.d(r,"getFullIDsFromPath",function(){return l}),t.d(r,"reformatRedditText",function(){return A}),t.d(r,"isRemovedItem",function(){return d}),t.d(r,"isComment",function(){return f}),t.d(r,"isRemovedComment",function(){return h}),t.d(r,"isUserDeletedComment",function(){return b}),t.d(r,"isUserDeletedPost",function(){return p}),t.d(r,"isUserDeletedItem",function(){return x}),t.d(r,"isRemovedPost",function(){return v}),t.d(r,"trimDict_by_numberValuedAttribute",function(){return y}),t.d(r,"sortDict_by_numberValuedAttribute",function(){return k}),t.d(r,"ItemForStorage",function(){return w}),t.d(r,"ChangeForStorage",function(){return O}),t.d(r,"LocalStorageItem",function(){return _}),t.d(r,"setAlarm",function(){return E}),t.d(r,"alphaLowerSort",function(){return j}),t.d(r,"goToOptions",function(){return C}),t.d(r,"showError",function(){return P}),t.d(r,"pprint",function(){return T}),t.d(r,"getPrettyTimeLength",function(){return S}),t.d(r,"getPrettyDate",function(){return I}),t.d(r,"createNotification",function(){return D}),t.d(r,"updateBadgeUnseenCount",function(){return M});var n=t(1);t(3);function s(e,r){if(!(e instanceof r))throw new TypeError("Cannot call a class as a function")}function o(e,r){for(var t=0;t<r.length;t++){var n=r[t];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}function i(e,r,t){return r&&o(e.prototype,r),t&&o(e,t),e}var a="notifyme",c=function(e){chrome.tabs.create({url:e},function(r){r?chrome.windows.update(r.windowId,{focused:!0}):chrome.windows.create({url:e},function(e){chrome.windows.update(e.id,{focused:!0})})})},g=function(e){var r=e.replace(/https:\/\/[^\/]*re(ve)?ddit.com/,"");return l(r)},u=/^\/(v|r|user)\/([^\/]+)\/comments\/([^\/]+)\/[^\/]*(?:\/([^\/?&#]+))?/,m=/^\/(?:user|y|u)\/([^\/?&#]+)\/?/,l=function(e){var r=void 0,t=void 0,n=void 0,s=void 0,o=e.match(u),i=e.match(m);o?("user"===o[1]?n=o[2]:s=o[2],o[3]&&(r="t3_"+o[3]),o[4]&&(t="t1_"+o[4])):i&&(n=i[1]);return[r,t,n,s]},A=function(e){return e.replace(/&amp;/g,"&").replace(/&gt;/g,">").replace(/&lt;/g,"<").replace(/\s+/g," ").substr(0,300)},d=function(e){return f(e.name)?h(e):v(e)},f=function(e){return"t1"===e.substr(0,2)},h=function(e){return("[removed]"===e.body.replace(/\\/g,"")||"[deleted]"===e.body.replace(/\\/g,""))&&"[deleted]"===e.author.replace(/\\/g,"")},b=function(e){return"[deleted]"===e.body.replace(/\\/g,"")&&"[deleted]"===e.author.replace(/\\/g,"")},p=function(e){return!e.is_robot_indexable&&"[deleted]"===e.author.replace(/\\/g,"")},x=function(e){return f(e.name)?b(e):p(e)},v=function(e){return!e.is_robot_indexable},y=function(e,r,t){var n=k(e,t).slice(0,r),s={};return n.forEach(function(e){s[e[0]]=e[1]}),s},k=function(e,r){var t=Object.keys(e).map(function(r){return[r,e[r]]});return t.sort(function(e,t){return t[1][r]-e[1][r]}),t},w=function(){function e(r,t){s(this,e),this.c=r,this.u=t}return i(e,[{key:"getCreatedUTC",value:function(){return this.c}},{key:"getUnseen",value:function(){return this.u}}]),e}(),O=function(){function e(r){var t=r.id,n=void 0===t?null:t,o=r.observed_utc,i=void 0===o?null:o,a=r.change_type,c=void 0===a?null:a,g=r.object,u=void 0===g?null:g;s(this,e),u?(this.i=u.i,this.o=u.o,this.g=u.g):(this.i=n,this.o=i,this.g=c)}return i(e,[{key:"getID",value:function(){return this.i}},{key:"getObservedUTC",value:function(){return this.o}},{key:"getChangeType",value:function(){switch(this.g){case n.REMOVED:return"mod removed";case n.DELETED:return"user deleted";case n.APPROVED:return"approved";case n.LOCKED:return"locked";case n.UNLOCKED:return"unlocked";case n.EDITED:return"edited"}}}]),e}(),_=function(){function e(r){var t=r.item,n=void 0===t?null:t,o=r.observed_utc,i=void 0===o?null:o,a=r.object,c=void 0===a?null:a;if(s(this,e),c)this.t=c.t,this.o=c.o,this.c=c.c;else{var g="";g=f(n.name)?A(n.body):n.title,this.t=g,this.o=i,this.c=n.created_utc}}return i(e,[{key:"setText",value:function(e){this.t=A(e)}},{key:"getText",value:function(){return this.t}},{key:"getObservedUTC",value:function(){return this.o}},{key:"getCreatedUTC",value:function(){return this.c}}]),e}();function E(e){chrome.alarms.clear(a),chrome.alarms.create(a,{delayInMinutes:1,periodInMinutes:e})}function j(e,r){var t=e.toLowerCase(),n=r.toLowerCase();return t<n?-1:t>n?1:0}function C(){chrome.runtime.openOptionsPage?(chrome.runtime.openOptionsPage(),window.close()):window.open(chrome.runtime.getURL("/src/options.html"))}function P(e,r){$('<div class="rr-error">'+e+"</div>").appendTo(r).delay(2400).fadeTo(400,0,function(){$(this).remove()})}function T(e){console.log(JSON.stringify(e,null,"\t"))}var S=function(e){var r=[[60,"second","seconds"],[60,"minute","minutes"],[24,"hour","hours"],[7,"day","days"],[365/12/7,"week","weeks"],[12,"month","months"],[10,"year","years"],[10,"decade","decades"],[10,"century","centuries"],[10,"millenium","millenia"]];if(e<60)return e+" seconds";for(var t=e,n=0;n<r.length;n++){var s=r[n][0],o=r[n][1],i=r[n][2];if(t<s){var a=t-Math.floor(t),c=Math.round(a*r[n-1][0]);if(r[n-1][0]===c&&(t+=1,c=0),(Math.floor(t)>1||0==Math.floor(t))&&(o=i),n>1&&c>0){var g=r[n-1][1];c>1&&(g=r[n-1][2]),o+=", "+String(c)+" "+g}return String(Math.floor(t))+" "+o}t/=s}},I=function(e){var r=Math.floor((new Date).getTime()/1e3)-e;return S(r)+" ago"},D=function(e){var r=e.notificationId,t=e.title,n=e.message;location.protocol.match(/^http/)?chrome.runtime.sendMessage({action:"create-notification",options:{notificationId:r,title:t,message:n}}):registration.showNotification(t,{body:n,data:r,icon:"/icons/128.png",message:n})},M=function(){location.protocol.match(/^http/)?chrome.runtime.sendMessage({action:"update-badge"}):Object(n.getSubscribedUsers_withUnseenIDs)(function(e){var r=0;Object.values(e).forEach(function(e){r+=e.length});var t=r.toString();0==r&&(t=""),chrome.action.setBadgeBackgroundColor({color:"red"}),chrome.action.setBadgeText({text:t})})}},function(e,r,t){var n,s,o;s=[e],void 0===(o="function"==typeof(n=function(e){"use strict";if("undefined"==typeof browser||Object.getPrototypeOf(browser)!==Object.prototype){const r="The message port closed before a response was received.",t="Returning a Promise is the preferred way to send a reply from an onMessage/onMessageExternal listener, as the sendResponse will be removed from the specs (See https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/runtime/onMessage)",n=e=>{const n={alarms:{clear:{minArgs:0,maxArgs:1},clearAll:{minArgs:0,maxArgs:0},get:{minArgs:0,maxArgs:1},getAll:{minArgs:0,maxArgs:0}},bookmarks:{create:{minArgs:1,maxArgs:1},get:{minArgs:1,maxArgs:1},getChildren:{minArgs:1,maxArgs:1},getRecent:{minArgs:1,maxArgs:1},getSubTree:{minArgs:1,maxArgs:1},getTree:{minArgs:0,maxArgs:0},move:{minArgs:2,maxArgs:2},remove:{minArgs:1,maxArgs:1},removeTree:{minArgs:1,maxArgs:1},search:{minArgs:1,maxArgs:1},update:{minArgs:2,maxArgs:2}},browserAction:{disable:{minArgs:0,maxArgs:1,fallbackToNoCallback:!0},enable:{minArgs:0,maxArgs:1,fallbackToNoCallback:!0},getBadgeBackgroundColor:{minArgs:1,maxArgs:1},getBadgeText:{minArgs:1,maxArgs:1},getPopup:{minArgs:1,maxArgs:1},getTitle:{minArgs:1,maxArgs:1},openPopup:{minArgs:0,maxArgs:0},setBadgeBackgroundColor:{minArgs:1,maxArgs:1,fallbackToNoCallback:!0},setBadgeText:{minArgs:1,maxArgs:1,fallbackToNoCallback:!0},setIcon:{minArgs:1,maxArgs:1},setPopup:{minArgs:1,maxArgs:1,fallbackToNoCallback:!0},setTitle:{minArgs:1,maxArgs:1,fallbackToNoCallback:!0}},browsingData:{remove:{minArgs:2,maxArgs:2},removeCache:{minArgs:1,maxArgs:1},removeCookies:{minArgs:1,maxArgs:1},removeDownloads:{minArgs:1,maxArgs:1},removeFormData:{minArgs:1,maxArgs:1},removeHistory:{minArgs:1,maxArgs:1},removeLocalStorage:{minArgs:1,maxArgs:1},removePasswords:{minArgs:1,maxArgs:1},removePluginData:{minArgs:1,maxArgs:1},settings:{minArgs:0,maxArgs:0}},commands:{getAll:{minArgs:0,maxArgs:0}},contextMenus:{remove:{minArgs:1,maxArgs:1},removeAll:{minArgs:0,maxArgs:0},update:{minArgs:2,maxArgs:2}},cookies:{get:{minArgs:1,maxArgs:1},getAll:{minArgs:1,maxArgs:1},getAllCookieStores:{minArgs:0,maxArgs:0},remove:{minArgs:1,maxArgs:1},set:{minArgs:1,maxArgs:1}},devtools:{inspectedWindow:{eval:{minArgs:1,maxArgs:2,singleCallbackArg:!1}},panels:{create:{minArgs:3,maxArgs:3,singleCallbackArg:!0}}},downloads:{cancel:{minArgs:1,maxArgs:1},download:{minArgs:1,maxArgs:1},erase:{minArgs:1,maxArgs:1},getFileIcon:{minArgs:1,maxArgs:2},open:{minArgs:1,maxArgs:1,fallbackToNoCallback:!0},pause:{minArgs:1,maxArgs:1},removeFile:{minArgs:1,maxArgs:1},resume:{minArgs:1,maxArgs:1},search:{minArgs:1,maxArgs:1},show:{minArgs:1,maxArgs:1,fallbackToNoCallback:!0}},extension:{isAllowedFileSchemeAccess:{minArgs:0,maxArgs:0},isAllowedIncognitoAccess:{minArgs:0,maxArgs:0}},history:{addUrl:{minArgs:1,maxArgs:1},deleteAll:{minArgs:0,maxArgs:0},deleteRange:{minArgs:1,maxArgs:1},deleteUrl:{minArgs:1,maxArgs:1},getVisits:{minArgs:1,maxArgs:1},search:{minArgs:1,maxArgs:1}},i18n:{detectLanguage:{minArgs:1,maxArgs:1},getAcceptLanguages:{minArgs:0,maxArgs:0}},identity:{launchWebAuthFlow:{minArgs:1,maxArgs:1}},idle:{queryState:{minArgs:1,maxArgs:1}},management:{get:{minArgs:1,maxArgs:1},getAll:{minArgs:0,maxArgs:0},getSelf:{minArgs:0,maxArgs:0},setEnabled:{minArgs:2,maxArgs:2},uninstallSelf:{minArgs:0,maxArgs:1}},notifications:{clear:{minArgs:1,maxArgs:1},create:{minArgs:1,maxArgs:2},getAll:{minArgs:0,maxArgs:0},getPermissionLevel:{minArgs:0,maxArgs:0},update:{minArgs:2,maxArgs:2}},pageAction:{getPopup:{minArgs:1,maxArgs:1},getTitle:{minArgs:1,maxArgs:1},hide:{minArgs:1,maxArgs:1,fallbackToNoCallback:!0},setIcon:{minArgs:1,maxArgs:1},setPopup:{minArgs:1,maxArgs:1,fallbackToNoCallback:!0},setTitle:{minArgs:1,maxArgs:1,fallbackToNoCallback:!0},show:{minArgs:1,maxArgs:1,fallbackToNoCallback:!0}},permissions:{contains:{minArgs:1,maxArgs:1},getAll:{minArgs:0,maxArgs:0},remove:{minArgs:1,maxArgs:1},request:{minArgs:1,maxArgs:1}},runtime:{getBackgroundPage:{minArgs:0,maxArgs:0},getPlatformInfo:{minArgs:0,maxArgs:0},openOptionsPage:{minArgs:0,maxArgs:0},requestUpdateCheck:{minArgs:0,maxArgs:0},sendMessage:{minArgs:1,maxArgs:3},sendNativeMessage:{minArgs:2,maxArgs:2},setUninstallURL:{minArgs:1,maxArgs:1}},sessions:{getDevices:{minArgs:0,maxArgs:1},getRecentlyClosed:{minArgs:0,maxArgs:1},restore:{minArgs:0,maxArgs:1}},storage:{local:{clear:{minArgs:0,maxArgs:0},get:{minArgs:0,maxArgs:1},getBytesInUse:{minArgs:0,maxArgs:1},remove:{minArgs:1,maxArgs:1},set:{minArgs:1,maxArgs:1}},managed:{get:{minArgs:0,maxArgs:1},getBytesInUse:{minArgs:0,maxArgs:1}},sync:{clear:{minArgs:0,maxArgs:0},get:{minArgs:0,maxArgs:1},getBytesInUse:{minArgs:0,maxArgs:1},remove:{minArgs:1,maxArgs:1},set:{minArgs:1,maxArgs:1}}},tabs:{captureVisibleTab:{minArgs:0,maxArgs:2},create:{minArgs:1,maxArgs:1},detectLanguage:{minArgs:0,maxArgs:1},discard:{minArgs:0,maxArgs:1},duplicate:{minArgs:1,maxArgs:1},executeScript:{minArgs:1,maxArgs:2},get:{minArgs:1,maxArgs:1},getCurrent:{minArgs:0,maxArgs:0},getZoom:{minArgs:0,maxArgs:1},getZoomSettings:{minArgs:0,maxArgs:1},highlight:{minArgs:1,maxArgs:1},insertCSS:{minArgs:1,maxArgs:2},move:{minArgs:2,maxArgs:2},query:{minArgs:1,maxArgs:1},reload:{minArgs:0,maxArgs:2},remove:{minArgs:1,maxArgs:1},removeCSS:{minArgs:1,maxArgs:2},sendMessage:{minArgs:2,maxArgs:3},setZoom:{minArgs:1,maxArgs:2},setZoomSettings:{minArgs:1,maxArgs:2},update:{minArgs:1,maxArgs:2}},topSites:{get:{minArgs:0,maxArgs:0}},webNavigation:{getAllFrames:{minArgs:1,maxArgs:1},getFrame:{minArgs:1,maxArgs:1}},webRequest:{handlerBehaviorChanged:{minArgs:0,maxArgs:0}},windows:{create:{minArgs:0,maxArgs:1},get:{minArgs:1,maxArgs:2},getAll:{minArgs:0,maxArgs:1},getCurrent:{minArgs:0,maxArgs:1},getLastFocused:{minArgs:0,maxArgs:1},remove:{minArgs:1,maxArgs:1},update:{minArgs:2,maxArgs:2}}};if(0===Object.keys(n).length)throw new Error("api-metadata.json has not been included in browser-polyfill");const s=(r,t)=>(...n)=>{e.runtime.lastError?r.reject(e.runtime.lastError):t.singleCallbackArg||n.length<=1&&!1!==t.singleCallbackArg?r.resolve(n[0]):r.resolve(n)},o=e=>1==e?"argument":"arguments",i=(e,r,t)=>new Proxy(r,{apply:(r,n,s)=>t.call(n,e,...s)});let a=Function.call.bind(Object.prototype.hasOwnProperty);const c=(e,r={},t={})=>{let n=Object.create(null),g={has:(r,t)=>t in e||t in n,get(g,u,m){if(u in n)return n[u];if(!(u in e))return;let l=e[u];if("function"==typeof l)if("function"==typeof r[u])l=i(e,e[u],r[u]);else if(a(t,u)){let r=((e,r)=>(function(t,...n){if(n.length<r.minArgs)throw new Error(`Expected at least ${r.minArgs} ${o(r.minArgs)} for ${e}(), got ${n.length}`);if(n.length>r.maxArgs)throw new Error(`Expected at most ${r.maxArgs} ${o(r.maxArgs)} for ${e}(), got ${n.length}`);return new Promise((o,i)=>{if(r.fallbackToNoCallback)try{t[e](...n,s({resolve:o,reject:i},r))}catch(s){console.warn(`${e} API method doesn't seem to support the callback parameter, `+"falling back to call it without a callback: ",s),t[e](...n),r.fallbackToNoCallback=!1,r.noCallback=!0,o()}else r.noCallback?(t[e](...n),o()):t[e](...n,s({resolve:o,reject:i},r))})}))(u,t[u]);l=i(e,e[u],r)}else l=l.bind(e);else{if("object"!=typeof l||null===l||!a(r,u)&&!a(t,u))return Object.defineProperty(n,u,{configurable:!0,enumerable:!0,get:()=>e[u],set(r){e[u]=r}}),l;l=c(l,r[u],t[u])}return n[u]=l,l},set:(r,t,s,o)=>(t in n?n[t]=s:e[t]=s,!0),defineProperty:(e,r,t)=>Reflect.defineProperty(n,r,t),deleteProperty:(e,r)=>Reflect.deleteProperty(n,r)},u=Object.create(e);return new Proxy(u,g)},g=e=>({addListener(r,t,...n){r.addListener(e.get(t),...n)},hasListener:(r,t)=>r.hasListener(e.get(t)),removeListener(r,t){r.removeListener(e.get(t))}});let u=!1;const m=new class extends WeakMap{constructor(e,r){super(r),this.createItem=e}get(e){return this.has(e)||this.set(e,this.createItem(e)),super.get(e)}}(e=>"function"!=typeof e?e:function(r,n,s){let o,i,a=!1,c=new Promise(e=>{o=function(r){u||(console.warn(t,(new Error).stack),u=!0),a=!0,e(r)}});try{i=e(r,n,o)}catch(e){i=Promise.reject(e)}const g=!0!==i&&(e=>e&&"object"==typeof e&&"function"==typeof e.then)(i);if(!0!==i&&!g&&!a)return!1;const m=e=>{e.then(e=>{s(e)},e=>{let r;r=e&&(e instanceof Error||"string"==typeof e.message)?e.message:"An unexpected error occurred",s({__mozWebExtensionPolyfillReject__:!0,message:r})}).catch(e=>{console.error("Failed to send onMessage rejected reply",e)})};return m(g?i:c),!0}),l=(t,n,s,...i)=>{if(i.length<n.minArgs)throw new Error(`Expected at least ${n.minArgs} ${o(n.minArgs)} for ${t}(), got ${i.length}`);if(i.length>n.maxArgs)throw new Error(`Expected at most ${n.maxArgs} ${o(n.maxArgs)} for ${t}(), got ${i.length}`);return new Promise((t,n)=>{const o=(({reject:t,resolve:n},s)=>{e.runtime.lastError?e.runtime.lastError.message===r?n():t(e.runtime.lastError):s&&s.__mozWebExtensionPolyfillReject__?t(new Error(s.message)):n(s)}).bind(null,{resolve:t,reject:n});i.push(o),s.sendMessage(...i)})},A={runtime:{onMessage:g(m),onMessageExternal:g(m),sendMessage:l.bind(null,"sendMessage",{minArgs:1,maxArgs:3})},tabs:{sendMessage:l.bind(null,"sendMessage",{minArgs:2,maxArgs:3})}},d={clear:{minArgs:1,maxArgs:1},get:{minArgs:1,maxArgs:1},set:{minArgs:1,maxArgs:1}};return n.privacy={network:{networkPredictionEnabled:d,webRTCIPHandlingPolicy:d},services:{passwordSavingEnabled:d},websites:{hyperlinkAuditingEnabled:d,referrersEnabled:d}},c(e,A,n)};if("object"!=typeof chrome||!chrome||!chrome.runtime||!chrome.runtime.id)throw new Error("This script should only be loaded in a browser extension.");e.exports=n(chrome)}else e.exports=browser})?n.apply(r,s):n)||(e.exports=o)}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,