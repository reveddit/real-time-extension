(()=>{var t={1983:(t,e,r)=>{"use strict";r(6266),r(990),r(911),r(4160),r(6197),r(6728),r(4039),r(3568),r(8051),r(8250),r(5434),r(4952),r(6337),r(5666)},6266:(t,e,r)=>{r(5767),r(8132),r(8388),r(7470),r(4882),r(1520),r(7476),r(9622),r(9375),r(3533),r(4672),r(4157),r(5095),r(9892),r(5115),r(9176),r(8838),r(6253),r(9730),r(6059),r(8377),r(1084),r(4299),r(1246),r(726),r(1901),r(5972),r(3403),r(2516),r(9371),r(6479),r(1736),r(1889),r(5177),r(6943),r(6503),r(6786),r(932),r(7526),r(1591),r(9073),r(347),r(579),r(4669),r(7710),r(5789),r(3514),r(9978),r(8472),r(6946),r(5068),r(413),r(191),r(8306),r(4564),r(9115),r(9539),r(6620),r(2850),r(823),r(7732),r(856),r(703),r(1539),r(5292),r(6629),r(3694),r(7648),r(7795),r(4531),r(3605),r(6780),r(9937),r(511),r(1822),r(9977),r(1031),r(6331),r(1560),r(774),r(522),r(8295),r(7842),r(110),r(75),r(4336),r(1802),r(8837),r(6773),r(5745),r(3057),r(3750),r(3369),r(9564),r(2e3),r(8977),r(2310),r(4899),r(1842),r(6997),r(3946),r(8269),r(6108),r(6774),r(1466),r(9357),r(6142),r(1876),r(851),r(8416),r(8184),r(147),r(9192),r(142),r(1786),r(5368),r(6964),r(2152),r(4821),r(9103),r(1303),r(3318),r(162),r(3834),r(1572),r(2139),r(685),r(5535),r(7347),r(3049),r(6633),r(8989),r(8270),r(4510),r(3984),r(5769),r(55),r(6014),t.exports=r(5645)},911:(t,e,r)=>{r(1268),t.exports=r(5645).Array.flatMap},990:(t,e,r)=>{r(2773),t.exports=r(5645).Array.includes},5434:(t,e,r)=>{r(3276),t.exports=r(5645).Object.entries},8051:(t,e,r)=>{r(8351),t.exports=r(5645).Object.getOwnPropertyDescriptors},8250:(t,e,r)=>{r(6409),t.exports=r(5645).Object.values},4952:(t,e,r)=>{"use strict";r(851),r(9865),t.exports=r(5645).Promise.finally},6197:(t,e,r)=>{r(2770),t.exports=r(5645).String.padEnd},4160:(t,e,r)=>{r(1784),t.exports=r(5645).String.padStart},4039:(t,e,r)=>{r(4325),t.exports=r(5645).String.trimRight},6728:(t,e,r)=>{r(5869),t.exports=r(5645).String.trimLeft},3568:(t,e,r)=>{r(9665),t.exports=r(8787).f("asyncIterator")},115:(t,e,r)=>{r(4579),t.exports=r(1327).global},5663:t=>{t.exports=function(t){if("function"!=typeof t)throw TypeError(t+" is not a function!");return t}},2159:(t,e,r)=>{var n=r(6727);t.exports=function(t){if(!n(t))throw TypeError(t+" is not an object!");return t}},1327:t=>{var e=t.exports={version:"2.6.12"};"number"==typeof __e&&(__e=e)},9216:(t,e,r)=>{var n=r(5663);t.exports=function(t,e,r){if(n(t),void 0===e)return t;switch(r){case 1:return function(r){return t.call(e,r)};case 2:return function(r,n){return t.call(e,r,n)};case 3:return function(r,n,i){return t.call(e,r,n,i)}}return function(){return t.apply(e,arguments)}}},9666:(t,e,r)=>{t.exports=!r(7929)((function(){return 7!=Object.defineProperty({},"a",{get:function(){return 7}}).a}))},7467:(t,e,r)=>{var n=r(6727),i=r(3938).document,o=n(i)&&n(i.createElement);t.exports=function(t){return o?i.createElement(t):{}}},3856:(t,e,r)=>{var n=r(3938),i=r(1327),o=r(9216),s=r(1818),a=r(7069),c="prototype",u=function(t,e,r){var l,h,f,d=t&u.F,p=t&u.G,g=t&u.S,m=t&u.P,y=t&u.B,v=t&u.W,b=p?i:i[e]||(i[e]={}),w=b[c],S=p?n:g?n[e]:(n[e]||{})[c];for(l in p&&(r=e),r)(h=!d&&S&&void 0!==S[l])&&a(b,l)||(f=h?S[l]:r[l],b[l]=p&&"function"!=typeof S[l]?r[l]:y&&h?o(f,n):v&&S[l]==f?function(t){var e=function(e,r,n){if(this instanceof t){switch(arguments.length){case 0:return new t;case 1:return new t(e);case 2:return new t(e,r)}return new t(e,r,n)}return t.apply(this,arguments)};return e[c]=t[c],e}(f):m&&"function"==typeof f?o(Function.call,f):f,m&&((b.virtual||(b.virtual={}))[l]=f,t&u.R&&w&&!w[l]&&s(w,l,f)))};u.F=1,u.G=2,u.S=4,u.P=8,u.B=16,u.W=32,u.U=64,u.R=128,t.exports=u},7929:t=>{t.exports=function(t){try{return!!t()}catch(t){return!0}}},3938:t=>{var e=t.exports="undefined"!=typeof window&&window.Math==Math?window:"undefined"!=typeof self&&self.Math==Math?self:Function("return this")();"number"==typeof __g&&(__g=e)},7069:t=>{var e={}.hasOwnProperty;t.exports=function(t,r){return e.call(t,r)}},1818:(t,e,r)=>{var n=r(4743),i=r(3101);t.exports=r(9666)?function(t,e,r){return n.f(t,e,i(1,r))}:function(t,e,r){return t[e]=r,t}},3758:(t,e,r)=>{t.exports=!r(9666)&&!r(7929)((function(){return 7!=Object.defineProperty(r(7467)("div"),"a",{get:function(){return 7}}).a}))},6727:t=>{t.exports=function(t){return"object"==typeof t?null!==t:"function"==typeof t}},4743:(t,e,r)=>{var n=r(2159),i=r(3758),o=r(3206),s=Object.defineProperty;e.f=r(9666)?Object.defineProperty:function(t,e,r){if(n(t),e=o(e,!0),n(r),i)try{return s(t,e,r)}catch(t){}if("get"in r||"set"in r)throw TypeError("Accessors not supported!");return"value"in r&&(t[e]=r.value),t}},3101:t=>{t.exports=function(t,e){return{enumerable:!(1&t),configurable:!(2&t),writable:!(4&t),value:e}}},3206:(t,e,r)=>{var n=r(6727);t.exports=function(t,e){if(!n(t))return t;var r,i;if(e&&"function"==typeof(r=t.toString)&&!n(i=r.call(t)))return i;if("function"==typeof(r=t.valueOf)&&!n(i=r.call(t)))return i;if(!e&&"function"==typeof(r=t.toString)&&!n(i=r.call(t)))return i;throw TypeError("Can't convert object to primitive value")}},4579:(t,e,r)=>{var n=r(3856);n(n.G,{global:r(3938)})},4963:t=>{t.exports=function(t){if("function"!=typeof t)throw TypeError(t+" is not a function!");return t}},3365:(t,e,r)=>{var n=r(2032);t.exports=function(t,e){if("number"!=typeof t&&"Number"!=n(t))throw TypeError(e);return+t}},7722:(t,e,r)=>{var n=r(6314)("unscopables"),i=Array.prototype;null==i[n]&&r(7728)(i,n,{}),t.exports=function(t){i[n][t]=!0}},6793:(t,e,r)=>{"use strict";var n=r(4496)(!0);t.exports=function(t,e,r){return e+(r?n(t,e).length:1)}},3328:t=>{t.exports=function(t,e,r,n){if(!(t instanceof e)||void 0!==n&&n in t)throw TypeError(r+": incorrect invocation!");return t}},7007:(t,e,r)=>{var n=r(5286);t.exports=function(t){if(!n(t))throw TypeError(t+" is not an object!");return t}},5216:(t,e,r)=>{"use strict";var n=r(508),i=r(2337),o=r(875);t.exports=[].copyWithin||function(t,e){var r=n(this),s=o(r.length),a=i(t,s),c=i(e,s),u=arguments.length>2?arguments[2]:void 0,l=Math.min((void 0===u?s:i(u,s))-c,s-a),h=1;for(c<a&&a<c+l&&(h=-1,c+=l-1,a+=l-1);l-- >0;)c in r?r[a]=r[c]:delete r[a],a+=h,c+=h;return r}},6852:(t,e,r)=>{"use strict";var n=r(508),i=r(2337),o=r(875);t.exports=function(t){for(var e=n(this),r=o(e.length),s=arguments.length,a=i(s>1?arguments[1]:void 0,r),c=s>2?arguments[2]:void 0,u=void 0===c?r:i(c,r);u>a;)e[a++]=t;return e}},9315:(t,e,r)=>{var n=r(2110),i=r(875),o=r(2337);t.exports=function(t){return function(e,r,s){var a,c=n(e),u=i(c.length),l=o(s,u);if(t&&r!=r){for(;u>l;)if((a=c[l++])!=a)return!0}else for(;u>l;l++)if((t||l in c)&&c[l]===r)return t||l||0;return!t&&-1}}},50:(t,e,r)=>{var n=r(741),i=r(9797),o=r(508),s=r(875),a=r(6886);t.exports=function(t,e){var r=1==t,c=2==t,u=3==t,l=4==t,h=6==t,f=5==t||h,d=e||a;return function(e,a,p){for(var g,m,y=o(e),v=i(y),b=n(a,p,3),w=s(v.length),S=0,x=r?d(e,w):c?d(e,0):void 0;w>S;S++)if((f||S in v)&&(m=b(g=v[S],S,y),t))if(r)x[S]=m;else if(m)switch(t){case 3:return!0;case 5:return g;case 6:return S;case 2:x.push(g)}else if(l)return!1;return h?-1:u||l?l:x}}},7628:(t,e,r)=>{var n=r(4963),i=r(508),o=r(9797),s=r(875);t.exports=function(t,e,r,a,c){n(e);var u=i(t),l=o(u),h=s(u.length),f=c?h-1:0,d=c?-1:1;if(r<2)for(;;){if(f in l){a=l[f],f+=d;break}if(f+=d,c?f<0:h<=f)throw TypeError("Reduce of empty array with no initial value")}for(;c?f>=0:h>f;f+=d)f in l&&(a=e(a,l[f],f,u));return a}},2736:(t,e,r)=>{var n=r(5286),i=r(4302),o=r(6314)("species");t.exports=function(t){var e;return i(t)&&("function"!=typeof(e=t.constructor)||e!==Array&&!i(e.prototype)||(e=void 0),n(e)&&null===(e=e[o])&&(e=void 0)),void 0===e?Array:e}},6886:(t,e,r)=>{var n=r(2736);t.exports=function(t,e){return new(n(t))(e)}},4398:(t,e,r)=>{"use strict";var n=r(4963),i=r(5286),o=r(7242),s=[].slice,a={};t.exports=Function.bind||function(t){var e=n(this),r=s.call(arguments,1),c=function(){var n=r.concat(s.call(arguments));return this instanceof c?function(t,e,r){if(!(e in a)){for(var n=[],i=0;i<e;i++)n[i]="a["+i+"]";a[e]=Function("F,a","return new F("+n.join(",")+")")}return a[e](t,r)}(e,n.length,n):o(e,n,t)};return i(e.prototype)&&(c.prototype=e.prototype),c}},1488:(t,e,r)=>{var n=r(2032),i=r(6314)("toStringTag"),o="Arguments"==n(function(){return arguments}());t.exports=function(t){var e,r,s;return void 0===t?"Undefined":null===t?"Null":"string"==typeof(r=function(t,e){try{return t[e]}catch(t){}}(e=Object(t),i))?r:o?n(e):"Object"==(s=n(e))&&"function"==typeof e.callee?"Arguments":s}},2032:t=>{var e={}.toString;t.exports=function(t){return e.call(t).slice(8,-1)}},9824:(t,e,r)=>{"use strict";var n=r(9275).f,i=r(2503),o=r(4408),s=r(741),a=r(3328),c=r(3531),u=r(2923),l=r(5436),h=r(2974),f=r(7057),d=r(4728).fastKey,p=r(1616),g=f?"_s":"size",m=function(t,e){var r,n=d(e);if("F"!==n)return t._i[n];for(r=t._f;r;r=r.n)if(r.k==e)return r};t.exports={getConstructor:function(t,e,r,u){var l=t((function(t,n){a(t,l,e,"_i"),t._t=e,t._i=i(null),t._f=void 0,t._l=void 0,t[g]=0,null!=n&&c(n,r,t[u],t)}));return o(l.prototype,{clear:function(){for(var t=p(this,e),r=t._i,n=t._f;n;n=n.n)n.r=!0,n.p&&(n.p=n.p.n=void 0),delete r[n.i];t._f=t._l=void 0,t[g]=0},delete:function(t){var r=p(this,e),n=m(r,t);if(n){var i=n.n,o=n.p;delete r._i[n.i],n.r=!0,o&&(o.n=i),i&&(i.p=o),r._f==n&&(r._f=i),r._l==n&&(r._l=o),r[g]--}return!!n},forEach:function(t){p(this,e);for(var r,n=s(t,arguments.length>1?arguments[1]:void 0,3);r=r?r.n:this._f;)for(n(r.v,r.k,this);r&&r.r;)r=r.p},has:function(t){return!!m(p(this,e),t)}}),f&&n(l.prototype,"size",{get:function(){return p(this,e)[g]}}),l},def:function(t,e,r){var n,i,o=m(t,e);return o?o.v=r:(t._l=o={i:i=d(e,!0),k:e,v:r,p:n=t._l,n:void 0,r:!1},t._f||(t._f=o),n&&(n.n=o),t[g]++,"F"!==i&&(t._i[i]=o)),t},getEntry:m,setStrong:function(t,e,r){u(t,e,(function(t,r){this._t=p(t,e),this._k=r,this._l=void 0}),(function(){for(var t=this,e=t._k,r=t._l;r&&r.r;)r=r.p;return t._t&&(t._l=r=r?r.n:t._t._f)?l(0,"keys"==e?r.k:"values"==e?r.v:[r.k,r.v]):(t._t=void 0,l(1))}),r?"entries":"values",!r,!0),h(e)}}},3657:(t,e,r)=>{"use strict";var n=r(4408),i=r(4728).getWeak,o=r(7007),s=r(5286),a=r(3328),c=r(3531),u=r(50),l=r(9181),h=r(1616),f=u(5),d=u(6),p=0,g=function(t){return t._l||(t._l=new m)},m=function(){this.a=[]},y=function(t,e){return f(t.a,(function(t){return t[0]===e}))};m.prototype={get:function(t){var e=y(this,t);if(e)return e[1]},has:function(t){return!!y(this,t)},set:function(t,e){var r=y(this,t);r?r[1]=e:this.a.push([t,e])},delete:function(t){var e=d(this.a,(function(e){return e[0]===t}));return~e&&this.a.splice(e,1),!!~e}},t.exports={getConstructor:function(t,e,r,o){var u=t((function(t,n){a(t,u,e,"_i"),t._t=e,t._i=p++,t._l=void 0,null!=n&&c(n,r,t[o],t)}));return n(u.prototype,{delete:function(t){if(!s(t))return!1;var r=i(t);return!0===r?g(h(this,e)).delete(t):r&&l(r,this._i)&&delete r[this._i]},has:function(t){if(!s(t))return!1;var r=i(t);return!0===r?g(h(this,e)).has(t):r&&l(r,this._i)}}),u},def:function(t,e,r){var n=i(o(e),!0);return!0===n?g(t).set(e,r):n[t._i]=r,t},ufstore:g}},5795:(t,e,r)=>{"use strict";var n=r(3816),i=r(2985),o=r(7234),s=r(4408),a=r(4728),c=r(3531),u=r(3328),l=r(5286),h=r(4253),f=r(7462),d=r(2943),p=r(266);t.exports=function(t,e,r,g,m,y){var v=n[t],b=v,w=m?"set":"add",S=b&&b.prototype,x={},_=function(t){var e=S[t];o(S,t,"delete"==t||"has"==t?function(t){return!(y&&!l(t))&&e.call(this,0===t?0:t)}:"get"==t?function(t){return y&&!l(t)?void 0:e.call(this,0===t?0:t)}:"add"==t?function(t){return e.call(this,0===t?0:t),this}:function(t,r){return e.call(this,0===t?0:t,r),this})};if("function"==typeof b&&(y||S.forEach&&!h((function(){(new b).entries().next()})))){var A=new b,E=A[w](y?{}:-0,1)!=A,C=h((function(){A.has(1)})),T=f((function(t){new b(t)})),k=!y&&h((function(){for(var t=new b,e=5;e--;)t[w](e,e);return!t.has(-0)}));T||((b=e((function(e,r){u(e,b,t);var n=p(new v,e,b);return null!=r&&c(r,m,n[w],n),n}))).prototype=S,S.constructor=b),(C||k)&&(_("delete"),_("has"),m&&_("get")),(k||E)&&_(w),y&&S.clear&&delete S.clear}else b=g.getConstructor(e,t,m,w),s(b.prototype,r),a.NEED=!0;return d(b,t),x[t]=b,i(i.G+i.W+i.F*(b!=v),x),y||g.setStrong(b,t,m),b}},5645:t=>{var e=t.exports={version:"2.6.12"};"number"==typeof __e&&(__e=e)},2811:(t,e,r)=>{"use strict";var n=r(9275),i=r(681);t.exports=function(t,e,r){e in t?n.f(t,e,i(0,r)):t[e]=r}},741:(t,e,r)=>{var n=r(4963);t.exports=function(t,e,r){if(n(t),void 0===e)return t;switch(r){case 1:return function(r){return t.call(e,r)};case 2:return function(r,n){return t.call(e,r,n)};case 3:return function(r,n,i){return t.call(e,r,n,i)}}return function(){return t.apply(e,arguments)}}},3537:(t,e,r)=>{"use strict";var n=r(4253),i=Date.prototype.getTime,o=Date.prototype.toISOString,s=function(t){return t>9?t:"0"+t};t.exports=n((function(){return"0385-07-25T07:06:39.999Z"!=o.call(new Date(-50000000000001))}))||!n((function(){o.call(new Date(NaN))}))?function(){if(!isFinite(i.call(this)))throw RangeError("Invalid time value");var t=this,e=t.getUTCFullYear(),r=t.getUTCMilliseconds(),n=e<0?"-":e>9999?"+":"";return n+("00000"+Math.abs(e)).slice(n?-6:-4)+"-"+s(t.getUTCMonth()+1)+"-"+s(t.getUTCDate())+"T"+s(t.getUTCHours())+":"+s(t.getUTCMinutes())+":"+s(t.getUTCSeconds())+"."+(r>99?r:"0"+s(r))+"Z"}:o},870:(t,e,r)=>{"use strict";var n=r(7007),i=r(1689),o="number";t.exports=function(t){if("string"!==t&&t!==o&&"default"!==t)throw TypeError("Incorrect hint");return i(n(this),t!=o)}},1355:t=>{t.exports=function(t){if(null==t)throw TypeError("Can't call method on  "+t);return t}},7057:(t,e,r)=>{t.exports=!r(4253)((function(){return 7!=Object.defineProperty({},"a",{get:function(){return 7}}).a}))},2457:(t,e,r)=>{var n=r(5286),i=r(3816).document,o=n(i)&&n(i.createElement);t.exports=function(t){return o?i.createElement(t):{}}},4430:t=>{t.exports="constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf".split(",")},5541:(t,e,r)=>{var n=r(7184),i=r(4548),o=r(4682);t.exports=function(t){var e=n(t),r=i.f;if(r)for(var s,a=r(t),c=o.f,u=0;a.length>u;)c.call(t,s=a[u++])&&e.push(s);return e}},2985:(t,e,r)=>{var n=r(3816),i=r(5645),o=r(7728),s=r(7234),a=r(741),c="prototype",u=function(t,e,r){var l,h,f,d,p=t&u.F,g=t&u.G,m=t&u.S,y=t&u.P,v=t&u.B,b=g?n:m?n[e]||(n[e]={}):(n[e]||{})[c],w=g?i:i[e]||(i[e]={}),S=w[c]||(w[c]={});for(l in g&&(r=e),r)f=((h=!p&&b&&void 0!==b[l])?b:r)[l],d=v&&h?a(f,n):y&&"function"==typeof f?a(Function.call,f):f,b&&s(b,l,f,t&u.U),w[l]!=f&&o(w,l,d),y&&S[l]!=f&&(S[l]=f)};n.core=i,u.F=1,u.G=2,u.S=4,u.P=8,u.B=16,u.W=32,u.U=64,u.R=128,t.exports=u},8852:(t,e,r)=>{var n=r(6314)("match");t.exports=function(t){var e=/./;try{"/./"[t](e)}catch(r){try{return e[n]=!1,!"/./"[t](e)}catch(t){}}return!0}},4253:t=>{t.exports=function(t){try{return!!t()}catch(t){return!0}}},8082:(t,e,r)=>{"use strict";r(8269);var n=r(7234),i=r(7728),o=r(4253),s=r(1355),a=r(6314),c=r(1165),u=a("species"),l=!o((function(){var t=/./;return t.exec=function(){var t=[];return t.groups={a:"7"},t},"7"!=="".replace(t,"$<a>")})),h=function(){var t=/(?:)/,e=t.exec;t.exec=function(){return e.apply(this,arguments)};var r="ab".split(t);return 2===r.length&&"a"===r[0]&&"b"===r[1]}();t.exports=function(t,e,r){var f=a(t),d=!o((function(){var e={};return e[f]=function(){return 7},7!=""[t](e)})),p=d?!o((function(){var e=!1,r=/a/;return r.exec=function(){return e=!0,null},"split"===t&&(r.constructor={},r.constructor[u]=function(){return r}),r[f](""),!e})):void 0;if(!d||!p||"replace"===t&&!l||"split"===t&&!h){var g=/./[f],m=r(s,f,""[t],(function(t,e,r,n,i){return e.exec===c?d&&!i?{done:!0,value:g.call(e,r,n)}:{done:!0,value:t.call(r,e,n)}:{done:!1}})),y=m[0],v=m[1];n(String.prototype,t,y),i(RegExp.prototype,f,2==e?function(t,e){return v.call(t,this,e)}:function(t){return v.call(t,this)})}}},3218:(t,e,r)=>{"use strict";var n=r(7007);t.exports=function(){var t=n(this),e="";return t.global&&(e+="g"),t.ignoreCase&&(e+="i"),t.multiline&&(e+="m"),t.unicode&&(e+="u"),t.sticky&&(e+="y"),e}},3325:(t,e,r)=>{"use strict";var n=r(4302),i=r(5286),o=r(875),s=r(741),a=r(6314)("isConcatSpreadable");t.exports=function t(e,r,c,u,l,h,f,d){for(var p,g,m=l,y=0,v=!!f&&s(f,d,3);y<u;){if(y in c){if(p=v?v(c[y],y,r):c[y],g=!1,i(p)&&(g=void 0!==(g=p[a])?!!g:n(p)),g&&h>0)m=t(e,r,p,o(p.length),m,h-1)-1;else{if(m>=9007199254740991)throw TypeError();e[m]=p}m++}y++}return m}},3531:(t,e,r)=>{var n=r(741),i=r(8851),o=r(6555),s=r(7007),a=r(875),c=r(9002),u={},l={},h=t.exports=function(t,e,r,h,f){var d,p,g,m,y=f?function(){return t}:c(t),v=n(r,h,e?2:1),b=0;if("function"!=typeof y)throw TypeError(t+" is not iterable!");if(o(y)){for(d=a(t.length);d>b;b++)if((m=e?v(s(p=t[b])[0],p[1]):v(t[b]))===u||m===l)return m}else for(g=y.call(t);!(p=g.next()).done;)if((m=i(g,v,p.value,e))===u||m===l)return m};h.BREAK=u,h.RETURN=l},18:(t,e,r)=>{t.exports=r(3825)("native-function-to-string",Function.toString)},3816:t=>{var e=t.exports="undefined"!=typeof window&&window.Math==Math?window:"undefined"!=typeof self&&self.Math==Math?self:Function("return this")();"number"==typeof __g&&(__g=e)},9181:t=>{var e={}.hasOwnProperty;t.exports=function(t,r){return e.call(t,r)}},7728:(t,e,r)=>{var n=r(9275),i=r(681);t.exports=r(7057)?function(t,e,r){return n.f(t,e,i(1,r))}:function(t,e,r){return t[e]=r,t}},639:(t,e,r)=>{var n=r(3816).document;t.exports=n&&n.documentElement},1734:(t,e,r)=>{t.exports=!r(7057)&&!r(4253)((function(){return 7!=Object.defineProperty(r(2457)("div"),"a",{get:function(){return 7}}).a}))},266:(t,e,r)=>{var n=r(5286),i=r(7375).set;t.exports=function(t,e,r){var o,s=e.constructor;return s!==r&&"function"==typeof s&&(o=s.prototype)!==r.prototype&&n(o)&&i&&i(t,o),t}},7242:t=>{t.exports=function(t,e,r){var n=void 0===r;switch(e.length){case 0:return n?t():t.call(r);case 1:return n?t(e[0]):t.call(r,e[0]);case 2:return n?t(e[0],e[1]):t.call(r,e[0],e[1]);case 3:return n?t(e[0],e[1],e[2]):t.call(r,e[0],e[1],e[2]);case 4:return n?t(e[0],e[1],e[2],e[3]):t.call(r,e[0],e[1],e[2],e[3])}return t.apply(r,e)}},9797:(t,e,r)=>{var n=r(2032);t.exports=Object("z").propertyIsEnumerable(0)?Object:function(t){return"String"==n(t)?t.split(""):Object(t)}},6555:(t,e,r)=>{var n=r(2803),i=r(6314)("iterator"),o=Array.prototype;t.exports=function(t){return void 0!==t&&(n.Array===t||o[i]===t)}},4302:(t,e,r)=>{var n=r(2032);t.exports=Array.isArray||function(t){return"Array"==n(t)}},8367:(t,e,r)=>{var n=r(5286),i=Math.floor;t.exports=function(t){return!n(t)&&isFinite(t)&&i(t)===t}},5286:t=>{t.exports=function(t){return"object"==typeof t?null!==t:"function"==typeof t}},5364:(t,e,r)=>{var n=r(5286),i=r(2032),o=r(6314)("match");t.exports=function(t){var e;return n(t)&&(void 0!==(e=t[o])?!!e:"RegExp"==i(t))}},8851:(t,e,r)=>{var n=r(7007);t.exports=function(t,e,r,i){try{return i?e(n(r)[0],r[1]):e(r)}catch(e){var o=t.return;throw void 0!==o&&n(o.call(t)),e}}},9988:(t,e,r)=>{"use strict";var n=r(2503),i=r(681),o=r(2943),s={};r(7728)(s,r(6314)("iterator"),(function(){return this})),t.exports=function(t,e,r){t.prototype=n(s,{next:i(1,r)}),o(t,e+" Iterator")}},2923:(t,e,r)=>{"use strict";var n=r(4461),i=r(2985),o=r(7234),s=r(7728),a=r(2803),c=r(9988),u=r(2943),l=r(468),h=r(6314)("iterator"),f=!([].keys&&"next"in[].keys()),d="keys",p="values",g=function(){return this};t.exports=function(t,e,r,m,y,v,b){c(r,e,m);var w,S,x,_=function(t){if(!f&&t in T)return T[t];switch(t){case d:case p:return function(){return new r(this,t)}}return function(){return new r(this,t)}},A=e+" Iterator",E=y==p,C=!1,T=t.prototype,k=T[h]||T["@@iterator"]||y&&T[y],N=k||_(y),O=y?E?_("entries"):N:void 0,R="Array"==e&&T.entries||k;if(R&&(x=l(R.call(new t)))!==Object.prototype&&x.next&&(u(x,A,!0),n||"function"==typeof x[h]||s(x,h,g)),E&&k&&k.name!==p&&(C=!0,N=function(){return k.call(this)}),n&&!b||!f&&!C&&T[h]||s(T,h,N),a[e]=N,a[A]=g,y)if(w={values:E?N:_(p),keys:v?N:_(d),entries:O},b)for(S in w)S in T||o(T,S,w[S]);else i(i.P+i.F*(f||C),e,w);return w}},7462:(t,e,r)=>{var n=r(6314)("iterator"),i=!1;try{var o=[7][n]();o.return=function(){i=!0},Array.from(o,(function(){throw 2}))}catch(t){}t.exports=function(t,e){if(!e&&!i)return!1;var r=!1;try{var o=[7],s=o[n]();s.next=function(){return{done:r=!0}},o[n]=function(){return s},t(o)}catch(t){}return r}},5436:t=>{t.exports=function(t,e){return{value:e,done:!!t}}},2803:t=>{t.exports={}},4461:t=>{t.exports=!1},3086:t=>{var e=Math.expm1;t.exports=!e||e(10)>22025.465794806718||e(10)<22025.465794806718||-2e-17!=e(-2e-17)?function(t){return 0==(t=+t)?t:t>-1e-6&&t<1e-6?t+t*t/2:Math.exp(t)-1}:e},4934:(t,e,r)=>{var n=r(1801),i=Math.pow,o=i(2,-52),s=i(2,-23),a=i(2,127)*(2-s),c=i(2,-126);t.exports=Math.fround||function(t){var e,r,i=Math.abs(t),u=n(t);return i<c?u*(i/c/s+1/o-1/o)*c*s:(r=(e=(1+s/o)*i)-(e-i))>a||r!=r?u*(1/0):u*r}},6206:t=>{t.exports=Math.log1p||function(t){return(t=+t)>-1e-8&&t<1e-8?t-t*t/2:Math.log(1+t)}},1801:t=>{t.exports=Math.sign||function(t){return 0==(t=+t)||t!=t?t:t<0?-1:1}},4728:(t,e,r)=>{var n=r(3953)("meta"),i=r(5286),o=r(9181),s=r(9275).f,a=0,c=Object.isExtensible||function(){return!0},u=!r(4253)((function(){return c(Object.preventExtensions({}))})),l=function(t){s(t,n,{value:{i:"O"+ ++a,w:{}}})},h=t.exports={KEY:n,NEED:!1,fastKey:function(t,e){if(!i(t))return"symbol"==typeof t?t:("string"==typeof t?"S":"P")+t;if(!o(t,n)){if(!c(t))return"F";if(!e)return"E";l(t)}return t[n].i},getWeak:function(t,e){if(!o(t,n)){if(!c(t))return!0;if(!e)return!1;l(t)}return t[n].w},onFreeze:function(t){return u&&h.NEED&&c(t)&&!o(t,n)&&l(t),t}}},4351:(t,e,r)=>{var n=r(3816),i=r(4193).set,o=n.MutationObserver||n.WebKitMutationObserver,s=n.process,a=n.Promise,c="process"==r(2032)(s);t.exports=function(){var t,e,r,u=function(){var n,i;for(c&&(n=s.domain)&&n.exit();t;){i=t.fn,t=t.next;try{i()}catch(n){throw t?r():e=void 0,n}}e=void 0,n&&n.enter()};if(c)r=function(){s.nextTick(u)};else if(!o||n.navigator&&n.navigator.standalone)if(a&&a.resolve){var l=a.resolve(void 0);r=function(){l.then(u)}}else r=function(){i.call(n,u)};else{var h=!0,f=document.createTextNode("");new o(u).observe(f,{characterData:!0}),r=function(){f.data=h=!h}}return function(n){var i={fn:n,next:void 0};e&&(e.next=i),t||(t=i,r()),e=i}}},3499:(t,e,r)=>{"use strict";var n=r(4963);function i(t){var e,r;this.promise=new t((function(t,n){if(void 0!==e||void 0!==r)throw TypeError("Bad Promise constructor");e=t,r=n})),this.resolve=n(e),this.reject=n(r)}t.exports.f=function(t){return new i(t)}},5345:(t,e,r)=>{"use strict";var n=r(7057),i=r(7184),o=r(4548),s=r(4682),a=r(508),c=r(9797),u=Object.assign;t.exports=!u||r(4253)((function(){var t={},e={},r=Symbol(),n="abcdefghijklmnopqrst";return t[r]=7,n.split("").forEach((function(t){e[t]=t})),7!=u({},t)[r]||Object.keys(u({},e)).join("")!=n}))?function(t,e){for(var r=a(t),u=arguments.length,l=1,h=o.f,f=s.f;u>l;)for(var d,p=c(arguments[l++]),g=h?i(p).concat(h(p)):i(p),m=g.length,y=0;m>y;)d=g[y++],n&&!f.call(p,d)||(r[d]=p[d]);return r}:u},2503:(t,e,r)=>{var n=r(7007),i=r(5588),o=r(4430),s=r(9335)("IE_PROTO"),a=function(){},c="prototype",u=function(){var t,e=r(2457)("iframe"),n=o.length;for(e.style.display="none",r(639).appendChild(e),e.src="javascript:",(t=e.contentWindow.document).open(),t.write("<script>document.F=Object<\/script>"),t.close(),u=t.F;n--;)delete u[c][o[n]];return u()};t.exports=Object.create||function(t,e){var r;return null!==t?(a[c]=n(t),r=new a,a[c]=null,r[s]=t):r=u(),void 0===e?r:i(r,e)}},9275:(t,e,r)=>{var n=r(7007),i=r(1734),o=r(1689),s=Object.defineProperty;e.f=r(7057)?Object.defineProperty:function(t,e,r){if(n(t),e=o(e,!0),n(r),i)try{return s(t,e,r)}catch(t){}if("get"in r||"set"in r)throw TypeError("Accessors not supported!");return"value"in r&&(t[e]=r.value),t}},5588:(t,e,r)=>{var n=r(9275),i=r(7007),o=r(7184);t.exports=r(7057)?Object.defineProperties:function(t,e){i(t);for(var r,s=o(e),a=s.length,c=0;a>c;)n.f(t,r=s[c++],e[r]);return t}},8693:(t,e,r)=>{var n=r(4682),i=r(681),o=r(2110),s=r(1689),a=r(9181),c=r(1734),u=Object.getOwnPropertyDescriptor;e.f=r(7057)?u:function(t,e){if(t=o(t),e=s(e,!0),c)try{return u(t,e)}catch(t){}if(a(t,e))return i(!n.f.call(t,e),t[e])}},9327:(t,e,r)=>{var n=r(2110),i=r(616).f,o={}.toString,s="object"==typeof window&&window&&Object.getOwnPropertyNames?Object.getOwnPropertyNames(window):[];t.exports.f=function(t){return s&&"[object Window]"==o.call(t)?function(t){try{return i(t)}catch(t){return s.slice()}}(t):i(n(t))}},616:(t,e,r)=>{var n=r(189),i=r(4430).concat("length","prototype");e.f=Object.getOwnPropertyNames||function(t){return n(t,i)}},4548:(t,e)=>{e.f=Object.getOwnPropertySymbols},468:(t,e,r)=>{var n=r(9181),i=r(508),o=r(9335)("IE_PROTO"),s=Object.prototype;t.exports=Object.getPrototypeOf||function(t){return t=i(t),n(t,o)?t[o]:"function"==typeof t.constructor&&t instanceof t.constructor?t.constructor.prototype:t instanceof Object?s:null}},189:(t,e,r)=>{var n=r(9181),i=r(2110),o=r(9315)(!1),s=r(9335)("IE_PROTO");t.exports=function(t,e){var r,a=i(t),c=0,u=[];for(r in a)r!=s&&n(a,r)&&u.push(r);for(;e.length>c;)n(a,r=e[c++])&&(~o(u,r)||u.push(r));return u}},7184:(t,e,r)=>{var n=r(189),i=r(4430);t.exports=Object.keys||function(t){return n(t,i)}},4682:(t,e)=>{e.f={}.propertyIsEnumerable},3160:(t,e,r)=>{var n=r(2985),i=r(5645),o=r(4253);t.exports=function(t,e){var r=(i.Object||{})[t]||Object[t],s={};s[t]=e(r),n(n.S+n.F*o((function(){r(1)})),"Object",s)}},1131:(t,e,r)=>{var n=r(7057),i=r(7184),o=r(2110),s=r(4682).f;t.exports=function(t){return function(e){for(var r,a=o(e),c=i(a),u=c.length,l=0,h=[];u>l;)r=c[l++],n&&!s.call(a,r)||h.push(t?[r,a[r]]:a[r]);return h}}},7643:(t,e,r)=>{var n=r(616),i=r(4548),o=r(7007),s=r(3816).Reflect;t.exports=s&&s.ownKeys||function(t){var e=n.f(o(t)),r=i.f;return r?e.concat(r(t)):e}},7743:(t,e,r)=>{var n=r(3816).parseFloat,i=r(9599).trim;t.exports=1/n(r(4644)+"-0")!=-1/0?function(t){var e=i(String(t),3),r=n(e);return 0===r&&"-"==e.charAt(0)?-0:r}:n},5960:(t,e,r)=>{var n=r(3816).parseInt,i=r(9599).trim,o=r(4644),s=/^[-+]?0[xX]/;t.exports=8!==n(o+"08")||22!==n(o+"0x16")?function(t,e){var r=i(String(t),3);return n(r,e>>>0||(s.test(r)?16:10))}:n},188:t=>{t.exports=function(t){try{return{e:!1,v:t()}}catch(t){return{e:!0,v:t}}}},94:(t,e,r)=>{var n=r(7007),i=r(5286),o=r(3499);t.exports=function(t,e){if(n(t),i(e)&&e.constructor===t)return e;var r=o.f(t);return(0,r.resolve)(e),r.promise}},681:t=>{t.exports=function(t,e){return{enumerable:!(1&t),configurable:!(2&t),writable:!(4&t),value:e}}},4408:(t,e,r)=>{var n=r(7234);t.exports=function(t,e,r){for(var i in e)n(t,i,e[i],r);return t}},7234:(t,e,r)=>{var n=r(3816),i=r(7728),o=r(9181),s=r(3953)("src"),a=r(18),c="toString",u=(""+a).split(c);r(5645).inspectSource=function(t){return a.call(t)},(t.exports=function(t,e,r,a){var c="function"==typeof r;c&&(o(r,"name")||i(r,"name",e)),t[e]!==r&&(c&&(o(r,s)||i(r,s,t[e]?""+t[e]:u.join(String(e)))),t===n?t[e]=r:a?t[e]?t[e]=r:i(t,e,r):(delete t[e],i(t,e,r)))})(Function.prototype,c,(function(){return"function"==typeof this&&this[s]||a.call(this)}))},7787:(t,e,r)=>{"use strict";var n=r(1488),i=RegExp.prototype.exec;t.exports=function(t,e){var r=t.exec;if("function"==typeof r){var o=r.call(t,e);if("object"!=typeof o)throw new TypeError("RegExp exec method returned something other than an Object or null");return o}if("RegExp"!==n(t))throw new TypeError("RegExp#exec called on incompatible receiver");return i.call(t,e)}},1165:(t,e,r)=>{"use strict";var n,i,o=r(3218),s=RegExp.prototype.exec,a=String.prototype.replace,c=s,u="lastIndex",l=(n=/a/,i=/b*/g,s.call(n,"a"),s.call(i,"a"),0!==n[u]||0!==i[u]),h=void 0!==/()??/.exec("")[1];(l||h)&&(c=function(t){var e,r,n,i,c=this;return h&&(r=new RegExp("^"+c.source+"$(?!\\s)",o.call(c))),l&&(e=c[u]),n=s.call(c,t),l&&n&&(c[u]=c.global?n.index+n[0].length:e),h&&n&&n.length>1&&a.call(n[0],r,(function(){for(i=1;i<arguments.length-2;i++)void 0===arguments[i]&&(n[i]=void 0)})),n}),t.exports=c},7195:t=>{t.exports=Object.is||function(t,e){return t===e?0!==t||1/t==1/e:t!=t&&e!=e}},7375:(t,e,r)=>{var n=r(5286),i=r(7007),o=function(t,e){if(i(t),!n(e)&&null!==e)throw TypeError(e+": can't set as prototype!")};t.exports={set:Object.setPrototypeOf||("__proto__"in{}?function(t,e,n){try{(n=r(741)(Function.call,r(8693).f(Object.prototype,"__proto__").set,2))(t,[]),e=!(t instanceof Array)}catch(t){e=!0}return function(t,r){return o(t,r),e?t.__proto__=r:n(t,r),t}}({},!1):void 0),check:o}},2974:(t,e,r)=>{"use strict";var n=r(3816),i=r(9275),o=r(7057),s=r(6314)("species");t.exports=function(t){var e=n[t];o&&e&&!e[s]&&i.f(e,s,{configurable:!0,get:function(){return this}})}},2943:(t,e,r)=>{var n=r(9275).f,i=r(9181),o=r(6314)("toStringTag");t.exports=function(t,e,r){t&&!i(t=r?t:t.prototype,o)&&n(t,o,{configurable:!0,value:e})}},9335:(t,e,r)=>{var n=r(3825)("keys"),i=r(3953);t.exports=function(t){return n[t]||(n[t]=i(t))}},3825:(t,e,r)=>{var n=r(5645),i=r(3816),o="__core-js_shared__",s=i[o]||(i[o]={});(t.exports=function(t,e){return s[t]||(s[t]=void 0!==e?e:{})})("versions",[]).push({version:n.version,mode:r(4461)?"pure":"global",copyright:"© 2020 Denis Pushkarev (zloirock.ru)"})},8364:(t,e,r)=>{var n=r(7007),i=r(4963),o=r(6314)("species");t.exports=function(t,e){var r,s=n(t).constructor;return void 0===s||null==(r=n(s)[o])?e:i(r)}},7717:(t,e,r)=>{"use strict";var n=r(4253);t.exports=function(t,e){return!!t&&n((function(){e?t.call(null,(function(){}),1):t.call(null)}))}},4496:(t,e,r)=>{var n=r(1467),i=r(1355);t.exports=function(t){return function(e,r){var o,s,a=String(i(e)),c=n(r),u=a.length;return c<0||c>=u?t?"":void 0:(o=a.charCodeAt(c))<55296||o>56319||c+1===u||(s=a.charCodeAt(c+1))<56320||s>57343?t?a.charAt(c):o:t?a.slice(c,c+2):s-56320+(o-55296<<10)+65536}}},2094:(t,e,r)=>{var n=r(5364),i=r(1355);t.exports=function(t,e,r){if(n(e))throw TypeError("String#"+r+" doesn't accept regex!");return String(i(t))}},9395:(t,e,r)=>{var n=r(2985),i=r(4253),o=r(1355),s=/"/g,a=function(t,e,r,n){var i=String(o(t)),a="<"+e;return""!==r&&(a+=" "+r+'="'+String(n).replace(s,"&quot;")+'"'),a+">"+i+"</"+e+">"};t.exports=function(t,e){var r={};r[t]=e(a),n(n.P+n.F*i((function(){var e=""[t]('"');return e!==e.toLowerCase()||e.split('"').length>3})),"String",r)}},5442:(t,e,r)=>{var n=r(875),i=r(8595),o=r(1355);t.exports=function(t,e,r,s){var a=String(o(t)),c=a.length,u=void 0===r?" ":String(r),l=n(e);if(l<=c||""==u)return a;var h=l-c,f=i.call(u,Math.ceil(h/u.length));return f.length>h&&(f=f.slice(0,h)),s?f+a:a+f}},8595:(t,e,r)=>{"use strict";var n=r(1467),i=r(1355);t.exports=function(t){var e=String(i(this)),r="",o=n(t);if(o<0||o==1/0)throw RangeError("Count can't be negative");for(;o>0;(o>>>=1)&&(e+=e))1&o&&(r+=e);return r}},9599:(t,e,r)=>{var n=r(2985),i=r(1355),o=r(4253),s=r(4644),a="["+s+"]",c=RegExp("^"+a+a+"*"),u=RegExp(a+a+"*$"),l=function(t,e,r){var i={},a=o((function(){return!!s[t]()||"​"!="​"[t]()})),c=i[t]=a?e(h):s[t];r&&(i[r]=c),n(n.P+n.F*a,"String",i)},h=l.trim=function(t,e){return t=String(i(t)),1&e&&(t=t.replace(c,"")),2&e&&(t=t.replace(u,"")),t};t.exports=l},4644:t=>{t.exports="\t\n\v\f\r   ᠎             　\u2028\u2029\ufeff"},4193:(t,e,r)=>{var n,i,o,s=r(741),a=r(7242),c=r(639),u=r(2457),l=r(3816),h=l.process,f=l.setImmediate,d=l.clearImmediate,p=l.MessageChannel,g=l.Dispatch,m=0,y={},v="onreadystatechange",b=function(){var t=+this;if(y.hasOwnProperty(t)){var e=y[t];delete y[t],e()}},w=function(t){b.call(t.data)};f&&d||(f=function(t){for(var e=[],r=1;arguments.length>r;)e.push(arguments[r++]);return y[++m]=function(){a("function"==typeof t?t:Function(t),e)},n(m),m},d=function(t){delete y[t]},"process"==r(2032)(h)?n=function(t){h.nextTick(s(b,t,1))}:g&&g.now?n=function(t){g.now(s(b,t,1))}:p?(o=(i=new p).port2,i.port1.onmessage=w,n=s(o.postMessage,o,1)):l.addEventListener&&"function"==typeof postMessage&&!l.importScripts?(n=function(t){l.postMessage(t+"","*")},l.addEventListener("message",w,!1)):n=v in u("script")?function(t){c.appendChild(u("script"))[v]=function(){c.removeChild(this),b.call(t)}}:function(t){setTimeout(s(b,t,1),0)}),t.exports={set:f,clear:d}},2337:(t,e,r)=>{var n=r(1467),i=Math.max,o=Math.min;t.exports=function(t,e){return(t=n(t))<0?i(t+e,0):o(t,e)}},4843:(t,e,r)=>{var n=r(1467),i=r(875);t.exports=function(t){if(void 0===t)return 0;var e=n(t),r=i(e);if(e!==r)throw RangeError("Wrong length!");return r}},1467:t=>{var e=Math.ceil,r=Math.floor;t.exports=function(t){return isNaN(t=+t)?0:(t>0?r:e)(t)}},2110:(t,e,r)=>{var n=r(9797),i=r(1355);t.exports=function(t){return n(i(t))}},875:(t,e,r)=>{var n=r(1467),i=Math.min;t.exports=function(t){return t>0?i(n(t),9007199254740991):0}},508:(t,e,r)=>{var n=r(1355);t.exports=function(t){return Object(n(t))}},1689:(t,e,r)=>{var n=r(5286);t.exports=function(t,e){if(!n(t))return t;var r,i;if(e&&"function"==typeof(r=t.toString)&&!n(i=r.call(t)))return i;if("function"==typeof(r=t.valueOf)&&!n(i=r.call(t)))return i;if(!e&&"function"==typeof(r=t.toString)&&!n(i=r.call(t)))return i;throw TypeError("Can't convert object to primitive value")}},8440:(t,e,r)=>{"use strict";if(r(7057)){var n=r(4461),i=r(3816),o=r(4253),s=r(2985),a=r(9383),c=r(1125),u=r(741),l=r(3328),h=r(681),f=r(7728),d=r(4408),p=r(1467),g=r(875),m=r(4843),y=r(2337),v=r(1689),b=r(9181),w=r(1488),S=r(5286),x=r(508),_=r(6555),A=r(2503),E=r(468),C=r(616).f,T=r(9002),k=r(3953),N=r(6314),O=r(50),R=r(9315),L=r(8364),I=r(6997),P=r(2803),M=r(7462),D=r(2974),j=r(6852),F=r(5216),q=r(9275),B=r(8693),U=q.f,V=B.f,H=i.RangeError,G=i.TypeError,$=i.Uint8Array,W="ArrayBuffer",z="Shared"+W,K="BYTES_PER_ELEMENT",Y="prototype",Q=Array[Y],Z=c.ArrayBuffer,J=c.DataView,X=O(0),tt=O(2),et=O(3),rt=O(4),nt=O(5),it=O(6),ot=R(!0),st=R(!1),at=I.values,ct=I.keys,ut=I.entries,lt=Q.lastIndexOf,ht=Q.reduce,ft=Q.reduceRight,dt=Q.join,pt=Q.sort,gt=Q.slice,mt=Q.toString,yt=Q.toLocaleString,vt=N("iterator"),bt=N("toStringTag"),wt=k("typed_constructor"),St=k("def_constructor"),xt=a.CONSTR,_t=a.TYPED,At=a.VIEW,Et="Wrong length!",Ct=O(1,(function(t,e){return Rt(L(t,t[St]),e)})),Tt=o((function(){return 1===new $(new Uint16Array([1]).buffer)[0]})),kt=!!$&&!!$[Y].set&&o((function(){new $(1).set({})})),Nt=function(t,e){var r=p(t);if(r<0||r%e)throw H("Wrong offset!");return r},Ot=function(t){if(S(t)&&_t in t)return t;throw G(t+" is not a typed array!")},Rt=function(t,e){if(!S(t)||!(wt in t))throw G("It is not a typed array constructor!");return new t(e)},Lt=function(t,e){return It(L(t,t[St]),e)},It=function(t,e){for(var r=0,n=e.length,i=Rt(t,n);n>r;)i[r]=e[r++];return i},Pt=function(t,e,r){U(t,e,{get:function(){return this._d[r]}})},Mt=function(t){var e,r,n,i,o,s,a=x(t),c=arguments.length,l=c>1?arguments[1]:void 0,h=void 0!==l,f=T(a);if(null!=f&&!_(f)){for(s=f.call(a),n=[],e=0;!(o=s.next()).done;e++)n.push(o.value);a=n}for(h&&c>2&&(l=u(l,arguments[2],2)),e=0,r=g(a.length),i=Rt(this,r);r>e;e++)i[e]=h?l(a[e],e):a[e];return i},Dt=function(){for(var t=0,e=arguments.length,r=Rt(this,e);e>t;)r[t]=arguments[t++];return r},jt=!!$&&o((function(){yt.call(new $(1))})),Ft=function(){return yt.apply(jt?gt.call(Ot(this)):Ot(this),arguments)},qt={copyWithin:function(t,e){return F.call(Ot(this),t,e,arguments.length>2?arguments[2]:void 0)},every:function(t){return rt(Ot(this),t,arguments.length>1?arguments[1]:void 0)},fill:function(t){return j.apply(Ot(this),arguments)},filter:function(t){return Lt(this,tt(Ot(this),t,arguments.length>1?arguments[1]:void 0))},find:function(t){return nt(Ot(this),t,arguments.length>1?arguments[1]:void 0)},findIndex:function(t){return it(Ot(this),t,arguments.length>1?arguments[1]:void 0)},forEach:function(t){X(Ot(this),t,arguments.length>1?arguments[1]:void 0)},indexOf:function(t){return st(Ot(this),t,arguments.length>1?arguments[1]:void 0)},includes:function(t){return ot(Ot(this),t,arguments.length>1?arguments[1]:void 0)},join:function(t){return dt.apply(Ot(this),arguments)},lastIndexOf:function(t){return lt.apply(Ot(this),arguments)},map:function(t){return Ct(Ot(this),t,arguments.length>1?arguments[1]:void 0)},reduce:function(t){return ht.apply(Ot(this),arguments)},reduceRight:function(t){return ft.apply(Ot(this),arguments)},reverse:function(){for(var t,e=this,r=Ot(e).length,n=Math.floor(r/2),i=0;i<n;)t=e[i],e[i++]=e[--r],e[r]=t;return e},some:function(t){return et(Ot(this),t,arguments.length>1?arguments[1]:void 0)},sort:function(t){return pt.call(Ot(this),t)},subarray:function(t,e){var r=Ot(this),n=r.length,i=y(t,n);return new(L(r,r[St]))(r.buffer,r.byteOffset+i*r.BYTES_PER_ELEMENT,g((void 0===e?n:y(e,n))-i))}},Bt=function(t,e){return Lt(this,gt.call(Ot(this),t,e))},Ut=function(t){Ot(this);var e=Nt(arguments[1],1),r=this.length,n=x(t),i=g(n.length),o=0;if(i+e>r)throw H(Et);for(;o<i;)this[e+o]=n[o++]},Vt={entries:function(){return ut.call(Ot(this))},keys:function(){return ct.call(Ot(this))},values:function(){return at.call(Ot(this))}},Ht=function(t,e){return S(t)&&t[_t]&&"symbol"!=typeof e&&e in t&&String(+e)==String(e)},Gt=function(t,e){return Ht(t,e=v(e,!0))?h(2,t[e]):V(t,e)},$t=function(t,e,r){return!(Ht(t,e=v(e,!0))&&S(r)&&b(r,"value"))||b(r,"get")||b(r,"set")||r.configurable||b(r,"writable")&&!r.writable||b(r,"enumerable")&&!r.enumerable?U(t,e,r):(t[e]=r.value,t)};xt||(B.f=Gt,q.f=$t),s(s.S+s.F*!xt,"Object",{getOwnPropertyDescriptor:Gt,defineProperty:$t}),o((function(){mt.call({})}))&&(mt=yt=function(){return dt.call(this)});var Wt=d({},qt);d(Wt,Vt),f(Wt,vt,Vt.values),d(Wt,{slice:Bt,set:Ut,constructor:function(){},toString:mt,toLocaleString:Ft}),Pt(Wt,"buffer","b"),Pt(Wt,"byteOffset","o"),Pt(Wt,"byteLength","l"),Pt(Wt,"length","e"),U(Wt,bt,{get:function(){return this[_t]}}),t.exports=function(t,e,r,c){var u=t+((c=!!c)?"Clamped":"")+"Array",h="get"+t,d="set"+t,p=i[u],y=p||{},v=p&&E(p),b=!p||!a.ABV,x={},_=p&&p[Y],T=function(t,r){U(t,r,{get:function(){return function(t,r){var n=t._d;return n.v[h](r*e+n.o,Tt)}(this,r)},set:function(t){return function(t,r,n){var i=t._d;c&&(n=(n=Math.round(n))<0?0:n>255?255:255&n),i.v[d](r*e+i.o,n,Tt)}(this,r,t)},enumerable:!0})};b?(p=r((function(t,r,n,i){l(t,p,u,"_d");var o,s,a,c,h=0,d=0;if(S(r)){if(!(r instanceof Z||(c=w(r))==W||c==z))return _t in r?It(p,r):Mt.call(p,r);o=r,d=Nt(n,e);var y=r.byteLength;if(void 0===i){if(y%e)throw H(Et);if((s=y-d)<0)throw H(Et)}else if((s=g(i)*e)+d>y)throw H(Et);a=s/e}else a=m(r),o=new Z(s=a*e);for(f(t,"_d",{b:o,o:d,l:s,e:a,v:new J(o)});h<a;)T(t,h++)})),_=p[Y]=A(Wt),f(_,"constructor",p)):o((function(){p(1)}))&&o((function(){new p(-1)}))&&M((function(t){new p,new p(null),new p(1.5),new p(t)}),!0)||(p=r((function(t,r,n,i){var o;return l(t,p,u),S(r)?r instanceof Z||(o=w(r))==W||o==z?void 0!==i?new y(r,Nt(n,e),i):void 0!==n?new y(r,Nt(n,e)):new y(r):_t in r?It(p,r):Mt.call(p,r):new y(m(r))})),X(v!==Function.prototype?C(y).concat(C(v)):C(y),(function(t){t in p||f(p,t,y[t])})),p[Y]=_,n||(_.constructor=p));var k=_[vt],N=!!k&&("values"==k.name||null==k.name),O=Vt.values;f(p,wt,!0),f(_,_t,u),f(_,At,!0),f(_,St,p),(c?new p(1)[bt]==u:bt in _)||U(_,bt,{get:function(){return u}}),x[u]=p,s(s.G+s.W+s.F*(p!=y),x),s(s.S,u,{BYTES_PER_ELEMENT:e}),s(s.S+s.F*o((function(){y.of.call(p,1)})),u,{from:Mt,of:Dt}),K in _||f(_,K,e),s(s.P,u,qt),D(u),s(s.P+s.F*kt,u,{set:Ut}),s(s.P+s.F*!N,u,Vt),n||_.toString==mt||(_.toString=mt),s(s.P+s.F*o((function(){new p(1).slice()})),u,{slice:Bt}),s(s.P+s.F*(o((function(){return[1,2].toLocaleString()!=new p([1,2]).toLocaleString()}))||!o((function(){_.toLocaleString.call([1,2])}))),u,{toLocaleString:Ft}),P[u]=N?k:O,n||N||f(_,vt,O)}}else t.exports=function(){}},1125:(t,e,r)=>{"use strict";var n=r(3816),i=r(7057),o=r(4461),s=r(9383),a=r(7728),c=r(4408),u=r(4253),l=r(3328),h=r(1467),f=r(875),d=r(4843),p=r(616).f,g=r(9275).f,m=r(6852),y=r(2943),v="ArrayBuffer",b="DataView",w="prototype",S="Wrong index!",x=n[v],_=n[b],A=n.Math,E=n.RangeError,C=n.Infinity,T=x,k=A.abs,N=A.pow,O=A.floor,R=A.log,L=A.LN2,I="buffer",P="byteLength",M="byteOffset",D=i?"_b":I,j=i?"_l":P,F=i?"_o":M;function q(t,e,r){var n,i,o,s=new Array(r),a=8*r-e-1,c=(1<<a)-1,u=c>>1,l=23===e?N(2,-24)-N(2,-77):0,h=0,f=t<0||0===t&&1/t<0?1:0;for((t=k(t))!=t||t===C?(i=t!=t?1:0,n=c):(n=O(R(t)/L),t*(o=N(2,-n))<1&&(n--,o*=2),(t+=n+u>=1?l/o:l*N(2,1-u))*o>=2&&(n++,o/=2),n+u>=c?(i=0,n=c):n+u>=1?(i=(t*o-1)*N(2,e),n+=u):(i=t*N(2,u-1)*N(2,e),n=0));e>=8;s[h++]=255&i,i/=256,e-=8);for(n=n<<e|i,a+=e;a>0;s[h++]=255&n,n/=256,a-=8);return s[--h]|=128*f,s}function B(t,e,r){var n,i=8*r-e-1,o=(1<<i)-1,s=o>>1,a=i-7,c=r-1,u=t[c--],l=127&u;for(u>>=7;a>0;l=256*l+t[c],c--,a-=8);for(n=l&(1<<-a)-1,l>>=-a,a+=e;a>0;n=256*n+t[c],c--,a-=8);if(0===l)l=1-s;else{if(l===o)return n?NaN:u?-C:C;n+=N(2,e),l-=s}return(u?-1:1)*n*N(2,l-e)}function U(t){return t[3]<<24|t[2]<<16|t[1]<<8|t[0]}function V(t){return[255&t]}function H(t){return[255&t,t>>8&255]}function G(t){return[255&t,t>>8&255,t>>16&255,t>>24&255]}function $(t){return q(t,52,8)}function W(t){return q(t,23,4)}function z(t,e,r){g(t[w],e,{get:function(){return this[r]}})}function K(t,e,r,n){var i=d(+r);if(i+e>t[j])throw E(S);var o=t[D]._b,s=i+t[F],a=o.slice(s,s+e);return n?a:a.reverse()}function Y(t,e,r,n,i,o){var s=d(+r);if(s+e>t[j])throw E(S);for(var a=t[D]._b,c=s+t[F],u=n(+i),l=0;l<e;l++)a[c+l]=u[o?l:e-l-1]}if(s.ABV){if(!u((function(){x(1)}))||!u((function(){new x(-1)}))||u((function(){return new x,new x(1.5),new x(NaN),x.name!=v}))){for(var Q,Z=(x=function(t){return l(this,x),new T(d(t))})[w]=T[w],J=p(T),X=0;J.length>X;)(Q=J[X++])in x||a(x,Q,T[Q]);o||(Z.constructor=x)}var tt=new _(new x(2)),et=_[w].setInt8;tt.setInt8(0,2147483648),tt.setInt8(1,2147483649),!tt.getInt8(0)&&tt.getInt8(1)||c(_[w],{setInt8:function(t,e){et.call(this,t,e<<24>>24)},setUint8:function(t,e){et.call(this,t,e<<24>>24)}},!0)}else x=function(t){l(this,x,v);var e=d(t);this._b=m.call(new Array(e),0),this[j]=e},_=function(t,e,r){l(this,_,b),l(t,x,b);var n=t[j],i=h(e);if(i<0||i>n)throw E("Wrong offset!");if(i+(r=void 0===r?n-i:f(r))>n)throw E("Wrong length!");this[D]=t,this[F]=i,this[j]=r},i&&(z(x,P,"_l"),z(_,I,"_b"),z(_,P,"_l"),z(_,M,"_o")),c(_[w],{getInt8:function(t){return K(this,1,t)[0]<<24>>24},getUint8:function(t){return K(this,1,t)[0]},getInt16:function(t){var e=K(this,2,t,arguments[1]);return(e[1]<<8|e[0])<<16>>16},getUint16:function(t){var e=K(this,2,t,arguments[1]);return e[1]<<8|e[0]},getInt32:function(t){return U(K(this,4,t,arguments[1]))},getUint32:function(t){return U(K(this,4,t,arguments[1]))>>>0},getFloat32:function(t){return B(K(this,4,t,arguments[1]),23,4)},getFloat64:function(t){return B(K(this,8,t,arguments[1]),52,8)},setInt8:function(t,e){Y(this,1,t,V,e)},setUint8:function(t,e){Y(this,1,t,V,e)},setInt16:function(t,e){Y(this,2,t,H,e,arguments[2])},setUint16:function(t,e){Y(this,2,t,H,e,arguments[2])},setInt32:function(t,e){Y(this,4,t,G,e,arguments[2])},setUint32:function(t,e){Y(this,4,t,G,e,arguments[2])},setFloat32:function(t,e){Y(this,4,t,W,e,arguments[2])},setFloat64:function(t,e){Y(this,8,t,$,e,arguments[2])}});y(x,v),y(_,b),a(_[w],s.VIEW,!0),e[v]=x,e[b]=_},9383:(t,e,r)=>{for(var n,i=r(3816),o=r(7728),s=r(3953),a=s("typed_array"),c=s("view"),u=!(!i.ArrayBuffer||!i.DataView),l=u,h=0,f="Int8Array,Uint8Array,Uint8ClampedArray,Int16Array,Uint16Array,Int32Array,Uint32Array,Float32Array,Float64Array".split(",");h<9;)(n=i[f[h++]])?(o(n.prototype,a,!0),o(n.prototype,c,!0)):l=!1;t.exports={ABV:u,CONSTR:l,TYPED:a,VIEW:c}},3953:t=>{var e=0,r=Math.random();t.exports=function(t){return"Symbol(".concat(void 0===t?"":t,")_",(++e+r).toString(36))}},575:(t,e,r)=>{var n=r(3816).navigator;t.exports=n&&n.userAgent||""},1616:(t,e,r)=>{var n=r(5286);t.exports=function(t,e){if(!n(t)||t._t!==e)throw TypeError("Incompatible receiver, "+e+" required!");return t}},6074:(t,e,r)=>{var n=r(3816),i=r(5645),o=r(4461),s=r(8787),a=r(9275).f;t.exports=function(t){var e=i.Symbol||(i.Symbol=o?{}:n.Symbol||{});"_"==t.charAt(0)||t in e||a(e,t,{value:s.f(t)})}},8787:(t,e,r)=>{e.f=r(6314)},6314:(t,e,r)=>{var n=r(3825)("wks"),i=r(3953),o=r(3816).Symbol,s="function"==typeof o;(t.exports=function(t){return n[t]||(n[t]=s&&o[t]||(s?o:i)("Symbol."+t))}).store=n},9002:(t,e,r)=>{var n=r(1488),i=r(6314)("iterator"),o=r(2803);t.exports=r(5645).getIteratorMethod=function(t){if(null!=t)return t[i]||t["@@iterator"]||o[n(t)]}},2e3:(t,e,r)=>{var n=r(2985);n(n.P,"Array",{copyWithin:r(5216)}),r(7722)("copyWithin")},5745:(t,e,r)=>{"use strict";var n=r(2985),i=r(50)(4);n(n.P+n.F*!r(7717)([].every,!0),"Array",{every:function(t){return i(this,t,arguments[1])}})},8977:(t,e,r)=>{var n=r(2985);n(n.P,"Array",{fill:r(6852)}),r(7722)("fill")},8837:(t,e,r)=>{"use strict";var n=r(2985),i=r(50)(2);n(n.P+n.F*!r(7717)([].filter,!0),"Array",{filter:function(t){return i(this,t,arguments[1])}})},4899:(t,e,r)=>{"use strict";var n=r(2985),i=r(50)(6),o="findIndex",s=!0;o in[]&&Array(1)[o]((function(){s=!1})),n(n.P+n.F*s,"Array",{findIndex:function(t){return i(this,t,arguments.length>1?arguments[1]:void 0)}}),r(7722)(o)},2310:(t,e,r)=>{"use strict";var n=r(2985),i=r(50)(5),o="find",s=!0;o in[]&&Array(1)[o]((function(){s=!1})),n(n.P+n.F*s,"Array",{find:function(t){return i(this,t,arguments.length>1?arguments[1]:void 0)}}),r(7722)(o)},4336:(t,e,r)=>{"use strict";var n=r(2985),i=r(50)(0),o=r(7717)([].forEach,!0);n(n.P+n.F*!o,"Array",{forEach:function(t){return i(this,t,arguments[1])}})},522:(t,e,r)=>{"use strict";var n=r(741),i=r(2985),o=r(508),s=r(8851),a=r(6555),c=r(875),u=r(2811),l=r(9002);i(i.S+i.F*!r(7462)((function(t){Array.from(t)})),"Array",{from:function(t){var e,r,i,h,f=o(t),d="function"==typeof this?this:Array,p=arguments.length,g=p>1?arguments[1]:void 0,m=void 0!==g,y=0,v=l(f);if(m&&(g=n(g,p>2?arguments[2]:void 0,2)),null==v||d==Array&&a(v))for(r=new d(e=c(f.length));e>y;y++)u(r,y,m?g(f[y],y):f[y]);else for(h=v.call(f),r=new d;!(i=h.next()).done;y++)u(r,y,m?s(h,g,[i.value,y],!0):i.value);return r.length=y,r}})},3369:(t,e,r)=>{"use strict";var n=r(2985),i=r(9315)(!1),o=[].indexOf,s=!!o&&1/[1].indexOf(1,-0)<0;n(n.P+n.F*(s||!r(7717)(o)),"Array",{indexOf:function(t){return s?o.apply(this,arguments)||0:i(this,t,arguments[1])}})},774:(t,e,r)=>{var n=r(2985);n(n.S,"Array",{isArray:r(4302)})},6997:(t,e,r)=>{"use strict";var n=r(7722),i=r(5436),o=r(2803),s=r(2110);t.exports=r(2923)(Array,"Array",(function(t,e){this._t=s(t),this._i=0,this._k=e}),(function(){var t=this._t,e=this._k,r=this._i++;return!t||r>=t.length?(this._t=void 0,i(1)):i(0,"keys"==e?r:"values"==e?t[r]:[r,t[r]])}),"values"),o.Arguments=o.Array,n("keys"),n("values"),n("entries")},7842:(t,e,r)=>{"use strict";var n=r(2985),i=r(2110),o=[].join;n(n.P+n.F*(r(9797)!=Object||!r(7717)(o)),"Array",{join:function(t){return o.call(i(this),void 0===t?",":t)}})},9564:(t,e,r)=>{"use strict";var n=r(2985),i=r(2110),o=r(1467),s=r(875),a=[].lastIndexOf,c=!!a&&1/[1].lastIndexOf(1,-0)<0;n(n.P+n.F*(c||!r(7717)(a)),"Array",{lastIndexOf:function(t){if(c)return a.apply(this,arguments)||0;var e=i(this),r=s(e.length),n=r-1;for(arguments.length>1&&(n=Math.min(n,o(arguments[1]))),n<0&&(n=r+n);n>=0;n--)if(n in e&&e[n]===t)return n||0;return-1}})},1802:(t,e,r)=>{"use strict";var n=r(2985),i=r(50)(1);n(n.P+n.F*!r(7717)([].map,!0),"Array",{map:function(t){return i(this,t,arguments[1])}})},8295:(t,e,r)=>{"use strict";var n=r(2985),i=r(2811);n(n.S+n.F*r(4253)((function(){function t(){}return!(Array.of.call(t)instanceof t)})),"Array",{of:function(){for(var t=0,e=arguments.length,r=new("function"==typeof this?this:Array)(e);e>t;)i(r,t,arguments[t++]);return r.length=e,r}})},3750:(t,e,r)=>{"use strict";var n=r(2985),i=r(7628);n(n.P+n.F*!r(7717)([].reduceRight,!0),"Array",{reduceRight:function(t){return i(this,t,arguments.length,arguments[1],!0)}})},3057:(t,e,r)=>{"use strict";var n=r(2985),i=r(7628);n(n.P+n.F*!r(7717)([].reduce,!0),"Array",{reduce:function(t){return i(this,t,arguments.length,arguments[1],!1)}})},110:(t,e,r)=>{"use strict";var n=r(2985),i=r(639),o=r(2032),s=r(2337),a=r(875),c=[].slice;n(n.P+n.F*r(4253)((function(){i&&c.call(i)})),"Array",{slice:function(t,e){var r=a(this.length),n=o(this);if(e=void 0===e?r:e,"Array"==n)return c.call(this,t,e);for(var i=s(t,r),u=s(e,r),l=a(u-i),h=new Array(l),f=0;f<l;f++)h[f]="String"==n?this.charAt(i+f):this[i+f];return h}})},6773:(t,e,r)=>{"use strict";var n=r(2985),i=r(50)(3);n(n.P+n.F*!r(7717)([].some,!0),"Array",{some:function(t){return i(this,t,arguments[1])}})},75:(t,e,r)=>{"use strict";var n=r(2985),i=r(4963),o=r(508),s=r(4253),a=[].sort,c=[1,2,3];n(n.P+n.F*(s((function(){c.sort(void 0)}))||!s((function(){c.sort(null)}))||!r(7717)(a)),"Array",{sort:function(t){return void 0===t?a.call(o(this)):a.call(o(this),i(t))}})},1842:(t,e,r)=>{r(2974)("Array")},1822:(t,e,r)=>{var n=r(2985);n(n.S,"Date",{now:function(){return(new Date).getTime()}})},1031:(t,e,r)=>{var n=r(2985),i=r(3537);n(n.P+n.F*(Date.prototype.toISOString!==i),"Date",{toISOString:i})},9977:(t,e,r)=>{"use strict";var n=r(2985),i=r(508),o=r(1689);n(n.P+n.F*r(4253)((function(){return null!==new Date(NaN).toJSON()||1!==Date.prototype.toJSON.call({toISOString:function(){return 1}})})),"Date",{toJSON:function(t){var e=i(this),r=o(e);return"number"!=typeof r||isFinite(r)?e.toISOString():null}})},1560:(t,e,r)=>{var n=r(6314)("toPrimitive"),i=Date.prototype;n in i||r(7728)(i,n,r(870))},6331:(t,e,r)=>{var n=Date.prototype,i="Invalid Date",o="toString",s=n[o],a=n.getTime;new Date(NaN)+""!=i&&r(7234)(n,o,(function(){var t=a.call(this);return t==t?s.call(this):i}))},9730:(t,e,r)=>{var n=r(2985);n(n.P,"Function",{bind:r(4398)})},8377:(t,e,r)=>{"use strict";var n=r(5286),i=r(468),o=r(6314)("hasInstance"),s=Function.prototype;o in s||r(9275).f(s,o,{value:function(t){if("function"!=typeof this||!n(t))return!1;if(!n(this.prototype))return t instanceof this;for(;t=i(t);)if(this.prototype===t)return!0;return!1}})},6059:(t,e,r)=>{var n=r(9275).f,i=Function.prototype,o=/^\s*function ([^ (]*)/,s="name";s in i||r(7057)&&n(i,s,{configurable:!0,get:function(){try{return(""+this).match(o)[1]}catch(t){return""}}})},8416:(t,e,r)=>{"use strict";var n=r(9824),i=r(1616),o="Map";t.exports=r(5795)(o,(function(t){return function(){return t(this,arguments.length>0?arguments[0]:void 0)}}),{get:function(t){var e=n.getEntry(i(this,o),t);return e&&e.v},set:function(t,e){return n.def(i(this,o),0===t?0:t,e)}},n,!0)},6503:(t,e,r)=>{var n=r(2985),i=r(6206),o=Math.sqrt,s=Math.acosh;n(n.S+n.F*!(s&&710==Math.floor(s(Number.MAX_VALUE))&&s(1/0)==1/0),"Math",{acosh:function(t){return(t=+t)<1?NaN:t>94906265.62425156?Math.log(t)+Math.LN2:i(t-1+o(t-1)*o(t+1))}})},6786:(t,e,r)=>{var n=r(2985),i=Math.asinh;n(n.S+n.F*!(i&&1/i(0)>0),"Math",{asinh:function t(e){return isFinite(e=+e)&&0!=e?e<0?-t(-e):Math.log(e+Math.sqrt(e*e+1)):e}})},932:(t,e,r)=>{var n=r(2985),i=Math.atanh;n(n.S+n.F*!(i&&1/i(-0)<0),"Math",{atanh:function(t){return 0==(t=+t)?t:Math.log((1+t)/(1-t))/2}})},7526:(t,e,r)=>{var n=r(2985),i=r(1801);n(n.S,"Math",{cbrt:function(t){return i(t=+t)*Math.pow(Math.abs(t),1/3)}})},1591:(t,e,r)=>{var n=r(2985);n(n.S,"Math",{clz32:function(t){return(t>>>=0)?31-Math.floor(Math.log(t+.5)*Math.LOG2E):32}})},9073:(t,e,r)=>{var n=r(2985),i=Math.exp;n(n.S,"Math",{cosh:function(t){return(i(t=+t)+i(-t))/2}})},347:(t,e,r)=>{var n=r(2985),i=r(3086);n(n.S+n.F*(i!=Math.expm1),"Math",{expm1:i})},579:(t,e,r)=>{var n=r(2985);n(n.S,"Math",{fround:r(4934)})},4669:(t,e,r)=>{var n=r(2985),i=Math.abs;n(n.S,"Math",{hypot:function(t,e){for(var r,n,o=0,s=0,a=arguments.length,c=0;s<a;)c<(r=i(arguments[s++]))?(o=o*(n=c/r)*n+1,c=r):o+=r>0?(n=r/c)*n:r;return c===1/0?1/0:c*Math.sqrt(o)}})},7710:(t,e,r)=>{var n=r(2985),i=Math.imul;n(n.S+n.F*r(4253)((function(){return-5!=i(4294967295,5)||2!=i.length})),"Math",{imul:function(t,e){var r=65535,n=+t,i=+e,o=r&n,s=r&i;return 0|o*s+((r&n>>>16)*s+o*(r&i>>>16)<<16>>>0)}})},5789:(t,e,r)=>{var n=r(2985);n(n.S,"Math",{log10:function(t){return Math.log(t)*Math.LOG10E}})},3514:(t,e,r)=>{var n=r(2985);n(n.S,"Math",{log1p:r(6206)})},9978:(t,e,r)=>{var n=r(2985);n(n.S,"Math",{log2:function(t){return Math.log(t)/Math.LN2}})},8472:(t,e,r)=>{var n=r(2985);n(n.S,"Math",{sign:r(1801)})},6946:(t,e,r)=>{var n=r(2985),i=r(3086),o=Math.exp;n(n.S+n.F*r(4253)((function(){return-2e-17!=!Math.sinh(-2e-17)})),"Math",{sinh:function(t){return Math.abs(t=+t)<1?(i(t)-i(-t))/2:(o(t-1)-o(-t-1))*(Math.E/2)}})},5068:(t,e,r)=>{var n=r(2985),i=r(3086),o=Math.exp;n(n.S,"Math",{tanh:function(t){var e=i(t=+t),r=i(-t);return e==1/0?1:r==1/0?-1:(e-r)/(o(t)+o(-t))}})},413:(t,e,r)=>{var n=r(2985);n(n.S,"Math",{trunc:function(t){return(t>0?Math.floor:Math.ceil)(t)}})},1246:(t,e,r)=>{"use strict";var n=r(3816),i=r(9181),o=r(2032),s=r(266),a=r(1689),c=r(4253),u=r(616).f,l=r(8693).f,h=r(9275).f,f=r(9599).trim,d="Number",p=n[d],g=p,m=p.prototype,y=o(r(2503)(m))==d,v="trim"in String.prototype,b=function(t){var e=a(t,!1);if("string"==typeof e&&e.length>2){var r,n,i,o=(e=v?e.trim():f(e,3)).charCodeAt(0);if(43===o||45===o){if(88===(r=e.charCodeAt(2))||120===r)return NaN}else if(48===o){switch(e.charCodeAt(1)){case 66:case 98:n=2,i=49;break;case 79:case 111:n=8,i=55;break;default:return+e}for(var s,c=e.slice(2),u=0,l=c.length;u<l;u++)if((s=c.charCodeAt(u))<48||s>i)return NaN;return parseInt(c,n)}}return+e};if(!p(" 0o1")||!p("0b1")||p("+0x1")){p=function(t){var e=arguments.length<1?0:t,r=this;return r instanceof p&&(y?c((function(){m.valueOf.call(r)})):o(r)!=d)?s(new g(b(e)),r,p):b(e)};for(var w,S=r(7057)?u(g):"MAX_VALUE,MIN_VALUE,NaN,NEGATIVE_INFINITY,POSITIVE_INFINITY,EPSILON,isFinite,isInteger,isNaN,isSafeInteger,MAX_SAFE_INTEGER,MIN_SAFE_INTEGER,parseFloat,parseInt,isInteger".split(","),x=0;S.length>x;x++)i(g,w=S[x])&&!i(p,w)&&h(p,w,l(g,w));p.prototype=m,m.constructor=p,r(7234)(n,d,p)}},5972:(t,e,r)=>{var n=r(2985);n(n.S,"Number",{EPSILON:Math.pow(2,-52)})},3403:(t,e,r)=>{var n=r(2985),i=r(3816).isFinite;n(n.S,"Number",{isFinite:function(t){return"number"==typeof t&&i(t)}})},2516:(t,e,r)=>{var n=r(2985);n(n.S,"Number",{isInteger:r(8367)})},9371:(t,e,r)=>{var n=r(2985);n(n.S,"Number",{isNaN:function(t){return t!=t}})},6479:(t,e,r)=>{var n=r(2985),i=r(8367),o=Math.abs;n(n.S,"Number",{isSafeInteger:function(t){return i(t)&&o(t)<=9007199254740991}})},1736:(t,e,r)=>{var n=r(2985);n(n.S,"Number",{MAX_SAFE_INTEGER:9007199254740991})},1889:(t,e,r)=>{var n=r(2985);n(n.S,"Number",{MIN_SAFE_INTEGER:-9007199254740991})},5177:(t,e,r)=>{var n=r(2985),i=r(7743);n(n.S+n.F*(Number.parseFloat!=i),"Number",{parseFloat:i})},6943:(t,e,r)=>{var n=r(2985),i=r(5960);n(n.S+n.F*(Number.parseInt!=i),"Number",{parseInt:i})},726:(t,e,r)=>{"use strict";var n=r(2985),i=r(1467),o=r(3365),s=r(8595),a=1..toFixed,c=Math.floor,u=[0,0,0,0,0,0],l="Number.toFixed: incorrect invocation!",h="0",f=function(t,e){for(var r=-1,n=e;++r<6;)n+=t*u[r],u[r]=n%1e7,n=c(n/1e7)},d=function(t){for(var e=6,r=0;--e>=0;)r+=u[e],u[e]=c(r/t),r=r%t*1e7},p=function(){for(var t=6,e="";--t>=0;)if(""!==e||0===t||0!==u[t]){var r=String(u[t]);e=""===e?r:e+s.call(h,7-r.length)+r}return e},g=function(t,e,r){return 0===e?r:e%2==1?g(t,e-1,r*t):g(t*t,e/2,r)};n(n.P+n.F*(!!a&&("0.000"!==8e-5.toFixed(3)||"1"!==.9.toFixed(0)||"1.25"!==1.255.toFixed(2)||"1000000000000000128"!==(0xde0b6b3a7640080).toFixed(0))||!r(4253)((function(){a.call({})}))),"Number",{toFixed:function(t){var e,r,n,a,c=o(this,l),u=i(t),m="",y=h;if(u<0||u>20)throw RangeError(l);if(c!=c)return"NaN";if(c<=-1e21||c>=1e21)return String(c);if(c<0&&(m="-",c=-c),c>1e-21)if(e=function(t){for(var e=0,r=t;r>=4096;)e+=12,r/=4096;for(;r>=2;)e+=1,r/=2;return e}(c*g(2,69,1))-69,r=e<0?c*g(2,-e,1):c/g(2,e,1),r*=4503599627370496,(e=52-e)>0){for(f(0,r),n=u;n>=7;)f(1e7,0),n-=7;for(f(g(10,n,1),0),n=e-1;n>=23;)d(1<<23),n-=23;d(1<<n),f(1,1),d(2),y=p()}else f(0,r),f(1<<-e,0),y=p()+s.call(h,u);return y=u>0?m+((a=y.length)<=u?"0."+s.call(h,u-a)+y:y.slice(0,a-u)+"."+y.slice(a-u)):m+y}})},1901:(t,e,r)=>{"use strict";var n=r(2985),i=r(4253),o=r(3365),s=1..toPrecision;n(n.P+n.F*(i((function(){return"1"!==s.call(1,void 0)}))||!i((function(){s.call({})}))),"Number",{toPrecision:function(t){var e=o(this,"Number#toPrecision: incorrect invocation!");return void 0===t?s.call(e):s.call(e,t)}})},5115:(t,e,r)=>{var n=r(2985);n(n.S+n.F,"Object",{assign:r(5345)})},8132:(t,e,r)=>{var n=r(2985);n(n.S,"Object",{create:r(2503)})},7470:(t,e,r)=>{var n=r(2985);n(n.S+n.F*!r(7057),"Object",{defineProperties:r(5588)})},8388:(t,e,r)=>{var n=r(2985);n(n.S+n.F*!r(7057),"Object",{defineProperty:r(9275).f})},9375:(t,e,r)=>{var n=r(5286),i=r(4728).onFreeze;r(3160)("freeze",(function(t){return function(e){return t&&n(e)?t(i(e)):e}}))},4882:(t,e,r)=>{var n=r(2110),i=r(8693).f;r(3160)("getOwnPropertyDescriptor",(function(){return function(t,e){return i(n(t),e)}}))},9622:(t,e,r)=>{r(3160)("getOwnPropertyNames",(function(){return r(9327).f}))},1520:(t,e,r)=>{var n=r(508),i=r(468);r(3160)("getPrototypeOf",(function(){return function(t){return i(n(t))}}))},9892:(t,e,r)=>{var n=r(5286);r(3160)("isExtensible",(function(t){return function(e){return!!n(e)&&(!t||t(e))}}))},4157:(t,e,r)=>{var n=r(5286);r(3160)("isFrozen",(function(t){return function(e){return!n(e)||!!t&&t(e)}}))},5095:(t,e,r)=>{var n=r(5286);r(3160)("isSealed",(function(t){return function(e){return!n(e)||!!t&&t(e)}}))},9176:(t,e,r)=>{var n=r(2985);n(n.S,"Object",{is:r(7195)})},7476:(t,e,r)=>{var n=r(508),i=r(7184);r(3160)("keys",(function(){return function(t){return i(n(t))}}))},4672:(t,e,r)=>{var n=r(5286),i=r(4728).onFreeze;r(3160)("preventExtensions",(function(t){return function(e){return t&&n(e)?t(i(e)):e}}))},3533:(t,e,r)=>{var n=r(5286),i=r(4728).onFreeze;r(3160)("seal",(function(t){return function(e){return t&&n(e)?t(i(e)):e}}))},8838:(t,e,r)=>{var n=r(2985);n(n.S,"Object",{setPrototypeOf:r(7375).set})},6253:(t,e,r)=>{"use strict";var n=r(1488),i={};i[r(6314)("toStringTag")]="z",i+""!="[object z]"&&r(7234)(Object.prototype,"toString",(function(){return"[object "+n(this)+"]"}),!0)},4299:(t,e,r)=>{var n=r(2985),i=r(7743);n(n.G+n.F*(parseFloat!=i),{parseFloat:i})},1084:(t,e,r)=>{var n=r(2985),i=r(5960);n(n.G+n.F*(parseInt!=i),{parseInt:i})},851:(t,e,r)=>{"use strict";var n,i,o,s,a=r(4461),c=r(3816),u=r(741),l=r(1488),h=r(2985),f=r(5286),d=r(4963),p=r(3328),g=r(3531),m=r(8364),y=r(4193).set,v=r(4351)(),b=r(3499),w=r(188),S=r(575),x=r(94),_="Promise",A=c.TypeError,E=c.process,C=E&&E.versions,T=C&&C.v8||"",k=c[_],N="process"==l(E),O=function(){},R=i=b.f,L=!!function(){try{var t=k.resolve(1),e=(t.constructor={})[r(6314)("species")]=function(t){t(O,O)};return(N||"function"==typeof PromiseRejectionEvent)&&t.then(O)instanceof e&&0!==T.indexOf("6.6")&&-1===S.indexOf("Chrome/66")}catch(t){}}(),I=function(t){var e;return!(!f(t)||"function"!=typeof(e=t.then))&&e},P=function(t,e){if(!t._n){t._n=!0;var r=t._c;v((function(){for(var n=t._v,i=1==t._s,o=0,s=function(e){var r,o,s,a=i?e.ok:e.fail,c=e.resolve,u=e.reject,l=e.domain;try{a?(i||(2==t._h&&j(t),t._h=1),!0===a?r=n:(l&&l.enter(),r=a(n),l&&(l.exit(),s=!0)),r===e.promise?u(A("Promise-chain cycle")):(o=I(r))?o.call(r,c,u):c(r)):u(n)}catch(t){l&&!s&&l.exit(),u(t)}};r.length>o;)s(r[o++]);t._c=[],t._n=!1,e&&!t._h&&M(t)}))}},M=function(t){y.call(c,(function(){var e,r,n,i=t._v,o=D(t);if(o&&(e=w((function(){N?E.emit("unhandledRejection",i,t):(r=c.onunhandledrejection)?r({promise:t,reason:i}):(n=c.console)&&n.error&&n.error("Unhandled promise rejection",i)})),t._h=N||D(t)?2:1),t._a=void 0,o&&e.e)throw e.v}))},D=function(t){return 1!==t._h&&0===(t._a||t._c).length},j=function(t){y.call(c,(function(){var e;N?E.emit("rejectionHandled",t):(e=c.onrejectionhandled)&&e({promise:t,reason:t._v})}))},F=function(t){var e=this;e._d||(e._d=!0,(e=e._w||e)._v=t,e._s=2,e._a||(e._a=e._c.slice()),P(e,!0))},q=function(t){var e,r=this;if(!r._d){r._d=!0,r=r._w||r;try{if(r===t)throw A("Promise can't be resolved itself");(e=I(t))?v((function(){var n={_w:r,_d:!1};try{e.call(t,u(q,n,1),u(F,n,1))}catch(t){F.call(n,t)}})):(r._v=t,r._s=1,P(r,!1))}catch(t){F.call({_w:r,_d:!1},t)}}};L||(k=function(t){p(this,k,_,"_h"),d(t),n.call(this);try{t(u(q,this,1),u(F,this,1))}catch(t){F.call(this,t)}},(n=function(t){this._c=[],this._a=void 0,this._s=0,this._d=!1,this._v=void 0,this._h=0,this._n=!1}).prototype=r(4408)(k.prototype,{then:function(t,e){var r=R(m(this,k));return r.ok="function"!=typeof t||t,r.fail="function"==typeof e&&e,r.domain=N?E.domain:void 0,this._c.push(r),this._a&&this._a.push(r),this._s&&P(this,!1),r.promise},catch:function(t){return this.then(void 0,t)}}),o=function(){var t=new n;this.promise=t,this.resolve=u(q,t,1),this.reject=u(F,t,1)},b.f=R=function(t){return t===k||t===s?new o(t):i(t)}),h(h.G+h.W+h.F*!L,{Promise:k}),r(2943)(k,_),r(2974)(_),s=r(5645)[_],h(h.S+h.F*!L,_,{reject:function(t){var e=R(this);return(0,e.reject)(t),e.promise}}),h(h.S+h.F*(a||!L),_,{resolve:function(t){return x(a&&this===s?k:this,t)}}),h(h.S+h.F*!(L&&r(7462)((function(t){k.all(t).catch(O)}))),_,{all:function(t){var e=this,r=R(e),n=r.resolve,i=r.reject,o=w((function(){var r=[],o=0,s=1;g(t,!1,(function(t){var a=o++,c=!1;r.push(void 0),s++,e.resolve(t).then((function(t){c||(c=!0,r[a]=t,--s||n(r))}),i)})),--s||n(r)}));return o.e&&i(o.v),r.promise},race:function(t){var e=this,r=R(e),n=r.reject,i=w((function(){g(t,!1,(function(t){e.resolve(t).then(r.resolve,n)}))}));return i.e&&n(i.v),r.promise}})},1572:(t,e,r)=>{var n=r(2985),i=r(4963),o=r(7007),s=(r(3816).Reflect||{}).apply,a=Function.apply;n(n.S+n.F*!r(4253)((function(){s((function(){}))})),"Reflect",{apply:function(t,e,r){var n=i(t),c=o(r);return s?s(n,e,c):a.call(n,e,c)}})},2139:(t,e,r)=>{var n=r(2985),i=r(2503),o=r(4963),s=r(7007),a=r(5286),c=r(4253),u=r(4398),l=(r(3816).Reflect||{}).construct,h=c((function(){function t(){}return!(l((function(){}),[],t)instanceof t)})),f=!c((function(){l((function(){}))}));n(n.S+n.F*(h||f),"Reflect",{construct:function(t,e){o(t),s(e);var r=arguments.length<3?t:o(arguments[2]);if(f&&!h)return l(t,e,r);if(t==r){switch(e.length){case 0:return new t;case 1:return new t(e[0]);case 2:return new t(e[0],e[1]);case 3:return new t(e[0],e[1],e[2]);case 4:return new t(e[0],e[1],e[2],e[3])}var n=[null];return n.push.apply(n,e),new(u.apply(t,n))}var c=r.prototype,d=i(a(c)?c:Object.prototype),p=Function.apply.call(t,d,e);return a(p)?p:d}})},685:(t,e,r)=>{var n=r(9275),i=r(2985),o=r(7007),s=r(1689);i(i.S+i.F*r(4253)((function(){Reflect.defineProperty(n.f({},1,{value:1}),1,{value:2})})),"Reflect",{defineProperty:function(t,e,r){o(t),e=s(e,!0),o(r);try{return n.f(t,e,r),!0}catch(t){return!1}}})},5535:(t,e,r)=>{var n=r(2985),i=r(8693).f,o=r(7007);n(n.S,"Reflect",{deleteProperty:function(t,e){var r=i(o(t),e);return!(r&&!r.configurable)&&delete t[e]}})},7347:(t,e,r)=>{"use strict";var n=r(2985),i=r(7007),o=function(t){this._t=i(t),this._i=0;var e,r=this._k=[];for(e in t)r.push(e)};r(9988)(o,"Object",(function(){var t,e=this,r=e._k;do{if(e._i>=r.length)return{value:void 0,done:!0}}while(!((t=r[e._i++])in e._t));return{value:t,done:!1}})),n(n.S,"Reflect",{enumerate:function(t){return new o(t)}})},6633:(t,e,r)=>{var n=r(8693),i=r(2985),o=r(7007);i(i.S,"Reflect",{getOwnPropertyDescriptor:function(t,e){return n.f(o(t),e)}})},8989:(t,e,r)=>{var n=r(2985),i=r(468),o=r(7007);n(n.S,"Reflect",{getPrototypeOf:function(t){return i(o(t))}})},3049:(t,e,r)=>{var n=r(8693),i=r(468),o=r(9181),s=r(2985),a=r(5286),c=r(7007);s(s.S,"Reflect",{get:function t(e,r){var s,u,l=arguments.length<3?e:arguments[2];return c(e)===l?e[r]:(s=n.f(e,r))?o(s,"value")?s.value:void 0!==s.get?s.get.call(l):void 0:a(u=i(e))?t(u,r,l):void 0}})},8270:(t,e,r)=>{var n=r(2985);n(n.S,"Reflect",{has:function(t,e){return e in t}})},4510:(t,e,r)=>{var n=r(2985),i=r(7007),o=Object.isExtensible;n(n.S,"Reflect",{isExtensible:function(t){return i(t),!o||o(t)}})},3984:(t,e,r)=>{var n=r(2985);n(n.S,"Reflect",{ownKeys:r(7643)})},5769:(t,e,r)=>{var n=r(2985),i=r(7007),o=Object.preventExtensions;n(n.S,"Reflect",{preventExtensions:function(t){i(t);try{return o&&o(t),!0}catch(t){return!1}}})},6014:(t,e,r)=>{var n=r(2985),i=r(7375);i&&n(n.S,"Reflect",{setPrototypeOf:function(t,e){i.check(t,e);try{return i.set(t,e),!0}catch(t){return!1}}})},55:(t,e,r)=>{var n=r(9275),i=r(8693),o=r(468),s=r(9181),a=r(2985),c=r(681),u=r(7007),l=r(5286);a(a.S,"Reflect",{set:function t(e,r,a){var h,f,d=arguments.length<4?e:arguments[3],p=i.f(u(e),r);if(!p){if(l(f=o(e)))return t(f,r,a,d);p=c(0)}if(s(p,"value")){if(!1===p.writable||!l(d))return!1;if(h=i.f(d,r)){if(h.get||h.set||!1===h.writable)return!1;h.value=a,n.f(d,r,h)}else n.f(d,r,c(0,a));return!0}return void 0!==p.set&&(p.set.call(d,a),!0)}})},3946:(t,e,r)=>{var n=r(3816),i=r(266),o=r(9275).f,s=r(616).f,a=r(5364),c=r(3218),u=n.RegExp,l=u,h=u.prototype,f=/a/g,d=/a/g,p=new u(f)!==f;if(r(7057)&&(!p||r(4253)((function(){return d[r(6314)("match")]=!1,u(f)!=f||u(d)==d||"/a/i"!=u(f,"i")})))){u=function(t,e){var r=this instanceof u,n=a(t),o=void 0===e;return!r&&n&&t.constructor===u&&o?t:i(p?new l(n&&!o?t.source:t,e):l((n=t instanceof u)?t.source:t,n&&o?c.call(t):e),r?this:h,u)};for(var g=function(t){t in u||o(u,t,{configurable:!0,get:function(){return l[t]},set:function(e){l[t]=e}})},m=s(l),y=0;m.length>y;)g(m[y++]);h.constructor=u,u.prototype=h,r(7234)(n,"RegExp",u)}r(2974)("RegExp")},8269:(t,e,r)=>{"use strict";var n=r(1165);r(2985)({target:"RegExp",proto:!0,forced:n!==/./.exec},{exec:n})},6774:(t,e,r)=>{r(7057)&&"g"!=/./g.flags&&r(9275).f(RegExp.prototype,"flags",{configurable:!0,get:r(3218)})},1466:(t,e,r)=>{"use strict";var n=r(7007),i=r(875),o=r(6793),s=r(7787);r(8082)("match",1,(function(t,e,r,a){return[function(r){var n=t(this),i=null==r?void 0:r[e];return void 0!==i?i.call(r,n):new RegExp(r)[e](String(n))},function(t){var e=a(r,t,this);if(e.done)return e.value;var c=n(t),u=String(this);if(!c.global)return s(c,u);var l=c.unicode;c.lastIndex=0;for(var h,f=[],d=0;null!==(h=s(c,u));){var p=String(h[0]);f[d]=p,""===p&&(c.lastIndex=o(u,i(c.lastIndex),l)),d++}return 0===d?null:f}]}))},9357:(t,e,r)=>{"use strict";var n=r(7007),i=r(508),o=r(875),s=r(1467),a=r(6793),c=r(7787),u=Math.max,l=Math.min,h=Math.floor,f=/\$([$&`']|\d\d?|<[^>]*>)/g,d=/\$([$&`']|\d\d?)/g;r(8082)("replace",2,(function(t,e,r,p){return[function(n,i){var o=t(this),s=null==n?void 0:n[e];return void 0!==s?s.call(n,o,i):r.call(String(o),n,i)},function(t,e){var i=p(r,t,this,e);if(i.done)return i.value;var h=n(t),f=String(this),d="function"==typeof e;d||(e=String(e));var m=h.global;if(m){var y=h.unicode;h.lastIndex=0}for(var v=[];;){var b=c(h,f);if(null===b)break;if(v.push(b),!m)break;""===String(b[0])&&(h.lastIndex=a(f,o(h.lastIndex),y))}for(var w,S="",x=0,_=0;_<v.length;_++){b=v[_];for(var A=String(b[0]),E=u(l(s(b.index),f.length),0),C=[],T=1;T<b.length;T++)C.push(void 0===(w=b[T])?w:String(w));var k=b.groups;if(d){var N=[A].concat(C,E,f);void 0!==k&&N.push(k);var O=String(e.apply(void 0,N))}else O=g(A,f,E,C,k,e);E>=x&&(S+=f.slice(x,E)+O,x=E+A.length)}return S+f.slice(x)}];function g(t,e,n,o,s,a){var c=n+t.length,u=o.length,l=d;return void 0!==s&&(s=i(s),l=f),r.call(a,l,(function(r,i){var a;switch(i.charAt(0)){case"$":return"$";case"&":return t;case"`":return e.slice(0,n);case"'":return e.slice(c);case"<":a=s[i.slice(1,-1)];break;default:var l=+i;if(0===l)return r;if(l>u){var f=h(l/10);return 0===f?r:f<=u?void 0===o[f-1]?i.charAt(1):o[f-1]+i.charAt(1):r}a=o[l-1]}return void 0===a?"":a}))}}))},6142:(t,e,r)=>{"use strict";var n=r(7007),i=r(7195),o=r(7787);r(8082)("search",1,(function(t,e,r,s){return[function(r){var n=t(this),i=null==r?void 0:r[e];return void 0!==i?i.call(r,n):new RegExp(r)[e](String(n))},function(t){var e=s(r,t,this);if(e.done)return e.value;var a=n(t),c=String(this),u=a.lastIndex;i(u,0)||(a.lastIndex=0);var l=o(a,c);return i(a.lastIndex,u)||(a.lastIndex=u),null===l?-1:l.index}]}))},1876:(t,e,r)=>{"use strict";var n=r(5364),i=r(7007),o=r(8364),s=r(6793),a=r(875),c=r(7787),u=r(1165),l=r(4253),h=Math.min,f=[].push,d="split",p="length",g="lastIndex",m=4294967295,y=!l((function(){RegExp(m,"y")}));r(8082)("split",2,(function(t,e,r,l){var v;return v="c"=="abbc"[d](/(b)*/)[1]||4!="test"[d](/(?:)/,-1)[p]||2!="ab"[d](/(?:ab)*/)[p]||4!="."[d](/(.?)(.?)/)[p]||"."[d](/()()/)[p]>1||""[d](/.?/)[p]?function(t,e){var i=String(this);if(void 0===t&&0===e)return[];if(!n(t))return r.call(i,t,e);for(var o,s,a,c=[],l=(t.ignoreCase?"i":"")+(t.multiline?"m":"")+(t.unicode?"u":"")+(t.sticky?"y":""),h=0,d=void 0===e?m:e>>>0,y=new RegExp(t.source,l+"g");(o=u.call(y,i))&&!((s=y[g])>h&&(c.push(i.slice(h,o.index)),o[p]>1&&o.index<i[p]&&f.apply(c,o.slice(1)),a=o[0][p],h=s,c[p]>=d));)y[g]===o.index&&y[g]++;return h===i[p]?!a&&y.test("")||c.push(""):c.push(i.slice(h)),c[p]>d?c.slice(0,d):c}:"0"[d](void 0,0)[p]?function(t,e){return void 0===t&&0===e?[]:r.call(this,t,e)}:r,[function(r,n){var i=t(this),o=null==r?void 0:r[e];return void 0!==o?o.call(r,i,n):v.call(String(i),r,n)},function(t,e){var n=l(v,t,this,e,v!==r);if(n.done)return n.value;var u=i(t),f=String(this),d=o(u,RegExp),p=u.unicode,g=(u.ignoreCase?"i":"")+(u.multiline?"m":"")+(u.unicode?"u":"")+(y?"y":"g"),b=new d(y?u:"^(?:"+u.source+")",g),w=void 0===e?m:e>>>0;if(0===w)return[];if(0===f.length)return null===c(b,f)?[f]:[];for(var S=0,x=0,_=[];x<f.length;){b.lastIndex=y?x:0;var A,E=c(b,y?f:f.slice(x));if(null===E||(A=h(a(b.lastIndex+(y?0:x)),f.length))===S)x=s(f,x,p);else{if(_.push(f.slice(S,x)),_.length===w)return _;for(var C=1;C<=E.length-1;C++)if(_.push(E[C]),_.length===w)return _;x=S=A}}return _.push(f.slice(S)),_}]}))},6108:(t,e,r)=>{"use strict";r(6774);var n=r(7007),i=r(3218),o=r(7057),s="toString",a=/./[s],c=function(t){r(7234)(RegExp.prototype,s,t,!0)};r(4253)((function(){return"/a/b"!=a.call({source:"a",flags:"b"})}))?c((function(){var t=n(this);return"/".concat(t.source,"/","flags"in t?t.flags:!o&&t instanceof RegExp?i.call(t):void 0)})):a.name!=s&&c((function(){return a.call(this)}))},8184:(t,e,r)=>{"use strict";var n=r(9824),i=r(1616);t.exports=r(5795)("Set",(function(t){return function(){return t(this,arguments.length>0?arguments[0]:void 0)}}),{add:function(t){return n.def(i(this,"Set"),t=0===t?0:t,t)}},n)},856:(t,e,r)=>{"use strict";r(9395)("anchor",(function(t){return function(e){return t(this,"a","name",e)}}))},703:(t,e,r)=>{"use strict";r(9395)("big",(function(t){return function(){return t(this,"big","","")}}))},1539:(t,e,r)=>{"use strict";r(9395)("blink",(function(t){return function(){return t(this,"blink","","")}}))},5292:(t,e,r)=>{"use strict";r(9395)("bold",(function(t){return function(){return t(this,"b","","")}}))},9539:(t,e,r)=>{"use strict";var n=r(2985),i=r(4496)(!1);n(n.P,"String",{codePointAt:function(t){return i(this,t)}})},6620:(t,e,r)=>{"use strict";var n=r(2985),i=r(875),o=r(2094),s="endsWith",a=""[s];n(n.P+n.F*r(8852)(s),"String",{endsWith:function(t){var e=o(this,t,s),r=arguments.length>1?arguments[1]:void 0,n=i(e.length),c=void 0===r?n:Math.min(i(r),n),u=String(t);return a?a.call(e,u,c):e.slice(c-u.length,c)===u}})},6629:(t,e,r)=>{"use strict";r(9395)("fixed",(function(t){return function(){return t(this,"tt","","")}}))},3694:(t,e,r)=>{"use strict";r(9395)("fontcolor",(function(t){return function(e){return t(this,"font","color",e)}}))},7648:(t,e,r)=>{"use strict";r(9395)("fontsize",(function(t){return function(e){return t(this,"font","size",e)}}))},191:(t,e,r)=>{var n=r(2985),i=r(2337),o=String.fromCharCode,s=String.fromCodePoint;n(n.S+n.F*(!!s&&1!=s.length),"String",{fromCodePoint:function(t){for(var e,r=[],n=arguments.length,s=0;n>s;){if(e=+arguments[s++],i(e,1114111)!==e)throw RangeError(e+" is not a valid code point");r.push(e<65536?o(e):o(55296+((e-=65536)>>10),e%1024+56320))}return r.join("")}})},2850:(t,e,r)=>{"use strict";var n=r(2985),i=r(2094),o="includes";n(n.P+n.F*r(8852)(o),"String",{includes:function(t){return!!~i(this,t,o).indexOf(t,arguments.length>1?arguments[1]:void 0)}})},7795:(t,e,r)=>{"use strict";r(9395)("italics",(function(t){return function(){return t(this,"i","","")}}))},9115:(t,e,r)=>{"use strict";var n=r(4496)(!0);r(2923)(String,"String",(function(t){this._t=String(t),this._i=0}),(function(){var t,e=this._t,r=this._i;return r>=e.length?{value:void 0,done:!0}:(t=n(e,r),this._i+=t.length,{value:t,done:!1})}))},4531:(t,e,r)=>{"use strict";r(9395)("link",(function(t){return function(e){return t(this,"a","href",e)}}))},8306:(t,e,r)=>{var n=r(2985),i=r(2110),o=r(875);n(n.S,"String",{raw:function(t){for(var e=i(t.raw),r=o(e.length),n=arguments.length,s=[],a=0;r>a;)s.push(String(e[a++])),a<n&&s.push(String(arguments[a]));return s.join("")}})},823:(t,e,r)=>{var n=r(2985);n(n.P,"String",{repeat:r(8595)})},3605:(t,e,r)=>{"use strict";r(9395)("small",(function(t){return function(){return t(this,"small","","")}}))},7732:(t,e,r)=>{"use strict";var n=r(2985),i=r(875),o=r(2094),s="startsWith",a=""[s];n(n.P+n.F*r(8852)(s),"String",{startsWith:function(t){var e=o(this,t,s),r=i(Math.min(arguments.length>1?arguments[1]:void 0,e.length)),n=String(t);return a?a.call(e,n,r):e.slice(r,r+n.length)===n}})},6780:(t,e,r)=>{"use strict";r(9395)("strike",(function(t){return function(){return t(this,"strike","","")}}))},9937:(t,e,r)=>{"use strict";r(9395)("sub",(function(t){return function(){return t(this,"sub","","")}}))},511:(t,e,r)=>{"use strict";r(9395)("sup",(function(t){return function(){return t(this,"sup","","")}}))},4564:(t,e,r)=>{"use strict";r(9599)("trim",(function(t){return function(){return t(this,3)}}))},5767:(t,e,r)=>{"use strict";var n=r(3816),i=r(9181),o=r(7057),s=r(2985),a=r(7234),c=r(4728).KEY,u=r(4253),l=r(3825),h=r(2943),f=r(3953),d=r(6314),p=r(8787),g=r(6074),m=r(5541),y=r(4302),v=r(7007),b=r(5286),w=r(508),S=r(2110),x=r(1689),_=r(681),A=r(2503),E=r(9327),C=r(8693),T=r(4548),k=r(9275),N=r(7184),O=C.f,R=k.f,L=E.f,I=n.Symbol,P=n.JSON,M=P&&P.stringify,D="prototype",j=d("_hidden"),F=d("toPrimitive"),q={}.propertyIsEnumerable,B=l("symbol-registry"),U=l("symbols"),V=l("op-symbols"),H=Object[D],G="function"==typeof I&&!!T.f,$=n.QObject,W=!$||!$[D]||!$[D].findChild,z=o&&u((function(){return 7!=A(R({},"a",{get:function(){return R(this,"a",{value:7}).a}})).a}))?function(t,e,r){var n=O(H,e);n&&delete H[e],R(t,e,r),n&&t!==H&&R(H,e,n)}:R,K=function(t){var e=U[t]=A(I[D]);return e._k=t,e},Y=G&&"symbol"==typeof I.iterator?function(t){return"symbol"==typeof t}:function(t){return t instanceof I},Q=function(t,e,r){return t===H&&Q(V,e,r),v(t),e=x(e,!0),v(r),i(U,e)?(r.enumerable?(i(t,j)&&t[j][e]&&(t[j][e]=!1),r=A(r,{enumerable:_(0,!1)})):(i(t,j)||R(t,j,_(1,{})),t[j][e]=!0),z(t,e,r)):R(t,e,r)},Z=function(t,e){v(t);for(var r,n=m(e=S(e)),i=0,o=n.length;o>i;)Q(t,r=n[i++],e[r]);return t},J=function(t){var e=q.call(this,t=x(t,!0));return!(this===H&&i(U,t)&&!i(V,t))&&(!(e||!i(this,t)||!i(U,t)||i(this,j)&&this[j][t])||e)},X=function(t,e){if(t=S(t),e=x(e,!0),t!==H||!i(U,e)||i(V,e)){var r=O(t,e);return!r||!i(U,e)||i(t,j)&&t[j][e]||(r.enumerable=!0),r}},tt=function(t){for(var e,r=L(S(t)),n=[],o=0;r.length>o;)i(U,e=r[o++])||e==j||e==c||n.push(e);return n},et=function(t){for(var e,r=t===H,n=L(r?V:S(t)),o=[],s=0;n.length>s;)!i(U,e=n[s++])||r&&!i(H,e)||o.push(U[e]);return o};G||(a((I=function(){if(this instanceof I)throw TypeError("Symbol is not a constructor!");var t=f(arguments.length>0?arguments[0]:void 0),e=function(r){this===H&&e.call(V,r),i(this,j)&&i(this[j],t)&&(this[j][t]=!1),z(this,t,_(1,r))};return o&&W&&z(H,t,{configurable:!0,set:e}),K(t)})[D],"toString",(function(){return this._k})),C.f=X,k.f=Q,r(616).f=E.f=tt,r(4682).f=J,T.f=et,o&&!r(4461)&&a(H,"propertyIsEnumerable",J,!0),p.f=function(t){return K(d(t))}),s(s.G+s.W+s.F*!G,{Symbol:I});for(var rt="hasInstance,isConcatSpreadable,iterator,match,replace,search,species,split,toPrimitive,toStringTag,unscopables".split(","),nt=0;rt.length>nt;)d(rt[nt++]);for(var it=N(d.store),ot=0;it.length>ot;)g(it[ot++]);s(s.S+s.F*!G,"Symbol",{for:function(t){return i(B,t+="")?B[t]:B[t]=I(t)},keyFor:function(t){if(!Y(t))throw TypeError(t+" is not a symbol!");for(var e in B)if(B[e]===t)return e},useSetter:function(){W=!0},useSimple:function(){W=!1}}),s(s.S+s.F*!G,"Object",{create:function(t,e){return void 0===e?A(t):Z(A(t),e)},defineProperty:Q,defineProperties:Z,getOwnPropertyDescriptor:X,getOwnPropertyNames:tt,getOwnPropertySymbols:et});var st=u((function(){T.f(1)}));s(s.S+s.F*st,"Object",{getOwnPropertySymbols:function(t){return T.f(w(t))}}),P&&s(s.S+s.F*(!G||u((function(){var t=I();return"[null]"!=M([t])||"{}"!=M({a:t})||"{}"!=M(Object(t))}))),"JSON",{stringify:function(t){for(var e,r,n=[t],i=1;arguments.length>i;)n.push(arguments[i++]);if(r=e=n[1],(b(e)||void 0!==t)&&!Y(t))return y(e)||(e=function(t,e){if("function"==typeof r&&(e=r.call(this,t,e)),!Y(e))return e}),n[1]=e,M.apply(P,n)}}),I[D][F]||r(7728)(I[D],F,I[D].valueOf),h(I,"Symbol"),h(Math,"Math",!0),h(n.JSON,"JSON",!0)},142:(t,e,r)=>{"use strict";var n=r(2985),i=r(9383),o=r(1125),s=r(7007),a=r(2337),c=r(875),u=r(5286),l=r(3816).ArrayBuffer,h=r(8364),f=o.ArrayBuffer,d=o.DataView,p=i.ABV&&l.isView,g=f.prototype.slice,m=i.VIEW,y="ArrayBuffer";n(n.G+n.W+n.F*(l!==f),{ArrayBuffer:f}),n(n.S+n.F*!i.CONSTR,y,{isView:function(t){return p&&p(t)||u(t)&&m in t}}),n(n.P+n.U+n.F*r(4253)((function(){return!new f(2).slice(1,void 0).byteLength})),y,{slice:function(t,e){if(void 0!==g&&void 0===e)return g.call(s(this),t);for(var r=s(this).byteLength,n=a(t,r),i=a(void 0===e?r:e,r),o=new(h(this,f))(c(i-n)),u=new d(this),l=new d(o),p=0;n<i;)l.setUint8(p++,u.getUint8(n++));return o}}),r(2974)(y)},1786:(t,e,r)=>{var n=r(2985);n(n.G+n.W+n.F*!r(9383).ABV,{DataView:r(1125).DataView})},162:(t,e,r)=>{r(8440)("Float32",4,(function(t){return function(e,r,n){return t(this,e,r,n)}}))},3834:(t,e,r)=>{r(8440)("Float64",8,(function(t){return function(e,r,n){return t(this,e,r,n)}}))},4821:(t,e,r)=>{r(8440)("Int16",2,(function(t){return function(e,r,n){return t(this,e,r,n)}}))},1303:(t,e,r)=>{r(8440)("Int32",4,(function(t){return function(e,r,n){return t(this,e,r,n)}}))},5368:(t,e,r)=>{r(8440)("Int8",1,(function(t){return function(e,r,n){return t(this,e,r,n)}}))},9103:(t,e,r)=>{r(8440)("Uint16",2,(function(t){return function(e,r,n){return t(this,e,r,n)}}))},3318:(t,e,r)=>{r(8440)("Uint32",4,(function(t){return function(e,r,n){return t(this,e,r,n)}}))},6964:(t,e,r)=>{r(8440)("Uint8",1,(function(t){return function(e,r,n){return t(this,e,r,n)}}))},2152:(t,e,r)=>{r(8440)("Uint8",1,(function(t){return function(e,r,n){return t(this,e,r,n)}}),!0)},147:(t,e,r)=>{"use strict";var n,i=r(3816),o=r(50)(0),s=r(7234),a=r(4728),c=r(5345),u=r(3657),l=r(5286),h=r(1616),f=r(1616),d=!i.ActiveXObject&&"ActiveXObject"in i,p="WeakMap",g=a.getWeak,m=Object.isExtensible,y=u.ufstore,v=function(t){return function(){return t(this,arguments.length>0?arguments[0]:void 0)}},b={get:function(t){if(l(t)){var e=g(t);return!0===e?y(h(this,p)).get(t):e?e[this._i]:void 0}},set:function(t,e){return u.def(h(this,p),t,e)}},w=t.exports=r(5795)(p,v,b,u,!0,!0);f&&d&&(c((n=u.getConstructor(v,p)).prototype,b),a.NEED=!0,o(["delete","has","get","set"],(function(t){var e=w.prototype,r=e[t];s(e,t,(function(e,i){if(l(e)&&!m(e)){this._f||(this._f=new n);var o=this._f[t](e,i);return"set"==t?this:o}return r.call(this,e,i)}))})))},9192:(t,e,r)=>{"use strict";var n=r(3657),i=r(1616),o="WeakSet";r(5795)(o,(function(t){return function(){return t(this,arguments.length>0?arguments[0]:void 0)}}),{add:function(t){return n.def(i(this,o),t,!0)}},n,!1,!0)},1268:(t,e,r)=>{"use strict";var n=r(2985),i=r(3325),o=r(508),s=r(875),a=r(4963),c=r(6886);n(n.P,"Array",{flatMap:function(t){var e,r,n=o(this);return a(t),e=s(n.length),r=c(n,0),i(r,n,n,e,0,1,t,arguments[1]),r}}),r(7722)("flatMap")},2773:(t,e,r)=>{"use strict";var n=r(2985),i=r(9315)(!0);n(n.P,"Array",{includes:function(t){return i(this,t,arguments.length>1?arguments[1]:void 0)}}),r(7722)("includes")},3276:(t,e,r)=>{var n=r(2985),i=r(1131)(!0);n(n.S,"Object",{entries:function(t){return i(t)}})},8351:(t,e,r)=>{var n=r(2985),i=r(7643),o=r(2110),s=r(8693),a=r(2811);n(n.S,"Object",{getOwnPropertyDescriptors:function(t){for(var e,r,n=o(t),c=s.f,u=i(n),l={},h=0;u.length>h;)void 0!==(r=c(n,e=u[h++]))&&a(l,e,r);return l}})},6409:(t,e,r)=>{var n=r(2985),i=r(1131)(!1);n(n.S,"Object",{values:function(t){return i(t)}})},9865:(t,e,r)=>{"use strict";var n=r(2985),i=r(5645),o=r(3816),s=r(8364),a=r(94);n(n.P+n.R,"Promise",{finally:function(t){var e=s(this,i.Promise||o.Promise),r="function"==typeof t;return this.then(r?function(r){return a(e,t()).then((function(){return r}))}:t,r?function(r){return a(e,t()).then((function(){throw r}))}:t)}})},2770:(t,e,r)=>{"use strict";var n=r(2985),i=r(5442),o=r(575),s=/Version\/10\.\d+(\.\d+)?( Mobile\/\w+)? Safari\//.test(o);n(n.P+n.F*s,"String",{padEnd:function(t){return i(this,t,arguments.length>1?arguments[1]:void 0,!1)}})},1784:(t,e,r)=>{"use strict";var n=r(2985),i=r(5442),o=r(575),s=/Version\/10\.\d+(\.\d+)?( Mobile\/\w+)? Safari\//.test(o);n(n.P+n.F*s,"String",{padStart:function(t){return i(this,t,arguments.length>1?arguments[1]:void 0,!0)}})},5869:(t,e,r)=>{"use strict";r(9599)("trimLeft",(function(t){return function(){return t(this,1)}}),"trimStart")},4325:(t,e,r)=>{"use strict";r(9599)("trimRight",(function(t){return function(){return t(this,2)}}),"trimEnd")},9665:(t,e,r)=>{r(6074)("asyncIterator")},1181:(t,e,r)=>{for(var n=r(6997),i=r(7184),o=r(7234),s=r(3816),a=r(7728),c=r(2803),u=r(6314),l=u("iterator"),h=u("toStringTag"),f=c.Array,d={CSSRuleList:!0,CSSStyleDeclaration:!1,CSSValueList:!1,ClientRectList:!1,DOMRectList:!1,DOMStringList:!1,DOMTokenList:!0,DataTransferItemList:!1,FileList:!1,HTMLAllCollection:!1,HTMLCollection:!1,HTMLFormElement:!1,HTMLSelectElement:!1,MediaList:!0,MimeTypeArray:!1,NamedNodeMap:!1,NodeList:!0,PaintRequestList:!1,Plugin:!1,PluginArray:!1,SVGLengthList:!1,SVGNumberList:!1,SVGPathSegList:!1,SVGPointList:!1,SVGStringList:!1,SVGTransformList:!1,SourceBufferList:!1,StyleSheetList:!0,TextTrackCueList:!1,TextTrackList:!1,TouchList:!1},p=i(d),g=0;g<p.length;g++){var m,y=p[g],v=d[y],b=s[y],w=b&&b.prototype;if(w&&(w[l]||a(w,l,f),w[h]||a(w,h,y),c[y]=f,v))for(m in n)w[m]||o(w,m,n[m],!0)}},4633:(t,e,r)=>{var n=r(2985),i=r(4193);n(n.G+n.B,{setImmediate:i.set,clearImmediate:i.clear})},2564:(t,e,r)=>{var n=r(3816),i=r(2985),o=r(575),s=[].slice,a=/MSIE .\./.test(o),c=function(t){return function(e,r){var n=arguments.length>2,i=!!n&&s.call(arguments,2);return t(n?function(){("function"==typeof e?e:Function(e)).apply(this,i)}:e,r)}};i(i.G+i.B+i.F*a,{setTimeout:c(n.setTimeout),setInterval:c(n.setInterval)})},6337:(t,e,r)=>{r(2564),r(4633),r(1181),t.exports=r(5645)},5666:t=>{var e=function(t){"use strict";var e,r=Object.prototype,n=r.hasOwnProperty,i=Object.defineProperty||function(t,e,r){t[e]=r.value},o="function"==typeof Symbol?Symbol:{},s=o.iterator||"@@iterator",a=o.asyncIterator||"@@asyncIterator",c=o.toStringTag||"@@toStringTag";function u(t,e,r){return Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}),t[e]}try{u({},"")}catch(t){u=function(t,e,r){return t[e]=r}}function l(t,e,r,n){var o=e&&e.prototype instanceof y?e:y,s=Object.create(o.prototype),a=new O(n||[]);return i(s,"_invoke",{value:C(t,r,a)}),s}function h(t,e,r){try{return{type:"normal",arg:t.call(e,r)}}catch(t){return{type:"throw",arg:t}}}t.wrap=l;var f="suspendedStart",d="suspendedYield",p="executing",g="completed",m={};function y(){}function v(){}function b(){}var w={};u(w,s,(function(){return this}));var S=Object.getPrototypeOf,x=S&&S(S(R([])));x&&x!==r&&n.call(x,s)&&(w=x);var _=b.prototype=y.prototype=Object.create(w);function A(t){["next","throw","return"].forEach((function(e){u(t,e,(function(t){return this._invoke(e,t)}))}))}function E(t,e){function r(i,o,s,a){var c=h(t[i],t,o);if("throw"!==c.type){var u=c.arg,l=u.value;return l&&"object"==typeof l&&n.call(l,"__await")?e.resolve(l.__await).then((function(t){r("next",t,s,a)}),(function(t){r("throw",t,s,a)})):e.resolve(l).then((function(t){u.value=t,s(u)}),(function(t){return r("throw",t,s,a)}))}a(c.arg)}var o;i(this,"_invoke",{value:function(t,n){function i(){return new e((function(e,i){r(t,n,e,i)}))}return o=o?o.then(i,i):i()}})}function C(t,e,r){var n=f;return function(i,o){if(n===p)throw new Error("Generator is already running");if(n===g){if("throw"===i)throw o;return L()}for(r.method=i,r.arg=o;;){var s=r.delegate;if(s){var a=T(s,r);if(a){if(a===m)continue;return a}}if("next"===r.method)r.sent=r._sent=r.arg;else if("throw"===r.method){if(n===f)throw n=g,r.arg;r.dispatchException(r.arg)}else"return"===r.method&&r.abrupt("return",r.arg);n=p;var c=h(t,e,r);if("normal"===c.type){if(n=r.done?g:d,c.arg===m)continue;return{value:c.arg,done:r.done}}"throw"===c.type&&(n=g,r.method="throw",r.arg=c.arg)}}}function T(t,r){var n=r.method,i=t.iterator[n];if(i===e)return r.delegate=null,"throw"===n&&t.iterator.return&&(r.method="return",r.arg=e,T(t,r),"throw"===r.method)||"return"!==n&&(r.method="throw",r.arg=new TypeError("The iterator does not provide a '"+n+"' method")),m;var o=h(i,t.iterator,r.arg);if("throw"===o.type)return r.method="throw",r.arg=o.arg,r.delegate=null,m;var s=o.arg;return s?s.done?(r[t.resultName]=s.value,r.next=t.nextLoc,"return"!==r.method&&(r.method="next",r.arg=e),r.delegate=null,m):s:(r.method="throw",r.arg=new TypeError("iterator result is not an object"),r.delegate=null,m)}function k(t){var e={tryLoc:t[0]};1 in t&&(e.catchLoc=t[1]),2 in t&&(e.finallyLoc=t[2],e.afterLoc=t[3]),this.tryEntries.push(e)}function N(t){var e=t.completion||{};e.type="normal",delete e.arg,t.completion=e}function O(t){this.tryEntries=[{tryLoc:"root"}],t.forEach(k,this),this.reset(!0)}function R(t){if(t){var r=t[s];if(r)return r.call(t);if("function"==typeof t.next)return t;if(!isNaN(t.length)){var i=-1,o=function r(){for(;++i<t.length;)if(n.call(t,i))return r.value=t[i],r.done=!1,r;return r.value=e,r.done=!0,r};return o.next=o}}return{next:L}}function L(){return{value:e,done:!0}}return v.prototype=b,i(_,"constructor",{value:b,configurable:!0}),i(b,"constructor",{value:v,configurable:!0}),v.displayName=u(b,c,"GeneratorFunction"),t.isGeneratorFunction=function(t){var e="function"==typeof t&&t.constructor;return!!e&&(e===v||"GeneratorFunction"===(e.displayName||e.name))},t.mark=function(t){return Object.setPrototypeOf?Object.setPrototypeOf(t,b):(t.__proto__=b,u(t,c,"GeneratorFunction")),t.prototype=Object.create(_),t},t.awrap=function(t){return{__await:t}},A(E.prototype),u(E.prototype,a,(function(){return this})),t.AsyncIterator=E,t.async=function(e,r,n,i,o){void 0===o&&(o=Promise);var s=new E(l(e,r,n,i),o);return t.isGeneratorFunction(r)?s:s.next().then((function(t){return t.done?t.value:s.next()}))},A(_),u(_,c,"Generator"),u(_,s,(function(){return this})),u(_,"toString",(function(){return"[object Generator]"})),t.keys=function(t){var e=Object(t),r=[];for(var n in e)r.push(n);return r.reverse(),function t(){for(;r.length;){var n=r.pop();if(n in e)return t.value=n,t.done=!1,t}return t.done=!0,t}},t.values=R,O.prototype={constructor:O,reset:function(t){if(this.prev=0,this.next=0,this.sent=this._sent=e,this.done=!1,this.delegate=null,this.method="next",this.arg=e,this.tryEntries.forEach(N),!t)for(var r in this)"t"===r.charAt(0)&&n.call(this,r)&&!isNaN(+r.slice(1))&&(this[r]=e)},stop:function(){this.done=!0;var t=this.tryEntries[0].completion;if("throw"===t.type)throw t.arg;return this.rval},dispatchException:function(t){if(this.done)throw t;var r=this;function i(n,i){return a.type="throw",a.arg=t,r.next=n,i&&(r.method="next",r.arg=e),!!i}for(var o=this.tryEntries.length-1;o>=0;--o){var s=this.tryEntries[o],a=s.completion;if("root"===s.tryLoc)return i("end");if(s.tryLoc<=this.prev){var c=n.call(s,"catchLoc"),u=n.call(s,"finallyLoc");if(c&&u){if(this.prev<s.catchLoc)return i(s.catchLoc,!0);if(this.prev<s.finallyLoc)return i(s.finallyLoc)}else if(c){if(this.prev<s.catchLoc)return i(s.catchLoc,!0)}else{if(!u)throw new Error("try statement without catch or finally");if(this.prev<s.finallyLoc)return i(s.finallyLoc)}}}},abrupt:function(t,e){for(var r=this.tryEntries.length-1;r>=0;--r){var i=this.tryEntries[r];if(i.tryLoc<=this.prev&&n.call(i,"finallyLoc")&&this.prev<i.finallyLoc){var o=i;break}}o&&("break"===t||"continue"===t)&&o.tryLoc<=e&&e<=o.finallyLoc&&(o=null);var s=o?o.completion:{};return s.type=t,s.arg=e,o?(this.method="next",this.next=o.finallyLoc,m):this.complete(s)},complete:function(t,e){if("throw"===t.type)throw t.arg;return"break"===t.type||"continue"===t.type?this.next=t.arg:"return"===t.type?(this.rval=this.arg=t.arg,this.method="return",this.next="end"):"normal"===t.type&&e&&(this.next=e),m},finish:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var r=this.tryEntries[e];if(r.finallyLoc===t)return this.complete(r.completion,r.afterLoc),N(r),m}},catch:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var r=this.tryEntries[e];if(r.tryLoc===t){var n=r.completion;if("throw"===n.type){var i=n.arg;N(r)}return i}}throw new Error("illegal catch attempt")},delegateYield:function(t,r,n){return this.delegate={iterator:R(t),resultName:r,nextLoc:n},"next"===this.method&&(this.arg=e),m}},t}(t.exports);try{regeneratorRuntime=e}catch(t){"object"==typeof globalThis?globalThis.regeneratorRuntime=e:Function("r","regeneratorRuntime = r")(e)}},3150:function(t,e){var r,n,i;"undefined"!=typeof globalThis?globalThis:"undefined"!=typeof self&&self,n=[t],r=function(t){"use strict";if(!globalThis.chrome?.runtime?.id)throw new Error("This script should only be loaded in a browser extension.");if(void 0===globalThis.browser||Object.getPrototypeOf(globalThis.browser)!==Object.prototype){const e="The message port closed before a response was received.",r=t=>{const r={alarms:{clear:{minArgs:0,maxArgs:1},clearAll:{minArgs:0,maxArgs:0},get:{minArgs:0,maxArgs:1},getAll:{minArgs:0,maxArgs:0}},bookmarks:{create:{minArgs:1,maxArgs:1},get:{minArgs:1,maxArgs:1},getChildren:{minArgs:1,maxArgs:1},getRecent:{minArgs:1,maxArgs:1},getSubTree:{minArgs:1,maxArgs:1},getTree:{minArgs:0,maxArgs:0},move:{minArgs:2,maxArgs:2},remove:{minArgs:1,maxArgs:1},removeTree:{minArgs:1,maxArgs:1},search:{minArgs:1,maxArgs:1},update:{minArgs:2,maxArgs:2}},browserAction:{disable:{minArgs:0,maxArgs:1,fallbackToNoCallback:!0},enable:{minArgs:0,maxArgs:1,fallbackToNoCallback:!0},getBadgeBackgroundColor:{minArgs:1,maxArgs:1},getBadgeText:{minArgs:1,maxArgs:1},getPopup:{minArgs:1,maxArgs:1},getTitle:{minArgs:1,maxArgs:1},openPopup:{minArgs:0,maxArgs:0},setBadgeBackgroundColor:{minArgs:1,maxArgs:1,fallbackToNoCallback:!0},setBadgeText:{minArgs:1,maxArgs:1,fallbackToNoCallback:!0},setIcon:{minArgs:1,maxArgs:1},setPopup:{minArgs:1,maxArgs:1,fallbackToNoCallback:!0},setTitle:{minArgs:1,maxArgs:1,fallbackToNoCallback:!0}},browsingData:{remove:{minArgs:2,maxArgs:2},removeCache:{minArgs:1,maxArgs:1},removeCookies:{minArgs:1,maxArgs:1},removeDownloads:{minArgs:1,maxArgs:1},removeFormData:{minArgs:1,maxArgs:1},removeHistory:{minArgs:1,maxArgs:1},removeLocalStorage:{minArgs:1,maxArgs:1},removePasswords:{minArgs:1,maxArgs:1},removePluginData:{minArgs:1,maxArgs:1},settings:{minArgs:0,maxArgs:0}},commands:{getAll:{minArgs:0,maxArgs:0}},contextMenus:{remove:{minArgs:1,maxArgs:1},removeAll:{minArgs:0,maxArgs:0},update:{minArgs:2,maxArgs:2}},cookies:{get:{minArgs:1,maxArgs:1},getAll:{minArgs:1,maxArgs:1},getAllCookieStores:{minArgs:0,maxArgs:0},remove:{minArgs:1,maxArgs:1},set:{minArgs:1,maxArgs:1}},devtools:{inspectedWindow:{eval:{minArgs:1,maxArgs:2,singleCallbackArg:!1}},panels:{create:{minArgs:3,maxArgs:3,singleCallbackArg:!0},elements:{createSidebarPane:{minArgs:1,maxArgs:1}}}},downloads:{cancel:{minArgs:1,maxArgs:1},download:{minArgs:1,maxArgs:1},erase:{minArgs:1,maxArgs:1},getFileIcon:{minArgs:1,maxArgs:2},open:{minArgs:1,maxArgs:1,fallbackToNoCallback:!0},pause:{minArgs:1,maxArgs:1},removeFile:{minArgs:1,maxArgs:1},resume:{minArgs:1,maxArgs:1},search:{minArgs:1,maxArgs:1},show:{minArgs:1,maxArgs:1,fallbackToNoCallback:!0}},extension:{isAllowedFileSchemeAccess:{minArgs:0,maxArgs:0},isAllowedIncognitoAccess:{minArgs:0,maxArgs:0}},history:{addUrl:{minArgs:1,maxArgs:1},deleteAll:{minArgs:0,maxArgs:0},deleteRange:{minArgs:1,maxArgs:1},deleteUrl:{minArgs:1,maxArgs:1},getVisits:{minArgs:1,maxArgs:1},search:{minArgs:1,maxArgs:1}},i18n:{detectLanguage:{minArgs:1,maxArgs:1},getAcceptLanguages:{minArgs:0,maxArgs:0}},identity:{launchWebAuthFlow:{minArgs:1,maxArgs:1}},idle:{queryState:{minArgs:1,maxArgs:1}},management:{get:{minArgs:1,maxArgs:1},getAll:{minArgs:0,maxArgs:0},getSelf:{minArgs:0,maxArgs:0},setEnabled:{minArgs:2,maxArgs:2},uninstallSelf:{minArgs:0,maxArgs:1}},notifications:{clear:{minArgs:1,maxArgs:1},create:{minArgs:1,maxArgs:2},getAll:{minArgs:0,maxArgs:0},getPermissionLevel:{minArgs:0,maxArgs:0},update:{minArgs:2,maxArgs:2}},pageAction:{getPopup:{minArgs:1,maxArgs:1},getTitle:{minArgs:1,maxArgs:1},hide:{minArgs:1,maxArgs:1,fallbackToNoCallback:!0},setIcon:{minArgs:1,maxArgs:1},setPopup:{minArgs:1,maxArgs:1,fallbackToNoCallback:!0},setTitle:{minArgs:1,maxArgs:1,fallbackToNoCallback:!0},show:{minArgs:1,maxArgs:1,fallbackToNoCallback:!0}},permissions:{contains:{minArgs:1,maxArgs:1},getAll:{minArgs:0,maxArgs:0},remove:{minArgs:1,maxArgs:1},request:{minArgs:1,maxArgs:1}},runtime:{getBackgroundPage:{minArgs:0,maxArgs:0},getPlatformInfo:{minArgs:0,maxArgs:0},openOptionsPage:{minArgs:0,maxArgs:0},requestUpdateCheck:{minArgs:0,maxArgs:0},sendMessage:{minArgs:1,maxArgs:3},sendNativeMessage:{minArgs:2,maxArgs:2},setUninstallURL:{minArgs:1,maxArgs:1}},sessions:{getDevices:{minArgs:0,maxArgs:1},getRecentlyClosed:{minArgs:0,maxArgs:1},restore:{minArgs:0,maxArgs:1}},storage:{local:{clear:{minArgs:0,maxArgs:0},get:{minArgs:0,maxArgs:1},getBytesInUse:{minArgs:0,maxArgs:1},remove:{minArgs:1,maxArgs:1},set:{minArgs:1,maxArgs:1}},managed:{get:{minArgs:0,maxArgs:1},getBytesInUse:{minArgs:0,maxArgs:1}},sync:{clear:{minArgs:0,maxArgs:0},get:{minArgs:0,maxArgs:1},getBytesInUse:{minArgs:0,maxArgs:1},remove:{minArgs:1,maxArgs:1},set:{minArgs:1,maxArgs:1}}},tabs:{captureVisibleTab:{minArgs:0,maxArgs:2},create:{minArgs:1,maxArgs:1},detectLanguage:{minArgs:0,maxArgs:1},discard:{minArgs:0,maxArgs:1},duplicate:{minArgs:1,maxArgs:1},executeScript:{minArgs:1,maxArgs:2},get:{minArgs:1,maxArgs:1},getCurrent:{minArgs:0,maxArgs:0},getZoom:{minArgs:0,maxArgs:1},getZoomSettings:{minArgs:0,maxArgs:1},goBack:{minArgs:0,maxArgs:1},goForward:{minArgs:0,maxArgs:1},highlight:{minArgs:1,maxArgs:1},insertCSS:{minArgs:1,maxArgs:2},move:{minArgs:2,maxArgs:2},query:{minArgs:1,maxArgs:1},reload:{minArgs:0,maxArgs:2},remove:{minArgs:1,maxArgs:1},removeCSS:{minArgs:1,maxArgs:2},sendMessage:{minArgs:2,maxArgs:3},setZoom:{minArgs:1,maxArgs:2},setZoomSettings:{minArgs:1,maxArgs:2},update:{minArgs:1,maxArgs:2}},topSites:{get:{minArgs:0,maxArgs:0}},webNavigation:{getAllFrames:{minArgs:1,maxArgs:1},getFrame:{minArgs:1,maxArgs:1}},webRequest:{handlerBehaviorChanged:{minArgs:0,maxArgs:0}},windows:{create:{minArgs:0,maxArgs:1},get:{minArgs:1,maxArgs:2},getAll:{minArgs:0,maxArgs:1},getCurrent:{minArgs:0,maxArgs:1},getLastFocused:{minArgs:0,maxArgs:1},remove:{minArgs:1,maxArgs:1},update:{minArgs:2,maxArgs:2}}};if(0===Object.keys(r).length)throw new Error("api-metadata.json has not been included in browser-polyfill");class n extends WeakMap{constructor(t,e=void 0){super(e),this.createItem=t}get(t){return this.has(t)||this.set(t,this.createItem(t)),super.get(t)}}const i=t=>t&&"object"==typeof t&&"function"==typeof t.then,o=(e,r)=>(...n)=>{t.runtime.lastError?e.reject(new Error(t.runtime.lastError.message)):r.singleCallbackArg||n.length<=1&&!1!==r.singleCallbackArg?e.resolve(n[0]):e.resolve(n)},s=t=>1==t?"argument":"arguments",a=(t,e)=>function(r,...n){if(n.length<e.minArgs)throw new Error(`Expected at least ${e.minArgs} ${s(e.minArgs)} for ${t}(), got ${n.length}`);if(n.length>e.maxArgs)throw new Error(`Expected at most ${e.maxArgs} ${s(e.maxArgs)} for ${t}(), got ${n.length}`);return new Promise(((i,s)=>{if(e.fallbackToNoCallback)try{r[t](...n,o({resolve:i,reject:s},e))}catch(o){console.warn(`${t} API method doesn't seem to support the callback parameter, falling back to call it without a callback: `,o),r[t](...n),e.fallbackToNoCallback=!1,e.noCallback=!0,i()}else e.noCallback?(r[t](...n),i()):r[t](...n,o({resolve:i,reject:s},e))}))},c=(t,e,r)=>new Proxy(e,{apply:(e,n,i)=>r.call(n,t,...i)});let u=Function.call.bind(Object.prototype.hasOwnProperty);const l=(t,e={},r={})=>{let n=Object.create(null),i={has:(e,r)=>r in t||r in n,get(i,o,s){if(o in n)return n[o];if(!(o in t))return;let h=t[o];if("function"==typeof h)if("function"==typeof e[o])h=c(t,t[o],e[o]);else if(u(r,o)){let e=a(o,r[o]);h=c(t,t[o],e)}else h=h.bind(t);else if("object"==typeof h&&null!==h&&(u(e,o)||u(r,o)))h=l(h,e[o],r[o]);else{if(!u(r,"*"))return Object.defineProperty(n,o,{configurable:!0,enumerable:!0,get:()=>t[o],set(e){t[o]=e}}),h;h=l(h,e[o],r["*"])}return n[o]=h,h},set:(e,r,i,o)=>(r in n?n[r]=i:t[r]=i,!0),defineProperty:(t,e,r)=>Reflect.defineProperty(n,e,r),deleteProperty:(t,e)=>Reflect.deleteProperty(n,e)},o=Object.create(t);return new Proxy(o,i)},h=t=>({addListener(e,r,...n){e.addListener(t.get(r),...n)},hasListener:(e,r)=>e.hasListener(t.get(r)),removeListener(e,r){e.removeListener(t.get(r))}}),f=new n((t=>"function"!=typeof t?t:function(e){const r=l(e,{},{getContent:{minArgs:0,maxArgs:0}});t(r)})),d=new n((t=>"function"!=typeof t?t:function(e,r,n){let o,s,a=!1,c=new Promise((t=>{o=function(e){a=!0,t(e)}}));try{s=t(e,r,o)}catch(t){s=Promise.reject(t)}const u=!0!==s&&i(s);if(!0!==s&&!u&&!a)return!1;const l=t=>{t.then((t=>{n(t)}),(t=>{let e;e=t&&(t instanceof Error||"string"==typeof t.message)?t.message:"An unexpected error occurred",n({__mozWebExtensionPolyfillReject__:!0,message:e})})).catch((t=>{console.error("Failed to send onMessage rejected reply",t)}))};return l(u?s:c),!0})),p=({reject:r,resolve:n},i)=>{t.runtime.lastError?t.runtime.lastError.message===e?n():r(new Error(t.runtime.lastError.message)):i&&i.__mozWebExtensionPolyfillReject__?r(new Error(i.message)):n(i)},g=(t,e,r,...n)=>{if(n.length<e.minArgs)throw new Error(`Expected at least ${e.minArgs} ${s(e.minArgs)} for ${t}(), got ${n.length}`);if(n.length>e.maxArgs)throw new Error(`Expected at most ${e.maxArgs} ${s(e.maxArgs)} for ${t}(), got ${n.length}`);return new Promise(((t,e)=>{const i=p.bind(null,{resolve:t,reject:e});n.push(i),r.sendMessage(...n)}))},m={devtools:{network:{onRequestFinished:h(f)}},runtime:{onMessage:h(d),onMessageExternal:h(d),sendMessage:g.bind(null,"sendMessage",{minArgs:1,maxArgs:3})},tabs:{sendMessage:g.bind(null,"sendMessage",{minArgs:2,maxArgs:3})}},y={clear:{minArgs:1,maxArgs:1},get:{minArgs:1,maxArgs:1},set:{minArgs:1,maxArgs:1}};return r.privacy={network:{"*":y},services:{"*":y},websites:{"*":y}},l(t,m,r)};t.exports=r(chrome)}else t.exports=globalThis.browser},void 0===(i="function"==typeof r?r.apply(e,n):r)||(t.exports=i)},9541:(t,e,r)=>{"use strict";t.exports=r.p+"ed66b9f28b0f118f915a.wasm"},6086:(t,e,r)=>{"use strict";r.d(e,{C3:()=>v,D4:()=>C,Fm:()=>k,LC:()=>y,Me:()=>w,N5:()=>x,NS:()=>f,QT:()=>E,SV:()=>O,Vo:()=>c,ZW:()=>h,jn:()=>l,pB:()=>A,sc:()=>N,yK:()=>T});var n=r(3368);r(3150);function i(t){return i="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},i(t)}function o(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function s(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,(o=n.key,s=void 0,s=function(t,e){if("object"!==i(t)||null===t)return t;var r=t[Symbol.toPrimitive];if(void 0!==r){var n=r.call(t,e||"default");if("object"!==i(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===e?String:Number)(t)}(o,"string"),"symbol"===i(s)?s:String(s)),n)}var o,s}function a(t,e,r){return e&&s(t.prototype,e),r&&s(t,r),Object.defineProperty(t,"prototype",{writable:!1}),t}var c="notifyme",u="action",l=function(t){try{chrome[u].setBadgeText({text:"!"}),chrome[u].setBadgeBackgroundColor({color:"#ffcc00"}),t&&chrome.storage.local.set({error_status:t})}catch(t){}},h=function(t){chrome.tabs.create({url:t},(function(e){e?chrome.windows.update(e.windowId,{focused:!0}):chrome.windows.create({url:t},(function(t){chrome.windows.update(t.id,{focused:!0})}))}))},f=function(t){var e=t.replace(/https:\/\/[^/]*re(ve)?ddit.com/,"");return g(e)},d=/^\/(v|r|user)\/([^/]+)\/comments\/([^/]+)\/[^/]*(?:\/([^/?&#]+))?/,p=/^\/(?:user|y|u)\/([^/?&#]+)\/?/,g=function(t){var e=void 0,r=void 0,n=void 0,i=void 0,o=t.match(d),s=t.match(p);o?("user"===o[1]?n=o[2]:i=o[2],o[3]&&(e="t3_"+o[3]),o[4]&&(r="t1_"+o[4])):s&&(n=s[1]);return[e,r,n,i]},m=function(t){return t.replace(/&amp;/g,"&").replace(/&gt;/g,">").replace(/&lt;/g,"<").replace(/\s+/g," ").substr(0,300)},y=function(t){return!!t.removal_reason||(v(t.name)?b(t):S(t))},v=function(t){return"t1"===t.substr(0,2)},b=function(t){return"["===t.author.replace(/\\/g,"")[0]&&"["===t.body.replace(/\\/g,"")[0]},w=function(t){return v(t.name)?function(t){return"[deleted]"===t.body.replace(/\\/g,"")&&"[deleted]"===t.author.replace(/\\/g,"")}(t):function(t){return!t.is_robot_indexable&&"[deleted]"===t.author.replace(/\\/g,"")}(t)},S=function(t){return!t.is_robot_indexable},x=function(t,e,r){var n=_(t,r).slice(0,e),i={};return n.forEach((function(t){i[t[0]]=t[1]})),i},_=function(t,e){var r=Object.keys(t).map((function(e){return[e,t[e]]}));return r.sort((function(t,r){return r[1][e]-t[1][e]})),r},A=function(){function t(e,r){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:void 0,i=arguments.length>3&&void 0!==arguments[3]?arguments[3]:null;o(this,t),i?(this.c=i.c,this.u=i.u,void 0!==i.p&&(this.p=i.p)):(this.c=e,this.u=r,void 0!==n&&(this.p=n))}return a(t,[{key:"getCreatedUTC",value:function(){return this.c}},{key:"getUnseen",value:function(){return this.u}},{key:"getPostID",value:function(){return this.p}}]),t}(),E=function(){function t(e){var r=e.id,n=void 0===r?null:r,i=e.observed_utc,s=void 0===i?null:i,a=e.change_type,c=void 0===a?null:a,u=e.seen_count,l=void 0===u?null:u,h=e.object,f=void 0===h?null:h;o(this,t),f?(this.i=f.i,this.o=f.o,this.g=f.g,this.n=f.n):(this.i=n,this.o=s,this.g=c,this.n=l)}return a(t,[{key:"getID",value:function(){return this.i}},{key:"getObservedUTC",value:function(){return this.o}},{key:"getChangeTypeInternal",value:function(){return this.g}},{key:"getChangeType",value:function(){switch(this.g){case n.U$:return"mod removed";case n.oZ:return"user deleted";case n.Ci:return"approved";case n.nb:return"locked";case n.YU:return"unlocked";case n.WK:return"edited"}}},{key:"getSeenCount",value:function(){return this.n}}]),t}(),C=function(){function t(e){var r=e.item,n=void 0===r?null:r,i=e.observed_utc,s=void 0===i?null:i,a=e.object,c=void 0===a?null:a;if(o(this,t),c)this.t=c.t,this.o=c.o,this.c=c.c,this.n=c.n||0,void 0!==c.p&&(this.p=c.p);else{var u="";u=v(n.name)?m(n.body):n.title,this.t=u,this.o=s,this.c=n.created_utc,this.n=0,v(n.name)&&n.link_id&&(this.p=n.link_id)}}return a(t,[{key:"setText",value:function(t){this.t=m(t)}},{key:"getText",value:function(){return this.t}},{key:"getObservedUTC",value:function(){return this.o}},{key:"getCreatedUTC",value:function(){return this.c}},{key:"resetSeenCount",value:function(){this.n=0}},{key:"getSeenCount",value:function(){return this.n}},{key:"getPostID",value:function(){return this.p}},{key:"incrementSeenCount",value:function(){return void 0===this.n&&(this.n=0),this.n+=1,this.n}}]),t}();function T(t){chrome.alarms.clear(c),chrome.alarms.create(c,{delayInMinutes:1,periodInMinutes:t})}function k(){chrome.runtime.openOptionsPage?(chrome.runtime.openOptionsPage(),window.close()):window.open(chrome.runtime.getURL("/src/options.html"))}var N=function(t){var e=t.notificationId,r=t.title,n=t.message;if(console.log("createNotification called: ".concat(e," - ").concat(r," - ").concat(n)),location.protocol.match(/^http/))console.log("Sending notification via message passing"),chrome.runtime.sendMessage({action:"create-notification",options:{notificationId:e,title:r,message:n}});else{console.log("Creating notification directly with chrome.notifications.create");var i=String(e),o=i.includes("|")?i:"".concat(i,"|").concat(Date.now()),s={type:"basic",iconUrl:chrome.runtime.getURL("icons/128.png"),title:r,message:n},a=function(){try{var t=self&&self.registration?self.registration:null;t&&t.showNotification&&t.showNotification(r,{body:n,icon:chrome.runtime.getURL("icons/128.png"),data:i})}catch(t){console.log("Fallback showNotification failed:",t)}};try{chrome.notifications.create(o,s,(function(){chrome.runtime&&chrome.runtime.lastError&&(console.log("chrome.notifications.create error:",chrome.runtime.lastError.message),a())}))}catch(t){console.log("Error creating notification:",t),a()}}},O=function(){var t,e;location.protocol.match(/^http/)?null===(t=(e=chrome.runtime.sendMessage({action:"update-badge"})).catch)||void 0===t||t.call(e,(function(){})):(0,n.Nd)((function(t){var e=0;Object.values(t).forEach((function(t){e+=t.length}));var r=e.toString();0==e&&(r=""),chrome[u].setBadgeBackgroundColor({color:"red"}),chrome[u].setBadgeText({text:r})}))}},6992:(t,e,r)=>{"use strict";r.d(e,{x:()=>c});var n=r(3368),i=r(6086),o=r(9138);r(3150);function s(t,e){return function(t){if(Array.isArray(t))return t}(t)||function(t,e){var r=null==t?null:"undefined"!=typeof Symbol&&t[Symbol.iterator]||t["@@iterator"];if(null!=r){var n,i,o,s,a=[],c=!0,u=!1;try{if(o=(r=r.call(t)).next,0===e){if(Object(r)!==r)return;c=!1}else for(;!(c=(n=o.call(r)).done)&&(a.push(n.value),a.length!==e);c=!0);}catch(t){u=!0,i=t}finally{try{if(!c&&null!=r.return&&(s=r.return(),Object(s)!==s))return}finally{if(u)throw i}}return a}}(t,e)||function(t,e){if(!t)return;if("string"==typeof t)return a(t,e);var r=Object.prototype.toString.call(t).slice(8,-1);"Object"===r&&t.constructor&&(r=t.constructor.name);if("Map"===r||"Set"===r)return Array.from(t);if("Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r))return a(t,e)}(t,e)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function a(t,e){(null==e||e>t.length)&&(e=t.length);for(var r=0,n=new Array(e);r<e;r++)n[r]=t[r];return n}var c=function(){var t="reveddit-subscribe";chrome.contextMenus.removeAll((function(){chrome.contextMenus.create({id:t,title:"reveddit subscribe",contexts:["link"],targetUrlPatterns:["https://*.reddit.com/r/*/comments/*","https://www.reveddit.com/r/*/comments/*","https://*.reddit.com/user/*","https://www.reveddit.com/user/*"]})})),chrome.contextMenus.onClicked.addListener((function(e,r){if(e.menuItemId==t){var a=e.linkUrl,c=s((0,i.NS)(a),3),u=c[0],l=c[1],h=c[2];l?((0,n.Pd)(l),(0,o.t)(l,a)):u?((0,n.Pd)(u),(0,o.t)(u,a)):h?(0,n.CU)(h):alert("Unable to subscribe to this ".concat("link",", it is not a comment, post or user.\n\n").concat(a))}}))}},9138:(t,e,r)=>{"use strict";r.d(e,{O:()=>m,t:()=>g});var n=r(97),i=r(3368),o=r(6086),s=r(3150);function a(t){return a="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},a(t)}function c(t,e){var r="undefined"!=typeof Symbol&&t[Symbol.iterator]||t["@@iterator"];if(!r){if(Array.isArray(t)||(r=function(t,e){if(!t)return;if("string"==typeof t)return u(t,e);var r=Object.prototype.toString.call(t).slice(8,-1);"Object"===r&&t.constructor&&(r=t.constructor.name);if("Map"===r||"Set"===r)return Array.from(t);if("Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r))return u(t,e)}(t))||e&&t&&"number"==typeof t.length){r&&(t=r);var n=0,i=function(){};return{s:i,n:function(){return n>=t.length?{done:!0}:{done:!1,value:t[n++]}},e:function(t){throw t},f:i}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var o,s=!0,a=!1;return{s:function(){r=r.call(t)},n:function(){var t=r.next();return s=t.done,t},e:function(t){a=!0,o=t},f:function(){try{s||null==r.return||r.return()}finally{if(a)throw o}}}}function u(t,e){(null==e||e>t.length)&&(e=t.length);for(var r=0,n=new Array(e);r<e;r++)n[r]=t[r];return n}function l(t,e,r){return(e=function(t){var e=function(t,e){if("object"!==a(t)||null===t)return t;var r=t[Symbol.toPrimitive];if(void 0!==r){var n=r.call(t,e||"default");if("object"!==a(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===e?String:Number)(t)}(t,"string");return"symbol"===a(e)?e:String(e)}(e))in t?Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}):t[e]=r,t}function h(){/*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */h=function(){return t};var t={},e=Object.prototype,r=e.hasOwnProperty,n=Object.defineProperty||function(t,e,r){t[e]=r.value},i="function"==typeof Symbol?Symbol:{},o=i.iterator||"@@iterator",s=i.asyncIterator||"@@asyncIterator",c=i.toStringTag||"@@toStringTag";function u(t,e,r){return Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}),t[e]}try{u({},"")}catch(t){u=function(t,e,r){return t[e]=r}}function l(t,e,r,i){var o=e&&e.prototype instanceof p?e:p,s=Object.create(o.prototype),a=new T(i||[]);return n(s,"_invoke",{value:_(t,r,a)}),s}function f(t,e,r){try{return{type:"normal",arg:t.call(e,r)}}catch(t){return{type:"throw",arg:t}}}t.wrap=l;var d={};function p(){}function g(){}function m(){}var y={};u(y,o,(function(){return this}));var v=Object.getPrototypeOf,b=v&&v(v(k([])));b&&b!==e&&r.call(b,o)&&(y=b);var w=m.prototype=p.prototype=Object.create(y);function S(t){["next","throw","return"].forEach((function(e){u(t,e,(function(t){return this._invoke(e,t)}))}))}function x(t,e){function i(n,o,s,c){var u=f(t[n],t,o);if("throw"!==u.type){var l=u.arg,h=l.value;return h&&"object"==a(h)&&r.call(h,"__await")?e.resolve(h.__await).then((function(t){i("next",t,s,c)}),(function(t){i("throw",t,s,c)})):e.resolve(h).then((function(t){l.value=t,s(l)}),(function(t){return i("throw",t,s,c)}))}c(u.arg)}var o;n(this,"_invoke",{value:function(t,r){function n(){return new e((function(e,n){i(t,r,e,n)}))}return o=o?o.then(n,n):n()}})}function _(t,e,r){var n="suspendedStart";return function(i,o){if("executing"===n)throw new Error("Generator is already running");if("completed"===n){if("throw"===i)throw o;return N()}for(r.method=i,r.arg=o;;){var s=r.delegate;if(s){var a=A(s,r);if(a){if(a===d)continue;return a}}if("next"===r.method)r.sent=r._sent=r.arg;else if("throw"===r.method){if("suspendedStart"===n)throw n="completed",r.arg;r.dispatchException(r.arg)}else"return"===r.method&&r.abrupt("return",r.arg);n="executing";var c=f(t,e,r);if("normal"===c.type){if(n=r.done?"completed":"suspendedYield",c.arg===d)continue;return{value:c.arg,done:r.done}}"throw"===c.type&&(n="completed",r.method="throw",r.arg=c.arg)}}}function A(t,e){var r=e.method,n=t.iterator[r];if(void 0===n)return e.delegate=null,"throw"===r&&t.iterator.return&&(e.method="return",e.arg=void 0,A(t,e),"throw"===e.method)||"return"!==r&&(e.method="throw",e.arg=new TypeError("The iterator does not provide a '"+r+"' method")),d;var i=f(n,t.iterator,e.arg);if("throw"===i.type)return e.method="throw",e.arg=i.arg,e.delegate=null,d;var o=i.arg;return o?o.done?(e[t.resultName]=o.value,e.next=t.nextLoc,"return"!==e.method&&(e.method="next",e.arg=void 0),e.delegate=null,d):o:(e.method="throw",e.arg=new TypeError("iterator result is not an object"),e.delegate=null,d)}function E(t){var e={tryLoc:t[0]};1 in t&&(e.catchLoc=t[1]),2 in t&&(e.finallyLoc=t[2],e.afterLoc=t[3]),this.tryEntries.push(e)}function C(t){var e=t.completion||{};e.type="normal",delete e.arg,t.completion=e}function T(t){this.tryEntries=[{tryLoc:"root"}],t.forEach(E,this),this.reset(!0)}function k(t){if(t){var e=t[o];if(e)return e.call(t);if("function"==typeof t.next)return t;if(!isNaN(t.length)){var n=-1,i=function e(){for(;++n<t.length;)if(r.call(t,n))return e.value=t[n],e.done=!1,e;return e.value=void 0,e.done=!0,e};return i.next=i}}return{next:N}}function N(){return{value:void 0,done:!0}}return g.prototype=m,n(w,"constructor",{value:m,configurable:!0}),n(m,"constructor",{value:g,configurable:!0}),g.displayName=u(m,c,"GeneratorFunction"),t.isGeneratorFunction=function(t){var e="function"==typeof t&&t.constructor;return!!e&&(e===g||"GeneratorFunction"===(e.displayName||e.name))},t.mark=function(t){return Object.setPrototypeOf?Object.setPrototypeOf(t,m):(t.__proto__=m,u(t,c,"GeneratorFunction")),t.prototype=Object.create(w),t},t.awrap=function(t){return{__await:t}},S(x.prototype),u(x.prototype,s,(function(){return this})),t.AsyncIterator=x,t.async=function(e,r,n,i,o){void 0===o&&(o=Promise);var s=new x(l(e,r,n,i),o);return t.isGeneratorFunction(r)?s:s.next().then((function(t){return t.done?t.value:s.next()}))},S(w),u(w,c,"Generator"),u(w,o,(function(){return this})),u(w,"toString",(function(){return"[object Generator]"})),t.keys=function(t){var e=Object(t),r=[];for(var n in e)r.push(n);return r.reverse(),function t(){for(;r.length;){var n=r.pop();if(n in e)return t.value=n,t.done=!1,t}return t.done=!0,t}},t.values=k,T.prototype={constructor:T,reset:function(t){if(this.prev=0,this.next=0,this.sent=this._sent=void 0,this.done=!1,this.delegate=null,this.method="next",this.arg=void 0,this.tryEntries.forEach(C),!t)for(var e in this)"t"===e.charAt(0)&&r.call(this,e)&&!isNaN(+e.slice(1))&&(this[e]=void 0)},stop:function(){this.done=!0;var t=this.tryEntries[0].completion;if("throw"===t.type)throw t.arg;return this.rval},dispatchException:function(t){if(this.done)throw t;var e=this;function n(r,n){return s.type="throw",s.arg=t,e.next=r,n&&(e.method="next",e.arg=void 0),!!n}for(var i=this.tryEntries.length-1;i>=0;--i){var o=this.tryEntries[i],s=o.completion;if("root"===o.tryLoc)return n("end");if(o.tryLoc<=this.prev){var a=r.call(o,"catchLoc"),c=r.call(o,"finallyLoc");if(a&&c){if(this.prev<o.catchLoc)return n(o.catchLoc,!0);if(this.prev<o.finallyLoc)return n(o.finallyLoc)}else if(a){if(this.prev<o.catchLoc)return n(o.catchLoc,!0)}else{if(!c)throw new Error("try statement without catch or finally");if(this.prev<o.finallyLoc)return n(o.finallyLoc)}}}},abrupt:function(t,e){for(var n=this.tryEntries.length-1;n>=0;--n){var i=this.tryEntries[n];if(i.tryLoc<=this.prev&&r.call(i,"finallyLoc")&&this.prev<i.finallyLoc){var o=i;break}}o&&("break"===t||"continue"===t)&&o.tryLoc<=e&&e<=o.finallyLoc&&(o=null);var s=o?o.completion:{};return s.type=t,s.arg=e,o?(this.method="next",this.next=o.finallyLoc,d):this.complete(s)},complete:function(t,e){if("throw"===t.type)throw t.arg;return"break"===t.type||"continue"===t.type?this.next=t.arg:"return"===t.type?(this.rval=this.arg=t.arg,this.method="return",this.next="end"):"normal"===t.type&&e&&(this.next=e),d},finish:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var r=this.tryEntries[e];if(r.finallyLoc===t)return this.complete(r.completion,r.afterLoc),C(r),d}},catch:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var r=this.tryEntries[e];if(r.tryLoc===t){var n=r.completion;if("throw"===n.type){var i=n.arg;C(r)}return i}}throw new Error("illegal catch attempt")},delegateYield:function(t,e,r){return this.delegate={iterator:k(t),resultName:e,nextLoc:r},"next"===this.method&&(this.arg=void 0),d}},t}function f(t,e,r,n,i,o,s){try{var a=t[o](s),c=a.value}catch(t){return void r(t)}a.done?e(c):Promise.resolve(c).then(n,i)}function d(t){return function(){var e=this,r=arguments;return new Promise((function(n,i){var o=t.apply(e,r);function s(t){f(o,n,i,s,a,"next",t)}function a(t){f(o,n,i,s,a,"throw",t)}s(void 0)}))}}var p=Math.floor(60*Math.random())+60,g=function(t,e){var r=0;return e.match(/^https:\/\/www.reveddit.com/)&&(r=1),chrome.storage.sync.get(null,(function(e){(0,n.v0)().then((function(n){return v([t],"other",!1,n,e,r,{})}))}))},m=function(){chrome.storage.sync.get(null,(function(t){var e,r=Object.keys(t.other_subscriptions),i=Math.floor(new Date/1e3);(!t.last_check_quarantined||i-t.last_check_quarantined>1728e3)&&(t.tempVar_monitor_quarantined=!0),(t.options.custom_clientid&&""!==t.options.custom_clientid?(0,n.v0)(t.tempVar_monitor_quarantined):Promise.resolve("none")).then((function(r){return e=r,y(r,t)})).then((function(){if(r.length)return function(t,e){var r=Object.keys(e.other_subscriptions);r.length&&v(r,"other",!1,t,e,2)}(e,t)})).then((function(){var e={last_check:i};t.tempVar_monitor_quarantined&&(e.last_check_quarantined=i),t.tempVar_quarantined_content_found&&(e.options=t.options,e.options.monitor_quarantined=!0),chrome.storage.sync.set(e)})).catch((function(t){console.log("Error in checkForChanges:",t),(0,o.SV)()}))}))},y=function(){var t=d(h().mark((function t(e,r){return h().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.abrupt("return",(0,n.lc)().then((function(t){if(t){try{chrome.storage.local.set({last_logged_in_user:t})}catch(t){}var s=(0,i.we)(t);return chrome.storage.sync.get(Object.keys(s),(function(t){var e={};Object.keys(s).forEach((function(r){r in t||(e[r]=s[r])})),Object.keys(e).length>0&&chrome.storage.sync.set(e)})),new Promise((function(t,e){chrome.tabs.query({url:["*://*.reddit.com/*"]},(function(e){if(0!==e.length){var r=e.filter((function(t){var e=new URL(t.url).hostname;return"www.reddit.com"===e||"old.reddit.com"===e}));if(0===r.length)return console.log("No supported Reddit subdomains found (www.reddit.com or old.reddit.com)"),void t("use_stored_cookies");var i=r[0];(0,n.IY)(),chrome.tabs.sendMessage(i.id,{action:"get-logged-in-user-items"},(function(e){if(chrome.runtime.lastError)return console.log("Error sending message to content script:",chrome.runtime.lastError),(0,o.jn)("needs_user"),void t("use_stored_cookies");t(e)}))}else t("use_stored_cookies")}))})).then((function(i){if(i){if("use_stored_cookies"===i)return(0,n.uG)("","new","",r.options.monitor_quarantined,r.tempVar_monitor_quarantined,e).then((function(n){if(n){var i=[],s=new Set,a={};return n.user&&n.user.items&&(n=n.user.items),n.forEach((function(t){t.data&&t.data.name&&(t=t.data),i.push(t.name),a[t.name]=t,t.quarantine&&(s.add(t.subreddit),r.tempVar_quarantined_content_found=!0)})),v(i,t,!0,e,r,2,a,Array.from(s))}(0,o.jn)("needs_user")}));var s=[],a=new Set,c={};return i.user&&i.user.items&&(i=i.user.items),i.forEach((function(t){t.data&&t.data.name&&(t=t.data),s.push(t.name),c[t.name]=t,t.quarantine&&(a.add(t.subreddit),r.tempVar_quarantined_content_found=!0)})),v(s,t,!0,e,r,2,c,Array.from(a))}})).then((function(){chrome.storage.local.remove("error_status",(function(){(0,o.SV)()}))}))}console.log("No logged-in user found, skipping user monitoring")})).catch((function(t){console.log("Error in checkForChanges_loggedInUser:",t)})));case 1:case"end":return t.stop()}}),t)})));return function(e,r){return t.apply(this,arguments)}}();var v=function(){var t=d(h().mark((function t(e,r,a,c,u,f){var d,p,g,m,y=arguments;return h().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return d=y.length>6&&void 0!==y[6]?y[6]:{},p=y.length>7&&void 0!==y[7]?y[7]:[],m=u.options.monitor_quarantined,g=location.protocol.match(/^http/)?s.runtime.sendMessage({action:"get-reddit-items-by-id",ids:e,monitor_quarantined:m}):(0,n.my)(e,c,m,u.tempVar_monitor_quarantined,p),t.abrupt("return",g.then((function(t){if(t){var e=Array.isArray(t)?t:t.items;if(e){var n=u.options.removal_status,s=u.options.lock_status,c=u.options.seen_count||i.UU,h=(0,i.tN)(r,a),p=u[h.removed]||{},g=u[h.approved]||{},m=u[h.locked]||{},y=u[h.unlocked]||{},v=u[h.changes]||[];a||(d={});var b=[],S=[],x=[],_=[];e.forEach((function(t){var e=t.data;a||(d[e.name]=e),(0,o.LC)(e)?b.push(e.name):S.push(e.name),e.locked?x.push(e.name):_.push(e.name)}));var A={},E=[],C=0;return(0,i.$6)(r,a).then((function(t){var e;return n.track&&(C+=w(b,i.U$,"mod removed",p,S,i.Ci,"approved",g,v,d,n.notify,A,E,a,f,t,c)),s.track&&(C+=w(x,i.nb,"locked",m,_,i.YU,"unlocked",y,v,d,s.notify,A,E,a,f,t,c)),C&&E.length&&(console.log("Creating notification for ".concat(r,": ").concat(C," changes of type ").concat(E.join(", "))),(0,o.sc)({notificationId:r,title:r,message:"".concat(C," new [").concat(E.join(", "),"] actions, click to view")})),chrome.storage.sync.set((l(e={},h.removed,(0,o.N5)(p,i.JQ,"c")),l(e,h.approved,(0,o.N5)(g,i.JQ,"c")),l(e,h.locked,(0,o.N5)(m,i.JQ,"c")),l(e,h.unlocked,(0,o.N5)(y,i.JQ,"c")),l(e,h.changes,v.slice(-i.Yn)),e),(function(){return(0,o.SV)(),(0,i.oX)(A,r,a)}))}))}}})));case 5:case"end":return t.stop()}}),t)})));return function(e,r,n,i,o,s){return t.apply(this,arguments)}}(),b=function(t,e,r){var n,i=c(r);try{for(i.s();!(n=i.n()).done;){var s=n.value,a=s;if(a instanceof o.QT||(a=new o.QT({object:s})),a.getID()===t&&e===a.getChangeTypeInternal())return!0}}catch(t){i.e(t)}finally{i.f()}return!1};function w(t,e,r,n,s,a,c,u,l,h,f,d,g,m,y,v,w){var S=[],x=[],_=[],A=Math.floor(new Date/1e3);t.forEach((function(t){var r=h[t],s=v[t];if(m||s){if(s){var a=new o.D4({object:s});a.resetSeenCount(),d[t]=a}}else d[t]=new o.D4({item:r,observed_utc:A});if(!(t in n)){var c=!0;if((0===y&&e!==i.U$||1===y)&&(c=!1),n[t]=new o.pB(r.created_utc,c,(0,o.C3)(r.name)&&r.link_id?r.link_id:void 0),delete u[t],c){var f=e;(0,o.Me)(r)?(f=i.oZ,_.push(t)):S.push(t),l.push(new o.QT({id:t,observed_utc:A,change_type:f}))}m&&(d[t]=new o.D4({item:r,observed_utc:A}))}})),s.forEach((function(t){var e=h[t];if(m||v[t]||(d[t]=new o.D4({item:e,observed_utc:A})),t in n){var r=new o.D4({object:v[t]}),i=r.incrementSeenCount();if(i>=w)!b(t,a,l)||i>=p?(u[t]=new o.pB(e.created_utc,!0,(0,o.C3)(e.name)&&e.link_id?e.link_id:void 0),delete n[t],l.push(new o.QT({id:t,observed_utc:A,change_type:a,seen_count:i})),x.push(t),d[t]=new o.D4({item:e,observed_utc:A})):d[t]=r;else d[t]=r}else u[t]=new o.pB(e.created_utc,!1,(0,o.C3)(e.name)&&e.link_id?e.link_id:void 0)}));var E=S.length+x.length+_.length;return f&&E&&(S.length&&g.push(r),_.length&&g.push("user deleted"),x.length&&g.push(c)),E}},8140:(t,e,r)=>{"use strict";function n(t){return n="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},n(t)}function i(t,e){return function(t){if(Array.isArray(t))return t}(t)||function(t,e){var r=null==t?null:"undefined"!=typeof Symbol&&t[Symbol.iterator]||t["@@iterator"];if(null!=r){var n,i,o,s,a=[],c=!0,u=!1;try{if(o=(r=r.call(t)).next,0===e){if(Object(r)!==r)return;c=!1}else for(;!(c=(n=o.call(r)).done)&&(a.push(n.value),a.length!==e);c=!0);}catch(t){u=!0,i=t}finally{try{if(!c&&null!=r.return&&(s=r.return(),Object(s)!==s))return}finally{if(u)throw i}}return a}}(t,e)||function(t,e){if(!t)return;if("string"==typeof t)return o(t,e);var r=Object.prototype.toString.call(t).slice(8,-1);"Object"===r&&t.constructor&&(r=t.constructor.name);if("Map"===r||"Set"===r)return Array.from(t);if("Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r))return o(t,e)}(t,e)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function o(t,e){(null==e||e>t.length)&&(e=t.length);for(var r=0,n=new Array(e);r<e;r++)n[r]=t[r];return n}function s(t,e){for(var r=0;r<e.length;r++){var i=e[r];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(t,(o=i.key,s=void 0,s=function(t,e){if("object"!==n(t)||null===t)return t;var r=t[Symbol.toPrimitive];if(void 0!==r){var i=r.call(t,e||"default");if("object"!==n(i))return i;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===e?String:Number)(t)}(o,"string"),"symbol"===n(s)?s:String(s)),i)}var o,s}function a(){/*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */a=function(){return t};var t={},e=Object.prototype,r=e.hasOwnProperty,i=Object.defineProperty||function(t,e,r){t[e]=r.value},o="function"==typeof Symbol?Symbol:{},s=o.iterator||"@@iterator",c=o.asyncIterator||"@@asyncIterator",u=o.toStringTag||"@@toStringTag";function l(t,e,r){return Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}),t[e]}try{l({},"")}catch(t){l=function(t,e,r){return t[e]=r}}function h(t,e,r,n){var o=e&&e.prototype instanceof p?e:p,s=Object.create(o.prototype),a=new T(n||[]);return i(s,"_invoke",{value:_(t,r,a)}),s}function f(t,e,r){try{return{type:"normal",arg:t.call(e,r)}}catch(t){return{type:"throw",arg:t}}}t.wrap=h;var d={};function p(){}function g(){}function m(){}var y={};l(y,s,(function(){return this}));var v=Object.getPrototypeOf,b=v&&v(v(k([])));b&&b!==e&&r.call(b,s)&&(y=b);var w=m.prototype=p.prototype=Object.create(y);function S(t){["next","throw","return"].forEach((function(e){l(t,e,(function(t){return this._invoke(e,t)}))}))}function x(t,e){function o(i,s,a,c){var u=f(t[i],t,s);if("throw"!==u.type){var l=u.arg,h=l.value;return h&&"object"==n(h)&&r.call(h,"__await")?e.resolve(h.__await).then((function(t){o("next",t,a,c)}),(function(t){o("throw",t,a,c)})):e.resolve(h).then((function(t){l.value=t,a(l)}),(function(t){return o("throw",t,a,c)}))}c(u.arg)}var s;i(this,"_invoke",{value:function(t,r){function n(){return new e((function(e,n){o(t,r,e,n)}))}return s=s?s.then(n,n):n()}})}function _(t,e,r){var n="suspendedStart";return function(i,o){if("executing"===n)throw new Error("Generator is already running");if("completed"===n){if("throw"===i)throw o;return N()}for(r.method=i,r.arg=o;;){var s=r.delegate;if(s){var a=A(s,r);if(a){if(a===d)continue;return a}}if("next"===r.method)r.sent=r._sent=r.arg;else if("throw"===r.method){if("suspendedStart"===n)throw n="completed",r.arg;r.dispatchException(r.arg)}else"return"===r.method&&r.abrupt("return",r.arg);n="executing";var c=f(t,e,r);if("normal"===c.type){if(n=r.done?"completed":"suspendedYield",c.arg===d)continue;return{value:c.arg,done:r.done}}"throw"===c.type&&(n="completed",r.method="throw",r.arg=c.arg)}}}function A(t,e){var r=e.method,n=t.iterator[r];if(void 0===n)return e.delegate=null,"throw"===r&&t.iterator.return&&(e.method="return",e.arg=void 0,A(t,e),"throw"===e.method)||"return"!==r&&(e.method="throw",e.arg=new TypeError("The iterator does not provide a '"+r+"' method")),d;var i=f(n,t.iterator,e.arg);if("throw"===i.type)return e.method="throw",e.arg=i.arg,e.delegate=null,d;var o=i.arg;return o?o.done?(e[t.resultName]=o.value,e.next=t.nextLoc,"return"!==e.method&&(e.method="next",e.arg=void 0),e.delegate=null,d):o:(e.method="throw",e.arg=new TypeError("iterator result is not an object"),e.delegate=null,d)}function E(t){var e={tryLoc:t[0]};1 in t&&(e.catchLoc=t[1]),2 in t&&(e.finallyLoc=t[2],e.afterLoc=t[3]),this.tryEntries.push(e)}function C(t){var e=t.completion||{};e.type="normal",delete e.arg,t.completion=e}function T(t){this.tryEntries=[{tryLoc:"root"}],t.forEach(E,this),this.reset(!0)}function k(t){if(t){var e=t[s];if(e)return e.call(t);if("function"==typeof t.next)return t;if(!isNaN(t.length)){var n=-1,i=function e(){for(;++n<t.length;)if(r.call(t,n))return e.value=t[n],e.done=!1,e;return e.value=void 0,e.done=!0,e};return i.next=i}}return{next:N}}function N(){return{value:void 0,done:!0}}return g.prototype=m,i(w,"constructor",{value:m,configurable:!0}),i(m,"constructor",{value:g,configurable:!0}),g.displayName=l(m,u,"GeneratorFunction"),t.isGeneratorFunction=function(t){var e="function"==typeof t&&t.constructor;return!!e&&(e===g||"GeneratorFunction"===(e.displayName||e.name))},t.mark=function(t){return Object.setPrototypeOf?Object.setPrototypeOf(t,m):(t.__proto__=m,l(t,u,"GeneratorFunction")),t.prototype=Object.create(w),t},t.awrap=function(t){return{__await:t}},S(x.prototype),l(x.prototype,c,(function(){return this})),t.AsyncIterator=x,t.async=function(e,r,n,i,o){void 0===o&&(o=Promise);var s=new x(h(e,r,n,i),o);return t.isGeneratorFunction(r)?s:s.next().then((function(t){return t.done?t.value:s.next()}))},S(w),l(w,u,"Generator"),l(w,s,(function(){return this})),l(w,"toString",(function(){return"[object Generator]"})),t.keys=function(t){var e=Object(t),r=[];for(var n in e)r.push(n);return r.reverse(),function t(){for(;r.length;){var n=r.pop();if(n in e)return t.value=n,t.done=!1,t}return t.done=!0,t}},t.values=k,T.prototype={constructor:T,reset:function(t){if(this.prev=0,this.next=0,this.sent=this._sent=void 0,this.done=!1,this.delegate=null,this.method="next",this.arg=void 0,this.tryEntries.forEach(C),!t)for(var e in this)"t"===e.charAt(0)&&r.call(this,e)&&!isNaN(+e.slice(1))&&(this[e]=void 0)},stop:function(){this.done=!0;var t=this.tryEntries[0].completion;if("throw"===t.type)throw t.arg;return this.rval},dispatchException:function(t){if(this.done)throw t;var e=this;function n(r,n){return s.type="throw",s.arg=t,e.next=r,n&&(e.method="next",e.arg=void 0),!!n}for(var i=this.tryEntries.length-1;i>=0;--i){var o=this.tryEntries[i],s=o.completion;if("root"===o.tryLoc)return n("end");if(o.tryLoc<=this.prev){var a=r.call(o,"catchLoc"),c=r.call(o,"finallyLoc");if(a&&c){if(this.prev<o.catchLoc)return n(o.catchLoc,!0);if(this.prev<o.finallyLoc)return n(o.finallyLoc)}else if(a){if(this.prev<o.catchLoc)return n(o.catchLoc,!0)}else{if(!c)throw new Error("try statement without catch or finally");if(this.prev<o.finallyLoc)return n(o.finallyLoc)}}}},abrupt:function(t,e){for(var n=this.tryEntries.length-1;n>=0;--n){var i=this.tryEntries[n];if(i.tryLoc<=this.prev&&r.call(i,"finallyLoc")&&this.prev<i.finallyLoc){var o=i;break}}o&&("break"===t||"continue"===t)&&o.tryLoc<=e&&e<=o.finallyLoc&&(o=null);var s=o?o.completion:{};return s.type=t,s.arg=e,o?(this.method="next",this.next=o.finallyLoc,d):this.complete(s)},complete:function(t,e){if("throw"===t.type)throw t.arg;return"break"===t.type||"continue"===t.type?this.next=t.arg:"return"===t.type?(this.rval=this.arg=t.arg,this.method="return",this.next="end"):"normal"===t.type&&e&&(this.next=e),d},finish:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var r=this.tryEntries[e];if(r.finallyLoc===t)return this.complete(r.completion,r.afterLoc),C(r),d}},catch:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var r=this.tryEntries[e];if(r.tryLoc===t){var n=r.completion;if("throw"===n.type){var i=n.arg;C(r)}return i}}throw new Error("illegal catch attempt")},delegateYield:function(t,e,r){return this.delegate={iterator:k(t),resultName:e,nextLoc:r},"next"===this.method&&(this.arg=void 0),d}},t}function c(t,e,r,n,i,o,s){try{var a=t[o](s),c=a.value}catch(t){return void r(t)}a.done?e(c):Promise.resolve(c).then(n,i)}r.d(e,{F_:()=>u,Hz:()=>l,Sd:()=>f,iN:()=>h});var u=function(){var t,e=(t=a().mark((function t(e){var r;return a().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:r=e.getReader();case 1:return t.next=3,r.read();case 3:if(t.sent.done){t.next=6;break}t.next=1;break;case 6:case"end":return t.stop()}}),t)})),function(){var e=this,r=arguments;return new Promise((function(n,i){var o=t.apply(e,r);function s(t){c(o,n,i,s,a,"next",t)}function a(t){c(o,n,i,s,a,"throw",t)}s(void 0)}))});return function(t){return e.apply(this,arguments)}}(),l="https://old.reddit.com",h={headers:{"Accept-Language":"en",Cookie:"over18=1;","User-Agent":"extension"}},f=function(){function t(e){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this.errors={},this.url=e}var e,r,n;return e=t,(r=[{key:"addError",value:function(t){this.errors[t]=(this.errors[t]||0)+1}},{key:"printErrors",value:function(){for(var t=0,e=Object.entries(this.errors);t<e.length;t++){var r=i(e[t],2),n=r[0],o=r[1];o&&console.error("ERROR:","["+n+"]",o,"times on",this.url)}}}])&&s(e.prototype,r),n&&s(e,n),Object.defineProperty(e,"prototype",{writable:!1}),t}()},430:(t,e,r)=>{"use strict";r.d(e,{V:()=>vl,G:()=>wl});var n={};r.r(n),r.d(n,{Comment:()=>qc,Doctype:()=>Bc,DocumentEnd:()=>Uc,Element:()=>Vc,EndTag:()=>Hc,HTMLRewriter:()=>Gc,TextChunk:()=>$c,default:()=>Wc});var i=r(8140);const o=Symbol("changed"),s=Symbol("classList"),a=Symbol("CustomElements"),c=Symbol("content"),u=Symbol("dataset"),l=Symbol("doctype"),h=Symbol("DOMParser"),f=Symbol("end"),d=Symbol("EventTarget"),p=Symbol("globals"),g=Symbol("image"),m=Symbol("mime"),y=Symbol("MutationObserver"),v=Symbol("next"),b=Symbol("ownerElement"),w=Symbol("prev"),S=Symbol("private"),x=Symbol("sheet"),_=Symbol("start"),A=Symbol("style"),E=Symbol("upgrade"),C=Symbol("value");var T,k=new Uint16Array('ᵁ<Õıʊҝջאٵ۞ޢߖࠏ੊ઑඡ๭༉༦჊ረዡᐕᒝᓃᓟᔥ\0\0\0\0\0\0ᕫᛍᦍᰒᷝ὾⁠↰⊍⏀⏻⑂⠤⤒ⴈ⹈⿎〖㊺㘹㞬㣾㨨㩱㫠㬮ࠀEMabcfglmnoprstu\\bfms¦³¹ÈÏlig耻Æ䃆P耻&䀦cute耻Á䃁reve;䄂Āiyx}rc耻Â䃂;䐐r;쀀𝔄rave耻À䃀pha;䎑acr;䄀d;橓Āgp¡on;䄄f;쀀𝔸plyFunction;恡ing耻Å䃅Ācs¾Ãr;쀀𝒜ign;扔ilde耻Ã䃃ml耻Ä䃄ЀaceforsuåûþėĜĢħĪĀcrêòkslash;或Ŷöø;櫧ed;挆y;䐑ƀcrtąċĔause;戵noullis;愬a;䎒r;쀀𝔅pf;쀀𝔹eve;䋘còēmpeq;扎܀HOacdefhilorsuōőŖƀƞƢƵƷƺǜȕɳɸɾcy;䐧PY耻©䂩ƀcpyŝŢźute;䄆Ā;iŧŨ拒talDifferentialD;慅leys;愭ȀaeioƉƎƔƘron;䄌dil耻Ç䃇rc;䄈nint;戰ot;䄊ĀdnƧƭilla;䂸terDot;䂷òſi;䎧rcleȀDMPTǇǋǑǖot;抙inus;抖lus;投imes;抗oĀcsǢǸkwiseContourIntegral;戲eCurlyĀDQȃȏoubleQuote;思uote;怙ȀlnpuȞȨɇɕonĀ;eȥȦ户;橴ƀgitȯȶȺruent;扡nt;戯ourIntegral;戮ĀfrɌɎ;愂oduct;成nterClockwiseContourIntegral;戳oss;樯cr;쀀𝒞pĀ;Cʄʅ拓ap;才րDJSZacefiosʠʬʰʴʸˋ˗ˡ˦̳ҍĀ;oŹʥtrahd;椑cy;䐂cy;䐅cy;䐏ƀgrsʿ˄ˇger;怡r;憡hv;櫤Āayː˕ron;䄎;䐔lĀ;t˝˞戇a;䎔r;쀀𝔇Āaf˫̧Ācm˰̢riticalȀADGT̖̜̀̆cute;䂴oŴ̋̍;䋙bleAcute;䋝rave;䁠ilde;䋜ond;拄ferentialD;慆Ѱ̽\0\0\0͔͂\0Ѕf;쀀𝔻ƀ;DE͈͉͍䂨ot;惜qual;扐blèCDLRUVͣͲ΂ϏϢϸontourIntegraìȹoɴ͹\0\0ͻ»͉nArrow;懓Āeo·ΤftƀARTΐΖΡrrow;懐ightArrow;懔eåˊngĀLRΫτeftĀARγιrrow;柸ightArrow;柺ightArrow;柹ightĀATϘϞrrow;懒ee;抨pɁϩ\0\0ϯrrow;懑ownArrow;懕erticalBar;戥ǹABLRTaВЪаўѿͼrrowƀ;BUНОТ憓ar;椓pArrow;懵reve;䌑eft˒к\0ц\0ѐightVector;楐eeVector;楞ectorĀ;Bљњ憽ar;楖ightǔѧ\0ѱeeVector;楟ectorĀ;BѺѻ懁ar;楗eeĀ;A҆҇护rrow;憧ĀctҒҗr;쀀𝒟rok;䄐ࠀNTacdfglmopqstuxҽӀӄӋӞӢӧӮӵԡԯԶՒ՝ՠեG;䅊H耻Ð䃐cute耻É䃉ƀaiyӒӗӜron;䄚rc耻Ê䃊;䐭ot;䄖r;쀀𝔈rave耻È䃈ement;戈ĀapӺӾcr;䄒tyɓԆ\0\0ԒmallSquare;旻erySmallSquare;斫ĀgpԦԪon;䄘f;쀀𝔼silon;䎕uĀaiԼՉlĀ;TՂՃ橵ilde;扂librium;懌Āci՗՚r;愰m;橳a;䎗ml耻Ë䃋Āipժկsts;戃onentialE;慇ʀcfiosօֈ֍ֲ׌y;䐤r;쀀𝔉lledɓ֗\0\0֣mallSquare;旼erySmallSquare;斪Ͱֺ\0ֿ\0\0ׄf;쀀𝔽All;戀riertrf;愱cò׋؀JTabcdfgorstר׬ׯ׺؀ؒؖ؛؝أ٬ٲcy;䐃耻>䀾mmaĀ;d׷׸䎓;䏜reve;䄞ƀeiy؇،ؐdil;䄢rc;䄜;䐓ot;䄠r;쀀𝔊;拙pf;쀀𝔾eater̀EFGLSTصلَٖٛ٦qualĀ;Lؾؿ扥ess;招ullEqual;执reater;檢ess;扷lantEqual;橾ilde;扳cr;쀀𝒢;扫ЀAacfiosuڅڋږڛڞڪھۊRDcy;䐪Āctڐڔek;䋇;䁞irc;䄤r;愌lbertSpace;愋ǰگ\0ڲf;愍izontalLine;攀Āctۃۅòکrok;䄦mpńېۘownHumðįqual;扏܀EJOacdfgmnostuۺ۾܃܇܎ܚܞܡܨ݄ݸދޏޕcy;䐕lig;䄲cy;䐁cute耻Í䃍Āiyܓܘrc耻Î䃎;䐘ot;䄰r;愑rave耻Ì䃌ƀ;apܠܯܿĀcgܴܷr;䄪inaryI;慈lieóϝǴ݉\0ݢĀ;eݍݎ戬Āgrݓݘral;戫section;拂isibleĀCTݬݲomma;恣imes;恢ƀgptݿރވon;䄮f;쀀𝕀a;䎙cr;愐ilde;䄨ǫޚ\0ޞcy;䐆l耻Ï䃏ʀcfosuެ޷޼߂ߐĀiyޱ޵rc;䄴;䐙r;쀀𝔍pf;쀀𝕁ǣ߇\0ߌr;쀀𝒥rcy;䐈kcy;䐄΀HJacfosߤߨ߽߬߱ࠂࠈcy;䐥cy;䐌ppa;䎚Āey߶߻dil;䄶;䐚r;쀀𝔎pf;쀀𝕂cr;쀀𝒦րJTaceflmostࠥࠩࠬࡐࡣ঳সে্਷ੇcy;䐉耻<䀼ʀcmnpr࠷࠼ࡁࡄࡍute;䄹bda;䎛g;柪lacetrf;愒r;憞ƀaeyࡗ࡜ࡡron;䄽dil;䄻;䐛Āfsࡨ॰tԀACDFRTUVarࡾࢩࢱࣦ࣠ࣼयज़ΐ४Ānrࢃ࢏gleBracket;柨rowƀ;BR࢙࢚࢞憐ar;懤ightArrow;懆eiling;挈oǵࢷ\0ࣃbleBracket;柦nǔࣈ\0࣒eeVector;楡ectorĀ;Bࣛࣜ懃ar;楙loor;挊ightĀAV࣯ࣵrrow;憔ector;楎Āerँगeƀ;AVउऊऐ抣rrow;憤ector;楚iangleƀ;BEतथऩ抲ar;槏qual;抴pƀDTVषूौownVector;楑eeVector;楠ectorĀ;Bॖॗ憿ar;楘ectorĀ;B॥०憼ar;楒ightáΜs̀EFGLSTॾঋকঝঢভqualGreater;拚ullEqual;扦reater;扶ess;檡lantEqual;橽ilde;扲r;쀀𝔏Ā;eঽা拘ftarrow;懚idot;䄿ƀnpw৔ਖਛgȀLRlr৞৷ਂਐeftĀAR০৬rrow;柵ightArrow;柷ightArrow;柶eftĀarγਊightáοightáϊf;쀀𝕃erĀLRਢਬeftArrow;憙ightArrow;憘ƀchtਾੀੂòࡌ;憰rok;䅁;扪Ѐacefiosuਗ਼੝੠੷੼અઋ઎p;椅y;䐜Ādl੥੯iumSpace;恟lintrf;愳r;쀀𝔐nusPlus;戓pf;쀀𝕄cò੶;䎜ҀJacefostuણધભીଔଙඑ඗ඞcy;䐊cute;䅃ƀaey઴હાron;䅇dil;䅅;䐝ƀgswે૰଎ativeƀMTV૓૟૨ediumSpace;怋hiĀcn૦૘ë૙eryThiî૙tedĀGL૸ଆreaterGreateòٳessLesóੈLine;䀊r;쀀𝔑ȀBnptଢନଷ଺reak;恠BreakingSpace;䂠f;愕ڀ;CDEGHLNPRSTV୕ୖ୪୼஡௫ఄ౞಄ದ೘ൡඅ櫬Āou୛୤ngruent;扢pCap;扭oubleVerticalBar;戦ƀlqxஃஊ஛ement;戉ualĀ;Tஒஓ扠ilde;쀀≂̸ists;戄reater΀;EFGLSTஶஷ஽௉௓௘௥扯qual;扱ullEqual;쀀≧̸reater;쀀≫̸ess;批lantEqual;쀀⩾̸ilde;扵umpń௲௽ownHump;쀀≎̸qual;쀀≏̸eĀfsఊధtTriangleƀ;BEచఛడ拪ar;쀀⧏̸qual;括s̀;EGLSTవశ఼ౄోౘ扮qual;扰reater;扸ess;쀀≪̸lantEqual;쀀⩽̸ilde;扴estedĀGL౨౹reaterGreater;쀀⪢̸essLess;쀀⪡̸recedesƀ;ESಒಓಛ技qual;쀀⪯̸lantEqual;拠ĀeiಫಹverseElement;戌ghtTriangleƀ;BEೋೌ೒拫ar;쀀⧐̸qual;拭ĀquೝഌuareSuĀbp೨೹setĀ;E೰ೳ쀀⊏̸qual;拢ersetĀ;Eഃആ쀀⊐̸qual;拣ƀbcpഓതൎsetĀ;Eഛഞ쀀⊂⃒qual;抈ceedsȀ;ESTലള഻െ抁qual;쀀⪰̸lantEqual;拡ilde;쀀≿̸ersetĀ;E൘൛쀀⊃⃒qual;抉ildeȀ;EFT൮൯൵ൿ扁qual;扄ullEqual;扇ilde;扉erticalBar;戤cr;쀀𝒩ilde耻Ñ䃑;䎝܀Eacdfgmoprstuvලෂ෉෕ෛ෠෧෼ขภยา฿ไlig;䅒cute耻Ó䃓Āiy෎ීrc耻Ô䃔;䐞blac;䅐r;쀀𝔒rave耻Ò䃒ƀaei෮ෲ෶cr;䅌ga;䎩cron;䎟pf;쀀𝕆enCurlyĀDQฎบoubleQuote;怜uote;怘;橔Āclวฬr;쀀𝒪ash耻Ø䃘iŬื฼de耻Õ䃕es;樷ml耻Ö䃖erĀBP๋๠Āar๐๓r;怾acĀek๚๜;揞et;掴arenthesis;揜Ҁacfhilors๿ງຊຏຒດຝະ໼rtialD;戂y;䐟r;쀀𝔓i;䎦;䎠usMinus;䂱Āipຢອncareplanåڝf;愙Ȁ;eio຺ູ໠໤檻cedesȀ;EST່້໏໚扺qual;檯lantEqual;扼ilde;找me;怳Ādp໩໮uct;戏ortionĀ;aȥ໹l;戝Āci༁༆r;쀀𝒫;䎨ȀUfos༑༖༛༟OT耻"䀢r;쀀𝔔pf;愚cr;쀀𝒬؀BEacefhiorsu༾གྷཇའཱིྦྷྪྭ႖ႩႴႾarr;椐G耻®䂮ƀcnrཎནབute;䅔g;柫rĀ;tཛྷཝ憠l;椖ƀaeyཧཬཱron;䅘dil;䅖;䐠Ā;vླྀཹ愜erseĀEUྂྙĀlq྇ྎement;戋uilibrium;懋pEquilibrium;楯r»ཹo;䎡ghtЀACDFTUVa࿁࿫࿳ဢဨၛႇϘĀnr࿆࿒gleBracket;柩rowƀ;BL࿜࿝࿡憒ar;懥eftArrow;懄eiling;按oǵ࿹\0စbleBracket;柧nǔည\0နeeVector;楝ectorĀ;Bဝသ懂ar;楕loor;挋Āerိ၃eƀ;AVဵံြ抢rrow;憦ector;楛iangleƀ;BEၐၑၕ抳ar;槐qual;抵pƀDTVၣၮၸownVector;楏eeVector;楜ectorĀ;Bႂႃ憾ar;楔ectorĀ;B႑႒懀ar;楓Āpuႛ႞f;愝ndImplies;楰ightarrow;懛ĀchႹႼr;愛;憱leDelayed;槴ڀHOacfhimoqstuფჱჷჽᄙᄞᅑᅖᅡᅧᆵᆻᆿĀCcჩხHcy;䐩y;䐨FTcy;䐬cute;䅚ʀ;aeiyᄈᄉᄎᄓᄗ檼ron;䅠dil;䅞rc;䅜;䐡r;쀀𝔖ortȀDLRUᄪᄴᄾᅉownArrow»ОeftArrow»࢚ightArrow»࿝pArrow;憑gma;䎣allCircle;战pf;쀀𝕊ɲᅭ\0\0ᅰt;戚areȀ;ISUᅻᅼᆉᆯ斡ntersection;抓uĀbpᆏᆞsetĀ;Eᆗᆘ抏qual;抑ersetĀ;Eᆨᆩ抐qual;抒nion;抔cr;쀀𝒮ar;拆ȀbcmpᇈᇛሉላĀ;sᇍᇎ拐etĀ;Eᇍᇕqual;抆ĀchᇠህeedsȀ;ESTᇭᇮᇴᇿ扻qual;檰lantEqual;扽ilde;承Tháྌ;我ƀ;esሒሓሣ拑rsetĀ;Eሜም抃qual;抇et»ሓրHRSacfhiorsሾቄ቉ቕ቞ቱቶኟዂወዑORN耻Þ䃞ADE;愢ĀHc቎ቒcy;䐋y;䐦Ābuቚቜ;䀉;䎤ƀaeyብቪቯron;䅤dil;䅢;䐢r;쀀𝔗Āeiቻ኉ǲኀ\0ኇefore;戴a;䎘Ācn኎ኘkSpace;쀀  Space;怉ldeȀ;EFTካኬኲኼ戼qual;扃ullEqual;扅ilde;扈pf;쀀𝕋ipleDot;惛Āctዖዛr;쀀𝒯rok;䅦ૡዷጎጚጦ\0ጬጱ\0\0\0\0\0ጸጽ፷ᎅ\0᏿ᐄᐊᐐĀcrዻጁute耻Ú䃚rĀ;oጇገ憟cir;楉rǣጓ\0጖y;䐎ve;䅬Āiyጞጣrc耻Û䃛;䐣blac;䅰r;쀀𝔘rave耻Ù䃙acr;䅪Ādiፁ፩erĀBPፈ፝Āarፍፐr;䁟acĀekፗፙ;揟et;掵arenthesis;揝onĀ;P፰፱拃lus;抎Āgp፻፿on;䅲f;쀀𝕌ЀADETadps᎕ᎮᎸᏄϨᏒᏗᏳrrowƀ;BDᅐᎠᎤar;椒ownArrow;懅ownArrow;憕quilibrium;楮eeĀ;AᏋᏌ报rrow;憥ownáϳerĀLRᏞᏨeftArrow;憖ightArrow;憗iĀ;lᏹᏺ䏒on;䎥ing;䅮cr;쀀𝒰ilde;䅨ml耻Ü䃜ҀDbcdefosvᐧᐬᐰᐳᐾᒅᒊᒐᒖash;披ar;櫫y;䐒ashĀ;lᐻᐼ抩;櫦Āerᑃᑅ;拁ƀbtyᑌᑐᑺar;怖Ā;iᑏᑕcalȀBLSTᑡᑥᑪᑴar;戣ine;䁼eparator;杘ilde;所ThinSpace;怊r;쀀𝔙pf;쀀𝕍cr;쀀𝒱dash;抪ʀcefosᒧᒬᒱᒶᒼirc;䅴dge;拀r;쀀𝔚pf;쀀𝕎cr;쀀𝒲Ȁfiosᓋᓐᓒᓘr;쀀𝔛;䎞pf;쀀𝕏cr;쀀𝒳ҀAIUacfosuᓱᓵᓹᓽᔄᔏᔔᔚᔠcy;䐯cy;䐇cy;䐮cute耻Ý䃝Āiyᔉᔍrc;䅶;䐫r;쀀𝔜pf;쀀𝕐cr;쀀𝒴ml;䅸ЀHacdefosᔵᔹᔿᕋᕏᕝᕠᕤcy;䐖cute;䅹Āayᕄᕉron;䅽;䐗ot;䅻ǲᕔ\0ᕛoWidtè૙a;䎖r;愨pf;愤cr;쀀𝒵௡ᖃᖊᖐ\0ᖰᖶᖿ\0\0\0\0ᗆᗛᗫᙟ᙭\0ᚕ᚛ᚲᚹ\0ᚾcute耻á䃡reve;䄃̀;Ediuyᖜᖝᖡᖣᖨᖭ戾;쀀∾̳;房rc耻â䃢te肻´̆;䐰lig耻æ䃦Ā;r²ᖺ;쀀𝔞rave耻à䃠ĀepᗊᗖĀfpᗏᗔsym;愵èᗓha;䎱ĀapᗟcĀclᗤᗧr;䄁g;樿ɤᗰ\0\0ᘊʀ;adsvᗺᗻᗿᘁᘇ戧nd;橕;橜lope;橘;橚΀;elmrszᘘᘙᘛᘞᘿᙏᙙ戠;榤e»ᘙsdĀ;aᘥᘦ戡ѡᘰᘲᘴᘶᘸᘺᘼᘾ;榨;榩;榪;榫;榬;榭;榮;榯tĀ;vᙅᙆ戟bĀ;dᙌᙍ抾;榝Āptᙔᙗh;戢»¹arr;捼Āgpᙣᙧon;䄅f;쀀𝕒΀;Eaeiop዁ᙻᙽᚂᚄᚇᚊ;橰cir;橯;扊d;手s;䀧roxĀ;e዁ᚒñᚃing耻å䃥ƀctyᚡᚦᚨr;쀀𝒶;䀪mpĀ;e዁ᚯñʈilde耻ã䃣ml耻ä䃤Āciᛂᛈoninôɲnt;樑ࠀNabcdefiklnoprsu᛭ᛱᜰ᜼ᝃᝈ᝸᝽០៦ᠹᡐᜍ᤽᥈ᥰot;櫭Ācrᛶ᜞kȀcepsᜀᜅᜍᜓong;扌psilon;䏶rime;怵imĀ;e᜚᜛戽q;拍Ŷᜢᜦee;抽edĀ;gᜬᜭ挅e»ᜭrkĀ;t፜᜷brk;掶Āoyᜁᝁ;䐱quo;怞ʀcmprtᝓ᝛ᝡᝤᝨausĀ;eĊĉptyv;榰séᜌnoõēƀahwᝯ᝱ᝳ;䎲;愶een;扬r;쀀𝔟g΀costuvwឍឝឳេ៕៛៞ƀaiuបពរðݠrc;旯p»፱ƀdptឤឨឭot;樀lus;樁imes;樂ɱឹ\0\0ើcup;樆ar;昅riangleĀdu៍្own;施p;斳plus;樄eåᑄåᒭarow;植ƀako៭ᠦᠵĀcn៲ᠣkƀlst៺֫᠂ozenge;槫riangleȀ;dlr᠒᠓᠘᠝斴own;斾eft;旂ight;斸k;搣Ʊᠫ\0ᠳƲᠯ\0ᠱ;斒;斑4;斓ck;斈ĀeoᠾᡍĀ;qᡃᡆ쀀=⃥uiv;쀀≡⃥t;挐Ȁptwxᡙᡞᡧᡬf;쀀𝕓Ā;tᏋᡣom»Ꮜtie;拈؀DHUVbdhmptuvᢅᢖᢪᢻᣗᣛᣬ᣿ᤅᤊᤐᤡȀLRlrᢎᢐᢒᢔ;敗;敔;敖;敓ʀ;DUduᢡᢢᢤᢦᢨ敐;敦;敩;敤;敧ȀLRlrᢳᢵᢷᢹ;敝;敚;敜;教΀;HLRhlrᣊᣋᣍᣏᣑᣓᣕ救;敬;散;敠;敫;敢;敟ox;槉ȀLRlrᣤᣦᣨᣪ;敕;敒;攐;攌ʀ;DUduڽ᣷᣹᣻᣽;敥;敨;攬;攴inus;抟lus;択imes;抠ȀLRlrᤙᤛᤝ᤟;敛;敘;攘;攔΀;HLRhlrᤰᤱᤳᤵᤷ᤻᤹攂;敪;敡;敞;攼;攤;攜Āevģ᥂bar耻¦䂦Ȁceioᥑᥖᥚᥠr;쀀𝒷mi;恏mĀ;e᜚᜜lƀ;bhᥨᥩᥫ䁜;槅sub;柈Ŭᥴ᥾lĀ;e᥹᥺怢t»᥺pƀ;Eeįᦅᦇ;檮Ā;qۜۛೡᦧ\0᧨ᨑᨕᨲ\0ᨷᩐ\0\0᪴\0\0᫁\0\0ᬡᬮ᭍᭒\0᯽\0ᰌƀcpr᦭ᦲ᧝ute;䄇̀;abcdsᦿᧀᧄ᧊᧕᧙戩nd;橄rcup;橉Āau᧏᧒p;橋p;橇ot;橀;쀀∩︀Āeo᧢᧥t;恁îړȀaeiu᧰᧻ᨁᨅǰ᧵\0᧸s;橍on;䄍dil耻ç䃧rc;䄉psĀ;sᨌᨍ橌m;橐ot;䄋ƀdmnᨛᨠᨦil肻¸ƭptyv;榲t脀¢;eᨭᨮ䂢räƲr;쀀𝔠ƀceiᨽᩀᩍy;䑇ckĀ;mᩇᩈ朓ark»ᩈ;䏇r΀;Ecefms᩟᩠ᩢᩫ᪤᪪᪮旋;槃ƀ;elᩩᩪᩭ䋆q;扗eɡᩴ\0\0᪈rrowĀlr᩼᪁eft;憺ight;憻ʀRSacd᪒᪔᪖᪚᪟»ཇ;擈st;抛irc;抚ash;抝nint;樐id;櫯cir;槂ubsĀ;u᪻᪼晣it»᪼ˬ᫇᫔᫺\0ᬊonĀ;eᫍᫎ䀺Ā;qÇÆɭ᫙\0\0᫢aĀ;t᫞᫟䀬;䁀ƀ;fl᫨᫩᫫戁îᅠeĀmx᫱᫶ent»᫩eóɍǧ᫾\0ᬇĀ;dኻᬂot;橭nôɆƀfryᬐᬔᬗ;쀀𝕔oäɔ脀©;sŕᬝr;愗Āaoᬥᬩrr;憵ss;朗Ācuᬲᬷr;쀀𝒸Ābpᬼ᭄Ā;eᭁᭂ櫏;櫑Ā;eᭉᭊ櫐;櫒dot;拯΀delprvw᭠᭬᭷ᮂᮬᯔ᯹arrĀlr᭨᭪;椸;椵ɰ᭲\0\0᭵r;拞c;拟arrĀ;p᭿ᮀ憶;椽̀;bcdosᮏᮐᮖᮡᮥᮨ截rcap;橈Āauᮛᮞp;橆p;橊ot;抍r;橅;쀀∪︀Ȁalrv᮵ᮿᯞᯣrrĀ;mᮼᮽ憷;椼yƀevwᯇᯔᯘqɰᯎ\0\0ᯒreã᭳uã᭵ee;拎edge;拏en耻¤䂤earrowĀlrᯮ᯳eft»ᮀight»ᮽeäᯝĀciᰁᰇoninôǷnt;戱lcty;挭ঀAHabcdefhijlorstuwz᰸᰻᰿ᱝᱩᱵᲊᲞᲬᲷ᳻᳿ᴍᵻᶑᶫᶻ᷆᷍rò΁ar;楥Ȁglrs᱈ᱍ᱒᱔ger;怠eth;愸òᄳhĀ;vᱚᱛ怐»ऊūᱡᱧarow;椏aã̕Āayᱮᱳron;䄏;䐴ƀ;ao̲ᱼᲄĀgrʿᲁr;懊tseq;橷ƀglmᲑᲔᲘ耻°䂰ta;䎴ptyv;榱ĀirᲣᲨsht;楿;쀀𝔡arĀlrᲳᲵ»ࣜ»သʀaegsv᳂͸᳖᳜᳠mƀ;oș᳊᳔ndĀ;ș᳑uit;晦amma;䏝in;拲ƀ;io᳧᳨᳸䃷de脀÷;o᳧ᳰntimes;拇nø᳷cy;䑒cɯᴆ\0\0ᴊrn;挞op;挍ʀlptuwᴘᴝᴢᵉᵕlar;䀤f;쀀𝕕ʀ;emps̋ᴭᴷᴽᵂqĀ;d͒ᴳot;扑inus;戸lus;戔quare;抡blebarwedgåúnƀadhᄮᵝᵧownarrowóᲃarpoonĀlrᵲᵶefôᲴighôᲶŢᵿᶅkaro÷གɯᶊ\0\0ᶎrn;挟op;挌ƀcotᶘᶣᶦĀryᶝᶡ;쀀𝒹;䑕l;槶rok;䄑Ādrᶰᶴot;拱iĀ;fᶺ᠖斿Āah᷀᷃ròЩaòྦangle;榦Āci᷒ᷕy;䑟grarr;柿ऀDacdefglmnopqrstuxḁḉḙḸոḼṉṡṾấắẽỡἪἷὄ὎὚ĀDoḆᴴoôᲉĀcsḎḔute耻é䃩ter;橮ȀaioyḢḧḱḶron;䄛rĀ;cḭḮ扖耻ê䃪lon;払;䑍ot;䄗ĀDrṁṅot;扒;쀀𝔢ƀ;rsṐṑṗ檚ave耻è䃨Ā;dṜṝ檖ot;檘Ȁ;ilsṪṫṲṴ檙nters;揧;愓Ā;dṹṺ檕ot;檗ƀapsẅẉẗcr;䄓tyƀ;svẒẓẕ戅et»ẓpĀ1;ẝẤĳạả;怄;怅怃ĀgsẪẬ;䅋p;怂ĀgpẴẸon;䄙f;쀀𝕖ƀalsỄỎỒrĀ;sỊị拕l;槣us;橱iƀ;lvỚớở䎵on»ớ;䏵ȀcsuvỪỳἋἣĀioữḱrc»Ḯɩỹ\0\0ỻíՈantĀglἂἆtr»ṝess»Ṻƀaeiἒ἖Ἒls;䀽st;扟vĀ;DȵἠD;橸parsl;槥ĀDaἯἳot;打rr;楱ƀcdiἾὁỸr;愯oô͒ĀahὉὋ;䎷耻ð䃰Āmrὓὗl耻ë䃫o;悬ƀcipὡὤὧl;䀡sôծĀeoὬὴctatioîՙnentialåչৡᾒ\0ᾞ\0ᾡᾧ\0\0ῆῌ\0ΐ\0ῦῪ \0 ⁚llingdotseñṄy;䑄male;晀ƀilrᾭᾳ῁lig;耀ﬃɩᾹ\0\0᾽g;耀ﬀig;耀ﬄ;쀀𝔣lig;耀ﬁlig;쀀fjƀaltῙ῜ῡt;晭ig;耀ﬂns;斱of;䆒ǰ΅\0ῳf;쀀𝕗ĀakֿῷĀ;vῼ´拔;櫙artint;樍Āao‌⁕Ācs‑⁒α‚‰‸⁅⁈\0⁐β•‥‧‪‬\0‮耻½䂽;慓耻¼䂼;慕;慙;慛Ƴ‴\0‶;慔;慖ʴ‾⁁\0\0⁃耻¾䂾;慗;慜5;慘ƶ⁌\0⁎;慚;慝8;慞l;恄wn;挢cr;쀀𝒻ࢀEabcdefgijlnorstv₂₉₟₥₰₴⃰⃵⃺⃿℃ℒℸ̗ℾ⅒↞Ā;lٍ₇;檌ƀcmpₐₕ₝ute;䇵maĀ;dₜ᳚䎳;檆reve;䄟Āiy₪₮rc;䄝;䐳ot;䄡Ȁ;lqsؾق₽⃉ƀ;qsؾٌ⃄lanô٥Ȁ;cdl٥⃒⃥⃕c;檩otĀ;o⃜⃝檀Ā;l⃢⃣檂;檄Ā;e⃪⃭쀀⋛︀s;檔r;쀀𝔤Ā;gٳ؛mel;愷cy;䑓Ȁ;Eajٚℌℎℐ;檒;檥;檤ȀEaesℛℝ℩ℴ;扩pĀ;p℣ℤ檊rox»ℤĀ;q℮ℯ檈Ā;q℮ℛim;拧pf;쀀𝕘Āci⅃ⅆr;愊mƀ;el٫ⅎ⅐;檎;檐茀>;cdlqr׮ⅠⅪⅮⅳⅹĀciⅥⅧ;檧r;橺ot;拗Par;榕uest;橼ʀadelsↄⅪ←ٖ↛ǰ↉\0↎proø₞r;楸qĀlqؿ↖lesó₈ií٫Āen↣↭rtneqq;쀀≩︀Å↪ԀAabcefkosy⇄⇇⇱⇵⇺∘∝∯≨≽ròΠȀilmr⇐⇔⇗⇛rsðᒄf»․ilôکĀdr⇠⇤cy;䑊ƀ;cwࣴ⇫⇯ir;楈;憭ar;意irc;䄥ƀalr∁∎∓rtsĀ;u∉∊晥it»∊lip;怦con;抹r;쀀𝔥sĀew∣∩arow;椥arow;椦ʀamopr∺∾≃≞≣rr;懿tht;戻kĀlr≉≓eftarrow;憩ightarrow;憪f;쀀𝕙bar;怕ƀclt≯≴≸r;쀀𝒽asè⇴rok;䄧Ābp⊂⊇ull;恃hen»ᱛૡ⊣\0⊪\0⊸⋅⋎\0⋕⋳\0\0⋸⌢⍧⍢⍿\0⎆⎪⎴cute耻í䃭ƀ;iyݱ⊰⊵rc耻î䃮;䐸Ācx⊼⊿y;䐵cl耻¡䂡ĀfrΟ⋉;쀀𝔦rave耻ì䃬Ȁ;inoܾ⋝⋩⋮Āin⋢⋦nt;樌t;戭fin;槜ta;愩lig;䄳ƀaop⋾⌚⌝ƀcgt⌅⌈⌗r;䄫ƀelpܟ⌏⌓inåގarôܠh;䄱f;抷ed;䆵ʀ;cfotӴ⌬⌱⌽⍁are;愅inĀ;t⌸⌹戞ie;槝doô⌙ʀ;celpݗ⍌⍐⍛⍡al;抺Āgr⍕⍙eróᕣã⍍arhk;樗rod;樼Ȁcgpt⍯⍲⍶⍻y;䑑on;䄯f;쀀𝕚a;䎹uest耻¿䂿Āci⎊⎏r;쀀𝒾nʀ;EdsvӴ⎛⎝⎡ӳ;拹ot;拵Ā;v⎦⎧拴;拳Ā;iݷ⎮lde;䄩ǫ⎸\0⎼cy;䑖l耻ï䃯̀cfmosu⏌⏗⏜⏡⏧⏵Āiy⏑⏕rc;䄵;䐹r;쀀𝔧ath;䈷pf;쀀𝕛ǣ⏬\0⏱r;쀀𝒿rcy;䑘kcy;䑔Ѐacfghjos␋␖␢␧␭␱␵␻ppaĀ;v␓␔䎺;䏰Āey␛␠dil;䄷;䐺r;쀀𝔨reen;䄸cy;䑅cy;䑜pf;쀀𝕜cr;쀀𝓀஀ABEHabcdefghjlmnoprstuv⑰⒁⒆⒍⒑┎┽╚▀♎♞♥♹♽⚚⚲⛘❝❨➋⟀⠁⠒ƀart⑷⑺⑼rò৆òΕail;椛arr;椎Ā;gঔ⒋;檋ar;楢ॣ⒥\0⒪\0⒱\0\0\0\0\0⒵Ⓔ\0ⓆⓈⓍ\0⓹ute;䄺mptyv;榴raîࡌbda;䎻gƀ;dlࢎⓁⓃ;榑åࢎ;檅uo耻«䂫rЀ;bfhlpst࢙ⓞⓦⓩ⓫⓮⓱⓵Ā;f࢝ⓣs;椟s;椝ë≒p;憫l;椹im;楳l;憢ƀ;ae⓿─┄檫il;椙Ā;s┉┊檭;쀀⪭︀ƀabr┕┙┝rr;椌rk;杲Āak┢┬cĀek┨┪;䁻;䁛Āes┱┳;榋lĀdu┹┻;榏;榍Ȁaeuy╆╋╖╘ron;䄾Ādi═╔il;䄼ìࢰâ┩;䐻Ȁcqrs╣╦╭╽a;椶uoĀ;rนᝆĀdu╲╷har;楧shar;楋h;憲ʀ;fgqs▋▌উ◳◿扤tʀahlrt▘▤▷◂◨rrowĀ;t࢙□aé⓶arpoonĀdu▯▴own»њp»०eftarrows;懇ightƀahs◍◖◞rrowĀ;sࣴࢧarpoonó྘quigarro÷⇰hreetimes;拋ƀ;qs▋ও◺lanôবʀ;cdgsব☊☍☝☨c;檨otĀ;o☔☕橿Ā;r☚☛檁;檃Ā;e☢☥쀀⋚︀s;檓ʀadegs☳☹☽♉♋pproøⓆot;拖qĀgq♃♅ôউgtò⒌ôছiíলƀilr♕࣡♚sht;楼;쀀𝔩Ā;Eজ♣;檑š♩♶rĀdu▲♮Ā;l॥♳;楪lk;斄cy;䑙ʀ;achtੈ⚈⚋⚑⚖rò◁orneòᴈard;楫ri;旺Āio⚟⚤dot;䅀ustĀ;a⚬⚭掰che»⚭ȀEaes⚻⚽⛉⛔;扨pĀ;p⛃⛄檉rox»⛄Ā;q⛎⛏檇Ā;q⛎⚻im;拦Ѐabnoptwz⛩⛴⛷✚✯❁❇❐Ānr⛮⛱g;柬r;懽rëࣁgƀlmr⛿✍✔eftĀar০✇ightá৲apsto;柼ightá৽parrowĀlr✥✩efô⓭ight;憬ƀafl✶✹✽r;榅;쀀𝕝us;樭imes;樴š❋❏st;戗áፎƀ;ef❗❘᠀旊nge»❘arĀ;l❤❥䀨t;榓ʀachmt❳❶❼➅➇ròࢨorneòᶌarĀ;d྘➃;業;怎ri;抿̀achiqt➘➝ੀ➢➮➻quo;怹r;쀀𝓁mƀ;egল➪➬;檍;檏Ābu┪➳oĀ;rฟ➹;怚rok;䅂萀<;cdhilqrࠫ⟒☹⟜⟠⟥⟪⟰Āci⟗⟙;檦r;橹reå◲mes;拉arr;楶uest;橻ĀPi⟵⟹ar;榖ƀ;ef⠀भ᠛旃rĀdu⠇⠍shar;楊har;楦Āen⠗⠡rtneqq;쀀≨︀Å⠞܀Dacdefhilnopsu⡀⡅⢂⢎⢓⢠⢥⢨⣚⣢⣤ઃ⣳⤂Dot;戺Ȁclpr⡎⡒⡣⡽r耻¯䂯Āet⡗⡙;時Ā;e⡞⡟朠se»⡟Ā;sျ⡨toȀ;dluျ⡳⡷⡻owîҌefôएðᏑker;斮Āoy⢇⢌mma;権;䐼ash;怔asuredangle»ᘦr;쀀𝔪o;愧ƀcdn⢯⢴⣉ro耻µ䂵Ȁ;acdᑤ⢽⣀⣄sôᚧir;櫰ot肻·Ƶusƀ;bd⣒ᤃ⣓戒Ā;uᴼ⣘;横ţ⣞⣡p;櫛ò−ðઁĀdp⣩⣮els;抧f;쀀𝕞Āct⣸⣽r;쀀𝓂pos»ᖝƀ;lm⤉⤊⤍䎼timap;抸ఀGLRVabcdefghijlmoprstuvw⥂⥓⥾⦉⦘⧚⧩⨕⨚⩘⩝⪃⪕⪤⪨⬄⬇⭄⭿⮮ⰴⱧⱼ⳩Āgt⥇⥋;쀀⋙̸Ā;v⥐௏쀀≫⃒ƀelt⥚⥲⥶ftĀar⥡⥧rrow;懍ightarrow;懎;쀀⋘̸Ā;v⥻ే쀀≪⃒ightarrow;懏ĀDd⦎⦓ash;抯ash;抮ʀbcnpt⦣⦧⦬⦱⧌la»˞ute;䅄g;쀀∠⃒ʀ;Eiop඄⦼⧀⧅⧈;쀀⩰̸d;쀀≋̸s;䅉roø඄urĀ;a⧓⧔普lĀ;s⧓ସǳ⧟\0⧣p肻 ଷmpĀ;e௹ఀʀaeouy⧴⧾⨃⨐⨓ǰ⧹\0⧻;橃on;䅈dil;䅆ngĀ;dൾ⨊ot;쀀⩭̸p;橂;䐽ash;怓΀;Aadqsxஒ⨩⨭⨻⩁⩅⩐rr;懗rĀhr⨳⨶k;椤Ā;oᏲᏰot;쀀≐̸uiöୣĀei⩊⩎ar;椨í஘istĀ;s஠டr;쀀𝔫ȀEest௅⩦⩹⩼ƀ;qs஼⩭௡ƀ;qs஼௅⩴lanô௢ií௪Ā;rஶ⪁»ஷƀAap⪊⪍⪑rò⥱rr;憮ar;櫲ƀ;svྍ⪜ྌĀ;d⪡⪢拼;拺cy;䑚΀AEadest⪷⪺⪾⫂⫅⫶⫹rò⥦;쀀≦̸rr;憚r;急Ȁ;fqs఻⫎⫣⫯tĀar⫔⫙rro÷⫁ightarro÷⪐ƀ;qs఻⪺⫪lanôౕĀ;sౕ⫴»శiíౝĀ;rవ⫾iĀ;eచథiäඐĀpt⬌⬑f;쀀𝕟膀¬;in⬙⬚⬶䂬nȀ;Edvஉ⬤⬨⬮;쀀⋹̸ot;쀀⋵̸ǡஉ⬳⬵;拷;拶iĀ;vಸ⬼ǡಸ⭁⭃;拾;拽ƀaor⭋⭣⭩rȀ;ast୻⭕⭚⭟lleì୻l;쀀⫽⃥;쀀∂̸lint;樔ƀ;ceಒ⭰⭳uåಥĀ;cಘ⭸Ā;eಒ⭽ñಘȀAait⮈⮋⮝⮧rò⦈rrƀ;cw⮔⮕⮙憛;쀀⤳̸;쀀↝̸ghtarrow»⮕riĀ;eೋೖ΀chimpqu⮽⯍⯙⬄୸⯤⯯Ȁ;cerല⯆ഷ⯉uå൅;쀀𝓃ortɭ⬅\0\0⯖ará⭖mĀ;e൮⯟Ā;q൴൳suĀbp⯫⯭å೸åഋƀbcp⯶ⰑⰙȀ;Ees⯿ⰀഢⰄ抄;쀀⫅̸etĀ;eഛⰋqĀ;qണⰀcĀ;eലⰗñസȀ;EesⰢⰣൟⰧ抅;쀀⫆̸etĀ;e൘ⰮqĀ;qൠⰣȀgilrⰽⰿⱅⱇìௗlde耻ñ䃱çృiangleĀlrⱒⱜeftĀ;eచⱚñదightĀ;eೋⱥñ೗Ā;mⱬⱭ䎽ƀ;esⱴⱵⱹ䀣ro;愖p;怇ҀDHadgilrsⲏⲔⲙⲞⲣⲰⲶⳓⳣash;抭arr;椄p;쀀≍⃒ash;抬ĀetⲨⲬ;쀀≥⃒;쀀>⃒nfin;槞ƀAetⲽⳁⳅrr;椂;쀀≤⃒Ā;rⳊⳍ쀀<⃒ie;쀀⊴⃒ĀAtⳘⳜrr;椃rie;쀀⊵⃒im;쀀∼⃒ƀAan⳰⳴ⴂrr;懖rĀhr⳺⳽k;椣Ā;oᏧᏥear;椧ቓ᪕\0\0\0\0\0\0\0\0\0\0\0\0\0ⴭ\0ⴸⵈⵠⵥ⵲ⶄᬇ\0\0ⶍⶫ\0ⷈⷎ\0ⷜ⸙⸫⸾⹃Ācsⴱ᪗ute耻ó䃳ĀiyⴼⵅrĀ;c᪞ⵂ耻ô䃴;䐾ʀabios᪠ⵒⵗǈⵚlac;䅑v;樸old;榼lig;䅓Ācr⵩⵭ir;榿;쀀𝔬ͯ⵹\0\0⵼\0ⶂn;䋛ave耻ò䃲;槁Ābmⶈ෴ar;榵Ȁacitⶕ⶘ⶥⶨrò᪀Āir⶝ⶠr;榾oss;榻nå๒;槀ƀaeiⶱⶵⶹcr;䅍ga;䏉ƀcdnⷀⷅǍron;䎿;榶pf;쀀𝕠ƀaelⷔ⷗ǒr;榷rp;榹΀;adiosvⷪⷫⷮ⸈⸍⸐⸖戨rò᪆Ȁ;efmⷷⷸ⸂⸅橝rĀ;oⷾⷿ愴f»ⷿ耻ª䂪耻º䂺gof;抶r;橖lope;橗;橛ƀclo⸟⸡⸧ò⸁ash耻ø䃸l;折iŬⸯ⸴de耻õ䃵esĀ;aǛ⸺s;樶ml耻ö䃶bar;挽ૡ⹞\0⹽\0⺀⺝\0⺢⺹\0\0⻋ຜ\0⼓\0\0⼫⾼\0⿈rȀ;astЃ⹧⹲຅脀¶;l⹭⹮䂶leìЃɩ⹸\0\0⹻m;櫳;櫽y;䐿rʀcimpt⺋⺏⺓ᡥ⺗nt;䀥od;䀮il;怰enk;怱r;쀀𝔭ƀimo⺨⺰⺴Ā;v⺭⺮䏆;䏕maô੶ne;明ƀ;tv⺿⻀⻈䏀chfork»´;䏖Āau⻏⻟nĀck⻕⻝kĀ;h⇴⻛;愎ö⇴sҀ;abcdemst⻳⻴ᤈ⻹⻽⼄⼆⼊⼎䀫cir;樣ir;樢Āouᵀ⼂;樥;橲n肻±ຝim;樦wo;樧ƀipu⼙⼠⼥ntint;樕f;쀀𝕡nd耻£䂣Ԁ;Eaceinosu່⼿⽁⽄⽇⾁⾉⾒⽾⾶;檳p;檷uå໙Ā;c໎⽌̀;acens່⽙⽟⽦⽨⽾pproø⽃urlyeñ໙ñ໎ƀaes⽯⽶⽺pprox;檹qq;檵im;拨iíໟmeĀ;s⾈ຮ怲ƀEas⽸⾐⽺ð⽵ƀdfp໬⾙⾯ƀals⾠⾥⾪lar;挮ine;挒urf;挓Ā;t໻⾴ï໻rel;抰Āci⿀⿅r;쀀𝓅;䏈ncsp;怈̀fiopsu⿚⋢⿟⿥⿫⿱r;쀀𝔮pf;쀀𝕢rime;恗cr;쀀𝓆ƀaeo⿸〉〓tĀei⿾々rnionóڰnt;樖stĀ;e【】䀿ñἙô༔઀ABHabcdefhilmnoprstux぀けさすムㄎㄫㅇㅢㅲㆎ㈆㈕㈤㈩㉘㉮㉲㊐㊰㊷ƀartぇおがròႳòϝail;検aròᱥar;楤΀cdenqrtとふへみわゔヌĀeuねぱ;쀀∽̱te;䅕iãᅮmptyv;榳gȀ;del࿑らるろ;榒;榥å࿑uo耻»䂻rր;abcfhlpstw࿜ガクシスゼゾダッデナp;極Ā;f࿠ゴs;椠;椳s;椞ë≝ð✮l;楅im;楴l;憣;憝Āaiパフil;椚oĀ;nホボ戶aló༞ƀabrョリヮrò៥rk;杳ĀakンヽcĀekヹ・;䁽;䁝Āes㄂㄄;榌lĀduㄊㄌ;榎;榐Ȁaeuyㄗㄜㄧㄩron;䅙Ādiㄡㄥil;䅗ì࿲âヺ;䑀Ȁclqsㄴㄷㄽㅄa;椷dhar;楩uoĀ;rȎȍh;憳ƀacgㅎㅟངlȀ;ipsླྀㅘㅛႜnåႻarôྩt;断ƀilrㅩဣㅮsht;楽;쀀𝔯ĀaoㅷㆆrĀduㅽㅿ»ѻĀ;l႑ㆄ;楬Ā;vㆋㆌ䏁;䏱ƀgns㆕ㇹㇼht̀ahlrstㆤㆰ㇂㇘㇤㇮rrowĀ;t࿜ㆭaéトarpoonĀduㆻㆿowîㅾp»႒eftĀah㇊㇐rrowó࿪arpoonóՑightarrows;應quigarro÷ニhreetimes;拌g;䋚ingdotseñἲƀahm㈍㈐㈓rò࿪aòՑ;怏oustĀ;a㈞㈟掱che»㈟mid;櫮Ȁabpt㈲㈽㉀㉒Ānr㈷㈺g;柭r;懾rëဃƀafl㉇㉊㉎r;榆;쀀𝕣us;樮imes;樵Āap㉝㉧rĀ;g㉣㉤䀩t;榔olint;樒arò㇣Ȁachq㉻㊀Ⴜ㊅quo;怺r;쀀𝓇Ābu・㊊oĀ;rȔȓƀhir㊗㊛㊠reåㇸmes;拊iȀ;efl㊪ၙᠡ㊫方tri;槎luhar;楨;愞ൡ㋕㋛㋟㌬㌸㍱\0㍺㎤\0\0㏬㏰\0㐨㑈㑚㒭㒱㓊㓱\0㘖\0\0㘳cute;䅛quï➺Ԁ;Eaceinpsyᇭ㋳㋵㋿㌂㌋㌏㌟㌦㌩;檴ǰ㋺\0㋼;檸on;䅡uåᇾĀ;dᇳ㌇il;䅟rc;䅝ƀEas㌖㌘㌛;檶p;檺im;择olint;樓iíሄ;䑁otƀ;be㌴ᵇ㌵担;橦΀Aacmstx㍆㍊㍗㍛㍞㍣㍭rr;懘rĀhr㍐㍒ë∨Ā;oਸ਼਴t耻§䂧i;䀻war;椩mĀin㍩ðnuóñt;朶rĀ;o㍶⁕쀀𝔰Ȁacoy㎂㎆㎑㎠rp;景Āhy㎋㎏cy;䑉;䑈rtɭ㎙\0\0㎜iäᑤaraì⹯耻­䂭Āgm㎨㎴maƀ;fv㎱㎲㎲䏃;䏂Ѐ;deglnprካ㏅㏉㏎㏖㏞㏡㏦ot;橪Ā;q኱ኰĀ;E㏓㏔檞;檠Ā;E㏛㏜檝;檟e;扆lus;樤arr;楲aròᄽȀaeit㏸㐈㐏㐗Āls㏽㐄lsetmé㍪hp;樳parsl;槤Ādlᑣ㐔e;挣Ā;e㐜㐝檪Ā;s㐢㐣檬;쀀⪬︀ƀflp㐮㐳㑂tcy;䑌Ā;b㐸㐹䀯Ā;a㐾㐿槄r;挿f;쀀𝕤aĀdr㑍ЂesĀ;u㑔㑕晠it»㑕ƀcsu㑠㑹㒟Āau㑥㑯pĀ;sᆈ㑫;쀀⊓︀pĀ;sᆴ㑵;쀀⊔︀uĀbp㑿㒏ƀ;esᆗᆜ㒆etĀ;eᆗ㒍ñᆝƀ;esᆨᆭ㒖etĀ;eᆨ㒝ñᆮƀ;afᅻ㒦ְrť㒫ֱ»ᅼaròᅈȀcemt㒹㒾㓂㓅r;쀀𝓈tmîñiì㐕aræᆾĀar㓎㓕rĀ;f㓔ឿ昆Āan㓚㓭ightĀep㓣㓪psiloîỠhé⺯s»⡒ʀbcmnp㓻㕞ሉ㖋㖎Ҁ;Edemnprs㔎㔏㔑㔕㔞㔣㔬㔱㔶抂;櫅ot;檽Ā;dᇚ㔚ot;櫃ult;櫁ĀEe㔨㔪;櫋;把lus;檿arr;楹ƀeiu㔽㕒㕕tƀ;en㔎㕅㕋qĀ;qᇚ㔏eqĀ;q㔫㔨m;櫇Ābp㕚㕜;櫕;櫓c̀;acensᇭ㕬㕲㕹㕻㌦pproø㋺urlyeñᇾñᇳƀaes㖂㖈㌛pproø㌚qñ㌗g;晪ڀ123;Edehlmnps㖩㖬㖯ሜ㖲㖴㗀㗉㗕㗚㗟㗨㗭耻¹䂹耻²䂲耻³䂳;櫆Āos㖹㖼t;檾ub;櫘Ā;dሢ㗅ot;櫄sĀou㗏㗒l;柉b;櫗arr;楻ult;櫂ĀEe㗤㗦;櫌;抋lus;櫀ƀeiu㗴㘉㘌tƀ;enሜ㗼㘂qĀ;qሢ㖲eqĀ;q㗧㗤m;櫈Ābp㘑㘓;櫔;櫖ƀAan㘜㘠㘭rr;懙rĀhr㘦㘨ë∮Ā;oਫ਩war;椪lig耻ß䃟௡㙑㙝㙠ዎ㙳㙹\0㙾㛂\0\0\0\0\0㛛㜃\0㜉㝬\0\0\0㞇ɲ㙖\0\0㙛get;挖;䏄rë๟ƀaey㙦㙫㙰ron;䅥dil;䅣;䑂lrec;挕r;쀀𝔱Ȁeiko㚆㚝㚵㚼ǲ㚋\0㚑eĀ4fኄኁaƀ;sv㚘㚙㚛䎸ym;䏑Ācn㚢㚲kĀas㚨㚮pproø዁im»ኬsðኞĀas㚺㚮ð዁rn耻þ䃾Ǭ̟㛆⋧es膀×;bd㛏㛐㛘䃗Ā;aᤏ㛕r;樱;樰ƀeps㛡㛣㜀á⩍Ȁ;bcf҆㛬㛰㛴ot;挶ir;櫱Ā;o㛹㛼쀀𝕥rk;櫚á㍢rime;怴ƀaip㜏㜒㝤dåቈ΀adempst㜡㝍㝀㝑㝗㝜㝟ngleʀ;dlqr㜰㜱㜶㝀㝂斵own»ᶻeftĀ;e⠀㜾ñम;扜ightĀ;e㊪㝋ñၚot;旬inus;樺lus;樹b;槍ime;樻ezium;揢ƀcht㝲㝽㞁Āry㝷㝻;쀀𝓉;䑆cy;䑛rok;䅧Āio㞋㞎xô᝷headĀlr㞗㞠eftarro÷ࡏightarrow»ཝऀAHabcdfghlmoprstuw㟐㟓㟗㟤㟰㟼㠎㠜㠣㠴㡑㡝㡫㢩㣌㣒㣪㣶ròϭar;楣Ācr㟜㟢ute耻ú䃺òᅐrǣ㟪\0㟭y;䑞ve;䅭Āiy㟵㟺rc耻û䃻;䑃ƀabh㠃㠆㠋ròᎭlac;䅱aòᏃĀir㠓㠘sht;楾;쀀𝔲rave耻ù䃹š㠧㠱rĀlr㠬㠮»ॗ»ႃlk;斀Āct㠹㡍ɯ㠿\0\0㡊rnĀ;e㡅㡆挜r»㡆op;挏ri;旸Āal㡖㡚cr;䅫肻¨͉Āgp㡢㡦on;䅳f;쀀𝕦̀adhlsuᅋ㡸㡽፲㢑㢠ownáᎳarpoonĀlr㢈㢌efô㠭ighô㠯iƀ;hl㢙㢚㢜䏅»ᏺon»㢚parrows;懈ƀcit㢰㣄㣈ɯ㢶\0\0㣁rnĀ;e㢼㢽挝r»㢽op;挎ng;䅯ri;旹cr;쀀𝓊ƀdir㣙㣝㣢ot;拰lde;䅩iĀ;f㜰㣨»᠓Āam㣯㣲rò㢨l耻ü䃼angle;榧ހABDacdeflnoprsz㤜㤟㤩㤭㦵㦸㦽㧟㧤㧨㧳㧹㧽㨁㨠ròϷarĀ;v㤦㤧櫨;櫩asèϡĀnr㤲㤷grt;榜΀eknprst㓣㥆㥋㥒㥝㥤㦖appá␕othinçẖƀhir㓫⻈㥙opô⾵Ā;hᎷ㥢ïㆍĀiu㥩㥭gmá㎳Ābp㥲㦄setneqĀ;q㥽㦀쀀⊊︀;쀀⫋︀setneqĀ;q㦏㦒쀀⊋︀;쀀⫌︀Āhr㦛㦟etá㚜iangleĀlr㦪㦯eft»थight»ၑy;䐲ash»ံƀelr㧄㧒㧗ƀ;beⷪ㧋㧏ar;抻q;扚lip;拮Ābt㧜ᑨaòᑩr;쀀𝔳tré㦮suĀbp㧯㧱»ജ»൙pf;쀀𝕧roð໻tré㦴Ācu㨆㨋r;쀀𝓋Ābp㨐㨘nĀEe㦀㨖»㥾nĀEe㦒㨞»㦐igzag;榚΀cefoprs㨶㨻㩖㩛㩔㩡㩪irc;䅵Ādi㩀㩑Ābg㩅㩉ar;機eĀ;qᗺ㩏;扙erp;愘r;쀀𝔴pf;쀀𝕨Ā;eᑹ㩦atèᑹcr;쀀𝓌ૣណ㪇\0㪋\0㪐㪛\0\0㪝㪨㪫㪯\0\0㫃㫎\0㫘ៜ៟tré៑r;쀀𝔵ĀAa㪔㪗ròσrò৶;䎾ĀAa㪡㪤ròθrò৫að✓is;拻ƀdptឤ㪵㪾Āfl㪺ឩ;쀀𝕩imåឲĀAa㫇㫊ròώròਁĀcq㫒ីr;쀀𝓍Āpt៖㫜ré។Ѐacefiosu㫰㫽㬈㬌㬑㬕㬛㬡cĀuy㫶㫻te耻ý䃽;䑏Āiy㬂㬆rc;䅷;䑋n耻¥䂥r;쀀𝔶cy;䑗pf;쀀𝕪cr;쀀𝓎Ācm㬦㬩y;䑎l耻ÿ䃿Ԁacdefhiosw㭂㭈㭔㭘㭤㭩㭭㭴㭺㮀cute;䅺Āay㭍㭒ron;䅾;䐷ot;䅼Āet㭝㭡træᕟa;䎶r;쀀𝔷cy;䐶grarr;懝pf;쀀𝕫cr;쀀𝓏Ājn㮅㮇;怍j;怌'.split("").map((t=>t.charCodeAt(0)))),N=new Uint16Array("Ȁaglq\tɭ\0\0p;䀦os;䀧t;䀾t;䀼uot;䀢".split("").map((t=>t.charCodeAt(0))));const O=new Map([[0,65533],[128,8364],[130,8218],[131,402],[132,8222],[133,8230],[134,8224],[135,8225],[136,710],[137,8240],[138,352],[139,8249],[140,338],[142,381],[145,8216],[146,8217],[147,8220],[148,8221],[149,8226],[150,8211],[151,8212],[152,732],[153,8482],[154,353],[155,8250],[156,339],[158,382],[159,376]]),R=null!==(T=String.fromCodePoint)&&void 0!==T?T:function(t){let e="";return t>65535&&(t-=65536,e+=String.fromCharCode(t>>>10&1023|55296),t=56320|1023&t),e+=String.fromCharCode(t),e};var L;!function(t){t[t.NUM=35]="NUM",t[t.SEMI=59]="SEMI",t[t.EQUALS=61]="EQUALS",t[t.ZERO=48]="ZERO",t[t.NINE=57]="NINE",t[t.LOWER_A=97]="LOWER_A",t[t.LOWER_F=102]="LOWER_F",t[t.LOWER_X=120]="LOWER_X",t[t.LOWER_Z=122]="LOWER_Z",t[t.UPPER_A=65]="UPPER_A",t[t.UPPER_F=70]="UPPER_F",t[t.UPPER_Z=90]="UPPER_Z"}(L||(L={}));var I,P,M,D,j,F;function q(t){return t>=L.ZERO&&t<=L.NINE}function B(t){return t>=L.UPPER_A&&t<=L.UPPER_F||t>=L.LOWER_A&&t<=L.LOWER_F}function U(t){return t===L.EQUALS||function(t){return t>=L.UPPER_A&&t<=L.UPPER_Z||t>=L.LOWER_A&&t<=L.LOWER_Z||q(t)}(t)}!function(t){t[t.VALUE_LENGTH=49152]="VALUE_LENGTH",t[t.BRANCH_LENGTH=16256]="BRANCH_LENGTH",t[t.JUMP_TABLE=127]="JUMP_TABLE"}(I||(I={})),function(t){t[t.EntityStart=0]="EntityStart",t[t.NumericStart=1]="NumericStart",t[t.NumericDecimal=2]="NumericDecimal",t[t.NumericHex=3]="NumericHex",t[t.NamedEntity=4]="NamedEntity"}(P||(P={})),function(t){t[t.Legacy=0]="Legacy",t[t.Strict=1]="Strict",t[t.Attribute=2]="Attribute"}(M||(M={}));class V{constructor(t,e,r){this.decodeTree=t,this.emitCodePoint=e,this.errors=r,this.state=P.EntityStart,this.consumed=1,this.result=0,this.treeIndex=0,this.excess=1,this.decodeMode=M.Strict}startEntity(t){this.decodeMode=t,this.state=P.EntityStart,this.result=0,this.treeIndex=0,this.excess=1,this.consumed=1}write(t,e){switch(this.state){case P.EntityStart:return t.charCodeAt(e)===L.NUM?(this.state=P.NumericStart,this.consumed+=1,this.stateNumericStart(t,e+1)):(this.state=P.NamedEntity,this.stateNamedEntity(t,e));case P.NumericStart:return this.stateNumericStart(t,e);case P.NumericDecimal:return this.stateNumericDecimal(t,e);case P.NumericHex:return this.stateNumericHex(t,e);case P.NamedEntity:return this.stateNamedEntity(t,e)}}stateNumericStart(t,e){return e>=t.length?-1:(32|t.charCodeAt(e))===L.LOWER_X?(this.state=P.NumericHex,this.consumed+=1,this.stateNumericHex(t,e+1)):(this.state=P.NumericDecimal,this.stateNumericDecimal(t,e))}addToNumericResult(t,e,r,n){if(e!==r){const i=r-e;this.result=this.result*Math.pow(n,i)+parseInt(t.substr(e,i),n),this.consumed+=i}}stateNumericHex(t,e){const r=e;for(;e<t.length;){const n=t.charCodeAt(e);if(!q(n)&&!B(n))return this.addToNumericResult(t,r,e,16),this.emitNumericEntity(n,3);e+=1}return this.addToNumericResult(t,r,e,16),-1}stateNumericDecimal(t,e){const r=e;for(;e<t.length;){const n=t.charCodeAt(e);if(!q(n))return this.addToNumericResult(t,r,e,10),this.emitNumericEntity(n,2);e+=1}return this.addToNumericResult(t,r,e,10),-1}emitNumericEntity(t,e){var r;if(this.consumed<=e)return null===(r=this.errors)||void 0===r||r.absenceOfDigitsInNumericCharacterReference(this.consumed),0;if(t===L.SEMI)this.consumed+=1;else if(this.decodeMode===M.Strict)return 0;return this.emitCodePoint(function(t){var e;return t>=55296&&t<=57343||t>1114111?65533:null!==(e=O.get(t))&&void 0!==e?e:t}(this.result),this.consumed),this.errors&&(t!==L.SEMI&&this.errors.missingSemicolonAfterCharacterReference(),this.errors.validateNumericCharacterReference(this.result)),this.consumed}stateNamedEntity(t,e){const{decodeTree:r}=this;let n=r[this.treeIndex],i=(n&I.VALUE_LENGTH)>>14;for(;e<t.length;e++,this.excess++){const o=t.charCodeAt(e);if(this.treeIndex=G(r,n,this.treeIndex+Math.max(1,i),o),this.treeIndex<0)return 0===this.result||this.decodeMode===M.Attribute&&(0===i||U(o))?0:this.emitNotTerminatedNamedEntity();if(n=r[this.treeIndex],i=(n&I.VALUE_LENGTH)>>14,0!==i){if(o===L.SEMI)return this.emitNamedEntityData(this.treeIndex,i,this.consumed+this.excess);this.decodeMode!==M.Strict&&(this.result=this.treeIndex,this.consumed+=this.excess,this.excess=0)}}return-1}emitNotTerminatedNamedEntity(){var t;const{result:e,decodeTree:r}=this,n=(r[e]&I.VALUE_LENGTH)>>14;return this.emitNamedEntityData(e,n,this.consumed),null===(t=this.errors)||void 0===t||t.missingSemicolonAfterCharacterReference(),this.consumed}emitNamedEntityData(t,e,r){const{decodeTree:n}=this;return this.emitCodePoint(1===e?n[t]&~I.VALUE_LENGTH:n[t+1],r),3===e&&this.emitCodePoint(n[t+2],r),r}end(){var t;switch(this.state){case P.NamedEntity:return 0===this.result||this.decodeMode===M.Attribute&&this.result!==this.treeIndex?0:this.emitNotTerminatedNamedEntity();case P.NumericDecimal:return this.emitNumericEntity(0,2);case P.NumericHex:return this.emitNumericEntity(0,3);case P.NumericStart:return null===(t=this.errors)||void 0===t||t.absenceOfDigitsInNumericCharacterReference(this.consumed),0;case P.EntityStart:return 0}}}function H(t){let e="";const r=new V(t,(t=>e+=R(t)));return function(t,n){let i=0,o=0;for(;(o=t.indexOf("&",o))>=0;){e+=t.slice(i,o),r.startEntity(n);const s=r.write(t,o+1);if(s<0){i=o+r.end();break}i=o+s,o=0===s?i+1:i}const s=e+t.slice(i);return e="",s}}function G(t,e,r,n){const i=(e&I.BRANCH_LENGTH)>>7,o=e&I.JUMP_TABLE;if(0===i)return 0!==o&&n===o?r:-1;if(o){const e=n-o;return e<0||e>=i?-1:t[r+e]-1}let s=r,a=s+i-1;for(;s<=a;){const e=s+a>>>1,r=t[e];if(r<n)s=e+1;else{if(!(r>n))return t[e+i];a=e-1}}return-1}function $(t){return t===D.Space||t===D.NewLine||t===D.Tab||t===D.FormFeed||t===D.CarriageReturn}function W(t){return t===D.Slash||t===D.Gt||$(t)}H(k),H(N),function(t){t[t.Tab=9]="Tab",t[t.NewLine=10]="NewLine",t[t.FormFeed=12]="FormFeed",t[t.CarriageReturn=13]="CarriageReturn",t[t.Space=32]="Space",t[t.ExclamationMark=33]="ExclamationMark",t[t.Number=35]="Number",t[t.Amp=38]="Amp",t[t.SingleQuote=39]="SingleQuote",t[t.DoubleQuote=34]="DoubleQuote",t[t.Dash=45]="Dash",t[t.Slash=47]="Slash",t[t.Zero=48]="Zero",t[t.Nine=57]="Nine",t[t.Semi=59]="Semi",t[t.Lt=60]="Lt",t[t.Eq=61]="Eq",t[t.Gt=62]="Gt",t[t.Questionmark=63]="Questionmark",t[t.UpperA=65]="UpperA",t[t.LowerA=97]="LowerA",t[t.UpperF=70]="UpperF",t[t.LowerF=102]="LowerF",t[t.UpperZ=90]="UpperZ",t[t.LowerZ=122]="LowerZ",t[t.LowerX=120]="LowerX",t[t.OpeningSquareBracket=91]="OpeningSquareBracket"}(D||(D={})),function(t){t[t.Text=1]="Text",t[t.BeforeTagName=2]="BeforeTagName",t[t.InTagName=3]="InTagName",t[t.InSelfClosingTag=4]="InSelfClosingTag",t[t.BeforeClosingTagName=5]="BeforeClosingTagName",t[t.InClosingTagName=6]="InClosingTagName",t[t.AfterClosingTagName=7]="AfterClosingTagName",t[t.BeforeAttributeName=8]="BeforeAttributeName",t[t.InAttributeName=9]="InAttributeName",t[t.AfterAttributeName=10]="AfterAttributeName",t[t.BeforeAttributeValue=11]="BeforeAttributeValue",t[t.InAttributeValueDq=12]="InAttributeValueDq",t[t.InAttributeValueSq=13]="InAttributeValueSq",t[t.InAttributeValueNq=14]="InAttributeValueNq",t[t.BeforeDeclaration=15]="BeforeDeclaration",t[t.InDeclaration=16]="InDeclaration",t[t.InProcessingInstruction=17]="InProcessingInstruction",t[t.BeforeComment=18]="BeforeComment",t[t.CDATASequence=19]="CDATASequence",t[t.InSpecialComment=20]="InSpecialComment",t[t.InCommentLike=21]="InCommentLike",t[t.BeforeSpecialS=22]="BeforeSpecialS",t[t.BeforeSpecialT=23]="BeforeSpecialT",t[t.SpecialStartSequence=24]="SpecialStartSequence",t[t.InSpecialTag=25]="InSpecialTag",t[t.InEntity=26]="InEntity"}(j||(j={})),function(t){t[t.NoValue=0]="NoValue",t[t.Unquoted=1]="Unquoted",t[t.Single=2]="Single",t[t.Double=3]="Double"}(F||(F={}));const z={Cdata:new Uint8Array([67,68,65,84,65,91]),CdataEnd:new Uint8Array([93,93,62]),CommentEnd:new Uint8Array([45,45,62]),ScriptEnd:new Uint8Array([60,47,115,99,114,105,112,116]),StyleEnd:new Uint8Array([60,47,115,116,121,108,101]),TitleEnd:new Uint8Array([60,47,116,105,116,108,101]),TextareaEnd:new Uint8Array([60,47,116,101,120,116,97,114,101,97])};class K{constructor({xmlMode:t=!1,decodeEntities:e=!0},r){this.cbs=r,this.state=j.Text,this.buffer="",this.sectionStart=0,this.index=0,this.entityStart=0,this.baseState=j.Text,this.isSpecial=!1,this.running=!0,this.offset=0,this.currentSequence=void 0,this.sequenceIndex=0,this.xmlMode=t,this.decodeEntities=e,this.entityDecoder=new V(t?N:k,((t,e)=>this.emitCodePoint(t,e)))}reset(){this.state=j.Text,this.buffer="",this.sectionStart=0,this.index=0,this.baseState=j.Text,this.currentSequence=void 0,this.running=!0,this.offset=0}write(t){this.offset+=this.buffer.length,this.buffer=t,this.parse()}end(){this.running&&this.finish()}pause(){this.running=!1}resume(){this.running=!0,this.index<this.buffer.length+this.offset&&this.parse()}stateText(t){t===D.Lt||!this.decodeEntities&&this.fastForwardTo(D.Lt)?(this.index>this.sectionStart&&this.cbs.ontext(this.sectionStart,this.index),this.state=j.BeforeTagName,this.sectionStart=this.index):this.decodeEntities&&t===D.Amp&&this.startEntity()}stateSpecialStartSequence(t){const e=this.sequenceIndex===this.currentSequence.length;if(e?W(t):(32|t)===this.currentSequence[this.sequenceIndex]){if(!e)return void this.sequenceIndex++}else this.isSpecial=!1;this.sequenceIndex=0,this.state=j.InTagName,this.stateInTagName(t)}stateInSpecialTag(t){if(this.sequenceIndex===this.currentSequence.length){if(t===D.Gt||$(t)){const e=this.index-this.currentSequence.length;if(this.sectionStart<e){const t=this.index;this.index=e,this.cbs.ontext(this.sectionStart,e),this.index=t}return this.isSpecial=!1,this.sectionStart=e+2,void this.stateInClosingTagName(t)}this.sequenceIndex=0}(32|t)===this.currentSequence[this.sequenceIndex]?this.sequenceIndex+=1:0===this.sequenceIndex?this.currentSequence===z.TitleEnd?this.decodeEntities&&t===D.Amp&&this.startEntity():this.fastForwardTo(D.Lt)&&(this.sequenceIndex=1):this.sequenceIndex=Number(t===D.Lt)}stateCDATASequence(t){t===z.Cdata[this.sequenceIndex]?++this.sequenceIndex===z.Cdata.length&&(this.state=j.InCommentLike,this.currentSequence=z.CdataEnd,this.sequenceIndex=0,this.sectionStart=this.index+1):(this.sequenceIndex=0,this.state=j.InDeclaration,this.stateInDeclaration(t))}fastForwardTo(t){for(;++this.index<this.buffer.length+this.offset;)if(this.buffer.charCodeAt(this.index-this.offset)===t)return!0;return this.index=this.buffer.length+this.offset-1,!1}stateInCommentLike(t){t===this.currentSequence[this.sequenceIndex]?++this.sequenceIndex===this.currentSequence.length&&(this.currentSequence===z.CdataEnd?this.cbs.oncdata(this.sectionStart,this.index,2):this.cbs.oncomment(this.sectionStart,this.index,2),this.sequenceIndex=0,this.sectionStart=this.index+1,this.state=j.Text):0===this.sequenceIndex?this.fastForwardTo(this.currentSequence[0])&&(this.sequenceIndex=1):t!==this.currentSequence[this.sequenceIndex-1]&&(this.sequenceIndex=0)}isTagStartChar(t){return this.xmlMode?!W(t):function(t){return t>=D.LowerA&&t<=D.LowerZ||t>=D.UpperA&&t<=D.UpperZ}(t)}startSpecial(t,e){this.isSpecial=!0,this.currentSequence=t,this.sequenceIndex=e,this.state=j.SpecialStartSequence}stateBeforeTagName(t){if(t===D.ExclamationMark)this.state=j.BeforeDeclaration,this.sectionStart=this.index+1;else if(t===D.Questionmark)this.state=j.InProcessingInstruction,this.sectionStart=this.index+1;else if(this.isTagStartChar(t)){const e=32|t;this.sectionStart=this.index,this.xmlMode?this.state=j.InTagName:e===z.ScriptEnd[2]?this.state=j.BeforeSpecialS:e===z.TitleEnd[2]?this.state=j.BeforeSpecialT:this.state=j.InTagName}else t===D.Slash?this.state=j.BeforeClosingTagName:(this.state=j.Text,this.stateText(t))}stateInTagName(t){W(t)&&(this.cbs.onopentagname(this.sectionStart,this.index),this.sectionStart=-1,this.state=j.BeforeAttributeName,this.stateBeforeAttributeName(t))}stateBeforeClosingTagName(t){$(t)||(t===D.Gt?this.state=j.Text:(this.state=this.isTagStartChar(t)?j.InClosingTagName:j.InSpecialComment,this.sectionStart=this.index))}stateInClosingTagName(t){(t===D.Gt||$(t))&&(this.cbs.onclosetag(this.sectionStart,this.index),this.sectionStart=-1,this.state=j.AfterClosingTagName,this.stateAfterClosingTagName(t))}stateAfterClosingTagName(t){(t===D.Gt||this.fastForwardTo(D.Gt))&&(this.state=j.Text,this.sectionStart=this.index+1)}stateBeforeAttributeName(t){t===D.Gt?(this.cbs.onopentagend(this.index),this.isSpecial?(this.state=j.InSpecialTag,this.sequenceIndex=0):this.state=j.Text,this.sectionStart=this.index+1):t===D.Slash?this.state=j.InSelfClosingTag:$(t)||(this.state=j.InAttributeName,this.sectionStart=this.index)}stateInSelfClosingTag(t){t===D.Gt?(this.cbs.onselfclosingtag(this.index),this.state=j.Text,this.sectionStart=this.index+1,this.isSpecial=!1):$(t)||(this.state=j.BeforeAttributeName,this.stateBeforeAttributeName(t))}stateInAttributeName(t){(t===D.Eq||W(t))&&(this.cbs.onattribname(this.sectionStart,this.index),this.sectionStart=this.index,this.state=j.AfterAttributeName,this.stateAfterAttributeName(t))}stateAfterAttributeName(t){t===D.Eq?this.state=j.BeforeAttributeValue:t===D.Slash||t===D.Gt?(this.cbs.onattribend(F.NoValue,this.sectionStart),this.sectionStart=-1,this.state=j.BeforeAttributeName,this.stateBeforeAttributeName(t)):$(t)||(this.cbs.onattribend(F.NoValue,this.sectionStart),this.state=j.InAttributeName,this.sectionStart=this.index)}stateBeforeAttributeValue(t){t===D.DoubleQuote?(this.state=j.InAttributeValueDq,this.sectionStart=this.index+1):t===D.SingleQuote?(this.state=j.InAttributeValueSq,this.sectionStart=this.index+1):$(t)||(this.sectionStart=this.index,this.state=j.InAttributeValueNq,this.stateInAttributeValueNoQuotes(t))}handleInAttributeValue(t,e){t===e||!this.decodeEntities&&this.fastForwardTo(e)?(this.cbs.onattribdata(this.sectionStart,this.index),this.sectionStart=-1,this.cbs.onattribend(e===D.DoubleQuote?F.Double:F.Single,this.index+1),this.state=j.BeforeAttributeName):this.decodeEntities&&t===D.Amp&&this.startEntity()}stateInAttributeValueDoubleQuotes(t){this.handleInAttributeValue(t,D.DoubleQuote)}stateInAttributeValueSingleQuotes(t){this.handleInAttributeValue(t,D.SingleQuote)}stateInAttributeValueNoQuotes(t){$(t)||t===D.Gt?(this.cbs.onattribdata(this.sectionStart,this.index),this.sectionStart=-1,this.cbs.onattribend(F.Unquoted,this.index),this.state=j.BeforeAttributeName,this.stateBeforeAttributeName(t)):this.decodeEntities&&t===D.Amp&&this.startEntity()}stateBeforeDeclaration(t){t===D.OpeningSquareBracket?(this.state=j.CDATASequence,this.sequenceIndex=0):this.state=t===D.Dash?j.BeforeComment:j.InDeclaration}stateInDeclaration(t){(t===D.Gt||this.fastForwardTo(D.Gt))&&(this.cbs.ondeclaration(this.sectionStart,this.index),this.state=j.Text,this.sectionStart=this.index+1)}stateInProcessingInstruction(t){(t===D.Gt||this.fastForwardTo(D.Gt))&&(this.cbs.onprocessinginstruction(this.sectionStart,this.index),this.state=j.Text,this.sectionStart=this.index+1)}stateBeforeComment(t){t===D.Dash?(this.state=j.InCommentLike,this.currentSequence=z.CommentEnd,this.sequenceIndex=2,this.sectionStart=this.index+1):this.state=j.InDeclaration}stateInSpecialComment(t){(t===D.Gt||this.fastForwardTo(D.Gt))&&(this.cbs.oncomment(this.sectionStart,this.index,0),this.state=j.Text,this.sectionStart=this.index+1)}stateBeforeSpecialS(t){const e=32|t;e===z.ScriptEnd[3]?this.startSpecial(z.ScriptEnd,4):e===z.StyleEnd[3]?this.startSpecial(z.StyleEnd,4):(this.state=j.InTagName,this.stateInTagName(t))}stateBeforeSpecialT(t){const e=32|t;e===z.TitleEnd[3]?this.startSpecial(z.TitleEnd,4):e===z.TextareaEnd[3]?this.startSpecial(z.TextareaEnd,4):(this.state=j.InTagName,this.stateInTagName(t))}startEntity(){this.baseState=this.state,this.state=j.InEntity,this.entityStart=this.index,this.entityDecoder.startEntity(this.xmlMode?M.Strict:this.baseState===j.Text||this.baseState===j.InSpecialTag?M.Legacy:M.Attribute)}stateInEntity(){const t=this.entityDecoder.write(this.buffer,this.index-this.offset);t>=0?(this.state=this.baseState,0===t&&(this.index=this.entityStart)):this.index=this.offset+this.buffer.length-1}cleanup(){this.running&&this.sectionStart!==this.index&&(this.state===j.Text||this.state===j.InSpecialTag&&0===this.sequenceIndex?(this.cbs.ontext(this.sectionStart,this.index),this.sectionStart=this.index):this.state!==j.InAttributeValueDq&&this.state!==j.InAttributeValueSq&&this.state!==j.InAttributeValueNq||(this.cbs.onattribdata(this.sectionStart,this.index),this.sectionStart=this.index))}shouldContinue(){return this.index<this.buffer.length+this.offset&&this.running}parse(){for(;this.shouldContinue();){const t=this.buffer.charCodeAt(this.index-this.offset);switch(this.state){case j.Text:this.stateText(t);break;case j.SpecialStartSequence:this.stateSpecialStartSequence(t);break;case j.InSpecialTag:this.stateInSpecialTag(t);break;case j.CDATASequence:this.stateCDATASequence(t);break;case j.InAttributeValueDq:this.stateInAttributeValueDoubleQuotes(t);break;case j.InAttributeName:this.stateInAttributeName(t);break;case j.InCommentLike:this.stateInCommentLike(t);break;case j.InSpecialComment:this.stateInSpecialComment(t);break;case j.BeforeAttributeName:this.stateBeforeAttributeName(t);break;case j.InTagName:this.stateInTagName(t);break;case j.InClosingTagName:this.stateInClosingTagName(t);break;case j.BeforeTagName:this.stateBeforeTagName(t);break;case j.AfterAttributeName:this.stateAfterAttributeName(t);break;case j.InAttributeValueSq:this.stateInAttributeValueSingleQuotes(t);break;case j.BeforeAttributeValue:this.stateBeforeAttributeValue(t);break;case j.BeforeClosingTagName:this.stateBeforeClosingTagName(t);break;case j.AfterClosingTagName:this.stateAfterClosingTagName(t);break;case j.BeforeSpecialS:this.stateBeforeSpecialS(t);break;case j.BeforeSpecialT:this.stateBeforeSpecialT(t);break;case j.InAttributeValueNq:this.stateInAttributeValueNoQuotes(t);break;case j.InSelfClosingTag:this.stateInSelfClosingTag(t);break;case j.InDeclaration:this.stateInDeclaration(t);break;case j.BeforeDeclaration:this.stateBeforeDeclaration(t);break;case j.BeforeComment:this.stateBeforeComment(t);break;case j.InProcessingInstruction:this.stateInProcessingInstruction(t);break;case j.InEntity:this.stateInEntity()}this.index++}this.cleanup()}finish(){this.state===j.InEntity&&(this.entityDecoder.end(),this.state=this.baseState),this.handleTrailingData(),this.cbs.onend()}handleTrailingData(){const t=this.buffer.length+this.offset;this.sectionStart>=t||(this.state===j.InCommentLike?this.currentSequence===z.CdataEnd?this.cbs.oncdata(this.sectionStart,t,0):this.cbs.oncomment(this.sectionStart,t,0):this.state===j.InTagName||this.state===j.BeforeAttributeName||this.state===j.BeforeAttributeValue||this.state===j.AfterAttributeName||this.state===j.InAttributeName||this.state===j.InAttributeValueSq||this.state===j.InAttributeValueDq||this.state===j.InAttributeValueNq||this.state===j.InClosingTagName||this.cbs.ontext(this.sectionStart,t))}emitCodePoint(t,e){this.baseState!==j.Text&&this.baseState!==j.InSpecialTag?(this.sectionStart<this.entityStart&&this.cbs.onattribdata(this.sectionStart,this.entityStart),this.sectionStart=this.entityStart+e,this.index=this.sectionStart-1,this.cbs.onattribentity(t)):(this.sectionStart<this.entityStart&&this.cbs.ontext(this.sectionStart,this.entityStart),this.sectionStart=this.entityStart+e,this.index=this.sectionStart-1,this.cbs.ontextentity(t,this.sectionStart))}}const Y=new Set(["input","option","optgroup","select","button","datalist","textarea"]),Q=new Set(["p"]),Z=new Set(["thead","tbody"]),J=new Set(["dd","dt"]),X=new Set(["rt","rp"]),tt=new Map([["tr",new Set(["tr","th","td"])],["th",new Set(["th"])],["td",new Set(["thead","th","td"])],["body",new Set(["head","link","script"])],["li",new Set(["li"])],["p",Q],["h1",Q],["h2",Q],["h3",Q],["h4",Q],["h5",Q],["h6",Q],["select",Y],["input",Y],["output",Y],["button",Y],["datalist",Y],["textarea",Y],["option",new Set(["option"])],["optgroup",new Set(["optgroup","option"])],["dd",J],["dt",J],["address",Q],["article",Q],["aside",Q],["blockquote",Q],["details",Q],["div",Q],["dl",Q],["fieldset",Q],["figcaption",Q],["figure",Q],["footer",Q],["form",Q],["header",Q],["hr",Q],["main",Q],["nav",Q],["ol",Q],["pre",Q],["section",Q],["table",Q],["ul",Q],["rt",X],["rp",X],["tbody",Z],["tfoot",Z]]),et=new Set(["area","base","basefont","br","col","command","embed","frame","hr","img","input","isindex","keygen","link","meta","param","source","track","wbr"]),rt=new Set(["math","svg"]),nt=new Set(["mi","mo","mn","ms","mtext","annotation-xml","foreignobject","desc","title"]),it=/\s|\//;let ot=class{constructor(t,e={}){var r,n,i,o,s,a;this.options=e,this.startIndex=0,this.endIndex=0,this.openTagStart=0,this.tagname="",this.attribname="",this.attribvalue="",this.attribs=null,this.stack=[],this.buffers=[],this.bufferOffset=0,this.writeIndex=0,this.ended=!1,this.cbs=null!=t?t:{},this.htmlMode=!this.options.xmlMode,this.lowerCaseTagNames=null!==(r=e.lowerCaseTags)&&void 0!==r?r:this.htmlMode,this.lowerCaseAttributeNames=null!==(n=e.lowerCaseAttributeNames)&&void 0!==n?n:this.htmlMode,this.recognizeSelfClosing=null!==(i=e.recognizeSelfClosing)&&void 0!==i?i:!this.htmlMode,this.tokenizer=new(null!==(o=e.Tokenizer)&&void 0!==o?o:K)(this.options,this),this.foreignContext=[!this.htmlMode],null===(a=(s=this.cbs).onparserinit)||void 0===a||a.call(s,this)}ontext(t,e){var r,n;const i=this.getSlice(t,e);this.endIndex=e-1,null===(n=(r=this.cbs).ontext)||void 0===n||n.call(r,i),this.startIndex=e}ontextentity(t,e){var r,n;this.endIndex=e-1,null===(n=(r=this.cbs).ontext)||void 0===n||n.call(r,R(t)),this.startIndex=e}isVoidElement(t){return this.htmlMode&&et.has(t)}onopentagname(t,e){this.endIndex=e;let r=this.getSlice(t,e);this.lowerCaseTagNames&&(r=r.toLowerCase()),this.emitOpenTag(r)}emitOpenTag(t){var e,r,n,i;this.openTagStart=this.startIndex,this.tagname=t;const o=this.htmlMode&&tt.get(t);if(o)for(;this.stack.length>0&&o.has(this.stack[0]);){const t=this.stack.shift();null===(r=(e=this.cbs).onclosetag)||void 0===r||r.call(e,t,!0)}this.isVoidElement(t)||(this.stack.unshift(t),this.htmlMode&&(rt.has(t)?this.foreignContext.unshift(!0):nt.has(t)&&this.foreignContext.unshift(!1))),null===(i=(n=this.cbs).onopentagname)||void 0===i||i.call(n,t),this.cbs.onopentag&&(this.attribs={})}endOpenTag(t){var e,r;this.startIndex=this.openTagStart,this.attribs&&(null===(r=(e=this.cbs).onopentag)||void 0===r||r.call(e,this.tagname,this.attribs,t),this.attribs=null),this.cbs.onclosetag&&this.isVoidElement(this.tagname)&&this.cbs.onclosetag(this.tagname,!0),this.tagname=""}onopentagend(t){this.endIndex=t,this.endOpenTag(!1),this.startIndex=t+1}onclosetag(t,e){var r,n,i,o,s,a,c,u;this.endIndex=e;let l=this.getSlice(t,e);if(this.lowerCaseTagNames&&(l=l.toLowerCase()),this.htmlMode&&(rt.has(l)||nt.has(l))&&this.foreignContext.shift(),this.isVoidElement(l))this.htmlMode&&"br"===l&&(null===(o=(i=this.cbs).onopentagname)||void 0===o||o.call(i,"br"),null===(a=(s=this.cbs).onopentag)||void 0===a||a.call(s,"br",{},!0),null===(u=(c=this.cbs).onclosetag)||void 0===u||u.call(c,"br",!1));else{const t=this.stack.indexOf(l);if(-1!==t)for(let e=0;e<=t;e++){const i=this.stack.shift();null===(n=(r=this.cbs).onclosetag)||void 0===n||n.call(r,i,e!==t)}else this.htmlMode&&"p"===l&&(this.emitOpenTag("p"),this.closeCurrentTag(!0))}this.startIndex=e+1}onselfclosingtag(t){this.endIndex=t,this.recognizeSelfClosing||this.foreignContext[0]?(this.closeCurrentTag(!1),this.startIndex=t+1):this.onopentagend(t)}closeCurrentTag(t){var e,r;const n=this.tagname;this.endOpenTag(t),this.stack[0]===n&&(null===(r=(e=this.cbs).onclosetag)||void 0===r||r.call(e,n,!t),this.stack.shift())}onattribname(t,e){this.startIndex=t;const r=this.getSlice(t,e);this.attribname=this.lowerCaseAttributeNames?r.toLowerCase():r}onattribdata(t,e){this.attribvalue+=this.getSlice(t,e)}onattribentity(t){this.attribvalue+=R(t)}onattribend(t,e){var r,n;this.endIndex=e,null===(n=(r=this.cbs).onattribute)||void 0===n||n.call(r,this.attribname,this.attribvalue,t===F.Double?'"':t===F.Single?"'":t===F.NoValue?void 0:null),this.attribs&&!Object.prototype.hasOwnProperty.call(this.attribs,this.attribname)&&(this.attribs[this.attribname]=this.attribvalue),this.attribvalue=""}getInstructionName(t){const e=t.search(it);let r=e<0?t:t.substr(0,e);return this.lowerCaseTagNames&&(r=r.toLowerCase()),r}ondeclaration(t,e){this.endIndex=e;const r=this.getSlice(t,e);if(this.cbs.onprocessinginstruction){const t=this.getInstructionName(r);this.cbs.onprocessinginstruction(`!${t}`,`!${r}`)}this.startIndex=e+1}onprocessinginstruction(t,e){this.endIndex=e;const r=this.getSlice(t,e);if(this.cbs.onprocessinginstruction){const t=this.getInstructionName(r);this.cbs.onprocessinginstruction(`?${t}`,`?${r}`)}this.startIndex=e+1}oncomment(t,e,r){var n,i,o,s;this.endIndex=e,null===(i=(n=this.cbs).oncomment)||void 0===i||i.call(n,this.getSlice(t,e-r)),null===(s=(o=this.cbs).oncommentend)||void 0===s||s.call(o),this.startIndex=e+1}oncdata(t,e,r){var n,i,o,s,a,c,u,l,h,f;this.endIndex=e;const d=this.getSlice(t,e-r);!this.htmlMode||this.options.recognizeCDATA?(null===(i=(n=this.cbs).oncdatastart)||void 0===i||i.call(n),null===(s=(o=this.cbs).ontext)||void 0===s||s.call(o,d),null===(c=(a=this.cbs).oncdataend)||void 0===c||c.call(a)):(null===(l=(u=this.cbs).oncomment)||void 0===l||l.call(u,`[CDATA[${d}]]`),null===(f=(h=this.cbs).oncommentend)||void 0===f||f.call(h)),this.startIndex=e+1}onend(){var t,e;if(this.cbs.onclosetag){this.endIndex=this.startIndex;for(let t=0;t<this.stack.length;t++)this.cbs.onclosetag(this.stack[t],!0)}null===(e=(t=this.cbs).onend)||void 0===e||e.call(t)}reset(){var t,e,r,n;null===(e=(t=this.cbs).onreset)||void 0===e||e.call(t),this.tokenizer.reset(),this.tagname="",this.attribname="",this.attribs=null,this.stack.length=0,this.startIndex=0,this.endIndex=0,null===(n=(r=this.cbs).onparserinit)||void 0===n||n.call(r,this),this.buffers.length=0,this.foreignContext.length=0,this.foreignContext.unshift(!this.htmlMode),this.bufferOffset=0,this.writeIndex=0,this.ended=!1}parseComplete(t){this.reset(),this.end(t)}getSlice(t,e){for(;t-this.bufferOffset>=this.buffers[0].length;)this.shiftBuffer();let r=this.buffers[0].slice(t-this.bufferOffset,e-this.bufferOffset);for(;e-this.bufferOffset>this.buffers[0].length;)this.shiftBuffer(),r+=this.buffers[0].slice(0,e-this.bufferOffset);return r}shiftBuffer(){this.bufferOffset+=this.buffers[0].length,this.writeIndex--,this.buffers.shift()}write(t){var e,r;this.ended?null===(r=(e=this.cbs).onerror)||void 0===r||r.call(e,new Error(".write() after done!")):(this.buffers.push(t),this.tokenizer.running&&(this.tokenizer.write(t),this.writeIndex++))}end(t){var e,r;this.ended?null===(r=(e=this.cbs).onerror)||void 0===r||r.call(e,new Error(".end() after done!")):(t&&this.write(t),this.ended=!0,this.tokenizer.end())}pause(){this.tokenizer.pause()}resume(){for(this.tokenizer.resume();this.tokenizer.running&&this.writeIndex<this.buffers.length;)this.tokenizer.write(this.buffers[this.writeIndex++]);this.ended&&this.tokenizer.end()}parseChunk(t){this.write(t)}done(t){this.end(t)}};var st;function at(t){return t.type===st.Tag||t.type===st.Script||t.type===st.Style}!function(t){t.Root="root",t.Text="text",t.Directive="directive",t.Comment="comment",t.Script="script",t.Style="style",t.Tag="tag",t.CDATA="cdata",t.Doctype="doctype"}(st||(st={}));const ct=st.Root,ut=st.Text,lt=st.Directive,ht=st.Comment,ft=st.Script,dt=st.Style,pt=st.Tag,gt=st.CDATA,mt=st.Doctype;var yt=Object.freeze({__proto__:null,CDATA:gt,Comment:ht,Directive:lt,Doctype:mt,get ElementType(){return st},Root:ct,Script:ft,Style:dt,Tag:pt,Text:ut,isTag:at});let vt=class{constructor(){this.parent=null,this.prev=null,this.next=null,this.startIndex=null,this.endIndex=null}get parentNode(){return this.parent}set parentNode(t){this.parent=t}get previousSibling(){return this.prev}set previousSibling(t){this.prev=t}get nextSibling(){return this.next}set nextSibling(t){this.next=t}cloneNode(t=!1){return It(this,t)}};class bt extends vt{constructor(t){super(),this.data=t}get nodeValue(){return this.data}set nodeValue(t){this.data=t}}let wt=class extends bt{constructor(){super(...arguments),this.type=st.Text}get nodeType(){return 3}},St=class extends bt{constructor(){super(...arguments),this.type=st.Comment}get nodeType(){return 8}};class xt extends bt{constructor(t,e){super(e),this.name=t,this.type=st.Directive}get nodeType(){return 1}}class _t extends vt{constructor(t){super(),this.children=t}get firstChild(){var t;return null!==(t=this.children[0])&&void 0!==t?t:null}get lastChild(){return this.children.length>0?this.children[this.children.length-1]:null}get childNodes(){return this.children}set childNodes(t){this.children=t}}class At extends _t{constructor(){super(...arguments),this.type=st.CDATA}get nodeType(){return 4}}let Et=class extends _t{constructor(){super(...arguments),this.type=st.Root}get nodeType(){return 9}},Ct=class extends _t{constructor(t,e,r=[],n=("script"===t?st.Script:"style"===t?st.Style:st.Tag)){super(r),this.name=t,this.attribs=e,this.type=n}get nodeType(){return 1}get tagName(){return this.name}set tagName(t){this.name=t}get attributes(){return Object.keys(this.attribs).map((t=>{var e,r;return{name:t,value:this.attribs[t],namespace:null===(e=this["x-attribsNamespace"])||void 0===e?void 0:e[t],prefix:null===(r=this["x-attribsPrefix"])||void 0===r?void 0:r[t]}}))}};function Tt(t){return at(t)}function kt(t){return t.type===st.CDATA}function Nt(t){return t.type===st.Text}function Ot(t){return t.type===st.Comment}function Rt(t){return t.type===st.Root}function Lt(t){return Object.prototype.hasOwnProperty.call(t,"children")}function It(t,e=!1){let r;if(Nt(t))r=new wt(t.data);else if(Ot(t))r=new St(t.data);else if(Tt(t)){const n=e?Pt(t.children):[],i=new Ct(t.name,{...t.attribs},n);n.forEach((t=>t.parent=i)),null!=t.namespace&&(i.namespace=t.namespace),t["x-attribsNamespace"]&&(i["x-attribsNamespace"]={...t["x-attribsNamespace"]}),t["x-attribsPrefix"]&&(i["x-attribsPrefix"]={...t["x-attribsPrefix"]}),r=i}else if(kt(t)){const n=e?Pt(t.children):[],i=new At(n);n.forEach((t=>t.parent=i)),r=i}else if(Rt(t)){const n=e?Pt(t.children):[],i=new Et(n);n.forEach((t=>t.parent=i)),t["x-mode"]&&(i["x-mode"]=t["x-mode"]),r=i}else{if(!function(t){return t.type===st.Directive}(t))throw new Error(`Not implemented yet: ${t.type}`);{const e=new xt(t.name,t.data);null!=t["x-name"]&&(e["x-name"]=t["x-name"],e["x-publicId"]=t["x-publicId"],e["x-systemId"]=t["x-systemId"]),r=e}}return r.startIndex=t.startIndex,r.endIndex=t.endIndex,null!=t.sourceCodeLocation&&(r.sourceCodeLocation=t.sourceCodeLocation),r}function Pt(t){const e=t.map((t=>It(t,!0)));for(let t=1;t<e.length;t++)e[t].prev=e[t-1],e[t-1].next=e[t];return e}const Mt={withStartIndices:!1,withEndIndices:!1,xmlMode:!1};class Dt{constructor(t,e,r){this.dom=[],this.root=new Et(this.dom),this.done=!1,this.tagStack=[this.root],this.lastNode=null,this.parser=null,"function"==typeof e&&(r=e,e=Mt),"object"==typeof t&&(e=t,t=void 0),this.callback=null!=t?t:null,this.options=null!=e?e:Mt,this.elementCB=null!=r?r:null}onparserinit(t){this.parser=t}onreset(){this.dom=[],this.root=new Et(this.dom),this.done=!1,this.tagStack=[this.root],this.lastNode=null,this.parser=null}onend(){this.done||(this.done=!0,this.parser=null,this.handleCallback(null))}onerror(t){this.handleCallback(t)}onclosetag(){this.lastNode=null;const t=this.tagStack.pop();this.options.withEndIndices&&(t.endIndex=this.parser.endIndex),this.elementCB&&this.elementCB(t)}onopentag(t,e){const r=this.options.xmlMode?st.Tag:void 0,n=new Ct(t,e,void 0,r);this.addNode(n),this.tagStack.push(n)}ontext(t){const{lastNode:e}=this;if(e&&e.type===st.Text)e.data+=t,this.options.withEndIndices&&(e.endIndex=this.parser.endIndex);else{const e=new wt(t);this.addNode(e),this.lastNode=e}}oncomment(t){if(this.lastNode&&this.lastNode.type===st.Comment)return void(this.lastNode.data+=t);const e=new St(t);this.addNode(e),this.lastNode=e}oncommentend(){this.lastNode=null}oncdatastart(){const t=new wt(""),e=new At([t]);this.addNode(e),t.parent=e,this.lastNode=t}oncdataend(){this.lastNode=null}onprocessinginstruction(t,e){const r=new xt(t,e);this.addNode(r)}handleCallback(t){if("function"==typeof this.callback)this.callback(t,this.dom);else if(t)throw t}addNode(t){const e=this.tagStack[this.tagStack.length-1],r=e.children[e.children.length-1];this.options.withStartIndices&&(t.startIndex=this.parser.startIndex),this.options.withEndIndices&&(t.endIndex=this.parser.endIndex),e.children.push(t),r&&(t.prev=r,r.next=t),t.parent=e,this.lastNode=null}}const jt=/["&'<>$\x80-\uFFFF]/g,Ft=new Map([[34,"&quot;"],[38,"&amp;"],[39,"&apos;"],[60,"&lt;"],[62,"&gt;"]]),qt=null!=String.prototype.codePointAt?(t,e)=>t.codePointAt(e):(t,e)=>55296==(64512&t.charCodeAt(e))?1024*(t.charCodeAt(e)-55296)+t.charCodeAt(e+1)-56320+65536:t.charCodeAt(e);function Bt(t){let e,r="",n=0;for(;null!==(e=jt.exec(t));){const i=e.index,o=t.charCodeAt(i),s=Ft.get(o);void 0!==s?(r+=t.substring(n,i)+s,n=i+1):(r+=`${t.substring(n,i)}&#x${qt(t,i).toString(16)};`,n=jt.lastIndex+=Number(55296==(64512&o)))}return r+t.substr(n)}function Ut(t,e){return function(r){let n,i=0,o="";for(;n=t.exec(r);)i!==n.index&&(o+=r.substring(i,n.index)),o+=e.get(n[0].charCodeAt(0)),i=n.index+1;return o+r.substring(i)}}const Vt=Ut(/["&\u00A0]/g,new Map([[34,"&quot;"],[38,"&amp;"],[160,"&nbsp;"]])),Ht=Ut(/[&<>\u00A0]/g,new Map([[38,"&amp;"],[60,"&lt;"],[62,"&gt;"],[160,"&nbsp;"]])),Gt=new Map(["altGlyph","altGlyphDef","altGlyphItem","animateColor","animateMotion","animateTransform","clipPath","feBlend","feColorMatrix","feComponentTransfer","feComposite","feConvolveMatrix","feDiffuseLighting","feDisplacementMap","feDistantLight","feDropShadow","feFlood","feFuncA","feFuncB","feFuncG","feFuncR","feGaussianBlur","feImage","feMerge","feMergeNode","feMorphology","feOffset","fePointLight","feSpecularLighting","feSpotLight","feTile","feTurbulence","foreignObject","glyphRef","linearGradient","radialGradient","textPath"].map((t=>[t.toLowerCase(),t]))),$t=new Map(["definitionURL","attributeName","attributeType","baseFrequency","baseProfile","calcMode","clipPathUnits","diffuseConstant","edgeMode","filterUnits","glyphRef","gradientTransform","gradientUnits","kernelMatrix","kernelUnitLength","keyPoints","keySplines","keyTimes","lengthAdjust","limitingConeAngle","markerHeight","markerUnits","markerWidth","maskContentUnits","maskUnits","numOctaves","pathLength","patternContentUnits","patternTransform","patternUnits","pointsAtX","pointsAtY","pointsAtZ","preserveAlpha","preserveAspectRatio","primitiveUnits","refX","refY","repeatCount","repeatDur","requiredExtensions","requiredFeatures","specularConstant","specularExponent","spreadMethod","startOffset","stdDeviation","stitchTiles","surfaceScale","systemLanguage","tableValues","targetX","targetY","textLength","viewBox","viewTarget","xChannelSelector","yChannelSelector","zoomAndPan"].map((t=>[t.toLowerCase(),t]))),Wt=new Set(["style","script","xmp","iframe","noembed","noframes","plaintext","noscript"]);function zt(t){return t.replace(/"/g,"&quot;")}const Kt=new Set(["area","base","basefont","br","col","command","embed","frame","hr","img","input","isindex","keygen","link","meta","param","source","track","wbr"]);function Yt(t,e={}){const r="length"in t?t:[t];let n="";for(let t=0;t<r.length;t++)n+=Qt(r[t],e);return n}function Qt(t,e){switch(t.type){case ct:return Yt(t.children,e);case mt:case lt:return`<${t.data}>`;case ht:return function(t){return`\x3c!--${t.data}--\x3e`}(t);case gt:return function(t){return`<![CDATA[${t.children[0].data}]]>`}(t);case ft:case dt:case pt:return function(t,e){var r;"foreign"===e.xmlMode&&(t.name=null!==(r=Gt.get(t.name))&&void 0!==r?r:t.name,t.parent&&Zt.has(t.parent.name)&&(e={...e,xmlMode:!1}));!e.xmlMode&&Jt.has(t.name)&&(e={...e,xmlMode:"foreign"});let n=`<${t.name}`;const i=function(t,e){var r;if(!t)return;const n=!1===(null!==(r=e.encodeEntities)&&void 0!==r?r:e.decodeEntities)?zt:e.xmlMode||"utf8"!==e.encodeEntities?Bt:Vt;return Object.keys(t).map((r=>{var i,o;const s=null!==(i=t[r])&&void 0!==i?i:"";return"foreign"===e.xmlMode&&(r=null!==(o=$t.get(r))&&void 0!==o?o:r),e.emptyAttrs||e.xmlMode||""!==s?`${r}="${n(s)}"`:r})).join(" ")}(t.attribs,e);i&&(n+=` ${i}`);0===t.children.length&&(e.xmlMode?!1!==e.selfClosingTags:e.selfClosingTags&&Kt.has(t.name))?(e.xmlMode||(n+=" "),n+="/>"):(n+=">",t.children.length>0&&(n+=Yt(t.children,e)),!e.xmlMode&&Kt.has(t.name)||(n+=`</${t.name}>`));return n}(t,e);case ut:return function(t,e){var r;let n=t.data||"";!1===(null!==(r=e.encodeEntities)&&void 0!==r?r:e.decodeEntities)||!e.xmlMode&&t.parent&&Wt.has(t.parent.name)||(n=e.xmlMode||"utf8"!==e.encodeEntities?Bt(n):Ht(n));return n}(t,e)}}const Zt=new Set(["mi","mo","mn","ms","mtext","annotation-xml","foreignObject","desc","title"]),Jt=new Set(["svg","math"]);function Xt(t,e){return Yt(t,e)}function te(t){return Array.isArray(t)?t.map(te).join(""):Lt(t)&&!Ot(t)?te(t.children):Nt(t)?t.data:""}function ee(t){return Lt(t)?t.children:[]}function re(t){return t.parent||null}function ne(t){if(t.prev&&(t.prev.next=t.next),t.next&&(t.next.prev=t.prev),t.parent){const e=t.parent.children,r=e.lastIndexOf(t);r>=0&&e.splice(r,1)}t.next=null,t.prev=null,t.parent=null}function ie(t,e,r=!0,n=1/0){return oe(t,Array.isArray(e)?e:[e],r,n)}function oe(t,e,r,n){const i=[],o=[e],s=[0];for(;;){if(s[0]>=o[0].length){if(1===s.length)return i;o.shift(),s.shift();continue}const e=o[0][s[0]++];if(t(e)&&(i.push(e),--n<=0))return i;r&&Lt(e)&&e.children.length>0&&(s.unshift(0),o.unshift(e.children))}}function se(t,e,r=!0){let n=null;for(let i=0;i<e.length&&!n;i++){const o=e[i];Tt(o)&&(t(o)?n=o:r&&o.children.length>0&&(n=se(t,o.children,!0)))}return n}const ae={tag_name:t=>"function"==typeof t?e=>Tt(e)&&t(e.name):"*"===t?Tt:e=>Tt(e)&&e.name===t,tag_type:t=>"function"==typeof t?e=>t(e.type):e=>e.type===t,tag_contains:t=>"function"==typeof t?e=>Nt(e)&&t(e.data):e=>Nt(e)&&e.data===t};function ce(t,e){return"function"==typeof e?r=>Tt(r)&&e(r.attribs[t]):r=>Tt(r)&&r.attribs[t]===e}function ue(t,e){return r=>t(r)||e(r)}function le(t){const e=Object.keys(t).map((e=>{const r=t[e];return Object.prototype.hasOwnProperty.call(ae,e)?ae[e](r):ce(e,r)}));return 0===e.length?null:e.reduce(ue)}function he(t,e,r=!0,n=1/0){return ie(ae.tag_name(t),e,r,n)}var fe;function de(t,e){const r=[],n=[];if(t===e)return 0;let i=Lt(t)?t:t.parent;for(;i;)r.unshift(i),i=i.parent;for(i=Lt(e)?e:e.parent;i;)n.unshift(i),i=i.parent;const o=Math.min(r.length,n.length);let s=0;for(;s<o&&r[s]===n[s];)s++;if(0===s)return fe.DISCONNECTED;const a=r[s-1],c=a.children,u=r[s],l=n[s];return c.indexOf(u)>c.indexOf(l)?a===e?fe.FOLLOWING|fe.CONTAINED_BY:fe.FOLLOWING:a===t?fe.PRECEDING|fe.CONTAINS:fe.PRECEDING}function pe(t){const e=ve(Se,t);return e?"feed"===e.name?function(t){var e;const r=t.children,n={type:"atom",items:he("entry",r).map((t=>{var e;const{children:r}=t,n={media:ye(r)};we(n,"id","id",r),we(n,"title","title",r);const i=null===(e=ve("link",r))||void 0===e?void 0:e.attribs.href;i&&(n.link=i);const o=be("summary",r)||be("content",r);o&&(n.description=o);const s=be("updated",r);return s&&(n.pubDate=new Date(s)),n}))};we(n,"id","id",r),we(n,"title","title",r);const i=null===(e=ve("link",r))||void 0===e?void 0:e.attribs.href;i&&(n.link=i);we(n,"description","subtitle",r);const o=be("updated",r);o&&(n.updated=new Date(o));return we(n,"author","email",r,!0),n}(e):function(t){var e,r;const n=null!==(r=null===(e=ve("channel",t.children))||void 0===e?void 0:e.children)&&void 0!==r?r:[],i={type:t.name.substr(0,3),id:"",items:he("item",t.children).map((t=>{const{children:e}=t,r={media:ye(e)};we(r,"id","guid",e),we(r,"title","title",e),we(r,"link","link",e),we(r,"description","description",e);const n=be("pubDate",e)||be("dc:date",e);return n&&(r.pubDate=new Date(n)),r}))};we(i,"title","title",n),we(i,"link","link",n),we(i,"description","description",n);const o=be("lastBuildDate",n);o&&(i.updated=new Date(o));return we(i,"author","managingEditor",n,!0),i}(e):null}!function(t){t[t.DISCONNECTED=1]="DISCONNECTED",t[t.PRECEDING=2]="PRECEDING",t[t.FOLLOWING=4]="FOLLOWING",t[t.CONTAINS=8]="CONTAINS",t[t.CONTAINED_BY=16]="CONTAINED_BY"}(fe||(fe={}));const ge=["url","type","lang"],me=["fileSize","bitrate","framerate","samplingrate","channels","duration","height","width"];function ye(t){return he("media:content",t).map((t=>{const{attribs:e}=t,r={medium:e.medium,isDefault:!!e.isDefault};for(const t of ge)e[t]&&(r[t]=e[t]);for(const t of me)e[t]&&(r[t]=parseInt(e[t],10));return e.expression&&(r.expression=e.expression),r}))}function ve(t,e){return he(t,e,!0,1)[0]}function be(t,e,r=!1){return te(he(t,e,r,1)).trim()}function we(t,e,r,n,i=!1){const o=be(r,n,i);o&&(t[e]=o)}function Se(t){return"rss"===t||"feed"===t||"rdf:RDF"===t}var xe=Object.freeze({__proto__:null,get DocumentPosition(){return fe},append:function(t,e){ne(e);const{parent:r}=t,n=t.next;if(e.next=n,e.prev=t,t.next=e,e.parent=r,n){if(n.prev=e,r){const t=r.children;t.splice(t.lastIndexOf(n),0,e)}}else r&&r.children.push(e)},appendChild:function(t,e){if(ne(e),e.next=null,e.parent=t,t.children.push(e)>1){const r=t.children[t.children.length-2];r.next=e,e.prev=r}else e.prev=null},compareDocumentPosition:de,existsOne:function t(e,r){return r.some((r=>Tt(r)&&(e(r)||t(e,r.children))))},filter:ie,find:oe,findAll:function(t,e){const r=[],n=[e],i=[0];for(;;){if(i[0]>=n[0].length){if(1===n.length)return r;n.shift(),i.shift();continue}const e=n[0][i[0]++];Tt(e)&&(t(e)&&r.push(e),e.children.length>0&&(i.unshift(0),n.unshift(e.children)))}},findOne:se,findOneChild:function(t,e){return e.find(t)},getAttributeValue:function(t,e){var r;return null===(r=t.attribs)||void 0===r?void 0:r[e]},getChildren:ee,getElementById:function(t,e,r=!0){return Array.isArray(e)||(e=[e]),se(ce("id",t),e,r)},getElements:function(t,e,r,n=1/0){const i=le(t);return i?ie(i,e,r,n):[]},getElementsByTagName:he,getElementsByTagType:function(t,e,r=!0,n=1/0){return ie(ae.tag_type(t),e,r,n)},getFeed:pe,getInnerHTML:function(t,e){return Lt(t)?t.children.map((t=>Xt(t,e))).join(""):""},getName:function(t){return t.name},getOuterHTML:Xt,getParent:re,getSiblings:function(t){const e=re(t);if(null!=e)return ee(e);const r=[t];let{prev:n,next:i}=t;for(;null!=n;)r.unshift(n),({prev:n}=n);for(;null!=i;)r.push(i),({next:i}=i);return r},getText:function t(e){return Array.isArray(e)?e.map(t).join(""):Tt(e)?"br"===e.name?"\n":t(e.children):kt(e)?t(e.children):Nt(e)?e.data:""},hasAttrib:function(t,e){return null!=t.attribs&&Object.prototype.hasOwnProperty.call(t.attribs,e)&&null!=t.attribs[e]},hasChildren:Lt,innerText:function t(e){return Array.isArray(e)?e.map(t).join(""):Lt(e)&&(e.type===st.Tag||kt(e))?t(e.children):Nt(e)?e.data:""},isCDATA:kt,isComment:Ot,isDocument:Rt,isTag:Tt,isText:Nt,nextElementSibling:function(t){let{next:e}=t;for(;null!==e&&!Tt(e);)({next:e}=e);return e},prepend:function(t,e){ne(e);const{parent:r}=t;if(r){const n=r.children;n.splice(n.indexOf(t),0,e)}t.prev&&(t.prev.next=e),e.parent=r,e.prev=t.prev,e.next=t,t.prev=e},prependChild:function(t,e){if(ne(e),e.parent=t,e.prev=null,1!==t.children.unshift(e)){const r=t.children[1];r.prev=e,e.next=r}else e.next=null},prevElementSibling:function(t){let{prev:e}=t;for(;null!==e&&!Tt(e);)({prev:e}=e);return e},removeElement:ne,removeSubsets:function(t){let e=t.length;for(;--e>=0;){const r=t[e];if(e>0&&t.lastIndexOf(r,e-1)>=0)t.splice(e,1);else for(let n=r.parent;n;n=n.parent)if(t.includes(n)){t.splice(e,1);break}}return t},replaceElement:function(t,e){const r=e.prev=t.prev;r&&(r.next=e);const n=e.next=t.next;n&&(n.prev=e);const i=e.parent=t.parent;if(i){const r=i.children;r[r.lastIndexOf(t)]=e,t.parent=null}},testElement:function(t,e){const r=le(t);return!r||r(e)},textContent:te,uniqueSort:function(t){return(t=t.filter(((t,e,r)=>!r.includes(t,e+1)))).sort(((t,e)=>{const r=de(t,e);return r&fe.PRECEDING?-1:r&fe.FOLLOWING?1:0})),t}});function _e(t,e){const r=new Dt(void 0,e);return new ot(r,e).end(t),r.root}function Ae(t,e){return _e(t,e).children}const Ee={xmlMode:!0};var Ce=Object.freeze({__proto__:null,DefaultHandler:Dt,DomHandler:Dt,DomUtils:xe,ElementType:yt,Parser:ot,get QuoteType(){return F},Tokenizer:K,createDocumentStream:function(t,e,r){const n=new Dt((e=>t(e,n.root)),e,r);return new ot(n,e)},createDomStream:function(t,e,r){const n=new Dt(t,e,r);return new ot(n,e)},getFeed:pe,parseDOM:Ae,parseDocument:_e,parseFeed:function(t,e=Ee){return pe(Ae(t,e))}});const Te=-1,ke=10,Ne=11,Oe=new Set(["ARTICLE","ASIDE","BLOCKQUOTE","BODY","BR","BUTTON","CANVAS","CAPTION","COL","COLGROUP","DD","DIV","DL","DT","EMBED","FIELDSET","FIGCAPTION","FIGURE","FOOTER","FORM","H1","H2","H3","H4","H5","H6","LI","UL","OL","P"]),Re="http://www.w3.org/2000/svg",{assign:Le,create:Ie,defineProperties:Pe,entries:Me,getOwnPropertyDescriptors:De,keys:je,setPrototypeOf:Fe}=Object,qe=String,Be=t=>1===t.nodeType?t[f]:t,Ue=({ownerDocument:t})=>t[m].ignoreCase,Ve=(t,e)=>{t[v]=e,e[w]=t},He=(t,e,r)=>{Ve(t,e),Ve(Be(e),r)},Ge=(t,e,r)=>{Ve(t,e),Ve(e,r)},$e=({localName:t,ownerDocument:e})=>e[m].ignoreCase?t.toUpperCase():t,We=(t,e)=>{t&&(t[v]=e),e&&(e[w]=t)},ze=new WeakMap;let Ke=!1;const Ye=new WeakMap,Qe=new WeakMap,Ze=(t,e,r,n)=>{Ke&&Qe.has(t)&&t.attributeChangedCallback&&t.constructor.observedAttributes.includes(e)&&t.attributeChangedCallback(e,r,n)},Je=(t,e)=>r=>{if(Qe.has(r)){const n=Qe.get(r);n.connected!==e&&r.isConnected===e&&(n.connected=e,t in r&&r[t]())}},Xe=Je("connectedCallback",!0),tr=t=>{if(Ke){Xe(t),ze.has(t)&&(t=ze.get(t).shadowRoot);let{[v]:e,[f]:r}=t;for(;e!==r;)1===e.nodeType&&Xe(e),e=e[v]}},er=Je("disconnectedCallback",!1);class rr{constructor(t){this.ownerDocument=t,this.registry=new Map,this.waiting=new Map,this.active=!1}define(t,e,r={}){const{ownerDocument:n,registry:i,waiting:o}=this;if(i.has(t))throw new Error("unable to redefine "+t);if(Ye.has(e))throw new Error("unable to redefine the same class: "+e);this.active=Ke=!0;const{extends:s}=r;Ye.set(e,{ownerDocument:n,options:{is:s?t:""},localName:s||t});const a=s?e=>e.localName===s&&e.getAttribute("is")===t:e=>e.localName===t;if(i.set(t,{Class:e,check:a}),o.has(t)){for(const r of o.get(t))r(e);o.delete(t)}n.querySelectorAll(s?`${s}[is="${t}"]`:t).forEach(this.upgrade,this)}upgrade(t){if(Qe.has(t))return;const{ownerDocument:e,registry:r}=this,n=t.getAttribute("is")||t.localName;if(r.has(n)){const{Class:i,check:o}=r.get(n);if(o(t)){const{attributes:r,isConnected:o}=t;for(const e of r)t.removeAttributeNode(e);const s=Me(t);for(const[e]of s)delete t[e];Fe(t,i.prototype),e[E]={element:t,values:s},new i(e,n),Qe.set(t,{connected:o});for(const e of r)t.setAttributeNode(e);o&&t.connectedCallback&&t.connectedCallback()}}}whenDefined(t){const{registry:e,waiting:r}=this;return new Promise((n=>{e.has(t)?n(e.get(t).Class):(r.has(t)||r.set(t,[]),r.get(t).push(n))}))}get(t){const e=this.registry.get(t);return e&&e.Class}getName(t){if(Ye.has(t)){const{localName:e}=Ye.get(t);return e}return null}}const{Parser:nr}=Ce,ir=(t,e,r)=>{const n=t[f];return e.parentNode=t,He(n[w],e,n),r&&1===e.nodeType&&tr(e),e},or=(t,e,r,n,i)=>{r[C]=n,r.ownerElement=t,Ge(e[w],r,e),"class"===r.name&&(t.className=n),i&&Ze(t,r.name,null,n)},sr=(t,e,r)=>{const{active:n,registry:i}=t[a];let o=t,s=null,c=!1;const u=new nr({onprocessinginstruction(e,r){"!doctype"===e.toLowerCase()&&(t.doctype=r.slice(e.length).trim())},onopentag(r,a){let c=!0;if(e)if(s)o=ir(o,t.createElementNS(Re,r),n),o.ownerSVGElement=s,c=!1;else if("svg"===r||"SVG"===r)s=t.createElementNS(Re,r),o=ir(o,s,n),c=!1;else if(n){const t=r.includes("-")?r:a.is||"";if(t&&i.has(t)){const{Class:e}=i.get(t);o=ir(o,new e,n),delete a.is,c=!1}}c&&(o=ir(o,t.createElement(r),!1));let u=o[f];for(const e of je(a))or(o,u,t.createAttribute(e),a[e],n)},oncomment(e){ir(o,t.createComment(e),n)},ontext(e){ir(o,c?t.createCDATASection(e):t.createTextNode(e),n)},oncdatastart(){c=!0},oncdataend(){c=!1},onclosetag(){e&&o===s&&(s=null),o=o.parentNode}},{lowerCaseAttributeNames:!1,decodeEntities:!0,xmlMode:!e});return u.write(r),u.end(),t},ar=new Map,cr=(t,e)=>{for(const r of[].concat(t))ar.set(r,e),ar.set(r.toUpperCase(),e)},ur=globalThis.performance,lr=({[v]:t,[f]:e},r)=>{for(;t!==e;){switch(t.nodeType){case 2:hr(t,r);break;case 3:case 8:case 4:fr(t,r);break;case 1:pr(t,r),t=Be(t);break;case ke:dr(t,r)}t=t[v]}const n=r.length-1,i=r[n];"number"==typeof i&&i<0?r[n]+=Te:r.push(Te)},hr=(t,e)=>{e.push(2,t.name);const r=t[C].trim();r&&e.push(r)},fr=(t,e)=>{const r=t[C];r.trim()&&e.push(t.nodeType,r)},dr=({name:t,publicId:e,systemId:r},n)=>{n.push(ke,t),e&&n.push(e),r&&n.push(r)},pr=(t,e)=>{e.push(1,t.localName),lr(t,e)},gr=(t,e,r,n,i,o)=>({type:t,target:e,addedNodes:r,removedNodes:n,attributeName:i,oldValue:o}),mr=(t,e,r,n,i,o)=>{if(!n||n.includes(r)){const{callback:n,records:s,scheduled:a}=t;s.push(gr("attributes",e,[],[],r,i?o:void 0)),a||(t.scheduled=!0,Promise.resolve().then((()=>{t.scheduled=!1,n(s.splice(0),t)})))}},yr=(t,e,r)=>{const{ownerDocument:n}=t,{active:i,observers:o}=n[y];if(i)for(const i of o)for(const[o,{childList:s,subtree:a,attributes:c,attributeFilter:u,attributeOldValue:l}]of i.nodes)if(s){if(a&&(o===n||o.contains(t))||!a&&o.children.includes(t)){mr(i,t,e,u,l,r);break}}else if(c&&o===t){mr(i,t,e,u,l,r);break}},vr=(t,e)=>{const{ownerDocument:r}=t,{active:n,observers:i}=r[y];if(n)for(const n of i)for(const[i,{subtree:o,childList:s,characterData:a}]of n.nodes)if(s&&(e&&(i===e||o&&i.contains(e))||!e&&(o&&(i===r||i.contains(t))||!o&&i[a?"childNodes":"children"].includes(t)))){const{callback:r,records:o,scheduled:s}=n;o.push(gr("childList",i,e?[]:[t],e?[t]:[])),s||(n.scheduled=!0,Promise.resolve().then((()=>{n.scheduled=!1,r(o.splice(0),n)})));break}};class br{constructor(t){const e=new Set;this.observers=e,this.active=!1,this.class=class{constructor(t){this.callback=t,this.nodes=new Map,this.records=[],this.scheduled=!1}disconnect(){this.records.splice(0),this.nodes.clear(),e.delete(this),t[y].active=!!e.size}observe(r,n={subtree:!1,childList:!1,attributes:!1,attributeFilter:null,attributeOldValue:!1,characterData:!1}){("attributeOldValue"in n||"attributeFilter"in n)&&(n.attributes=!0),n.childList=!!n.childList,n.subtree=!!n.subtree,this.nodes.set(r,n),e.add(this),t[y].active=!0}takeRecords(){return this.records.splice(0)}}}}const wr=new Set(["allowfullscreen","allowpaymentrequest","async","autofocus","autoplay","checked","class","contenteditable","controls","default","defer","disabled","draggable","formnovalidate","hidden","id","ismap","itemscope","loop","multiple","muted","nomodule","novalidate","open","playsinline","readonly","required","reversed","selected","style","truespeed"]),Sr=(t,e)=>{const{[C]:r,name:n}=e;e.ownerElement=t,Ge(t,e,t[v]),"class"===n&&(t.className=r),yr(t,n,null),Ze(t,n,null,r)},xr=(t,e)=>{const{[C]:r,name:n}=e;Ve(e[w],e[v]),e.ownerElement=e[w]=e[v]=null,"class"===n&&(t[s]=null),yr(t,n,r),Ze(t,n,r,null)},_r={get:(t,e)=>t.hasAttribute(e),set(t,e,r){r?t.setAttribute(e,""):t.removeAttribute(e)}},Ar={get:(t,e)=>parseFloat(t.getAttribute(e)||0),set(t,e,r){t.setAttribute(e,r)}},Er={get:(t,e)=>t.getAttribute(e)||"",set(t,e,r){t.setAttribute(e,r)}},Cr=new WeakMap;function Tr(t,e){return"function"==typeof e?e.call(t.target,t):e.handleEvent(t),t._stopImmediatePropagationFlag}function kr({currentTarget:t,target:e}){const r=Cr.get(t);if(r&&r.has(this.type)){const n=r.get(this.type);this.eventPhase=t===e?this.AT_TARGET:this.BUBBLING_PHASE,this.currentTarget=t,this.target=e;for(const[t,e]of n)if(e&&e.once&&n.delete(t),Tr(this,t))break;return delete this.currentTarget,delete this.target,this.cancelBubble}}class Nr{constructor(){Cr.set(this,new Map)}_getParent(){return null}addEventListener(t,e,r){const n=Cr.get(this);n.has(t)||n.set(t,new Map),n.get(t).set(e,r)}removeEventListener(t,e){const r=Cr.get(this);if(r.has(t)){const n=r.get(t);n.delete(e)&&!n.size&&r.delete(t)}}dispatchEvent(t){let e=this;for(t.eventPhase=t.CAPTURING_PHASE;e;)e.dispatchEvent&&t._path.push({currentTarget:e,target:this}),e=t.bubbles&&e._getParent&&e._getParent();return t._path.some(kr,t),t._path=[],t.eventPhase=t.NONE,!t.defaultPrevented}}class Or extends Array{item(t){return t<this.length?this[t]:null}}const Rr=({parentNode:t})=>{let e=0;for(;t;)e++,t=t.parentNode;return e};let Lr=class extends Nr{static get ELEMENT_NODE(){return 1}static get ATTRIBUTE_NODE(){return 2}static get TEXT_NODE(){return 3}static get CDATA_SECTION_NODE(){return 4}static get COMMENT_NODE(){return 8}static get DOCUMENT_NODE(){return 9}static get DOCUMENT_FRAGMENT_NODE(){return Ne}static get DOCUMENT_TYPE_NODE(){return ke}constructor(t,e,r){super(),this.ownerDocument=t,this.localName=e,this.nodeType=r,this.parentNode=null,this[v]=null,this[w]=null}get ELEMENT_NODE(){return 1}get ATTRIBUTE_NODE(){return 2}get TEXT_NODE(){return 3}get CDATA_SECTION_NODE(){return 4}get COMMENT_NODE(){return 8}get DOCUMENT_NODE(){return 9}get DOCUMENT_FRAGMENT_NODE(){return Ne}get DOCUMENT_TYPE_NODE(){return ke}get baseURI(){const t=9===this.nodeType?this:this.ownerDocument;if(t){const e=t.querySelector("base");if(e)return e.getAttribute("href");const{location:r}=t.defaultView;if(r)return r.href}return null}get isConnected(){return!1}get nodeName(){return this.localName}get parentElement(){return null}get previousSibling(){return null}get previousElementSibling(){return null}get nextSibling(){return null}get nextElementSibling(){return null}get childNodes(){return new Or}get firstChild(){return null}get lastChild(){return null}get nodeValue(){return null}set nodeValue(t){}get textContent(){return null}set textContent(t){}normalize(){}cloneNode(){return null}contains(){return!1}insertBefore(t,e){return t}appendChild(t){return t}replaceChild(t,e){return e}removeChild(t){return t}toString(){return""}hasChildNodes(){return!!this.lastChild}isSameNode(t){return this===t}compareDocumentPosition(t){let e=0;if(this!==t){let r=Rr(this),n=Rr(t);if(r<n)e+=4,this.contains(t)&&(e+=16);else if(n<r)e+=2,t.contains(this)&&(e+=8);else if(r&&n){const{childNodes:r}=this.parentNode;r.indexOf(this)<r.indexOf(t)?e+=4:e+=2}r&&n||(e+=32,e+=1)}return e}isEqualNode(t){if(this===t)return!0;if(this.nodeType===t.nodeType){switch(this.nodeType){case 9:case Ne:{const e=this.childNodes,r=t.childNodes;return e.length===r.length&&e.every(((t,e)=>t.isEqualNode(r[e])))}}return this.toString()===t.toString()}return!1}_getParent(){return this.parentNode}getRootNode(){let t=this;for(;t.parentNode;)t=t.parentNode;return t}};const{replace:Ir}="",Pr=/[<>&\xA0]/g,Mr={" ":"&#160;","&":"&amp;","<":"&lt;",">":"&gt;"},Dr=t=>Mr[t],jr=t=>Ir.call(t,Pr,Dr),Fr=/"/g;let qr=class t extends Lr{constructor(t,e,r=""){super(t,e,2),this.ownerElement=null,this.name=qe(e),this[C]=qe(r),this[o]=!1}get value(){return this[C]}set value(t){const{[C]:e,name:r,ownerElement:n}=this;this[C]=qe(t),this[o]=!0,n&&(yr(n,r,e),Ze(n,r,e,this[C]))}cloneNode(){const{ownerDocument:e,name:r,[C]:n}=this;return new t(e,r,n)}toString(){const{name:t,[C]:e}=this;if(wr.has(t)&&!e)return Ue(this)?t:`${t}=""`;return`${t}="${(Ue(this)?e:jr(e)).replace(Fr,"&quot;")}"`}toJSON(){const t=[];return hr(this,t),t}};const Br=({ownerDocument:t,parentNode:e})=>{for(;e;){if(e===t)return!0;e=e.parentNode||e.host}return!1},Ur=({parentNode:t})=>{if(t)switch(t.nodeType){case 9:case Ne:return null}return t},Vr=({[w]:t})=>{switch(t?t.nodeType:0){case Te:return t[_];case 3:case 8:case 4:return t}return null},Hr=t=>{const e=Be(t)[v];return e&&(e.nodeType===Te?null:e)},Gr=t=>{let e=Hr(t);for(;e&&1!==e.nodeType;)e=Hr(e);return e},$r=t=>{let e=Vr(t);for(;e&&1!==e.nodeType;)e=Vr(e);return e},Wr=(t,e)=>{const r=t.createDocumentFragment();return r.append(...e),r},zr=(t,e)=>{const{ownerDocument:r,parentNode:n}=t;n&&n.insertBefore(Wr(r,e),t)},Kr=(t,e)=>{const{ownerDocument:r,parentNode:n}=t;n&&n.insertBefore(Wr(r,e),Be(t)[v])},Yr=(t,e)=>{const{ownerDocument:r,parentNode:n}=t;n&&(e.includes(t)&&Yr(t,[t=t.cloneNode()]),n.insertBefore(Wr(r,e),t),t.remove())},Qr=(t,e,r)=>{const{parentNode:n,nodeType:i}=e;(t||r)&&(We(t,r),e[w]=null,Be(e)[v]=null),n&&(e.parentNode=null,vr(e,n),1===i&&(t=>{if(Ke){er(t),ze.has(t)&&(t=ze.get(t).shadowRoot);let{[v]:e,[f]:r}=t;for(;e!==r;)1===e.nodeType&&er(e),e=e[v]}})(e))};let Zr=class extends Lr{constructor(t,e,r,n){super(t,e,r),this[C]=qe(n)}get isConnected(){return Br(this)}get parentElement(){return Ur(this)}get previousSibling(){return Vr(this)}get nextSibling(){return Hr(this)}get previousElementSibling(){return $r(this)}get nextElementSibling(){return Gr(this)}before(...t){zr(this,t)}after(...t){Kr(this,t)}replaceWith(...t){Yr(this,t)}remove(){Qr(this[w],this,this[v])}get data(){return this[C]}set data(t){this[C]=qe(t),vr(this,this.parentNode)}get nodeValue(){return this.data}set nodeValue(t){this.data=t}get textContent(){return this.data}set textContent(t){this.data=t}get length(){return this.data.length}substringData(t,e){return this.data.substr(t,e)}appendData(t){this.data+=t}insertData(t,e){const{data:r}=this;this.data=r.slice(0,t)+e+r.slice(t)}deleteData(t,e){const{data:r}=this;this.data=r.slice(0,t)+r.slice(t+e)}replaceData(t,e,r){const{data:n}=this;this.data=n.slice(0,t)+r+n.slice(t+e)}toJSON(){const t=[];return fr(this,t),t}},Jr=class t extends Zr{constructor(t,e=""){super(t,"#cdatasection",4,e)}cloneNode(){const{ownerDocument:e,[C]:r}=this;return new t(e,r)}toString(){return`<![CDATA[${this[C]}]]>`}},Xr=class t extends Zr{constructor(t,e=""){super(t,"#comment",8,e)}cloneNode(){const{ownerDocument:e,[C]:r}=this;return new t(e,r)}toString(){return`\x3c!--${this[C]}--\x3e`}};function tn(t){return t&&t.__esModule&&Object.prototype.hasOwnProperty.call(t,"default")?t.default:t}var en,rn,nn=tn({trueFunc:function(){return!0},falseFunc:function(){return!1}});!function(t){t.Attribute="attribute",t.Pseudo="pseudo",t.PseudoElement="pseudo-element",t.Tag="tag",t.Universal="universal",t.Adjacent="adjacent",t.Child="child",t.Descendant="descendant",t.Parent="parent",t.Sibling="sibling",t.ColumnCombinator="column-combinator"}(en||(en={})),function(t){t.Any="any",t.Element="element",t.End="end",t.Equals="equals",t.Exists="exists",t.Hyphen="hyphen",t.Not="not",t.Start="start"}(rn||(rn={}));const on=/^[^\\#]?(?:\\(?:[\da-f]{1,6}\s?|.)|[\w\-\u00b0-\uFFFF])+/,sn=/\\([\da-f]{1,6}\s?|(\s)|.)/gi,an=new Map([[126,rn.Element],[94,rn.Start],[36,rn.End],[42,rn.Any],[33,rn.Not],[124,rn.Hyphen]]),cn=new Set(["has","not","matches","is","where","host","host-context"]);const un=new Set(["contains","icontains"]);function ln(t,e,r){const n=parseInt(e,16)-65536;return n!=n||r?e:n<0?String.fromCharCode(n+65536):String.fromCharCode(n>>10|55296,1023&n|56320)}function hn(t){return t.replace(sn,ln)}function fn(t){return 39===t||34===t}function dn(t){return 32===t||9===t||10===t||12===t||13===t}function pn(t){const e=[],r=gn(e,`${t}`,0);if(r<t.length)throw new Error(`Unmatched selector: ${t.slice(r)}`);return e}function gn(t,e,r){let n=[];function i(t){const n=e.slice(r+t).match(on);if(!n)throw new Error(`Expected name, found ${e.slice(r)}`);const[i]=n;return r+=t+i.length,hn(i)}function o(t){for(r+=t;r<e.length&&dn(e.charCodeAt(r));)r++}function s(){const t=r+=1;let n=1;for(;n>0&&r<e.length;r++)40!==e.charCodeAt(r)||a(r)?41!==e.charCodeAt(r)||a(r)||n--:n++;if(n)throw new Error("Parenthesis not matched");return hn(e.slice(t,r-1))}function a(t){let r=0;for(;92===e.charCodeAt(--t);)r++;return 1==(1&r)}function c(){if(n.length>0&&function(t){switch(t.type){case en.Adjacent:case en.Child:case en.Descendant:case en.Parent:case en.Sibling:case en.ColumnCombinator:return!0;default:return!1}}(n[n.length-1]))throw new Error("Did not expect successive traversals.")}function u(t){n.length>0&&n[n.length-1].type===en.Descendant?n[n.length-1].type=t:(c(),n.push({type:t}))}function l(t,e){n.push({type:en.Attribute,name:t,action:e,value:i(1),namespace:null,ignoreCase:"quirks"})}function h(){if(n.length&&n[n.length-1].type===en.Descendant&&n.pop(),0===n.length)throw new Error("Empty sub-selector");t.push(n)}if(o(0),e.length===r)return r;t:for(;r<e.length;){const t=e.charCodeAt(r);switch(t){case 32:case 9:case 10:case 12:case 13:0!==n.length&&n[0].type===en.Descendant||(c(),n.push({type:en.Descendant})),o(1);break;case 62:u(en.Child),o(1);break;case 60:u(en.Parent),o(1);break;case 126:u(en.Sibling),o(1);break;case 43:u(en.Adjacent),o(1);break;case 46:l("class",rn.Element);break;case 35:l("id",rn.Equals);break;case 91:{let t;o(1);let s=null;124===e.charCodeAt(r)?t=i(1):e.startsWith("*|",r)?(s="*",t=i(2)):(t=i(0),124===e.charCodeAt(r)&&61!==e.charCodeAt(r+1)&&(s=t,t=i(1))),o(0);let c=rn.Exists;const u=an.get(e.charCodeAt(r));if(u){if(c=u,61!==e.charCodeAt(r+1))throw new Error("Expected `=`");o(2)}else 61===e.charCodeAt(r)&&(c=rn.Equals,o(1));let l="",h=null;if("exists"!==c){if(fn(e.charCodeAt(r))){const t=e.charCodeAt(r);let n=r+1;for(;n<e.length&&(e.charCodeAt(n)!==t||a(n));)n+=1;if(e.charCodeAt(n)!==t)throw new Error("Attribute value didn't end");l=hn(e.slice(r+1,n)),r=n+1}else{const t=r;for(;r<e.length&&(!dn(e.charCodeAt(r))&&93!==e.charCodeAt(r)||a(r));)r+=1;l=hn(e.slice(t,r))}o(0);const t=32|e.charCodeAt(r);115===t?(h=!1,o(1)):105===t&&(h=!0,o(1))}if(93!==e.charCodeAt(r))throw new Error("Attribute selector didn't terminate");r+=1;const f={type:en.Attribute,name:t,action:c,value:l,namespace:s,ignoreCase:h};n.push(f);break}case 58:{if(58===e.charCodeAt(r+1)){n.push({type:en.PseudoElement,name:i(2).toLowerCase(),data:40===e.charCodeAt(r)?s():null});continue}const t=i(1).toLowerCase();let o=null;if(40===e.charCodeAt(r))if(cn.has(t)){if(fn(e.charCodeAt(r+1)))throw new Error(`Pseudo-selector ${t} cannot be quoted`);if(o=[],r=gn(o,e,r+1),41!==e.charCodeAt(r))throw new Error(`Missing closing parenthesis in :${t} (${e})`);r+=1}else{if(o=s(),un.has(t)){const t=o.charCodeAt(0);t===o.charCodeAt(o.length-1)&&fn(t)&&(o=o.slice(1,-1))}o=hn(o)}n.push({type:en.Pseudo,name:t,data:o});break}case 44:h(),n=[],o(1);break;default:{if(e.startsWith("/*",r)){const t=e.indexOf("*/",r+2);if(t<0)throw new Error("Comment was not terminated");r=t+2,0===n.length&&o(0);break}let s,a=null;if(42===t)r+=1,s="*";else if(124===t){if(s="",124===e.charCodeAt(r+1)){u(en.ColumnCombinator),o(2);break}}else{if(!on.test(e.slice(r)))break t;s=i(0)}124===e.charCodeAt(r)&&124!==e.charCodeAt(r+1)&&(a=s,42===e.charCodeAt(r+1)?(s="*",r+=2):s=i(1)),n.push("*"===s?{type:en.Universal,namespace:a}:{type:en.Tag,name:s,namespace:a})}}}return h(),r}const mn=new Map([[en.Universal,50],[en.Tag,30],[en.Attribute,1],[en.Pseudo,0]]);function yn(t){return!mn.has(t.type)}const vn=new Map([[rn.Exists,10],[rn.Equals,8],[rn.Not,7],[rn.Start,6],[rn.End,6],[rn.Any,5]]);function bn(t){const e=t.map(wn);for(let r=1;r<t.length;r++){const n=e[r];if(!(n<0))for(let i=r-1;i>=0&&n<e[i];i--){const r=t[i+1];t[i+1]=t[i],t[i]=r,e[i+1]=e[i],e[i]=n}}}function wn(t){var e,r;let n=null!==(e=mn.get(t.type))&&void 0!==e?e:-1;return t.type===en.Attribute?(n=null!==(r=vn.get(t.action))&&void 0!==r?r:4,t.action===rn.Equals&&"id"===t.name&&(n=9),t.ignoreCase&&(n>>=1)):t.type===en.Pseudo&&(t.data?"has"===t.name||"contains"===t.name?n=0:Array.isArray(t.data)?(n=Math.min(...t.data.map((t=>Math.min(...t.map(wn))))),n<0&&(n=0)):n=2:n=3),n}const Sn=/[-[\]{}()*+?.,\\^$|#\s]/g;function xn(t){return t.replace(Sn,"\\$&")}const _n=new Set(["accept","accept-charset","align","alink","axis","bgcolor","charset","checked","clear","codetype","color","compact","declare","defer","dir","direction","disabled","enctype","face","frame","hreflang","http-equiv","lang","language","link","media","method","multiple","nohref","noresize","noshade","nowrap","readonly","rel","rev","rules","scope","scrolling","selected","shape","target","text","type","valign","valuetype","vlink"]);function An(t,e){return"boolean"==typeof t.ignoreCase?t.ignoreCase:"quirks"===t.ignoreCase?!!e.quirksMode:!e.xmlMode&&_n.has(t.name)}const En={equals(t,e,r){const{adapter:n}=r,{name:i}=e;let{value:o}=e;return An(e,r)?(o=o.toLowerCase(),e=>{const r=n.getAttributeValue(e,i);return null!=r&&r.length===o.length&&r.toLowerCase()===o&&t(e)}):e=>n.getAttributeValue(e,i)===o&&t(e)},hyphen(t,e,r){const{adapter:n}=r,{name:i}=e;let{value:o}=e;const s=o.length;return An(e,r)?(o=o.toLowerCase(),function(e){const r=n.getAttributeValue(e,i);return null!=r&&(r.length===s||"-"===r.charAt(s))&&r.substr(0,s).toLowerCase()===o&&t(e)}):function(e){const r=n.getAttributeValue(e,i);return null!=r&&(r.length===s||"-"===r.charAt(s))&&r.substr(0,s)===o&&t(e)}},element(t,e,r){const{adapter:n}=r,{name:i,value:o}=e;if(/\s/.test(o))return nn.falseFunc;const s=new RegExp(`(?:^|\\s)${xn(o)}(?:$|\\s)`,An(e,r)?"i":"");return function(e){const r=n.getAttributeValue(e,i);return null!=r&&r.length>=o.length&&s.test(r)&&t(e)}},exists:(t,{name:e},{adapter:r})=>n=>r.hasAttrib(n,e)&&t(n),start(t,e,r){const{adapter:n}=r,{name:i}=e;let{value:o}=e;const s=o.length;return 0===s?nn.falseFunc:An(e,r)?(o=o.toLowerCase(),e=>{const r=n.getAttributeValue(e,i);return null!=r&&r.length>=s&&r.substr(0,s).toLowerCase()===o&&t(e)}):e=>{var r;return!!(null===(r=n.getAttributeValue(e,i))||void 0===r?void 0:r.startsWith(o))&&t(e)}},end(t,e,r){const{adapter:n}=r,{name:i}=e;let{value:o}=e;const s=-o.length;return 0===s?nn.falseFunc:An(e,r)?(o=o.toLowerCase(),e=>{var r;return(null===(r=n.getAttributeValue(e,i))||void 0===r?void 0:r.substr(s).toLowerCase())===o&&t(e)}):e=>{var r;return!!(null===(r=n.getAttributeValue(e,i))||void 0===r?void 0:r.endsWith(o))&&t(e)}},any(t,e,r){const{adapter:n}=r,{name:i,value:o}=e;if(""===o)return nn.falseFunc;if(An(e,r)){const e=new RegExp(xn(o),"i");return function(r){const s=n.getAttributeValue(r,i);return null!=s&&s.length>=o.length&&e.test(s)&&t(r)}}return e=>{var r;return!!(null===(r=n.getAttributeValue(e,i))||void 0===r?void 0:r.includes(o))&&t(e)}},not(t,e,r){const{adapter:n}=r,{name:i}=e;let{value:o}=e;return""===o?e=>!!n.getAttributeValue(e,i)&&t(e):An(e,r)?(o=o.toLowerCase(),e=>{const r=n.getAttributeValue(e,i);return(null==r||r.length!==o.length||r.toLowerCase()!==o)&&t(e)}):e=>n.getAttributeValue(e,i)!==o&&t(e)}},Cn=new Set([9,10,12,13,32]),Tn="0".charCodeAt(0),kn="9".charCodeAt(0);function Nn(t){return function(t){const e=t[0],r=t[1]-1;if(r<0&&e<=0)return nn.falseFunc;if(-1===e)return t=>t<=r;if(0===e)return t=>t===r;if(1===e)return r<0?nn.trueFunc:t=>t>=r;const n=Math.abs(e),i=(r%n+n)%n;return e>1?t=>t>=r&&t%n===i:t=>t<=r&&t%n===i}(function(t){if("even"===(t=t.trim().toLowerCase()))return[2,0];if("odd"===t)return[2,1];let e=0,r=0,n=o(),i=s();if(e<t.length&&"n"===t.charAt(e)&&(e++,r=n*(null!=i?i:1),a(),e<t.length?(n=o(),a(),i=s()):n=i=0),null===i||e<t.length)throw new Error(`n-th rule couldn't be parsed ('${t}')`);return[r,n*i];function o(){return"-"===t.charAt(e)?(e++,-1):("+"===t.charAt(e)&&e++,1)}function s(){const r=e;let n=0;for(;e<t.length&&t.charCodeAt(e)>=Tn&&t.charCodeAt(e)<=kn;)n=10*n+(t.charCodeAt(e)-Tn),e++;return e===r?null:n}function a(){for(;e<t.length&&Cn.has(t.charCodeAt(e));)e++}}(t))}function On(t,e){return r=>{const n=e.getParent(r);return null!=n&&e.isTag(n)&&t(r)}}const Rn={contains:(t,e,{adapter:r})=>function(n){return t(n)&&r.getText(n).includes(e)},icontains(t,e,{adapter:r}){const n=e.toLowerCase();return function(e){return t(e)&&r.getText(e).toLowerCase().includes(n)}},"nth-child"(t,e,{adapter:r,equals:n}){const i=Nn(e);return i===nn.falseFunc?nn.falseFunc:i===nn.trueFunc?On(t,r):function(e){const o=r.getSiblings(e);let s=0;for(let t=0;t<o.length&&!n(e,o[t]);t++)r.isTag(o[t])&&s++;return i(s)&&t(e)}},"nth-last-child"(t,e,{adapter:r,equals:n}){const i=Nn(e);return i===nn.falseFunc?nn.falseFunc:i===nn.trueFunc?On(t,r):function(e){const o=r.getSiblings(e);let s=0;for(let t=o.length-1;t>=0&&!n(e,o[t]);t--)r.isTag(o[t])&&s++;return i(s)&&t(e)}},"nth-of-type"(t,e,{adapter:r,equals:n}){const i=Nn(e);return i===nn.falseFunc?nn.falseFunc:i===nn.trueFunc?On(t,r):function(e){const o=r.getSiblings(e);let s=0;for(let t=0;t<o.length;t++){const i=o[t];if(n(e,i))break;r.isTag(i)&&r.getName(i)===r.getName(e)&&s++}return i(s)&&t(e)}},"nth-last-of-type"(t,e,{adapter:r,equals:n}){const i=Nn(e);return i===nn.falseFunc?nn.falseFunc:i===nn.trueFunc?On(t,r):function(e){const o=r.getSiblings(e);let s=0;for(let t=o.length-1;t>=0;t--){const i=o[t];if(n(e,i))break;r.isTag(i)&&r.getName(i)===r.getName(e)&&s++}return i(s)&&t(e)}},root:(t,e,{adapter:r})=>e=>{const n=r.getParent(e);return(null==n||!r.isTag(n))&&t(e)},scope(t,e,r,n){const{equals:i}=r;return n&&0!==n.length?1===n.length?e=>i(n[0],e)&&t(e):e=>n.includes(e)&&t(e):Rn.root(t,e,r)},hover:Ln("isHovered"),visited:Ln("isVisited"),active:Ln("isActive")};function Ln(t){return function(e,r,{adapter:n}){const i=n[t];return"function"!=typeof i?nn.falseFunc:function(t){return i(t)&&e(t)}}}const In={empty:(t,{adapter:e})=>!e.getChildren(t).some((t=>e.isTag(t)||""!==e.getText(t))),"first-child"(t,{adapter:e,equals:r}){if(e.prevElementSibling)return null==e.prevElementSibling(t);const n=e.getSiblings(t).find((t=>e.isTag(t)));return null!=n&&r(t,n)},"last-child"(t,{adapter:e,equals:r}){const n=e.getSiblings(t);for(let i=n.length-1;i>=0;i--){if(r(t,n[i]))return!0;if(e.isTag(n[i]))break}return!1},"first-of-type"(t,{adapter:e,equals:r}){const n=e.getSiblings(t),i=e.getName(t);for(let o=0;o<n.length;o++){const s=n[o];if(r(t,s))return!0;if(e.isTag(s)&&e.getName(s)===i)break}return!1},"last-of-type"(t,{adapter:e,equals:r}){const n=e.getSiblings(t),i=e.getName(t);for(let o=n.length-1;o>=0;o--){const s=n[o];if(r(t,s))return!0;if(e.isTag(s)&&e.getName(s)===i)break}return!1},"only-of-type"(t,{adapter:e,equals:r}){const n=e.getName(t);return e.getSiblings(t).every((i=>r(t,i)||!e.isTag(i)||e.getName(i)!==n))},"only-child":(t,{adapter:e,equals:r})=>e.getSiblings(t).every((n=>r(t,n)||!e.isTag(n)))};function Pn(t,e,r,n){if(null===r){if(t.length>n)throw new Error(`Pseudo-class :${e} requires an argument`)}else if(t.length===n)throw new Error(`Pseudo-class :${e} doesn't have any arguments`)}const Mn={"any-link":":is(a, area, link)[href]",link:":any-link:not(:visited)",disabled:":is(\n        :is(button, input, select, textarea, optgroup, option)[disabled],\n        optgroup[disabled] > option,\n        fieldset[disabled]:not(fieldset[disabled] legend:first-of-type *)\n    )",enabled:":not(:disabled)",checked:":is(:is(input[type=radio], input[type=checkbox])[checked], option:selected)",required:":is(input, select, textarea)[required]",optional:":is(input, select, textarea):not([required])",selected:"option:is([selected], select:not([multiple]):not(:has(> option[selected])) > :first-of-type)",checkbox:"[type=checkbox]",file:"[type=file]",password:"[type=password]",radio:"[type=radio]",reset:"[type=reset]",image:"[type=image]",submit:"[type=submit]",parent:":not(:empty)",header:":is(h1, h2, h3, h4, h5, h6)",button:":is(button, input[type=button])",input:":is(input, textarea, select, button)",text:"input:is(:not([type!='']), [type=text])"},Dn={};function jn(t,e){return t===nn.falseFunc?nn.falseFunc:r=>e.isTag(r)&&t(r)}function Fn(t,e){const r=e.getSiblings(t);if(r.length<=1)return[];const n=r.indexOf(t);return n<0||n===r.length-1?[]:r.slice(n+1).filter(e.isTag)}function qn(t){return{xmlMode:!!t.xmlMode,lowerCaseAttributeNames:!!t.lowerCaseAttributeNames,lowerCaseTags:!!t.lowerCaseTags,quirksMode:!!t.quirksMode,cacheResults:!!t.cacheResults,pseudos:t.pseudos,adapter:t.adapter,equals:t.equals}}const Bn=(t,e,r,n,i)=>{const o=i(e,qn(r),n);return o===nn.trueFunc?t:o===nn.falseFunc?nn.falseFunc:e=>o(e)&&t(e)},Un={is:Bn,matches:Bn,where:Bn,not(t,e,r,n,i){const o=i(e,qn(r),n);return o===nn.falseFunc?t:o===nn.trueFunc?nn.falseFunc:e=>!o(e)&&t(e)},has(t,e,r,n,i){const{adapter:o}=r,s=qn(r);s.relativeSelector=!0;const a=e.some((t=>t.some(yn)))?[Dn]:void 0,c=i(e,s,a);if(c===nn.falseFunc)return nn.falseFunc;const u=jn(c,o);if(a&&c!==nn.trueFunc){const{shouldTestNextSiblings:e=!1}=c;return r=>{if(!t(r))return!1;a[0]=r;const n=o.getChildren(r),i=e?[...n,...Fn(r,o)]:n;return o.existsOne(u,i)}}return e=>t(e)&&o.existsOne(u,o.getChildren(e))}};function Vn(t,e){const r=e.getParent(t);return r&&e.isTag(r)?r:null}function Hn(t,e,r,n,i){const{adapter:o,equals:s}=r;switch(e.type){case en.PseudoElement:throw new Error("Pseudo-elements are not supported by css-select");case en.ColumnCombinator:throw new Error("Column combinators are not yet supported by css-select");case en.Attribute:if(null!=e.namespace)throw new Error("Namespaced attributes are not yet supported by css-select");return r.xmlMode&&!r.lowerCaseAttributeNames||(e.name=e.name.toLowerCase()),En[e.action](t,e,r);case en.Pseudo:return function(t,e,r,n,i){var o;const{name:s,data:a}=e;if(Array.isArray(a)){if(!(s in Un))throw new Error(`Unknown pseudo-class :${s}(${a})`);return Un[s](t,a,r,n,i)}const c=null===(o=r.pseudos)||void 0===o?void 0:o[s],u="string"==typeof c?c:Mn[s];if("string"==typeof u){if(null!=a)throw new Error(`Pseudo ${s} doesn't have any arguments`);const e=pn(u);return Un.is(t,e,r,n,i)}if("function"==typeof c)return Pn(c,s,a,1),e=>c(e,a)&&t(e);if(s in Rn)return Rn[s](t,a,r,n);if(s in In){const e=In[s];return Pn(e,s,a,2),n=>e(n,r,a)&&t(n)}throw new Error(`Unknown pseudo-class :${s}`)}(t,e,r,n,i);case en.Tag:{if(null!=e.namespace)throw new Error("Namespaced tag names are not yet supported by css-select");let{name:n}=e;return r.xmlMode&&!r.lowerCaseTags||(n=n.toLowerCase()),function(e){return o.getName(e)===n&&t(e)}}case en.Descendant:{if(!1===r.cacheResults||"undefined"==typeof WeakSet)return function(e){let r=e;for(;r=Vn(r,o);)if(t(r))return!0;return!1};const e=new WeakSet;return function(r){let n=r;for(;n=Vn(n,o);)if(!e.has(n)){if(o.isTag(n)&&t(n))return!0;e.add(n)}return!1}}case"_flexibleDescendant":return function(e){let r=e;do{if(t(r))return!0}while(r=Vn(r,o));return!1};case en.Parent:return function(e){return o.getChildren(e).some((e=>o.isTag(e)&&t(e)))};case en.Child:return function(e){const r=o.getParent(e);return null!=r&&o.isTag(r)&&t(r)};case en.Sibling:return function(e){const r=o.getSiblings(e);for(let n=0;n<r.length;n++){const i=r[n];if(s(e,i))break;if(o.isTag(i)&&t(i))return!0}return!1};case en.Adjacent:return o.prevElementSibling?function(e){const r=o.prevElementSibling(e);return null!=r&&t(r)}:function(e){const r=o.getSiblings(e);let n;for(let t=0;t<r.length;t++){const i=r[t];if(s(e,i))break;o.isTag(i)&&(n=i)}return!!n&&t(n)};case en.Universal:if(null!=e.namespace&&"*"!==e.namespace)throw new Error("Namespaced universal selectors are not yet supported by css-select");return t}}function Gn(t,e,r){const n=function(t,e,r){const n="string"==typeof t?pn(t):t;return Yn(n,e,r)}(t,e,r);return jn(n,e.adapter)}function $n(t){return t.type===en.Pseudo&&("scope"===t.name||Array.isArray(t.data)&&t.data.some((t=>t.some($n))))}const Wn={type:en.Descendant},zn={type:"_flexibleDescendant"},Kn={type:en.Pseudo,name:"scope",data:null};function Yn(t,e,r){var n;t.forEach(bn),r=null!==(n=e.context)&&void 0!==n?n:r;const i=Array.isArray(r),o=r&&(Array.isArray(r)?r:[r]);if(!1!==e.relativeSelector)!function(t,{adapter:e},r){const n=!!(null==r?void 0:r.every((t=>{const r=e.isTag(t)&&e.getParent(t);return t===Dn||r&&e.isTag(r)})));for(const e of t){if(e.length>0&&yn(e[0])&&e[0].type!==en.Descendant);else{if(!n||e.some($n))continue;e.unshift(Wn)}e.unshift(Kn)}}(t,e,o);else if(t.some((t=>t.length>0&&yn(t[0]))))throw new Error("Relative selectors are not allowed when the `relativeSelector` option is disabled");let s=!1;const a=t.map((t=>{if(t.length>=2){const[e,r]=t;e.type!==en.Pseudo||"scope"!==e.name||(i&&r.type===en.Descendant?t[1]=zn:r.type!==en.Adjacent&&r.type!==en.Sibling||(s=!0))}return function(t,e,r){var n;return t.reduce(((t,n)=>t===nn.falseFunc?nn.falseFunc:Hn(t,n,e,r,Yn)),null!==(n=e.rootFunc)&&void 0!==n?n:nn.trueFunc)}(t,e,o)})).reduce(Qn,nn.falseFunc);return a.shouldTestNextSiblings=s,a}function Qn(t,e){return e===nn.falseFunc||t===nn.trueFunc?t:t===nn.falseFunc||e===nn.trueFunc?e:function(r){return t(r)||e(r)}}const Zn=(t,e)=>t===e,Jn={adapter:xe,equals:Zn};function Xn(t){var e,r,n,i;const o=null!=t?t:Jn;return null!==(e=o.adapter)&&void 0!==e||(o.adapter=xe),null!==(r=o.equals)&&void 0!==r||(o.equals=null!==(i=null===(n=o.adapter)||void 0===n?void 0:n.equals)&&void 0!==i?i:Zn),o}const ti=(ei=Gn,function(t,e,r){const n=Xn(e);return ei(t,n,r)});var ei;const{isArray:ri}=Array,ni=({nodeType:t})=>1===t,ii=(t,e)=>e.some((e=>ni(e)&&(t(e)||ii(t,oi(e))))),oi=({childNodes:t})=>t,si=t=>ri(t)?t.map(si).join(""):ni(t)?si(oi(t)):3===t.nodeType?t.data:"",ai=(t,e)=>{const r=[];for(const n of e)ni(n)&&(t(n)&&r.push(n),r.push(...ai(t,oi(n))));return r},ci=(t,e)=>{for(let r of e)if(t(r)||(r=ci(t,oi(r))))return r;return null},ui={isTag:ni,existsOne:ii,getAttributeValue:(t,e)=>"class"===e?t.classList.value:t.getAttribute(e),getChildren:oi,getName:t=>{const{localName:e}=t;return Ue(t)?e.toLowerCase():e},getParent:({parentNode:t})=>t,getSiblings:t=>{const{parentNode:e}=t;return e?oi(e):t},getText:si,hasAttrib:(t,e)=>t.hasAttribute(e),removeSubsets:t=>{let{length:e}=t;for(;e--;){const r=t[e];if(e&&-1<t.lastIndexOf(r,e-1))t.splice(e,1);else for(let{parentNode:n}=r;n;n=n.parentNode)if(t.includes(n)){t.splice(e,1);break}}return t},findAll:ai,findOne:ci},li=(t,e)=>ti(e,{context:e.includes(":scope")?t:void 0,xmlMode:!Ue(t),adapter:ui}),hi=(t,e)=>function(t,e,r){const n=Xn(r);return("function"==typeof e?e:Gn(e,n))(t)}(t,e,{strict:!0,context:e.includes(":scope")?t:void 0,xmlMode:!Ue(t),adapter:ui});let fi=class t extends Zr{constructor(t,e=""){super(t,"#text",3,e)}get wholeText(){const t=[];let{previousSibling:e,nextSibling:r}=this;for(;e&&3===e.nodeType;)t.unshift(e[C]),e=e.previousSibling;for(t.push(this[C]);r&&3===r.nodeType;)t.push(r[C]),r=r.nextSibling;return t.join("")}cloneNode(){const{ownerDocument:e,[C]:r}=this;return new t(e,r)}toString(){return jr(this[C])}};const di=t=>t instanceof Lr,pi=(t,e,r)=>{const{ownerDocument:n}=t;for(const i of r)t.insertBefore(di(i)?i:new fi(n,i),e)};class gi extends Lr{constructor(t,e,r){super(t,e,r),this[S]=null,this[v]=this[f]={[v]:null,[w]:this,[_]:this,nodeType:Te,ownerDocument:this.ownerDocument,parentNode:null}}get childNodes(){const t=new Or;let{firstChild:e}=this;for(;e;)t.push(e),e=Hr(e);return t}get children(){const t=new Or;let{firstElementChild:e}=this;for(;e;)t.push(e),e=Gr(e);return t}get firstChild(){let{[v]:t,[f]:e}=this;for(;2===t.nodeType;)t=t[v];return t===e?null:t}get firstElementChild(){let{firstChild:t}=this;for(;t;){if(1===t.nodeType)return t;t=Hr(t)}return null}get lastChild(){const t=this[f][w];switch(t.nodeType){case Te:return t[_];case 2:return null}return t===this?null:t}get lastElementChild(){let{lastChild:t}=this;for(;t;){if(1===t.nodeType)return t;t=Vr(t)}return null}get childElementCount(){return this.children.length}prepend(...t){pi(this,this.firstChild,t)}append(...t){pi(this,this[f],t)}replaceChildren(...t){let{[v]:e,[f]:r}=this;for(;e!==r&&2===e.nodeType;)e=e[v];for(;e!==r;){const t=Be(e)[v];e.remove(),e=t}t.length&&pi(this,r,t)}getElementsByClassName(t){const e=new Or;let{[v]:r,[f]:n}=this;for(;r!==n;)1===r.nodeType&&r.hasAttribute("class")&&r.classList.has(t)&&e.push(r),r=r[v];return e}getElementsByTagName(t){const e=new Or;let{[v]:r,[f]:n}=this;for(;r!==n;)1!==r.nodeType||r.localName!==t&&$e(r)!==t||e.push(r),r=r[v];return e}querySelector(t){const e=li(this,t);let{[v]:r,[f]:n}=this;for(;r!==n;){if(1===r.nodeType&&e(r))return r;r=1===r.nodeType&&"template"===r.localName?r[f]:r[v]}return null}querySelectorAll(t){const e=li(this,t),r=new Or;let{[v]:n,[f]:i}=this;for(;n!==i;)1===n.nodeType&&e(n)&&r.push(n),n=1===n.nodeType&&"template"===n.localName?n[f]:n[v];return r}appendChild(t){return this.insertBefore(t,this[f])}contains(t){let e=t;for(;e&&e!==this;)e=e.parentNode;return e===this}insertBefore(t,e=null){if(t===e)return t;if(t===this)throw new Error("unable to append a node to itself");const r=e||this[f];switch(t.nodeType){case 1:t.remove(),t.parentNode=this,He(r[w],t,r),vr(t,null),tr(t);break;case Ne:{let{[S]:e,firstChild:n,lastChild:i}=t;if(n){((t,e,r,n)=>{Ve(t,e),Ve(Be(r),n)})(r[w],n,i,r),Ve(t,t[f]),e&&e.replaceChildren();do{n.parentNode=this,vr(n,null),1===n.nodeType&&tr(n)}while(n!==i&&(n=Hr(n)))}break}case 3:case 8:case 4:t.remove();default:t.parentNode=this,Ge(r[w],t,r),vr(t,null)}return t}normalize(){let{[v]:t,[f]:e}=this;for(;t!==e;){const{[v]:e,[w]:r,nodeType:n}=t;3===n&&(t[C]?r&&3===r.nodeType&&(r.textContent+=t.textContent,t.remove()):t.remove()),t=e}}removeChild(t){if(t.parentNode!==this)throw new Error("node is not a child");return t.remove(),t}replaceChild(t,e){const r=Be(e)[v];return e.remove(),this.insertBefore(t,r),e}}class mi extends gi{getElementById(t){let{[v]:e,[f]:r}=this;for(;e!==r;){if(1===e.nodeType&&e.id===t)return e;e=e[v]}return null}cloneNode(t){const{ownerDocument:e,constructor:r}=this,n=new r(e);if(t){const{[f]:e}=n;for(const r of this.childNodes)n.insertBefore(r.cloneNode(t),e)}return n}toString(){const{childNodes:t,localName:e}=this;return`<${e}>${t.join("")}</${e}>`}toJSON(){const t=[];return((t,e)=>{e.push(t.nodeType),lr(t,e)})(this,t),t}}let yi=class extends mi{constructor(t){super(t,"#document-fragment",Ne)}},vi=class t extends Lr{constructor(t,e,r="",n=""){super(t,"#document-type",ke),this.name=e,this.publicId=r,this.systemId=n}cloneNode(){const{ownerDocument:e,name:r,publicId:n,systemId:i}=this;return new t(e,r,n,i)}toString(){const{name:t,publicId:e,systemId:r}=this,n=0<e.length,i=[t];return n&&i.push("PUBLIC",`"${e}"`),r.length&&(n||i.push("SYSTEM"),i.push(`"${r}"`)),`<!DOCTYPE ${i.join(" ")}>`}toJSON(){const t=[];return dr(this,t),t}};const bi=t=>t.childNodes.join(""),wi=(t,e)=>{const{ownerDocument:r}=t,{constructor:n}=r,i=new n;i[a]=r[a];const{childNodes:o}=sr(i,Ue(t),e);t.replaceChildren(...o.map(Si,r))};function Si(t){switch(t.ownerDocument=this,t.nodeType){case 1:case Ne:t.childNodes.forEach(Si,this)}return t}var xi=t=>t.replace(/(([A-Z0-9])([A-Z0-9][a-z]))|(([a-z0-9]+)([A-Z]))/g,"$2$5-$3$6").toLowerCase();const _i=new WeakMap,Ai=t=>`data-${xi(t)}`,Ei=t=>t.slice(5).replace(/-([a-z])/g,((t,e)=>e.toUpperCase())),Ci={get(t,e){if(e in t)return _i.get(t).getAttribute(Ai(e))},set:(t,e,r)=>(t[e]=r,_i.get(t).setAttribute(Ai(e),r),!0),deleteProperty:(t,e)=>(e in t&&_i.get(t).removeAttribute(Ai(e)),delete t[e])};class Ti{constructor(t){for(const{name:e,value:r}of t.attributes)/^data-/.test(e)&&(this[Ei(e)]=r);return _i.set(this,t),new Proxy(this,Ci)}}Fe(Ti.prototype,null);const{add:ki}=Set.prototype,Ni=(t,e)=>{for(const r of e)r&&ki.call(t,r)},Oi=({[b]:t,value:e})=>{const r=t.getAttributeNode("class");r?r.value=e:Sr(t,new qr(t.ownerDocument,"class",e))};class Ri extends Set{constructor(t){super(),this[b]=t;const e=t.getAttributeNode("class");e&&Ni(this,e.value.split(/\s+/))}get length(){return this.size}get value(){return[...this].join(" ")}add(...t){Ni(this,t),Oi(this)}contains(t){return this.has(t)}remove(...t){for(const e of t)this.delete(e);Oi(this)}toggle(t,e){if(this.has(t)){if(e)return!0;this.delete(t),Oi(this)}else if(e||1===arguments.length)return super.add(t),Oi(this),!0;return!1}replace(t,e){return!!this.has(t)&&(this.delete(t),super.add(e),Oi(this),!0)}supports(){return!0}}const Li=new WeakMap,Ii=t=>[...t.keys()].filter((t=>t!==S)),Pi=t=>{const e=Li.get(t).getAttributeNode("style");if((!e||e[o]||t.get(S)!==e)&&(t.clear(),e)){t.set(S,e);for(const r of e[C].split(/\s*;\s*/)){let[e,...n]=r.split(":");if(n.length>0){e=e.trim();const r=n.join(":").trim();e&&r&&t.set(e,r)}}}return e},Mi={get:(t,e)=>e in ji?t[e]:(Pi(t),"length"===e?Ii(t).length:/^\d+$/.test(e)?Ii(t)[e]:t.get(xi(e))),set(t,e,r){if("cssText"===e)t[e]=r;else{let n=Pi(t);if(null==r?t.delete(xi(e)):t.set(xi(e),r),!n){const e=Li.get(t);n=e.ownerDocument.createAttribute("style"),e.setAttributeNode(n),t.set(S,n)}n[o]=!1,n[C]=t.toString()}return!0}};let Di=class extends Map{constructor(t){return super(),Li.set(this,t),new Proxy(this,Mi)}get cssText(){return this.toString()}set cssText(t){Li.get(this).setAttribute("style",t)}getPropertyValue(t){const e=this[S];return Mi.get(e,t)}setProperty(t,e){const r=this[S];Mi.set(r,t,e)}removeProperty(t){const e=this[S];Mi.set(e,t,null)}[Symbol.iterator](){const t=this[S];Pi(t);const e=Ii(t),{length:r}=e;let n=0;return{next(){const t=n===r;return{done:t,value:t?null:e[n++]}}}}get[S](){return this}toString(){const t=this[S];Pi(t);const e=[];return t.forEach(Fi,e),e.join(";")}};const{prototype:ji}=Di;function Fi(t,e){e!==S&&this.push(`${e}:${t}`)}function qi(t){return t.currentTarget}class Bi{static get BUBBLING_PHASE(){return 3}static get AT_TARGET(){return 2}static get CAPTURING_PHASE(){return 1}static get NONE(){return 0}constructor(t,e={}){this.type=t,this.bubbles=!!e.bubbles,this.cancelBubble=!1,this._stopImmediatePropagationFlag=!1,this.cancelable=!!e.cancelable,this.eventPhase=this.NONE,this.timeStamp=Date.now(),this.defaultPrevented=!1,this.originalTarget=null,this.returnValue=null,this.srcElement=null,this.target=null,this._path=[]}get BUBBLING_PHASE(){return 3}get AT_TARGET(){return 2}get CAPTURING_PHASE(){return 1}get NONE(){return 0}preventDefault(){this.defaultPrevented=!0}composedPath(){return this._path.map(qi)}stopPropagation(){this.cancelBubble=!0}stopImmediatePropagation(){this.stopPropagation(),this._stopImmediatePropagationFlag=!0}}class Ui extends Array{constructor(t){super(),this.ownerElement=t}getNamedItem(t){return this.ownerElement.getAttributeNode(t)}setNamedItem(t){this.ownerElement.setAttributeNode(t),this.unshift(t)}removeNamedItem(t){const e=this.getNamedItem(t);this.ownerElement.removeAttribute(t),this.splice(this.indexOf(e),1)}item(t){return t<this.length?this[t]:null}getNamedItemNS(t,e){return this.getNamedItem(e)}setNamedItemNS(t,e){return this.setNamedItem(e)}removeNamedItemNS(t,e){return this.removeNamedItem(e)}}let Vi=class extends mi{constructor(t){super(t.ownerDocument,"#shadow-root",Ne),this.host=t}get innerHTML(){return bi(this)}set innerHTML(t){wi(this,t)}};const Hi={get:(t,e)=>e in t?t[e]:t.find((({name:t})=>t===e))},Gi=(t,e,r)=>{if("ownerSVGElement"in e){const n=t.createElementNS(Re,r);return n.ownerSVGElement=e.ownerSVGElement,n}return t.createElement(r)},$i=({localName:t,ownerDocument:e})=>e[m].voidElements.test(t);let Wi=class extends gi{constructor(t,e){super(t,e,1),this[s]=null,this[u]=null,this[A]=null}get isConnected(){return Br(this)}get parentElement(){return Ur(this)}get previousSibling(){return Vr(this)}get nextSibling(){return Hr(this)}get namespaceURI(){return"http://www.w3.org/1999/xhtml"}get previousElementSibling(){return $r(this)}get nextElementSibling(){return Gr(this)}before(...t){zr(this,t)}after(...t){Kr(this,t)}replaceWith(...t){Yr(this,t)}remove(){Qr(this[w],this,this[f][v])}get id(){return Er.get(this,"id")}set id(t){Er.set(this,"id",t)}get className(){return this.classList.value}set className(t){const{classList:e}=this;e.clear(),e.add(...qe(t).split(/\s+/))}get nodeName(){return $e(this)}get tagName(){return $e(this)}get classList(){return this[s]||(this[s]=new Ri(this))}get dataset(){return this[u]||(this[u]=new Ti(this))}getBoundingClientRect(){return{x:0,y:0,bottom:0,height:0,left:0,right:0,top:0,width:0}}get nonce(){return Er.get(this,"nonce")}set nonce(t){Er.set(this,"nonce",t)}get style(){return this[A]||(this[A]=new Di(this))}get tabIndex(){return Ar.get(this,"tabindex")||-1}set tabIndex(t){Ar.set(this,"tabindex",t)}get slot(){return Er.get(this,"slot")}set slot(t){Er.set(this,"slot",t)}get innerText(){const t=[];let{[v]:e,[f]:r}=this;for(;e!==r;)3===e.nodeType?t.push(e.textContent.replace(/\s+/g," ")):t.length&&e[v]!=r&&Oe.has(e.tagName)&&t.push("\n"),e=e[v];return t.join("")}get textContent(){const t=[];let{[v]:e,[f]:r}=this;for(;e!==r;)3===e.nodeType&&t.push(e.textContent),e=e[v];return t.join("")}set textContent(t){this.replaceChildren(),null!=t&&""!==t&&this.appendChild(new fi(this.ownerDocument,t))}get innerHTML(){return bi(this)}set innerHTML(t){wi(this,t)}get outerHTML(){return this.toString()}set outerHTML(t){const e=this.ownerDocument.createElement("");e.innerHTML=t,this.replaceWith(...e.childNodes)}get attributes(){const t=new Ui(this);let e=this[v];for(;2===e.nodeType;)t.push(e),e=e[v];return new Proxy(t,Hi)}focus(){this.dispatchEvent(new Bi("focus"))}getAttribute(t){if("class"===t)return this.className;const e=this.getAttributeNode(t);return e&&(Ue(this)?e.value:jr(e.value))}getAttributeNode(t){let e=this[v];for(;2===e.nodeType;){if(e.name===t)return e;e=e[v]}return null}getAttributeNames(){const t=new Or;let e=this[v];for(;2===e.nodeType;)t.push(e.name),e=e[v];return t}hasAttribute(t){return!!this.getAttributeNode(t)}hasAttributes(){return 2===this[v].nodeType}removeAttribute(t){"class"===t&&this[s]&&this[s].clear();let e=this[v];for(;2===e.nodeType;){if(e.name===t)return void xr(this,e);e=e[v]}}removeAttributeNode(t){let e=this[v];for(;2===e.nodeType;){if(e===t)return void xr(this,e);e=e[v]}}setAttribute(t,e){if("class"===t)this.className=e;else{const r=this.getAttributeNode(t);r?r.value=e:Sr(this,new qr(this.ownerDocument,t,e))}}setAttributeNode(t){const{name:e}=t,r=this.getAttributeNode(e);if(r!==t){r&&this.removeAttributeNode(r);const{ownerElement:e}=t;e&&e.removeAttributeNode(t),Sr(this,t)}return r}toggleAttribute(t,e){return this.hasAttribute(t)?!!e||(this.removeAttribute(t),!1):!(!e&&1!==arguments.length)&&(this.setAttribute(t,""),!0)}get shadowRoot(){if(ze.has(this)){const{mode:t,shadowRoot:e}=ze.get(this);if("open"===t)return e}return null}attachShadow(t){if(ze.has(this))throw new Error("operation not supported");const e=new Vi(this);return ze.set(this,{mode:t.mode,shadowRoot:e}),e}matches(t){return hi(this,t)}closest(t){let e=this;const r=li(e,t);for(;e&&!r(e);)e=e.parentElement;return e}insertAdjacentElement(t,e){const{parentElement:r}=this;switch(t){case"beforebegin":if(r){r.insertBefore(e,this);break}return null;case"afterbegin":this.insertBefore(e,this.firstChild);break;case"beforeend":this.insertBefore(e,null);break;case"afterend":if(r){r.insertBefore(e,this.nextSibling);break}return null}return e}insertAdjacentHTML(t,e){const r=this.ownerDocument.createElement("template");r.innerHTML=e,this.insertAdjacentElement(t,r.content)}insertAdjacentText(t,e){const r=this.ownerDocument.createTextNode(e);this.insertAdjacentElement(t,r)}cloneNode(t=!1){const{ownerDocument:e,localName:r}=this,n=t=>{t.parentNode=o,Ve(s,t),s=t},i=Gi(e,this,r);let o=i,s=i,{[v]:a,[f]:c}=this;for(;a!==c&&(t||2===a.nodeType);){switch(a.nodeType){case Te:Ve(s,o[f]),s=o[f],o=o.parentNode;break;case 1:{const t=Gi(e,a,a.localName);n(t),o=t;break}case 2:{const e=a.cloneNode(t);e.ownerElement=o,n(e);break}case 3:case 8:case 4:n(a.cloneNode(t))}a=a[v]}return Ve(s,i[f]),i}toString(){const t=[],{[f]:e}=this;let r={[v]:this},n=!1;do{switch(r=r[v],r.nodeType){case 2:{const e=" "+r;switch(e){case" id":case" class":case" style":break;default:t.push(e)}break}case Te:{const e=r[_];n?("ownerSVGElement"in e?t.push(" />"):$i(e)?t.push(Ue(e)?">":" />"):t.push(`></${e.localName}>`),n=!1):t.push(`</${e.localName}>`);break}case 1:n&&t.push(">"),r.toString!==this.toString?(t.push(r.toString()),r=r[f],n=!1):(t.push(`<${r.localName}`),n=!0);break;case 3:case 8:case 4:t.push((n?">":"")+r),n=!1}}while(r!==e);return t.join("")}toJSON(){const t=[];return pr(this,t),t}getAttributeNS(t,e){return this.getAttribute(e)}getElementsByTagNameNS(t,e){return this.getElementsByTagName(e)}hasAttributeNS(t,e){return this.hasAttribute(e)}removeAttributeNS(t,e){this.removeAttribute(e)}setAttributeNS(t,e,r){this.setAttribute(e,r)}setAttributeNodeNS(t){return this.setAttributeNode(t)}};const zi=new WeakMap,Ki={get:(t,e)=>t[e],set:(t,e,r)=>(t[e]=r,!0)};let Yi=class extends Wi{constructor(t,e,r=null){super(t,e),this.ownerSVGElement=r}get className(){return zi.has(this)||zi.set(this,new Proxy({baseVal:"",animVal:""},Ki)),zi.get(this)}set className(t){const{classList:e}=this;e.clear(),e.add(...qe(t).split(/\s+/))}get namespaceURI(){return"http://www.w3.org/2000/svg"}getAttribute(t){return"class"===t?[...this.classList].join(" "):super.getAttribute(t)}setAttribute(t,e){if("class"===t)this.className=e;else if("style"===t){const{className:t}=this;t.baseVal=t.animVal=e}super.setAttribute(t,e)}};const Qi=()=>{throw new TypeError("Illegal constructor")};function Zi(){Qi()}function Ji(){Qi()}function Xi(){Qi()}function to(){Qi()}function eo(){Qi()}function ro(){Qi()}function no(){Qi()}function io(){Qi()}function oo(){Qi()}function so(){Qi()}function ao(){Qi()}Fe(Zi,qr),Zi.prototype=qr.prototype,Fe(Ji,Jr),Ji.prototype=Jr.prototype,Fe(Xi,Zr),Xi.prototype=Zr.prototype,Fe(to,Xr),to.prototype=Xr.prototype,Fe(eo,yi),eo.prototype=yi.prototype,Fe(ro,vi),ro.prototype=vi.prototype,Fe(no,Wi),no.prototype=Wi.prototype,Fe(io,Lr),io.prototype=Lr.prototype,Fe(oo,Vi),oo.prototype=Vi.prototype,Fe(so,fi),so.prototype=fi.prototype,Fe(ao,Yi),ao.prototype=Yi.prototype;const co={Attr:Zi,CDATASection:Ji,CharacterData:Xi,Comment:to,DocumentFragment:eo,DocumentType:ro,Element:no,Node:io,ShadowRoot:oo,Text:so,SVGElement:ao},uo=new WeakMap,lo={get:(t,e)=>uo.has(t)&&uo.get(t)[e]||null,set(t,e,r){uo.has(t)||uo.set(t,{});const n=uo.get(t),i=e.slice(2);n[e]&&t.removeEventListener(i,n[e],!1),(n[e]=r)&&t.addEventListener(i,r,!1)}};class ho extends Wi{static get observedAttributes(){return[]}constructor(t=null,e=""){super(t,e);const r=!t;let n;if(r){const{constructor:r}=this;if(!Ye.has(r))throw new Error("unable to initialize this Custom Element");({ownerDocument:t,localName:e,options:n}=Ye.get(r))}if(t[E]){const{element:e,values:r}=t[E];t[E]=null;for(const[t,n]of r)e[t]=n;return e}r&&(this.ownerDocument=this[f].ownerDocument=t,this.localName=e,Qe.set(this,{connected:!1}),n.is&&this.setAttribute("is",n.is))}blur(){this.dispatchEvent(new Bi("blur"))}click(){const t=new Bi("click",{bubbles:!0,cancelable:!0});t.button=0,this.dispatchEvent(t)}get accessKeyLabel(){const{accessKey:t}=this;return t&&`Alt+Shift+${t}`}get isContentEditable(){return this.hasAttribute("contenteditable")}get contentEditable(){return _r.get(this,"contenteditable")}set contentEditable(t){_r.set(this,"contenteditable",t)}get draggable(){return _r.get(this,"draggable")}set draggable(t){_r.set(this,"draggable",t)}get hidden(){return _r.get(this,"hidden")}set hidden(t){_r.set(this,"hidden",t)}get spellcheck(){return _r.get(this,"spellcheck")}set spellcheck(t){_r.set(this,"spellcheck",t)}get accessKey(){return Er.get(this,"accesskey")}set accessKey(t){Er.set(this,"accesskey",t)}get dir(){return Er.get(this,"dir")}set dir(t){Er.set(this,"dir",t)}get lang(){return Er.get(this,"lang")}set lang(t){Er.set(this,"lang",t)}get title(){return Er.get(this,"title")}set title(t){Er.set(this,"title",t)}get onabort(){return lo.get(this,"onabort")}set onabort(t){lo.set(this,"onabort",t)}get onblur(){return lo.get(this,"onblur")}set onblur(t){lo.set(this,"onblur",t)}get oncancel(){return lo.get(this,"oncancel")}set oncancel(t){lo.set(this,"oncancel",t)}get oncanplay(){return lo.get(this,"oncanplay")}set oncanplay(t){lo.set(this,"oncanplay",t)}get oncanplaythrough(){return lo.get(this,"oncanplaythrough")}set oncanplaythrough(t){lo.set(this,"oncanplaythrough",t)}get onchange(){return lo.get(this,"onchange")}set onchange(t){lo.set(this,"onchange",t)}get onclick(){return lo.get(this,"onclick")}set onclick(t){lo.set(this,"onclick",t)}get onclose(){return lo.get(this,"onclose")}set onclose(t){lo.set(this,"onclose",t)}get oncontextmenu(){return lo.get(this,"oncontextmenu")}set oncontextmenu(t){lo.set(this,"oncontextmenu",t)}get oncuechange(){return lo.get(this,"oncuechange")}set oncuechange(t){lo.set(this,"oncuechange",t)}get ondblclick(){return lo.get(this,"ondblclick")}set ondblclick(t){lo.set(this,"ondblclick",t)}get ondrag(){return lo.get(this,"ondrag")}set ondrag(t){lo.set(this,"ondrag",t)}get ondragend(){return lo.get(this,"ondragend")}set ondragend(t){lo.set(this,"ondragend",t)}get ondragenter(){return lo.get(this,"ondragenter")}set ondragenter(t){lo.set(this,"ondragenter",t)}get ondragleave(){return lo.get(this,"ondragleave")}set ondragleave(t){lo.set(this,"ondragleave",t)}get ondragover(){return lo.get(this,"ondragover")}set ondragover(t){lo.set(this,"ondragover",t)}get ondragstart(){return lo.get(this,"ondragstart")}set ondragstart(t){lo.set(this,"ondragstart",t)}get ondrop(){return lo.get(this,"ondrop")}set ondrop(t){lo.set(this,"ondrop",t)}get ondurationchange(){return lo.get(this,"ondurationchange")}set ondurationchange(t){lo.set(this,"ondurationchange",t)}get onemptied(){return lo.get(this,"onemptied")}set onemptied(t){lo.set(this,"onemptied",t)}get onended(){return lo.get(this,"onended")}set onended(t){lo.set(this,"onended",t)}get onerror(){return lo.get(this,"onerror")}set onerror(t){lo.set(this,"onerror",t)}get onfocus(){return lo.get(this,"onfocus")}set onfocus(t){lo.set(this,"onfocus",t)}get oninput(){return lo.get(this,"oninput")}set oninput(t){lo.set(this,"oninput",t)}get oninvalid(){return lo.get(this,"oninvalid")}set oninvalid(t){lo.set(this,"oninvalid",t)}get onkeydown(){return lo.get(this,"onkeydown")}set onkeydown(t){lo.set(this,"onkeydown",t)}get onkeypress(){return lo.get(this,"onkeypress")}set onkeypress(t){lo.set(this,"onkeypress",t)}get onkeyup(){return lo.get(this,"onkeyup")}set onkeyup(t){lo.set(this,"onkeyup",t)}get onload(){return lo.get(this,"onload")}set onload(t){lo.set(this,"onload",t)}get onloadeddata(){return lo.get(this,"onloadeddata")}set onloadeddata(t){lo.set(this,"onloadeddata",t)}get onloadedmetadata(){return lo.get(this,"onloadedmetadata")}set onloadedmetadata(t){lo.set(this,"onloadedmetadata",t)}get onloadstart(){return lo.get(this,"onloadstart")}set onloadstart(t){lo.set(this,"onloadstart",t)}get onmousedown(){return lo.get(this,"onmousedown")}set onmousedown(t){lo.set(this,"onmousedown",t)}get onmouseenter(){return lo.get(this,"onmouseenter")}set onmouseenter(t){lo.set(this,"onmouseenter",t)}get onmouseleave(){return lo.get(this,"onmouseleave")}set onmouseleave(t){lo.set(this,"onmouseleave",t)}get onmousemove(){return lo.get(this,"onmousemove")}set onmousemove(t){lo.set(this,"onmousemove",t)}get onmouseout(){return lo.get(this,"onmouseout")}set onmouseout(t){lo.set(this,"onmouseout",t)}get onmouseover(){return lo.get(this,"onmouseover")}set onmouseover(t){lo.set(this,"onmouseover",t)}get onmouseup(){return lo.get(this,"onmouseup")}set onmouseup(t){lo.set(this,"onmouseup",t)}get onmousewheel(){return lo.get(this,"onmousewheel")}set onmousewheel(t){lo.set(this,"onmousewheel",t)}get onpause(){return lo.get(this,"onpause")}set onpause(t){lo.set(this,"onpause",t)}get onplay(){return lo.get(this,"onplay")}set onplay(t){lo.set(this,"onplay",t)}get onplaying(){return lo.get(this,"onplaying")}set onplaying(t){lo.set(this,"onplaying",t)}get onprogress(){return lo.get(this,"onprogress")}set onprogress(t){lo.set(this,"onprogress",t)}get onratechange(){return lo.get(this,"onratechange")}set onratechange(t){lo.set(this,"onratechange",t)}get onreset(){return lo.get(this,"onreset")}set onreset(t){lo.set(this,"onreset",t)}get onresize(){return lo.get(this,"onresize")}set onresize(t){lo.set(this,"onresize",t)}get onscroll(){return lo.get(this,"onscroll")}set onscroll(t){lo.set(this,"onscroll",t)}get onseeked(){return lo.get(this,"onseeked")}set onseeked(t){lo.set(this,"onseeked",t)}get onseeking(){return lo.get(this,"onseeking")}set onseeking(t){lo.set(this,"onseeking",t)}get onselect(){return lo.get(this,"onselect")}set onselect(t){lo.set(this,"onselect",t)}get onshow(){return lo.get(this,"onshow")}set onshow(t){lo.set(this,"onshow",t)}get onstalled(){return lo.get(this,"onstalled")}set onstalled(t){lo.set(this,"onstalled",t)}get onsubmit(){return lo.get(this,"onsubmit")}set onsubmit(t){lo.set(this,"onsubmit",t)}get onsuspend(){return lo.get(this,"onsuspend")}set onsuspend(t){lo.set(this,"onsuspend",t)}get ontimeupdate(){return lo.get(this,"ontimeupdate")}set ontimeupdate(t){lo.set(this,"ontimeupdate",t)}get ontoggle(){return lo.get(this,"ontoggle")}set ontoggle(t){lo.set(this,"ontoggle",t)}get onvolumechange(){return lo.get(this,"onvolumechange")}set onvolumechange(t){lo.set(this,"onvolumechange",t)}get onwaiting(){return lo.get(this,"onwaiting")}set onwaiting(t){lo.set(this,"onwaiting",t)}get onauxclick(){return lo.get(this,"onauxclick")}set onauxclick(t){lo.set(this,"onauxclick",t)}get ongotpointercapture(){return lo.get(this,"ongotpointercapture")}set ongotpointercapture(t){lo.set(this,"ongotpointercapture",t)}get onlostpointercapture(){return lo.get(this,"onlostpointercapture")}set onlostpointercapture(t){lo.set(this,"onlostpointercapture",t)}get onpointercancel(){return lo.get(this,"onpointercancel")}set onpointercancel(t){lo.set(this,"onpointercancel",t)}get onpointerdown(){return lo.get(this,"onpointerdown")}set onpointerdown(t){lo.set(this,"onpointerdown",t)}get onpointerenter(){return lo.get(this,"onpointerenter")}set onpointerenter(t){lo.set(this,"onpointerenter",t)}get onpointerleave(){return lo.get(this,"onpointerleave")}set onpointerleave(t){lo.set(this,"onpointerleave",t)}get onpointermove(){return lo.get(this,"onpointermove")}set onpointermove(t){lo.set(this,"onpointermove",t)}get onpointerout(){return lo.get(this,"onpointerout")}set onpointerout(t){lo.set(this,"onpointerout",t)}get onpointerover(){return lo.get(this,"onpointerover")}set onpointerover(t){lo.set(this,"onpointerover",t)}get onpointerup(){return lo.get(this,"onpointerup")}set onpointerup(t){lo.set(this,"onpointerup",t)}}const fo="template";class po extends ho{constructor(t){super(t,fo);const e=this.ownerDocument.createDocumentFragment();(this[c]=e)[S]=this}get content(){if(this.hasChildNodes()&&!this[c].hasChildNodes())for(const t of this.childNodes)this[c].appendChild(t.cloneNode(!0));return this[c]}}cr(fo,po);const{toString:go}=ho.prototype;class mo extends ho{get innerHTML(){return this.textContent}set innerHTML(t){this.textContent=t}toString(){return go.call(this.cloneNode()).replace(/></,`>${this.textContent}<`)}}const yo="script";class vo extends mo{constructor(t,e=yo){super(t,e)}get type(){return Er.get(this,"type")}set type(t){Er.set(this,"type",t)}get src(){return Er.get(this,"src")}set src(t){Er.set(this,"src",t)}get defer(){return _r.get(this,"defer")}set defer(t){_r.set(this,"defer",t)}get crossOrigin(){return Er.get(this,"crossorigin")}set crossOrigin(t){Er.set(this,"crossorigin",t)}get nomodule(){return _r.get(this,"nomodule")}set nomodule(t){_r.set(this,"nomodule",t)}get referrerPolicy(){return Er.get(this,"referrerpolicy")}set referrerPolicy(t){Er.set(this,"referrerpolicy",t)}get nonce(){return Er.get(this,"nonce")}set nonce(t){Er.set(this,"nonce",t)}get async(){return _r.get(this,"async")}set async(t){_r.set(this,"async",t)}get text(){return this.textContent}set text(t){this.textContent=t}}cr(yo,vo);const bo="iframe";class wo extends ho{constructor(t,e=bo){super(t,e)}get src(){return Er.get(this,"src")}set src(t){Er.set(this,"src",t)}get srcdoc(){return Er.get(this,"srcdoc")}set srcdoc(t){Er.set(this,"srcdoc",t)}get name(){return Er.get(this,"name")}set name(t){Er.set(this,"name",t)}get allow(){return Er.get(this,"allow")}set allow(t){Er.set(this,"allow",t)}get allowFullscreen(){return _r.get(this,"allowfullscreen")}set allowFullscreen(t){_r.set(this,"allowfullscreen",t)}get referrerPolicy(){return Er.get(this,"referrerpolicy")}set referrerPolicy(t){Er.set(this,"referrerpolicy",t)}get loading(){return Er.get(this,"loading")}set loading(t){Er.set(this,"loading",t)}}cr(bo,wo);var So={},xo={},_o={},Ao={},Eo={StyleSheet:function(){this.parentStyleSheet=null}};Ao.StyleSheet=Eo.StyleSheet;var Co,To,ko={},No={},Oo={};function Ro(){if(Co)return ko;Co=1;var t={CSSStyleDeclaration:ds().CSSStyleDeclaration,CSSRule:No.CSSRule,CSSStyleRule:function(){t.CSSRule.call(this),this.selectorText="",this.style=new t.CSSStyleDeclaration,this.style.parentRule=this}};return t.CSSStyleRule.prototype=new t.CSSRule,t.CSSStyleRule.prototype.constructor=t.CSSStyleRule,t.CSSStyleRule.prototype.type=1,Object.defineProperty(t.CSSStyleRule.prototype,"cssText",{get:function(){return this.selectorText?this.selectorText+" {"+this.style.cssText+"}":""},set:function(e){var r=t.CSSStyleRule.parse(e);this.style=r.style,this.selectorText=r.selectorText}}),t.CSSStyleRule.parse=function(e){for(var r,n,i,o=0,s="selector",a=o,c="",u={selector:!0,value:!0},l=new t.CSSStyleRule,h="";i=e.charAt(o);o++)switch(i){case" ":case"\t":case"\r":case"\n":case"\f":if(u[s])switch(e.charAt(o-1)){case" ":case"\t":case"\r":case"\n":case"\f":break;default:c+=" "}break;case'"':if(a=o+1,!(r=e.indexOf('"',a)+1))throw'" is missing';c+=e.slice(o,r),o=r-1;break;case"'":if(a=o+1,!(r=e.indexOf("'",a)+1))throw"' is missing";c+=e.slice(o,r),o=r-1;break;case"/":if("*"===e.charAt(o+1)){if(o+=2,-1===(r=e.indexOf("*/",o)))throw new SyntaxError("Missing */");o=r+1}else c+=i;break;case"{":"selector"===s&&(l.selectorText=c.trim(),c="",s="name");break;case":":"name"===s?(n=c.trim(),c="",s="value"):c+=i;break;case"!":"value"===s&&e.indexOf("!important",o)===o?(h="important",o+=9):c+=i;break;case";":"value"===s?(l.style.setProperty(n,c.trim(),h),h="",c="",s="name"):c+=i;break;case"}":if("value"===s)l.style.setProperty(n,c.trim(),h),h="",c="";else{if("name"===s)break;c+=i}s="selector";break;default:c+=i}return l},ko.CSSStyleRule=t.CSSStyleRule,ko}function Lo(){if(To)return _o;To=1;var t={StyleSheet:Ao.StyleSheet,CSSStyleRule:Ro().CSSStyleRule,CSSStyleSheet:function(){t.StyleSheet.call(this),this.cssRules=[]}};return t.CSSStyleSheet.prototype=new t.StyleSheet,t.CSSStyleSheet.prototype.constructor=t.CSSStyleSheet,t.CSSStyleSheet.prototype.insertRule=function(e,r){if(r<0||r>this.cssRules.length)throw new RangeError("INDEX_SIZE_ERR");var n=t.parse(e).cssRules[0];return n.parentStyleSheet=this,this.cssRules.splice(r,0,n),r},t.CSSStyleSheet.prototype.deleteRule=function(t){if(t<0||t>=this.cssRules.length)throw new RangeError("INDEX_SIZE_ERR");this.cssRules.splice(t,1)},t.CSSStyleSheet.prototype.toString=function(){for(var t="",e=this.cssRules,r=0;r<e.length;r++)t+=e[r].cssText+"\n";return t},_o.CSSStyleSheet=t.CSSStyleSheet,t.parse=fs().parse,_o}Oo.CSSRule=function(){this.parentRule=null,this.parentStyleSheet=null},Oo.CSSRule.UNKNOWN_RULE=0,Oo.CSSRule.STYLE_RULE=1,Oo.CSSRule.CHARSET_RULE=2,Oo.CSSRule.IMPORT_RULE=3,Oo.CSSRule.MEDIA_RULE=4,Oo.CSSRule.FONT_FACE_RULE=5,Oo.CSSRule.PAGE_RULE=6,Oo.CSSRule.KEYFRAMES_RULE=7,Oo.CSSRule.KEYFRAME_RULE=8,Oo.CSSRule.MARGIN_RULE=9,Oo.CSSRule.NAMESPACE_RULE=10,Oo.CSSRule.COUNTER_STYLE_RULE=11,Oo.CSSRule.SUPPORTS_RULE=12,Oo.CSSRule.DOCUMENT_RULE=13,Oo.CSSRule.FONT_FEATURE_VALUES_RULE=14,Oo.CSSRule.VIEWPORT_RULE=15,Oo.CSSRule.REGION_STYLE_RULE=16,Oo.CSSRule.prototype={constructor:Oo.CSSRule},No.CSSRule=Oo.CSSRule;var Io,Po={},Mo={},Do={};function jo(){if(Io)return Po;Io=1;var t={CSSRule:No.CSSRule,CSSStyleSheet:Lo().CSSStyleSheet,MediaList:Mo.MediaList,CSSImportRule:function(){t.CSSRule.call(this),this.href="",this.media=new t.MediaList,this.styleSheet=new t.CSSStyleSheet}};return t.CSSImportRule.prototype=new t.CSSRule,t.CSSImportRule.prototype.constructor=t.CSSImportRule,t.CSSImportRule.prototype.type=3,Object.defineProperty(t.CSSImportRule.prototype,"cssText",{get:function(){var t=this.media.mediaText;return"@import url("+this.href+")"+(t?" "+t:"")+";"},set:function(t){for(var e,r,n=0,i="",o="";r=t.charAt(n);n++)switch(r){case" ":case"\t":case"\r":case"\n":case"\f":"after-import"===i?i="url":o+=r;break;case"@":i||t.indexOf("@import",n)!==n||(i="after-import",n+=6,o="");break;case"u":if("url"===i&&t.indexOf("url(",n)===n){if(-1===(e=t.indexOf(")",n+1)))throw n+': ")" not found';n+=4;var s=t.slice(n,e);s[0]===s[s.length-1]&&('"'!==s[0]&&"'"!==s[0]||(s=s.slice(1,-1))),this.href=s,n=e,i="media"}break;case'"':if("url"===i){if(!(e=t.indexOf('"',n+1)))throw n+": '\"' not found";this.href=t.slice(n+1,e),n=e,i="media"}break;case"'":if("url"===i){if(!(e=t.indexOf("'",n+1)))throw n+': "\'" not found';this.href=t.slice(n+1,e),n=e,i="media"}break;case";":"media"===i&&o&&(this.media.mediaText=o.trim());break;default:"media"===i&&(o+=r)}}}),Po.CSSImportRule=t.CSSImportRule,Po}Do.MediaList=function(){this.length=0},Do.MediaList.prototype={constructor:Do.MediaList,get mediaText(){return Array.prototype.join.call(this,", ")},set mediaText(t){for(var e=t.split(","),r=this.length=e.length,n=0;n<r;n++)this[n]=e[n].trim()},appendMedium:function(t){-1===Array.prototype.indexOf.call(this,t)&&(this[this.length]=t,this.length++)},deleteMedium:function(t){var e=Array.prototype.indexOf.call(this,t);-1!==e&&Array.prototype.splice.call(this,e,1)}},Mo.MediaList=Do.MediaList;var Fo={},qo={CSSRule:No.CSSRule,CSSGroupingRule:function(){qo.CSSRule.call(this),this.cssRules=[]}};qo.CSSGroupingRule.prototype=new qo.CSSRule,qo.CSSGroupingRule.prototype.constructor=qo.CSSGroupingRule,qo.CSSGroupingRule.prototype.insertRule=function(t,e){if(e<0||e>this.cssRules.length)throw new RangeError("INDEX_SIZE_ERR");var r=qo.parse(t).cssRules[0];return r.parentRule=this,this.cssRules.splice(e,0,r),e},qo.CSSGroupingRule.prototype.deleteRule=function(t){if(t<0||t>=this.cssRules.length)throw new RangeError("INDEX_SIZE_ERR");this.cssRules.splice(t,1)[0].parentRule=null},Fo.CSSGroupingRule=qo.CSSGroupingRule;var Bo={},Uo={},Vo={CSSRule:No.CSSRule,CSSGroupingRule:Fo.CSSGroupingRule,CSSConditionRule:function(){Vo.CSSGroupingRule.call(this),this.cssRules=[]}};Vo.CSSConditionRule.prototype=new Vo.CSSGroupingRule,Vo.CSSConditionRule.prototype.constructor=Vo.CSSConditionRule,Vo.CSSConditionRule.prototype.conditionText="",Vo.CSSConditionRule.prototype.cssText="",Uo.CSSConditionRule=Vo.CSSConditionRule;var Ho={CSSRule:No.CSSRule,CSSGroupingRule:Fo.CSSGroupingRule,CSSConditionRule:Uo.CSSConditionRule,MediaList:Mo.MediaList,CSSMediaRule:function(){Ho.CSSConditionRule.call(this),this.media=new Ho.MediaList}};Ho.CSSMediaRule.prototype=new Ho.CSSConditionRule,Ho.CSSMediaRule.prototype.constructor=Ho.CSSMediaRule,Ho.CSSMediaRule.prototype.type=4,Object.defineProperties(Ho.CSSMediaRule.prototype,{conditionText:{get:function(){return this.media.mediaText},set:function(t){this.media.mediaText=t},configurable:!0,enumerable:!0},cssText:{get:function(){for(var t=[],e=0,r=this.cssRules.length;e<r;e++)t.push(this.cssRules[e].cssText);return"@media "+this.media.mediaText+" {"+t.join("")+"}"},configurable:!0,enumerable:!0}}),Bo.CSSMediaRule=Ho.CSSMediaRule;var Go={},$o={CSSRule:No.CSSRule,CSSGroupingRule:Fo.CSSGroupingRule,CSSConditionRule:Uo.CSSConditionRule,CSSSupportsRule:function(){$o.CSSConditionRule.call(this)}};$o.CSSSupportsRule.prototype=new $o.CSSConditionRule,$o.CSSSupportsRule.prototype.constructor=$o.CSSSupportsRule,$o.CSSSupportsRule.prototype.type=12,Object.defineProperty($o.CSSSupportsRule.prototype,"cssText",{get:function(){for(var t=[],e=0,r=this.cssRules.length;e<r;e++)t.push(this.cssRules[e].cssText);return"@supports "+this.conditionText+" {"+t.join("")+"}"}}),Go.CSSSupportsRule=$o.CSSSupportsRule;var Wo,zo={};function Ko(){if(Wo)return zo;Wo=1;var t={CSSStyleDeclaration:ds().CSSStyleDeclaration,CSSRule:No.CSSRule,CSSFontFaceRule:function(){t.CSSRule.call(this),this.style=new t.CSSStyleDeclaration,this.style.parentRule=this}};return t.CSSFontFaceRule.prototype=new t.CSSRule,t.CSSFontFaceRule.prototype.constructor=t.CSSFontFaceRule,t.CSSFontFaceRule.prototype.type=5,Object.defineProperty(t.CSSFontFaceRule.prototype,"cssText",{get:function(){return"@font-face {"+this.style.cssText+"}"}}),zo.CSSFontFaceRule=t.CSSFontFaceRule,zo}var Yo={},Qo={CSSRule:No.CSSRule,CSSHostRule:function(){Qo.CSSRule.call(this),this.cssRules=[]}};Qo.CSSHostRule.prototype=new Qo.CSSRule,Qo.CSSHostRule.prototype.constructor=Qo.CSSHostRule,Qo.CSSHostRule.prototype.type=1001,Object.defineProperty(Qo.CSSHostRule.prototype,"cssText",{get:function(){for(var t=[],e=0,r=this.cssRules.length;e<r;e++)t.push(this.cssRules[e].cssText);return"@host {"+t.join("")+"}"}}),Yo.CSSHostRule=Qo.CSSHostRule;var Zo,Jo={};function Xo(){if(Zo)return Jo;Zo=1;var t={CSSRule:No.CSSRule,CSSStyleDeclaration:ds().CSSStyleDeclaration,CSSKeyframeRule:function(){t.CSSRule.call(this),this.keyText="",this.style=new t.CSSStyleDeclaration,this.style.parentRule=this}};return t.CSSKeyframeRule.prototype=new t.CSSRule,t.CSSKeyframeRule.prototype.constructor=t.CSSKeyframeRule,t.CSSKeyframeRule.prototype.type=8,Object.defineProperty(t.CSSKeyframeRule.prototype,"cssText",{get:function(){return this.keyText+" {"+this.style.cssText+"} "}}),Jo.CSSKeyframeRule=t.CSSKeyframeRule,Jo}var ts={},es={CSSRule:No.CSSRule,CSSKeyframesRule:function(){es.CSSRule.call(this),this.name="",this.cssRules=[]}};es.CSSKeyframesRule.prototype=new es.CSSRule,es.CSSKeyframesRule.prototype.constructor=es.CSSKeyframesRule,es.CSSKeyframesRule.prototype.type=7,Object.defineProperty(es.CSSKeyframesRule.prototype,"cssText",{get:function(){for(var t=[],e=0,r=this.cssRules.length;e<r;e++)t.push("  "+this.cssRules[e].cssText);return"@"+(this._vendorPrefix||"")+"keyframes "+this.name+" { \n"+t.join("\n")+"\n}"}}),ts.CSSKeyframesRule=es.CSSKeyframesRule;var rs={},ns={},is={CSSValue:function(){}};is.CSSValue.prototype={constructor:is.CSSValue,set cssText(t){var e=this._getConstructorName();throw new Error('DOMException: property "cssText" of "'+e+'" is readonly and can not be replaced with "'+t+'"!')},get cssText(){var t=this._getConstructorName();throw new Error('getter "cssText" of "'+t+'" is not implemented!')},_getConstructorName:function(){return this.constructor.toString().match(/function\s([^\(]+)/)[1]}},ns.CSSValue=is.CSSValue;var os={CSSValue:ns.CSSValue,CSSValueExpression:function(t,e){this._token=t,this._idx=e}};os.CSSValueExpression.prototype=new os.CSSValue,os.CSSValueExpression.prototype.constructor=os.CSSValueExpression,os.CSSValueExpression.prototype.parse=function(){for(var t,e=this._token,r=this._idx,n="",i="",o="",s=[];;++r){if(""===(n=e.charAt(r))){o="css expression error: unfinished expression!";break}switch(n){case"(":s.push(n),i+=n;break;case")":s.pop(n),i+=n;break;case"/":(t=this._parseJSComment(e,r))?t.error?o="css expression error: unfinished comment in expression!":r=t.idx:(t=this._parseJSRexExp(e,r))?(r=t.idx,i+=t.text):i+=n;break;case"'":case'"':(t=this._parseJSString(e,r,n))?(r=t.idx,i+=t.text):i+=n;break;default:i+=n}if(o)break;if(0===s.length)break}return o?{error:o}:{idx:r,expression:i}},os.CSSValueExpression.prototype._parseJSComment=function(t,e){var r=t.charAt(e+1);if("/"===r||"*"===r){var n,i,o=e;if("/"===r?i="\n":"*"===r&&(i="*/"),-1!==(n=t.indexOf(i,o+1+1)))return{idx:n=n+i.length-1,text:t.substring(e,n+1)};return{error:"css expression error: unfinished comment in expression!"}}return!1},os.CSSValueExpression.prototype._parseJSString=function(t,e,r){var n=this._findMatchedIdx(t,e,r);return-1!==n&&{idx:n,text:t.substring(e,n+r.length)}},os.CSSValueExpression.prototype._parseJSRexExp=function(t,e){var r=t.substring(0,e).replace(/\s+$/,"");if([/^$/,/\($/,/\[$/,/\!$/,/\+$/,/\-$/,/\*$/,/\/\s+/,/\%$/,/\=$/,/\>$/,/<$/,/\&$/,/\|$/,/\^$/,/\~$/,/\?$/,/\,$/,/delete$/,/in$/,/instanceof$/,/new$/,/typeof$/,/void$/].some((function(t){return t.test(r)}))){return this._parseJSString(t,e,"/")}return!1},os.CSSValueExpression.prototype._findMatchedIdx=function(t,e,r){for(var n,i=e;;){if(-1===(n=t.indexOf(r,i+1))){n=-1;break}var o=t.substring(e+1,n).match(/\\+$/);if(!o||o[0]%2==0)break;i=n}return t.indexOf("\n",e+1)<n&&(n=-1),n},rs.CSSValueExpression=os.CSSValueExpression;var ss={},as={},cs={MatcherList:function(){this.length=0}};cs.MatcherList.prototype={constructor:cs.MatcherList,get matcherText(){return Array.prototype.join.call(this,", ")},set matcherText(t){for(var e=t.split(","),r=this.length=e.length,n=0;n<r;n++)this[n]=e[n].trim()},appendMatcher:function(t){-1===Array.prototype.indexOf.call(this,t)&&(this[this.length]=t,this.length++)},deleteMatcher:function(t){var e=Array.prototype.indexOf.call(this,t);-1!==e&&Array.prototype.splice.call(this,e,1)}},as.MatcherList=cs.MatcherList;var us,ls,hs={CSSRule:No.CSSRule,MatcherList:as.MatcherList};function fs(){if(us)return xo;us=1;var t={parse:function(e){for(var r,n,i,o,s,a,c,u,l,h,f,d,p,g=0,m="before-selector",y="",v=0,b={selector:!0,value:!0,"value-parenthesis":!0,atRule:!0,"importRule-begin":!0,importRule:!0,atBlock:!0,conditionBlock:!0,"documentRule-begin":!0},w=new t.CSSStyleSheet,S=w,x=[],_=!1,A="",E=/@(-(?:\w+-)+)?keyframes/g,C=function(t){var r=e.substring(0,g).split("\n"),n=r.length,i=r.pop().length+1,o=new Error(t+" (line "+n+", char "+i+")");throw o.line=n,o.char=i,o.styleSheet=w,o};p=e.charAt(g);g++)switch(p){case" ":case"\t":case"\r":case"\n":case"\f":b[m]&&(y+=p);break;case'"':r=g+1;do{(r=e.indexOf('"',r)+1)||C('Unmatched "')}while("\\"===e[r-2]);switch(y+=e.slice(g,r),g=r-1,m){case"before-value":m="value";break;case"importRule-begin":m="importRule"}break;case"'":r=g+1;do{(r=e.indexOf("'",r)+1)||C("Unmatched '")}while("\\"===e[r-2]);switch(y+=e.slice(g,r),g=r-1,m){case"before-value":m="value";break;case"importRule-begin":m="importRule"}break;case"/":"*"===e.charAt(g+1)?(g+=2,-1===(r=e.indexOf("*/",g))?C("Missing */"):g=r+1):y+=p,"importRule-begin"===m&&(y+=" ",m="importRule");break;case"@":if(e.indexOf("@-moz-document",g)===g){m="documentRule-begin",(f=new t.CSSDocumentRule).__starts=g,g+=13,y="";break}if(e.indexOf("@media",g)===g){m="atBlock",(a=new t.CSSMediaRule).__starts=g,g+=5,y="";break}if(e.indexOf("@supports",g)===g){m="conditionBlock",(c=new t.CSSSupportsRule).__starts=g,g+=8,y="";break}if(e.indexOf("@host",g)===g){m="hostRule-begin",g+=4,(d=new t.CSSHostRule).__starts=g,y="";break}if(e.indexOf("@import",g)===g){m="importRule-begin",g+=6,y+="@import";break}if(e.indexOf("@font-face",g)===g){m="fontFaceRule-begin",g+=9,(l=new t.CSSFontFaceRule).__starts=g,y="";break}E.lastIndex=g;var T=E.exec(e);if(T&&T.index===g){m="keyframesRule-begin",(h=new t.CSSKeyframesRule).__starts=g,h._vendorPrefix=T[1],g+=T[0].length-1,y="";break}"selector"===m&&(m="atRule"),y+=p;break;case"{":"selector"===m||"atRule"===m?(s.selectorText=y.trim(),s.style.__starts=g,y="",m="before-name"):"atBlock"===m?(a.media.mediaText=y.trim(),n&&x.push(n),S=n=a,a.parentStyleSheet=w,y="",m="before-selector"):"conditionBlock"===m?(c.conditionText=y.trim(),n&&x.push(n),S=n=c,c.parentStyleSheet=w,y="",m="before-selector"):"hostRule-begin"===m?(n&&x.push(n),S=n=d,d.parentStyleSheet=w,y="",m="before-selector"):"fontFaceRule-begin"===m?(n&&(l.parentRule=n),l.parentStyleSheet=w,s=l,y="",m="before-name"):"keyframesRule-begin"===m?(h.name=y.trim(),n&&(x.push(n),h.parentRule=n),h.parentStyleSheet=w,S=n=h,y="",m="keyframeRule-begin"):"keyframeRule-begin"===m?((s=new t.CSSKeyframeRule).keyText=y.trim(),s.__starts=g,y="",m="before-name"):"documentRule-begin"===m&&(f.matcher.matcherText=y.trim(),n&&(x.push(n),f.parentRule=n),S=n=f,f.parentStyleSheet=w,y="",m="before-selector");break;case":":"name"===m?(o=y.trim(),y="",m="before-value"):y+=p;break;case"(":if("value"===m)if("expression"===y.trim()){var k=new t.CSSValueExpression(e,g).parse();k.error?C(k.error):(y+=k.expression,g=k.idx)}else m="value-parenthesis",v=1,y+=p;else"value-parenthesis"===m?(v++,y+=p):y+=p;break;case")":"value-parenthesis"===m&&0===--v&&(m="value"),y+=p;break;case"!":"value"===m&&e.indexOf("!important",g)===g?(A="important",g+=9):y+=p;break;case";":switch(m){case"value":s.style.setProperty(o,y.trim(),A),A="",y="",m="before-name";break;case"atRule":y="",m="before-selector";break;case"importRule":(u=new t.CSSImportRule).parentStyleSheet=u.styleSheet.parentStyleSheet=w,u.cssText=y+p,w.cssRules.push(u),y="",m="before-selector";break;default:y+=p}break;case"}":switch(m){case"value":s.style.setProperty(o,y.trim(),A),A="";case"before-name":case"name":s.__ends=g+1,n&&(s.parentRule=n),s.parentStyleSheet=w,S.cssRules.push(s),y="",m=S.constructor===t.CSSKeyframesRule?"keyframeRule-begin":"before-selector";break;case"keyframeRule-begin":case"before-selector":case"selector":for(n||C("Unexpected }"),_=x.length>0;x.length>0;){if("CSSMediaRule"===(n=x.pop()).constructor.name||"CSSSupportsRule"===n.constructor.name){i=S,(S=n).cssRules.push(i);break}0===x.length&&(_=!1)}_||(S.__ends=g+1,w.cssRules.push(S),S=w,n=null),y="",m="before-selector"}break;default:switch(m){case"before-selector":m="selector",(s=new t.CSSStyleRule).__starts=g;break;case"before-name":m="name";break;case"before-value":m="value";break;case"importRule-begin":m="importRule"}y+=p}return w}};return xo.parse=t.parse,t.CSSStyleSheet=Lo().CSSStyleSheet,t.CSSStyleRule=Ro().CSSStyleRule,t.CSSImportRule=jo().CSSImportRule,t.CSSGroupingRule=Fo.CSSGroupingRule,t.CSSMediaRule=Bo.CSSMediaRule,t.CSSConditionRule=Uo.CSSConditionRule,t.CSSSupportsRule=Go.CSSSupportsRule,t.CSSFontFaceRule=Ko().CSSFontFaceRule,t.CSSHostRule=Yo.CSSHostRule,t.CSSStyleDeclaration=ds().CSSStyleDeclaration,t.CSSKeyframeRule=Xo().CSSKeyframeRule,t.CSSKeyframesRule=ts.CSSKeyframesRule,t.CSSValueExpression=rs.CSSValueExpression,t.CSSDocumentRule=ss.CSSDocumentRule,xo}function ds(){if(ls)return So;ls=1;var t={CSSStyleDeclaration:function(){this.length=0,this.parentRule=null,this._importants={}}};return t.CSSStyleDeclaration.prototype={constructor:t.CSSStyleDeclaration,getPropertyValue:function(t){return this[t]||""},setProperty:function(t,e,r){this[t]?Array.prototype.indexOf.call(this,t)<0&&(this[this.length]=t,this.length++):(this[this.length]=t,this.length++);this[t]=e+"",this._importants[t]=r},removeProperty:function(t){if(!(t in this))return"";var e=Array.prototype.indexOf.call(this,t);if(e<0)return"";var r=this[t];return this[t]="",Array.prototype.splice.call(this,e,1),r},getPropertyCSSValue:function(){},getPropertyPriority:function(t){return this._importants[t]||""},getPropertyShorthand:function(){},isPropertyImplicit:function(){},get cssText(){for(var t=[],e=0,r=this.length;e<r;++e){var n=this[e],i=this.getPropertyValue(n),o=this.getPropertyPriority(n);o&&(o=" !"+o),t[e]=n+": "+i+o+";"}return t.join(" ")},set cssText(e){var r,n;for(r=this.length;r--;)this[n=this[r]]="";Array.prototype.splice.call(this,0,this.length),this._importants={};var i=t.parse("#bogus{"+e+"}").cssRules[0].style,o=i.length;for(r=0;r<o;++r)n=i[r],this.setProperty(i[r],i.getPropertyValue(n),i.getPropertyPriority(n))}},So.CSSStyleDeclaration=t.CSSStyleDeclaration,t.parse=fs().parse,So}hs.CSSDocumentRule=function(){hs.CSSRule.call(this),this.matcher=new hs.MatcherList,this.cssRules=[]},hs.CSSDocumentRule.prototype=new hs.CSSRule,hs.CSSDocumentRule.prototype.constructor=hs.CSSDocumentRule,hs.CSSDocumentRule.prototype.type=10,Object.defineProperty(hs.CSSDocumentRule.prototype,"cssText",{get:function(){for(var t=[],e=0,r=this.cssRules.length;e<r;e++)t.push(this.cssRules[e].cssText);return"@-moz-document "+this.matcher.matcherText+" {"+t.join("")+"}"}}),ss.CSSDocumentRule=hs.CSSDocumentRule,Lo().CSSStyleSheet,No.CSSRule,Ro().CSSStyleRule,Fo.CSSGroupingRule,Uo.CSSConditionRule,Bo.CSSMediaRule,Go.CSSSupportsRule,ds().CSSStyleDeclaration,Xo().CSSKeyframeRule,ts.CSSKeyframesRule,ds().CSSStyleDeclaration,Ro().CSSStyleRule,jo().CSSImportRule,Ko().CSSFontFaceRule,Lo().CSSStyleSheet,Xo().CSSKeyframeRule;var ps=fs().parse;const gs="style";class ms extends mo{constructor(t,e=gs){super(t,e),this[x]=null}get sheet(){const t=this[x];return null!==t?t:this[x]=ps(this.textContent)}get innerHTML(){return super.innerHTML||""}set innerHTML(t){super.textContent=t,this[x]=null}get innerText(){return super.innerText||""}set innerText(t){super.textContent=t,this[x]=null}get textContent(){return super.textContent||""}set textContent(t){super.textContent=t,this[x]=null}}cr(gs,ms);const ys="input";class vs extends ho{constructor(t,e=ys){super(t,e)}get autofocus(){return _r.get(this,"autofocus")||-1}set autofocus(t){_r.set(this,"autofocus",t)}get disabled(){return _r.get(this,"disabled")}set disabled(t){_r.set(this,"disabled",t)}get name(){return this.getAttribute("name")}set name(t){this.setAttribute("name",t)}get placeholder(){return this.getAttribute("placeholder")}set placeholder(t){this.setAttribute("placeholder",t)}get type(){return this.getAttribute("type")}set type(t){this.setAttribute("type",t)}get value(){return Er.get(this,"value")}set value(t){Er.set(this,"value",t)}}cr(ys,vs);class bs extends ho{constructor(t,e="h1"){super(t,e)}}cr(["h1","h2","h3","h4","h5","h6"],bs);class ws{constructor(t,e){this.width=t,this.height=e}getContext(){return null}toDataURL(){return""}}var Ss={createCanvas:(t,e)=>new ws(t,e)};const{createCanvas:xs}=Ss,_s="canvas";class As extends ho{constructor(t,e=_s){super(t,e),this[g]=xs(300,150)}get width(){return this[g].width}set width(t){Ar.set(this,"width",t),this[g].width=t}get height(){return this[g].height}set height(t){Ar.set(this,"height",t),this[g].height=t}getContext(t){return this[g].getContext(t)}toDataURL(...t){return this[g].toDataURL(...t)}}cr(_s,As);const Es="option";class Cs extends ho{constructor(t,e=Es){super(t,e)}get value(){return Er.get(this,"value")}set value(t){Er.set(this,"value",t)}get selected(){return _r.get(this,"selected")}set selected(t){const e=this.parentElement?.querySelector("option[selected]");e&&e!==this&&(e.selected=!1),_r.set(this,"selected",t)}}cr(Es,Cs);const Ts="title";class ks extends mo{constructor(t,e=Ts){super(t,e)}}cr(Ts,ks);const Ns="select";class Os extends ho{constructor(t,e=Ns){super(t,e)}get options(){let t=new Or,{firstElementChild:e}=this;for(;e;)"OPTGROUP"===e.tagName?t.push(...e.children):t.push(e),e=e.nextElementSibling;return t}get disabled(){return _r.get(this,"disabled")}set disabled(t){_r.set(this,"disabled",t)}get name(){return this.getAttribute("name")}set name(t){this.setAttribute("name",t)}get value(){return this.querySelector("option[selected]")?.value}}cr(Ns,Os);const Rs="button";class Ls extends ho{constructor(t,e=Rs){super(t,e)}get disabled(){return _r.get(this,"disabled")}set disabled(t){_r.set(this,"disabled",t)}get name(){return this.getAttribute("name")}set name(t){this.setAttribute("name",t)}get type(){return this.getAttribute("type")}set type(t){this.setAttribute("type",t)}}cr(Rs,Ls);const Is="textarea";class Ps extends mo{constructor(t,e=Is){super(t,e)}get disabled(){return _r.get(this,"disabled")}set disabled(t){_r.set(this,"disabled",t)}get name(){return this.getAttribute("name")}set name(t){this.setAttribute("name",t)}get placeholder(){return this.getAttribute("placeholder")}set placeholder(t){this.setAttribute("placeholder",t)}get type(){return this.getAttribute("type")}set type(t){this.setAttribute("type",t)}get value(){return this.textContent}set value(t){this.textContent=t}}cr(Is,Ps);const Ms="link";class Ds extends ho{constructor(t,e=Ms){super(t,e)}get disabled(){return _r.get(this,"disabled")}set disabled(t){_r.set(this,"disabled",t)}get href(){return Er.get(this,"href")}set href(t){Er.set(this,"href",t)}get hreflang(){return Er.get(this,"hreflang")}set hreflang(t){Er.set(this,"hreflang",t)}get media(){return Er.get(this,"media")}set media(t){Er.set(this,"media",t)}get rel(){return Er.get(this,"rel")}set rel(t){Er.set(this,"rel",t)}get type(){return Er.get(this,"type")}set type(t){Er.set(this,"type",t)}}cr(Ms,Ds);const js="slot";class Fs extends ho{constructor(t,e=js){super(t,e)}get name(){return this.getAttribute("name")}set name(t){this.setAttribute("name",t)}assign(){}assignedNodes(t){const e=!!this.name,r=this.getRootNode().host?.childNodes??[];let n;if(n=e?[...r].filter((t=>t.slot===this.name)):[...r].filter((t=>!t.slot)),t?.flatten){const t=[];for(let e of n)"slot"===e.localName?t.push(...e.assignedNodes({flatten:!0})):t.push(e);n=t}return n.length?n:[...this.childNodes]}assignedElements(t){const e=this.assignedNodes(t).filter((t=>1===t.nodeType));return e.length?e:[...this.children]}}cr(js,Fs);class qs extends ho{constructor(t,e="img"){super(t,e)}get alt(){return Er.get(this,"alt")}set alt(t){Er.set(this,"alt",t)}get sizes(){return Er.get(this,"sizes")}set sizes(t){Er.set(this,"sizes",t)}get src(){return Er.get(this,"src")}set src(t){Er.set(this,"src",t)}get srcset(){return Er.get(this,"srcset")}set srcset(t){Er.set(this,"srcset",t)}get title(){return Er.get(this,"title")}set title(t){Er.set(this,"title",t)}get width(){return Ar.get(this,"width")}set width(t){Ar.set(this,"width",t)}get height(){return Ar.get(this,"height")}set height(t){Ar.set(this,"height",t)}}cr("img",qs);const Bs="meta";class Us extends ho{constructor(t,e=Bs){super(t,e)}get name(){return Er.get(this,"name")}set name(t){Er.set(this,"name",t)}get httpEquiv(){return Er.get(this,"http-equiv")}set httpEquiv(t){Er.set(this,"http-equiv",t)}get content(){return Er.get(this,"content")}set content(t){Er.set(this,"content",t)}get charset(){return Er.get(this,"charset")}set charset(t){Er.set(this,"charset",t)}get media(){return Er.get(this,"media")}set media(t){Er.set(this,"media",t)}}cr(Bs,Us);class Vs extends ho{constructor(t,e="a"){super(t,e)}get href(){return encodeURI(decodeURI(Er.get(this,"href")))}set href(t){Er.set(this,"href",decodeURI(t))}get download(){return encodeURI(decodeURI(Er.get(this,"download")))}set download(t){Er.set(this,"download",decodeURI(t))}get target(){return Er.get(this,"target")}set target(t){Er.set(this,"target",t)}get type(){return Er.get(this,"type")}set type(t){Er.set(this,"type",t)}}cr("a",Vs);const Hs="source";class Gs extends ho{constructor(t,e=Hs){super(t,e)}get src(){return Er.get(this,"src")}set src(t){Er.set(this,"src",t)}get srcset(){return Er.get(this,"srcset")}set srcset(t){Er.set(this,"srcset",t)}get sizes(){return Er.get(this,"sizes")}set sizes(t){Er.set(this,"sizes",t)}get type(){return Er.get(this,"type")}set type(t){Er.set(this,"type",t)}}cr(Hs,Gs);const $s={HTMLElement:ho,HTMLTemplateElement:po,HTMLHtmlElement:class extends ho{constructor(t,e="html"){super(t,e)}},HTMLScriptElement:vo,HTMLFrameElement:class extends ho{constructor(t,e="frame"){super(t,e)}},HTMLIFrameElement:wo,HTMLObjectElement:class extends ho{constructor(t,e="object"){super(t,e)}},HTMLHeadElement:class extends ho{constructor(t,e="head"){super(t,e)}},HTMLBodyElement:class extends ho{constructor(t,e="body"){super(t,e)}},HTMLStyleElement:ms,HTMLTimeElement:class extends ho{constructor(t,e="time"){super(t,e)}},HTMLFieldSetElement:class extends ho{constructor(t,e="fieldset"){super(t,e)}},HTMLEmbedElement:class extends ho{constructor(t,e="embed"){super(t,e)}},HTMLHRElement:class extends ho{constructor(t,e="hr"){super(t,e)}},HTMLProgressElement:class extends ho{constructor(t,e="progress"){super(t,e)}},HTMLParagraphElement:class extends ho{constructor(t,e="p"){super(t,e)}},HTMLTableElement:class extends ho{constructor(t,e="table"){super(t,e)}},HTMLFrameSetElement:class extends ho{constructor(t,e="frameset"){super(t,e)}},HTMLLIElement:class extends ho{constructor(t,e="li"){super(t,e)}},HTMLBaseElement:class extends ho{constructor(t,e="base"){super(t,e)}},HTMLDataListElement:class extends ho{constructor(t,e="datalist"){super(t,e)}},HTMLInputElement:vs,HTMLParamElement:class extends ho{constructor(t,e="param"){super(t,e)}},HTMLMediaElement:class extends ho{constructor(t,e="media"){super(t,e)}},HTMLAudioElement:class extends ho{constructor(t,e="audio"){super(t,e)}},HTMLHeadingElement:bs,HTMLDirectoryElement:class extends ho{constructor(t,e="dir"){super(t,e)}},HTMLQuoteElement:class extends ho{constructor(t,e="quote"){super(t,e)}},HTMLCanvasElement:As,HTMLLegendElement:class extends ho{constructor(t,e="legend"){super(t,e)}},HTMLOptionElement:Cs,HTMLSpanElement:class extends ho{constructor(t,e="span"){super(t,e)}},HTMLMeterElement:class extends ho{constructor(t,e="meter"){super(t,e)}},HTMLVideoElement:class extends ho{constructor(t,e="video"){super(t,e)}},HTMLTableCellElement:class extends ho{constructor(t,e="td"){super(t,e)}},HTMLTitleElement:ks,HTMLOutputElement:class extends ho{constructor(t,e="output"){super(t,e)}},HTMLTableRowElement:class extends ho{constructor(t,e="tr"){super(t,e)}},HTMLDataElement:class extends ho{constructor(t,e="data"){super(t,e)}},HTMLMenuElement:class extends ho{constructor(t,e="menu"){super(t,e)}},HTMLSelectElement:Os,HTMLBRElement:class extends ho{constructor(t,e="br"){super(t,e)}},HTMLButtonElement:Ls,HTMLMapElement:class extends ho{constructor(t,e="map"){super(t,e)}},HTMLOptGroupElement:class extends ho{constructor(t,e="optgroup"){super(t,e)}},HTMLDListElement:class extends ho{constructor(t,e="dl"){super(t,e)}},HTMLTextAreaElement:Ps,HTMLFontElement:class extends ho{constructor(t,e="font"){super(t,e)}},HTMLDivElement:class extends ho{constructor(t,e="div"){super(t,e)}},HTMLLinkElement:Ds,HTMLSlotElement:Fs,HTMLFormElement:class extends ho{constructor(t,e="form"){super(t,e)}},HTMLImageElement:qs,HTMLPreElement:class extends ho{constructor(t,e="pre"){super(t,e)}},HTMLUListElement:class extends ho{constructor(t,e="ul"){super(t,e)}},HTMLMetaElement:Us,HTMLPictureElement:class extends ho{constructor(t,e="picture"){super(t,e)}},HTMLAreaElement:class extends ho{constructor(t,e="area"){super(t,e)}},HTMLOListElement:class extends ho{constructor(t,e="ol"){super(t,e)}},HTMLTableCaptionElement:class extends ho{constructor(t,e="caption"){super(t,e)}},HTMLAnchorElement:Vs,HTMLLabelElement:class extends ho{constructor(t,e="label"){super(t,e)}},HTMLUnknownElement:class extends ho{constructor(t,e="unknown"){super(t,e)}},HTMLModElement:class extends ho{constructor(t,e="mod"){super(t,e)}},HTMLDetailsElement:class extends ho{constructor(t,e="details"){super(t,e)}},HTMLSourceElement:Gs,HTMLTrackElement:class extends ho{constructor(t,e="track"){super(t,e)}},HTMLMarqueeElement:class extends ho{constructor(t,e="marquee"){super(t,e)}}},Ws={test:()=>!0},zs={"text/html":{docType:"<!DOCTYPE html>",ignoreCase:!0,voidElements:/^(?:area|base|br|col|embed|hr|img|input|keygen|link|menuitem|meta|param|source|track|wbr)$/i},"image/svg+xml":{docType:'<?xml version="1.0" encoding="utf-8"?>',ignoreCase:!1,voidElements:Ws},"text/xml":{docType:'<?xml version="1.0" encoding="utf-8"?>',ignoreCase:!1,voidElements:Ws},"application/xml":{docType:'<?xml version="1.0" encoding="utf-8"?>',ignoreCase:!1,voidElements:Ws},"application/xhtml+xml":{docType:'<?xml version="1.0" encoding="utf-8"?>',ignoreCase:!1,voidElements:Ws}};class Ks extends Bi{constructor(t,e={}){super(t,e),this.detail=e.detail}}const Ys=t=>class extends qs{constructor(e,r){switch(super(t),arguments.length){case 1:this.height=e,this.width=e;break;case 2:this.height=r,this.width=e}}},Qs=({[_]:t,[f]:e},r=null)=>{We(t[w],e[v]);do{const n=Be(t),i=n===e?n:n[v];r?r.insertBefore(t,r[f]):t.remove(),t=i}while(t!==e)};class Zs{constructor(){this[_]=null,this[f]=null,this.commonAncestorContainer=null}insertNode(t){this[f].parentNode.insertBefore(t,this[_])}selectNode(t){this[_]=t,this[f]=Be(t)}selectNodeContents(t){this.selectNode(t),this.commonAncestorContainer=t}surroundContents(t){t.replaceChildren(this.extractContents())}setStartBefore(t){this[_]=t}setStartAfter(t){this[_]=t.nextSibling}setEndBefore(t){this[f]=Be(t.previousSibling)}setEndAfter(t){this[f]=Be(t)}cloneContents(){let{[_]:t,[f]:e}=this;const r=t.ownerDocument.createDocumentFragment();for(;t!==e;)r.insertBefore(t.cloneNode(!0),r[f]),t=Be(t),t!==e&&(t=t[v]);return r}deleteContents(){Qs(this)}extractContents(){const t=this[_].ownerDocument.createDocumentFragment();return Qs(this,t),t}createContextualFragment(t){const{commonAncestorContainer:e}=this,r="ownerSVGElement"in e,n=r?e.ownerDocument:e,i=n.createElement("template");i.innerHTML=t;let{content:o}=i;if(r){const t=[...o.childNodes];o=n.createDocumentFragment(),Object.setPrototypeOf(o,Yi.prototype),o.ownerSVGElement=n;for(const e of t)Object.setPrototypeOf(e,Yi.prototype),e.ownerSVGElement=n,o.appendChild(e)}else this.selectNode(o);return o}cloneRange(){const t=new Zs;return t[_]=this[_],t[f]=this[f],t}}const Js=({nodeType:t},e)=>{switch(t){case 1:return 1&e;case 3:return 4&e;case 8:return 128&e;case 4:return 8&e}return 0};class Xs{constructor(t,e=-1){this.root=t,this.currentNode=t,this.whatToShow=e;let{[v]:r,[f]:n}=t;if(9===t.nodeType){const{documentElement:e}=t;r=e,n=e[f]}const i=[];for(;r!==n;)Js(r,e)&&i.push(r),r=r[v];this[S]={i:0,nodes:i}}nextNode(){const t=this[S];return this.currentNode=t.i<t.nodes.length?t.nodes[t.i++]:null,this.currentNode}}const ta=(t,e,r)=>{let{[v]:n,[f]:i}=e;return t.call({ownerDocument:e,[v]:n,[f]:i},r)},ea=Le({},co,$s,{CustomEvent:Ks,Event:Bi,EventTarget:Nr,InputEvent:class extends Bi{constructor(t,e={}){super(t,e),this.inputType=e.inputType,this.data=e.data,this.dataTransfer=e.dataTransfer,this.isComposing=e.isComposing||!1,this.ranges=e.ranges}},NamedNodeMap:Ui,NodeList:Or}),ra=new WeakMap;let na=class extends mi{constructor(t){super(null,"#document",9),this[a]={active:!1,registry:null},this[y]={active:!1,class:null},this[m]=zs[t],this[l]=null,this[h]=null,this[p]=null,this[g]=null,this[E]=null}get defaultView(){return ra.has(this)||ra.set(this,new Proxy(globalThis,{set:(t,e,r)=>{switch(e){case"addEventListener":case"removeEventListener":case"dispatchEvent":this[d][e]=r;break;default:t[e]=r}return!0},get:(t,e)=>{switch(e){case"addEventListener":case"removeEventListener":case"dispatchEvent":if(!this[d]){const t=this[d]=new Nr;t.dispatchEvent=t.dispatchEvent.bind(t),t.addEventListener=t.addEventListener.bind(t),t.removeEventListener=t.removeEventListener.bind(t)}return this[d][e];case"document":return this;case"navigator":return{userAgent:"Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/88.0.4324.150 Safari/537.36"};case"window":return ra.get(this);case"customElements":return this[a].registry||(this[a]=new rr(this)),this[a];case"performance":return ur;case"DOMParser":return this[h];case"Image":return this[g]||(this[g]=Ys(this)),this[g];case"MutationObserver":return this[y].class||(this[y]=new br(this)),this[y].class}return this[p]&&this[p][e]||ea[e]||t[e]}})),ra.get(this)}get doctype(){const t=this[l];if(t)return t;const{firstChild:e}=this;return e&&e.nodeType===ke?this[l]=e:null}set doctype(t){if(/^([a-z:]+)(\s+system|\s+public(\s+"([^"]+)")?)?(\s+"([^"]+)")?/i.test(t)){const{$1:t,$4:e,$6:r}=RegExp;this[l]=new vi(this,t,e,r),Ge(this,this[l],this[v])}}get documentElement(){return this.firstElementChild}get isConnected(){return!0}_getParent(){return this[d]}createAttribute(t){return new qr(this,t)}createCDATASection(t){return new Jr(this,t)}createComment(t){return new Xr(this,t)}createDocumentFragment(){return new yi(this)}createDocumentType(t,e,r){return new vi(this,t,e,r)}createElement(t){return new Wi(this,t)}createRange(){const t=new Zs;return t.commonAncestorContainer=this,t}createTextNode(t){return new fi(this,t)}createTreeWalker(t,e=-1){return new Xs(t,e)}createNodeIterator(t,e=-1){return this.createTreeWalker(t,e)}createEvent(t){const e=Ie("Event"===t?new Bi(""):new Ks(""));return e.initEvent=e.initCustomEvent=(t,r=!1,n=!1,i)=>{e.bubbles=!!r,Pe(e,{type:{value:t},canBubble:{value:r},cancelable:{value:n},detail:{value:i}})},e}cloneNode(t=!1){const{constructor:e,[a]:r,[l]:n}=this,i=new e;if(i[a]=r,t){const t=i[f],{childNodes:e}=this;for(let{length:r}=e,n=0;n<r;n++)i.insertBefore(e[n].cloneNode(!0),t);n&&(i[l]=e[0])}return i}importNode(t){const e=1<arguments.length&&!!arguments[1],r=t.cloneNode(e),{[a]:n}=this,{active:i}=n,o=t=>{const{ownerDocument:e,nodeType:r}=t;t.ownerDocument=this,i&&e!==this&&1===r&&n.upgrade(t)};if(o(r),e)switch(r.nodeType){case 1:case Ne:{let{[v]:t,[f]:e}=r;for(;t!==e;)1===t.nodeType&&o(t),t=t[v];break}}return r}toString(){return this.childNodes.join("")}querySelector(t){return ta(super.querySelector,this,t)}querySelectorAll(t){return ta(super.querySelectorAll,this,t)}getElementsByTagNameNS(t,e){return this.getElementsByTagName(e)}createAttributeNS(t,e){return this.createAttribute(e)}createElementNS(t,e,r){return t===Re?new Yi(this,e,null):this.createElement(e,r)}};Fe(ea.Document=function(){Qi()},na).prototype=na.prototype;class ia extends na{constructor(){super("text/html")}get all(){const t=new Or;let{[v]:e,[f]:r}=this;for(;e!==r;){if(1===e.nodeType)t.push(e);e=e[v]}return t}get head(){const{documentElement:t}=this;let{firstElementChild:e}=t;return e&&"HEAD"===e.tagName||(e=this.createElement("head"),t.prepend(e)),e}get body(){const{head:t}=this;let{nextElementSibling:e}=t;return e&&"BODY"===e.tagName||(e=this.createElement("body"),t.after(e)),e}get title(){const{head:t}=this;return t.getElementsByTagName("title").at(0)?.textContent||""}set title(t){const{head:e}=this;let r=e.getElementsByTagName("title").at(0);r?r.textContent=t:e.insertBefore(this.createElement("title"),e.firstChild).textContent=t}createElement(t,e){const r=!(!e||!e.is),n=((t,e,r,n)=>{if(!e&&ar.has(r))return new(ar.get(r))(t,r);const{[a]:{active:i,registry:o}}=t;if(i){const i=e?n.is:r;if(o.has(i)){const{Class:e}=o.get(i),n=new e(t,r);return Qe.set(n,{connected:!1}),n}}return new ho(t,r)})(this,r,t,e);return r&&n.setAttribute("is",e.is),n}}class oa extends na{constructor(){super("image/svg+xml")}toString(){return this[m].docType+super.toString()}}class sa extends na{constructor(){super("text/xml")}toString(){return this[m].docType+super.toString()}}class aa{parseFromString(t,e,r=null){let n,i=!1;return"text/html"===e?(i=!0,n=new ia):n="image/svg+xml"===e?new oa:new sa,n[h]=aa,r&&(n[p]=r),i&&"..."===t&&(t="<!doctype html><html><head></head><body></body></html>"),t?sr(n,i,t):n}}const{parse:ca}=JSON;function ua(t,e){return Array(e+1).join(t)}Fe((function(){Qi()}),na).prototype=na.prototype;var la=["ADDRESS","ARTICLE","ASIDE","AUDIO","BLOCKQUOTE","BODY","CANVAS","CENTER","DD","DIR","DIV","DL","DT","FIELDSET","FIGCAPTION","FIGURE","FOOTER","FORM","FRAMESET","H1","H2","H3","H4","H5","H6","HEADER","HGROUP","HR","HTML","ISINDEX","LI","MAIN","MENU","NAV","NOFRAMES","NOSCRIPT","OL","OUTPUT","P","PRE","SECTION","TABLE","TBODY","TD","TFOOT","TH","THEAD","TR","UL"];function ha(t){return ga(t,la)}var fa=["AREA","BASE","BR","COL","COMMAND","EMBED","HR","IMG","INPUT","KEYGEN","LINK","META","PARAM","SOURCE","TRACK","WBR"];function da(t){return ga(t,fa)}var pa=["A","TABLE","THEAD","TBODY","TFOOT","TH","TD","IFRAME","SCRIPT","AUDIO","VIDEO"];function ga(t,e){return e.indexOf(t.nodeName)>=0}function ma(t,e){return t.getElementsByTagName&&e.some((function(e){return t.getElementsByTagName(e).length}))}var ya={};function va(t){return t?t.replace(/(\n+\s*)+/g,"\n"):""}function ba(t){for(var e in this.options=t,this._keep=[],this._remove=[],this.blankRule={replacement:t.blankReplacement},this.keepReplacement=t.keepReplacement,this.defaultRule={replacement:t.defaultReplacement},this.array=[],t.rules)this.array.push(t.rules[e])}function wa(t,e,r){for(var n=0;n<t.length;n++){var i=t[n];if(Sa(i,e,r))return i}}function Sa(t,e,r){var n=t.filter;if("string"==typeof n){if(n===e.nodeName.toLowerCase())return!0}else if(Array.isArray(n)){if(n.indexOf(e.nodeName.toLowerCase())>-1)return!0}else{if("function"!=typeof n)throw new TypeError("`filter` needs to be a string, array, or function");if(n.call(t,e,r))return!0}}function xa(t){var e=t.nextSibling||t.parentNode;return t.parentNode.removeChild(t),e}function _a(t,e,r){return t&&t.parentNode===e||r(e)?e.nextSibling||e.parentNode:e.firstChild||e.nextSibling||e.parentNode}ya.paragraph={filter:"p",replacement:function(t){return"\n\n"+t+"\n\n"}},ya.lineBreak={filter:"br",replacement:function(t,e,r){return r.br+"\n"}},ya.heading={filter:["h1","h2","h3","h4","h5","h6"],replacement:function(t,e,r){var n=Number(e.nodeName.charAt(1));return"setext"===r.headingStyle&&n<3?"\n\n"+t+"\n"+ua(1===n?"=":"-",t.length)+"\n\n":"\n\n"+ua("#",n)+" "+t+"\n\n"}},ya.blockquote={filter:"blockquote",replacement:function(t){return"\n\n"+(t=(t=t.replace(/^\n+|\n+$/g,"")).replace(/^/gm,"> "))+"\n\n"}},ya.list={filter:["ul","ol"],replacement:function(t,e){var r=e.parentNode;return"LI"===r.nodeName&&r.lastElementChild===e?"\n"+t:"\n\n"+t+"\n\n"}},ya.listItem={filter:"li",replacement:function(t,e,r){t=t.replace(/^\n+/,"").replace(/\n+$/,"\n").replace(/\n/gm,"\n    ");var n=r.bulletListMarker+"   ",i=e.parentNode;if("OL"===i.nodeName){var o=i.getAttribute("start"),s=Array.prototype.indexOf.call(i.children,e);n=(o?Number(o)+s:s+1)+".  "}return n+t+(e.nextSibling&&!/\n$/.test(t)?"\n":"")}},ya.indentedCodeBlock={filter:function(t,e){return"indented"===e.codeBlockStyle&&"PRE"===t.nodeName&&t.firstChild&&"CODE"===t.firstChild.nodeName},replacement:function(t,e,r){return"\n\n    "+e.firstChild.textContent.replace(/\n/g,"\n    ")+"\n\n"}},ya.fencedCodeBlock={filter:function(t,e){return"fenced"===e.codeBlockStyle&&"PRE"===t.nodeName&&t.firstChild&&"CODE"===t.firstChild.nodeName},replacement:function(t,e,r){for(var n,i=((e.firstChild.getAttribute("class")||"").match(/language-(\S+)/)||[null,""])[1],o=e.firstChild.textContent,s=r.fence.charAt(0),a=3,c=new RegExp("^"+s+"{3,}","gm");n=c.exec(o);)n[0].length>=a&&(a=n[0].length+1);var u=ua(s,a);return"\n\n"+u+i+"\n"+o.replace(/\n$/,"")+"\n"+u+"\n\n"}},ya.horizontalRule={filter:"hr",replacement:function(t,e,r){return"\n\n"+r.hr+"\n\n"}},ya.inlineLink={filter:function(t,e){return"inlined"===e.linkStyle&&"A"===t.nodeName&&t.getAttribute("href")},replacement:function(t,e){var r=e.getAttribute("href");r&&(r=r.replace(/([()])/g,"\\$1"));var n=va(e.getAttribute("title"));return n&&(n=' "'+n.replace(/"/g,'\\"')+'"'),"["+t+"]("+r+n+")"}},ya.referenceLink={filter:function(t,e){return"referenced"===e.linkStyle&&"A"===t.nodeName&&t.getAttribute("href")},replacement:function(t,e,r){var n,i,o=e.getAttribute("href"),s=va(e.getAttribute("title"));switch(s&&(s=' "'+s+'"'),r.linkReferenceStyle){case"collapsed":n="["+t+"][]",i="["+t+"]: "+o+s;break;case"shortcut":n="["+t+"]",i="["+t+"]: "+o+s;break;default:var a=this.references.length+1;n="["+t+"]["+a+"]",i="["+a+"]: "+o+s}return this.references.push(i),n},references:[],append:function(t){var e="";return this.references.length&&(e="\n\n"+this.references.join("\n")+"\n\n",this.references=[]),e}},ya.emphasis={filter:["em","i"],replacement:function(t,e,r){return t.trim()?r.emDelimiter+t+r.emDelimiter:""}},ya.strong={filter:["strong","b"],replacement:function(t,e,r){return t.trim()?r.strongDelimiter+t+r.strongDelimiter:""}},ya.code={filter:function(t){var e=t.previousSibling||t.nextSibling,r="PRE"===t.parentNode.nodeName&&!e;return"CODE"===t.nodeName&&!r},replacement:function(t){if(!t)return"";t=t.replace(/\r?\n|\r/g," ");for(var e=/^`|^ .*?[^ ].* $|`$/.test(t)?" ":"",r="`",n=t.match(/`+/gm)||[];-1!==n.indexOf(r);)r+="`";return r+e+t+e+r}},ya.image={filter:"img",replacement:function(t,e){var r=va(e.getAttribute("alt")),n=e.getAttribute("src")||"",i=va(e.getAttribute("title"));return n?"!["+r+"]("+n+(i?' "'+i+'"':"")+")":""}},ba.prototype={add:function(t,e){this.array.unshift(e)},keep:function(t){this._keep.unshift({filter:t,replacement:this.keepReplacement})},remove:function(t){this._remove.unshift({filter:t,replacement:function(){return""}})},forNode:function(t){return t.isBlank?this.blankRule:(e=wa(this.array,t,this.options))||(e=wa(this._keep,t,this.options))||(e=wa(this._remove,t,this.options))?e:this.defaultRule;var e},forEach:function(t){for(var e=0;e<this.array.length;e++)t(this.array[e],e)}};var Aa="undefined"!=typeof window?window:{};var Ea,Ca=function(){var t=Aa.DOMParser,e=!1;try{(new t).parseFromString("","text/html")&&(e=!0)}catch(t){}return e}()?Aa.DOMParser:function(){var t=function(){};return!function(){var t=!1;try{document.implementation.createHTMLDocument("").open()}catch(e){Aa.ActiveXObject&&(t=!0)}return t}()?t.prototype.parseFromString=function(t){var e=document.implementation.createHTMLDocument("");return e.open(),e.write(t),e.close(),e}:t.prototype.parseFromString=function(t){var e=new window.ActiveXObject("htmlfile");return e.designMode="on",e.open(),e.write(t),e.close(),e},t}();function Ta(t,e){var r;"string"==typeof t?r=(Ea=Ea||new Ca).parseFromString('<x-turndown id="turndown-root">'+t+"</x-turndown>","text/html").getElementById("turndown-root"):r=t.cloneNode(!0);return function(t){var e=t.element,r=t.isBlock,n=t.isVoid,i=t.isPre||function(t){return"PRE"===t.nodeName};if(e.firstChild&&!i(e)){for(var o=null,s=!1,a=null,c=_a(a,e,i);c!==e;){if(3===c.nodeType||4===c.nodeType){var u=c.data.replace(/[ \r\n\t]+/g," ");if(o&&!/ $/.test(o.data)||s||" "!==u[0]||(u=u.substr(1)),!u){c=xa(c);continue}c.data=u,o=c}else{if(1!==c.nodeType){c=xa(c);continue}r(c)||"BR"===c.nodeName?(o&&(o.data=o.data.replace(/ $/,"")),o=null,s=!1):n(c)||i(c)?(o=null,s=!0):o&&(s=!1)}var l=_a(a,c,i);a=c,c=l}o&&(o.data=o.data.replace(/ $/,""),o.data||xa(o))}}({element:r,isBlock:ha,isVoid:da,isPre:e.preformattedCode?ka:null}),r}function ka(t){return"PRE"===t.nodeName||"CODE"===t.nodeName}function Na(t,e){return t.isBlock=ha(t),t.isCode="CODE"===t.nodeName||t.parentNode.isCode,t.isBlank=function(t){return!da(t)&&!function(t){return ga(t,pa)}(t)&&/^\s*$/i.test(t.textContent)&&!function(t){return ma(t,fa)}(t)&&!function(t){return ma(t,pa)}(t)}(t),t.flankingWhitespace=function(t,e){if(t.isBlock||e.preformattedCode&&t.isCode)return{leading:"",trailing:""};var r=(n=t.textContent,i=n.match(/^(([ \t\r\n]*)(\s*))(?:(?=\S)[\s\S]*\S)?((\s*?)([ \t\r\n]*))$/),{leading:i[1],leadingAscii:i[2],leadingNonAscii:i[3],trailing:i[4],trailingNonAscii:i[5],trailingAscii:i[6]});var n,i;r.leadingAscii&&Oa("left",t,e)&&(r.leading=r.leadingNonAscii);r.trailingAscii&&Oa("right",t,e)&&(r.trailing=r.trailingNonAscii);return{leading:r.leading,trailing:r.trailing}}(t,e),t}function Oa(t,e,r){var n,i,o;return"left"===t?(n=e.previousSibling,i=/ $/):(n=e.nextSibling,i=/^ /),n&&(3===n.nodeType?o=i.test(n.nodeValue):r.preformattedCode&&"CODE"===n.nodeName?o=!1:1!==n.nodeType||ha(n)||(o=i.test(n.textContent))),o}var Ra=Array.prototype.reduce,La=[[/\\/g,"\\\\"],[/\*/g,"\\*"],[/^-/g,"\\-"],[/^\+ /g,"\\+ "],[/^(=+)/g,"\\$1"],[/^(#{1,6}) /g,"\\$1 "],[/`/g,"\\`"],[/^~~~/g,"\\~~~"],[/\[/g,"\\["],[/\]/g,"\\]"],[/^>/g,"\\>"],[/_/g,"\\_"],[/^(\d+)\. /g,"$1\\. "]];function Ia(t){if(!(this instanceof Ia))return new Ia(t);var e={rules:ya,headingStyle:"setext",hr:"* * *",bulletListMarker:"*",codeBlockStyle:"indented",fence:"```",emDelimiter:"_",strongDelimiter:"**",linkStyle:"inlined",linkReferenceStyle:"full",br:"  ",preformattedCode:!1,blankReplacement:function(t,e){return e.isBlock?"\n\n":""},keepReplacement:function(t,e){return e.isBlock?"\n\n"+e.outerHTML+"\n\n":e.outerHTML},defaultReplacement:function(t,e){return e.isBlock?"\n\n"+t+"\n\n":t}};this.options=function(t){for(var e=1;e<arguments.length;e++){var r=arguments[e];for(var n in r)r.hasOwnProperty(n)&&(t[n]=r[n])}return t}({},e,t),this.rules=new ba(this.options)}function Pa(t){var e=this;return Ra.call(t.childNodes,(function(t,r){var n="";return 3===(r=new Na(r,e.options)).nodeType?n=r.isCode?r.nodeValue:e.escape(r.nodeValue):1===r.nodeType&&(n=Da.call(e,r)),ja(t,n)}),"")}function Ma(t){var e=this;return this.rules.forEach((function(r){"function"==typeof r.append&&(t=ja(t,r.append(e.options)))})),t.replace(/^[\t\r\n]+/,"").replace(/[\t\r\n\s]+$/,"")}function Da(t){var e=this.rules.forNode(t),r=Pa.call(this,t),n=t.flankingWhitespace;return(n.leading||n.trailing)&&(r=r.trim()),n.leading+e.replacement(r,t,this.options)+n.trailing}function ja(t,e){var r=function(t){for(var e=t.length;e>0&&"\n"===t[e-1];)e--;return t.substring(0,e)}(t),n=e.replace(/^\n*/,""),i=Math.max(t.length-r.length,e.length-n.length);return r+"\n\n".substring(0,i)+n}Ia.prototype={turndown:function(t){if(!function(t){return null!=t&&("string"==typeof t||t.nodeType&&(1===t.nodeType||9===t.nodeType||11===t.nodeType))}(t))throw new TypeError(t+" is not a string, or an element/document/fragment node.");if(""===t)return"";var e=Pa.call(this,new Ta(t,this.options));return Ma.call(this,e)},use:function(t){if(Array.isArray(t))for(var e=0;e<t.length;e++)this.use(t[e]);else{if("function"!=typeof t)throw new TypeError("plugin must be a Function or an Array of Functions");t(this)}return this},addRule:function(t,e){return this.rules.add(t,e),this},keep:function(t){return this.rules.keep(t),this},remove:function(t){return this.rules.remove(t),this},escape:function(t){return La.reduce((function(t,e){return t.replace(e[0],e[1])}),t)}};const Fa=Ia,qa=(Ba=globalThis,Ua={},new Proxy(Ba,{get:(t,e,r)=>e in Ua?Ua[e]:Ba[e],set:(t,e,r)=>(e in Ua&&delete Ua[e],Ba[e]=r,!0),deleteProperty(t,e){let r=!1;return e in Ua&&(delete Ua[e],r=!0),e in Ba&&(delete Ba[e],r=!0),r},ownKeys(t){const e=Reflect.ownKeys(Ba),r=Reflect.ownKeys(Ua),n=new Set(r);return[...e.filter((t=>!n.has(t))),...r]},defineProperty:(t,e,r)=>(e in Ua&&delete Ua[e],Reflect.defineProperty(Ba,e,r),!0),getOwnPropertyDescriptor:(t,e)=>e in Ua?Reflect.getOwnPropertyDescriptor(Ua,e):Reflect.getOwnPropertyDescriptor(Ba,e),has:(t,e)=>e in Ua||e in Ba}));var Ba,Ua;const{Deno:Va}=qa,Ha="boolean"!=typeof Va?.noColor||Va.noColor;let Ga=!Ha;function $a(t,e){return{open:`[${t.join(";")}m`,close:`[${e}m`,regexp:new RegExp(`\\x1b\\[${e}m`,"g")}}function Wa(t,e){return Ga?`${e.open}${t.replace(e.regexp,e.open)}${e.close}`:t}function za(t){return Wa(t,$a([1],22))}function Ka(t){return Wa(t,$a([31],39))}function Ya(t){return Wa(t,$a([32],39))}function Qa(t){return Wa(t,$a([37],39))}function Za(t){return function(t){return Wa(t,$a([90],39))}(t)}new RegExp(["[\\u001B\\u009B][[\\]()#;?]*(?:(?:(?:(?:;[-a-zA-Z\\d\\/#&.:=?%@~_]+)*|[a-zA-Z\\d]+(?:;[-a-zA-Z\\d\\/#&.:=?%@~_]*)*)?\\u0007)","(?:(?:\\d{1,4}(?:;\\d{0,4})*)?[\\dA-PR-TZcf-nq-uy=><~]))"].join("|"),"g");var Ja;!function(t){t.removed="removed",t.common="common",t.added="added"}(Ja||(Ja={}));const Xa=1,tc=2,ec=3;function rc(t,e,r){const n=[];if(0===t.length||0===e.length)return[];for(let i=0;i<Math.min(t.length,e.length);i+=1){if(t[r?t.length-i-1:i]!==e[r?e.length-i-1:i])return n;n.push(t[r?t.length-i-1:i])}return n}function nc(t,e){const r=rc(t,e),n=rc(t.slice(r.length),e.slice(r.length),!0).reverse();t=n.length?t.slice(r.length,-n.length):t.slice(r.length);const i=(e=n.length?e.slice(r.length,-n.length):e.slice(r.length)).length>t.length;[t,e]=i?[e,t]:[t,e];const o=t.length,s=e.length;if(!(o||s||n.length||r.length))return[];if(!s)return[...r.map((t=>({type:Ja.common,value:t}))),...t.map((t=>({type:i?Ja.added:Ja.removed,value:t}))),...n.map((t=>({type:Ja.common,value:t})))];const a=s,c=o-s,u=o+s+1,l=Array.from({length:u},(()=>({y:-1,id:-1}))),h=new Uint32Array(2*(o*s+u+1)),f=h.length/2;let d=0,p=-1;function g(t,e,r,n,i,o){const s=i.length,a=o.length;if(t<-a||s<t)return{y:-1,id:-1};const c=function(t,e,r,n){if(t&&-1===t.y&&e&&-1===e.y)return{y:0,id:0};if(e&&-1===e.y||r===n||(t&&t.y)>(e&&e.y)+1){const e=t.id;return d++,h[d]=e,h[d+f]=ec,{y:t.y,id:d}}{const t=e.id;return d++,h[d]=t,h[d+f]=Xa,{y:e.y+1,id:d}}}(e,r,t,s);for(;c.y+t<s&&c.y<a&&i[c.y+t]===o[c.y];){const t=c.id;d++,c.id=d,c.y+=1,h[d]=t,h[d+f]=tc}return c}for(;l[c+a].y<s;){p+=1;for(let r=-p;r<c;++r)l[r+a]=g(r,l[r-1+a],l[r+1+a],0,t,e);for(let r=c+p;r>c;--r)l[r+a]=g(r,l[r-1+a],l[r+1+a],0,t,e);l[c+a]=g(c,l[c-1+a],l[c+1+a],0,t,e)}return[...r.map((t=>({type:Ja.common,value:t}))),...function(t,e,r,n){const i=[];let o=t.length-1,s=e.length-1,a=h[r.id],c=h[r.id+f];for(;a||c;){const r=a;c===Xa?(i.unshift({type:n?Ja.removed:Ja.added,value:e[s]}),s-=1):c===ec?(i.unshift({type:n?Ja.added:Ja.removed,value:t[o]}),o-=1):(i.unshift({type:Ja.common,value:t[o]}),o-=1,s-=1),a=h[r],c=h[r+f]}return i}(t,e,l[c+a],i),...n.map((t=>({type:Ja.common,value:t})))]}const ic="[Cannot display]";class oc extends Error{name="AssertionError";constructor(t){super(t)}}function sc(t){const{Deno:e}=qa;return"function"==typeof e?.inspect?e.inspect(t,{depth:1/0,sorted:!0,trailingComma:!0,compact:!1,iterableLimit:1/0}):`"${String(t).replace(/(?=["\\])/g,"\\")}"`}function ac(t,{background:e=!1}={}){switch(t){case Ja.added:return t=>e?Wa(Qa(t),$a([42],49)):Ya(za(t));case Ja.removed:return t=>e?Wa(Qa(t),$a([41],49)):Ka(za(t));default:return Qa}}function cc(t,{stringDiff:e=!1}={}){const r=[],n=[];return r.push(""),r.push(""),r.push(`    ${Za(za("[Diff]"))} ${Ka(za("Actual"))} / ${Ya(za("Expected"))}`),r.push(""),r.push(""),t.forEach((t=>{const e=ac(t.type),r=t.details?.map((t=>t.type!==Ja.common?ac(t.type,{background:!0})(t.value):t.value)).join("")??t.value;n.push(e(`${function(t){switch(t){case Ja.added:return"+   ";case Ja.removed:return"-   ";default:return"    "}}(t.type)}${r}`))})),r.push(...e?[n.join("")]:n),r.push(""),r}function uc(t){return[Symbol.iterator,"size"].every((e=>e in t))}function lc(t,e){const r=new Map;return function t(e,n){if(e&&n&&(e instanceof RegExp&&n instanceof RegExp||e instanceof URL&&n instanceof URL))return String(e)===String(n);if(e instanceof Date&&n instanceof Date){const t=e.getTime(),r=n.getTime();return!(!Number.isNaN(t)||!Number.isNaN(r))||t===r}if("number"==typeof e&&"number"==typeof n)return Number.isNaN(e)&&Number.isNaN(n)||e===n;if(Object.is(e,n))return!0;if(e&&"object"==typeof e&&n&&"object"==typeof n){if(e&&n&&!function(t,e){return t.constructor===e.constructor||t.constructor===Object&&!e.constructor||!t.constructor&&e.constructor===Object}(e,n))return!1;if(e instanceof WeakMap||n instanceof WeakMap){if(!(e instanceof WeakMap&&n instanceof WeakMap))return!1;throw new TypeError("cannot compare WeakMap instances")}if(e instanceof WeakSet||n instanceof WeakSet){if(!(e instanceof WeakSet&&n instanceof WeakSet))return!1;throw new TypeError("cannot compare WeakSet instances")}if(r.get(e)===n)return!0;if(Object.keys(e||{}).length!==Object.keys(n||{}).length)return!1;if(uc(e)&&uc(n)){if(e.size!==n.size)return!1;let r=e.size;for(const[i,o]of e.entries())for(const[e,s]of n.entries())(i===o&&e===s&&t(i,e)||t(i,e)&&t(o,s))&&r--;return 0===r}const i={...e,...n};for(const r of[...Object.getOwnPropertyNames(i),...Object.getOwnPropertySymbols(i)]){if(!t(e&&e[r],n&&n[r]))return!1;if(r in e&&!(r in n)||r in n&&!(r in e))return!1}return r.set(e,n),!(e instanceof WeakRef||n instanceof WeakRef)||e instanceof WeakRef&&n instanceof WeakRef&&t(e.deref(),n.deref())}return!1}(t,e)}function hc(t,e=""){if(!t)throw new oc(e)}function fc(t,e,r){if(lc(t,e))return;let n="";const i=sc(t),o=sc(e);try{const r="string"==typeof t&&"string"==typeof e,s=r?function(t,e){function r(t){return t.replaceAll("\b","\\b").replaceAll("\f","\\f").replaceAll("\t","\\t").replaceAll("\v","\\v").replaceAll(/\r\n|\r|\n/g,(t=>"\r"===t?"\\r":"\n"===t?"\\n\n":"\\r\\n\r\n"))}function n(t,{wordDiff:e=!1}={}){if(e){const e=t.split(/([^\S\r\n]+|[()[\]{}'"\r\n]|\b)/),r=/^[a-zA-Z\u{C0}-\u{FF}\u{D8}-\u{F6}\u{F8}-\u{2C6}\u{2C8}-\u{2D7}\u{2DE}-\u{2FF}\u{1E00}-\u{1EFF}]+$/u;for(let t=0;t<e.length-1;t++)!e[t+1]&&e[t+2]&&r.test(e[t])&&r.test(e[t+2])&&(e[t]+=e[t+2],e.splice(t+1,2),t--);return e.filter((t=>t))}{const e=[],r=t.split(/(\n|\r\n)/);r[r.length-1]||r.pop();for(let t=0;t<r.length;t++)t%2?e[e.length-1]+=r[t]:e.push(r[t]);return e}}function i(t,e){return e.filter((({type:e})=>e===t.type||e===Ja.common)).map(((t,e,r)=>(t.type===Ja.common&&r[e-1]&&r[e-1]?.type===r[e+1]?.type&&/\s+/.test(t.value)&&(t.type=r[e-1].type),t)))}const o=nc(n(`${r(t)}\n`),n(`${r(e)}\n`)),s=[],a=[];for(const t of o)t.type===Ja.added&&s.push(t),t.type===Ja.removed&&a.push(t);const c=s.length<a.length?s:a,u=c===a?s:a;for(const t of c){let e,r=[];for(;u.length&&(e=u.shift(),r=nc(n(t.value,{wordDiff:!0}),n(e?.value??"",{wordDiff:!0})),!r.some((({type:t,value:e})=>t===Ja.common&&e.trim().length))););t.details=i(t,r),e&&(e.details=i(e,r))}return o}(t,e):nc(i.split("\n"),o.split("\n"));n=`Values are not equal:\n${cc(s,{stringDiff:r}).join("\n")}`}catch{n=`\n${Ka(ic)} + \n\n`}throw r&&(n=r),new oc(n)}let dc;let pc=null;const gc={NONE:0,UNWINDING:1,REWINDING:2};function mc(){fc(dc.asyncify_get_state(),gc.NONE)}const yc=new Map;function vc(t,e){dc.asyncify_get_state()!==gc.REWINDING?(mc(),fc(t%4,0),(null!==pc&&pc.buffer===dc.memory.buffer||(pc=new Int32Array(dc.memory.buffer)),pc).set([t+8,t+1024],t/4),dc.asyncify_start_unwind(t),hc(!yc.has(t)),yc.set(t,e)):dc.asyncify_stop_rewind()}async function bc(t,e,...r){const n=t.asyncifyStackPtr;mc();let i=e(...r);for(;dc.asyncify_get_state()===gc.UNWINDING;)dc.asyncify_stop_unwind(),mc(),hc(yc.has(n)),await yc.get(n),yc.delete(n),mc(),dc.asyncify_start_rewind(n),i=e();return mc(),i}let wc;const Sc=new Array(32).fill(void 0);function xc(t){return Sc[t]}Sc.push(void 0,null,!0,!1);let _c=Sc.length;function Ac(t){const e=xc(t);return function(t){t<36||(Sc[t]=_c,_c=t)}(t),e}let Ec=new TextDecoder("utf-8",{ignoreBOM:!0,fatal:!0});Ec.decode();let Cc=null;function Tc(){return null!==Cc&&Cc.buffer===wc.memory.buffer||(Cc=new Uint8Array(wc.memory.buffer)),Cc}function kc(t,e){return Ec.decode(Tc().subarray(t,t+e))}function Nc(t){_c===Sc.length&&Sc.push(Sc.length+1);const e=_c;return _c=Sc[e],Sc[e]=t,e}function Oc(t){const e=typeof t;if("number"==e||"boolean"==e||null==t)return`${t}`;if("string"==e)return`"${t}"`;if("symbol"==e){const e=t.description;return null==e?"Symbol":`Symbol(${e})`}if("function"==e){const e=t.name;return"string"==typeof e&&e.length>0?`Function(${e})`:"Function"}if(Array.isArray(t)){const e=t.length;let r="[";e>0&&(r+=Oc(t[0]));for(let n=1;n<e;n++)r+=", "+Oc(t[n]);return r+="]",r}const r=/\[object ([^\]]+)\]/.exec(toString.call(t));let n;if(!(r.length>1))return toString.call(t);if(n=r[1],"Object"==n)try{return"Object("+JSON.stringify(t)+")"}catch(t){return"Object"}return t instanceof Error?`${t.name}: ${t.message}\n${t.stack}`:n}let Rc=0,Lc=new TextEncoder("utf-8");const Ic="function"==typeof Lc.encodeInto?function(t,e){return Lc.encodeInto(t,e)}:function(t,e){const r=Lc.encode(t);return e.set(r),{read:t.length,written:r.length}};function Pc(t,e,r){if(void 0===r){const r=Lc.encode(t),n=e(r.length);return Tc().subarray(n,n+r.length).set(r),Rc=r.length,n}let n=t.length,i=e(n);const o=Tc();let s=0;for(;s<n;s++){const e=t.charCodeAt(s);if(e>127)break;o[i+s]=e}if(s!==n){0!==s&&(t=t.slice(s)),i=r(i,n,n=s+3*t.length);const e=Tc().subarray(i+s,i+n);s+=Ic(t,e).written}return Rc=s,i}let Mc=null;function Dc(){return null!==Mc&&Mc.buffer===wc.memory.buffer||(Mc=new Int32Array(wc.memory.buffer)),Mc}function jc(t){return null==t}let Fc=32;class qc{static __wrap(t){const e=Object.create(qc.prototype);return e.ptr=t,e}__destroy_into_raw(){const t=this.ptr;return this.ptr=0,t}free(){const t=this.__destroy_into_raw();wc.__wbg_comment_free(t)}before(t,e){var r=Pc(t,wc.__wbindgen_malloc,wc.__wbindgen_realloc),n=Rc;return wc.comment_before(this.ptr,r,n,jc(e)?0:Nc(e)),this}after(t,e){var r=Pc(t,wc.__wbindgen_malloc,wc.__wbindgen_realloc),n=Rc;return wc.comment_after(this.ptr,r,n,jc(e)?0:Nc(e)),this}replace(t,e){var r=Pc(t,wc.__wbindgen_malloc,wc.__wbindgen_realloc),n=Rc;return wc.comment_replace(this.ptr,r,n,jc(e)?0:Nc(e)),this}remove(){return wc.comment_remove(this.ptr),this}get removed(){return 0!==wc.comment_removed(this.ptr)}get text(){try{const r=wc.__wbindgen_add_to_stack_pointer(-16);wc.comment_text(r,this.ptr);var t=Dc()[r/4+0],e=Dc()[r/4+1];return kc(t,e)}finally{wc.__wbindgen_add_to_stack_pointer(16),wc.__wbindgen_free(t,e)}}set text(t){var e=Pc(t,wc.__wbindgen_malloc,wc.__wbindgen_realloc),r=Rc;wc.comment_set_text(this.ptr,e,r)}}class Bc{static __wrap(t){const e=Object.create(Bc.prototype);return e.ptr=t,e}__destroy_into_raw(){const t=this.ptr;return this.ptr=0,t}free(){const t=this.__destroy_into_raw();wc.__wbg_doctype_free(t)}get name(){return Ac(wc.doctype_name(this.ptr))}get publicId(){return Ac(wc.doctype_public_id(this.ptr))}get systemId(){return Ac(wc.doctype_system_id(this.ptr))}}class Uc{static __wrap(t){const e=Object.create(Uc.prototype);return e.ptr=t,e}__destroy_into_raw(){const t=this.ptr;return this.ptr=0,t}free(){const t=this.__destroy_into_raw();wc.__wbg_documentend_free(t)}append(t,e){var r=Pc(t,wc.__wbindgen_malloc,wc.__wbindgen_realloc),n=Rc;return wc.documentend_append(this.ptr,r,n,jc(e)?0:Nc(e)),this}}class Vc{static __wrap(t){const e=Object.create(Vc.prototype);return e.ptr=t,e}__destroy_into_raw(){const t=this.ptr;return this.ptr=0,t}free(){const t=this.__destroy_into_raw();wc.__wbg_element_free(t)}before(t,e){var r=Pc(t,wc.__wbindgen_malloc,wc.__wbindgen_realloc),n=Rc;return wc.element_before(this.ptr,r,n,jc(e)?0:Nc(e)),this}after(t,e){var r=Pc(t,wc.__wbindgen_malloc,wc.__wbindgen_realloc),n=Rc;return wc.element_after(this.ptr,r,n,jc(e)?0:Nc(e)),this}replace(t,e){var r=Pc(t,wc.__wbindgen_malloc,wc.__wbindgen_realloc),n=Rc;return wc.element_replace(this.ptr,r,n,jc(e)?0:Nc(e)),this}remove(){return wc.element_remove(this.ptr),this}get removed(){return 0!==wc.element_removed(this.ptr)}get tagName(){try{const r=wc.__wbindgen_add_to_stack_pointer(-16);wc.element_tag_name(r,this.ptr);var t=Dc()[r/4+0],e=Dc()[r/4+1];return kc(t,e)}finally{wc.__wbindgen_add_to_stack_pointer(16),wc.__wbindgen_free(t,e)}}set tagName(t){var e=Pc(t,wc.__wbindgen_malloc,wc.__wbindgen_realloc),r=Rc;wc.element_set_tag_name(this.ptr,e,r)}get namespaceURI(){return Ac(wc.element_namespace_uri(this.ptr))}get attributes(){return Ac(wc.element_attributes(this.ptr))[Symbol.iterator]()}getAttribute(t){var e=Pc(t,wc.__wbindgen_malloc,wc.__wbindgen_realloc),r=Rc;return Ac(wc.element_getAttribute(this.ptr,e,r))}hasAttribute(t){var e=Pc(t,wc.__wbindgen_malloc,wc.__wbindgen_realloc),r=Rc;return 0!==wc.element_hasAttribute(this.ptr,e,r)}setAttribute(t,e){var r=Pc(t,wc.__wbindgen_malloc,wc.__wbindgen_realloc),n=Rc,i=Pc(e,wc.__wbindgen_malloc,wc.__wbindgen_realloc),o=Rc;return wc.element_setAttribute(this.ptr,r,n,i,o),this}removeAttribute(t){var e=Pc(t,wc.__wbindgen_malloc,wc.__wbindgen_realloc),r=Rc;return wc.element_removeAttribute(this.ptr,e,r),this}prepend(t,e){var r=Pc(t,wc.__wbindgen_malloc,wc.__wbindgen_realloc),n=Rc;return wc.element_prepend(this.ptr,r,n,jc(e)?0:Nc(e)),this}append(t,e){var r=Pc(t,wc.__wbindgen_malloc,wc.__wbindgen_realloc),n=Rc;return wc.element_append(this.ptr,r,n,jc(e)?0:Nc(e)),this}setInnerContent(t,e){var r=Pc(t,wc.__wbindgen_malloc,wc.__wbindgen_realloc),n=Rc;return wc.element_setInnerContent(this.ptr,r,n,jc(e)?0:Nc(e)),this}removeAndKeepContent(){return wc.element_removeAndKeepContent(this.ptr),this}onEndTag(t){wc.element_onEndTag(this.ptr,Nc(t.bind(this)))}}class Hc{static __wrap(t){const e=Object.create(Hc.prototype);return e.ptr=t,e}__destroy_into_raw(){const t=this.ptr;return this.ptr=0,t}free(){const t=this.__destroy_into_raw();wc.__wbg_endtag_free(t)}get name(){try{const r=wc.__wbindgen_add_to_stack_pointer(-16);wc.endtag_name(r,this.ptr);var t=Dc()[r/4+0],e=Dc()[r/4+1];return kc(t,e)}finally{wc.__wbindgen_add_to_stack_pointer(16),wc.__wbindgen_free(t,e)}}set name(t){var e=Pc(t,wc.__wbindgen_malloc,wc.__wbindgen_realloc),r=Rc;wc.endtag_set_name(this.ptr,e,r)}before(t,e){var r=Pc(t,wc.__wbindgen_malloc,wc.__wbindgen_realloc),n=Rc;return wc.endtag_before(this.ptr,r,n,jc(e)?0:Nc(e)),this}after(t,e){var r=Pc(t,wc.__wbindgen_malloc,wc.__wbindgen_realloc),n=Rc;return wc.endtag_after(this.ptr,r,n,jc(e)?0:Nc(e)),this}remove(){return wc.endtag_remove(this.ptr),this}}class Gc{static __wrap(t){const e=Object.create(Gc.prototype);return e.ptr=t,e}__destroy_into_raw(){const t=this.ptr;return this.ptr=0,t}free(){const t=this.__destroy_into_raw();wc.__wbg_htmlrewriter_free(t)}constructor(t,e){try{var r=wc.htmlrewriter_new(function(t){if(1==Fc)throw new Error("out of js stack");return Sc[--Fc]=t,Fc}(t),jc(e)?0:Nc(e));return Gc.__wrap(r)}finally{Sc[Fc++]=void 0}}on(t,e){var r=Pc(t,wc.__wbindgen_malloc,wc.__wbindgen_realloc),n=Rc;return wc.htmlrewriter_on(this.ptr,r,n,Nc(e)),this}onDocument(t){return wc.htmlrewriter_onDocument(this.ptr,Nc(t)),this}async write(t){var e=function(t,e){const r=e(1*t.length);return Tc().set(t,r/1),Rc=t.length,r}(t,wc.__wbindgen_malloc),r=Rc;await bc(this,wc.htmlrewriter_write,this.ptr,e,r)}async end(){await bc(this,wc.htmlrewriter_end,this.ptr)}get asyncifyStackPtr(){return wc.htmlrewriter_asyncify_stack_ptr(this.ptr)}}class $c{static __wrap(t){const e=Object.create($c.prototype);return e.ptr=t,e}__destroy_into_raw(){const t=this.ptr;return this.ptr=0,t}free(){const t=this.__destroy_into_raw();wc.__wbg_textchunk_free(t)}before(t,e){var r=Pc(t,wc.__wbindgen_malloc,wc.__wbindgen_realloc),n=Rc;return wc.textchunk_before(this.ptr,r,n,jc(e)?0:Nc(e)),this}after(t,e){var r=Pc(t,wc.__wbindgen_malloc,wc.__wbindgen_realloc),n=Rc;return wc.textchunk_after(this.ptr,r,n,jc(e)?0:Nc(e)),this}replace(t,e){var r=Pc(t,wc.__wbindgen_malloc,wc.__wbindgen_realloc),n=Rc;return wc.textchunk_replace(this.ptr,r,n,jc(e)?0:Nc(e)),this}remove(){return wc.textchunk_remove(this.ptr),this}get removed(){return 0!==wc.textchunk_removed(this.ptr)}get text(){try{const r=wc.__wbindgen_add_to_stack_pointer(-16);wc.textchunk_text(r,this.ptr);var t=Dc()[r/4+0],e=Dc()[r/4+1];return kc(t,e)}finally{wc.__wbindgen_add_to_stack_pointer(16),wc.__wbindgen_free(t,e)}}get lastInTextNode(){return 0!==wc.textchunk_last_in_text_node(this.ptr)}}const Wc=async function t(e){if(void 0===e)throw new Error("Initializing html_rewriter needs input");const r={wbg:{}};r.wbg.__wbg_endtag_new=function(t){return Nc(Hc.__wrap(t))},r.wbg.__wbg_awaitPromise_39a1101fd8518869=function(t,e){vc(t,xc(e))},r.wbg.__wbindgen_object_drop_ref=function(t){Ac(t)},r.wbg.__wbg_html_cd9a0f328493678b=function(t){var e=xc(t).html;return jc(e)?16777215:e?1:0},r.wbg.__wbindgen_string_new=function(t,e){return Nc(kc(t,e))},r.wbg.__wbg_documentend_new=function(t){return Nc(Uc.__wrap(t))},r.wbg.__wbindgen_object_clone_ref=function(t){return Nc(xc(t))},r.wbg.__wbg_element_c38470ed972aea27=function(t){var e=xc(t).element;return jc(e)?0:Nc(e)},r.wbg.__wbg_comments_ba86bc03331d9378=function(t){var e=xc(t).comments;return jc(e)?0:Nc(e)},r.wbg.__wbg_text_7800bf26cb443911=function(t){var e=xc(t).text;return jc(e)?0:Nc(e)},r.wbg.__wbg_doctype_ac58c0964a59b61b=function(t){var e=xc(t).doctype;return jc(e)?0:Nc(e)},r.wbg.__wbg_comments_94d876f6c0502e82=function(t){var e=xc(t).comments;return jc(e)?0:Nc(e)},r.wbg.__wbg_text_4606a16c30e4ae91=function(t){var e=xc(t).text;return jc(e)?0:Nc(e)},r.wbg.__wbg_end_34efb9402eac8a4e=function(t){var e=xc(t).end;return jc(e)?0:Nc(e)},r.wbg.__wbg_element_new=function(t){return Nc(Vc.__wrap(t))},r.wbg.__wbg_comment_new=function(t){return Nc(qc.__wrap(t))},r.wbg.__wbg_textchunk_new=function(t){return Nc($c.__wrap(t))},r.wbg.__wbg_doctype_new=function(t){return Nc(Bc.__wrap(t))},r.wbg.__wbg_enableEsiTags_de6b91cc61a25874=function(t){var e=xc(t).enableEsiTags;return jc(e)?16777215:e?1:0},r.wbg.__wbg_String_60c4ba333b5ca1c6=function(t,e){var r=Pc(String(xc(e)),wc.__wbindgen_malloc,wc.__wbindgen_realloc),n=Rc;Dc()[t/4+1]=n,Dc()[t/4+0]=r},r.wbg.__wbg_new_4fee7e2900033464=function(){return Nc(new Array)},r.wbg.__wbg_push_ba9b5e3c25cff8f9=function(t,e){return xc(t).push(xc(e))},r.wbg.__wbg_call_6c4ea719458624eb=function(){return function(t,e){try{return t.apply(this,e)}catch(t){wc.__wbindgen_exn_store(Nc(t))}}((function(t,e,r){return Nc(xc(t).call(xc(e),xc(r)))}),arguments)},r.wbg.__wbg_new_917809a3e20a4b00=function(t,e){return Nc(new TypeError(kc(t,e)))},r.wbg.__wbg_instanceof_Promise_c6535fc791fcc4d2=function(t){var e=xc(t);return e instanceof Promise||"[object Promise]"===Object.prototype.toString.call(e)},r.wbg.__wbg_buffer_89a8560ab6a3d9c6=function(t){return Nc(xc(t).buffer)},r.wbg.__wbg_newwithbyteoffsetandlength_e45d8b33c02dc3b5=function(t,e,r){return Nc(new Uint8Array(xc(t),e>>>0,r>>>0))},r.wbg.__wbg_new_bd2e1d010adb8a1a=function(t){return Nc(new Uint8Array(xc(t)))},r.wbg.__wbindgen_debug_string=function(t,e){var r=Pc(Oc(xc(e)),wc.__wbindgen_malloc,wc.__wbindgen_realloc),n=Rc;Dc()[t/4+1]=n,Dc()[t/4+0]=r},r.wbg.__wbindgen_throw=function(t,e){throw new Error(kc(t,e))},r.wbg.__wbindgen_rethrow=function(t){throw Ac(t)},r.wbg.__wbindgen_memory=function(){return Nc(wc.memory)},("string"==typeof e||"function"==typeof Request&&e instanceof Request||"function"==typeof URL&&e instanceof URL)&&(e=fetch(e));const{instance:n,module:i}=await async function(t,e){if("function"==typeof Response&&t instanceof Response){if("function"==typeof WebAssembly.instantiateStreaming)try{return await WebAssembly.instantiateStreaming(t,e)}catch(e){if("application/wasm"==t.headers.get("Content-Type"))throw e;console.warn("`WebAssembly.instantiateStreaming` failed because your server does not serve wasm with `application/wasm` MIME type. Falling back to `WebAssembly.instantiate` which is slower. Original error:\n",e)}const r=await t.arrayBuffer();return await WebAssembly.instantiate(r,e)}{const r=await WebAssembly.instantiate(t,e);return r instanceof WebAssembly.Instance?{instance:r,module:t}:r}}(await e,r);return wc=n.exports,dc=wc,t.__wbindgen_wasm_module=i,wc};var zc,Kc,Yc,Qc,Zc,Jc=function(t,e,r,n,i){if("m"===n)throw new TypeError("Private method is not writable");if("a"===n&&!i)throw new TypeError("Private accessor was defined without a setter");if("function"==typeof e?t!==e||!i:!e.has(t))throw new TypeError("Cannot write private member to an object whose class did not declare it");return"a"===n?i.call(t,r):i?i.value=r:e.set(t,r),r},Xc=function(t,e,r,n){if("a"===r&&!n)throw new TypeError("Private accessor was defined without a getter");if("function"==typeof e?t!==e||!n:!e.has(t))throw new TypeError("Cannot read private member from an object whose class did not declare it");return"m"===r?n:"a"===r?n.call(t):n?n.value:e.get(t)};class tu{constructor(t){zc.set(this,void 0),Kc.set(this,void 0),Yc.set(this,void 0),Qc.set(this,!1),Object.defineProperty(this,Zc,{enumerable:!0,configurable:!0,writable:!0,value:"ResolvablePromise"}),Jc(this,zc,new Promise(((e,r)=>{const n=Jc(this,Kc,(t=>(Jc(this,Qc,!0,"f"),e(t))),"f"),i=Jc(this,Yc,(t=>(Jc(this,Qc,!0,"f"),r(t))),"f");null!=t&&("function"==typeof t?t(n,i):"function"==typeof t.then&&t.then(n,i))})),"f")}resolve(t){Xc(this,Kc,"f").call(this,t)}reject(t){Xc(this,Yc,"f").call(this,t)}get settled(){return Xc(this,Qc,"f")}then(t,e){return Xc(this,zc,"f").then(t,e)}catch(t){return Xc(this,zc,"f").catch(t)}finally(t){return Xc(this,zc,"f").finally(t)}}zc=new WeakMap,Kc=new WeakMap,Yc=new WeakMap,Qc=new WeakMap,Zc=Symbol.toStringTag;const{default:eu}=n,ru=n,nu=Symbol("kEnableEsiTags"),iu=t=>{if(t.headers.get("content-type")?.startsWith("application/wasm"))return t;const{body:e,headers:r,...n}=t,i=new Headers(r);return i.set("content-type","application/wasm"),new Response(e,{...n,headers:i})},ou=new tu;let su=!1;class au{#t=[];#e=[];[nu]=!1;constructor(){ou.settled||su||(su=!0,fetch(new URL(r(9541),r.b).href).then((t=>t.ok?t:(()=>{throw Error("WASM response not ok")})())).then(iu).then(eu).then((()=>ou.resolve())).catch((t=>{su=!1,console.error(t)})))}on(t,e){return this.#t.push([t,e]),this}onDocument(t){return this.#e.push(t),this}transform(t){const e=t.body;if(null===e)return new Response(e,t);let r;t instanceof Response&&(t=new Response(t.body,t));const n=new TransformStream({start:async t=>{await ou,r=new ru.HTMLRewriter((e=>{0!==e.length&&t.enqueue(e)}),{enableEsiTags:this[nu]});for(const[t,e]of this.#t)r.on(t,e);for(const t of this.#e)r.onDocument(t)},transform:t=>r.write(t),flush:()=>r.end()});e.pipeTo(n.writable).catch((()=>{})).finally((()=>r?.free()));const i=new Response(n.readable,t);return i.headers.delete("Content-Length"),i}}function cu(t){return cu="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},cu(t)}function uu(){/*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */uu=function(){return t};var t={},e=Object.prototype,r=e.hasOwnProperty,n=Object.defineProperty||function(t,e,r){t[e]=r.value},i="function"==typeof Symbol?Symbol:{},o=i.iterator||"@@iterator",s=i.asyncIterator||"@@asyncIterator",a=i.toStringTag||"@@toStringTag";function c(t,e,r){return Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}),t[e]}try{c({},"")}catch(t){c=function(t,e,r){return t[e]=r}}function u(t,e,r,i){var o=e&&e.prototype instanceof f?e:f,s=Object.create(o.prototype),a=new E(i||[]);return n(s,"_invoke",{value:S(t,r,a)}),s}function l(t,e,r){try{return{type:"normal",arg:t.call(e,r)}}catch(t){return{type:"throw",arg:t}}}t.wrap=u;var h={};function f(){}function d(){}function p(){}var g={};c(g,o,(function(){return this}));var m=Object.getPrototypeOf,y=m&&m(m(C([])));y&&y!==e&&r.call(y,o)&&(g=y);var v=p.prototype=f.prototype=Object.create(g);function b(t){["next","throw","return"].forEach((function(e){c(t,e,(function(t){return this._invoke(e,t)}))}))}function w(t,e){function i(n,o,s,a){var c=l(t[n],t,o);if("throw"!==c.type){var u=c.arg,h=u.value;return h&&"object"==cu(h)&&r.call(h,"__await")?e.resolve(h.__await).then((function(t){i("next",t,s,a)}),(function(t){i("throw",t,s,a)})):e.resolve(h).then((function(t){u.value=t,s(u)}),(function(t){return i("throw",t,s,a)}))}a(c.arg)}var o;n(this,"_invoke",{value:function(t,r){function n(){return new e((function(e,n){i(t,r,e,n)}))}return o=o?o.then(n,n):n()}})}function S(t,e,r){var n="suspendedStart";return function(i,o){if("executing"===n)throw new Error("Generator is already running");if("completed"===n){if("throw"===i)throw o;return T()}for(r.method=i,r.arg=o;;){var s=r.delegate;if(s){var a=x(s,r);if(a){if(a===h)continue;return a}}if("next"===r.method)r.sent=r._sent=r.arg;else if("throw"===r.method){if("suspendedStart"===n)throw n="completed",r.arg;r.dispatchException(r.arg)}else"return"===r.method&&r.abrupt("return",r.arg);n="executing";var c=l(t,e,r);if("normal"===c.type){if(n=r.done?"completed":"suspendedYield",c.arg===h)continue;return{value:c.arg,done:r.done}}"throw"===c.type&&(n="completed",r.method="throw",r.arg=c.arg)}}}function x(t,e){var r=e.method,n=t.iterator[r];if(void 0===n)return e.delegate=null,"throw"===r&&t.iterator.return&&(e.method="return",e.arg=void 0,x(t,e),"throw"===e.method)||"return"!==r&&(e.method="throw",e.arg=new TypeError("The iterator does not provide a '"+r+"' method")),h;var i=l(n,t.iterator,e.arg);if("throw"===i.type)return e.method="throw",e.arg=i.arg,e.delegate=null,h;var o=i.arg;return o?o.done?(e[t.resultName]=o.value,e.next=t.nextLoc,"return"!==e.method&&(e.method="next",e.arg=void 0),e.delegate=null,h):o:(e.method="throw",e.arg=new TypeError("iterator result is not an object"),e.delegate=null,h)}function _(t){var e={tryLoc:t[0]};1 in t&&(e.catchLoc=t[1]),2 in t&&(e.finallyLoc=t[2],e.afterLoc=t[3]),this.tryEntries.push(e)}function A(t){var e=t.completion||{};e.type="normal",delete e.arg,t.completion=e}function E(t){this.tryEntries=[{tryLoc:"root"}],t.forEach(_,this),this.reset(!0)}function C(t){if(t){var e=t[o];if(e)return e.call(t);if("function"==typeof t.next)return t;if(!isNaN(t.length)){var n=-1,i=function e(){for(;++n<t.length;)if(r.call(t,n))return e.value=t[n],e.done=!1,e;return e.value=void 0,e.done=!0,e};return i.next=i}}return{next:T}}function T(){return{value:void 0,done:!0}}return d.prototype=p,n(v,"constructor",{value:p,configurable:!0}),n(p,"constructor",{value:d,configurable:!0}),d.displayName=c(p,a,"GeneratorFunction"),t.isGeneratorFunction=function(t){var e="function"==typeof t&&t.constructor;return!!e&&(e===d||"GeneratorFunction"===(e.displayName||e.name))},t.mark=function(t){return Object.setPrototypeOf?Object.setPrototypeOf(t,p):(t.__proto__=p,c(t,a,"GeneratorFunction")),t.prototype=Object.create(v),t},t.awrap=function(t){return{__await:t}},b(w.prototype),c(w.prototype,s,(function(){return this})),t.AsyncIterator=w,t.async=function(e,r,n,i,o){void 0===o&&(o=Promise);var s=new w(u(e,r,n,i),o);return t.isGeneratorFunction(r)?s:s.next().then((function(t){return t.done?t.value:s.next()}))},b(v),c(v,a,"Generator"),c(v,o,(function(){return this})),c(v,"toString",(function(){return"[object Generator]"})),t.keys=function(t){var e=Object(t),r=[];for(var n in e)r.push(n);return r.reverse(),function t(){for(;r.length;){var n=r.pop();if(n in e)return t.value=n,t.done=!1,t}return t.done=!0,t}},t.values=C,E.prototype={constructor:E,reset:function(t){if(this.prev=0,this.next=0,this.sent=this._sent=void 0,this.done=!1,this.delegate=null,this.method="next",this.arg=void 0,this.tryEntries.forEach(A),!t)for(var e in this)"t"===e.charAt(0)&&r.call(this,e)&&!isNaN(+e.slice(1))&&(this[e]=void 0)},stop:function(){this.done=!0;var t=this.tryEntries[0].completion;if("throw"===t.type)throw t.arg;return this.rval},dispatchException:function(t){if(this.done)throw t;var e=this;function n(r,n){return s.type="throw",s.arg=t,e.next=r,n&&(e.method="next",e.arg=void 0),!!n}for(var i=this.tryEntries.length-1;i>=0;--i){var o=this.tryEntries[i],s=o.completion;if("root"===o.tryLoc)return n("end");if(o.tryLoc<=this.prev){var a=r.call(o,"catchLoc"),c=r.call(o,"finallyLoc");if(a&&c){if(this.prev<o.catchLoc)return n(o.catchLoc,!0);if(this.prev<o.finallyLoc)return n(o.finallyLoc)}else if(a){if(this.prev<o.catchLoc)return n(o.catchLoc,!0)}else{if(!c)throw new Error("try statement without catch or finally");if(this.prev<o.finallyLoc)return n(o.finallyLoc)}}}},abrupt:function(t,e){for(var n=this.tryEntries.length-1;n>=0;--n){var i=this.tryEntries[n];if(i.tryLoc<=this.prev&&r.call(i,"finallyLoc")&&this.prev<i.finallyLoc){var o=i;break}}o&&("break"===t||"continue"===t)&&o.tryLoc<=e&&e<=o.finallyLoc&&(o=null);var s=o?o.completion:{};return s.type=t,s.arg=e,o?(this.method="next",this.next=o.finallyLoc,h):this.complete(s)},complete:function(t,e){if("throw"===t.type)throw t.arg;return"break"===t.type||"continue"===t.type?this.next=t.arg:"return"===t.type?(this.rval=this.arg=t.arg,this.method="return",this.next="end"):"normal"===t.type&&e&&(this.next=e),h},finish:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var r=this.tryEntries[e];if(r.finallyLoc===t)return this.complete(r.completion,r.afterLoc),A(r),h}},catch:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var r=this.tryEntries[e];if(r.tryLoc===t){var n=r.completion;if("throw"===n.type){var i=n.arg;A(r)}return i}}throw new Error("illegal catch attempt")},delegateYield:function(t,e,r){return this.delegate={iterator:C(t),resultName:e,nextLoc:r},"next"===this.method&&(this.arg=void 0),h}},t}function lu(t,e,r,n,i,o,s){try{var a=t[o](s),c=a.value}catch(t){return void r(t)}a.done?e(c):Promise.resolve(c).then(n,i)}function hu(t){return function(){var e=this,r=arguments;return new Promise((function(n,i){var o=t.apply(e,r);function s(t){lu(o,n,i,s,a,"next",t)}function a(t){lu(o,n,i,s,a,"throw",t)}s(void 0)}))}}function fu(t){return function(t){if(Array.isArray(t))return yu(t)}(t)||function(t){if("undefined"!=typeof Symbol&&null!=t[Symbol.iterator]||null!=t["@@iterator"])return Array.from(t)}(t)||mu(t)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function du(){return du="undefined"!=typeof Reflect&&Reflect.get?Reflect.get.bind():function(t,e,r){var n=function(t,e){for(;!Object.prototype.hasOwnProperty.call(t,e)&&null!==(t=Su(t)););return t}(t,e);if(n){var i=Object.getOwnPropertyDescriptor(n,e);return i.get?i.get.call(arguments.length<3?t:r):i.value}},du.apply(this,arguments)}function pu(t,e){var r="undefined"!=typeof Symbol&&t[Symbol.iterator]||t["@@iterator"];if(!r){if(Array.isArray(t)||(r=mu(t))||e&&t&&"number"==typeof t.length){r&&(t=r);var n=0,i=function(){};return{s:i,n:function(){return n>=t.length?{done:!0}:{done:!1,value:t[n++]}},e:function(t){throw t},f:i}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var o,s=!0,a=!1;return{s:function(){r=r.call(t)},n:function(){var t=r.next();return s=t.done,t},e:function(t){a=!0,o=t},f:function(){try{s||null==r.return||r.return()}finally{if(a)throw o}}}}function gu(t,e){return function(t){if(Array.isArray(t))return t}(t)||function(t,e){var r=null==t?null:"undefined"!=typeof Symbol&&t[Symbol.iterator]||t["@@iterator"];if(null!=r){var n,i,o,s,a=[],c=!0,u=!1;try{if(o=(r=r.call(t)).next,0===e){if(Object(r)!==r)return;c=!1}else for(;!(c=(n=o.call(r)).done)&&(a.push(n.value),a.length!==e);c=!0);}catch(t){u=!0,i=t}finally{try{if(!c&&null!=r.return&&(s=r.return(),Object(s)!==s))return}finally{if(u)throw i}}return a}}(t,e)||mu(t,e)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function mu(t,e){if(t){if("string"==typeof t)return yu(t,e);var r=Object.prototype.toString.call(t).slice(8,-1);return"Object"===r&&t.constructor&&(r=t.constructor.name),"Map"===r||"Set"===r?Array.from(t):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?yu(t,e):void 0}}function yu(t,e){(null==e||e>t.length)&&(e=t.length);for(var r=0,n=new Array(e);r<e;r++)n[r]=t[r];return n}function vu(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),Object.defineProperty(t,"prototype",{writable:!1}),e&&bu(t,e)}function bu(t,e){return bu=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(t,e){return t.__proto__=e,t},bu(t,e)}function wu(t){var e=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}();return function(){var r,n=Su(t);if(e){var i=Su(this).constructor;r=Reflect.construct(n,arguments,i)}else r=n.apply(this,arguments);return function(t,e){if(e&&("object"===cu(e)||"function"==typeof e))return e;if(void 0!==e)throw new TypeError("Derived constructors may only return object or undefined");return function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t)}(this,r)}}function Su(t){return Su=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(t){return t.__proto__||Object.getPrototypeOf(t)},Su(t)}function xu(t,e){var r=Object.keys(t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(t);e&&(n=n.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),r.push.apply(r,n)}return r}function _u(t){for(var e=1;e<arguments.length;e++){var r=null!=arguments[e]?arguments[e]:{};e%2?xu(Object(r),!0).forEach((function(e){Au(t,e,r[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(r)):xu(Object(r)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(r,e))}))}return t}function Au(t,e,r){return(e=Tu(e))in t?Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}):t[e]=r,t}function Eu(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,Tu(n.key),n)}}function Cu(t,e,r){return e&&Eu(t.prototype,e),r&&Eu(t,r),Object.defineProperty(t,"prototype",{writable:!1}),t}function Tu(t){var e=function(t,e){if("object"!==cu(t)||null===t)return t;var r=t[Symbol.toPrimitive];if(void 0!==r){var n=r.call(t,e||"default");if("object"!==cu(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===e?String:Number)(t)}(t,"string");return"symbol"===cu(e)?e:String(e)}function ku(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}var Nu=new Fa,Ou=new aa;Nu.addRule("listItem",{filter:"li",replacement:function(t,e,r){t=t.replace(/^\n+/,"").replace(/\n+$/,"\n").replace(/\n/gm,"\n    ");var n=r.bulletListMarker+" ",i=e.parentNode;if("OL"===i.nodeName){var o=i.getAttribute("start"),s=Array.prototype.indexOf.call(i.children,e);n=(o?Number(o)+s:s+1)+". "}return n+t+(e.nextSibling&&!/\n$/.test(t)?"\n":"")}});var Ru=Cu((function t(e,r,n){ku(this,t),this.field=e,this.attribute=r,this.func=n})),Lu=[new Ru("name","data-fullname"),new Ru("subreddit","data-subreddit"),new Ru("author_fullname","data-author-fullname"),new Ru("author","data-author"),new Ru("permalink","data-permalink"),new Ru("subreddit_id","data-subreddit-fullname"),new Ru("created_utc","data-timestamp",(function(t){return Number(t)/1e3})),new Ru("url","data-url"),new Ru("domain","data-domain"),new Ru("num_comments","data-comments-count",Number),new Ru("num_crossposts","data-num-crossposts",Number),new Ru("score","data-score",Number)],Iu="https://www.reddit.com",Pu=function(t){return new RegExp("(^|\\s)"+t+"($|\\s)")},Mu=Pu("controversial"),Du=Pu("stickied"),ju=Pu("sticky-pinned"),Fu=(Pu("locked"),{removal_reason:null,quarantine:!1,score:1,locked:!1,distinguished:null,stickied:!1}),qu=_u({},Fu),Bu=_u(_u({},Fu),{},{link_flair_text:null,author_flair_text:null,pinned:!1,removed_by_category:null}),Uu={locked:Pu("locked")},Vu=function(t){return"t1"===t.substr(0,2)},Hu=function(t){return"t3"===t.substr(0,2)},Gu=function(t){vu(r,t);var e=wu(r);function r(t){var n;return ku(this,r),(n=e.call(this,t)).items=[],n.ids_set=new Set,n.quarantined_subs=new Set,n.url=t,n}return Cu(r,[{key:"element",value:function(t){for(var e={},r=0,n=Lu;r<n.length;r++){var i=n[r],o=t.getAttribute(i.attribute);null!==o&&(i.func&&(o=i.func(o)),e[i.field]=o)}for(var s=t.getAttribute("class"),a=0,c=Object.entries(Uu);a<c.length;a++){var u=gu(c[a],2),l=u[0],h=u[1];e[l]=!!s.match(h)}if(e.name)if(e.id=e.name.replace(/^t[0-9]_/,""),Vu(e.name)){if(e.permalink){var f=e.permalink.split("/");e.link_id="t3_"+f[4],e.link_permalink=Iu+f.slice(0,6).join("/")+"/"}else this.addError("permalink_undefined");e.stickied=!!s.match(Du),s.match(Mu)?e.controversiality=1:e.controversiality=0}else e.pinned=!!s.match(ju);else this.addError("name_undefined");this.items.push(e),this.ids_set.add(e.name)}},{key:"addQuarantinedSub",value:function(t){this.quarantined_subs.add(t)}},{key:"fillInDefaultValues",value:function(){var t,e=pu(this.items);try{for(e.s();!(t=e.n()).done;){var r=t.value,n=void 0;if(Vu(r.name)?n=qu:Hu(r.name)&&(n=Bu),n)for(var i=0,o=Object.entries(n);i<o.length;i++){var s=gu(o[i],2),a=s[0],c=s[1];a in r||(r[a]=c)}}}catch(t){e.e(t)}finally{e.f()}}}]),r}(i.Sd),$u=function(){function t(e){ku(this,t),this.itemsObj=e,this.items=e.items,this.last={}}return Cu(t,[{key:"element",value:function(t){if(this.items.length){var e=this.items[this.items.length-1];e?this.last=e:this.itemsObj.addError("last_undefined")}}}]),t}(),Wu=function(t){vu(r,t);var e=wu(r);function r(t,n,i){var o;return ku(this,r),(o=e.call(this,t)).field_name=n,o.value=i,o}return Cu(r,[{key:"element",value:function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:this.value;du(Su(r.prototype),"element",this).call(this,t),this.last[this.field_name]=e}}]),r}($u),zu=function(t){vu(r,t);var e=wu(r);function r(t,n,i){var o;return ku(this,r),(o=e.call(this,t,n)).att_name=i,o}return Cu(r,[{key:"element",value:function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:function(t){return t};du(Su(r.prototype),"element",this).call(this,t,e(t.getAttribute(this.att_name)))}}]),r}(Wu),Ku=function(t){return"//"===t.substr(0,2)?"https:"+t:t},Yu=function(t){vu(r,t);var e=wu(r);function r(t){return ku(this,r),e.call(this,t,"thumbnail","src")}return Cu(r,[{key:"element",value:function(t){du(Su(r.prototype),"element",this).call(this,t,Ku)}}]),r}(zu),Qu=function(t){vu(r,t);var e=wu(r);function r(t,n){var i;return ku(this,r),(i=e.call(this,t)).classToFieldMaps=n,i}return Cu(r,[{key:"element",value:function(t){du(Su(r.prototype),"element",this).call(this,t);var e,n=t.getAttribute("class"),i=pu(this.classToFieldMaps);try{for(i.s();!(e=i.n()).done;){var o=e.value,s=Pu(o.class_name);n.match(s)&&(this.last[o.field_name]=o.value)}}catch(t){i.e(t)}finally{i.f()}}}]),r}($u),Zu=Cu((function t(e,r,n){ku(this,t),this.class_name=e,this.field_name=r,this.value=n})),Ju=function(t){vu(r,t);var e=wu(r);function r(t,n){var i;return ku(this,r),(i=e.call(this,t)).field_name=n,i}return Cu(r,[{key:"element",value:function(t){var e=this;du(Su(r.prototype),"element",this).call(this,t),this.last[this.field_name]||(this.last[this.field_name]="");var n=fu(t.attributes).map((function(t){var e=gu(t,2),r=e[0],n=e[1];return" ".concat(r,'="').concat(n,'"')})).join("");if(this.last[this.field_name]+="<".concat(t.tagName).concat(n,">"),"br"!==t.tagName)try{t.onEndTag((function(t){e.last[e.field_name]+="</".concat(t.name,">")}))}catch(e){this.itemsObj.addError("NO_END_TAG_"+t.tagName)}}},{key:"text",value:function(t){var e=t.text;this.last[this.field_name]+=e}}]),r}($u),Xu=function(t){vu(r,t);var e=wu(r);function r(t){return ku(this,r),e.call(this,t)}return Cu(r,[{key:"element",value:function(t){du(Su(r.prototype),"element",this).call(this,t),this.last.author="[deleted]"}}]),r}($u),tl=function(t){vu(r,t);var e=wu(r);function r(t,n){var i;return ku(this,r),(i=e.call(this,t)).temp_text_var_name=n+"_text",i.field_name=n,i}return Cu(r,[{key:"element",value:function(t){du(Su(r.prototype),"element",this).call(this,t),this.last[this.temp_text_var_name]=""}},{key:"text",value:function(t,e){var r=t.text,n=t.lastInTextNode;this.last[this.temp_text_var_name]+=r,n&&(e(),delete this.last[this.temp_text_var_name])}}]),r}($u),el=new RegExp(/^\//),rl=function(t){vu(r,t);var e=wu(r);function r(){return ku(this,r),e.apply(this,arguments)}return Cu(r,[{key:"element",value:function(t){du(Su(r.prototype),"element",this).call(this,t);var e=this.last;e.link_url=t.getAttribute("href"),e.link_url.match(el)&&(e.link_url="https://www.reddit.com"+e.link_url),e.link_title=""}},{key:"text",value:function(t){var e=t.text;this.last.link_title+=e}}]),r}($u),nl=new RegExp(/^https?:\/\/([^.]+\.)?reddit\.com\//),il=new RegExp(/https?:\/\/(?:www\.)?([^\/.]+\.[^\/]+)(\/.+)?/),ol=function(t){vu(r,t);var e=wu(r);function r(t){return ku(this,r),e.call(this,t,"title")}return Cu(r,[{key:"element",value:function(t){du(Su(r.prototype),"element",this).call(this,t);var e=t.getAttribute("href");if(e.match(el)&&(e=Iu+e),Hu(this.last.name)&&!("domain"in this.last)){var n="";n=e.match(nl)?"self."+this.last.subreddit:e.replace(il,"$1"),this.last.domain=n}"url"in this.last||(this.last.url=e)}},{key:"text",value:function(t){var e=this;du(Su(r.prototype),"text",this).call(this,t,(function(){e.last[e.field_name]=e.last[e.temp_text_var_name]}))}}]),r}(tl),sl=new RegExp(/^id-t2_/),al=new RegExp(/^id-/),cl=function(t){vu(r,t);var e=wu(r);function r(){return ku(this,r),e.apply(this,arguments)}return Cu(r,[{key:"element",value:function(t){du(Su(r.prototype),"element",this).call(this,t),this.last.link_author="";var e=t.getAttribute("class").replace(/ +/g," ").split(" ").filter((function(t){return t.match(sl)}))[0];e&&(this.last.link_author_fullname=e.replace(al,""))}},{key:"text",value:function(t){var e=t.text;this.last.link_author+=e}}]),r}($u),ul=new RegExp(/full comments \(([0-9]+)\)/),ll=function(t){vu(r,t);var e=wu(r);function r(){return ku(this,r),e.apply(this,arguments)}return Cu(r,[{key:"text",value:function(t){var e=this;du(Su(r.prototype),"text",this).call(this,t,(function(){var t=e.last[e.temp_text_var_name].match(ul);t&&(e.last[e.field_name]=Number(t[1]))}))}}]),r}(tl),hl=function(t){vu(r,t);var e=wu(r);function r(t){return ku(this,r),e.call(this,t,"score")}return Cu(r,[{key:"element",value:function(t){du(Su(r.prototype),"element",this).call(this,t,Number(t.getAttribute("title")))}}]),r}(Wu),fl=Pu("live-timestamp"),dl=Pu("edited-timestamp"),pl=function(t){vu(r,t);var e=wu(r);function r(){return ku(this,r),e.apply(this,arguments)}return Cu(r,[{key:"element",value:function(t){du(Su(r.prototype),"element",this).call(this,t);var e,n,i=t.getAttribute("class");if(i.match(fl)?e="created_utc":i.match(dl)&&(e="edited"),e){var o=(n=t.getAttribute("datetime"),new Date(n).getTime()/1e3);o&&(this.last[e]=o)}}}]),r}($u),gl=function(t){vu(r,t);var e=wu(r);function r(){return ku(this,r),e.apply(this,arguments)}return Cu(r,[{key:"element",value:function(t){du(Su(r.prototype),"element",this).call(this,t);var e=this.last.subreddit;e?this.itemsObj.addQuarantinedSub(e):this.itemsObj.addError("subreddit_undefined"),this.last.quarantine=!0}}]),r}($u),ml=function(t){vu(r,t);var e=wu(r);function r(t){var n;return ku(this,r),(n=e.call(this,t)).is_removed=!1,n}return Cu(r,[{key:"element",value:function(t){this.is_removed=!0}}]),r}(i.Sd),yl=function(t){vu(r,t);var e=wu(r);function r(t){var n;return ku(this,r),(n=e.call(this,t)).author="",n}return Cu(r,[{key:"text",value:function(t){var e=t.text;this.author+=e.trim()}}]),r}(i.Sd),vl=function(){var t=hu(uu().mark((function t(e){var r,n,o,s,a,c;return uu().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return r=i.Hz+e,t.next=3,fetch(r,i.iN);case 3:if((n=t.sent).ok){t.next=6;break}return t.abrupt("return",{error:"request failed"});case 6:return o=new Gu(r),s=(new au).on("#siteTable .thing",o).on("#siteTable .thing .parent a.title",new rl(o)).on("#siteTable .thing .entry p.title a.title",new ol(o)).on("#siteTable .thing .entry .usertext-body .md *",new Ju(o,"body")).on("#siteTable .thing .entry .admin_takedown",new Wu(o,"removal_reason","legal")).on("#siteTable .thing .tagline .score.unvoted",new hl(o)).on("#siteTable .thing .tagline time",new pl(o)).on("#siteTable .thing .tagline .locked-tagline",new Wu(o,"locked",!0)).on("#siteTable .thing .tagline .author",new Qu(o,[new Zu("submitter","is_submitter",!0),new Zu("moderator","distinguished","moderator"),new Zu("admin","distinguished","admin")])).on("#siteTable .thing .parent .author",new cl(o)).on('#siteTable .thing ul.buttons li.first a[data-event-action="full_comments"]',new ll(o,"num_comments")).on("#siteTable .thing .quarantine-stamp",new gl(o)).on("#siteTable .thing .thumbnail img",new Yu(o)),t.next=10,(0,i.F_)(s.transform(n).body);case 10:return a=bl(Array.from(o.ids_set)),o.fillInDefaultValues(),o.printErrors(),o.items.forEach((function(t){var e;t.body=(e=t.body,Nu.turndown(Ou.parseFromString(e,"text/html")))})),t.next=16,a;case 16:return c=t.sent,t.abrupt("return",{quarantined:Array.from(o.quarantined_subs),items:o.items,info:c,ids_set:o.ids_set});case 18:case"end":return t.stop()}}),t)})));return function(e){return t.apply(this,arguments)}}(),bl=function(){var t=hu(uu().mark((function t(e){var r,n,o,s,a;return uu().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return r=i.Hz+"/api/info?id="+e.join(","),t.next=3,fetch(r,{"Accept-Language":"en",Cookie:"over18=1;","User-Agent":"extension",credentials:"omit"});case 3:if((n=t.sent).ok){t.next=7;break}return console.error("request failed:",r),t.abrupt("return",{});case 7:return o=new Gu(r),s=(new au).on("#siteTable .comment",o).on("#siteTable .comment.deleted",new Xu(o)),t.next=11,(0,i.F_)(s.transform(n).body);case 11:return a=o.items.reduce((function(t,e){return e.name="t1_"+e.permalink.split("/").slice(6,7),t[e.name]=e,t}),{}),t.abrupt("return",a);case 13:case"end":return t.stop()}}),t)})));return function(e){return t.apply(this,arguments)}}(),wl=function(){var t=hu(uu().mark((function t(e){var r,n,o,s,a;return uu().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return r=i.Hz+e,t.next=3,fetch(r,i.iN);case 3:if((n=t.sent).ok){t.next=6;break}return t.abrupt("return",{error:"request failed"});case 6:return o=new ml(r),s=new yl(r),a=(new au).on('meta[name="robots"][content="noindex,nofollow"]',o).on("#siteTable .thing .tagline span",s),t.next=11,(0,i.F_)(a.transform(n).body);case 11:return t.abrupt("return",_u({is_removed:o.is_removed},s.author&&{author:s.author}));case 12:case"end":return t.stop()}}),t)})));return function(e){return t.apply(this,arguments)}}()},97:(t,e,r)=>{"use strict";r.d(e,{IY:()=>O,ej:()=>C,lc:()=>k,my:()=>g,uG:()=>S,v0:()=>E});var n=r(3368),i=r(3150);function o(t){return o="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},o(t)}function s(){/*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */s=function(){return t};var t={},e=Object.prototype,r=e.hasOwnProperty,n=Object.defineProperty||function(t,e,r){t[e]=r.value},i="function"==typeof Symbol?Symbol:{},a=i.iterator||"@@iterator",c=i.asyncIterator||"@@asyncIterator",u=i.toStringTag||"@@toStringTag";function l(t,e,r){return Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}),t[e]}try{l({},"")}catch(t){l=function(t,e,r){return t[e]=r}}function h(t,e,r,i){var o=e&&e.prototype instanceof p?e:p,s=Object.create(o.prototype),a=new T(i||[]);return n(s,"_invoke",{value:_(t,r,a)}),s}function f(t,e,r){try{return{type:"normal",arg:t.call(e,r)}}catch(t){return{type:"throw",arg:t}}}t.wrap=h;var d={};function p(){}function g(){}function m(){}var y={};l(y,a,(function(){return this}));var v=Object.getPrototypeOf,b=v&&v(v(k([])));b&&b!==e&&r.call(b,a)&&(y=b);var w=m.prototype=p.prototype=Object.create(y);function S(t){["next","throw","return"].forEach((function(e){l(t,e,(function(t){return this._invoke(e,t)}))}))}function x(t,e){function i(n,s,a,c){var u=f(t[n],t,s);if("throw"!==u.type){var l=u.arg,h=l.value;return h&&"object"==o(h)&&r.call(h,"__await")?e.resolve(h.__await).then((function(t){i("next",t,a,c)}),(function(t){i("throw",t,a,c)})):e.resolve(h).then((function(t){l.value=t,a(l)}),(function(t){return i("throw",t,a,c)}))}c(u.arg)}var s;n(this,"_invoke",{value:function(t,r){function n(){return new e((function(e,n){i(t,r,e,n)}))}return s=s?s.then(n,n):n()}})}function _(t,e,r){var n="suspendedStart";return function(i,o){if("executing"===n)throw new Error("Generator is already running");if("completed"===n){if("throw"===i)throw o;return N()}for(r.method=i,r.arg=o;;){var s=r.delegate;if(s){var a=A(s,r);if(a){if(a===d)continue;return a}}if("next"===r.method)r.sent=r._sent=r.arg;else if("throw"===r.method){if("suspendedStart"===n)throw n="completed",r.arg;r.dispatchException(r.arg)}else"return"===r.method&&r.abrupt("return",r.arg);n="executing";var c=f(t,e,r);if("normal"===c.type){if(n=r.done?"completed":"suspendedYield",c.arg===d)continue;return{value:c.arg,done:r.done}}"throw"===c.type&&(n="completed",r.method="throw",r.arg=c.arg)}}}function A(t,e){var r=e.method,n=t.iterator[r];if(void 0===n)return e.delegate=null,"throw"===r&&t.iterator.return&&(e.method="return",e.arg=void 0,A(t,e),"throw"===e.method)||"return"!==r&&(e.method="throw",e.arg=new TypeError("The iterator does not provide a '"+r+"' method")),d;var i=f(n,t.iterator,e.arg);if("throw"===i.type)return e.method="throw",e.arg=i.arg,e.delegate=null,d;var o=i.arg;return o?o.done?(e[t.resultName]=o.value,e.next=t.nextLoc,"return"!==e.method&&(e.method="next",e.arg=void 0),e.delegate=null,d):o:(e.method="throw",e.arg=new TypeError("iterator result is not an object"),e.delegate=null,d)}function E(t){var e={tryLoc:t[0]};1 in t&&(e.catchLoc=t[1]),2 in t&&(e.finallyLoc=t[2],e.afterLoc=t[3]),this.tryEntries.push(e)}function C(t){var e=t.completion||{};e.type="normal",delete e.arg,t.completion=e}function T(t){this.tryEntries=[{tryLoc:"root"}],t.forEach(E,this),this.reset(!0)}function k(t){if(t){var e=t[a];if(e)return e.call(t);if("function"==typeof t.next)return t;if(!isNaN(t.length)){var n=-1,i=function e(){for(;++n<t.length;)if(r.call(t,n))return e.value=t[n],e.done=!1,e;return e.value=void 0,e.done=!0,e};return i.next=i}}return{next:N}}function N(){return{value:void 0,done:!0}}return g.prototype=m,n(w,"constructor",{value:m,configurable:!0}),n(m,"constructor",{value:g,configurable:!0}),g.displayName=l(m,u,"GeneratorFunction"),t.isGeneratorFunction=function(t){var e="function"==typeof t&&t.constructor;return!!e&&(e===g||"GeneratorFunction"===(e.displayName||e.name))},t.mark=function(t){return Object.setPrototypeOf?Object.setPrototypeOf(t,m):(t.__proto__=m,l(t,u,"GeneratorFunction")),t.prototype=Object.create(w),t},t.awrap=function(t){return{__await:t}},S(x.prototype),l(x.prototype,c,(function(){return this})),t.AsyncIterator=x,t.async=function(e,r,n,i,o){void 0===o&&(o=Promise);var s=new x(h(e,r,n,i),o);return t.isGeneratorFunction(r)?s:s.next().then((function(t){return t.done?t.value:s.next()}))},S(w),l(w,u,"Generator"),l(w,a,(function(){return this})),l(w,"toString",(function(){return"[object Generator]"})),t.keys=function(t){var e=Object(t),r=[];for(var n in e)r.push(n);return r.reverse(),function t(){for(;r.length;){var n=r.pop();if(n in e)return t.value=n,t.done=!1,t}return t.done=!0,t}},t.values=k,T.prototype={constructor:T,reset:function(t){if(this.prev=0,this.next=0,this.sent=this._sent=void 0,this.done=!1,this.delegate=null,this.method="next",this.arg=void 0,this.tryEntries.forEach(C),!t)for(var e in this)"t"===e.charAt(0)&&r.call(this,e)&&!isNaN(+e.slice(1))&&(this[e]=void 0)},stop:function(){this.done=!0;var t=this.tryEntries[0].completion;if("throw"===t.type)throw t.arg;return this.rval},dispatchException:function(t){if(this.done)throw t;var e=this;function n(r,n){return s.type="throw",s.arg=t,e.next=r,n&&(e.method="next",e.arg=void 0),!!n}for(var i=this.tryEntries.length-1;i>=0;--i){var o=this.tryEntries[i],s=o.completion;if("root"===o.tryLoc)return n("end");if(o.tryLoc<=this.prev){var a=r.call(o,"catchLoc"),c=r.call(o,"finallyLoc");if(a&&c){if(this.prev<o.catchLoc)return n(o.catchLoc,!0);if(this.prev<o.finallyLoc)return n(o.finallyLoc)}else if(a){if(this.prev<o.catchLoc)return n(o.catchLoc,!0)}else{if(!c)throw new Error("try statement without catch or finally");if(this.prev<o.finallyLoc)return n(o.finallyLoc)}}}},abrupt:function(t,e){for(var n=this.tryEntries.length-1;n>=0;--n){var i=this.tryEntries[n];if(i.tryLoc<=this.prev&&r.call(i,"finallyLoc")&&this.prev<i.finallyLoc){var o=i;break}}o&&("break"===t||"continue"===t)&&o.tryLoc<=e&&e<=o.finallyLoc&&(o=null);var s=o?o.completion:{};return s.type=t,s.arg=e,o?(this.method="next",this.next=o.finallyLoc,d):this.complete(s)},complete:function(t,e){if("throw"===t.type)throw t.arg;return"break"===t.type||"continue"===t.type?this.next=t.arg:"return"===t.type?(this.rval=this.arg=t.arg,this.method="return",this.next="end"):"normal"===t.type&&e&&(this.next=e),d},finish:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var r=this.tryEntries[e];if(r.finallyLoc===t)return this.complete(r.completion,r.afterLoc),C(r),d}},catch:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var r=this.tryEntries[e];if(r.tryLoc===t){var n=r.completion;if("throw"===n.type){var i=n.arg;C(r)}return i}}throw new Error("illegal catch attempt")},delegateYield:function(t,e,r){return this.delegate={iterator:k(t),resultName:e,nextLoc:r},"next"===this.method&&(this.arg=void 0),d}},t}function a(t,e,r,n,i,o,s){try{var a=t[o](s),c=a.value}catch(t){return void r(t)}a.done?e(c):Promise.resolve(c).then(n,i)}function c(t,e){var r=Object.keys(t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(t);e&&(n=n.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),r.push.apply(r,n)}return r}function u(t){for(var e=1;e<arguments.length;e++){var r=null!=arguments[e]?arguments[e]:{};e%2?c(Object(r),!0).forEach((function(e){l(t,e,r[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(r)):c(Object(r)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(r,e))}))}return t}function l(t,e,r){return(e=function(t){var e=function(t,e){if("object"!==o(t)||null===t)return t;var r=t[Symbol.toPrimitive];if(void 0!==r){var n=r.call(t,e||"default");if("object"!==o(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===e?String:Number)(t)}(t,"string");return"symbol"===o(e)?e:String(e)}(e))in t?Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}):t[e]=r,t}function h(t){return function(t){if(Array.isArray(t))return f(t)}(t)||function(t){if("undefined"!=typeof Symbol&&null!=t[Symbol.iterator]||null!=t["@@iterator"])return Array.from(t)}(t)||function(t,e){if(!t)return;if("string"==typeof t)return f(t,e);var r=Object.prototype.toString.call(t).slice(8,-1);"Object"===r&&t.constructor&&(r=t.constructor.name);if("Map"===r||"Set"===r)return Array.from(t);if("Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r))return f(t,e)}(t)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function f(t,e){(null==e||e>t.length)&&(e=t.length);for(var r=0,n=new Array(e);r<e;r++)n[r]=t[r];return n}var d="https://www.reddit.com/",p="none",g=function(t,e){var r=arguments.length>2&&void 0!==arguments[2]&&arguments[2],n=arguments.length>3&&void 0!==arguments[3]&&arguments[3],i=arguments.length>4&&void 0!==arguments[4]?arguments[4]:[],o={id:t,raw_json:1};n&&(o.quarantined_subreddits=i.join(","));var s="?"+Object.keys(o).map((function(t){return"".concat(t,"=").concat(o[t])})).join("&");return m("api/info",s,e,r,n)},m=function(t,e,r){var n=arguments.length>3&&void 0!==arguments[3]&&arguments[3],i=arguments.length>4&&void 0!==arguments[4]&&arguments[4];return fetch(d+t+".json"+e,{credentials:"omit"}).then((function(t){if(t.ok)return t.json();throw new Error("www.reddit.com request failed: ".concat(t.status))})).then((function(t){if(t&&t.data&&t.data.children)return t.data.children;throw new Error("Invalid data format from www.reddit.com")})).catch((function(o){if(console.log("www.reddit.com request failed, trying OAuth fallback:",o.message),r&&"none"!==r)return w.apply(void 0,h(T(t,e,r,i)).concat([n]));throw console.log("No OAuth auth available for fallback"),o}))},y={name:"reddit_session",url:"https://reddit.com"},v=["name","value","domain","path","secure","httpOnly","storeId"],b=function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"https://reddit.com";if(!t)return t;var r=Object.keys(t).filter((function(t){return v.includes(t)})).reduce((function(e,r){return u(u({},e),{},l({},r,t[r]))}),{});return r.url=e,r},w=function(){var t,e=(t=s().mark((function t(e,r){var n,o,a,c=arguments;return s().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return n=c.length>2&&void 0!==c[2]&&c[2],t.next=3,i.cookies.set({domain:"reddit.com",url:"https://reddit.com",name:"_options",value:"{%22pref_quarantine_optin%22:true}"});case 3:if(!n){t.next=12;break}return t.t0=b,t.next=7,i.cookies.get(y);case 7:if(t.t1=t.sent,!(o=(0,t.t0)(t.t1))){t.next=12;break}return t.next=12,i.cookies.remove(y);case 12:if(r||(r={credentials:"omit"}),r.cache="reload",r.headers||(r.headers={}),"en"!==r.headers["Accept-Language"]&&(r.headers["Accept-Language"]="en"),a=fetch(e,r).then(x).then(_).catch(console.log),!o){t.next=20;break}return t.next=20,i.cookies.set(o);case 20:return t.abrupt("return",a);case 21:case"end":return t.stop()}}),t)})),function(){var e=this,r=arguments;return new Promise((function(n,i){var o=t.apply(e,r);function s(t){a(o,n,i,s,c,"next",t)}function c(t){a(o,n,i,s,c,"throw",t)}s(void 0)}))});return function(t,r){return e.apply(this,arguments)}}(),S=function(t,e,r,n,i,o){var s={limit:100,sort:e,raw_json:1};t&&(s.after=t),r&&(s.t=r);var a="?"+Object.keys(s).map((function(t){return"".concat(t,"=").concat(s[t])})).join("&");return R().then((function(){var s="https://www.reddit.com/user/me.json".concat(a);return fetch(s,{credentials:"include",cache:"reload"}).then((function(t){if(t.ok)return t.json();throw new Error("www.reddit.com request failed: ".concat(t.status))})).then((function(t){if(t&&t.data&&t.data.children)return t.data.children;throw new Error("Invalid data format from www.reddit.com")})).catch((function(s){if(console.log("www.reddit.com request failed, trying OAuth fallback:",s.message),o&&"none"!==o)return function(t,e,r,n,i,o,s){var a={limit:100,sort:r,raw_json:1};e&&(a.after=e),n&&(a.t=n);var c="user/".concat(t,"/overview.json"),u="?"+Object.keys(a).map((function(t){return"".concat(t,"=").concat(a[t])})).join("&");return w.apply(void 0,h(T(c,u,s,o)).concat([i]))}("me",t,e,r,n,i,o);throw console.log("No OAuth auth available for fallback"),s}))}))},x=function(t){if(!t.ok)throw Error(t.statusText);return t.json()},_=function(t){if(t&&t.user&&t.user.items)return t;if(!t||!t.data||!t.data.children)throw Error("reddit data is not defined");return t.data.children},A=function(t){if(!t||!t.access_token)throw Error("access token is not defined");return t.access_token},E=function(){var t=arguments.length>0&&void 0!==arguments[0]&&arguments[0];return(0,n.FW)((function(e,r,n){var i="SEw1uvRd6kxFEw";if(n.custom_clientid){if("testing"===(i=n.custom_clientid))return p}else if(!t)return p;var o={headers:{Authorization:"Basic ".concat(btoa("".concat(i,":"))),"Content-Type":"application/x-www-form-urlencoded; charset=utf-8"},method:"POST",body:"grant_type=".concat(encodeURIComponent("https://oauth.reddit.com/grants/installed_client"),"&device_id=DO_NOT_TRACK_THIS_DEVICE")};return fetch("https://www.reddit.com/api/v1/access_token",o).then(x).then(A).then((function(t){return{headers:{Authorization:"bearer ".concat(t),"Accept-Language":"en"}}})).catch(console.log)}))},C=function(t){var e=t.url,r=t.name;return location.protocol.match(/^http/)?i.runtime.sendMessage({action:"get-cookie",options:{url:e,name:r}}).then((function(t){return t.cookie})).catch((function(){return null})):i.cookies.get({url:e,name:r})},T=function(t,e,r,n){if(r&&r!==p){var i="https://oauth.reddit.com/",o=t+e;return n&&(i="https://cred2.reveddit.com/",o+="&give_it_to_me=1"),[i+o,r]}var s=(n?"https://wred.reveddit.com/":d)+t;return"api/info"===t&&(s+=".json"),[s+=e]},k=function(){return new Promise((function(t){if(("undefined"==typeof chrome||!chrome.tabs||"function"!=typeof chrome.tabs.query)&&"undefined"!=typeof window&&window.location&&window.location.hostname){var e=window.location.hostname,r="https://".concat(e,"/api/me.json");fetch(r,{credentials:"include",cache:"reload"}).then(x).then(N).then(t).catch((function(){return t(null)}))}else chrome.tabs.query({url:["*://*.reddit.com/*"]},(function(e){var r="https://www.reddit.com/api/me.json",n=!1;if(e.length>0){var i=e.filter((function(t){try{var e=new URL(t.url).hostname;return"www.reddit.com"===e||"old.reddit.com"===e}catch(t){return!1}}));if(i.length>0)try{var o=new URL(i[0].url).hostname;r="https://".concat(o,"/api/me.json")}catch(t){}}else n=!0;n?R().then((function(t){return t?fetch(r,{credentials:"include",cache:"reload"}):(console.log("No stored cookies available"),Promise.reject(new Error("no-cookies")))})).then(x).then(N).then(t).catch((function(){console.log("Failed to authenticate with stored cookies"),t(null)})):fetch(r,{credentials:"include",cache:"reload"}).then(x).then(N).then(t).catch(console.log)}))}))},N=function(t){if(!t||!t.data||!t.data.name)throw Error("reddit username is not defined");return t.data.name},O=function(){return new Promise((function(t){if("undefined"==typeof chrome||!chrome.tabs||!chrome.cookies)return console.log("storeRedditCookies: Not available in this context (content script)"),void t(!1);chrome.tabs.query({url:["*://*.reddit.com/*"]},(function(e){var r=e.filter((function(t){try{var e=new URL(t.url).hostname;return"www.reddit.com"===e||"old.reddit.com"===e}catch(t){return!1}}));if(r.length>0){var n=r[0];try{new URL(n.url).hostname}catch(e){return console.log("storeRedditCookies: invalid tab url",n&&n.url),void t(!1)}chrome.cookies.getAll({domain:"reddit.com"},(function(e){var r={},n=[];e.forEach((function(t){r[t.name]=t.value;var e=t.domain&&t.domain.startsWith(".")?t.domain.slice(1):t.domain||"reddit.com",i="https://".concat(e);n.push(b(t,i))})),e.length>0?chrome.storage.local.set({stored_reddit_cookies:r,stored_reddit_cookie_objects:n,stored_reddit_domain:"reddit.com"},(function(){t(!0)})):t(!1)}))}else t(!1)}))}))},R=function(){return new Promise((function(t){chrome.storage.local.get(["stored_reddit_cookie_objects"],(function(e){var r=e.stored_reddit_cookie_objects;Array.isArray(r)&&r.length?Promise.all(r.map((function(t){return i.cookies.set(t).catch((function(){return null}))}))).then((function(){return t(!0)})).catch((function(){return t(!1)})):t(!1)}))}))}},3368:(t,e,r)=>{"use strict";r.d(e,{$6:()=>O,Bz:()=>c,CU:()=>E,Ci:()=>d,FW:()=>L,JQ:()=>l,Nd:()=>T,Pd:()=>A,Sy:()=>_,U$:()=>f,UU:()=>u,WK:()=>m,WT:()=>C,YU:()=>g,Yn:()=>h,n7:()=>k,nb:()=>p,oX:()=>R,oZ:()=>y,tN:()=>S,we:()=>x});var n=r(6086),i=r(3150);function o(t){return o="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},o(t)}function s(t,e){var r=Object.keys(t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(t);e&&(n=n.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),r.push.apply(r,n)}return r}function a(t,e,r){return(e=function(t){var e=function(t,e){if("object"!==o(t)||null===t)return t;var r=t[Symbol.toPrimitive];if(void 0!==r){var n=r.call(t,e||"default");if("object"!==o(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===e?String:Number)(t)}(t,"string");return"symbol"===o(e)?e:String(e)}(e))in t?Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}):t[e]=r,t}var c=1,u=2,l=130,h=100,f=1,d=2,p=3,g=4,m=5,y=6,v={changes:[],removed:{},approved:{},locked:{},unlocked:{}},b=function(t,e,r){return r?t+"_u_"+e:t+"_"+e},w=function(t,e){var r=!(arguments.length>2&&void 0!==arguments[2])||arguments[2];Object.keys(v).forEach((function(n){t[b(n,e,r)]=v[n]}))},S=function(t){var e=!(arguments.length>1&&void 0!==arguments[1])||arguments[1],r={};return Object.keys(v).forEach((function(n){r[n]=b(n,t,e)})),r},x=function(t){var e={};return w(e,t,!0),e},_=function(t,e,r){var n=S(e,r);delete n.changes;var i=[];Object.values(n).forEach((function(t){i.push(t)})),i.forEach((function(e){Object.values(t[e]).forEach((function(t){t.u=!1}))}))},A=function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:function(){},r="other_subscriptions";chrome.storage.sync.get(r,(function(i){i[r][t]={t:Math.floor((new Date).getTime()/1e3)};var o=(0,n.N5)(i[r],100,"t");chrome.storage.sync.set(a({},r,o),e)}))},E=function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:function(){},r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:function(){},n=x(t);chrome.storage.sync.get("user_subscriptions",(function(i){var o=i.user_subscriptions;t in o?r("already subscribed to this user"):Object.keys(o).length<5?(o[t]=!0,chrome.storage.sync.set(function(t){for(var e=1;e<arguments.length;e++){var r=null!=arguments[e]?arguments[e]:{};e%2?s(Object(r),!0).forEach((function(e){a(t,e,r[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(r)):s(Object(r)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(r,e))}))}return t}({user_subscriptions:o},n),e)):r("maximum number of subscriptions reached")}))},C=function(t){chrome.storage.sync.get(null,(function(e){var r;0===Object.keys(e).length?chrome.storage.sync.set((w(r={user_subscriptions:{},user_unsubscriptions:{},user_initial_lookup_done:{},other_subscriptions:{},options:{interval:c,seen_count:u,custom_clientid:"",removal_status:{track:!0,notify:!0},lock_status:{track:!0,notify:!0},monitor_quarantined:!1},last_check:null,last_check_quarantined:null},"other",!1),r),t):t()}))},T=function(t){chrome.storage.sync.get(null,(function(e){var r=Object.keys(e.user_subscriptions),n={};r.forEach((function(t){n[t]=k(t,!0,e)})),n.other=k("other",!1,e),t(n)}))},k=function(t,e,r){return N(t,e,r).unseen},N=function(t,e,r){var n=r.options.removal_status.track,i=r.options.lock_status.track,o={},s={},a=[],c=S(t,e);return n&&a.push(c.removed,c.approved),i&&a.push(c.locked,c.unlocked),a.forEach((function(t){Object.keys(r[t]).forEach((function(e){r[t][e].u?o[e]=!0:s[e]=!0}))})),{unseen:Object.keys(o),seen:Object.keys(s)}},O=function(t,e){var r=b("items",t,e);return i.storage.local.get(a({},r,{})).then((function(t){return t[r]}))},R=function(t,e,r){var o=b("items",e,r);return chrome.storage.local.get(a({},o,{}),(function(e){var r=e[o];Object.keys(t).forEach((function(e){r[e]=t[e]}));var s=r;return Object.keys(r).length>500&&(s=(0,n.N5)(r,500,"o")),i.storage.local.set(a({},o,s))}))},L=function(t){return i.storage.sync.get(["user_subscriptions","other_subscriptions","options"]).then((function(e){var r=Object.keys(e.user_subscriptions),n=Object.keys(e.other_subscriptions),i=e.options;return t(r,n,i)})).catch(console.log)}}},e={};function r(n){var i=e[n];if(void 0!==i)return i.exports;var o=e[n]={exports:{}};return t[n].call(o.exports,o,o.exports,r),o.exports}r.m=t,r.d=(t,e)=>{for(var n in e)r.o(e,n)&&!r.o(t,n)&&Object.defineProperty(t,n,{enumerable:!0,get:e[n]})},r.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(t){if("object"==typeof window)return window}}(),r.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),r.r=t=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},(()=>{var t;r.g.importScripts&&(t=r.g.location+"");var e=r.g.document;if(!t&&e&&(e.currentScript&&(t=e.currentScript.src),!t)){var n=e.getElementsByTagName("script");if(n.length)for(var i=n.length-1;i>-1&&!t;)t=n[i--].src}if(!t)throw new Error("Automatic publicPath is not supported in this browser");t=t.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),r.p=t})(),r.b=self.location.href,(()=>{"use strict";r(1983);var t,e=(t=r(115))&&t.__esModule?t:{default:t};e.default._babelPolyfill&&"undefined"!=typeof console&&console.warn&&console.warn("@babel/polyfill is loaded more than once on this page. This is probably not desirable/intended and may have consequences if different versions of the polyfills are applied sequentially. If you do need to load the polyfill more than once, use @babel/polyfill/noConflict instead to bypass the warning."),e.default._babelPolyfill=!0})(),(()=>{"use strict";var t=r(6086),e=r(9138),n=r(97),i=r(3368),o=r(6992),s=r(3150),a=r(430);function c(t){return c="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},c(t)}function u(){/*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */u=function(){return t};var t={},e=Object.prototype,r=e.hasOwnProperty,n=Object.defineProperty||function(t,e,r){t[e]=r.value},i="function"==typeof Symbol?Symbol:{},o=i.iterator||"@@iterator",s=i.asyncIterator||"@@asyncIterator",a=i.toStringTag||"@@toStringTag";function l(t,e,r){return Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}),t[e]}try{l({},"")}catch(t){l=function(t,e,r){return t[e]=r}}function h(t,e,r,i){var o=e&&e.prototype instanceof p?e:p,s=Object.create(o.prototype),a=new T(i||[]);return n(s,"_invoke",{value:_(t,r,a)}),s}function f(t,e,r){try{return{type:"normal",arg:t.call(e,r)}}catch(t){return{type:"throw",arg:t}}}t.wrap=h;var d={};function p(){}function g(){}function m(){}var y={};l(y,o,(function(){return this}));var v=Object.getPrototypeOf,b=v&&v(v(k([])));b&&b!==e&&r.call(b,o)&&(y=b);var w=m.prototype=p.prototype=Object.create(y);function S(t){["next","throw","return"].forEach((function(e){l(t,e,(function(t){return this._invoke(e,t)}))}))}function x(t,e){function i(n,o,s,a){var u=f(t[n],t,o);if("throw"!==u.type){var l=u.arg,h=l.value;return h&&"object"==c(h)&&r.call(h,"__await")?e.resolve(h.__await).then((function(t){i("next",t,s,a)}),(function(t){i("throw",t,s,a)})):e.resolve(h).then((function(t){l.value=t,s(l)}),(function(t){return i("throw",t,s,a)}))}a(u.arg)}var o;n(this,"_invoke",{value:function(t,r){function n(){return new e((function(e,n){i(t,r,e,n)}))}return o=o?o.then(n,n):n()}})}function _(t,e,r){var n="suspendedStart";return function(i,o){if("executing"===n)throw new Error("Generator is already running");if("completed"===n){if("throw"===i)throw o;return N()}for(r.method=i,r.arg=o;;){var s=r.delegate;if(s){var a=A(s,r);if(a){if(a===d)continue;return a}}if("next"===r.method)r.sent=r._sent=r.arg;else if("throw"===r.method){if("suspendedStart"===n)throw n="completed",r.arg;r.dispatchException(r.arg)}else"return"===r.method&&r.abrupt("return",r.arg);n="executing";var c=f(t,e,r);if("normal"===c.type){if(n=r.done?"completed":"suspendedYield",c.arg===d)continue;return{value:c.arg,done:r.done}}"throw"===c.type&&(n="completed",r.method="throw",r.arg=c.arg)}}}function A(t,e){var r=e.method,n=t.iterator[r];if(void 0===n)return e.delegate=null,"throw"===r&&t.iterator.return&&(e.method="return",e.arg=void 0,A(t,e),"throw"===e.method)||"return"!==r&&(e.method="throw",e.arg=new TypeError("The iterator does not provide a '"+r+"' method")),d;var i=f(n,t.iterator,e.arg);if("throw"===i.type)return e.method="throw",e.arg=i.arg,e.delegate=null,d;var o=i.arg;return o?o.done?(e[t.resultName]=o.value,e.next=t.nextLoc,"return"!==e.method&&(e.method="next",e.arg=void 0),e.delegate=null,d):o:(e.method="throw",e.arg=new TypeError("iterator result is not an object"),e.delegate=null,d)}function E(t){var e={tryLoc:t[0]};1 in t&&(e.catchLoc=t[1]),2 in t&&(e.finallyLoc=t[2],e.afterLoc=t[3]),this.tryEntries.push(e)}function C(t){var e=t.completion||{};e.type="normal",delete e.arg,t.completion=e}function T(t){this.tryEntries=[{tryLoc:"root"}],t.forEach(E,this),this.reset(!0)}function k(t){if(t){var e=t[o];if(e)return e.call(t);if("function"==typeof t.next)return t;if(!isNaN(t.length)){var n=-1,i=function e(){for(;++n<t.length;)if(r.call(t,n))return e.value=t[n],e.done=!1,e;return e.value=void 0,e.done=!0,e};return i.next=i}}return{next:N}}function N(){return{value:void 0,done:!0}}return g.prototype=m,n(w,"constructor",{value:m,configurable:!0}),n(m,"constructor",{value:g,configurable:!0}),g.displayName=l(m,a,"GeneratorFunction"),t.isGeneratorFunction=function(t){var e="function"==typeof t&&t.constructor;return!!e&&(e===g||"GeneratorFunction"===(e.displayName||e.name))},t.mark=function(t){return Object.setPrototypeOf?Object.setPrototypeOf(t,m):(t.__proto__=m,l(t,a,"GeneratorFunction")),t.prototype=Object.create(w),t},t.awrap=function(t){return{__await:t}},S(x.prototype),l(x.prototype,s,(function(){return this})),t.AsyncIterator=x,t.async=function(e,r,n,i,o){void 0===o&&(o=Promise);var s=new x(h(e,r,n,i),o);return t.isGeneratorFunction(r)?s:s.next().then((function(t){return t.done?t.value:s.next()}))},S(w),l(w,a,"Generator"),l(w,o,(function(){return this})),l(w,"toString",(function(){return"[object Generator]"})),t.keys=function(t){var e=Object(t),r=[];for(var n in e)r.push(n);return r.reverse(),function t(){for(;r.length;){var n=r.pop();if(n in e)return t.value=n,t.done=!1,t}return t.done=!0,t}},t.values=k,T.prototype={constructor:T,reset:function(t){if(this.prev=0,this.next=0,this.sent=this._sent=void 0,this.done=!1,this.delegate=null,this.method="next",this.arg=void 0,this.tryEntries.forEach(C),!t)for(var e in this)"t"===e.charAt(0)&&r.call(this,e)&&!isNaN(+e.slice(1))&&(this[e]=void 0)},stop:function(){this.done=!0;var t=this.tryEntries[0].completion;if("throw"===t.type)throw t.arg;return this.rval},dispatchException:function(t){if(this.done)throw t;var e=this;function n(r,n){return s.type="throw",s.arg=t,e.next=r,n&&(e.method="next",e.arg=void 0),!!n}for(var i=this.tryEntries.length-1;i>=0;--i){var o=this.tryEntries[i],s=o.completion;if("root"===o.tryLoc)return n("end");if(o.tryLoc<=this.prev){var a=r.call(o,"catchLoc"),c=r.call(o,"finallyLoc");if(a&&c){if(this.prev<o.catchLoc)return n(o.catchLoc,!0);if(this.prev<o.finallyLoc)return n(o.finallyLoc)}else if(a){if(this.prev<o.catchLoc)return n(o.catchLoc,!0)}else{if(!c)throw new Error("try statement without catch or finally");if(this.prev<o.finallyLoc)return n(o.finallyLoc)}}}},abrupt:function(t,e){for(var n=this.tryEntries.length-1;n>=0;--n){var i=this.tryEntries[n];if(i.tryLoc<=this.prev&&r.call(i,"finallyLoc")&&this.prev<i.finallyLoc){var o=i;break}}o&&("break"===t||"continue"===t)&&o.tryLoc<=e&&e<=o.finallyLoc&&(o=null);var s=o?o.completion:{};return s.type=t,s.arg=e,o?(this.method="next",this.next=o.finallyLoc,d):this.complete(s)},complete:function(t,e){if("throw"===t.type)throw t.arg;return"break"===t.type||"continue"===t.type?this.next=t.arg:"return"===t.type?(this.rval=this.arg=t.arg,this.method="return",this.next="end"):"normal"===t.type&&e&&(this.next=e),d},finish:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var r=this.tryEntries[e];if(r.finallyLoc===t)return this.complete(r.completion,r.afterLoc),C(r),d}},catch:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var r=this.tryEntries[e];if(r.tryLoc===t){var n=r.completion;if("throw"===n.type){var i=n.arg;C(r)}return i}}throw new Error("illegal catch attempt")},delegateYield:function(t,e,r){return this.delegate={iterator:k(t),resultName:e,nextLoc:r},"next"===this.method&&(this.arg=void 0),d}},t}function l(t,e,r,n,i,o,s){try{var a=t[o](s),c=a.value}catch(t){return void r(t)}a.done?e(c):Promise.resolve(c).then(n,i)}(0,o.x)(),console.log("bg script running");var h=!1,f=0;function d(){var e=Date.now();h||e-f<3e4||(h=!0,(0,n.lc)().then((function(e){e&&chrome.storage.local.remove("error_status",(function(){(0,t.SV)()}))})).finally((function(){h=!1,f=Date.now()})))}function p(t){chrome.storage.sync.get(["user_initial_lookup_done"],(function(r){var n=r.user_initial_lookup_done||{};n[t]||(n[t]=!0,chrome.storage.sync.set({user_initial_lookup_done:n},(function(){try{(0,e.O)()}catch(t){console.log("Immediate lookup failed to start:",t)}})))}))}chrome.tabs.onUpdated.addListener((function(t,e,r){"complete"===e.status&&r&&r.url&&r.url.match(/^https?:\/\/[^/]*\.reddit\.com\//)&&(0,n.IY)().then((function(){chrome.storage.local.get(["error_status"],(function(t){t&&t.error_status&&d()}))}))})),chrome.cookies.onChanged.addListener((function(t){var e=t.cookie;e&&e.domain&&e.domain.replace(/^\./,"").endsWith("reddit.com")&&(0,n.IY)().then((function(){chrome.storage.local.get(["error_status"],(function(t){t&&t.error_status&&d()}))}))})),chrome.runtime.onMessage.addListener((function(e,r,i){if("open-options"==e.action)return(0,t.Fm)(),i({response:"done"}),!0;if("update-badge"==e.action)return(0,t.SV)(),i({response:"done"}),!0;if("create-notification"==e.action)return console.log("Background script received create-notification request:",e.options),(0,t.sc)(e.options),!0;if("get-cookie"===e.action)return(0,n.ej)(e.options).then((function(t){i({response:"done",cookie:t})})),!0;if("get-reddit-items-by-id"==e.action)return chrome.storage.sync.get(["options"],(function(t){(t.options&&t.options.custom_clientid&&""!==t.options.custom_clientid?(0,n.v0)():Promise.resolve("none")).then((function(t){return(0,n.my)(e.ids,t,e.monitor_quarantined)})).then((function(t){i({response:"done",items:t})})).catch((function(t){console.log("Error in get-reddit-items-by-id:",t),i({response:"done",items:null})}))})),!0;if("store-reddit-cookies"===e.action)return(0,n.IY)(),i({response:"done"}),!0;if("get-logged-in-user-items"==e.action)return!0;if("get-from-old"===e.action)return(0,a.G)(e.path).then((function(t){i(t)})),!0;if("immediate-user-lookup"===e.action){var o=e.user;return o&&p(o),i({response:"done"}),!0}})),chrome.runtime.onMessageExternal.addListener((function(t,e,r){switch(t.action){case"fetch-old":(0,a.V)(t.path).then((function(t){r({data:t})}));break;case"version":r({version:chrome.runtime.getManifest().version})}return!0})),chrome.runtime.onInstalled.addListener((function(e){if("install"==e.reason){(0,i.WT)((function(){(0,t.yK)(i.Bz),(0,n.lc)().then((function(t){t?(0,i.CU)(t,(function(){p(t),chrome.tabs.create({url:"https://www.reveddit.com/user/".concat(t,"?all=true")})})):s.tabs.create({url:"https://www.reddit.com/user/me"}).then((function(t){var e=function(){s.tabs.sendMessage(t.id,{action:"query-user"}).catch((function(t){console.log("Error sending message to new tab:",t)}))},r=function r(n,i){n===t.id&&"complete"===i.status&&(chrome.tabs.onUpdated.removeListener(r),e())};chrome.tabs.onUpdated.addListener(r),setTimeout((function(){try{chrome.tabs.onUpdated.removeListener(r)}catch(t){}e()}),5e3)}))})),(0,t.SV)()}));chrome.runtime.setUninstallURL&&chrome.runtime.setUninstallURL("https://docs.google.com/forms/d/e/1FAIpQLSejWHJAf8thfMdTnnEc5xZPlsdxA_dGUkbmnDq8PABVMkvARg/viewform")}else"update"==e.reason&&(0,t.SV)()}));var g=function(e){var r="other"!==e;chrome.storage.sync.get(null,(function(n){var o=(0,i.n7)(e,r,n),a=null;r&&n.user_subscriptions[e]?a=chrome.runtime.getURL("src/history.html"):r||(a="/src/other.html",o.length&&(a="https://www.reveddit.com/info?id=".concat(o.join(","),"&removal_status=all"))),a&&((0,i.Sy)(n,e,r),s.storage.sync.set(n).then((function(e){(0,t.SV)(),(0,t.ZW)(a)})))}))};chrome.notifications.onClicked.addListener((function(t){var e=(t||"").split("|")[0];g(e),chrome.notifications.clear(t)})),self.addEventListener("notificationclick",(function(t){g(t.notification.data),t.notification.close()}));var m,y,v=0;chrome.extension.inIncognitoContext||((m=u().mark((function e(){var r,n,o;return u().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:r=0;case 1:return e.next=4,new Promise((function(t){return setTimeout(t,65e3)}));case 4:if(n=Date.now(),o=n-v,console.log("lostEventsWatchdog: last alarm ".concat(o/1e3,"s ago")),!(o<95e3)){e.next=11;break}r=0,e.next=17;break;case 11:if(!(++r>=3)){e.next=16;break}return console.error("lostEventsWatchdog: reloading!"),e.abrupt("return",chrome.runtime.reload());case 16:(0,t.yK)(i.Bz);case 17:e.next=1;break;case 19:case"end":return e.stop()}}),e)})),y=function(){var t=this,e=arguments;return new Promise((function(r,n){var i=m.apply(t,e);function o(t){l(i,r,n,o,s,"next",t)}function s(t){l(i,r,n,o,s,"throw",t)}o(void 0)}))},function(){return y.apply(this,arguments)})(),chrome.alarms.onAlarm.addListener((function(r){r.name==t.Vo&&(v=Date.now(),(0,e.O)())})))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,