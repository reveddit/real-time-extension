(()=>{var t={1983:(t,r,e)=>{"use strict";e(6266),e(990),e(911),e(4160),e(6197),e(6728),e(4039),e(3568),e(8051),e(8250),e(5434),e(4952),e(6337),e(5666)},6266:(t,r,e)=>{e(5767),e(8132),e(8388),e(7470),e(4882),e(1520),e(7476),e(9622),e(9375),e(3533),e(4672),e(4157),e(5095),e(9892),e(5115),e(9176),e(8838),e(6253),e(9730),e(6059),e(8377),e(1084),e(4299),e(1246),e(726),e(1901),e(5972),e(3403),e(2516),e(9371),e(6479),e(1736),e(1889),e(5177),e(6943),e(6503),e(6786),e(932),e(7526),e(1591),e(9073),e(347),e(579),e(4669),e(7710),e(5789),e(3514),e(9978),e(8472),e(6946),e(5068),e(413),e(191),e(8306),e(4564),e(9115),e(9539),e(6620),e(2850),e(823),e(7732),e(856),e(703),e(1539),e(5292),e(6629),e(3694),e(7648),e(7795),e(4531),e(3605),e(6780),e(9937),e(511),e(1822),e(9977),e(1031),e(6331),e(1560),e(774),e(522),e(8295),e(7842),e(110),e(75),e(4336),e(1802),e(8837),e(6773),e(5745),e(3057),e(3750),e(3369),e(9564),e(2e3),e(8977),e(2310),e(4899),e(1842),e(6997),e(3946),e(8269),e(6108),e(6774),e(1466),e(9357),e(6142),e(1876),e(851),e(8416),e(8184),e(147),e(9192),e(142),e(1786),e(5368),e(6964),e(2152),e(4821),e(9103),e(1303),e(3318),e(162),e(3834),e(1572),e(2139),e(685),e(5535),e(7347),e(3049),e(6633),e(8989),e(8270),e(4510),e(3984),e(5769),e(55),e(6014),t.exports=e(5645)},911:(t,r,e)=>{e(1268),t.exports=e(5645).Array.flatMap},990:(t,r,e)=>{e(2773),t.exports=e(5645).Array.includes},5434:(t,r,e)=>{e(3276),t.exports=e(5645).Object.entries},8051:(t,r,e)=>{e(8351),t.exports=e(5645).Object.getOwnPropertyDescriptors},8250:(t,r,e)=>{e(6409),t.exports=e(5645).Object.values},4952:(t,r,e)=>{"use strict";e(851),e(9865),t.exports=e(5645).Promise.finally},6197:(t,r,e)=>{e(2770),t.exports=e(5645).String.padEnd},4160:(t,r,e)=>{e(1784),t.exports=e(5645).String.padStart},4039:(t,r,e)=>{e(4325),t.exports=e(5645).String.trimRight},6728:(t,r,e)=>{e(5869),t.exports=e(5645).String.trimLeft},3568:(t,r,e)=>{e(9665),t.exports=e(8787).f("asyncIterator")},115:(t,r,e)=>{e(4579),t.exports=e(1327).global},5663:t=>{t.exports=function(t){if("function"!=typeof t)throw TypeError(t+" is not a function!");return t}},2159:(t,r,e)=>{var n=e(6727);t.exports=function(t){if(!n(t))throw TypeError(t+" is not an object!");return t}},1327:t=>{var r=t.exports={version:"2.6.12"};"number"==typeof __e&&(__e=r)},9216:(t,r,e)=>{var n=e(5663);t.exports=function(t,r,e){if(n(t),void 0===r)return t;switch(e){case 1:return function(e){return t.call(r,e)};case 2:return function(e,n){return t.call(r,e,n)};case 3:return function(e,n,o){return t.call(r,e,n,o)}}return function(){return t.apply(r,arguments)}}},9666:(t,r,e)=>{t.exports=!e(7929)((function(){return 7!=Object.defineProperty({},"a",{get:function(){return 7}}).a}))},7467:(t,r,e)=>{var n=e(6727),o=e(3938).document,i=n(o)&&n(o.createElement);t.exports=function(t){return i?o.createElement(t):{}}},3856:(t,r,e)=>{var n=e(3938),o=e(1327),i=e(9216),a=e(1818),c=e(7069),u="prototype",s=function(t,r,e){var f,l,h,v=t&s.F,p=t&s.G,g=t&s.S,d=t&s.P,m=t&s.B,y=t&s.W,b=p?o:o[r]||(o[r]={}),w=b[u],x=p?n:g?n[r]:(n[r]||{})[u];for(f in p&&(e=r),e)(l=!v&&x&&void 0!==x[f])&&c(b,f)||(h=l?x[f]:e[f],b[f]=p&&"function"!=typeof x[f]?e[f]:m&&l?i(h,n):y&&x[f]==h?function(t){var r=function(r,e,n){if(this instanceof t){switch(arguments.length){case 0:return new t;case 1:return new t(r);case 2:return new t(r,e)}return new t(r,e,n)}return t.apply(this,arguments)};return r[u]=t[u],r}(h):d&&"function"==typeof h?i(Function.call,h):h,d&&((b.virtual||(b.virtual={}))[f]=h,t&s.R&&w&&!w[f]&&a(w,f,h)))};s.F=1,s.G=2,s.S=4,s.P=8,s.B=16,s.W=32,s.U=64,s.R=128,t.exports=s},7929:t=>{t.exports=function(t){try{return!!t()}catch(t){return!0}}},3938:t=>{var r=t.exports="undefined"!=typeof window&&window.Math==Math?window:"undefined"!=typeof self&&self.Math==Math?self:Function("return this")();"number"==typeof __g&&(__g=r)},7069:t=>{var r={}.hasOwnProperty;t.exports=function(t,e){return r.call(t,e)}},1818:(t,r,e)=>{var n=e(4743),o=e(3101);t.exports=e(9666)?function(t,r,e){return n.f(t,r,o(1,e))}:function(t,r,e){return t[r]=e,t}},3758:(t,r,e)=>{t.exports=!e(9666)&&!e(7929)((function(){return 7!=Object.defineProperty(e(7467)("div"),"a",{get:function(){return 7}}).a}))},6727:t=>{t.exports=function(t){return"object"==typeof t?null!==t:"function"==typeof t}},4743:(t,r,e)=>{var n=e(2159),o=e(3758),i=e(3206),a=Object.defineProperty;r.f=e(9666)?Object.defineProperty:function(t,r,e){if(n(t),r=i(r,!0),n(e),o)try{return a(t,r,e)}catch(t){}if("get"in e||"set"in e)throw TypeError("Accessors not supported!");return"value"in e&&(t[r]=e.value),t}},3101:t=>{t.exports=function(t,r){return{enumerable:!(1&t),configurable:!(2&t),writable:!(4&t),value:r}}},3206:(t,r,e)=>{var n=e(6727);t.exports=function(t,r){if(!n(t))return t;var e,o;if(r&&"function"==typeof(e=t.toString)&&!n(o=e.call(t)))return o;if("function"==typeof(e=t.valueOf)&&!n(o=e.call(t)))return o;if(!r&&"function"==typeof(e=t.toString)&&!n(o=e.call(t)))return o;throw TypeError("Can't convert object to primitive value")}},4579:(t,r,e)=>{var n=e(3856);n(n.G,{global:e(3938)})},4963:t=>{t.exports=function(t){if("function"!=typeof t)throw TypeError(t+" is not a function!");return t}},3365:(t,r,e)=>{var n=e(2032);t.exports=function(t,r){if("number"!=typeof t&&"Number"!=n(t))throw TypeError(r);return+t}},7722:(t,r,e)=>{var n=e(6314)("unscopables"),o=Array.prototype;null==o[n]&&e(7728)(o,n,{}),t.exports=function(t){o[n][t]=!0}},6793:(t,r,e)=>{"use strict";var n=e(4496)(!0);t.exports=function(t,r,e){return r+(e?n(t,r).length:1)}},3328:t=>{t.exports=function(t,r,e,n){if(!(t instanceof r)||void 0!==n&&n in t)throw TypeError(e+": incorrect invocation!");return t}},7007:(t,r,e)=>{var n=e(5286);t.exports=function(t){if(!n(t))throw TypeError(t+" is not an object!");return t}},5216:(t,r,e)=>{"use strict";var n=e(508),o=e(2337),i=e(875);t.exports=[].copyWithin||function(t,r){var e=n(this),a=i(e.length),c=o(t,a),u=o(r,a),s=arguments.length>2?arguments[2]:void 0,f=Math.min((void 0===s?a:o(s,a))-u,a-c),l=1;for(u<c&&c<u+f&&(l=-1,u+=f-1,c+=f-1);f-- >0;)u in e?e[c]=e[u]:delete e[c],c+=l,u+=l;return e}},6852:(t,r,e)=>{"use strict";var n=e(508),o=e(2337),i=e(875);t.exports=function(t){for(var r=n(this),e=i(r.length),a=arguments.length,c=o(a>1?arguments[1]:void 0,e),u=a>2?arguments[2]:void 0,s=void 0===u?e:o(u,e);s>c;)r[c++]=t;return r}},9315:(t,r,e)=>{var n=e(2110),o=e(875),i=e(2337);t.exports=function(t){return function(r,e,a){var c,u=n(r),s=o(u.length),f=i(a,s);if(t&&e!=e){for(;s>f;)if((c=u[f++])!=c)return!0}else for(;s>f;f++)if((t||f in u)&&u[f]===e)return t||f||0;return!t&&-1}}},50:(t,r,e)=>{var n=e(741),o=e(9797),i=e(508),a=e(875),c=e(6886);t.exports=function(t,r){var e=1==t,u=2==t,s=3==t,f=4==t,l=6==t,h=5==t||l,v=r||c;return function(r,c,p){for(var g,d,m=i(r),y=o(m),b=n(c,p,3),w=a(y.length),x=0,A=e?v(r,w):u?v(r,0):void 0;w>x;x++)if((h||x in y)&&(d=b(g=y[x],x,m),t))if(e)A[x]=d;else if(d)switch(t){case 3:return!0;case 5:return g;case 6:return x;case 2:A.push(g)}else if(f)return!1;return l?-1:s||f?f:A}}},7628:(t,r,e)=>{var n=e(4963),o=e(508),i=e(9797),a=e(875);t.exports=function(t,r,e,c,u){n(r);var s=o(t),f=i(s),l=a(s.length),h=u?l-1:0,v=u?-1:1;if(e<2)for(;;){if(h in f){c=f[h],h+=v;break}if(h+=v,u?h<0:l<=h)throw TypeError("Reduce of empty array with no initial value")}for(;u?h>=0:l>h;h+=v)h in f&&(c=r(c,f[h],h,s));return c}},2736:(t,r,e)=>{var n=e(5286),o=e(4302),i=e(6314)("species");t.exports=function(t){var r;return o(t)&&("function"!=typeof(r=t.constructor)||r!==Array&&!o(r.prototype)||(r=void 0),n(r)&&null===(r=r[i])&&(r=void 0)),void 0===r?Array:r}},6886:(t,r,e)=>{var n=e(2736);t.exports=function(t,r){return new(n(t))(r)}},4398:(t,r,e)=>{"use strict";var n=e(4963),o=e(5286),i=e(7242),a=[].slice,c={};t.exports=Function.bind||function(t){var r=n(this),e=a.call(arguments,1),u=function(){var n=e.concat(a.call(arguments));return this instanceof u?function(t,r,e){if(!(r in c)){for(var n=[],o=0;o<r;o++)n[o]="a["+o+"]";c[r]=Function("F,a","return new F("+n.join(",")+")")}return c[r](t,e)}(r,n.length,n):i(r,n,t)};return o(r.prototype)&&(u.prototype=r.prototype),u}},1488:(t,r,e)=>{var n=e(2032),o=e(6314)("toStringTag"),i="Arguments"==n(function(){return arguments}());t.exports=function(t){var r,e,a;return void 0===t?"Undefined":null===t?"Null":"string"==typeof(e=function(t,r){try{return t[r]}catch(t){}}(r=Object(t),o))?e:i?n(r):"Object"==(a=n(r))&&"function"==typeof r.callee?"Arguments":a}},2032:t=>{var r={}.toString;t.exports=function(t){return r.call(t).slice(8,-1)}},9824:(t,r,e)=>{"use strict";var n=e(9275).f,o=e(2503),i=e(4408),a=e(741),c=e(3328),u=e(3531),s=e(2923),f=e(5436),l=e(2974),h=e(7057),v=e(4728).fastKey,p=e(1616),g=h?"_s":"size",d=function(t,r){var e,n=v(r);if("F"!==n)return t._i[n];for(e=t._f;e;e=e.n)if(e.k==r)return e};t.exports={getConstructor:function(t,r,e,s){var f=t((function(t,n){c(t,f,r,"_i"),t._t=r,t._i=o(null),t._f=void 0,t._l=void 0,t[g]=0,null!=n&&u(n,e,t[s],t)}));return i(f.prototype,{clear:function(){for(var t=p(this,r),e=t._i,n=t._f;n;n=n.n)n.r=!0,n.p&&(n.p=n.p.n=void 0),delete e[n.i];t._f=t._l=void 0,t[g]=0},delete:function(t){var e=p(this,r),n=d(e,t);if(n){var o=n.n,i=n.p;delete e._i[n.i],n.r=!0,i&&(i.n=o),o&&(o.p=i),e._f==n&&(e._f=o),e._l==n&&(e._l=i),e[g]--}return!!n},forEach:function(t){p(this,r);for(var e,n=a(t,arguments.length>1?arguments[1]:void 0,3);e=e?e.n:this._f;)for(n(e.v,e.k,this);e&&e.r;)e=e.p},has:function(t){return!!d(p(this,r),t)}}),h&&n(f.prototype,"size",{get:function(){return p(this,r)[g]}}),f},def:function(t,r,e){var n,o,i=d(t,r);return i?i.v=e:(t._l=i={i:o=v(r,!0),k:r,v:e,p:n=t._l,n:void 0,r:!1},t._f||(t._f=i),n&&(n.n=i),t[g]++,"F"!==o&&(t._i[o]=i)),t},getEntry:d,setStrong:function(t,r,e){s(t,r,(function(t,e){this._t=p(t,r),this._k=e,this._l=void 0}),(function(){for(var t=this,r=t._k,e=t._l;e&&e.r;)e=e.p;return t._t&&(t._l=e=e?e.n:t._t._f)?f(0,"keys"==r?e.k:"values"==r?e.v:[e.k,e.v]):(t._t=void 0,f(1))}),e?"entries":"values",!e,!0),l(r)}}},3657:(t,r,e)=>{"use strict";var n=e(4408),o=e(4728).getWeak,i=e(7007),a=e(5286),c=e(3328),u=e(3531),s=e(50),f=e(9181),l=e(1616),h=s(5),v=s(6),p=0,g=function(t){return t._l||(t._l=new d)},d=function(){this.a=[]},m=function(t,r){return h(t.a,(function(t){return t[0]===r}))};d.prototype={get:function(t){var r=m(this,t);if(r)return r[1]},has:function(t){return!!m(this,t)},set:function(t,r){var e=m(this,t);e?e[1]=r:this.a.push([t,r])},delete:function(t){var r=v(this.a,(function(r){return r[0]===t}));return~r&&this.a.splice(r,1),!!~r}},t.exports={getConstructor:function(t,r,e,i){var s=t((function(t,n){c(t,s,r,"_i"),t._t=r,t._i=p++,t._l=void 0,null!=n&&u(n,e,t[i],t)}));return n(s.prototype,{delete:function(t){if(!a(t))return!1;var e=o(t);return!0===e?g(l(this,r)).delete(t):e&&f(e,this._i)&&delete e[this._i]},has:function(t){if(!a(t))return!1;var e=o(t);return!0===e?g(l(this,r)).has(t):e&&f(e,this._i)}}),s},def:function(t,r,e){var n=o(i(r),!0);return!0===n?g(t).set(r,e):n[t._i]=e,t},ufstore:g}},5795:(t,r,e)=>{"use strict";var n=e(3816),o=e(2985),i=e(7234),a=e(4408),c=e(4728),u=e(3531),s=e(3328),f=e(5286),l=e(4253),h=e(7462),v=e(2943),p=e(266);t.exports=function(t,r,e,g,d,m){var y=n[t],b=y,w=d?"set":"add",x=b&&b.prototype,A={},S=function(t){var r=x[t];i(x,t,"delete"==t||"has"==t?function(t){return!(m&&!f(t))&&r.call(this,0===t?0:t)}:"get"==t?function(t){return m&&!f(t)?void 0:r.call(this,0===t?0:t)}:"add"==t?function(t){return r.call(this,0===t?0:t),this}:function(t,e){return r.call(this,0===t?0:t,e),this})};if("function"==typeof b&&(m||x.forEach&&!l((function(){(new b).entries().next()})))){var _=new b,O=_[w](m?{}:-0,1)!=_,E=l((function(){_.has(1)})),j=h((function(t){new b(t)})),P=!m&&l((function(){for(var t=new b,r=5;r--;)t[w](r,r);return!t.has(-0)}));j||((b=r((function(r,e){s(r,b,t);var n=p(new y,r,b);return null!=e&&u(e,d,n[w],n),n}))).prototype=x,x.constructor=b),(E||P)&&(S("delete"),S("has"),d&&S("get")),(P||O)&&S(w),m&&x.clear&&delete x.clear}else b=g.getConstructor(r,t,d,w),a(b.prototype,e),c.NEED=!0;return v(b,t),A[t]=b,o(o.G+o.W+o.F*(b!=y),A),m||g.setStrong(b,t,d),b}},5645:t=>{var r=t.exports={version:"2.6.12"};"number"==typeof __e&&(__e=r)},2811:(t,r,e)=>{"use strict";var n=e(9275),o=e(681);t.exports=function(t,r,e){r in t?n.f(t,r,o(0,e)):t[r]=e}},741:(t,r,e)=>{var n=e(4963);t.exports=function(t,r,e){if(n(t),void 0===r)return t;switch(e){case 1:return function(e){return t.call(r,e)};case 2:return function(e,n){return t.call(r,e,n)};case 3:return function(e,n,o){return t.call(r,e,n,o)}}return function(){return t.apply(r,arguments)}}},3537:(t,r,e)=>{"use strict";var n=e(4253),o=Date.prototype.getTime,i=Date.prototype.toISOString,a=function(t){return t>9?t:"0"+t};t.exports=n((function(){return"0385-07-25T07:06:39.999Z"!=i.call(new Date(-50000000000001))}))||!n((function(){i.call(new Date(NaN))}))?function(){if(!isFinite(o.call(this)))throw RangeError("Invalid time value");var t=this,r=t.getUTCFullYear(),e=t.getUTCMilliseconds(),n=r<0?"-":r>9999?"+":"";return n+("00000"+Math.abs(r)).slice(n?-6:-4)+"-"+a(t.getUTCMonth()+1)+"-"+a(t.getUTCDate())+"T"+a(t.getUTCHours())+":"+a(t.getUTCMinutes())+":"+a(t.getUTCSeconds())+"."+(e>99?e:"0"+a(e))+"Z"}:i},870:(t,r,e)=>{"use strict";var n=e(7007),o=e(1689),i="number";t.exports=function(t){if("string"!==t&&t!==i&&"default"!==t)throw TypeError("Incorrect hint");return o(n(this),t!=i)}},1355:t=>{t.exports=function(t){if(null==t)throw TypeError("Can't call method on  "+t);return t}},7057:(t,r,e)=>{t.exports=!e(4253)((function(){return 7!=Object.defineProperty({},"a",{get:function(){return 7}}).a}))},2457:(t,r,e)=>{var n=e(5286),o=e(3816).document,i=n(o)&&n(o.createElement);t.exports=function(t){return i?o.createElement(t):{}}},4430:t=>{t.exports="constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf".split(",")},5541:(t,r,e)=>{var n=e(7184),o=e(4548),i=e(4682);t.exports=function(t){var r=n(t),e=o.f;if(e)for(var a,c=e(t),u=i.f,s=0;c.length>s;)u.call(t,a=c[s++])&&r.push(a);return r}},2985:(t,r,e)=>{var n=e(3816),o=e(5645),i=e(7728),a=e(7234),c=e(741),u="prototype",s=function(t,r,e){var f,l,h,v,p=t&s.F,g=t&s.G,d=t&s.S,m=t&s.P,y=t&s.B,b=g?n:d?n[r]||(n[r]={}):(n[r]||{})[u],w=g?o:o[r]||(o[r]={}),x=w[u]||(w[u]={});for(f in g&&(e=r),e)h=((l=!p&&b&&void 0!==b[f])?b:e)[f],v=y&&l?c(h,n):m&&"function"==typeof h?c(Function.call,h):h,b&&a(b,f,h,t&s.U),w[f]!=h&&i(w,f,v),m&&x[f]!=h&&(x[f]=h)};n.core=o,s.F=1,s.G=2,s.S=4,s.P=8,s.B=16,s.W=32,s.U=64,s.R=128,t.exports=s},8852:(t,r,e)=>{var n=e(6314)("match");t.exports=function(t){var r=/./;try{"/./"[t](r)}catch(e){try{return r[n]=!1,!"/./"[t](r)}catch(t){}}return!0}},4253:t=>{t.exports=function(t){try{return!!t()}catch(t){return!0}}},8082:(t,r,e)=>{"use strict";e(8269);var n=e(7234),o=e(7728),i=e(4253),a=e(1355),c=e(6314),u=e(1165),s=c("species"),f=!i((function(){var t=/./;return t.exec=function(){var t=[];return t.groups={a:"7"},t},"7"!=="".replace(t,"$<a>")})),l=function(){var t=/(?:)/,r=t.exec;t.exec=function(){return r.apply(this,arguments)};var e="ab".split(t);return 2===e.length&&"a"===e[0]&&"b"===e[1]}();t.exports=function(t,r,e){var h=c(t),v=!i((function(){var r={};return r[h]=function(){return 7},7!=""[t](r)})),p=v?!i((function(){var r=!1,e=/a/;return e.exec=function(){return r=!0,null},"split"===t&&(e.constructor={},e.constructor[s]=function(){return e}),e[h](""),!r})):void 0;if(!v||!p||"replace"===t&&!f||"split"===t&&!l){var g=/./[h],d=e(a,h,""[t],(function(t,r,e,n,o){return r.exec===u?v&&!o?{done:!0,value:g.call(r,e,n)}:{done:!0,value:t.call(e,r,n)}:{done:!1}})),m=d[0],y=d[1];n(String.prototype,t,m),o(RegExp.prototype,h,2==r?function(t,r){return y.call(t,this,r)}:function(t){return y.call(t,this)})}}},3218:(t,r,e)=>{"use strict";var n=e(7007);t.exports=function(){var t=n(this),r="";return t.global&&(r+="g"),t.ignoreCase&&(r+="i"),t.multiline&&(r+="m"),t.unicode&&(r+="u"),t.sticky&&(r+="y"),r}},3325:(t,r,e)=>{"use strict";var n=e(4302),o=e(5286),i=e(875),a=e(741),c=e(6314)("isConcatSpreadable");t.exports=function t(r,e,u,s,f,l,h,v){for(var p,g,d=f,m=0,y=!!h&&a(h,v,3);m<s;){if(m in u){if(p=y?y(u[m],m,e):u[m],g=!1,o(p)&&(g=void 0!==(g=p[c])?!!g:n(p)),g&&l>0)d=t(r,e,p,i(p.length),d,l-1)-1;else{if(d>=9007199254740991)throw TypeError();r[d]=p}d++}m++}return d}},3531:(t,r,e)=>{var n=e(741),o=e(8851),i=e(6555),a=e(7007),c=e(875),u=e(9002),s={},f={},l=t.exports=function(t,r,e,l,h){var v,p,g,d,m=h?function(){return t}:u(t),y=n(e,l,r?2:1),b=0;if("function"!=typeof m)throw TypeError(t+" is not iterable!");if(i(m)){for(v=c(t.length);v>b;b++)if((d=r?y(a(p=t[b])[0],p[1]):y(t[b]))===s||d===f)return d}else for(g=m.call(t);!(p=g.next()).done;)if((d=o(g,y,p.value,r))===s||d===f)return d};l.BREAK=s,l.RETURN=f},18:(t,r,e)=>{t.exports=e(3825)("native-function-to-string",Function.toString)},3816:t=>{var r=t.exports="undefined"!=typeof window&&window.Math==Math?window:"undefined"!=typeof self&&self.Math==Math?self:Function("return this")();"number"==typeof __g&&(__g=r)},9181:t=>{var r={}.hasOwnProperty;t.exports=function(t,e){return r.call(t,e)}},7728:(t,r,e)=>{var n=e(9275),o=e(681);t.exports=e(7057)?function(t,r,e){return n.f(t,r,o(1,e))}:function(t,r,e){return t[r]=e,t}},639:(t,r,e)=>{var n=e(3816).document;t.exports=n&&n.documentElement},1734:(t,r,e)=>{t.exports=!e(7057)&&!e(4253)((function(){return 7!=Object.defineProperty(e(2457)("div"),"a",{get:function(){return 7}}).a}))},266:(t,r,e)=>{var n=e(5286),o=e(7375).set;t.exports=function(t,r,e){var i,a=r.constructor;return a!==e&&"function"==typeof a&&(i=a.prototype)!==e.prototype&&n(i)&&o&&o(t,i),t}},7242:t=>{t.exports=function(t,r,e){var n=void 0===e;switch(r.length){case 0:return n?t():t.call(e);case 1:return n?t(r[0]):t.call(e,r[0]);case 2:return n?t(r[0],r[1]):t.call(e,r[0],r[1]);case 3:return n?t(r[0],r[1],r[2]):t.call(e,r[0],r[1],r[2]);case 4:return n?t(r[0],r[1],r[2],r[3]):t.call(e,r[0],r[1],r[2],r[3])}return t.apply(e,r)}},9797:(t,r,e)=>{var n=e(2032);t.exports=Object("z").propertyIsEnumerable(0)?Object:function(t){return"String"==n(t)?t.split(""):Object(t)}},6555:(t,r,e)=>{var n=e(2803),o=e(6314)("iterator"),i=Array.prototype;t.exports=function(t){return void 0!==t&&(n.Array===t||i[o]===t)}},4302:(t,r,e)=>{var n=e(2032);t.exports=Array.isArray||function(t){return"Array"==n(t)}},8367:(t,r,e)=>{var n=e(5286),o=Math.floor;t.exports=function(t){return!n(t)&&isFinite(t)&&o(t)===t}},5286:t=>{t.exports=function(t){return"object"==typeof t?null!==t:"function"==typeof t}},5364:(t,r,e)=>{var n=e(5286),o=e(2032),i=e(6314)("match");t.exports=function(t){var r;return n(t)&&(void 0!==(r=t[i])?!!r:"RegExp"==o(t))}},8851:(t,r,e)=>{var n=e(7007);t.exports=function(t,r,e,o){try{return o?r(n(e)[0],e[1]):r(e)}catch(r){var i=t.return;throw void 0!==i&&n(i.call(t)),r}}},9988:(t,r,e)=>{"use strict";var n=e(2503),o=e(681),i=e(2943),a={};e(7728)(a,e(6314)("iterator"),(function(){return this})),t.exports=function(t,r,e){t.prototype=n(a,{next:o(1,e)}),i(t,r+" Iterator")}},2923:(t,r,e)=>{"use strict";var n=e(4461),o=e(2985),i=e(7234),a=e(7728),c=e(2803),u=e(9988),s=e(2943),f=e(468),l=e(6314)("iterator"),h=!([].keys&&"next"in[].keys()),v="keys",p="values",g=function(){return this};t.exports=function(t,r,e,d,m,y,b){u(e,r,d);var w,x,A,S=function(t){if(!h&&t in j)return j[t];switch(t){case v:case p:return function(){return new e(this,t)}}return function(){return new e(this,t)}},_=r+" Iterator",O=m==p,E=!1,j=t.prototype,P=j[l]||j["@@iterator"]||m&&j[m],k=P||S(m),L=m?O?S("entries"):k:void 0,T="Array"==r&&j.entries||P;if(T&&(A=f(T.call(new t)))!==Object.prototype&&A.next&&(s(A,_,!0),n||"function"==typeof A[l]||a(A,l,g)),O&&P&&P.name!==p&&(E=!0,k=function(){return P.call(this)}),n&&!b||!h&&!E&&j[l]||a(j,l,k),c[r]=k,c[_]=g,m)if(w={values:O?k:S(p),keys:y?k:S(v),entries:L},b)for(x in w)x in j||i(j,x,w[x]);else o(o.P+o.F*(h||E),r,w);return w}},7462:(t,r,e)=>{var n=e(6314)("iterator"),o=!1;try{var i=[7][n]();i.return=function(){o=!0},Array.from(i,(function(){throw 2}))}catch(t){}t.exports=function(t,r){if(!r&&!o)return!1;var e=!1;try{var i=[7],a=i[n]();a.next=function(){return{done:e=!0}},i[n]=function(){return a},t(i)}catch(t){}return e}},5436:t=>{t.exports=function(t,r){return{value:r,done:!!t}}},2803:t=>{t.exports={}},4461:t=>{t.exports=!1},3086:t=>{var r=Math.expm1;t.exports=!r||r(10)>22025.465794806718||r(10)<22025.465794806718||-2e-17!=r(-2e-17)?function(t){return 0==(t=+t)?t:t>-1e-6&&t<1e-6?t+t*t/2:Math.exp(t)-1}:r},4934:(t,r,e)=>{var n=e(1801),o=Math.pow,i=o(2,-52),a=o(2,-23),c=o(2,127)*(2-a),u=o(2,-126);t.exports=Math.fround||function(t){var r,e,o=Math.abs(t),s=n(t);return o<u?s*(o/u/a+1/i-1/i)*u*a:(e=(r=(1+a/i)*o)-(r-o))>c||e!=e?s*(1/0):s*e}},6206:t=>{t.exports=Math.log1p||function(t){return(t=+t)>-1e-8&&t<1e-8?t-t*t/2:Math.log(1+t)}},1801:t=>{t.exports=Math.sign||function(t){return 0==(t=+t)||t!=t?t:t<0?-1:1}},4728:(t,r,e)=>{var n=e(3953)("meta"),o=e(5286),i=e(9181),a=e(9275).f,c=0,u=Object.isExtensible||function(){return!0},s=!e(4253)((function(){return u(Object.preventExtensions({}))})),f=function(t){a(t,n,{value:{i:"O"+ ++c,w:{}}})},l=t.exports={KEY:n,NEED:!1,fastKey:function(t,r){if(!o(t))return"symbol"==typeof t?t:("string"==typeof t?"S":"P")+t;if(!i(t,n)){if(!u(t))return"F";if(!r)return"E";f(t)}return t[n].i},getWeak:function(t,r){if(!i(t,n)){if(!u(t))return!0;if(!r)return!1;f(t)}return t[n].w},onFreeze:function(t){return s&&l.NEED&&u(t)&&!i(t,n)&&f(t),t}}},4351:(t,r,e)=>{var n=e(3816),o=e(4193).set,i=n.MutationObserver||n.WebKitMutationObserver,a=n.process,c=n.Promise,u="process"==e(2032)(a);t.exports=function(){var t,r,e,s=function(){var n,o;for(u&&(n=a.domain)&&n.exit();t;){o=t.fn,t=t.next;try{o()}catch(n){throw t?e():r=void 0,n}}r=void 0,n&&n.enter()};if(u)e=function(){a.nextTick(s)};else if(!i||n.navigator&&n.navigator.standalone)if(c&&c.resolve){var f=c.resolve(void 0);e=function(){f.then(s)}}else e=function(){o.call(n,s)};else{var l=!0,h=document.createTextNode("");new i(s).observe(h,{characterData:!0}),e=function(){h.data=l=!l}}return function(n){var o={fn:n,next:void 0};r&&(r.next=o),t||(t=o,e()),r=o}}},3499:(t,r,e)=>{"use strict";var n=e(4963);function o(t){var r,e;this.promise=new t((function(t,n){if(void 0!==r||void 0!==e)throw TypeError("Bad Promise constructor");r=t,e=n})),this.resolve=n(r),this.reject=n(e)}t.exports.f=function(t){return new o(t)}},5345:(t,r,e)=>{"use strict";var n=e(7057),o=e(7184),i=e(4548),a=e(4682),c=e(508),u=e(9797),s=Object.assign;t.exports=!s||e(4253)((function(){var t={},r={},e=Symbol(),n="abcdefghijklmnopqrst";return t[e]=7,n.split("").forEach((function(t){r[t]=t})),7!=s({},t)[e]||Object.keys(s({},r)).join("")!=n}))?function(t,r){for(var e=c(t),s=arguments.length,f=1,l=i.f,h=a.f;s>f;)for(var v,p=u(arguments[f++]),g=l?o(p).concat(l(p)):o(p),d=g.length,m=0;d>m;)v=g[m++],n&&!h.call(p,v)||(e[v]=p[v]);return e}:s},2503:(t,r,e)=>{var n=e(7007),o=e(5588),i=e(4430),a=e(9335)("IE_PROTO"),c=function(){},u="prototype",s=function(){var t,r=e(2457)("iframe"),n=i.length;for(r.style.display="none",e(639).appendChild(r),r.src="javascript:",(t=r.contentWindow.document).open(),t.write("<script>document.F=Object<\/script>"),t.close(),s=t.F;n--;)delete s[u][i[n]];return s()};t.exports=Object.create||function(t,r){var e;return null!==t?(c[u]=n(t),e=new c,c[u]=null,e[a]=t):e=s(),void 0===r?e:o(e,r)}},9275:(t,r,e)=>{var n=e(7007),o=e(1734),i=e(1689),a=Object.defineProperty;r.f=e(7057)?Object.defineProperty:function(t,r,e){if(n(t),r=i(r,!0),n(e),o)try{return a(t,r,e)}catch(t){}if("get"in e||"set"in e)throw TypeError("Accessors not supported!");return"value"in e&&(t[r]=e.value),t}},5588:(t,r,e)=>{var n=e(9275),o=e(7007),i=e(7184);t.exports=e(7057)?Object.defineProperties:function(t,r){o(t);for(var e,a=i(r),c=a.length,u=0;c>u;)n.f(t,e=a[u++],r[e]);return t}},8693:(t,r,e)=>{var n=e(4682),o=e(681),i=e(2110),a=e(1689),c=e(9181),u=e(1734),s=Object.getOwnPropertyDescriptor;r.f=e(7057)?s:function(t,r){if(t=i(t),r=a(r,!0),u)try{return s(t,r)}catch(t){}if(c(t,r))return o(!n.f.call(t,r),t[r])}},9327:(t,r,e)=>{var n=e(2110),o=e(616).f,i={}.toString,a="object"==typeof window&&window&&Object.getOwnPropertyNames?Object.getOwnPropertyNames(window):[];t.exports.f=function(t){return a&&"[object Window]"==i.call(t)?function(t){try{return o(t)}catch(t){return a.slice()}}(t):o(n(t))}},616:(t,r,e)=>{var n=e(189),o=e(4430).concat("length","prototype");r.f=Object.getOwnPropertyNames||function(t){return n(t,o)}},4548:(t,r)=>{r.f=Object.getOwnPropertySymbols},468:(t,r,e)=>{var n=e(9181),o=e(508),i=e(9335)("IE_PROTO"),a=Object.prototype;t.exports=Object.getPrototypeOf||function(t){return t=o(t),n(t,i)?t[i]:"function"==typeof t.constructor&&t instanceof t.constructor?t.constructor.prototype:t instanceof Object?a:null}},189:(t,r,e)=>{var n=e(9181),o=e(2110),i=e(9315)(!1),a=e(9335)("IE_PROTO");t.exports=function(t,r){var e,c=o(t),u=0,s=[];for(e in c)e!=a&&n(c,e)&&s.push(e);for(;r.length>u;)n(c,e=r[u++])&&(~i(s,e)||s.push(e));return s}},7184:(t,r,e)=>{var n=e(189),o=e(4430);t.exports=Object.keys||function(t){return n(t,o)}},4682:(t,r)=>{r.f={}.propertyIsEnumerable},3160:(t,r,e)=>{var n=e(2985),o=e(5645),i=e(4253);t.exports=function(t,r){var e=(o.Object||{})[t]||Object[t],a={};a[t]=r(e),n(n.S+n.F*i((function(){e(1)})),"Object",a)}},1131:(t,r,e)=>{var n=e(7057),o=e(7184),i=e(2110),a=e(4682).f;t.exports=function(t){return function(r){for(var e,c=i(r),u=o(c),s=u.length,f=0,l=[];s>f;)e=u[f++],n&&!a.call(c,e)||l.push(t?[e,c[e]]:c[e]);return l}}},7643:(t,r,e)=>{var n=e(616),o=e(4548),i=e(7007),a=e(3816).Reflect;t.exports=a&&a.ownKeys||function(t){var r=n.f(i(t)),e=o.f;return e?r.concat(e(t)):r}},7743:(t,r,e)=>{var n=e(3816).parseFloat,o=e(9599).trim;t.exports=1/n(e(4644)+"-0")!=-1/0?function(t){var r=o(String(t),3),e=n(r);return 0===e&&"-"==r.charAt(0)?-0:e}:n},5960:(t,r,e)=>{var n=e(3816).parseInt,o=e(9599).trim,i=e(4644),a=/^[-+]?0[xX]/;t.exports=8!==n(i+"08")||22!==n(i+"0x16")?function(t,r){var e=o(String(t),3);return n(e,r>>>0||(a.test(e)?16:10))}:n},188:t=>{t.exports=function(t){try{return{e:!1,v:t()}}catch(t){return{e:!0,v:t}}}},94:(t,r,e)=>{var n=e(7007),o=e(5286),i=e(3499);t.exports=function(t,r){if(n(t),o(r)&&r.constructor===t)return r;var e=i.f(t);return(0,e.resolve)(r),e.promise}},681:t=>{t.exports=function(t,r){return{enumerable:!(1&t),configurable:!(2&t),writable:!(4&t),value:r}}},4408:(t,r,e)=>{var n=e(7234);t.exports=function(t,r,e){for(var o in r)n(t,o,r[o],e);return t}},7234:(t,r,e)=>{var n=e(3816),o=e(7728),i=e(9181),a=e(3953)("src"),c=e(18),u="toString",s=(""+c).split(u);e(5645).inspectSource=function(t){return c.call(t)},(t.exports=function(t,r,e,c){var u="function"==typeof e;u&&(i(e,"name")||o(e,"name",r)),t[r]!==e&&(u&&(i(e,a)||o(e,a,t[r]?""+t[r]:s.join(String(r)))),t===n?t[r]=e:c?t[r]?t[r]=e:o(t,r,e):(delete t[r],o(t,r,e)))})(Function.prototype,u,(function(){return"function"==typeof this&&this[a]||c.call(this)}))},7787:(t,r,e)=>{"use strict";var n=e(1488),o=RegExp.prototype.exec;t.exports=function(t,r){var e=t.exec;if("function"==typeof e){var i=e.call(t,r);if("object"!=typeof i)throw new TypeError("RegExp exec method returned something other than an Object or null");return i}if("RegExp"!==n(t))throw new TypeError("RegExp#exec called on incompatible receiver");return o.call(t,r)}},1165:(t,r,e)=>{"use strict";var n,o,i=e(3218),a=RegExp.prototype.exec,c=String.prototype.replace,u=a,s="lastIndex",f=(n=/a/,o=/b*/g,a.call(n,"a"),a.call(o,"a"),0!==n[s]||0!==o[s]),l=void 0!==/()??/.exec("")[1];(f||l)&&(u=function(t){var r,e,n,o,u=this;return l&&(e=new RegExp("^"+u.source+"$(?!\\s)",i.call(u))),f&&(r=u[s]),n=a.call(u,t),f&&n&&(u[s]=u.global?n.index+n[0].length:r),l&&n&&n.length>1&&c.call(n[0],e,(function(){for(o=1;o<arguments.length-2;o++)void 0===arguments[o]&&(n[o]=void 0)})),n}),t.exports=u},7195:t=>{t.exports=Object.is||function(t,r){return t===r?0!==t||1/t==1/r:t!=t&&r!=r}},7375:(t,r,e)=>{var n=e(5286),o=e(7007),i=function(t,r){if(o(t),!n(r)&&null!==r)throw TypeError(r+": can't set as prototype!")};t.exports={set:Object.setPrototypeOf||("__proto__"in{}?function(t,r,n){try{(n=e(741)(Function.call,e(8693).f(Object.prototype,"__proto__").set,2))(t,[]),r=!(t instanceof Array)}catch(t){r=!0}return function(t,e){return i(t,e),r?t.__proto__=e:n(t,e),t}}({},!1):void 0),check:i}},2974:(t,r,e)=>{"use strict";var n=e(3816),o=e(9275),i=e(7057),a=e(6314)("species");t.exports=function(t){var r=n[t];i&&r&&!r[a]&&o.f(r,a,{configurable:!0,get:function(){return this}})}},2943:(t,r,e)=>{var n=e(9275).f,o=e(9181),i=e(6314)("toStringTag");t.exports=function(t,r,e){t&&!o(t=e?t:t.prototype,i)&&n(t,i,{configurable:!0,value:r})}},9335:(t,r,e)=>{var n=e(3825)("keys"),o=e(3953);t.exports=function(t){return n[t]||(n[t]=o(t))}},3825:(t,r,e)=>{var n=e(5645),o=e(3816),i="__core-js_shared__",a=o[i]||(o[i]={});(t.exports=function(t,r){return a[t]||(a[t]=void 0!==r?r:{})})("versions",[]).push({version:n.version,mode:e(4461)?"pure":"global",copyright:"© 2020 Denis Pushkarev (zloirock.ru)"})},8364:(t,r,e)=>{var n=e(7007),o=e(4963),i=e(6314)("species");t.exports=function(t,r){var e,a=n(t).constructor;return void 0===a||null==(e=n(a)[i])?r:o(e)}},7717:(t,r,e)=>{"use strict";var n=e(4253);t.exports=function(t,r){return!!t&&n((function(){r?t.call(null,(function(){}),1):t.call(null)}))}},4496:(t,r,e)=>{var n=e(1467),o=e(1355);t.exports=function(t){return function(r,e){var i,a,c=String(o(r)),u=n(e),s=c.length;return u<0||u>=s?t?"":void 0:(i=c.charCodeAt(u))<55296||i>56319||u+1===s||(a=c.charCodeAt(u+1))<56320||a>57343?t?c.charAt(u):i:t?c.slice(u,u+2):a-56320+(i-55296<<10)+65536}}},2094:(t,r,e)=>{var n=e(5364),o=e(1355);t.exports=function(t,r,e){if(n(r))throw TypeError("String#"+e+" doesn't accept regex!");return String(o(t))}},9395:(t,r,e)=>{var n=e(2985),o=e(4253),i=e(1355),a=/"/g,c=function(t,r,e,n){var o=String(i(t)),c="<"+r;return""!==e&&(c+=" "+e+'="'+String(n).replace(a,"&quot;")+'"'),c+">"+o+"</"+r+">"};t.exports=function(t,r){var e={};e[t]=r(c),n(n.P+n.F*o((function(){var r=""[t]('"');return r!==r.toLowerCase()||r.split('"').length>3})),"String",e)}},5442:(t,r,e)=>{var n=e(875),o=e(8595),i=e(1355);t.exports=function(t,r,e,a){var c=String(i(t)),u=c.length,s=void 0===e?" ":String(e),f=n(r);if(f<=u||""==s)return c;var l=f-u,h=o.call(s,Math.ceil(l/s.length));return h.length>l&&(h=h.slice(0,l)),a?h+c:c+h}},8595:(t,r,e)=>{"use strict";var n=e(1467),o=e(1355);t.exports=function(t){var r=String(o(this)),e="",i=n(t);if(i<0||i==1/0)throw RangeError("Count can't be negative");for(;i>0;(i>>>=1)&&(r+=r))1&i&&(e+=r);return e}},9599:(t,r,e)=>{var n=e(2985),o=e(1355),i=e(4253),a=e(4644),c="["+a+"]",u=RegExp("^"+c+c+"*"),s=RegExp(c+c+"*$"),f=function(t,r,e){var o={},c=i((function(){return!!a[t]()||"​"!="​"[t]()})),u=o[t]=c?r(l):a[t];e&&(o[e]=u),n(n.P+n.F*c,"String",o)},l=f.trim=function(t,r){return t=String(o(t)),1&r&&(t=t.replace(u,"")),2&r&&(t=t.replace(s,"")),t};t.exports=f},4644:t=>{t.exports="\t\n\v\f\r   ᠎             　\u2028\u2029\ufeff"},4193:(t,r,e)=>{var n,o,i,a=e(741),c=e(7242),u=e(639),s=e(2457),f=e(3816),l=f.process,h=f.setImmediate,v=f.clearImmediate,p=f.MessageChannel,g=f.Dispatch,d=0,m={},y="onreadystatechange",b=function(){var t=+this;if(m.hasOwnProperty(t)){var r=m[t];delete m[t],r()}},w=function(t){b.call(t.data)};h&&v||(h=function(t){for(var r=[],e=1;arguments.length>e;)r.push(arguments[e++]);return m[++d]=function(){c("function"==typeof t?t:Function(t),r)},n(d),d},v=function(t){delete m[t]},"process"==e(2032)(l)?n=function(t){l.nextTick(a(b,t,1))}:g&&g.now?n=function(t){g.now(a(b,t,1))}:p?(i=(o=new p).port2,o.port1.onmessage=w,n=a(i.postMessage,i,1)):f.addEventListener&&"function"==typeof postMessage&&!f.importScripts?(n=function(t){f.postMessage(t+"","*")},f.addEventListener("message",w,!1)):n=y in s("script")?function(t){u.appendChild(s("script"))[y]=function(){u.removeChild(this),b.call(t)}}:function(t){setTimeout(a(b,t,1),0)}),t.exports={set:h,clear:v}},2337:(t,r,e)=>{var n=e(1467),o=Math.max,i=Math.min;t.exports=function(t,r){return(t=n(t))<0?o(t+r,0):i(t,r)}},4843:(t,r,e)=>{var n=e(1467),o=e(875);t.exports=function(t){if(void 0===t)return 0;var r=n(t),e=o(r);if(r!==e)throw RangeError("Wrong length!");return e}},1467:t=>{var r=Math.ceil,e=Math.floor;t.exports=function(t){return isNaN(t=+t)?0:(t>0?e:r)(t)}},2110:(t,r,e)=>{var n=e(9797),o=e(1355);t.exports=function(t){return n(o(t))}},875:(t,r,e)=>{var n=e(1467),o=Math.min;t.exports=function(t){return t>0?o(n(t),9007199254740991):0}},508:(t,r,e)=>{var n=e(1355);t.exports=function(t){return Object(n(t))}},1689:(t,r,e)=>{var n=e(5286);t.exports=function(t,r){if(!n(t))return t;var e,o;if(r&&"function"==typeof(e=t.toString)&&!n(o=e.call(t)))return o;if("function"==typeof(e=t.valueOf)&&!n(o=e.call(t)))return o;if(!r&&"function"==typeof(e=t.toString)&&!n(o=e.call(t)))return o;throw TypeError("Can't convert object to primitive value")}},8440:(t,r,e)=>{"use strict";if(e(7057)){var n=e(4461),o=e(3816),i=e(4253),a=e(2985),c=e(9383),u=e(1125),s=e(741),f=e(3328),l=e(681),h=e(7728),v=e(4408),p=e(1467),g=e(875),d=e(4843),m=e(2337),y=e(1689),b=e(9181),w=e(1488),x=e(5286),A=e(508),S=e(6555),_=e(2503),O=e(468),E=e(616).f,j=e(9002),P=e(3953),k=e(6314),L=e(50),T=e(9315),F=e(8364),N=e(6997),M=e(2803),I=e(7462),C=e(2974),R=e(6852),$=e(5216),D=e(9275),U=e(8693),G=D.f,B=U.f,W=o.RangeError,V=o.TypeError,q=o.Uint8Array,Y="ArrayBuffer",z="Shared"+Y,Q="BYTES_PER_ELEMENT",J="prototype",K=Array[J],H=u.ArrayBuffer,X=u.DataView,Z=L(0),tt=L(2),rt=L(3),et=L(4),nt=L(5),ot=L(6),it=T(!0),at=T(!1),ct=N.values,ut=N.keys,st=N.entries,ft=K.lastIndexOf,lt=K.reduce,ht=K.reduceRight,vt=K.join,pt=K.sort,gt=K.slice,dt=K.toString,mt=K.toLocaleString,yt=k("iterator"),bt=k("toStringTag"),wt=P("typed_constructor"),xt=P("def_constructor"),At=c.CONSTR,St=c.TYPED,_t=c.VIEW,Ot="Wrong length!",Et=L(1,(function(t,r){return Tt(F(t,t[xt]),r)})),jt=i((function(){return 1===new q(new Uint16Array([1]).buffer)[0]})),Pt=!!q&&!!q[J].set&&i((function(){new q(1).set({})})),kt=function(t,r){var e=p(t);if(e<0||e%r)throw W("Wrong offset!");return e},Lt=function(t){if(x(t)&&St in t)return t;throw V(t+" is not a typed array!")},Tt=function(t,r){if(!x(t)||!(wt in t))throw V("It is not a typed array constructor!");return new t(r)},Ft=function(t,r){return Nt(F(t,t[xt]),r)},Nt=function(t,r){for(var e=0,n=r.length,o=Tt(t,n);n>e;)o[e]=r[e++];return o},Mt=function(t,r,e){G(t,r,{get:function(){return this._d[e]}})},It=function(t){var r,e,n,o,i,a,c=A(t),u=arguments.length,f=u>1?arguments[1]:void 0,l=void 0!==f,h=j(c);if(null!=h&&!S(h)){for(a=h.call(c),n=[],r=0;!(i=a.next()).done;r++)n.push(i.value);c=n}for(l&&u>2&&(f=s(f,arguments[2],2)),r=0,e=g(c.length),o=Tt(this,e);e>r;r++)o[r]=l?f(c[r],r):c[r];return o},Ct=function(){for(var t=0,r=arguments.length,e=Tt(this,r);r>t;)e[t]=arguments[t++];return e},Rt=!!q&&i((function(){mt.call(new q(1))})),$t=function(){return mt.apply(Rt?gt.call(Lt(this)):Lt(this),arguments)},Dt={copyWithin:function(t,r){return $.call(Lt(this),t,r,arguments.length>2?arguments[2]:void 0)},every:function(t){return et(Lt(this),t,arguments.length>1?arguments[1]:void 0)},fill:function(t){return R.apply(Lt(this),arguments)},filter:function(t){return Ft(this,tt(Lt(this),t,arguments.length>1?arguments[1]:void 0))},find:function(t){return nt(Lt(this),t,arguments.length>1?arguments[1]:void 0)},findIndex:function(t){return ot(Lt(this),t,arguments.length>1?arguments[1]:void 0)},forEach:function(t){Z(Lt(this),t,arguments.length>1?arguments[1]:void 0)},indexOf:function(t){return at(Lt(this),t,arguments.length>1?arguments[1]:void 0)},includes:function(t){return it(Lt(this),t,arguments.length>1?arguments[1]:void 0)},join:function(t){return vt.apply(Lt(this),arguments)},lastIndexOf:function(t){return ft.apply(Lt(this),arguments)},map:function(t){return Et(Lt(this),t,arguments.length>1?arguments[1]:void 0)},reduce:function(t){return lt.apply(Lt(this),arguments)},reduceRight:function(t){return ht.apply(Lt(this),arguments)},reverse:function(){for(var t,r=this,e=Lt(r).length,n=Math.floor(e/2),o=0;o<n;)t=r[o],r[o++]=r[--e],r[e]=t;return r},some:function(t){return rt(Lt(this),t,arguments.length>1?arguments[1]:void 0)},sort:function(t){return pt.call(Lt(this),t)},subarray:function(t,r){var e=Lt(this),n=e.length,o=m(t,n);return new(F(e,e[xt]))(e.buffer,e.byteOffset+o*e.BYTES_PER_ELEMENT,g((void 0===r?n:m(r,n))-o))}},Ut=function(t,r){return Ft(this,gt.call(Lt(this),t,r))},Gt=function(t){Lt(this);var r=kt(arguments[1],1),e=this.length,n=A(t),o=g(n.length),i=0;if(o+r>e)throw W(Ot);for(;i<o;)this[r+i]=n[i++]},Bt={entries:function(){return st.call(Lt(this))},keys:function(){return ut.call(Lt(this))},values:function(){return ct.call(Lt(this))}},Wt=function(t,r){return x(t)&&t[St]&&"symbol"!=typeof r&&r in t&&String(+r)==String(r)},Vt=function(t,r){return Wt(t,r=y(r,!0))?l(2,t[r]):B(t,r)},qt=function(t,r,e){return!(Wt(t,r=y(r,!0))&&x(e)&&b(e,"value"))||b(e,"get")||b(e,"set")||e.configurable||b(e,"writable")&&!e.writable||b(e,"enumerable")&&!e.enumerable?G(t,r,e):(t[r]=e.value,t)};At||(U.f=Vt,D.f=qt),a(a.S+a.F*!At,"Object",{getOwnPropertyDescriptor:Vt,defineProperty:qt}),i((function(){dt.call({})}))&&(dt=mt=function(){return vt.call(this)});var Yt=v({},Dt);v(Yt,Bt),h(Yt,yt,Bt.values),v(Yt,{slice:Ut,set:Gt,constructor:function(){},toString:dt,toLocaleString:$t}),Mt(Yt,"buffer","b"),Mt(Yt,"byteOffset","o"),Mt(Yt,"byteLength","l"),Mt(Yt,"length","e"),G(Yt,bt,{get:function(){return this[St]}}),t.exports=function(t,r,e,u){var s=t+((u=!!u)?"Clamped":"")+"Array",l="get"+t,v="set"+t,p=o[s],m=p||{},y=p&&O(p),b=!p||!c.ABV,A={},S=p&&p[J],j=function(t,e){G(t,e,{get:function(){return function(t,e){var n=t._d;return n.v[l](e*r+n.o,jt)}(this,e)},set:function(t){return function(t,e,n){var o=t._d;u&&(n=(n=Math.round(n))<0?0:n>255?255:255&n),o.v[v](e*r+o.o,n,jt)}(this,e,t)},enumerable:!0})};b?(p=e((function(t,e,n,o){f(t,p,s,"_d");var i,a,c,u,l=0,v=0;if(x(e)){if(!(e instanceof H||(u=w(e))==Y||u==z))return St in e?Nt(p,e):It.call(p,e);i=e,v=kt(n,r);var m=e.byteLength;if(void 0===o){if(m%r)throw W(Ot);if((a=m-v)<0)throw W(Ot)}else if((a=g(o)*r)+v>m)throw W(Ot);c=a/r}else c=d(e),i=new H(a=c*r);for(h(t,"_d",{b:i,o:v,l:a,e:c,v:new X(i)});l<c;)j(t,l++)})),S=p[J]=_(Yt),h(S,"constructor",p)):i((function(){p(1)}))&&i((function(){new p(-1)}))&&I((function(t){new p,new p(null),new p(1.5),new p(t)}),!0)||(p=e((function(t,e,n,o){var i;return f(t,p,s),x(e)?e instanceof H||(i=w(e))==Y||i==z?void 0!==o?new m(e,kt(n,r),o):void 0!==n?new m(e,kt(n,r)):new m(e):St in e?Nt(p,e):It.call(p,e):new m(d(e))})),Z(y!==Function.prototype?E(m).concat(E(y)):E(m),(function(t){t in p||h(p,t,m[t])})),p[J]=S,n||(S.constructor=p));var P=S[yt],k=!!P&&("values"==P.name||null==P.name),L=Bt.values;h(p,wt,!0),h(S,St,s),h(S,_t,!0),h(S,xt,p),(u?new p(1)[bt]==s:bt in S)||G(S,bt,{get:function(){return s}}),A[s]=p,a(a.G+a.W+a.F*(p!=m),A),a(a.S,s,{BYTES_PER_ELEMENT:r}),a(a.S+a.F*i((function(){m.of.call(p,1)})),s,{from:It,of:Ct}),Q in S||h(S,Q,r),a(a.P,s,Dt),C(s),a(a.P+a.F*Pt,s,{set:Gt}),a(a.P+a.F*!k,s,Bt),n||S.toString==dt||(S.toString=dt),a(a.P+a.F*i((function(){new p(1).slice()})),s,{slice:Ut}),a(a.P+a.F*(i((function(){return[1,2].toLocaleString()!=new p([1,2]).toLocaleString()}))||!i((function(){S.toLocaleString.call([1,2])}))),s,{toLocaleString:$t}),M[s]=k?P:L,n||k||h(S,yt,L)}}else t.exports=function(){}},1125:(t,r,e)=>{"use strict";var n=e(3816),o=e(7057),i=e(4461),a=e(9383),c=e(7728),u=e(4408),s=e(4253),f=e(3328),l=e(1467),h=e(875),v=e(4843),p=e(616).f,g=e(9275).f,d=e(6852),m=e(2943),y="ArrayBuffer",b="DataView",w="prototype",x="Wrong index!",A=n[y],S=n[b],_=n.Math,O=n.RangeError,E=n.Infinity,j=A,P=_.abs,k=_.pow,L=_.floor,T=_.log,F=_.LN2,N="buffer",M="byteLength",I="byteOffset",C=o?"_b":N,R=o?"_l":M,$=o?"_o":I;function D(t,r,e){var n,o,i,a=new Array(e),c=8*e-r-1,u=(1<<c)-1,s=u>>1,f=23===r?k(2,-24)-k(2,-77):0,l=0,h=t<0||0===t&&1/t<0?1:0;for((t=P(t))!=t||t===E?(o=t!=t?1:0,n=u):(n=L(T(t)/F),t*(i=k(2,-n))<1&&(n--,i*=2),(t+=n+s>=1?f/i:f*k(2,1-s))*i>=2&&(n++,i/=2),n+s>=u?(o=0,n=u):n+s>=1?(o=(t*i-1)*k(2,r),n+=s):(o=t*k(2,s-1)*k(2,r),n=0));r>=8;a[l++]=255&o,o/=256,r-=8);for(n=n<<r|o,c+=r;c>0;a[l++]=255&n,n/=256,c-=8);return a[--l]|=128*h,a}function U(t,r,e){var n,o=8*e-r-1,i=(1<<o)-1,a=i>>1,c=o-7,u=e-1,s=t[u--],f=127&s;for(s>>=7;c>0;f=256*f+t[u],u--,c-=8);for(n=f&(1<<-c)-1,f>>=-c,c+=r;c>0;n=256*n+t[u],u--,c-=8);if(0===f)f=1-a;else{if(f===i)return n?NaN:s?-E:E;n+=k(2,r),f-=a}return(s?-1:1)*n*k(2,f-r)}function G(t){return t[3]<<24|t[2]<<16|t[1]<<8|t[0]}function B(t){return[255&t]}function W(t){return[255&t,t>>8&255]}function V(t){return[255&t,t>>8&255,t>>16&255,t>>24&255]}function q(t){return D(t,52,8)}function Y(t){return D(t,23,4)}function z(t,r,e){g(t[w],r,{get:function(){return this[e]}})}function Q(t,r,e,n){var o=v(+e);if(o+r>t[R])throw O(x);var i=t[C]._b,a=o+t[$],c=i.slice(a,a+r);return n?c:c.reverse()}function J(t,r,e,n,o,i){var a=v(+e);if(a+r>t[R])throw O(x);for(var c=t[C]._b,u=a+t[$],s=n(+o),f=0;f<r;f++)c[u+f]=s[i?f:r-f-1]}if(a.ABV){if(!s((function(){A(1)}))||!s((function(){new A(-1)}))||s((function(){return new A,new A(1.5),new A(NaN),A.name!=y}))){for(var K,H=(A=function(t){return f(this,A),new j(v(t))})[w]=j[w],X=p(j),Z=0;X.length>Z;)(K=X[Z++])in A||c(A,K,j[K]);i||(H.constructor=A)}var tt=new S(new A(2)),rt=S[w].setInt8;tt.setInt8(0,2147483648),tt.setInt8(1,2147483649),!tt.getInt8(0)&&tt.getInt8(1)||u(S[w],{setInt8:function(t,r){rt.call(this,t,r<<24>>24)},setUint8:function(t,r){rt.call(this,t,r<<24>>24)}},!0)}else A=function(t){f(this,A,y);var r=v(t);this._b=d.call(new Array(r),0),this[R]=r},S=function(t,r,e){f(this,S,b),f(t,A,b);var n=t[R],o=l(r);if(o<0||o>n)throw O("Wrong offset!");if(o+(e=void 0===e?n-o:h(e))>n)throw O("Wrong length!");this[C]=t,this[$]=o,this[R]=e},o&&(z(A,M,"_l"),z(S,N,"_b"),z(S,M,"_l"),z(S,I,"_o")),u(S[w],{getInt8:function(t){return Q(this,1,t)[0]<<24>>24},getUint8:function(t){return Q(this,1,t)[0]},getInt16:function(t){var r=Q(this,2,t,arguments[1]);return(r[1]<<8|r[0])<<16>>16},getUint16:function(t){var r=Q(this,2,t,arguments[1]);return r[1]<<8|r[0]},getInt32:function(t){return G(Q(this,4,t,arguments[1]))},getUint32:function(t){return G(Q(this,4,t,arguments[1]))>>>0},getFloat32:function(t){return U(Q(this,4,t,arguments[1]),23,4)},getFloat64:function(t){return U(Q(this,8,t,arguments[1]),52,8)},setInt8:function(t,r){J(this,1,t,B,r)},setUint8:function(t,r){J(this,1,t,B,r)},setInt16:function(t,r){J(this,2,t,W,r,arguments[2])},setUint16:function(t,r){J(this,2,t,W,r,arguments[2])},setInt32:function(t,r){J(this,4,t,V,r,arguments[2])},setUint32:function(t,r){J(this,4,t,V,r,arguments[2])},setFloat32:function(t,r){J(this,4,t,Y,r,arguments[2])},setFloat64:function(t,r){J(this,8,t,q,r,arguments[2])}});m(A,y),m(S,b),c(S[w],a.VIEW,!0),r[y]=A,r[b]=S},9383:(t,r,e)=>{for(var n,o=e(3816),i=e(7728),a=e(3953),c=a("typed_array"),u=a("view"),s=!(!o.ArrayBuffer||!o.DataView),f=s,l=0,h="Int8Array,Uint8Array,Uint8ClampedArray,Int16Array,Uint16Array,Int32Array,Uint32Array,Float32Array,Float64Array".split(",");l<9;)(n=o[h[l++]])?(i(n.prototype,c,!0),i(n.prototype,u,!0)):f=!1;t.exports={ABV:s,CONSTR:f,TYPED:c,VIEW:u}},3953:t=>{var r=0,e=Math.random();t.exports=function(t){return"Symbol(".concat(void 0===t?"":t,")_",(++r+e).toString(36))}},575:(t,r,e)=>{var n=e(3816).navigator;t.exports=n&&n.userAgent||""},1616:(t,r,e)=>{var n=e(5286);t.exports=function(t,r){if(!n(t)||t._t!==r)throw TypeError("Incompatible receiver, "+r+" required!");return t}},6074:(t,r,e)=>{var n=e(3816),o=e(5645),i=e(4461),a=e(8787),c=e(9275).f;t.exports=function(t){var r=o.Symbol||(o.Symbol=i?{}:n.Symbol||{});"_"==t.charAt(0)||t in r||c(r,t,{value:a.f(t)})}},8787:(t,r,e)=>{r.f=e(6314)},6314:(t,r,e)=>{var n=e(3825)("wks"),o=e(3953),i=e(3816).Symbol,a="function"==typeof i;(t.exports=function(t){return n[t]||(n[t]=a&&i[t]||(a?i:o)("Symbol."+t))}).store=n},9002:(t,r,e)=>{var n=e(1488),o=e(6314)("iterator"),i=e(2803);t.exports=e(5645).getIteratorMethod=function(t){if(null!=t)return t[o]||t["@@iterator"]||i[n(t)]}},2e3:(t,r,e)=>{var n=e(2985);n(n.P,"Array",{copyWithin:e(5216)}),e(7722)("copyWithin")},5745:(t,r,e)=>{"use strict";var n=e(2985),o=e(50)(4);n(n.P+n.F*!e(7717)([].every,!0),"Array",{every:function(t){return o(this,t,arguments[1])}})},8977:(t,r,e)=>{var n=e(2985);n(n.P,"Array",{fill:e(6852)}),e(7722)("fill")},8837:(t,r,e)=>{"use strict";var n=e(2985),o=e(50)(2);n(n.P+n.F*!e(7717)([].filter,!0),"Array",{filter:function(t){return o(this,t,arguments[1])}})},4899:(t,r,e)=>{"use strict";var n=e(2985),o=e(50)(6),i="findIndex",a=!0;i in[]&&Array(1)[i]((function(){a=!1})),n(n.P+n.F*a,"Array",{findIndex:function(t){return o(this,t,arguments.length>1?arguments[1]:void 0)}}),e(7722)(i)},2310:(t,r,e)=>{"use strict";var n=e(2985),o=e(50)(5),i="find",a=!0;i in[]&&Array(1)[i]((function(){a=!1})),n(n.P+n.F*a,"Array",{find:function(t){return o(this,t,arguments.length>1?arguments[1]:void 0)}}),e(7722)(i)},4336:(t,r,e)=>{"use strict";var n=e(2985),o=e(50)(0),i=e(7717)([].forEach,!0);n(n.P+n.F*!i,"Array",{forEach:function(t){return o(this,t,arguments[1])}})},522:(t,r,e)=>{"use strict";var n=e(741),o=e(2985),i=e(508),a=e(8851),c=e(6555),u=e(875),s=e(2811),f=e(9002);o(o.S+o.F*!e(7462)((function(t){Array.from(t)})),"Array",{from:function(t){var r,e,o,l,h=i(t),v="function"==typeof this?this:Array,p=arguments.length,g=p>1?arguments[1]:void 0,d=void 0!==g,m=0,y=f(h);if(d&&(g=n(g,p>2?arguments[2]:void 0,2)),null==y||v==Array&&c(y))for(e=new v(r=u(h.length));r>m;m++)s(e,m,d?g(h[m],m):h[m]);else for(l=y.call(h),e=new v;!(o=l.next()).done;m++)s(e,m,d?a(l,g,[o.value,m],!0):o.value);return e.length=m,e}})},3369:(t,r,e)=>{"use strict";var n=e(2985),o=e(9315)(!1),i=[].indexOf,a=!!i&&1/[1].indexOf(1,-0)<0;n(n.P+n.F*(a||!e(7717)(i)),"Array",{indexOf:function(t){return a?i.apply(this,arguments)||0:o(this,t,arguments[1])}})},774:(t,r,e)=>{var n=e(2985);n(n.S,"Array",{isArray:e(4302)})},6997:(t,r,e)=>{"use strict";var n=e(7722),o=e(5436),i=e(2803),a=e(2110);t.exports=e(2923)(Array,"Array",(function(t,r){this._t=a(t),this._i=0,this._k=r}),(function(){var t=this._t,r=this._k,e=this._i++;return!t||e>=t.length?(this._t=void 0,o(1)):o(0,"keys"==r?e:"values"==r?t[e]:[e,t[e]])}),"values"),i.Arguments=i.Array,n("keys"),n("values"),n("entries")},7842:(t,r,e)=>{"use strict";var n=e(2985),o=e(2110),i=[].join;n(n.P+n.F*(e(9797)!=Object||!e(7717)(i)),"Array",{join:function(t){return i.call(o(this),void 0===t?",":t)}})},9564:(t,r,e)=>{"use strict";var n=e(2985),o=e(2110),i=e(1467),a=e(875),c=[].lastIndexOf,u=!!c&&1/[1].lastIndexOf(1,-0)<0;n(n.P+n.F*(u||!e(7717)(c)),"Array",{lastIndexOf:function(t){if(u)return c.apply(this,arguments)||0;var r=o(this),e=a(r.length),n=e-1;for(arguments.length>1&&(n=Math.min(n,i(arguments[1]))),n<0&&(n=e+n);n>=0;n--)if(n in r&&r[n]===t)return n||0;return-1}})},1802:(t,r,e)=>{"use strict";var n=e(2985),o=e(50)(1);n(n.P+n.F*!e(7717)([].map,!0),"Array",{map:function(t){return o(this,t,arguments[1])}})},8295:(t,r,e)=>{"use strict";var n=e(2985),o=e(2811);n(n.S+n.F*e(4253)((function(){function t(){}return!(Array.of.call(t)instanceof t)})),"Array",{of:function(){for(var t=0,r=arguments.length,e=new("function"==typeof this?this:Array)(r);r>t;)o(e,t,arguments[t++]);return e.length=r,e}})},3750:(t,r,e)=>{"use strict";var n=e(2985),o=e(7628);n(n.P+n.F*!e(7717)([].reduceRight,!0),"Array",{reduceRight:function(t){return o(this,t,arguments.length,arguments[1],!0)}})},3057:(t,r,e)=>{"use strict";var n=e(2985),o=e(7628);n(n.P+n.F*!e(7717)([].reduce,!0),"Array",{reduce:function(t){return o(this,t,arguments.length,arguments[1],!1)}})},110:(t,r,e)=>{"use strict";var n=e(2985),o=e(639),i=e(2032),a=e(2337),c=e(875),u=[].slice;n(n.P+n.F*e(4253)((function(){o&&u.call(o)})),"Array",{slice:function(t,r){var e=c(this.length),n=i(this);if(r=void 0===r?e:r,"Array"==n)return u.call(this,t,r);for(var o=a(t,e),s=a(r,e),f=c(s-o),l=new Array(f),h=0;h<f;h++)l[h]="String"==n?this.charAt(o+h):this[o+h];return l}})},6773:(t,r,e)=>{"use strict";var n=e(2985),o=e(50)(3);n(n.P+n.F*!e(7717)([].some,!0),"Array",{some:function(t){return o(this,t,arguments[1])}})},75:(t,r,e)=>{"use strict";var n=e(2985),o=e(4963),i=e(508),a=e(4253),c=[].sort,u=[1,2,3];n(n.P+n.F*(a((function(){u.sort(void 0)}))||!a((function(){u.sort(null)}))||!e(7717)(c)),"Array",{sort:function(t){return void 0===t?c.call(i(this)):c.call(i(this),o(t))}})},1842:(t,r,e)=>{e(2974)("Array")},1822:(t,r,e)=>{var n=e(2985);n(n.S,"Date",{now:function(){return(new Date).getTime()}})},1031:(t,r,e)=>{var n=e(2985),o=e(3537);n(n.P+n.F*(Date.prototype.toISOString!==o),"Date",{toISOString:o})},9977:(t,r,e)=>{"use strict";var n=e(2985),o=e(508),i=e(1689);n(n.P+n.F*e(4253)((function(){return null!==new Date(NaN).toJSON()||1!==Date.prototype.toJSON.call({toISOString:function(){return 1}})})),"Date",{toJSON:function(t){var r=o(this),e=i(r);return"number"!=typeof e||isFinite(e)?r.toISOString():null}})},1560:(t,r,e)=>{var n=e(6314)("toPrimitive"),o=Date.prototype;n in o||e(7728)(o,n,e(870))},6331:(t,r,e)=>{var n=Date.prototype,o="Invalid Date",i="toString",a=n[i],c=n.getTime;new Date(NaN)+""!=o&&e(7234)(n,i,(function(){var t=c.call(this);return t==t?a.call(this):o}))},9730:(t,r,e)=>{var n=e(2985);n(n.P,"Function",{bind:e(4398)})},8377:(t,r,e)=>{"use strict";var n=e(5286),o=e(468),i=e(6314)("hasInstance"),a=Function.prototype;i in a||e(9275).f(a,i,{value:function(t){if("function"!=typeof this||!n(t))return!1;if(!n(this.prototype))return t instanceof this;for(;t=o(t);)if(this.prototype===t)return!0;return!1}})},6059:(t,r,e)=>{var n=e(9275).f,o=Function.prototype,i=/^\s*function ([^ (]*)/,a="name";a in o||e(7057)&&n(o,a,{configurable:!0,get:function(){try{return(""+this).match(i)[1]}catch(t){return""}}})},8416:(t,r,e)=>{"use strict";var n=e(9824),o=e(1616),i="Map";t.exports=e(5795)(i,(function(t){return function(){return t(this,arguments.length>0?arguments[0]:void 0)}}),{get:function(t){var r=n.getEntry(o(this,i),t);return r&&r.v},set:function(t,r){return n.def(o(this,i),0===t?0:t,r)}},n,!0)},6503:(t,r,e)=>{var n=e(2985),o=e(6206),i=Math.sqrt,a=Math.acosh;n(n.S+n.F*!(a&&710==Math.floor(a(Number.MAX_VALUE))&&a(1/0)==1/0),"Math",{acosh:function(t){return(t=+t)<1?NaN:t>94906265.62425156?Math.log(t)+Math.LN2:o(t-1+i(t-1)*i(t+1))}})},6786:(t,r,e)=>{var n=e(2985),o=Math.asinh;n(n.S+n.F*!(o&&1/o(0)>0),"Math",{asinh:function t(r){return isFinite(r=+r)&&0!=r?r<0?-t(-r):Math.log(r+Math.sqrt(r*r+1)):r}})},932:(t,r,e)=>{var n=e(2985),o=Math.atanh;n(n.S+n.F*!(o&&1/o(-0)<0),"Math",{atanh:function(t){return 0==(t=+t)?t:Math.log((1+t)/(1-t))/2}})},7526:(t,r,e)=>{var n=e(2985),o=e(1801);n(n.S,"Math",{cbrt:function(t){return o(t=+t)*Math.pow(Math.abs(t),1/3)}})},1591:(t,r,e)=>{var n=e(2985);n(n.S,"Math",{clz32:function(t){return(t>>>=0)?31-Math.floor(Math.log(t+.5)*Math.LOG2E):32}})},9073:(t,r,e)=>{var n=e(2985),o=Math.exp;n(n.S,"Math",{cosh:function(t){return(o(t=+t)+o(-t))/2}})},347:(t,r,e)=>{var n=e(2985),o=e(3086);n(n.S+n.F*(o!=Math.expm1),"Math",{expm1:o})},579:(t,r,e)=>{var n=e(2985);n(n.S,"Math",{fround:e(4934)})},4669:(t,r,e)=>{var n=e(2985),o=Math.abs;n(n.S,"Math",{hypot:function(t,r){for(var e,n,i=0,a=0,c=arguments.length,u=0;a<c;)u<(e=o(arguments[a++]))?(i=i*(n=u/e)*n+1,u=e):i+=e>0?(n=e/u)*n:e;return u===1/0?1/0:u*Math.sqrt(i)}})},7710:(t,r,e)=>{var n=e(2985),o=Math.imul;n(n.S+n.F*e(4253)((function(){return-5!=o(4294967295,5)||2!=o.length})),"Math",{imul:function(t,r){var e=65535,n=+t,o=+r,i=e&n,a=e&o;return 0|i*a+((e&n>>>16)*a+i*(e&o>>>16)<<16>>>0)}})},5789:(t,r,e)=>{var n=e(2985);n(n.S,"Math",{log10:function(t){return Math.log(t)*Math.LOG10E}})},3514:(t,r,e)=>{var n=e(2985);n(n.S,"Math",{log1p:e(6206)})},9978:(t,r,e)=>{var n=e(2985);n(n.S,"Math",{log2:function(t){return Math.log(t)/Math.LN2}})},8472:(t,r,e)=>{var n=e(2985);n(n.S,"Math",{sign:e(1801)})},6946:(t,r,e)=>{var n=e(2985),o=e(3086),i=Math.exp;n(n.S+n.F*e(4253)((function(){return-2e-17!=!Math.sinh(-2e-17)})),"Math",{sinh:function(t){return Math.abs(t=+t)<1?(o(t)-o(-t))/2:(i(t-1)-i(-t-1))*(Math.E/2)}})},5068:(t,r,e)=>{var n=e(2985),o=e(3086),i=Math.exp;n(n.S,"Math",{tanh:function(t){var r=o(t=+t),e=o(-t);return r==1/0?1:e==1/0?-1:(r-e)/(i(t)+i(-t))}})},413:(t,r,e)=>{var n=e(2985);n(n.S,"Math",{trunc:function(t){return(t>0?Math.floor:Math.ceil)(t)}})},1246:(t,r,e)=>{"use strict";var n=e(3816),o=e(9181),i=e(2032),a=e(266),c=e(1689),u=e(4253),s=e(616).f,f=e(8693).f,l=e(9275).f,h=e(9599).trim,v="Number",p=n[v],g=p,d=p.prototype,m=i(e(2503)(d))==v,y="trim"in String.prototype,b=function(t){var r=c(t,!1);if("string"==typeof r&&r.length>2){var e,n,o,i=(r=y?r.trim():h(r,3)).charCodeAt(0);if(43===i||45===i){if(88===(e=r.charCodeAt(2))||120===e)return NaN}else if(48===i){switch(r.charCodeAt(1)){case 66:case 98:n=2,o=49;break;case 79:case 111:n=8,o=55;break;default:return+r}for(var a,u=r.slice(2),s=0,f=u.length;s<f;s++)if((a=u.charCodeAt(s))<48||a>o)return NaN;return parseInt(u,n)}}return+r};if(!p(" 0o1")||!p("0b1")||p("+0x1")){p=function(t){var r=arguments.length<1?0:t,e=this;return e instanceof p&&(m?u((function(){d.valueOf.call(e)})):i(e)!=v)?a(new g(b(r)),e,p):b(r)};for(var w,x=e(7057)?s(g):"MAX_VALUE,MIN_VALUE,NaN,NEGATIVE_INFINITY,POSITIVE_INFINITY,EPSILON,isFinite,isInteger,isNaN,isSafeInteger,MAX_SAFE_INTEGER,MIN_SAFE_INTEGER,parseFloat,parseInt,isInteger".split(","),A=0;x.length>A;A++)o(g,w=x[A])&&!o(p,w)&&l(p,w,f(g,w));p.prototype=d,d.constructor=p,e(7234)(n,v,p)}},5972:(t,r,e)=>{var n=e(2985);n(n.S,"Number",{EPSILON:Math.pow(2,-52)})},3403:(t,r,e)=>{var n=e(2985),o=e(3816).isFinite;n(n.S,"Number",{isFinite:function(t){return"number"==typeof t&&o(t)}})},2516:(t,r,e)=>{var n=e(2985);n(n.S,"Number",{isInteger:e(8367)})},9371:(t,r,e)=>{var n=e(2985);n(n.S,"Number",{isNaN:function(t){return t!=t}})},6479:(t,r,e)=>{var n=e(2985),o=e(8367),i=Math.abs;n(n.S,"Number",{isSafeInteger:function(t){return o(t)&&i(t)<=9007199254740991}})},1736:(t,r,e)=>{var n=e(2985);n(n.S,"Number",{MAX_SAFE_INTEGER:9007199254740991})},1889:(t,r,e)=>{var n=e(2985);n(n.S,"Number",{MIN_SAFE_INTEGER:-9007199254740991})},5177:(t,r,e)=>{var n=e(2985),o=e(7743);n(n.S+n.F*(Number.parseFloat!=o),"Number",{parseFloat:o})},6943:(t,r,e)=>{var n=e(2985),o=e(5960);n(n.S+n.F*(Number.parseInt!=o),"Number",{parseInt:o})},726:(t,r,e)=>{"use strict";var n=e(2985),o=e(1467),i=e(3365),a=e(8595),c=1..toFixed,u=Math.floor,s=[0,0,0,0,0,0],f="Number.toFixed: incorrect invocation!",l="0",h=function(t,r){for(var e=-1,n=r;++e<6;)n+=t*s[e],s[e]=n%1e7,n=u(n/1e7)},v=function(t){for(var r=6,e=0;--r>=0;)e+=s[r],s[r]=u(e/t),e=e%t*1e7},p=function(){for(var t=6,r="";--t>=0;)if(""!==r||0===t||0!==s[t]){var e=String(s[t]);r=""===r?e:r+a.call(l,7-e.length)+e}return r},g=function(t,r,e){return 0===r?e:r%2==1?g(t,r-1,e*t):g(t*t,r/2,e)};n(n.P+n.F*(!!c&&("0.000"!==8e-5.toFixed(3)||"1"!==.9.toFixed(0)||"1.25"!==1.255.toFixed(2)||"1000000000000000128"!==(0xde0b6b3a7640080).toFixed(0))||!e(4253)((function(){c.call({})}))),"Number",{toFixed:function(t){var r,e,n,c,u=i(this,f),s=o(t),d="",m=l;if(s<0||s>20)throw RangeError(f);if(u!=u)return"NaN";if(u<=-1e21||u>=1e21)return String(u);if(u<0&&(d="-",u=-u),u>1e-21)if(r=function(t){for(var r=0,e=t;e>=4096;)r+=12,e/=4096;for(;e>=2;)r+=1,e/=2;return r}(u*g(2,69,1))-69,e=r<0?u*g(2,-r,1):u/g(2,r,1),e*=4503599627370496,(r=52-r)>0){for(h(0,e),n=s;n>=7;)h(1e7,0),n-=7;for(h(g(10,n,1),0),n=r-1;n>=23;)v(1<<23),n-=23;v(1<<n),h(1,1),v(2),m=p()}else h(0,e),h(1<<-r,0),m=p()+a.call(l,s);return m=s>0?d+((c=m.length)<=s?"0."+a.call(l,s-c)+m:m.slice(0,c-s)+"."+m.slice(c-s)):d+m}})},1901:(t,r,e)=>{"use strict";var n=e(2985),o=e(4253),i=e(3365),a=1..toPrecision;n(n.P+n.F*(o((function(){return"1"!==a.call(1,void 0)}))||!o((function(){a.call({})}))),"Number",{toPrecision:function(t){var r=i(this,"Number#toPrecision: incorrect invocation!");return void 0===t?a.call(r):a.call(r,t)}})},5115:(t,r,e)=>{var n=e(2985);n(n.S+n.F,"Object",{assign:e(5345)})},8132:(t,r,e)=>{var n=e(2985);n(n.S,"Object",{create:e(2503)})},7470:(t,r,e)=>{var n=e(2985);n(n.S+n.F*!e(7057),"Object",{defineProperties:e(5588)})},8388:(t,r,e)=>{var n=e(2985);n(n.S+n.F*!e(7057),"Object",{defineProperty:e(9275).f})},9375:(t,r,e)=>{var n=e(5286),o=e(4728).onFreeze;e(3160)("freeze",(function(t){return function(r){return t&&n(r)?t(o(r)):r}}))},4882:(t,r,e)=>{var n=e(2110),o=e(8693).f;e(3160)("getOwnPropertyDescriptor",(function(){return function(t,r){return o(n(t),r)}}))},9622:(t,r,e)=>{e(3160)("getOwnPropertyNames",(function(){return e(9327).f}))},1520:(t,r,e)=>{var n=e(508),o=e(468);e(3160)("getPrototypeOf",(function(){return function(t){return o(n(t))}}))},9892:(t,r,e)=>{var n=e(5286);e(3160)("isExtensible",(function(t){return function(r){return!!n(r)&&(!t||t(r))}}))},4157:(t,r,e)=>{var n=e(5286);e(3160)("isFrozen",(function(t){return function(r){return!n(r)||!!t&&t(r)}}))},5095:(t,r,e)=>{var n=e(5286);e(3160)("isSealed",(function(t){return function(r){return!n(r)||!!t&&t(r)}}))},9176:(t,r,e)=>{var n=e(2985);n(n.S,"Object",{is:e(7195)})},7476:(t,r,e)=>{var n=e(508),o=e(7184);e(3160)("keys",(function(){return function(t){return o(n(t))}}))},4672:(t,r,e)=>{var n=e(5286),o=e(4728).onFreeze;e(3160)("preventExtensions",(function(t){return function(r){return t&&n(r)?t(o(r)):r}}))},3533:(t,r,e)=>{var n=e(5286),o=e(4728).onFreeze;e(3160)("seal",(function(t){return function(r){return t&&n(r)?t(o(r)):r}}))},8838:(t,r,e)=>{var n=e(2985);n(n.S,"Object",{setPrototypeOf:e(7375).set})},6253:(t,r,e)=>{"use strict";var n=e(1488),o={};o[e(6314)("toStringTag")]="z",o+""!="[object z]"&&e(7234)(Object.prototype,"toString",(function(){return"[object "+n(this)+"]"}),!0)},4299:(t,r,e)=>{var n=e(2985),o=e(7743);n(n.G+n.F*(parseFloat!=o),{parseFloat:o})},1084:(t,r,e)=>{var n=e(2985),o=e(5960);n(n.G+n.F*(parseInt!=o),{parseInt:o})},851:(t,r,e)=>{"use strict";var n,o,i,a,c=e(4461),u=e(3816),s=e(741),f=e(1488),l=e(2985),h=e(5286),v=e(4963),p=e(3328),g=e(3531),d=e(8364),m=e(4193).set,y=e(4351)(),b=e(3499),w=e(188),x=e(575),A=e(94),S="Promise",_=u.TypeError,O=u.process,E=O&&O.versions,j=E&&E.v8||"",P=u[S],k="process"==f(O),L=function(){},T=o=b.f,F=!!function(){try{var t=P.resolve(1),r=(t.constructor={})[e(6314)("species")]=function(t){t(L,L)};return(k||"function"==typeof PromiseRejectionEvent)&&t.then(L)instanceof r&&0!==j.indexOf("6.6")&&-1===x.indexOf("Chrome/66")}catch(t){}}(),N=function(t){var r;return!(!h(t)||"function"!=typeof(r=t.then))&&r},M=function(t,r){if(!t._n){t._n=!0;var e=t._c;y((function(){for(var n=t._v,o=1==t._s,i=0,a=function(r){var e,i,a,c=o?r.ok:r.fail,u=r.resolve,s=r.reject,f=r.domain;try{c?(o||(2==t._h&&R(t),t._h=1),!0===c?e=n:(f&&f.enter(),e=c(n),f&&(f.exit(),a=!0)),e===r.promise?s(_("Promise-chain cycle")):(i=N(e))?i.call(e,u,s):u(e)):s(n)}catch(t){f&&!a&&f.exit(),s(t)}};e.length>i;)a(e[i++]);t._c=[],t._n=!1,r&&!t._h&&I(t)}))}},I=function(t){m.call(u,(function(){var r,e,n,o=t._v,i=C(t);if(i&&(r=w((function(){k?O.emit("unhandledRejection",o,t):(e=u.onunhandledrejection)?e({promise:t,reason:o}):(n=u.console)&&n.error&&n.error("Unhandled promise rejection",o)})),t._h=k||C(t)?2:1),t._a=void 0,i&&r.e)throw r.v}))},C=function(t){return 1!==t._h&&0===(t._a||t._c).length},R=function(t){m.call(u,(function(){var r;k?O.emit("rejectionHandled",t):(r=u.onrejectionhandled)&&r({promise:t,reason:t._v})}))},$=function(t){var r=this;r._d||(r._d=!0,(r=r._w||r)._v=t,r._s=2,r._a||(r._a=r._c.slice()),M(r,!0))},D=function(t){var r,e=this;if(!e._d){e._d=!0,e=e._w||e;try{if(e===t)throw _("Promise can't be resolved itself");(r=N(t))?y((function(){var n={_w:e,_d:!1};try{r.call(t,s(D,n,1),s($,n,1))}catch(t){$.call(n,t)}})):(e._v=t,e._s=1,M(e,!1))}catch(t){$.call({_w:e,_d:!1},t)}}};F||(P=function(t){p(this,P,S,"_h"),v(t),n.call(this);try{t(s(D,this,1),s($,this,1))}catch(t){$.call(this,t)}},(n=function(t){this._c=[],this._a=void 0,this._s=0,this._d=!1,this._v=void 0,this._h=0,this._n=!1}).prototype=e(4408)(P.prototype,{then:function(t,r){var e=T(d(this,P));return e.ok="function"!=typeof t||t,e.fail="function"==typeof r&&r,e.domain=k?O.domain:void 0,this._c.push(e),this._a&&this._a.push(e),this._s&&M(this,!1),e.promise},catch:function(t){return this.then(void 0,t)}}),i=function(){var t=new n;this.promise=t,this.resolve=s(D,t,1),this.reject=s($,t,1)},b.f=T=function(t){return t===P||t===a?new i(t):o(t)}),l(l.G+l.W+l.F*!F,{Promise:P}),e(2943)(P,S),e(2974)(S),a=e(5645)[S],l(l.S+l.F*!F,S,{reject:function(t){var r=T(this);return(0,r.reject)(t),r.promise}}),l(l.S+l.F*(c||!F),S,{resolve:function(t){return A(c&&this===a?P:this,t)}}),l(l.S+l.F*!(F&&e(7462)((function(t){P.all(t).catch(L)}))),S,{all:function(t){var r=this,e=T(r),n=e.resolve,o=e.reject,i=w((function(){var e=[],i=0,a=1;g(t,!1,(function(t){var c=i++,u=!1;e.push(void 0),a++,r.resolve(t).then((function(t){u||(u=!0,e[c]=t,--a||n(e))}),o)})),--a||n(e)}));return i.e&&o(i.v),e.promise},race:function(t){var r=this,e=T(r),n=e.reject,o=w((function(){g(t,!1,(function(t){r.resolve(t).then(e.resolve,n)}))}));return o.e&&n(o.v),e.promise}})},1572:(t,r,e)=>{var n=e(2985),o=e(4963),i=e(7007),a=(e(3816).Reflect||{}).apply,c=Function.apply;n(n.S+n.F*!e(4253)((function(){a((function(){}))})),"Reflect",{apply:function(t,r,e){var n=o(t),u=i(e);return a?a(n,r,u):c.call(n,r,u)}})},2139:(t,r,e)=>{var n=e(2985),o=e(2503),i=e(4963),a=e(7007),c=e(5286),u=e(4253),s=e(4398),f=(e(3816).Reflect||{}).construct,l=u((function(){function t(){}return!(f((function(){}),[],t)instanceof t)})),h=!u((function(){f((function(){}))}));n(n.S+n.F*(l||h),"Reflect",{construct:function(t,r){i(t),a(r);var e=arguments.length<3?t:i(arguments[2]);if(h&&!l)return f(t,r,e);if(t==e){switch(r.length){case 0:return new t;case 1:return new t(r[0]);case 2:return new t(r[0],r[1]);case 3:return new t(r[0],r[1],r[2]);case 4:return new t(r[0],r[1],r[2],r[3])}var n=[null];return n.push.apply(n,r),new(s.apply(t,n))}var u=e.prototype,v=o(c(u)?u:Object.prototype),p=Function.apply.call(t,v,r);return c(p)?p:v}})},685:(t,r,e)=>{var n=e(9275),o=e(2985),i=e(7007),a=e(1689);o(o.S+o.F*e(4253)((function(){Reflect.defineProperty(n.f({},1,{value:1}),1,{value:2})})),"Reflect",{defineProperty:function(t,r,e){i(t),r=a(r,!0),i(e);try{return n.f(t,r,e),!0}catch(t){return!1}}})},5535:(t,r,e)=>{var n=e(2985),o=e(8693).f,i=e(7007);n(n.S,"Reflect",{deleteProperty:function(t,r){var e=o(i(t),r);return!(e&&!e.configurable)&&delete t[r]}})},7347:(t,r,e)=>{"use strict";var n=e(2985),o=e(7007),i=function(t){this._t=o(t),this._i=0;var r,e=this._k=[];for(r in t)e.push(r)};e(9988)(i,"Object",(function(){var t,r=this,e=r._k;do{if(r._i>=e.length)return{value:void 0,done:!0}}while(!((t=e[r._i++])in r._t));return{value:t,done:!1}})),n(n.S,"Reflect",{enumerate:function(t){return new i(t)}})},6633:(t,r,e)=>{var n=e(8693),o=e(2985),i=e(7007);o(o.S,"Reflect",{getOwnPropertyDescriptor:function(t,r){return n.f(i(t),r)}})},8989:(t,r,e)=>{var n=e(2985),o=e(468),i=e(7007);n(n.S,"Reflect",{getPrototypeOf:function(t){return o(i(t))}})},3049:(t,r,e)=>{var n=e(8693),o=e(468),i=e(9181),a=e(2985),c=e(5286),u=e(7007);a(a.S,"Reflect",{get:function t(r,e){var a,s,f=arguments.length<3?r:arguments[2];return u(r)===f?r[e]:(a=n.f(r,e))?i(a,"value")?a.value:void 0!==a.get?a.get.call(f):void 0:c(s=o(r))?t(s,e,f):void 0}})},8270:(t,r,e)=>{var n=e(2985);n(n.S,"Reflect",{has:function(t,r){return r in t}})},4510:(t,r,e)=>{var n=e(2985),o=e(7007),i=Object.isExtensible;n(n.S,"Reflect",{isExtensible:function(t){return o(t),!i||i(t)}})},3984:(t,r,e)=>{var n=e(2985);n(n.S,"Reflect",{ownKeys:e(7643)})},5769:(t,r,e)=>{var n=e(2985),o=e(7007),i=Object.preventExtensions;n(n.S,"Reflect",{preventExtensions:function(t){o(t);try{return i&&i(t),!0}catch(t){return!1}}})},6014:(t,r,e)=>{var n=e(2985),o=e(7375);o&&n(n.S,"Reflect",{setPrototypeOf:function(t,r){o.check(t,r);try{return o.set(t,r),!0}catch(t){return!1}}})},55:(t,r,e)=>{var n=e(9275),o=e(8693),i=e(468),a=e(9181),c=e(2985),u=e(681),s=e(7007),f=e(5286);c(c.S,"Reflect",{set:function t(r,e,c){var l,h,v=arguments.length<4?r:arguments[3],p=o.f(s(r),e);if(!p){if(f(h=i(r)))return t(h,e,c,v);p=u(0)}if(a(p,"value")){if(!1===p.writable||!f(v))return!1;if(l=o.f(v,e)){if(l.get||l.set||!1===l.writable)return!1;l.value=c,n.f(v,e,l)}else n.f(v,e,u(0,c));return!0}return void 0!==p.set&&(p.set.call(v,c),!0)}})},3946:(t,r,e)=>{var n=e(3816),o=e(266),i=e(9275).f,a=e(616).f,c=e(5364),u=e(3218),s=n.RegExp,f=s,l=s.prototype,h=/a/g,v=/a/g,p=new s(h)!==h;if(e(7057)&&(!p||e(4253)((function(){return v[e(6314)("match")]=!1,s(h)!=h||s(v)==v||"/a/i"!=s(h,"i")})))){s=function(t,r){var e=this instanceof s,n=c(t),i=void 0===r;return!e&&n&&t.constructor===s&&i?t:o(p?new f(n&&!i?t.source:t,r):f((n=t instanceof s)?t.source:t,n&&i?u.call(t):r),e?this:l,s)};for(var g=function(t){t in s||i(s,t,{configurable:!0,get:function(){return f[t]},set:function(r){f[t]=r}})},d=a(f),m=0;d.length>m;)g(d[m++]);l.constructor=s,s.prototype=l,e(7234)(n,"RegExp",s)}e(2974)("RegExp")},8269:(t,r,e)=>{"use strict";var n=e(1165);e(2985)({target:"RegExp",proto:!0,forced:n!==/./.exec},{exec:n})},6774:(t,r,e)=>{e(7057)&&"g"!=/./g.flags&&e(9275).f(RegExp.prototype,"flags",{configurable:!0,get:e(3218)})},1466:(t,r,e)=>{"use strict";var n=e(7007),o=e(875),i=e(6793),a=e(7787);e(8082)("match",1,(function(t,r,e,c){return[function(e){var n=t(this),o=null==e?void 0:e[r];return void 0!==o?o.call(e,n):new RegExp(e)[r](String(n))},function(t){var r=c(e,t,this);if(r.done)return r.value;var u=n(t),s=String(this);if(!u.global)return a(u,s);var f=u.unicode;u.lastIndex=0;for(var l,h=[],v=0;null!==(l=a(u,s));){var p=String(l[0]);h[v]=p,""===p&&(u.lastIndex=i(s,o(u.lastIndex),f)),v++}return 0===v?null:h}]}))},9357:(t,r,e)=>{"use strict";var n=e(7007),o=e(508),i=e(875),a=e(1467),c=e(6793),u=e(7787),s=Math.max,f=Math.min,l=Math.floor,h=/\$([$&`']|\d\d?|<[^>]*>)/g,v=/\$([$&`']|\d\d?)/g;e(8082)("replace",2,(function(t,r,e,p){return[function(n,o){var i=t(this),a=null==n?void 0:n[r];return void 0!==a?a.call(n,i,o):e.call(String(i),n,o)},function(t,r){var o=p(e,t,this,r);if(o.done)return o.value;var l=n(t),h=String(this),v="function"==typeof r;v||(r=String(r));var d=l.global;if(d){var m=l.unicode;l.lastIndex=0}for(var y=[];;){var b=u(l,h);if(null===b)break;if(y.push(b),!d)break;""===String(b[0])&&(l.lastIndex=c(h,i(l.lastIndex),m))}for(var w,x="",A=0,S=0;S<y.length;S++){b=y[S];for(var _=String(b[0]),O=s(f(a(b.index),h.length),0),E=[],j=1;j<b.length;j++)E.push(void 0===(w=b[j])?w:String(w));var P=b.groups;if(v){var k=[_].concat(E,O,h);void 0!==P&&k.push(P);var L=String(r.apply(void 0,k))}else L=g(_,h,O,E,P,r);O>=A&&(x+=h.slice(A,O)+L,A=O+_.length)}return x+h.slice(A)}];function g(t,r,n,i,a,c){var u=n+t.length,s=i.length,f=v;return void 0!==a&&(a=o(a),f=h),e.call(c,f,(function(e,o){var c;switch(o.charAt(0)){case"$":return"$";case"&":return t;case"`":return r.slice(0,n);case"'":return r.slice(u);case"<":c=a[o.slice(1,-1)];break;default:var f=+o;if(0===f)return e;if(f>s){var h=l(f/10);return 0===h?e:h<=s?void 0===i[h-1]?o.charAt(1):i[h-1]+o.charAt(1):e}c=i[f-1]}return void 0===c?"":c}))}}))},6142:(t,r,e)=>{"use strict";var n=e(7007),o=e(7195),i=e(7787);e(8082)("search",1,(function(t,r,e,a){return[function(e){var n=t(this),o=null==e?void 0:e[r];return void 0!==o?o.call(e,n):new RegExp(e)[r](String(n))},function(t){var r=a(e,t,this);if(r.done)return r.value;var c=n(t),u=String(this),s=c.lastIndex;o(s,0)||(c.lastIndex=0);var f=i(c,u);return o(c.lastIndex,s)||(c.lastIndex=s),null===f?-1:f.index}]}))},1876:(t,r,e)=>{"use strict";var n=e(5364),o=e(7007),i=e(8364),a=e(6793),c=e(875),u=e(7787),s=e(1165),f=e(4253),l=Math.min,h=[].push,v="split",p="length",g="lastIndex",d=4294967295,m=!f((function(){RegExp(d,"y")}));e(8082)("split",2,(function(t,r,e,f){var y;return y="c"=="abbc"[v](/(b)*/)[1]||4!="test"[v](/(?:)/,-1)[p]||2!="ab"[v](/(?:ab)*/)[p]||4!="."[v](/(.?)(.?)/)[p]||"."[v](/()()/)[p]>1||""[v](/.?/)[p]?function(t,r){var o=String(this);if(void 0===t&&0===r)return[];if(!n(t))return e.call(o,t,r);for(var i,a,c,u=[],f=(t.ignoreCase?"i":"")+(t.multiline?"m":"")+(t.unicode?"u":"")+(t.sticky?"y":""),l=0,v=void 0===r?d:r>>>0,m=new RegExp(t.source,f+"g");(i=s.call(m,o))&&!((a=m[g])>l&&(u.push(o.slice(l,i.index)),i[p]>1&&i.index<o[p]&&h.apply(u,i.slice(1)),c=i[0][p],l=a,u[p]>=v));)m[g]===i.index&&m[g]++;return l===o[p]?!c&&m.test("")||u.push(""):u.push(o.slice(l)),u[p]>v?u.slice(0,v):u}:"0"[v](void 0,0)[p]?function(t,r){return void 0===t&&0===r?[]:e.call(this,t,r)}:e,[function(e,n){var o=t(this),i=null==e?void 0:e[r];return void 0!==i?i.call(e,o,n):y.call(String(o),e,n)},function(t,r){var n=f(y,t,this,r,y!==e);if(n.done)return n.value;var s=o(t),h=String(this),v=i(s,RegExp),p=s.unicode,g=(s.ignoreCase?"i":"")+(s.multiline?"m":"")+(s.unicode?"u":"")+(m?"y":"g"),b=new v(m?s:"^(?:"+s.source+")",g),w=void 0===r?d:r>>>0;if(0===w)return[];if(0===h.length)return null===u(b,h)?[h]:[];for(var x=0,A=0,S=[];A<h.length;){b.lastIndex=m?A:0;var _,O=u(b,m?h:h.slice(A));if(null===O||(_=l(c(b.lastIndex+(m?0:A)),h.length))===x)A=a(h,A,p);else{if(S.push(h.slice(x,A)),S.length===w)return S;for(var E=1;E<=O.length-1;E++)if(S.push(O[E]),S.length===w)return S;A=x=_}}return S.push(h.slice(x)),S}]}))},6108:(t,r,e)=>{"use strict";e(6774);var n=e(7007),o=e(3218),i=e(7057),a="toString",c=/./[a],u=function(t){e(7234)(RegExp.prototype,a,t,!0)};e(4253)((function(){return"/a/b"!=c.call({source:"a",flags:"b"})}))?u((function(){var t=n(this);return"/".concat(t.source,"/","flags"in t?t.flags:!i&&t instanceof RegExp?o.call(t):void 0)})):c.name!=a&&u((function(){return c.call(this)}))},8184:(t,r,e)=>{"use strict";var n=e(9824),o=e(1616);t.exports=e(5795)("Set",(function(t){return function(){return t(this,arguments.length>0?arguments[0]:void 0)}}),{add:function(t){return n.def(o(this,"Set"),t=0===t?0:t,t)}},n)},856:(t,r,e)=>{"use strict";e(9395)("anchor",(function(t){return function(r){return t(this,"a","name",r)}}))},703:(t,r,e)=>{"use strict";e(9395)("big",(function(t){return function(){return t(this,"big","","")}}))},1539:(t,r,e)=>{"use strict";e(9395)("blink",(function(t){return function(){return t(this,"blink","","")}}))},5292:(t,r,e)=>{"use strict";e(9395)("bold",(function(t){return function(){return t(this,"b","","")}}))},9539:(t,r,e)=>{"use strict";var n=e(2985),o=e(4496)(!1);n(n.P,"String",{codePointAt:function(t){return o(this,t)}})},6620:(t,r,e)=>{"use strict";var n=e(2985),o=e(875),i=e(2094),a="endsWith",c=""[a];n(n.P+n.F*e(8852)(a),"String",{endsWith:function(t){var r=i(this,t,a),e=arguments.length>1?arguments[1]:void 0,n=o(r.length),u=void 0===e?n:Math.min(o(e),n),s=String(t);return c?c.call(r,s,u):r.slice(u-s.length,u)===s}})},6629:(t,r,e)=>{"use strict";e(9395)("fixed",(function(t){return function(){return t(this,"tt","","")}}))},3694:(t,r,e)=>{"use strict";e(9395)("fontcolor",(function(t){return function(r){return t(this,"font","color",r)}}))},7648:(t,r,e)=>{"use strict";e(9395)("fontsize",(function(t){return function(r){return t(this,"font","size",r)}}))},191:(t,r,e)=>{var n=e(2985),o=e(2337),i=String.fromCharCode,a=String.fromCodePoint;n(n.S+n.F*(!!a&&1!=a.length),"String",{fromCodePoint:function(t){for(var r,e=[],n=arguments.length,a=0;n>a;){if(r=+arguments[a++],o(r,1114111)!==r)throw RangeError(r+" is not a valid code point");e.push(r<65536?i(r):i(55296+((r-=65536)>>10),r%1024+56320))}return e.join("")}})},2850:(t,r,e)=>{"use strict";var n=e(2985),o=e(2094),i="includes";n(n.P+n.F*e(8852)(i),"String",{includes:function(t){return!!~o(this,t,i).indexOf(t,arguments.length>1?arguments[1]:void 0)}})},7795:(t,r,e)=>{"use strict";e(9395)("italics",(function(t){return function(){return t(this,"i","","")}}))},9115:(t,r,e)=>{"use strict";var n=e(4496)(!0);e(2923)(String,"String",(function(t){this._t=String(t),this._i=0}),(function(){var t,r=this._t,e=this._i;return e>=r.length?{value:void 0,done:!0}:(t=n(r,e),this._i+=t.length,{value:t,done:!1})}))},4531:(t,r,e)=>{"use strict";e(9395)("link",(function(t){return function(r){return t(this,"a","href",r)}}))},8306:(t,r,e)=>{var n=e(2985),o=e(2110),i=e(875);n(n.S,"String",{raw:function(t){for(var r=o(t.raw),e=i(r.length),n=arguments.length,a=[],c=0;e>c;)a.push(String(r[c++])),c<n&&a.push(String(arguments[c]));return a.join("")}})},823:(t,r,e)=>{var n=e(2985);n(n.P,"String",{repeat:e(8595)})},3605:(t,r,e)=>{"use strict";e(9395)("small",(function(t){return function(){return t(this,"small","","")}}))},7732:(t,r,e)=>{"use strict";var n=e(2985),o=e(875),i=e(2094),a="startsWith",c=""[a];n(n.P+n.F*e(8852)(a),"String",{startsWith:function(t){var r=i(this,t,a),e=o(Math.min(arguments.length>1?arguments[1]:void 0,r.length)),n=String(t);return c?c.call(r,n,e):r.slice(e,e+n.length)===n}})},6780:(t,r,e)=>{"use strict";e(9395)("strike",(function(t){return function(){return t(this,"strike","","")}}))},9937:(t,r,e)=>{"use strict";e(9395)("sub",(function(t){return function(){return t(this,"sub","","")}}))},511:(t,r,e)=>{"use strict";e(9395)("sup",(function(t){return function(){return t(this,"sup","","")}}))},4564:(t,r,e)=>{"use strict";e(9599)("trim",(function(t){return function(){return t(this,3)}}))},5767:(t,r,e)=>{"use strict";var n=e(3816),o=e(9181),i=e(7057),a=e(2985),c=e(7234),u=e(4728).KEY,s=e(4253),f=e(3825),l=e(2943),h=e(3953),v=e(6314),p=e(8787),g=e(6074),d=e(5541),m=e(4302),y=e(7007),b=e(5286),w=e(508),x=e(2110),A=e(1689),S=e(681),_=e(2503),O=e(9327),E=e(8693),j=e(4548),P=e(9275),k=e(7184),L=E.f,T=P.f,F=O.f,N=n.Symbol,M=n.JSON,I=M&&M.stringify,C="prototype",R=v("_hidden"),$=v("toPrimitive"),D={}.propertyIsEnumerable,U=f("symbol-registry"),G=f("symbols"),B=f("op-symbols"),W=Object[C],V="function"==typeof N&&!!j.f,q=n.QObject,Y=!q||!q[C]||!q[C].findChild,z=i&&s((function(){return 7!=_(T({},"a",{get:function(){return T(this,"a",{value:7}).a}})).a}))?function(t,r,e){var n=L(W,r);n&&delete W[r],T(t,r,e),n&&t!==W&&T(W,r,n)}:T,Q=function(t){var r=G[t]=_(N[C]);return r._k=t,r},J=V&&"symbol"==typeof N.iterator?function(t){return"symbol"==typeof t}:function(t){return t instanceof N},K=function(t,r,e){return t===W&&K(B,r,e),y(t),r=A(r,!0),y(e),o(G,r)?(e.enumerable?(o(t,R)&&t[R][r]&&(t[R][r]=!1),e=_(e,{enumerable:S(0,!1)})):(o(t,R)||T(t,R,S(1,{})),t[R][r]=!0),z(t,r,e)):T(t,r,e)},H=function(t,r){y(t);for(var e,n=d(r=x(r)),o=0,i=n.length;i>o;)K(t,e=n[o++],r[e]);return t},X=function(t){var r=D.call(this,t=A(t,!0));return!(this===W&&o(G,t)&&!o(B,t))&&(!(r||!o(this,t)||!o(G,t)||o(this,R)&&this[R][t])||r)},Z=function(t,r){if(t=x(t),r=A(r,!0),t!==W||!o(G,r)||o(B,r)){var e=L(t,r);return!e||!o(G,r)||o(t,R)&&t[R][r]||(e.enumerable=!0),e}},tt=function(t){for(var r,e=F(x(t)),n=[],i=0;e.length>i;)o(G,r=e[i++])||r==R||r==u||n.push(r);return n},rt=function(t){for(var r,e=t===W,n=F(e?B:x(t)),i=[],a=0;n.length>a;)!o(G,r=n[a++])||e&&!o(W,r)||i.push(G[r]);return i};V||(c((N=function(){if(this instanceof N)throw TypeError("Symbol is not a constructor!");var t=h(arguments.length>0?arguments[0]:void 0),r=function(e){this===W&&r.call(B,e),o(this,R)&&o(this[R],t)&&(this[R][t]=!1),z(this,t,S(1,e))};return i&&Y&&z(W,t,{configurable:!0,set:r}),Q(t)})[C],"toString",(function(){return this._k})),E.f=Z,P.f=K,e(616).f=O.f=tt,e(4682).f=X,j.f=rt,i&&!e(4461)&&c(W,"propertyIsEnumerable",X,!0),p.f=function(t){return Q(v(t))}),a(a.G+a.W+a.F*!V,{Symbol:N});for(var et="hasInstance,isConcatSpreadable,iterator,match,replace,search,species,split,toPrimitive,toStringTag,unscopables".split(","),nt=0;et.length>nt;)v(et[nt++]);for(var ot=k(v.store),it=0;ot.length>it;)g(ot[it++]);a(a.S+a.F*!V,"Symbol",{for:function(t){return o(U,t+="")?U[t]:U[t]=N(t)},keyFor:function(t){if(!J(t))throw TypeError(t+" is not a symbol!");for(var r in U)if(U[r]===t)return r},useSetter:function(){Y=!0},useSimple:function(){Y=!1}}),a(a.S+a.F*!V,"Object",{create:function(t,r){return void 0===r?_(t):H(_(t),r)},defineProperty:K,defineProperties:H,getOwnPropertyDescriptor:Z,getOwnPropertyNames:tt,getOwnPropertySymbols:rt});var at=s((function(){j.f(1)}));a(a.S+a.F*at,"Object",{getOwnPropertySymbols:function(t){return j.f(w(t))}}),M&&a(a.S+a.F*(!V||s((function(){var t=N();return"[null]"!=I([t])||"{}"!=I({a:t})||"{}"!=I(Object(t))}))),"JSON",{stringify:function(t){for(var r,e,n=[t],o=1;arguments.length>o;)n.push(arguments[o++]);if(e=r=n[1],(b(r)||void 0!==t)&&!J(t))return m(r)||(r=function(t,r){if("function"==typeof e&&(r=e.call(this,t,r)),!J(r))return r}),n[1]=r,I.apply(M,n)}}),N[C][$]||e(7728)(N[C],$,N[C].valueOf),l(N,"Symbol"),l(Math,"Math",!0),l(n.JSON,"JSON",!0)},142:(t,r,e)=>{"use strict";var n=e(2985),o=e(9383),i=e(1125),a=e(7007),c=e(2337),u=e(875),s=e(5286),f=e(3816).ArrayBuffer,l=e(8364),h=i.ArrayBuffer,v=i.DataView,p=o.ABV&&f.isView,g=h.prototype.slice,d=o.VIEW,m="ArrayBuffer";n(n.G+n.W+n.F*(f!==h),{ArrayBuffer:h}),n(n.S+n.F*!o.CONSTR,m,{isView:function(t){return p&&p(t)||s(t)&&d in t}}),n(n.P+n.U+n.F*e(4253)((function(){return!new h(2).slice(1,void 0).byteLength})),m,{slice:function(t,r){if(void 0!==g&&void 0===r)return g.call(a(this),t);for(var e=a(this).byteLength,n=c(t,e),o=c(void 0===r?e:r,e),i=new(l(this,h))(u(o-n)),s=new v(this),f=new v(i),p=0;n<o;)f.setUint8(p++,s.getUint8(n++));return i}}),e(2974)(m)},1786:(t,r,e)=>{var n=e(2985);n(n.G+n.W+n.F*!e(9383).ABV,{DataView:e(1125).DataView})},162:(t,r,e)=>{e(8440)("Float32",4,(function(t){return function(r,e,n){return t(this,r,e,n)}}))},3834:(t,r,e)=>{e(8440)("Float64",8,(function(t){return function(r,e,n){return t(this,r,e,n)}}))},4821:(t,r,e)=>{e(8440)("Int16",2,(function(t){return function(r,e,n){return t(this,r,e,n)}}))},1303:(t,r,e)=>{e(8440)("Int32",4,(function(t){return function(r,e,n){return t(this,r,e,n)}}))},5368:(t,r,e)=>{e(8440)("Int8",1,(function(t){return function(r,e,n){return t(this,r,e,n)}}))},9103:(t,r,e)=>{e(8440)("Uint16",2,(function(t){return function(r,e,n){return t(this,r,e,n)}}))},3318:(t,r,e)=>{e(8440)("Uint32",4,(function(t){return function(r,e,n){return t(this,r,e,n)}}))},6964:(t,r,e)=>{e(8440)("Uint8",1,(function(t){return function(r,e,n){return t(this,r,e,n)}}))},2152:(t,r,e)=>{e(8440)("Uint8",1,(function(t){return function(r,e,n){return t(this,r,e,n)}}),!0)},147:(t,r,e)=>{"use strict";var n,o=e(3816),i=e(50)(0),a=e(7234),c=e(4728),u=e(5345),s=e(3657),f=e(5286),l=e(1616),h=e(1616),v=!o.ActiveXObject&&"ActiveXObject"in o,p="WeakMap",g=c.getWeak,d=Object.isExtensible,m=s.ufstore,y=function(t){return function(){return t(this,arguments.length>0?arguments[0]:void 0)}},b={get:function(t){if(f(t)){var r=g(t);return!0===r?m(l(this,p)).get(t):r?r[this._i]:void 0}},set:function(t,r){return s.def(l(this,p),t,r)}},w=t.exports=e(5795)(p,y,b,s,!0,!0);h&&v&&(u((n=s.getConstructor(y,p)).prototype,b),c.NEED=!0,i(["delete","has","get","set"],(function(t){var r=w.prototype,e=r[t];a(r,t,(function(r,o){if(f(r)&&!d(r)){this._f||(this._f=new n);var i=this._f[t](r,o);return"set"==t?this:i}return e.call(this,r,o)}))})))},9192:(t,r,e)=>{"use strict";var n=e(3657),o=e(1616),i="WeakSet";e(5795)(i,(function(t){return function(){return t(this,arguments.length>0?arguments[0]:void 0)}}),{add:function(t){return n.def(o(this,i),t,!0)}},n,!1,!0)},1268:(t,r,e)=>{"use strict";var n=e(2985),o=e(3325),i=e(508),a=e(875),c=e(4963),u=e(6886);n(n.P,"Array",{flatMap:function(t){var r,e,n=i(this);return c(t),r=a(n.length),e=u(n,0),o(e,n,n,r,0,1,t,arguments[1]),e}}),e(7722)("flatMap")},2773:(t,r,e)=>{"use strict";var n=e(2985),o=e(9315)(!0);n(n.P,"Array",{includes:function(t){return o(this,t,arguments.length>1?arguments[1]:void 0)}}),e(7722)("includes")},3276:(t,r,e)=>{var n=e(2985),o=e(1131)(!0);n(n.S,"Object",{entries:function(t){return o(t)}})},8351:(t,r,e)=>{var n=e(2985),o=e(7643),i=e(2110),a=e(8693),c=e(2811);n(n.S,"Object",{getOwnPropertyDescriptors:function(t){for(var r,e,n=i(t),u=a.f,s=o(n),f={},l=0;s.length>l;)void 0!==(e=u(n,r=s[l++]))&&c(f,r,e);return f}})},6409:(t,r,e)=>{var n=e(2985),o=e(1131)(!1);n(n.S,"Object",{values:function(t){return o(t)}})},9865:(t,r,e)=>{"use strict";var n=e(2985),o=e(5645),i=e(3816),a=e(8364),c=e(94);n(n.P+n.R,"Promise",{finally:function(t){var r=a(this,o.Promise||i.Promise),e="function"==typeof t;return this.then(e?function(e){return c(r,t()).then((function(){return e}))}:t,e?function(e){return c(r,t()).then((function(){throw e}))}:t)}})},2770:(t,r,e)=>{"use strict";var n=e(2985),o=e(5442),i=e(575),a=/Version\/10\.\d+(\.\d+)?( Mobile\/\w+)? Safari\//.test(i);n(n.P+n.F*a,"String",{padEnd:function(t){return o(this,t,arguments.length>1?arguments[1]:void 0,!1)}})},1784:(t,r,e)=>{"use strict";var n=e(2985),o=e(5442),i=e(575),a=/Version\/10\.\d+(\.\d+)?( Mobile\/\w+)? Safari\//.test(i);n(n.P+n.F*a,"String",{padStart:function(t){return o(this,t,arguments.length>1?arguments[1]:void 0,!0)}})},5869:(t,r,e)=>{"use strict";e(9599)("trimLeft",(function(t){return function(){return t(this,1)}}),"trimStart")},4325:(t,r,e)=>{"use strict";e(9599)("trimRight",(function(t){return function(){return t(this,2)}}),"trimEnd")},9665:(t,r,e)=>{e(6074)("asyncIterator")},1181:(t,r,e)=>{for(var n=e(6997),o=e(7184),i=e(7234),a=e(3816),c=e(7728),u=e(2803),s=e(6314),f=s("iterator"),l=s("toStringTag"),h=u.Array,v={CSSRuleList:!0,CSSStyleDeclaration:!1,CSSValueList:!1,ClientRectList:!1,DOMRectList:!1,DOMStringList:!1,DOMTokenList:!0,DataTransferItemList:!1,FileList:!1,HTMLAllCollection:!1,HTMLCollection:!1,HTMLFormElement:!1,HTMLSelectElement:!1,MediaList:!0,MimeTypeArray:!1,NamedNodeMap:!1,NodeList:!0,PaintRequestList:!1,Plugin:!1,PluginArray:!1,SVGLengthList:!1,SVGNumberList:!1,SVGPathSegList:!1,SVGPointList:!1,SVGStringList:!1,SVGTransformList:!1,SourceBufferList:!1,StyleSheetList:!0,TextTrackCueList:!1,TextTrackList:!1,TouchList:!1},p=o(v),g=0;g<p.length;g++){var d,m=p[g],y=v[m],b=a[m],w=b&&b.prototype;if(w&&(w[f]||c(w,f,h),w[l]||c(w,l,m),u[m]=h,y))for(d in n)w[d]||i(w,d,n[d],!0)}},4633:(t,r,e)=>{var n=e(2985),o=e(4193);n(n.G+n.B,{setImmediate:o.set,clearImmediate:o.clear})},2564:(t,r,e)=>{var n=e(3816),o=e(2985),i=e(575),a=[].slice,c=/MSIE .\./.test(i),u=function(t){return function(r,e){var n=arguments.length>2,o=!!n&&a.call(arguments,2);return t(n?function(){("function"==typeof r?r:Function(r)).apply(this,o)}:r,e)}};o(o.G+o.B+o.F*c,{setTimeout:u(n.setTimeout),setInterval:u(n.setInterval)})},6337:(t,r,e)=>{e(2564),e(4633),e(1181),t.exports=e(5645)},5666:t=>{var r=function(t){"use strict";var r,e=Object.prototype,n=e.hasOwnProperty,o=Object.defineProperty||function(t,r,e){t[r]=e.value},i="function"==typeof Symbol?Symbol:{},a=i.iterator||"@@iterator",c=i.asyncIterator||"@@asyncIterator",u=i.toStringTag||"@@toStringTag";function s(t,r,e){return Object.defineProperty(t,r,{value:e,enumerable:!0,configurable:!0,writable:!0}),t[r]}try{s({},"")}catch(t){s=function(t,r,e){return t[r]=e}}function f(t,r,e,n){var i=r&&r.prototype instanceof m?r:m,a=Object.create(i.prototype),c=new L(n||[]);return o(a,"_invoke",{value:E(t,e,c)}),a}function l(t,r,e){try{return{type:"normal",arg:t.call(r,e)}}catch(t){return{type:"throw",arg:t}}}t.wrap=f;var h="suspendedStart",v="suspendedYield",p="executing",g="completed",d={};function m(){}function y(){}function b(){}var w={};s(w,a,(function(){return this}));var x=Object.getPrototypeOf,A=x&&x(x(T([])));A&&A!==e&&n.call(A,a)&&(w=A);var S=b.prototype=m.prototype=Object.create(w);function _(t){["next","throw","return"].forEach((function(r){s(t,r,(function(t){return this._invoke(r,t)}))}))}function O(t,r){function e(o,i,a,c){var u=l(t[o],t,i);if("throw"!==u.type){var s=u.arg,f=s.value;return f&&"object"==typeof f&&n.call(f,"__await")?r.resolve(f.__await).then((function(t){e("next",t,a,c)}),(function(t){e("throw",t,a,c)})):r.resolve(f).then((function(t){s.value=t,a(s)}),(function(t){return e("throw",t,a,c)}))}c(u.arg)}var i;o(this,"_invoke",{value:function(t,n){function o(){return new r((function(r,o){e(t,n,r,o)}))}return i=i?i.then(o,o):o()}})}function E(t,r,e){var n=h;return function(o,i){if(n===p)throw new Error("Generator is already running");if(n===g){if("throw"===o)throw i;return F()}for(e.method=o,e.arg=i;;){var a=e.delegate;if(a){var c=j(a,e);if(c){if(c===d)continue;return c}}if("next"===e.method)e.sent=e._sent=e.arg;else if("throw"===e.method){if(n===h)throw n=g,e.arg;e.dispatchException(e.arg)}else"return"===e.method&&e.abrupt("return",e.arg);n=p;var u=l(t,r,e);if("normal"===u.type){if(n=e.done?g:v,u.arg===d)continue;return{value:u.arg,done:e.done}}"throw"===u.type&&(n=g,e.method="throw",e.arg=u.arg)}}}function j(t,e){var n=e.method,o=t.iterator[n];if(o===r)return e.delegate=null,"throw"===n&&t.iterator.return&&(e.method="return",e.arg=r,j(t,e),"throw"===e.method)||"return"!==n&&(e.method="throw",e.arg=new TypeError("The iterator does not provide a '"+n+"' method")),d;var i=l(o,t.iterator,e.arg);if("throw"===i.type)return e.method="throw",e.arg=i.arg,e.delegate=null,d;var a=i.arg;return a?a.done?(e[t.resultName]=a.value,e.next=t.nextLoc,"return"!==e.method&&(e.method="next",e.arg=r),e.delegate=null,d):a:(e.method="throw",e.arg=new TypeError("iterator result is not an object"),e.delegate=null,d)}function P(t){var r={tryLoc:t[0]};1 in t&&(r.catchLoc=t[1]),2 in t&&(r.finallyLoc=t[2],r.afterLoc=t[3]),this.tryEntries.push(r)}function k(t){var r=t.completion||{};r.type="normal",delete r.arg,t.completion=r}function L(t){this.tryEntries=[{tryLoc:"root"}],t.forEach(P,this),this.reset(!0)}function T(t){if(t){var e=t[a];if(e)return e.call(t);if("function"==typeof t.next)return t;if(!isNaN(t.length)){var o=-1,i=function e(){for(;++o<t.length;)if(n.call(t,o))return e.value=t[o],e.done=!1,e;return e.value=r,e.done=!0,e};return i.next=i}}return{next:F}}function F(){return{value:r,done:!0}}return y.prototype=b,o(S,"constructor",{value:b,configurable:!0}),o(b,"constructor",{value:y,configurable:!0}),y.displayName=s(b,u,"GeneratorFunction"),t.isGeneratorFunction=function(t){var r="function"==typeof t&&t.constructor;return!!r&&(r===y||"GeneratorFunction"===(r.displayName||r.name))},t.mark=function(t){return Object.setPrototypeOf?Object.setPrototypeOf(t,b):(t.__proto__=b,s(t,u,"GeneratorFunction")),t.prototype=Object.create(S),t},t.awrap=function(t){return{__await:t}},_(O.prototype),s(O.prototype,c,(function(){return this})),t.AsyncIterator=O,t.async=function(r,e,n,o,i){void 0===i&&(i=Promise);var a=new O(f(r,e,n,o),i);return t.isGeneratorFunction(e)?a:a.next().then((function(t){return t.done?t.value:a.next()}))},_(S),s(S,u,"Generator"),s(S,a,(function(){return this})),s(S,"toString",(function(){return"[object Generator]"})),t.keys=function(t){var r=Object(t),e=[];for(var n in r)e.push(n);return e.reverse(),function t(){for(;e.length;){var n=e.pop();if(n in r)return t.value=n,t.done=!1,t}return t.done=!0,t}},t.values=T,L.prototype={constructor:L,reset:function(t){if(this.prev=0,this.next=0,this.sent=this._sent=r,this.done=!1,this.delegate=null,this.method="next",this.arg=r,this.tryEntries.forEach(k),!t)for(var e in this)"t"===e.charAt(0)&&n.call(this,e)&&!isNaN(+e.slice(1))&&(this[e]=r)},stop:function(){this.done=!0;var t=this.tryEntries[0].completion;if("throw"===t.type)throw t.arg;return this.rval},dispatchException:function(t){if(this.done)throw t;var e=this;function o(n,o){return c.type="throw",c.arg=t,e.next=n,o&&(e.method="next",e.arg=r),!!o}for(var i=this.tryEntries.length-1;i>=0;--i){var a=this.tryEntries[i],c=a.completion;if("root"===a.tryLoc)return o("end");if(a.tryLoc<=this.prev){var u=n.call(a,"catchLoc"),s=n.call(a,"finallyLoc");if(u&&s){if(this.prev<a.catchLoc)return o(a.catchLoc,!0);if(this.prev<a.finallyLoc)return o(a.finallyLoc)}else if(u){if(this.prev<a.catchLoc)return o(a.catchLoc,!0)}else{if(!s)throw new Error("try statement without catch or finally");if(this.prev<a.finallyLoc)return o(a.finallyLoc)}}}},abrupt:function(t,r){for(var e=this.tryEntries.length-1;e>=0;--e){var o=this.tryEntries[e];if(o.tryLoc<=this.prev&&n.call(o,"finallyLoc")&&this.prev<o.finallyLoc){var i=o;break}}i&&("break"===t||"continue"===t)&&i.tryLoc<=r&&r<=i.finallyLoc&&(i=null);var a=i?i.completion:{};return a.type=t,a.arg=r,i?(this.method="next",this.next=i.finallyLoc,d):this.complete(a)},complete:function(t,r){if("throw"===t.type)throw t.arg;return"break"===t.type||"continue"===t.type?this.next=t.arg:"return"===t.type?(this.rval=this.arg=t.arg,this.method="return",this.next="end"):"normal"===t.type&&r&&(this.next=r),d},finish:function(t){for(var r=this.tryEntries.length-1;r>=0;--r){var e=this.tryEntries[r];if(e.finallyLoc===t)return this.complete(e.completion,e.afterLoc),k(e),d}},catch:function(t){for(var r=this.tryEntries.length-1;r>=0;--r){var e=this.tryEntries[r];if(e.tryLoc===t){var n=e.completion;if("throw"===n.type){var o=n.arg;k(e)}return o}}throw new Error("illegal catch attempt")},delegateYield:function(t,e,n){return this.delegate={iterator:T(t),resultName:e,nextLoc:n},"next"===this.method&&(this.arg=r),d}},t}(t.exports);try{regeneratorRuntime=r}catch(t){"object"==typeof globalThis?globalThis.regeneratorRuntime=r:Function("r","regeneratorRuntime = r")(r)}},3150:function(t,r){var e,n,o;"undefined"!=typeof globalThis?globalThis:"undefined"!=typeof self&&self,n=[t],e=function(t){"use strict";if(!globalThis.chrome?.runtime?.id)throw new Error("This script should only be loaded in a browser extension.");if(void 0===globalThis.browser||Object.getPrototypeOf(globalThis.browser)!==Object.prototype){const r="The message port closed before a response was received.",e=t=>{const e={alarms:{clear:{minArgs:0,maxArgs:1},clearAll:{minArgs:0,maxArgs:0},get:{minArgs:0,maxArgs:1},getAll:{minArgs:0,maxArgs:0}},bookmarks:{create:{minArgs:1,maxArgs:1},get:{minArgs:1,maxArgs:1},getChildren:{minArgs:1,maxArgs:1},getRecent:{minArgs:1,maxArgs:1},getSubTree:{minArgs:1,maxArgs:1},getTree:{minArgs:0,maxArgs:0},move:{minArgs:2,maxArgs:2},remove:{minArgs:1,maxArgs:1},removeTree:{minArgs:1,maxArgs:1},search:{minArgs:1,maxArgs:1},update:{minArgs:2,maxArgs:2}},browserAction:{disable:{minArgs:0,maxArgs:1,fallbackToNoCallback:!0},enable:{minArgs:0,maxArgs:1,fallbackToNoCallback:!0},getBadgeBackgroundColor:{minArgs:1,maxArgs:1},getBadgeText:{minArgs:1,maxArgs:1},getPopup:{minArgs:1,maxArgs:1},getTitle:{minArgs:1,maxArgs:1},openPopup:{minArgs:0,maxArgs:0},setBadgeBackgroundColor:{minArgs:1,maxArgs:1,fallbackToNoCallback:!0},setBadgeText:{minArgs:1,maxArgs:1,fallbackToNoCallback:!0},setIcon:{minArgs:1,maxArgs:1},setPopup:{minArgs:1,maxArgs:1,fallbackToNoCallback:!0},setTitle:{minArgs:1,maxArgs:1,fallbackToNoCallback:!0}},browsingData:{remove:{minArgs:2,maxArgs:2},removeCache:{minArgs:1,maxArgs:1},removeCookies:{minArgs:1,maxArgs:1},removeDownloads:{minArgs:1,maxArgs:1},removeFormData:{minArgs:1,maxArgs:1},removeHistory:{minArgs:1,maxArgs:1},removeLocalStorage:{minArgs:1,maxArgs:1},removePasswords:{minArgs:1,maxArgs:1},removePluginData:{minArgs:1,maxArgs:1},settings:{minArgs:0,maxArgs:0}},commands:{getAll:{minArgs:0,maxArgs:0}},contextMenus:{remove:{minArgs:1,maxArgs:1},removeAll:{minArgs:0,maxArgs:0},update:{minArgs:2,maxArgs:2}},cookies:{get:{minArgs:1,maxArgs:1},getAll:{minArgs:1,maxArgs:1},getAllCookieStores:{minArgs:0,maxArgs:0},remove:{minArgs:1,maxArgs:1},set:{minArgs:1,maxArgs:1}},devtools:{inspectedWindow:{eval:{minArgs:1,maxArgs:2,singleCallbackArg:!1}},panels:{create:{minArgs:3,maxArgs:3,singleCallbackArg:!0},elements:{createSidebarPane:{minArgs:1,maxArgs:1}}}},downloads:{cancel:{minArgs:1,maxArgs:1},download:{minArgs:1,maxArgs:1},erase:{minArgs:1,maxArgs:1},getFileIcon:{minArgs:1,maxArgs:2},open:{minArgs:1,maxArgs:1,fallbackToNoCallback:!0},pause:{minArgs:1,maxArgs:1},removeFile:{minArgs:1,maxArgs:1},resume:{minArgs:1,maxArgs:1},search:{minArgs:1,maxArgs:1},show:{minArgs:1,maxArgs:1,fallbackToNoCallback:!0}},extension:{isAllowedFileSchemeAccess:{minArgs:0,maxArgs:0},isAllowedIncognitoAccess:{minArgs:0,maxArgs:0}},history:{addUrl:{minArgs:1,maxArgs:1},deleteAll:{minArgs:0,maxArgs:0},deleteRange:{minArgs:1,maxArgs:1},deleteUrl:{minArgs:1,maxArgs:1},getVisits:{minArgs:1,maxArgs:1},search:{minArgs:1,maxArgs:1}},i18n:{detectLanguage:{minArgs:1,maxArgs:1},getAcceptLanguages:{minArgs:0,maxArgs:0}},identity:{launchWebAuthFlow:{minArgs:1,maxArgs:1}},idle:{queryState:{minArgs:1,maxArgs:1}},management:{get:{minArgs:1,maxArgs:1},getAll:{minArgs:0,maxArgs:0},getSelf:{minArgs:0,maxArgs:0},setEnabled:{minArgs:2,maxArgs:2},uninstallSelf:{minArgs:0,maxArgs:1}},notifications:{clear:{minArgs:1,maxArgs:1},create:{minArgs:1,maxArgs:2},getAll:{minArgs:0,maxArgs:0},getPermissionLevel:{minArgs:0,maxArgs:0},update:{minArgs:2,maxArgs:2}},pageAction:{getPopup:{minArgs:1,maxArgs:1},getTitle:{minArgs:1,maxArgs:1},hide:{minArgs:1,maxArgs:1,fallbackToNoCallback:!0},setIcon:{minArgs:1,maxArgs:1},setPopup:{minArgs:1,maxArgs:1,fallbackToNoCallback:!0},setTitle:{minArgs:1,maxArgs:1,fallbackToNoCallback:!0},show:{minArgs:1,maxArgs:1,fallbackToNoCallback:!0}},permissions:{contains:{minArgs:1,maxArgs:1},getAll:{minArgs:0,maxArgs:0},remove:{minArgs:1,maxArgs:1},request:{minArgs:1,maxArgs:1}},runtime:{getBackgroundPage:{minArgs:0,maxArgs:0},getPlatformInfo:{minArgs:0,maxArgs:0},openOptionsPage:{minArgs:0,maxArgs:0},requestUpdateCheck:{minArgs:0,maxArgs:0},sendMessage:{minArgs:1,maxArgs:3},sendNativeMessage:{minArgs:2,maxArgs:2},setUninstallURL:{minArgs:1,maxArgs:1}},sessions:{getDevices:{minArgs:0,maxArgs:1},getRecentlyClosed:{minArgs:0,maxArgs:1},restore:{minArgs:0,maxArgs:1}},storage:{local:{clear:{minArgs:0,maxArgs:0},get:{minArgs:0,maxArgs:1},getBytesInUse:{minArgs:0,maxArgs:1},remove:{minArgs:1,maxArgs:1},set:{minArgs:1,maxArgs:1}},managed:{get:{minArgs:0,maxArgs:1},getBytesInUse:{minArgs:0,maxArgs:1}},sync:{clear:{minArgs:0,maxArgs:0},get:{minArgs:0,maxArgs:1},getBytesInUse:{minArgs:0,maxArgs:1},remove:{minArgs:1,maxArgs:1},set:{minArgs:1,maxArgs:1}}},tabs:{captureVisibleTab:{minArgs:0,maxArgs:2},create:{minArgs:1,maxArgs:1},detectLanguage:{minArgs:0,maxArgs:1},discard:{minArgs:0,maxArgs:1},duplicate:{minArgs:1,maxArgs:1},executeScript:{minArgs:1,maxArgs:2},get:{minArgs:1,maxArgs:1},getCurrent:{minArgs:0,maxArgs:0},getZoom:{minArgs:0,maxArgs:1},getZoomSettings:{minArgs:0,maxArgs:1},goBack:{minArgs:0,maxArgs:1},goForward:{minArgs:0,maxArgs:1},highlight:{minArgs:1,maxArgs:1},insertCSS:{minArgs:1,maxArgs:2},move:{minArgs:2,maxArgs:2},query:{minArgs:1,maxArgs:1},reload:{minArgs:0,maxArgs:2},remove:{minArgs:1,maxArgs:1},removeCSS:{minArgs:1,maxArgs:2},sendMessage:{minArgs:2,maxArgs:3},setZoom:{minArgs:1,maxArgs:2},setZoomSettings:{minArgs:1,maxArgs:2},update:{minArgs:1,maxArgs:2}},topSites:{get:{minArgs:0,maxArgs:0}},webNavigation:{getAllFrames:{minArgs:1,maxArgs:1},getFrame:{minArgs:1,maxArgs:1}},webRequest:{handlerBehaviorChanged:{minArgs:0,maxArgs:0}},windows:{create:{minArgs:0,maxArgs:1},get:{minArgs:1,maxArgs:2},getAll:{minArgs:0,maxArgs:1},getCurrent:{minArgs:0,maxArgs:1},getLastFocused:{minArgs:0,maxArgs:1},remove:{minArgs:1,maxArgs:1},update:{minArgs:2,maxArgs:2}}};if(0===Object.keys(e).length)throw new Error("api-metadata.json has not been included in browser-polyfill");class n extends WeakMap{constructor(t,r=void 0){super(r),this.createItem=t}get(t){return this.has(t)||this.set(t,this.createItem(t)),super.get(t)}}const o=t=>t&&"object"==typeof t&&"function"==typeof t.then,i=(r,e)=>(...n)=>{t.runtime.lastError?r.reject(new Error(t.runtime.lastError.message)):e.singleCallbackArg||n.length<=1&&!1!==e.singleCallbackArg?r.resolve(n[0]):r.resolve(n)},a=t=>1==t?"argument":"arguments",c=(t,r)=>function(e,...n){if(n.length<r.minArgs)throw new Error(`Expected at least ${r.minArgs} ${a(r.minArgs)} for ${t}(), got ${n.length}`);if(n.length>r.maxArgs)throw new Error(`Expected at most ${r.maxArgs} ${a(r.maxArgs)} for ${t}(), got ${n.length}`);return new Promise(((o,a)=>{if(r.fallbackToNoCallback)try{e[t](...n,i({resolve:o,reject:a},r))}catch(i){console.warn(`${t} API method doesn't seem to support the callback parameter, falling back to call it without a callback: `,i),e[t](...n),r.fallbackToNoCallback=!1,r.noCallback=!0,o()}else r.noCallback?(e[t](...n),o()):e[t](...n,i({resolve:o,reject:a},r))}))},u=(t,r,e)=>new Proxy(r,{apply:(r,n,o)=>e.call(n,t,...o)});let s=Function.call.bind(Object.prototype.hasOwnProperty);const f=(t,r={},e={})=>{let n=Object.create(null),o={has:(r,e)=>e in t||e in n,get(o,i,a){if(i in n)return n[i];if(!(i in t))return;let l=t[i];if("function"==typeof l)if("function"==typeof r[i])l=u(t,t[i],r[i]);else if(s(e,i)){let r=c(i,e[i]);l=u(t,t[i],r)}else l=l.bind(t);else if("object"==typeof l&&null!==l&&(s(r,i)||s(e,i)))l=f(l,r[i],e[i]);else{if(!s(e,"*"))return Object.defineProperty(n,i,{configurable:!0,enumerable:!0,get:()=>t[i],set(r){t[i]=r}}),l;l=f(l,r[i],e["*"])}return n[i]=l,l},set:(r,e,o,i)=>(e in n?n[e]=o:t[e]=o,!0),defineProperty:(t,r,e)=>Reflect.defineProperty(n,r,e),deleteProperty:(t,r)=>Reflect.deleteProperty(n,r)},i=Object.create(t);return new Proxy(i,o)},l=t=>({addListener(r,e,...n){r.addListener(t.get(e),...n)},hasListener:(r,e)=>r.hasListener(t.get(e)),removeListener(r,e){r.removeListener(t.get(e))}}),h=new n((t=>"function"!=typeof t?t:function(r){const e=f(r,{},{getContent:{minArgs:0,maxArgs:0}});t(e)})),v=new n((t=>"function"!=typeof t?t:function(r,e,n){let i,a,c=!1,u=new Promise((t=>{i=function(r){c=!0,t(r)}}));try{a=t(r,e,i)}catch(t){a=Promise.reject(t)}const s=!0!==a&&o(a);if(!0!==a&&!s&&!c)return!1;const f=t=>{t.then((t=>{n(t)}),(t=>{let r;r=t&&(t instanceof Error||"string"==typeof t.message)?t.message:"An unexpected error occurred",n({__mozWebExtensionPolyfillReject__:!0,message:r})})).catch((t=>{console.error("Failed to send onMessage rejected reply",t)}))};return f(s?a:u),!0})),p=({reject:e,resolve:n},o)=>{t.runtime.lastError?t.runtime.lastError.message===r?n():e(new Error(t.runtime.lastError.message)):o&&o.__mozWebExtensionPolyfillReject__?e(new Error(o.message)):n(o)},g=(t,r,e,...n)=>{if(n.length<r.minArgs)throw new Error(`Expected at least ${r.minArgs} ${a(r.minArgs)} for ${t}(), got ${n.length}`);if(n.length>r.maxArgs)throw new Error(`Expected at most ${r.maxArgs} ${a(r.maxArgs)} for ${t}(), got ${n.length}`);return new Promise(((t,r)=>{const o=p.bind(null,{resolve:t,reject:r});n.push(o),e.sendMessage(...n)}))},d={devtools:{network:{onRequestFinished:l(h)}},runtime:{onMessage:l(v),onMessageExternal:l(v),sendMessage:g.bind(null,"sendMessage",{minArgs:1,maxArgs:3})},tabs:{sendMessage:g.bind(null,"sendMessage",{minArgs:2,maxArgs:3})}},m={clear:{minArgs:1,maxArgs:1},get:{minArgs:1,maxArgs:1},set:{minArgs:1,maxArgs:1}};return e.privacy={network:{"*":m},services:{"*":m},websites:{"*":m}},f(t,d,e)};t.exports=e(chrome)}else t.exports=globalThis.browser},void 0===(o="function"==typeof e?e.apply(r,n):e)||(t.exports=o)},6086:(t,r,e)=>{"use strict";e.d(r,{D4:()=>A,LC:()=>v,Me:()=>d,N5:()=>y,QT:()=>x,SV:()=>_,pB:()=>w,sc:()=>S,u3:()=>l});var n=e(3368);e(3150);function o(t){return o="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},o(t)}function i(t,r){if(!(t instanceof r))throw new TypeError("Cannot call a class as a function")}function a(t,r){for(var e=0;e<r.length;e++){var n=r[e];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,(i=n.key,a=void 0,a=function(t,r){if("object"!==o(t)||null===t)return t;var e=t[Symbol.toPrimitive];if(void 0!==e){var n=e.call(t,r||"default");if("object"!==o(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===r?String:Number)(t)}(i,"string"),"symbol"===o(a)?a:String(a)),n)}var i,a}function c(t,r,e){return r&&a(t.prototype,r),e&&a(t,e),Object.defineProperty(t,"prototype",{writable:!1}),t}var u="action",s=/^\/(v|r|user)\/([^/]+)\/comments\/([^/]+)\/[^/]*(?:\/([^/?&#]+))?/,f=/^\/(?:user|y|u)\/([^/?&#]+)\/?/,l=function(t){var r=void 0,e=void 0,n=void 0,o=void 0,i=t.match(s),a=t.match(f);i?("user"===i[1]?n=i[2]:o=i[2],i[3]&&(r="t3_"+i[3]),i[4]&&(e="t1_"+i[4])):a&&(n=a[1]);return[r,e,n,o]},h=function(t){return t.replace(/&amp;/g,"&").replace(/&gt;/g,">").replace(/&lt;/g,"<").replace(/\s+/g," ").substr(0,300)},v=function(t){return!!t.removal_reason||(p(t.name)?g(t):m(t))},p=function(t){return"t1"===t.substr(0,2)},g=function(t){return"["===t.author.replace(/\\/g,"")[0]&&"["===t.body.replace(/\\/g,"")[0]},d=function(t){return p(t.name)?function(t){return"[deleted]"===t.body.replace(/\\/g,"")&&"[deleted]"===t.author.replace(/\\/g,"")}(t):function(t){return!t.is_robot_indexable&&"[deleted]"===t.author.replace(/\\/g,"")}(t)},m=function(t){return!t.is_robot_indexable},y=function(t,r,e){var n=b(t,e).slice(0,r),o={};return n.forEach((function(t){o[t[0]]=t[1]})),o},b=function(t,r){var e=Object.keys(t).map((function(r){return[r,t[r]]}));return e.sort((function(t,e){return e[1][r]-t[1][r]})),e},w=function(){function t(r,e){i(this,t),this.c=r,this.u=e}return c(t,[{key:"getCreatedUTC",value:function(){return this.c}},{key:"getUnseen",value:function(){return this.u}}]),t}(),x=function(){function t(r){var e=r.id,n=void 0===e?null:e,o=r.observed_utc,a=void 0===o?null:o,c=r.change_type,u=void 0===c?null:c,s=r.seen_count,f=void 0===s?null:s,l=r.object,h=void 0===l?null:l;i(this,t),h?(this.i=h.i,this.o=h.o,this.g=h.g,this.n=h.n):(this.i=n,this.o=a,this.g=u,this.n=f)}return c(t,[{key:"getID",value:function(){return this.i}},{key:"getObservedUTC",value:function(){return this.o}},{key:"getChangeTypeInternal",value:function(){return this.g}},{key:"getChangeType",value:function(){switch(this.g){case n.U$:return"mod removed";case n.oZ:return"user deleted";case n.Ci:return"approved";case n.nb:return"locked";case n.YU:return"unlocked";case n.WK:return"edited"}}},{key:"getSeenCount",value:function(){return this.n}}]),t}(),A=function(){function t(r){var e=r.item,n=void 0===e?null:e,o=r.observed_utc,a=void 0===o?null:o,c=r.object,u=void 0===c?null:c;if(i(this,t),u)this.t=u.t,this.o=u.o,this.c=u.c,this.n=u.n||0;else{var s="";s=p(n.name)?h(n.body):n.title,this.t=s,this.o=a,this.c=n.created_utc,this.n=0}}return c(t,[{key:"setText",value:function(t){this.t=h(t)}},{key:"getText",value:function(){return this.t}},{key:"getObservedUTC",value:function(){return this.o}},{key:"getCreatedUTC",value:function(){return this.c}},{key:"resetSeenCount",value:function(){this.n=0}},{key:"getSeenCount",value:function(){return this.n}},{key:"incrementSeenCount",value:function(){return void 0===this.n&&(this.n=0),this.n+=1,this.n}}]),t}();var S=function(t){var r=t.notificationId,e=t.title,n=t.message;location.protocol.match(/^http/)?chrome.runtime.sendMessage({action:"create-notification",options:{notificationId:r,title:e,message:n}}):registration.showNotification(e,{body:n,data:r,icon:"/icons/128.png",message:n})},_=function(){location.protocol.match(/^http/)?chrome.runtime.sendMessage({action:"update-badge"}):(0,n.Nd)((function(t){var r=0;Object.values(t).forEach((function(t){r+=t.length}));var e=r.toString();0==r&&(e=""),chrome[u].setBadgeBackgroundColor({color:"red"}),chrome[u].setBadgeText({text:e})}))}},6216:(t,r,e)=>{"use strict";e.d(r,{a:()=>O,T:()=>E});var n=e(3368),o=e(6086),i=e(97),a=e(3150);function c(t){return c="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},c(t)}function u(t,r){var e="undefined"!=typeof Symbol&&t[Symbol.iterator]||t["@@iterator"];if(!e){if(Array.isArray(t)||(e=function(t,r){if(!t)return;if("string"==typeof t)return s(t,r);var e=Object.prototype.toString.call(t).slice(8,-1);"Object"===e&&t.constructor&&(e=t.constructor.name);if("Map"===e||"Set"===e)return Array.from(t);if("Arguments"===e||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(e))return s(t,r)}(t))||r&&t&&"number"==typeof t.length){e&&(t=e);var n=0,o=function(){};return{s:o,n:function(){return n>=t.length?{done:!0}:{done:!1,value:t[n++]}},e:function(t){throw t},f:o}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var i,a=!0,c=!1;return{s:function(){e=e.call(t)},n:function(){var t=e.next();return a=t.done,t},e:function(t){c=!0,i=t},f:function(){try{a||null==e.return||e.return()}finally{if(c)throw i}}}}function s(t,r){(null==r||r>t.length)&&(r=t.length);for(var e=0,n=new Array(r);e<r;e++)n[e]=t[e];return n}function f(t,r,e){return(r=function(t){var r=function(t,r){if("object"!==c(t)||null===t)return t;var e=t[Symbol.toPrimitive];if(void 0!==e){var n=e.call(t,r||"default");if("object"!==c(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===r?String:Number)(t)}(t,"string");return"symbol"===c(r)?r:String(r)}(r))in t?Object.defineProperty(t,r,{value:e,enumerable:!0,configurable:!0,writable:!0}):t[r]=e,t}function l(){/*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */l=function(){return t};var t={},r=Object.prototype,e=r.hasOwnProperty,n=Object.defineProperty||function(t,r,e){t[r]=e.value},o="function"==typeof Symbol?Symbol:{},i=o.iterator||"@@iterator",a=o.asyncIterator||"@@asyncIterator",u=o.toStringTag||"@@toStringTag";function s(t,r,e){return Object.defineProperty(t,r,{value:e,enumerable:!0,configurable:!0,writable:!0}),t[r]}try{s({},"")}catch(t){s=function(t,r,e){return t[r]=e}}function f(t,r,e,o){var i=r&&r.prototype instanceof p?r:p,a=Object.create(i.prototype),c=new j(o||[]);return n(a,"_invoke",{value:S(t,e,c)}),a}function h(t,r,e){try{return{type:"normal",arg:t.call(r,e)}}catch(t){return{type:"throw",arg:t}}}t.wrap=f;var v={};function p(){}function g(){}function d(){}var m={};s(m,i,(function(){return this}));var y=Object.getPrototypeOf,b=y&&y(y(P([])));b&&b!==r&&e.call(b,i)&&(m=b);var w=d.prototype=p.prototype=Object.create(m);function x(t){["next","throw","return"].forEach((function(r){s(t,r,(function(t){return this._invoke(r,t)}))}))}function A(t,r){function o(n,i,a,u){var s=h(t[n],t,i);if("throw"!==s.type){var f=s.arg,l=f.value;return l&&"object"==c(l)&&e.call(l,"__await")?r.resolve(l.__await).then((function(t){o("next",t,a,u)}),(function(t){o("throw",t,a,u)})):r.resolve(l).then((function(t){f.value=t,a(f)}),(function(t){return o("throw",t,a,u)}))}u(s.arg)}var i;n(this,"_invoke",{value:function(t,e){function n(){return new r((function(r,n){o(t,e,r,n)}))}return i=i?i.then(n,n):n()}})}function S(t,r,e){var n="suspendedStart";return function(o,i){if("executing"===n)throw new Error("Generator is already running");if("completed"===n){if("throw"===o)throw i;return k()}for(e.method=o,e.arg=i;;){var a=e.delegate;if(a){var c=_(a,e);if(c){if(c===v)continue;return c}}if("next"===e.method)e.sent=e._sent=e.arg;else if("throw"===e.method){if("suspendedStart"===n)throw n="completed",e.arg;e.dispatchException(e.arg)}else"return"===e.method&&e.abrupt("return",e.arg);n="executing";var u=h(t,r,e);if("normal"===u.type){if(n=e.done?"completed":"suspendedYield",u.arg===v)continue;return{value:u.arg,done:e.done}}"throw"===u.type&&(n="completed",e.method="throw",e.arg=u.arg)}}}function _(t,r){var e=r.method,n=t.iterator[e];if(void 0===n)return r.delegate=null,"throw"===e&&t.iterator.return&&(r.method="return",r.arg=void 0,_(t,r),"throw"===r.method)||"return"!==e&&(r.method="throw",r.arg=new TypeError("The iterator does not provide a '"+e+"' method")),v;var o=h(n,t.iterator,r.arg);if("throw"===o.type)return r.method="throw",r.arg=o.arg,r.delegate=null,v;var i=o.arg;return i?i.done?(r[t.resultName]=i.value,r.next=t.nextLoc,"return"!==r.method&&(r.method="next",r.arg=void 0),r.delegate=null,v):i:(r.method="throw",r.arg=new TypeError("iterator result is not an object"),r.delegate=null,v)}function O(t){var r={tryLoc:t[0]};1 in t&&(r.catchLoc=t[1]),2 in t&&(r.finallyLoc=t[2],r.afterLoc=t[3]),this.tryEntries.push(r)}function E(t){var r=t.completion||{};r.type="normal",delete r.arg,t.completion=r}function j(t){this.tryEntries=[{tryLoc:"root"}],t.forEach(O,this),this.reset(!0)}function P(t){if(t){var r=t[i];if(r)return r.call(t);if("function"==typeof t.next)return t;if(!isNaN(t.length)){var n=-1,o=function r(){for(;++n<t.length;)if(e.call(t,n))return r.value=t[n],r.done=!1,r;return r.value=void 0,r.done=!0,r};return o.next=o}}return{next:k}}function k(){return{value:void 0,done:!0}}return g.prototype=d,n(w,"constructor",{value:d,configurable:!0}),n(d,"constructor",{value:g,configurable:!0}),g.displayName=s(d,u,"GeneratorFunction"),t.isGeneratorFunction=function(t){var r="function"==typeof t&&t.constructor;return!!r&&(r===g||"GeneratorFunction"===(r.displayName||r.name))},t.mark=function(t){return Object.setPrototypeOf?Object.setPrototypeOf(t,d):(t.__proto__=d,s(t,u,"GeneratorFunction")),t.prototype=Object.create(w),t},t.awrap=function(t){return{__await:t}},x(A.prototype),s(A.prototype,a,(function(){return this})),t.AsyncIterator=A,t.async=function(r,e,n,o,i){void 0===i&&(i=Promise);var a=new A(f(r,e,n,o),i);return t.isGeneratorFunction(e)?a:a.next().then((function(t){return t.done?t.value:a.next()}))},x(w),s(w,u,"Generator"),s(w,i,(function(){return this})),s(w,"toString",(function(){return"[object Generator]"})),t.keys=function(t){var r=Object(t),e=[];for(var n in r)e.push(n);return e.reverse(),function t(){for(;e.length;){var n=e.pop();if(n in r)return t.value=n,t.done=!1,t}return t.done=!0,t}},t.values=P,j.prototype={constructor:j,reset:function(t){if(this.prev=0,this.next=0,this.sent=this._sent=void 0,this.done=!1,this.delegate=null,this.method="next",this.arg=void 0,this.tryEntries.forEach(E),!t)for(var r in this)"t"===r.charAt(0)&&e.call(this,r)&&!isNaN(+r.slice(1))&&(this[r]=void 0)},stop:function(){this.done=!0;var t=this.tryEntries[0].completion;if("throw"===t.type)throw t.arg;return this.rval},dispatchException:function(t){if(this.done)throw t;var r=this;function n(e,n){return a.type="throw",a.arg=t,r.next=e,n&&(r.method="next",r.arg=void 0),!!n}for(var o=this.tryEntries.length-1;o>=0;--o){var i=this.tryEntries[o],a=i.completion;if("root"===i.tryLoc)return n("end");if(i.tryLoc<=this.prev){var c=e.call(i,"catchLoc"),u=e.call(i,"finallyLoc");if(c&&u){if(this.prev<i.catchLoc)return n(i.catchLoc,!0);if(this.prev<i.finallyLoc)return n(i.finallyLoc)}else if(c){if(this.prev<i.catchLoc)return n(i.catchLoc,!0)}else{if(!u)throw new Error("try statement without catch or finally");if(this.prev<i.finallyLoc)return n(i.finallyLoc)}}}},abrupt:function(t,r){for(var n=this.tryEntries.length-1;n>=0;--n){var o=this.tryEntries[n];if(o.tryLoc<=this.prev&&e.call(o,"finallyLoc")&&this.prev<o.finallyLoc){var i=o;break}}i&&("break"===t||"continue"===t)&&i.tryLoc<=r&&r<=i.finallyLoc&&(i=null);var a=i?i.completion:{};return a.type=t,a.arg=r,i?(this.method="next",this.next=i.finallyLoc,v):this.complete(a)},complete:function(t,r){if("throw"===t.type)throw t.arg;return"break"===t.type||"continue"===t.type?this.next=t.arg:"return"===t.type?(this.rval=this.arg=t.arg,this.method="return",this.next="end"):"normal"===t.type&&r&&(this.next=r),v},finish:function(t){for(var r=this.tryEntries.length-1;r>=0;--r){var e=this.tryEntries[r];if(e.finallyLoc===t)return this.complete(e.completion,e.afterLoc),E(e),v}},catch:function(t){for(var r=this.tryEntries.length-1;r>=0;--r){var e=this.tryEntries[r];if(e.tryLoc===t){var n=e.completion;if("throw"===n.type){var o=n.arg;E(e)}return o}}throw new Error("illegal catch attempt")},delegateYield:function(t,r,e){return this.delegate={iterator:P(t),resultName:r,nextLoc:e},"next"===this.method&&(this.arg=void 0),v}},t}function h(t,r,e,n,o,i,a){try{var c=t[i](a),u=c.value}catch(t){return void e(t)}c.done?r(u):Promise.resolve(u).then(n,o)}function v(t){return function(){var r=this,e=arguments;return new Promise((function(n,o){var i=t.apply(r,e);function a(t){h(i,n,o,a,c,"next",t)}function c(t){h(i,n,o,a,c,"throw",t)}a(void 0)}))}}var p=Math.floor(60*Math.random())+60,g=function(t,r){var e=0;return r.match(/^https:\/\/www.reveddit.com/)&&(e=1),chrome.storage.sync.get(null,(function(r){(0,i.v0)().then((function(n){return d([t],"other",!1,n,r,e,{})}))}))};var d=function(){var t=v(l().mark((function t(r,e,c,u,s,h){var v,p,g,d,m=arguments;return l().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return v=m.length>6&&void 0!==m[6]?m[6]:{},p=m.length>7&&void 0!==m[7]?m[7]:[],d=s.options.monitor_quarantined,g=location.protocol.match(/^http/)?a.runtime.sendMessage({action:"get-reddit-items-by-id",ids:r,monitor_quarantined:d}):(0,i.my)(r,u,d,s.tempVar_monitor_quarantined,p),t.abrupt("return",g.then((function(t){if(t){var r=Array.isArray(t)?t:t.items;if(r){var i=s.options.removal_status,a=s.options.lock_status,u=s.options.seen_count||n.UU,l=(0,n.tN)(e,c),p=s[l.removed]||{},g=s[l.approved]||{},d=s[l.locked]||{},m=s[l.unlocked]||{},b=s[l.changes]||[];c||(v={});var w=[],x=[],A=[],S=[];r.forEach((function(t){var r=t.data;c||(v[r.name]=r),(0,o.LC)(r)?w.push(r.name):x.push(r.name),r.locked?A.push(r.name):S.push(r.name)}));var _={},O=[],E=0;return(0,n.$6)(e,c).then((function(t){var r;return i.track&&(E+=y(w,n.U$,"mod removed",p,x,n.Ci,"approved",g,b,v,i.notify,_,O,c,h,t,u)),a.track&&(E+=y(A,n.nb,"locked",d,S,n.YU,"unlocked",m,b,v,a.notify,_,O,c,h,t,u)),E&&O.length&&(0,o.sc)({notificationId:e,title:e,message:"".concat(E," new [").concat(O.join(", "),"] actions, click to view")}),chrome.storage.sync.set((f(r={},l.removed,(0,o.N5)(p,n.JQ,"c")),f(r,l.approved,(0,o.N5)(g,n.JQ,"c")),f(r,l.locked,(0,o.N5)(d,n.JQ,"c")),f(r,l.unlocked,(0,o.N5)(m,n.JQ,"c")),f(r,l.changes,b.slice(-n.Yn)),r),(function(){return(0,o.SV)(),(0,n.oX)(_,e,c)}))}))}}})));case 5:case"end":return t.stop()}}),t)})));return function(r,e,n,o,i,a){return t.apply(this,arguments)}}(),m=function(t,r,e){var n,i=u(e);try{for(i.s();!(n=i.n()).done;){var a=n.value,c=a;if(c instanceof o.QT||(c=new o.QT({object:a})),c.getID()===t&&r===c.getChangeTypeInternal())return!0}}catch(t){i.e(t)}finally{i.f()}return!1};function y(t,r,e,i,a,c,u,s,f,l,h,v,g,d,y,b,w){var x=[],A=[],S=[],_=Math.floor(new Date/1e3);t.forEach((function(t){var e=l[t],a=b[t];if(d||a){if(a){var c=new o.D4({object:a});c.resetSeenCount(),v[t]=c}}else v[t]=new o.D4({item:e,observed_utc:_});if(!(t in i)){var u=!0;if((0===y&&r!==n.U$||1===y)&&(u=!1),i[t]=new o.pB(e.created_utc,u),delete s[t],u){var h=r;(0,o.Me)(e)?(h=n.oZ,S.push(t)):x.push(t),f.push(new o.QT({id:t,observed_utc:_,change_type:h}))}d&&(v[t]=new o.D4({item:e,observed_utc:_}))}})),a.forEach((function(t){var r=l[t];if(d||b[t]||(v[t]=new o.D4({item:r,observed_utc:_})),t in i){var e=new o.D4({object:b[t]}),n=e.incrementSeenCount();if(n>=w)!m(t,c,f)||n>=p?(s[t]=new o.pB(r.created_utc,!0),delete i[t],f.push(new o.QT({id:t,observed_utc:_,change_type:c,seen_count:n})),A.push(t),v[t]=new o.D4({item:r,observed_utc:_})):v[t]=e;else v[t]=e}else s[t]=new o.pB(r.created_utc,!1)}));var O=x.length+A.length+S.length;return h&&O&&(x.length&&g.push(e),S.length&&g.push("user deleted"),A.length&&g.push(u)),O}function b(t){return b="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},b(t)}function w(){/*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */w=function(){return t};var t={},r=Object.prototype,e=r.hasOwnProperty,n=Object.defineProperty||function(t,r,e){t[r]=e.value},o="function"==typeof Symbol?Symbol:{},i=o.iterator||"@@iterator",a=o.asyncIterator||"@@asyncIterator",c=o.toStringTag||"@@toStringTag";function u(t,r,e){return Object.defineProperty(t,r,{value:e,enumerable:!0,configurable:!0,writable:!0}),t[r]}try{u({},"")}catch(t){u=function(t,r,e){return t[r]=e}}function s(t,r,e,o){var i=r&&r.prototype instanceof h?r:h,a=Object.create(i.prototype),c=new j(o||[]);return n(a,"_invoke",{value:S(t,e,c)}),a}function f(t,r,e){try{return{type:"normal",arg:t.call(r,e)}}catch(t){return{type:"throw",arg:t}}}t.wrap=s;var l={};function h(){}function v(){}function p(){}var g={};u(g,i,(function(){return this}));var d=Object.getPrototypeOf,m=d&&d(d(P([])));m&&m!==r&&e.call(m,i)&&(g=m);var y=p.prototype=h.prototype=Object.create(g);function x(t){["next","throw","return"].forEach((function(r){u(t,r,(function(t){return this._invoke(r,t)}))}))}function A(t,r){function o(n,i,a,c){var u=f(t[n],t,i);if("throw"!==u.type){var s=u.arg,l=s.value;return l&&"object"==b(l)&&e.call(l,"__await")?r.resolve(l.__await).then((function(t){o("next",t,a,c)}),(function(t){o("throw",t,a,c)})):r.resolve(l).then((function(t){s.value=t,a(s)}),(function(t){return o("throw",t,a,c)}))}c(u.arg)}var i;n(this,"_invoke",{value:function(t,e){function n(){return new r((function(r,n){o(t,e,r,n)}))}return i=i?i.then(n,n):n()}})}function S(t,r,e){var n="suspendedStart";return function(o,i){if("executing"===n)throw new Error("Generator is already running");if("completed"===n){if("throw"===o)throw i;return k()}for(e.method=o,e.arg=i;;){var a=e.delegate;if(a){var c=_(a,e);if(c){if(c===l)continue;return c}}if("next"===e.method)e.sent=e._sent=e.arg;else if("throw"===e.method){if("suspendedStart"===n)throw n="completed",e.arg;e.dispatchException(e.arg)}else"return"===e.method&&e.abrupt("return",e.arg);n="executing";var u=f(t,r,e);if("normal"===u.type){if(n=e.done?"completed":"suspendedYield",u.arg===l)continue;return{value:u.arg,done:e.done}}"throw"===u.type&&(n="completed",e.method="throw",e.arg=u.arg)}}}function _(t,r){var e=r.method,n=t.iterator[e];if(void 0===n)return r.delegate=null,"throw"===e&&t.iterator.return&&(r.method="return",r.arg=void 0,_(t,r),"throw"===r.method)||"return"!==e&&(r.method="throw",r.arg=new TypeError("The iterator does not provide a '"+e+"' method")),l;var o=f(n,t.iterator,r.arg);if("throw"===o.type)return r.method="throw",r.arg=o.arg,r.delegate=null,l;var i=o.arg;return i?i.done?(r[t.resultName]=i.value,r.next=t.nextLoc,"return"!==r.method&&(r.method="next",r.arg=void 0),r.delegate=null,l):i:(r.method="throw",r.arg=new TypeError("iterator result is not an object"),r.delegate=null,l)}function O(t){var r={tryLoc:t[0]};1 in t&&(r.catchLoc=t[1]),2 in t&&(r.finallyLoc=t[2],r.afterLoc=t[3]),this.tryEntries.push(r)}function E(t){var r=t.completion||{};r.type="normal",delete r.arg,t.completion=r}function j(t){this.tryEntries=[{tryLoc:"root"}],t.forEach(O,this),this.reset(!0)}function P(t){if(t){var r=t[i];if(r)return r.call(t);if("function"==typeof t.next)return t;if(!isNaN(t.length)){var n=-1,o=function r(){for(;++n<t.length;)if(e.call(t,n))return r.value=t[n],r.done=!1,r;return r.value=void 0,r.done=!0,r};return o.next=o}}return{next:k}}function k(){return{value:void 0,done:!0}}return v.prototype=p,n(y,"constructor",{value:p,configurable:!0}),n(p,"constructor",{value:v,configurable:!0}),v.displayName=u(p,c,"GeneratorFunction"),t.isGeneratorFunction=function(t){var r="function"==typeof t&&t.constructor;return!!r&&(r===v||"GeneratorFunction"===(r.displayName||r.name))},t.mark=function(t){return Object.setPrototypeOf?Object.setPrototypeOf(t,p):(t.__proto__=p,u(t,c,"GeneratorFunction")),t.prototype=Object.create(y),t},t.awrap=function(t){return{__await:t}},x(A.prototype),u(A.prototype,a,(function(){return this})),t.AsyncIterator=A,t.async=function(r,e,n,o,i){void 0===i&&(i=Promise);var a=new A(s(r,e,n,o),i);return t.isGeneratorFunction(e)?a:a.next().then((function(t){return t.done?t.value:a.next()}))},x(y),u(y,c,"Generator"),u(y,i,(function(){return this})),u(y,"toString",(function(){return"[object Generator]"})),t.keys=function(t){var r=Object(t),e=[];for(var n in r)e.push(n);return e.reverse(),function t(){for(;e.length;){var n=e.pop();if(n in r)return t.value=n,t.done=!1,t}return t.done=!0,t}},t.values=P,j.prototype={constructor:j,reset:function(t){if(this.prev=0,this.next=0,this.sent=this._sent=void 0,this.done=!1,this.delegate=null,this.method="next",this.arg=void 0,this.tryEntries.forEach(E),!t)for(var r in this)"t"===r.charAt(0)&&e.call(this,r)&&!isNaN(+r.slice(1))&&(this[r]=void 0)},stop:function(){this.done=!0;var t=this.tryEntries[0].completion;if("throw"===t.type)throw t.arg;return this.rval},dispatchException:function(t){if(this.done)throw t;var r=this;function n(e,n){return a.type="throw",a.arg=t,r.next=e,n&&(r.method="next",r.arg=void 0),!!n}for(var o=this.tryEntries.length-1;o>=0;--o){var i=this.tryEntries[o],a=i.completion;if("root"===i.tryLoc)return n("end");if(i.tryLoc<=this.prev){var c=e.call(i,"catchLoc"),u=e.call(i,"finallyLoc");if(c&&u){if(this.prev<i.catchLoc)return n(i.catchLoc,!0);if(this.prev<i.finallyLoc)return n(i.finallyLoc)}else if(c){if(this.prev<i.catchLoc)return n(i.catchLoc,!0)}else{if(!u)throw new Error("try statement without catch or finally");if(this.prev<i.finallyLoc)return n(i.finallyLoc)}}}},abrupt:function(t,r){for(var n=this.tryEntries.length-1;n>=0;--n){var o=this.tryEntries[n];if(o.tryLoc<=this.prev&&e.call(o,"finallyLoc")&&this.prev<o.finallyLoc){var i=o;break}}i&&("break"===t||"continue"===t)&&i.tryLoc<=r&&r<=i.finallyLoc&&(i=null);var a=i?i.completion:{};return a.type=t,a.arg=r,i?(this.method="next",this.next=i.finallyLoc,l):this.complete(a)},complete:function(t,r){if("throw"===t.type)throw t.arg;return"break"===t.type||"continue"===t.type?this.next=t.arg:"return"===t.type?(this.rval=this.arg=t.arg,this.method="return",this.next="end"):"normal"===t.type&&r&&(this.next=r),l},finish:function(t){for(var r=this.tryEntries.length-1;r>=0;--r){var e=this.tryEntries[r];if(e.finallyLoc===t)return this.complete(e.completion,e.afterLoc),E(e),l}},catch:function(t){for(var r=this.tryEntries.length-1;r>=0;--r){var e=this.tryEntries[r];if(e.tryLoc===t){var n=e.completion;if("throw"===n.type){var o=n.arg;E(e)}return o}}throw new Error("illegal catch attempt")},delegateYield:function(t,r,e){return this.delegate={iterator:P(t),resultName:r,nextLoc:e},"next"===this.method&&(this.arg=void 0),l}},t}function x(t,r,e,n,o,i,a){try{var c=t[i](a),u=c.value}catch(t){return void e(t)}c.done?r(u):Promise.resolve(u).then(n,o)}function A(t){return function(){var r=this,e=arguments;return new Promise((function(n,o){var i=t.apply(r,e);function a(t){x(i,n,o,a,c,"next",t)}function c(t){x(i,n,o,a,c,"throw",t)}a(void 0)}))}}var S="unsubscribe-rev",_="subscribe-rev";location.hostname.match(/reveddit\.com$/)&&(S="unsubscribe",_="subscribe");var O=function(t,r,e){return $(r).text(_).off("click").click((function(r){return j(t,r.target,e)}))},E=function(t,r,e){return $(r).text(S).off("click").click((function(r){return P(t,r.target,e)}))},j=function(t,r){var e=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"";return(0,n.Pd)(t,A(w().mark((function i(){return w().wrap((function(i){for(;;)switch(i.prev=i.next){case 0:return E(t,r,e),i.next=3,g(t,window.location.href);case 3:e&&(0,n.$6)("other",!1).then((function(r){var i=r[t];if(i){var a=new o.D4({object:i});a.setText(e),r[t]=a,(0,n.Kv)("other",!1,r)}}));case 4:case"end":return i.stop()}}),i)})))),!1},P=function(t,r,e){return(0,n.VQ)(t,(function(){O(t,r,e)})),!1}},4149:(t,r,e)=>{"use strict";e.d(r,{U:()=>m});e(97);var n=e(6086),o=e(6216),i=e(3150),a=e(3368);function c(t){return c="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},c(t)}function u(t,r){var e=Object.keys(t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(t);r&&(n=n.filter((function(r){return Object.getOwnPropertyDescriptor(t,r).enumerable}))),e.push.apply(e,n)}return e}function s(t){for(var r=1;r<arguments.length;r++){var e=null!=arguments[r]?arguments[r]:{};r%2?u(Object(e),!0).forEach((function(r){f(t,r,e[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(e)):u(Object(e)).forEach((function(r){Object.defineProperty(t,r,Object.getOwnPropertyDescriptor(e,r))}))}return t}function f(t,r,e){return(r=function(t){var r=function(t,r){if("object"!==c(t)||null===t)return t;var e=t[Symbol.toPrimitive];if(void 0!==e){var n=e.call(t,r||"default");if("object"!==c(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===r?String:Number)(t)}(t,"string");return"symbol"===c(r)?r:String(r)}(r))in t?Object.defineProperty(t,r,{value:e,enumerable:!0,configurable:!0,writable:!0}):t[r]=e,t}function l(t,r){return function(t){if(Array.isArray(t))return t}(t)||function(t,r){var e=null==t?null:"undefined"!=typeof Symbol&&t[Symbol.iterator]||t["@@iterator"];if(null!=e){var n,o,i,a,c=[],u=!0,s=!1;try{if(i=(e=e.call(t)).next,0===r){if(Object(e)!==e)return;u=!1}else for(;!(u=(n=i.call(e)).done)&&(c.push(n.value),c.length!==r);u=!0);}catch(t){s=!0,o=t}finally{try{if(!u&&null!=e.return&&(a=e.return(),Object(a)!==a))return}finally{if(s)throw o}}return c}}(t,r)||h(t,r)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function h(t,r){if(t){if("string"==typeof t)return v(t,r);var e=Object.prototype.toString.call(t).slice(8,-1);return"Object"===e&&t.constructor&&(e=t.constructor.name),"Map"===e||"Set"===e?Array.from(t):"Arguments"===e||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(e)?v(t,r):void 0}}function v(t,r){(null==r||r>t.length)&&(r=t.length);for(var e=0,n=new Array(r);e<r;e++)n[e]=t[e];return n}var p=/^t1_.+/,g=/^t3_.+/,d="shreddit-post",m=function(t,r,e,n,o){var i=Boolean(document.querySelector("head").getAttribute("prefix"));x(i,e);var c=function(t){var r=t.toLowerCase();n.length<a.Gw&&!n.includes(r)&&!o.includes(r)&&(0,a.CU)(t)};if(i){var u=$(".header-user-dropdown span").toArray().map((function(t){return t.textContent.trim()})).filter((function(t){return!t.match(/ /)}))[0];if(u&&c(u),!r){var s=".Comment";O($(s),t),$(document).arrive(s,(function(r){O([r],t)}));var f=".Post";j($(f),t),$(document).arrive(f,(function(r){j([r],t)}))}w();$(document).arrive('.Post div[data-test-id="post-content"]',(function(t){S(t,e)}))}else{var l,h=null===(l=$("#header .user a")[0])||void 0===l?void 0:l.textContent;if(h&&!h.match(/ /)&&"login"!==h.trim().toLowerCase()&&c(h),!r){var v=".thing.link, .thing.comment";P($(v),t),$(document).arrive(v,(function(r){P([r],t)}))}}},y="Comment removed by moderator".toLowerCase().trim(),b="RevedditLink",w=function(){var t=function(t){var r,e=function(t,r){var e="undefined"!=typeof Symbol&&t[Symbol.iterator]||t["@@iterator"];if(!e){if(Array.isArray(t)||(e=h(t))||r&&t&&"number"==typeof t.length){e&&(t=e);var n=0,o=function(){};return{s:o,n:function(){return n>=t.length?{done:!0}:{done:!1,value:t[n++]}},e:function(t){throw t},f:o}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var i,a=!0,c=!1;return{s:function(){e=e.call(t)},n:function(){var t=e.next();return a=t.done,t},e:function(t){c=!0,i=t},f:function(){try{a||null==e.return||e.return()}finally{if(c)throw i}}}}(t);try{for(e.s();!(r=e.n()).done;){var n=r.value,o=$(n).closest("div").first();if(!$(o).parent().find(".".concat(b)).length){var i=$(o).find('a[href^="https://www.reddit.com"]').first().attr("href"),a=new URL(i);a.searchParams.set("utm_source","reveddit-rt"),a.host="www.reveddit.com";var c=$(n).clone();$(c).html('<a target="_blank" style="text-decoration: underline;" href="'.concat(a.toString(),'">view on Reveddit</a>')),$('<div class="'.concat(b,'">').concat($(c)[0].outerHTML,"</div>")).insertAfter(o)}}}catch(t){e.e(t)}finally{e.f()}};$(document).arrive("span",(function(r){r.textContent.toLowerCase().trim()===y&&t([r])}));var r=function(){t($('span:equalsi("'.concat(y,'")')))};r(),setTimeout(r,1e3),setTimeout(r,5e3),setTimeout(r,1e4)},x=function(t,r){var e=arguments.length>2&&void 0!==arguments[2]?arguments[2]:d,o=arguments.length>3&&void 0!==arguments[3]?arguments[3]:{},a=l((0,n.u3)(window.location.pathname),4),c=a[0],u=(a[1],a[2],a[3]);t&&0===Object.keys(o).length?i.runtime.sendMessage({action:"get-from-old",path:"/r/".concat(u,"/comments/").concat(c.substring(3),"/")}).then((function(r){r&&A({isNewReddit:t,newRedditTarget:e,postData:s({is_robot_indexable:!r.is_removed},r)})})):A({isNewReddit:t,newRedditTarget:e,postData:o})},A=function(t){var r=t.isNewReddit,e=t.newRedditTarget,o=void 0===e?d:e,a=t.postData,c=void 0===a?{}:a,u=l((0,n.u3)(window.location.pathname),4),s=u[0],f=(u[1],u[2],u[3]),h=void 0,v=void 0;if(s&&($('meta[name="robots"][content="noindex,nofollow"]').length||"is_robot_indexable"in c&&!c.is_robot_indexable)){var p=c.author||$(".link .top-matter .author").first().text()||$('.link .top-matter .tagline span:contains("[deleted]")').text()||$('.Post span:contains("u/[deleted]")').first().text()||$('span[slot="authorName"]').first().text().trim();"[deleted]"!==p&&"u/[deleted]"!==p||"moderator"===c.removed_by_category?(h="rev-mod-removed",v="This post is unapproved. It is either waiting to be approved, or it was removed by someone or some robot."):(h="rev-user-deleted",v="This post was either deleted by the person who posted it, or removed by a moderator and then deleted by the person who posted it.")}if(v){var g="goto-options-from-content",m=" It is not currently visible in r/".concat(f," and may not appear in web search results."),y='<div class="rev-from"><a id="'.concat(g,'" href="#">Reveddit Real-Time</a> note</div>'),b=window.location.pathname.split("/",6).join("/"),w='<p><a href="https://www.reveddit.com'.concat(b,'/">View the post on Reveddit.com</a></p>');if(r){v+=" More details may appear in a message above from reddit.";var x=$('<div class="rev-new-reddit-message-wrap '.concat(h,'">').concat(y,"</div>")),A=$('<div class="rev-new-reddit-message-content"></div>'),S=$('<div class="rev-new-reddit-message-content-description">'.concat(v).concat(m,"</div>"));A.append(S),A.append(w),x.append(A),$(o).first().after(x)}else{v+=' View the post <a href="https://sh.reddit.com'.concat(b,'/">on new "sh" reddit</a> for more details.'),$('<div class="reddit-infobar md-container-small '.concat(h,'">')).append(y).append('<div class="md"><p>'.concat(v).concat(m,"</p>").concat(w,"</div>")).prependTo('div.content[role="main"]')}$("#".concat(g)).click((function(){return i.runtime.sendMessage({action:"open-options"})}))}},S=function(t,r){var e=l((0,n.u3)(window.location.pathname),4),o=e[0];e[1],e[2],e[3];i.runtime.sendMessage({action:"get-reddit-items-by-id",ids:[o],monitor_quarantined:r}).then((function(e){if(e&&e.items&&e.items.length){var n=e.items[0].data;x(!0,r,t.parentNode,n)}}))},_=function(t,r){var e=t.id;return e&&e.match(r)||(e=$(t).attr("class").split(/\s+/).filter((function(t){return t.match(r)}))[0])&&e.match(r)||(e=t.parentNode.id)&&e.match(r)?e:e=$(t).closest("div[tabindex=-1]").attr("id")},O=function(t,r){$(t).each((function(t,e){var n=$(e).closest(".Comment")[0],i=_(n,p);if(i&&i.match(p)){var a=E(n,"save"),c=a.parent();a.length||(c=(a=E(n,"share")).parent());var u=a.clone(),s="",f=n.querySelector(".RichTextJSON-root");f&&(s=f.textContent),i in r?(0,o.T)(i,u,s).appendTo(c):(0,o.a)(i,u,s).appendTo(c)}}))},E=function(t,r){return $(t).find('button:equalsi("'.concat(r,'")')).first()},j=function(t,r){$(t).each((function(t,e){var n=_(e,g);if(n&&n.match(g)){var i=$(e).find('button :equalsi("save")').first().parent(),a=i.clone();a.find("i.icon").first().parent().remove();var c=i.parent().children("button").last();n in r?(0,o.T)(n,a).insertAfter(c):(0,o.a)(n,a).insertAfter(c)}}))},P=function(t,r){$(t).each((function(t,e){var i=e.getAttribute("data-fullname");if(!i){var a=l((0,n.u3)(e.getAttribute("data-permalink")||""),4),c=a[0],u=a[1];a[2],a[3];u?i=u:c&&(i=c)}if(i){var s=e.querySelector("ul.buttons");if(s){var f="",h=e.querySelector(".usertext-body");h&&i.match(/^t1_/)&&(f=h.textContent);var v=(0,o.a)(i,$('<a href="">')[0],f);i in r&&(v=(0,o.T)(i,$('<a href="">')[0],f)),$(s).append(v.wrap("<li>").parent())}}}))}},1076:(t,r,e)=>{"use strict";e.d(r,{m:()=>i});var n=e(3368),o=e(6216),i=(e(3150),function(t,r,e,o){var i,s,f,l,h;(e||o)&&(i="numItemsLoaded",s=document.querySelector(".main"),f="data-numitemsloaded",l=1,h=function(){!function(t,r,e){var o=u(".comment.removed, .post.removed, .comment.deleted, .post.deleted"),i=u(".comment:not(.removed), .post:not(.removed)"),a=u(".comment.locked, .post.locked"),c=u(".comment:not(.locked)");(0,n.Q8)(t,r,e,o,i,a,c,(function(t){chrome.runtime.sendMessage({action:"update-badge"})}))}(t,r,e)},new MutationObserver((function(t){var r=document.getElementById(i);r&&r.getAttribute(f)>=l&&(this.disconnect(),h())})).observe(s||document,{childList:!0,subtree:!0}));var v=".post:not(.deleted)",p=".comment-body-and-links";$(document).arrive(p,(function(r){a([r],t.other_subscriptions)})),a($(p),t.other_subscriptions),$(document).arrive(v,(function(r){c([r],t.other_subscriptions)})),setTimeout((function(){c($(v),t.other_subscriptions)}),2e3)}),a=function(t,r){$(t).each((function(t,e){var n=e.parentNode;if(!n.classList.contains("deleted")){var i=n.id,a=n.querySelector(".comment-links"),c="",u=n.querySelector(".comment-body");u&&i.match(/^t1_/)&&(c=u.textContent);var s=(0,o.a)(i,$('<a href="">')[0],c);i in r&&(s=(0,o.T)(i,$('<a href="">')[0],c)),$(a).append(s)}}))},c=function(t,r){$(t).each((function(t,e){var n=e.id,i=e.querySelector(".post-links"),a=(0,o.a)(n,$('<a href="">')[0]);n in r&&(a=(0,o.T)(n,$('<a href="">')[0])),$(i).append(a)}))};function u(t){var r={};return $(t).each((function(){var t=this.getAttribute("id");r[t]=this.getAttribute("data-created_utc")})),r}},97:(t,r,e)=>{"use strict";e.d(r,{lc:()=>_,my:()=>p,v0:()=>A});var n=e(3368),o=e(3150);function i(t){return i="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},i(t)}function a(){/*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */a=function(){return t};var t={},r=Object.prototype,e=r.hasOwnProperty,n=Object.defineProperty||function(t,r,e){t[r]=e.value},o="function"==typeof Symbol?Symbol:{},c=o.iterator||"@@iterator",u=o.asyncIterator||"@@asyncIterator",s=o.toStringTag||"@@toStringTag";function f(t,r,e){return Object.defineProperty(t,r,{value:e,enumerable:!0,configurable:!0,writable:!0}),t[r]}try{f({},"")}catch(t){f=function(t,r,e){return t[r]=e}}function l(t,r,e,o){var i=r&&r.prototype instanceof p?r:p,a=Object.create(i.prototype),c=new j(o||[]);return n(a,"_invoke",{value:S(t,e,c)}),a}function h(t,r,e){try{return{type:"normal",arg:t.call(r,e)}}catch(t){return{type:"throw",arg:t}}}t.wrap=l;var v={};function p(){}function g(){}function d(){}var m={};f(m,c,(function(){return this}));var y=Object.getPrototypeOf,b=y&&y(y(P([])));b&&b!==r&&e.call(b,c)&&(m=b);var w=d.prototype=p.prototype=Object.create(m);function x(t){["next","throw","return"].forEach((function(r){f(t,r,(function(t){return this._invoke(r,t)}))}))}function A(t,r){function o(n,a,c,u){var s=h(t[n],t,a);if("throw"!==s.type){var f=s.arg,l=f.value;return l&&"object"==i(l)&&e.call(l,"__await")?r.resolve(l.__await).then((function(t){o("next",t,c,u)}),(function(t){o("throw",t,c,u)})):r.resolve(l).then((function(t){f.value=t,c(f)}),(function(t){return o("throw",t,c,u)}))}u(s.arg)}var a;n(this,"_invoke",{value:function(t,e){function n(){return new r((function(r,n){o(t,e,r,n)}))}return a=a?a.then(n,n):n()}})}function S(t,r,e){var n="suspendedStart";return function(o,i){if("executing"===n)throw new Error("Generator is already running");if("completed"===n){if("throw"===o)throw i;return k()}for(e.method=o,e.arg=i;;){var a=e.delegate;if(a){var c=_(a,e);if(c){if(c===v)continue;return c}}if("next"===e.method)e.sent=e._sent=e.arg;else if("throw"===e.method){if("suspendedStart"===n)throw n="completed",e.arg;e.dispatchException(e.arg)}else"return"===e.method&&e.abrupt("return",e.arg);n="executing";var u=h(t,r,e);if("normal"===u.type){if(n=e.done?"completed":"suspendedYield",u.arg===v)continue;return{value:u.arg,done:e.done}}"throw"===u.type&&(n="completed",e.method="throw",e.arg=u.arg)}}}function _(t,r){var e=r.method,n=t.iterator[e];if(void 0===n)return r.delegate=null,"throw"===e&&t.iterator.return&&(r.method="return",r.arg=void 0,_(t,r),"throw"===r.method)||"return"!==e&&(r.method="throw",r.arg=new TypeError("The iterator does not provide a '"+e+"' method")),v;var o=h(n,t.iterator,r.arg);if("throw"===o.type)return r.method="throw",r.arg=o.arg,r.delegate=null,v;var i=o.arg;return i?i.done?(r[t.resultName]=i.value,r.next=t.nextLoc,"return"!==r.method&&(r.method="next",r.arg=void 0),r.delegate=null,v):i:(r.method="throw",r.arg=new TypeError("iterator result is not an object"),r.delegate=null,v)}function O(t){var r={tryLoc:t[0]};1 in t&&(r.catchLoc=t[1]),2 in t&&(r.finallyLoc=t[2],r.afterLoc=t[3]),this.tryEntries.push(r)}function E(t){var r=t.completion||{};r.type="normal",delete r.arg,t.completion=r}function j(t){this.tryEntries=[{tryLoc:"root"}],t.forEach(O,this),this.reset(!0)}function P(t){if(t){var r=t[c];if(r)return r.call(t);if("function"==typeof t.next)return t;if(!isNaN(t.length)){var n=-1,o=function r(){for(;++n<t.length;)if(e.call(t,n))return r.value=t[n],r.done=!1,r;return r.value=void 0,r.done=!0,r};return o.next=o}}return{next:k}}function k(){return{value:void 0,done:!0}}return g.prototype=d,n(w,"constructor",{value:d,configurable:!0}),n(d,"constructor",{value:g,configurable:!0}),g.displayName=f(d,s,"GeneratorFunction"),t.isGeneratorFunction=function(t){var r="function"==typeof t&&t.constructor;return!!r&&(r===g||"GeneratorFunction"===(r.displayName||r.name))},t.mark=function(t){return Object.setPrototypeOf?Object.setPrototypeOf(t,d):(t.__proto__=d,f(t,s,"GeneratorFunction")),t.prototype=Object.create(w),t},t.awrap=function(t){return{__await:t}},x(A.prototype),f(A.prototype,u,(function(){return this})),t.AsyncIterator=A,t.async=function(r,e,n,o,i){void 0===i&&(i=Promise);var a=new A(l(r,e,n,o),i);return t.isGeneratorFunction(e)?a:a.next().then((function(t){return t.done?t.value:a.next()}))},x(w),f(w,s,"Generator"),f(w,c,(function(){return this})),f(w,"toString",(function(){return"[object Generator]"})),t.keys=function(t){var r=Object(t),e=[];for(var n in r)e.push(n);return e.reverse(),function t(){for(;e.length;){var n=e.pop();if(n in r)return t.value=n,t.done=!1,t}return t.done=!0,t}},t.values=P,j.prototype={constructor:j,reset:function(t){if(this.prev=0,this.next=0,this.sent=this._sent=void 0,this.done=!1,this.delegate=null,this.method="next",this.arg=void 0,this.tryEntries.forEach(E),!t)for(var r in this)"t"===r.charAt(0)&&e.call(this,r)&&!isNaN(+r.slice(1))&&(this[r]=void 0)},stop:function(){this.done=!0;var t=this.tryEntries[0].completion;if("throw"===t.type)throw t.arg;return this.rval},dispatchException:function(t){if(this.done)throw t;var r=this;function n(e,n){return a.type="throw",a.arg=t,r.next=e,n&&(r.method="next",r.arg=void 0),!!n}for(var o=this.tryEntries.length-1;o>=0;--o){var i=this.tryEntries[o],a=i.completion;if("root"===i.tryLoc)return n("end");if(i.tryLoc<=this.prev){var c=e.call(i,"catchLoc"),u=e.call(i,"finallyLoc");if(c&&u){if(this.prev<i.catchLoc)return n(i.catchLoc,!0);if(this.prev<i.finallyLoc)return n(i.finallyLoc)}else if(c){if(this.prev<i.catchLoc)return n(i.catchLoc,!0)}else{if(!u)throw new Error("try statement without catch or finally");if(this.prev<i.finallyLoc)return n(i.finallyLoc)}}}},abrupt:function(t,r){for(var n=this.tryEntries.length-1;n>=0;--n){var o=this.tryEntries[n];if(o.tryLoc<=this.prev&&e.call(o,"finallyLoc")&&this.prev<o.finallyLoc){var i=o;break}}i&&("break"===t||"continue"===t)&&i.tryLoc<=r&&r<=i.finallyLoc&&(i=null);var a=i?i.completion:{};return a.type=t,a.arg=r,i?(this.method="next",this.next=i.finallyLoc,v):this.complete(a)},complete:function(t,r){if("throw"===t.type)throw t.arg;return"break"===t.type||"continue"===t.type?this.next=t.arg:"return"===t.type?(this.rval=this.arg=t.arg,this.method="return",this.next="end"):"normal"===t.type&&r&&(this.next=r),v},finish:function(t){for(var r=this.tryEntries.length-1;r>=0;--r){var e=this.tryEntries[r];if(e.finallyLoc===t)return this.complete(e.completion,e.afterLoc),E(e),v}},catch:function(t){for(var r=this.tryEntries.length-1;r>=0;--r){var e=this.tryEntries[r];if(e.tryLoc===t){var n=e.completion;if("throw"===n.type){var o=n.arg;E(e)}return o}}throw new Error("illegal catch attempt")},delegateYield:function(t,r,e){return this.delegate={iterator:P(t),resultName:r,nextLoc:e},"next"===this.method&&(this.arg=void 0),v}},t}function c(t,r,e,n,o,i,a){try{var c=t[i](a),u=c.value}catch(t){return void e(t)}c.done?r(u):Promise.resolve(u).then(n,o)}function u(t,r){var e=Object.keys(t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(t);r&&(n=n.filter((function(r){return Object.getOwnPropertyDescriptor(t,r).enumerable}))),e.push.apply(e,n)}return e}function s(t){for(var r=1;r<arguments.length;r++){var e=null!=arguments[r]?arguments[r]:{};r%2?u(Object(e),!0).forEach((function(r){f(t,r,e[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(e)):u(Object(e)).forEach((function(r){Object.defineProperty(t,r,Object.getOwnPropertyDescriptor(e,r))}))}return t}function f(t,r,e){return(r=function(t){var r=function(t,r){if("object"!==i(t)||null===t)return t;var e=t[Symbol.toPrimitive];if(void 0!==e){var n=e.call(t,r||"default");if("object"!==i(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===r?String:Number)(t)}(t,"string");return"symbol"===i(r)?r:String(r)}(r))in t?Object.defineProperty(t,r,{value:e,enumerable:!0,configurable:!0,writable:!0}):t[r]=e,t}function l(t){return function(t){if(Array.isArray(t))return h(t)}(t)||function(t){if("undefined"!=typeof Symbol&&null!=t[Symbol.iterator]||null!=t["@@iterator"])return Array.from(t)}(t)||function(t,r){if(!t)return;if("string"==typeof t)return h(t,r);var e=Object.prototype.toString.call(t).slice(8,-1);"Object"===e&&t.constructor&&(e=t.constructor.name);if("Map"===e||"Set"===e)return Array.from(t);if("Arguments"===e||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(e))return h(t,r)}(t)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function h(t,r){(null==r||r>t.length)&&(r=t.length);for(var e=0,n=new Array(r);e<r;e++)n[e]=t[e];return n}var v="none",p=function(t,r){var e=arguments.length>2&&void 0!==arguments[2]&&arguments[2],n=arguments.length>3&&void 0!==arguments[3]&&arguments[3],o=arguments.length>4&&void 0!==arguments[4]?arguments[4]:[],i={id:t,raw_json:1};n&&(i.quarantined_subreddits=o.join(","));var a="?"+Object.keys(i).map((function(t){return"".concat(t,"=").concat(i[t])})).join("&");return y.apply(void 0,l(S("api/info",a,r,n)).concat([e]))},g={name:"reddit_session",url:"https://reddit.com"},d=["name","value","domain","path","secure","httpOnly","storeId"],m=function(t){var r=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"https://reddit.com";if(!t)return t;var e=Object.keys(t).filter((function(t){return d.includes(t)})).reduce((function(r,e){return s(s({},r),{},f({},e,t[e]))}),{});return e.url=r,e},y=function(){var t,r=(t=a().mark((function t(r,e){var n,i,c,u=arguments;return a().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return n=u.length>2&&void 0!==u[2]&&u[2],t.next=3,o.cookies.set({domain:"reddit.com",url:"https://reddit.com",name:"_options",value:"{%22pref_quarantine_optin%22:true}"});case 3:if(!n){t.next=12;break}return t.t0=m,t.next=7,o.cookies.get(g);case 7:if(t.t1=t.sent,!(i=(0,t.t0)(t.t1))){t.next=12;break}return t.next=12,o.cookies.remove(g);case 12:if(e||(e={credentials:"omit"}),e.cache="reload",e.headers||(e.headers={}),"en"!==e.headers["Accept-Language"]&&(e.headers["Accept-Language"]="en"),c=fetch(r,e).then(b).then(w).catch(console.log),!i){t.next=20;break}return t.next=20,o.cookies.set(i);case 20:return t.abrupt("return",c);case 21:case"end":return t.stop()}}),t)})),function(){var r=this,e=arguments;return new Promise((function(n,o){var i=t.apply(r,e);function a(t){c(i,n,o,a,u,"next",t)}function u(t){c(i,n,o,a,u,"throw",t)}a(void 0)}))});return function(t,e){return r.apply(this,arguments)}}(),b=function(t){if(!t.ok)throw Error(t.statusText);return t.json()},w=function(t){if(t&&t.user&&t.user.items)return t;if(!t||!t.data||!t.data.children)throw Error("reddit data is not defined");return t.data.children},x=function(t){if(!t||!t.access_token)throw Error("access token is not defined");return t.access_token},A=function(){var t=arguments.length>0&&void 0!==arguments[0]&&arguments[0];return(0,n.FW)((function(r,e,n){var o="SEw1uvRd6kxFEw";if(n.custom_clientid){if("testing"===(o=n.custom_clientid))return v}else if(!t)return v;var i={headers:{Authorization:"Basic ".concat(btoa("".concat(o,":"))),"Content-Type":"application/x-www-form-urlencoded; charset=utf-8"},method:"POST",body:"grant_type=".concat(encodeURIComponent("https://oauth.reddit.com/grants/installed_client"),"&device_id=DO_NOT_TRACK_THIS_DEVICE")};return fetch("https://www.reddit.com/api/v1/access_token",i).then(b).then(x).then((function(t){return{headers:{Authorization:"bearer ".concat(t),"Accept-Language":"en"}}})).catch(console.log)}))},S=function(t,r,e,n){if(e&&e!==v){var o="https://oauth.reddit.com/",i=t+r;return n&&(o="https://cred2.reveddit.com/",i+="&give_it_to_me=1"),[o+i,e]}var a=(n?"https://wred.reveddit.com/":"https://www.reddit.com/")+t;return"api/info"===t&&(a+=".json"),[a+=r]},_=function(){return fetch("https://www.reddit.com/api/me.json").then(b).then(O).catch(console.log)},O=function(t){if(!t||!t.data||!t.data.name)throw Error("reddit username is not defined");return t.data.name}},3368:(t,r,e)=>{"use strict";e.d(r,{$6:()=>F,CU:()=>j,Ci:()=>v,FW:()=>I,Gw:()=>s,JQ:()=>f,Kv:()=>N,Nd:()=>k,Pd:()=>O,Q8:()=>_,U$:()=>h,UU:()=>u,VQ:()=>E,WK:()=>d,YU:()=>g,Yn:()=>l,b1:()=>P,nb:()=>p,oX:()=>M,oZ:()=>m,tN:()=>x});var n=e(6086),o=e(3150);function i(t){return i="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},i(t)}function a(t,r){var e=Object.keys(t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(t);r&&(n=n.filter((function(r){return Object.getOwnPropertyDescriptor(t,r).enumerable}))),e.push.apply(e,n)}return e}function c(t,r,e){return(r=function(t){var r=function(t,r){if("object"!==i(t)||null===t)return t;var e=t[Symbol.toPrimitive];if(void 0!==e){var n=e.call(t,r||"default");if("object"!==i(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===r?String:Number)(t)}(t,"string");return"symbol"===i(r)?r:String(r)}(r))in t?Object.defineProperty(t,r,{value:e,enumerable:!0,configurable:!0,writable:!0}):t[r]=e,t}var u=2,s=5,f=130,l=100,h=1,v=2,p=3,g=4,d=5,m=6,y={changes:[],removed:{},approved:{},locked:{},unlocked:{}},b=function(t,r,e){return e?t+"_u_"+r:t+"_"+r},w=function(t,r){var e=!(arguments.length>2&&void 0!==arguments[2])||arguments[2];Object.keys(y).forEach((function(n){t[b(n,r,e)]=y[n]}))},x=function(t){var r=!(arguments.length>1&&void 0!==arguments[1])||arguments[1],e={};return Object.keys(y).forEach((function(n){e[n]=b(n,t,r)})),e},A=function(t){var r={};return w(r,t,!0),r},S=function(t,r,e,o,i){var a=t[r[e]];Object.keys(o).forEach((function(t){t in a?a[t].u=!1:i&&(a[t]=new n.pB(o[t],!1))}))},_=function(t,r,e,n,o,i,a){var c=arguments.length>7&&void 0!==arguments[7]?arguments[7]:function(){},u=x(r,e);delete u.changes,!t.user_subscriptions[r]&&e||(S(t,u,"removed",n,e),S(t,u,"approved",o,e),S(t,u,"locked",i,e),S(t,u,"unlocked",a,e),chrome.storage.sync.set(t,c))},O=function(t){var r=arguments.length>1&&void 0!==arguments[1]?arguments[1]:function(){},e="other_subscriptions";chrome.storage.sync.get(e,(function(o){o[e][t]={t:Math.floor((new Date).getTime()/1e3)};var i=(0,n.N5)(o[e],100,"t");chrome.storage.sync.set(c({},e,i),r)}))},E=function(t){var r=arguments.length>1&&void 0!==arguments[1]?arguments[1]:function(){},e="other_subscriptions",n=x("other",!1);delete n.changes,chrome.storage.sync.get(Object.values(n).concat(e),(function(o){delete o[e][t],Object.values(n).forEach((function(r){t in o[r]&&delete o[r][t]})),chrome.storage.sync.set(o,(function(){chrome.runtime.sendMessage({action:"update-badge"},r)}))}))},j=function(t){var r=arguments.length>1&&void 0!==arguments[1]?arguments[1]:function(){},e=arguments.length>2&&void 0!==arguments[2]?arguments[2]:function(){},n=A(t);chrome.storage.sync.get("user_subscriptions",(function(o){var i=o.user_subscriptions;t in i?e("already subscribed to this user"):Object.keys(i).length<s?(i[t]=!0,chrome.storage.sync.set(function(t){for(var r=1;r<arguments.length;r++){var e=null!=arguments[r]?arguments[r]:{};r%2?a(Object(e),!0).forEach((function(r){c(t,r,e[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(e)):a(Object(e)).forEach((function(r){Object.defineProperty(t,r,Object.getOwnPropertyDescriptor(e,r))}))}return t}({user_subscriptions:i},n),r)):e("maximum number of subscriptions reached")}))},P=function(t){chrome.storage.sync.get(null,(function(r){var e=Object.keys(r.user_subscriptions),n={};e.forEach((function(t){n[t]=T(t,!0,r)})),n.other=T("other",!1,r),t(n,r)}))},k=function(t){chrome.storage.sync.get(null,(function(r){var e=Object.keys(r.user_subscriptions),n={};e.forEach((function(t){n[t]=L(t,!0,r)})),n.other=L("other",!1,r),t(n)}))},L=function(t,r,e){return T(t,r,e).unseen},T=function(t,r,e){var n=e.options.removal_status.track,o=e.options.lock_status.track,i={},a={},c=[],u=x(t,r);return n&&c.push(u.removed,u.approved),o&&c.push(u.locked,u.unlocked),c.forEach((function(t){Object.keys(e[t]).forEach((function(r){e[t][r].u?i[r]=!0:a[r]=!0}))})),{unseen:Object.keys(i),seen:Object.keys(a)}},F=function(t,r){var e=b("items",t,r);return o.storage.local.get(c({},e,{})).then((function(t){return t[e]}))},N=function(t,r,e){var n=b("items",t,r);return o.storage.local.set(c({},n,e))},M=function(t,r,e){var i=b("items",r,e);return chrome.storage.local.get(c({},i,{}),(function(r){var e=r[i];Object.keys(t).forEach((function(r){e[r]=t[r]}));var a=e;return Object.keys(e).length>500&&(a=(0,n.N5)(e,500,"o")),o.storage.local.set(c({},i,a))}))},I=function(t){return o.storage.sync.get(["user_subscriptions","other_subscriptions","options"]).then((function(r){var e=Object.keys(r.user_subscriptions),n=Object.keys(r.other_subscriptions),o=r.options;return t(e,n,o)})).catch(console.log)}}},r={};function e(n){var o=r[n];if(void 0!==o)return o.exports;var i=r[n]={exports:{}};return t[n].call(i.exports,i,i.exports,e),i.exports}e.d=(t,r)=>{for(var n in r)e.o(r,n)&&!e.o(t,n)&&Object.defineProperty(t,n,{enumerable:!0,get:r[n]})},e.o=(t,r)=>Object.prototype.hasOwnProperty.call(t,r),(()=>{"use strict";e(1983);var t,r=(t=e(115))&&t.__esModule?t:{default:t};r.default._babelPolyfill&&"undefined"!=typeof console&&console.warn&&console.warn("@babel/polyfill is loaded more than once on this page. This is probably not desirable/intended and may have consequences if different versions of the polyfills are applied sequentially. If you do need to load the polyfill more than once, use @babel/polyfill/noConflict instead to bypass the warning."),r.default._babelPolyfill=!0})(),(()=>{"use strict";var t=e(3368),r=e(4149),n=e(1076),o=e(97),i=e(3150);!function(){var e=window.location.href.match(/^https?:\/\/[^/]*(reddit\.com|reveddit\.com|localhost)/);$.extend($.expr[":"],{equalsi:function(t,r,e,n){return(t.textContent||t.innerText||"").toLowerCase().trim()===e[3].toLowerCase().trim()}}),window.localStorage.setItem("hasSeenLanguageModal",!0),window.localStorage.setItem("hasNotifierExtension",!0),i.runtime.onMessage.addListener((function(r,e,n){if("query-user"===r.action)return(0,o.lc)().then((function(r){return r?(0,t.CU)(r,(function(){window.location.href="https://www.reveddit.com/user/".concat(r,"?all=true")})):Promise.resolve("failed")}))}));var a="extensionSaysNoSubscriptions",c="other",u=!1,s=!1,f=!1;jQuery(document).ready((function(){if(e){f="reddit.com"===e[1];var o=window.location.pathname.split("/");"user"===o[1]&&o.length>=3&&o[2]?(c=window.location.pathname.split("/")[2],u=!0):"info"===o[1]&&(s=!0)}(0,t.b1)((function(t,e){var o=Object.keys(t).filter((function(t){return"other"!==t})).map((function(t){return t.toLowerCase()}));0===o.length?window.localStorage.setItem(a,!0):window.localStorage.removeItem(a),f?(0,r.U)(e.other_subscriptions,e.options.hide_subscribe,e.options.monitor_quarantined,o,Object.keys(e.user_unsubscriptions||{}).map((function(t){return t.toLowerCase()}))):(0,n.m)(e,c,u,s)}))}))}()})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3JjL2NvbnRlbnQuanMiLCJtYXBwaW5ncyI6InlDQUVBLEVBQVEsTUFFUixFQUFRLEtBRVIsRUFBUSxLQUVSLEVBQVEsTUFFUixFQUFRLE1BRVIsRUFBUSxNQUVSLEVBQVEsTUFFUixFQUFRLE1BRVIsRUFBUSxNQUVSLEVBQVEsTUFFUixFQUFRLE1BRVIsRUFBUSxNQUVSLEVBQVEsTUFFUixFQUFRLEssaUJDNUJSLEVBQVEsTUFDUixFQUFRLE1BQ1IsRUFBUSxNQUNSLEVBQVEsTUFDUixFQUFRLE1BQ1IsRUFBUSxNQUNSLEVBQVEsTUFDUixFQUFRLE1BQ1IsRUFBUSxNQUNSLEVBQVEsTUFDUixFQUFRLE1BQ1IsRUFBUSxNQUNSLEVBQVEsTUFDUixFQUFRLE1BQ1IsRUFBUSxNQUNSLEVBQVEsTUFDUixFQUFRLE1BQ1IsRUFBUSxNQUNSLEVBQVEsTUFDUixFQUFRLE1BQ1IsRUFBUSxNQUNSLEVBQVEsTUFDUixFQUFRLE1BQ1IsRUFBUSxNQUNSLEVBQVEsS0FDUixFQUFRLE1BQ1IsRUFBUSxNQUNSLEVBQVEsTUFDUixFQUFRLE1BQ1IsRUFBUSxNQUNSLEVBQVEsTUFDUixFQUFRLE1BQ1IsRUFBUSxNQUNSLEVBQVEsTUFDUixFQUFRLE1BQ1IsRUFBUSxNQUNSLEVBQVEsTUFDUixFQUFRLEtBQ1IsRUFBUSxNQUNSLEVBQVEsTUFDUixFQUFRLE1BQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLE1BQ1IsRUFBUSxNQUNSLEVBQVEsTUFDUixFQUFRLE1BQ1IsRUFBUSxNQUNSLEVBQVEsTUFDUixFQUFRLE1BQ1IsRUFBUSxNQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxNQUNSLEVBQVEsTUFDUixFQUFRLE1BQ1IsRUFBUSxNQUNSLEVBQVEsTUFDUixFQUFRLE1BQ1IsRUFBUSxLQUNSLEVBQVEsTUFDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsTUFDUixFQUFRLE1BQ1IsRUFBUSxNQUNSLEVBQVEsTUFDUixFQUFRLE1BQ1IsRUFBUSxNQUNSLEVBQVEsTUFDUixFQUFRLE1BQ1IsRUFBUSxNQUNSLEVBQVEsTUFDUixFQUFRLEtBQ1IsRUFBUSxNQUNSLEVBQVEsTUFDUixFQUFRLE1BQ1IsRUFBUSxNQUNSLEVBQVEsTUFDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsTUFDUixFQUFRLE1BQ1IsRUFBUSxLQUNSLEVBQVEsSUFDUixFQUFRLE1BQ1IsRUFBUSxNQUNSLEVBQVEsTUFDUixFQUFRLE1BQ1IsRUFBUSxNQUNSLEVBQVEsTUFDUixFQUFRLE1BQ1IsRUFBUSxNQUNSLEVBQVEsTUFDUixFQUFRLEtBQ1IsRUFBUSxNQUNSLEVBQVEsTUFDUixFQUFRLE1BQ1IsRUFBUSxNQUNSLEVBQVEsTUFDUixFQUFRLE1BQ1IsRUFBUSxNQUNSLEVBQVEsTUFDUixFQUFRLE1BQ1IsRUFBUSxNQUNSLEVBQVEsTUFDUixFQUFRLE1BQ1IsRUFBUSxNQUNSLEVBQVEsS0FDUixFQUFRLE1BQ1IsRUFBUSxNQUNSLEVBQVEsS0FDUixFQUFRLE1BQ1IsRUFBUSxLQUNSLEVBQVEsTUFDUixFQUFRLE1BQ1IsRUFBUSxNQUNSLEVBQVEsTUFDUixFQUFRLE1BQ1IsRUFBUSxNQUNSLEVBQVEsTUFDUixFQUFRLE1BQ1IsRUFBUSxLQUNSLEVBQVEsTUFDUixFQUFRLE1BQ1IsRUFBUSxNQUNSLEVBQVEsS0FDUixFQUFRLE1BQ1IsRUFBUSxNQUNSLEVBQVEsTUFDUixFQUFRLE1BQ1IsRUFBUSxNQUNSLEVBQVEsTUFDUixFQUFRLE1BQ1IsRUFBUSxNQUNSLEVBQVEsTUFDUixFQUFRLElBQ1IsRUFBUSxNQUNSQSxFQUFPQyxRQUFVLEVBQWpCLEssZ0JDMUlBLEVBQVEsTUFDUkQsRUFBT0MsUUFBVSxFQUFqQixtQixnQkNEQSxFQUFRLE1BQ1JELEVBQU9DLFFBQVUsRUFBakIsb0IsaUJDREEsRUFBUSxNQUNSRCxFQUFPQyxRQUFVLEVBQWpCLG9CLGlCQ0RBLEVBQVEsTUFDUkQsRUFBT0MsUUFBVSxFQUFqQixzQyxpQkNEQSxFQUFRLE1BQ1JELEVBQU9DLFFBQVUsRUFBakIsbUIsOEJDQUEsRUFBUSxLQUNS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QVUsS0FDakIvSCxHQUFhLEVBRXJCLEVBQ0E4RixFQUFBQSxFQUFBQSxLQUF3QyxTQUFDakMsRUFBT3pQLEdBQzVDLElBQU1xRyxFQUE2QnIzQyxPQUFPeVMsS0FBS2d1QyxHQUFPeDhCLFFBQU8sU0FBQWxRLEdBQUMsTUFBVSxVQUFOQSxDQUFhLElBQUUwUSxLQUFJLFNBQUExUSxHQUFDLE9BQUlBLEVBQUU0SSxhQUFhLElBQy9ELElBQXRDMDZCLEVBQTJCNzNDLE9BQzNCZ0QsT0FBTzZoRCxhQUFhQyxRQUFRQyxHQUE4QixHQUUxRC9oRCxPQUFPNmhELGFBQWFPLFdBQVdMLEdBRS9CQyxHQUNBdE4sRUFBQUEsRUFBQUEsR0FBb0JsRyxFQUFRbUcsb0JBQXFCbkcsRUFBUXRCLFFBQVEwSCxlQUFnQnBHLEVBQVF0QixRQUFRZ0Msb0JBQXFCMkYsRUFBNEJyM0MsT0FBT3lTLEtBQU11K0IsRUFBUTZULHNCQUF3QixDQUFDLEdBQUlwZ0MsS0FBSSxTQUFBMVEsR0FBQyxPQUFJQSxFQUFFNEksYUFBYSxNQUU1TisvQixFQUFBQSxFQUFBQSxHQUFxQjFMLEVBQVNwRixFQUFNK1EsRUFBWUMsRUFFeEQsR0FDSixHQUNILENBeERELEUiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9yZXZlZGRpdF9yZWFsX3RpbWUvLi9ub2RlX21vZHVsZXMvQGJhYmVsL3BvbHlmaWxsL2xpYi9ub0NvbmZsaWN0LmpzIiwid2VicGFjazovL3JldmVkZGl0X3JlYWxfdGltZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2VzNi9pbmRleC5qcyIsIndlYnBhY2s6Ly9yZXZlZGRpdF9yZWFsX3RpbWUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9mbi9hcnJheS9mbGF0LW1hcC5qcyIsIndlYnBhY2s6Ly9yZXZlZGRpdF9yZWFsX3RpbWUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9mbi9hcnJheS9pbmNsdWRlcy5qcyIsIndlYnBhY2s6Ly9yZXZlZGRpdF9yZWFsX3RpbWUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9mbi9vYmplY3QvZW50cmllcy5qcyIsIndlYnBhY2s6Ly9yZXZlZGRpdF9yZWFsX3RpbWUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9mbi9vYmplY3QvZ2V0LW93bi1wcm9wZXJ0eS1kZXNjcmlwdG9ycy5qcyIsIndlYnBhY2s6Ly9yZXZlZGRpdF9yZWFsX3RpbWUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9mbi9vYmplY3QvdmFsdWVzLmpzIiwid2VicGFjazovL3JldmVkZGl0X3JlYWxfdGltZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ZuL3Byb21pc2UvZmluYWxseS5qcyIsIndlYnBhY2s6Ly9yZXZlZGRpdF9yZWFsX3RpbWUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9mbi9zdHJpbmcvcGFkLWVuZC5qcyIsIndlYnBhY2s6Ly9yZXZlZGRpdF9yZWFsX3RpbWUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9mbi9zdHJpbmcvcGFkLXN0YXJ0LmpzIiwid2VicGFjazovL3JldmVkZGl0X3JlYWxfdGltZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ZuL3N0cmluZy90cmltLWVuZC5qcyIsIndlYnBhY2s6Ly9yZXZlZGRpdF9yZWFsX3RpbWUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9mbi9zdHJpbmcvdHJpbS1zdGFydC5qcyIsIndlYnBhY2s6Ly9yZXZlZGRpdF9yZWFsX3RpbWUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9mbi9zeW1ib2wvYXN5bmMtaXRlcmF0b3IuanMiLCJ3ZWJwYWNrOi8vcmV2ZWRkaXRfcmVhbF90aW1lLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9mbi9nbG9iYWwuanMiLCJ3ZWJwYWNrOi8vcmV2ZWRkaXRfcmVhbF90aW1lLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19hLWZ1bmN0aW9uLmpzIiwid2VicGFjazovL3JldmVkZGl0X3JlYWxfdGltZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fYW4tb2JqZWN0LmpzIiwid2VicGFjazovL3JldmVkZGl0X3JlYWxfdGltZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fY29yZS5qcyIsIndlYnBhY2s6Ly9yZXZlZGRpdF9yZWFsX3RpbWUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2N0eC5qcyIsIndlYnBhY2s6Ly9yZXZlZGRpdF9yZWFsX3RpbWUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2Rlc2NyaXB0b3JzLmpzIiwid2VicGFjazovL3JldmVkZGl0X3JlYWxfdGltZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fZG9tLWNyZWF0ZS5qcyIsIndlYnBhY2s6Ly9yZXZlZGRpdF9yZWFsX3RpbWUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2V4cG9ydC5qcyIsIndlYnBhY2s6Ly9yZXZlZGRpdF9yZWFsX3RpbWUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2ZhaWxzLmpzIiwid2VicGFjazovL3JldmVkZGl0X3JlYWxfdGltZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fZ2xvYmFsLmpzIiwid2VicGFjazovL3JldmVkZGl0X3JlYWxfdGltZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9faGFzLmpzIiwid2VicGFjazovL3JldmVkZGl0X3JlYWxfdGltZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9faGlkZS5qcyIsIndlYnBhY2s6Ly9yZXZlZGRpdF9yZWFsX3RpbWUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2llOC1kb20tZGVmaW5lLmpzIiwid2VicGFjazovL3JldmVkZGl0X3JlYWxfdGltZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9faXMtb2JqZWN0LmpzIiwid2VicGFjazovL3JldmVkZGl0X3JlYWxfdGltZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fb2JqZWN0LWRwLmpzIiwid2VicGFjazovL3JldmVkZGl0X3JlYWxfdGltZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fcHJvcGVydHktZGVzYy5qcyIsIndlYnBhY2s6Ly9yZXZlZGRpdF9yZWFsX3RpbWUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX3RvLXByaW1pdGl2ZS5qcyIsIndlYnBhY2s6Ly9yZXZlZGRpdF9yZWFsX3RpbWUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvZXM3Lmdsb2JhbC5qcyIsIndlYnBhY2s6Ly9yZXZlZGRpdF9yZWFsX3RpbWUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19hLWZ1bmN0aW9uLmpzIiwid2VicGFjazovL3JldmVkZGl0X3JlYWxfdGltZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2EtbnVtYmVyLXZhbHVlLmpzIiwid2VicGFjazovL3JldmVkZGl0X3JlYWxfdGltZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2FkZC10by11bnNjb3BhYmxlcy5qcyIsIndlYnBhY2s6Ly9yZXZlZGRpdF9yZWFsX3RpbWUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19hZHZhbmNlLXN0cmluZy1pbmRleC5qcyIsIndlYnBhY2s6Ly9yZXZlZGRpdF9yZWFsX3RpbWUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19hbi1pbnN0YW5jZS5qcyIsIndlYnBhY2s6Ly9yZXZlZGRpdF9yZWFsX3RpbWUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19hbi1vYmplY3QuanMiLCJ3ZWJwYWNrOi8vcmV2ZWRkaXRfcmVhbF90aW1lLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fYXJyYXktY29weS13aXRoaW4uanMiLCJ3ZWJwYWNrOi8vcmV2ZWRkaXRfcmVhbF90aW1lLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fYXJyYXktZmlsbC5qcyIsIndlYnBhY2s6Ly9yZXZlZGRpdF9yZWFsX3RpbWUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19hcnJheS1pbmNsdWRlcy5qcyIsIndlYnBhY2s6Ly9yZXZlZGRpdF9yZWFsX3RpbWUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19hcnJheS1tZXRob2RzLmpzIiwid2VicGFjazovL3JldmVkZGl0X3JlYWxfdGltZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2FycmF5LXJlZHVjZS5qcyIsIndlYnBhY2s6Ly9yZXZlZGRpdF9yZWFsX3RpbWUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19hcnJheS1zcGVjaWVzLWNvbnN0cnVjdG9yLmpzIiwid2VicGFjazovL3JldmVkZGl0X3JlYWxfdGltZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2FycmF5LXNwZWNpZXMtY3JlYXRlLmpzIiwid2VicGFjazovL3JldmVkZGl0X3JlYWxfdGltZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2JpbmQuanMiLCJ3ZWJwYWNrOi8vcmV2ZWRkaXRfcmVhbF90aW1lLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fY2xhc3NvZi5qcyIsIndlYnBhY2s6Ly9yZXZlZGRpdF9yZWFsX3RpbWUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19jb2YuanMiLCJ3ZWJwYWNrOi8vcmV2ZWRkaXRfcmVhbF90aW1lLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fY29sbGVjdGlvbi1zdHJvbmcuanMiLCJ3ZWJwYWNrOi8vcmV2ZWRkaXRfcmVhbF90aW1lLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fY29sbGVjdGlvbi13ZWFrLmpzIiwid2VicGFjazovL3JldmVkZGl0X3JlYWxfdGltZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2NvbGxlY3Rpb24uanMiLCJ3ZWJwYWNrOi8vcmV2ZWRkaXRfcmVhbF90aW1lLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fY29yZS5qcyIsIndlYnBhY2s6Ly9yZXZlZGRpdF9yZWFsX3RpbWUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19jcmVhdGUtcHJvcGVydHkuanMiLCJ3ZWJwYWNrOi8vcmV2ZWRkaXRfcmVhbF90aW1lLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fY3R4LmpzIiwid2VicGFjazovL3JldmVkZGl0X3JlYWxfdGltZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2RhdGUtdG8taXNvLXN0cmluZy5qcyIsIndlYnBhY2s6Ly9yZXZlZGRpdF9yZWFsX3RpbWUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19kYXRlLXRvLXByaW1pdGl2ZS5qcyIsIndlYnBhY2s6Ly9yZXZlZGRpdF9yZWFsX3RpbWUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19kZWZpbmVkLmpzIiwid2VicGFjazovL3JldmVkZGl0X3JlYWxfdGltZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2Rlc2NyaXB0b3JzLmpzIiwid2VicGFjazovL3JldmVkZGl0X3JlYWxfdGltZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2RvbS1jcmVhdGUuanMiLCJ3ZWJwYWNrOi8vcmV2ZWRkaXRfcmVhbF90aW1lLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fZW51bS1idWcta2V5cy5qcyIsIndlYnBhY2s6Ly9yZXZlZGRpdF9yZWFsX3RpbWUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19lbnVtLWtleXMuanMiLCJ3ZWJwYWNrOi8vcmV2ZWRkaXRfcmVhbF90aW1lLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fZXhwb3J0LmpzIiwid2VicGFjazovL3JldmVkZGl0X3JlYWxfdGltZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2ZhaWxzLWlzLXJlZ2V4cC5qcyIsIndlYnBhY2s6Ly9yZXZlZGRpdF9yZWFsX3RpbWUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19mYWlscy5qcyIsIndlYnBhY2s6Ly9yZXZlZGRpdF9yZWFsX3RpbWUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19maXgtcmUtd2tzLmpzIiwid2VicGFjazovL3JldmVkZGl0X3JlYWxfdGltZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2ZsYWdzLmpzIiwid2VicGFjazovL3JldmVkZGl0X3JlYWxfdGltZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2ZsYXR0ZW4taW50by1hcnJheS5qcyIsIndlYnBhY2s6Ly9yZXZlZGRpdF9yZWFsX3RpbWUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19mb3Itb2YuanMiLCJ3ZWJwYWNrOi8vcmV2ZWRkaXRfcmVhbF90aW1lLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fZnVuY3Rpb24tdG8tc3RyaW5nLmpzIiwid2VicGFjazovL3JldmVkZGl0X3JlYWxfdGltZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2dsb2JhbC5qcyIsIndlYnBhY2s6Ly9yZXZlZGRpdF9yZWFsX3RpbWUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19oYXMuanMiLCJ3ZWJwYWNrOi8vcmV2ZWRkaXRfcmVhbF90aW1lLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faGlkZS5qcyIsIndlYnBhY2s6Ly9yZXZlZGRpdF9yZWFsX3RpbWUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19odG1sLmpzIiwid2VicGFjazovL3JldmVkZGl0X3JlYWxfdGltZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2llOC1kb20tZGVmaW5lLmpzIiwid2VicGFjazovL3JldmVkZGl0X3JlYWxfdGltZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2luaGVyaXQtaWYtcmVxdWlyZWQuanMiLCJ3ZWJwYWNrOi8vcmV2ZWRkaXRfcmVhbF90aW1lLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faW52b2tlLmpzIiwid2VicGFjazovL3JldmVkZGl0X3JlYWxfdGltZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2lvYmplY3QuanMiLCJ3ZWJwYWNrOi8vcmV2ZWRkaXRfcmVhbF90aW1lLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faXMtYXJyYXktaXRlci5qcyIsIndlYnBhY2s6Ly9yZXZlZGRpdF9yZWFsX3RpbWUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19pcy1hcnJheS5qcyIsIndlYnBhY2s6Ly9yZXZlZGRpdF9yZWFsX3RpbWUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19pcy1pbnRlZ2VyLmpzIiwid2VicGFjazovL3JldmVkZGl0X3JlYWxfdGltZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2lzLW9iamVjdC5qcyIsIndlYnBhY2s6Ly9yZXZlZGRpdF9yZWFsX3RpbWUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19pcy1yZWdleHAuanMiLCJ3ZWJwYWNrOi8vcmV2ZWRkaXRfcmVhbF90aW1lLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faXRlci1jYWxsLmpzIiwid2VicGFjazovL3JldmVkZGl0X3JlYWxfdGltZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2l0ZXItY3JlYXRlLmpzIiwid2VicGFjazovL3JldmVkZGl0X3JlYWxfdGltZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2l0ZXItZGVmaW5lLmpzIiwid2VicGFjazovL3JldmVkZGl0X3JlYWxfdGltZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2l0ZXItZGV0ZWN0LmpzIiwid2VicGFjazovL3JldmVkZGl0X3JlYWxfdGltZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2l0ZXItc3RlcC5qcyIsIndlYnBhY2s6Ly9yZXZlZGRpdF9yZWFsX3RpbWUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19pdGVyYXRvcnMuanMiLCJ3ZWJwYWNrOi8vcmV2ZWRkaXRfcmVhbF90aW1lLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fbGlicmFyeS5qcyIsIndlYnBhY2s6Ly9yZXZlZGRpdF9yZWFsX3RpbWUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19tYXRoLWV4cG0xLmpzIiwid2VicGFjazovL3JldmVkZGl0X3JlYWxfdGltZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX21hdGgtZnJvdW5kLmpzIiwid2VicGFjazovL3JldmVkZGl0X3JlYWxfdGltZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX21hdGgtbG9nMXAuanMiLCJ3ZWJwYWNrOi8vcmV2ZWRkaXRfcmVhbF90aW1lLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fbWF0aC1zaWduLmpzIiwid2VicGFjazovL3JldmVkZGl0X3JlYWxfdGltZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX21ldGEuanMiLCJ3ZWJwYWNrOi8vcmV2ZWRkaXRfcmVhbF90aW1lLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fbWljcm90YXNrLmpzIiwid2VicGFjazovL3JldmVkZGl0X3JlYWxfdGltZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX25ldy1wcm9taXNlLWNhcGFiaWxpdHkuanMiLCJ3ZWJwYWNrOi8vcmV2ZWRkaXRfcmVhbF90aW1lLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fb2JqZWN0LWFzc2lnbi5qcyIsIndlYnBhY2s6Ly9yZXZlZGRpdF9yZWFsX3RpbWUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19vYmplY3QtY3JlYXRlLmpzIiwid2VicGFjazovL3JldmVkZGl0X3JlYWxfdGltZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX29iamVjdC1kcC5qcyIsIndlYnBhY2s6Ly9yZXZlZGRpdF9yZWFsX3RpbWUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19vYmplY3QtZHBzLmpzIiwid2VicGFjazovL3JldmVkZGl0X3JlYWxfdGltZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX29iamVjdC1nb3BkLmpzIiwid2VicGFjazovL3JldmVkZGl0X3JlYWxfdGltZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX29iamVjdC1nb3BuLWV4dC5qcyIsIndlYnBhY2s6Ly9yZXZlZGRpdF9yZWFsX3RpbWUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19vYmplY3QtZ29wbi5qcyIsIndlYnBhY2s6Ly9yZXZlZGRpdF9yZWFsX3RpbWUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19vYmplY3QtZ29wcy5qcyIsIndlYnBhY2s6Ly9yZXZlZGRpdF9yZWFsX3RpbWUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19vYmplY3QtZ3BvLmpzIiwid2VicGFjazovL3JldmVkZGl0X3JlYWxfdGltZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX29iamVjdC1rZXlzLWludGVybmFsLmpzIiwid2VicGFjazovL3JldmVkZGl0X3JlYWxfdGltZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX29iamVjdC1rZXlzLmpzIiwid2VicGFjazovL3JldmVkZGl0X3JlYWxfdGltZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX29iamVjdC1waWUuanMiLCJ3ZWJwYWNrOi8vcmV2ZWRkaXRfcmVhbF90aW1lLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fb2JqZWN0LXNhcC5qcyIsIndlYnBhY2s6Ly9yZXZlZGRpdF9yZWFsX3RpbWUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19vYmplY3QtdG8tYXJyYXkuanMiLCJ3ZWJwYWNrOi8vcmV2ZWRkaXRfcmVhbF90aW1lLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fb3duLWtleXMuanMiLCJ3ZWJwYWNrOi8vcmV2ZWRkaXRfcmVhbF90aW1lLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fcGFyc2UtZmxvYXQuanMiLCJ3ZWJwYWNrOi8vcmV2ZWRkaXRfcmVhbF90aW1lLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fcGFyc2UtaW50LmpzIiwid2VicGFjazovL3JldmVkZGl0X3JlYWxfdGltZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3BlcmZvcm0uanMiLCJ3ZWJwYWNrOi8vcmV2ZWRkaXRfcmVhbF90aW1lLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fcHJvbWlzZS1yZXNvbHZlLmpzIiwid2VicGFjazovL3JldmVkZGl0X3JlYWxfdGltZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3Byb3BlcnR5LWRlc2MuanMiLCJ3ZWJwYWNrOi8vcmV2ZWRkaXRfcmVhbF90aW1lLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fcmVkZWZpbmUtYWxsLmpzIiwid2VicGFjazovL3JldmVkZGl0X3JlYWxfdGltZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3JlZGVmaW5lLmpzIiwid2VicGFjazovL3JldmVkZGl0X3JlYWxfdGltZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3JlZ2V4cC1leGVjLWFic3RyYWN0LmpzIiwid2VicGFjazovL3JldmVkZGl0X3JlYWxfdGltZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3JlZ2V4cC1leGVjLmpzIiwid2VicGFjazovL3JldmVkZGl0X3JlYWxfdGltZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3NhbWUtdmFsdWUuanMiLCJ3ZWJwYWNrOi8vcmV2ZWRkaXRfcmVhbF90aW1lLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fc2V0LXByb3RvLmpzIiwid2VicGFjazovL3JldmVkZGl0X3JlYWxfdGltZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3NldC1zcGVjaWVzLmpzIiwid2VicGFjazovL3JldmVkZGl0X3JlYWxfdGltZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3NldC10by1zdHJpbmctdGFnLmpzIiwid2VicGFjazovL3JldmVkZGl0X3JlYWxfdGltZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3NoYXJlZC1rZXkuanMiLCJ3ZWJwYWNrOi8vcmV2ZWRkaXRfcmVhbF90aW1lLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fc2hhcmVkLmpzIiwid2VicGFjazovL3JldmVkZGl0X3JlYWxfdGltZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3NwZWNpZXMtY29uc3RydWN0b3IuanMiLCJ3ZWJwYWNrOi8vcmV2ZWRkaXRfcmVhbF90aW1lLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fc3RyaWN0LW1ldGhvZC5qcyIsIndlYnBhY2s6Ly9yZXZlZGRpdF9yZWFsX3RpbWUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19zdHJpbmctYXQuanMiLCJ3ZWJwYWNrOi8vcmV2ZWRkaXRfcmVhbF90aW1lLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fc3RyaW5nLWNvbnRleHQuanMiLCJ3ZWJwYWNrOi8vcmV2ZWRkaXRfcmVhbF90aW1lLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fc3RyaW5nLWh0bWwuanMiLCJ3ZWJwYWNrOi8vcmV2ZWRkaXRfcmVhbF90aW1lLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fc3RyaW5nLXBhZC5qcyIsIndlYnBhY2s6Ly9yZXZlZGRpdF9yZWFsX3RpbWUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19zdHJpbmctcmVwZWF0LmpzIiwid2VicGFjazovL3JldmVkZGl0X3JlYWxfdGltZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3N0cmluZy10cmltLmpzIiwid2VicGFjazovL3JldmVkZGl0X3JlYWxfdGltZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3N0cmluZy13cy5qcyIsIndlYnBhY2s6Ly9yZXZlZGRpdF9yZWFsX3RpbWUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL190YXNrLmpzIiwid2VicGFjazovL3JldmVkZGl0X3JlYWxfdGltZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3RvLWFic29sdXRlLWluZGV4LmpzIiwid2VicGFjazovL3JldmVkZGl0X3JlYWxfdGltZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3RvLWluZGV4LmpzIiwid2VicGFjazovL3JldmVkZGl0X3JlYWxfdGltZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3RvLWludGVnZXIuanMiLCJ3ZWJwYWNrOi8vcmV2ZWRkaXRfcmVhbF90aW1lLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fdG8taW9iamVjdC5qcyIsIndlYnBhY2s6Ly9yZXZlZGRpdF9yZWFsX3RpbWUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL190by1sZW5ndGguanMiLCJ3ZWJwYWNrOi8vcmV2ZWRkaXRfcmVhbF90aW1lLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fdG8tb2JqZWN0LmpzIiwid2VicGFjazovL3JldmVkZGl0X3JlYWxfdGltZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3RvLXByaW1pdGl2ZS5qcyIsIndlYnBhY2s6Ly9yZXZlZGRpdF9yZWFsX3RpbWUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL190eXBlZC1hcnJheS5qcyIsIndlYnBhY2s6Ly9yZXZlZGRpdF9yZWFsX3RpbWUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL190eXBlZC1idWZmZXIuanMiLCJ3ZWJwYWNrOi8vcmV2ZWRkaXRfcmVhbF90aW1lLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fdHlwZWQuanMiLCJ3ZWJwYWNrOi8vcmV2ZWRkaXRfcmVhbF90aW1lLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fdWlkLmpzIiwid2VicGFjazovL3JldmVkZGl0X3JlYWxfdGltZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3VzZXItYWdlbnQuanMiLCJ3ZWJwYWNrOi8vcmV2ZWRkaXRfcmVhbF90aW1lLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fdmFsaWRhdGUtY29sbGVjdGlvbi5qcyIsIndlYnBhY2s6Ly9yZXZlZGRpdF9yZWFsX3RpbWUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL193a3MtZGVmaW5lLmpzIiwid2VicGFjazovL3JldmVkZGl0X3JlYWxfdGltZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3drcy1leHQuanMiLCJ3ZWJwYWNrOi8vcmV2ZWRkaXRfcmVhbF90aW1lLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fd2tzLmpzIiwid2VicGFjazovL3JldmVkZGl0X3JlYWxfdGltZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvY29yZS5nZXQtaXRlcmF0b3ItbWV0aG9kLmpzIiwid2VicGFjazovL3JldmVkZGl0X3JlYWxfdGltZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmFycmF5LmNvcHktd2l0aGluLmpzIiwid2VicGFjazovL3JldmVkZGl0X3JlYWxfdGltZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmFycmF5LmV2ZXJ5LmpzIiwid2VicGFjazovL3JldmVkZGl0X3JlYWxfdGltZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmFycmF5LmZpbGwuanMiLCJ3ZWJwYWNrOi8vcmV2ZWRkaXRfcmVhbF90aW1lLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkuZmlsdGVyLmpzIiwid2VicGFjazovL3JldmVkZGl0X3JlYWxfdGltZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmFycmF5LmZpbmQtaW5kZXguanMiLCJ3ZWJwYWNrOi8vcmV2ZWRkaXRfcmVhbF90aW1lLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkuZmluZC5qcyIsIndlYnBhY2s6Ly9yZXZlZGRpdF9yZWFsX3RpbWUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5hcnJheS5mb3ItZWFjaC5qcyIsIndlYnBhY2s6Ly9yZXZlZGRpdF9yZWFsX3RpbWUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5hcnJheS5mcm9tLmpzIiwid2VicGFjazovL3JldmVkZGl0X3JlYWxfdGltZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmFycmF5LmluZGV4LW9mLmpzIiwid2VicGFjazovL3JldmVkZGl0X3JlYWxfdGltZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmFycmF5LmlzLWFycmF5LmpzIiwid2VicGFjazovL3JldmVkZGl0X3JlYWxfdGltZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmFycmF5Lml0ZXJhdG9yLmpzIiwid2VicGFjazovL3JldmVkZGl0X3JlYWxfdGltZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmFycmF5LmpvaW4uanMiLCJ3ZWJwYWNrOi8vcmV2ZWRkaXRfcmVhbF90aW1lLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkubGFzdC1pbmRleC1vZi5qcyIsIndlYnBhY2s6Ly9yZXZlZGRpdF9yZWFsX3RpbWUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5hcnJheS5tYXAuanMiLCJ3ZWJwYWNrOi8vcmV2ZWRkaXRfcmVhbF90aW1lLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkub2YuanMiLCJ3ZWJwYWNrOi8vcmV2ZWRkaXRfcmVhbF90aW1lLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkucmVkdWNlLXJpZ2h0LmpzIiwid2VicGFjazovL3JldmVkZGl0X3JlYWxfdGltZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmFycmF5LnJlZHVjZS5qcyIsIndlYnBhY2s6Ly9yZXZlZGRpdF9yZWFsX3RpbWUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5hcnJheS5zbGljZS5qcyIsIndlYnBhY2s6Ly9yZXZlZGRpdF9yZWFsX3RpbWUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5hcnJheS5zb21lLmpzIiwid2VicGFjazovL3JldmVkZGl0X3JlYWxfdGltZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmFycmF5LnNvcnQuanMiLCJ3ZWJwYWNrOi8vcmV2ZWRkaXRfcmVhbF90aW1lLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkuc3BlY2llcy5qcyIsIndlYnBhY2s6Ly9yZXZlZGRpdF9yZWFsX3RpbWUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5kYXRlLm5vdy5qcyIsIndlYnBhY2s6Ly9yZXZlZGRpdF9yZWFsX3RpbWUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5kYXRlLnRvLWlzby1zdHJpbmcuanMiLCJ3ZWJwYWNrOi8vcmV2ZWRkaXRfcmVhbF90aW1lLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuZGF0ZS50by1qc29uLmpzIiwid2VicGFjazovL3JldmVkZGl0X3JlYWxfdGltZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmRhdGUudG8tcHJpbWl0aXZlLmpzIiwid2VicGFjazovL3JldmVkZGl0X3JlYWxfdGltZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmRhdGUudG8tc3RyaW5nLmpzIiwid2VicGFjazovL3JldmVkZGl0X3JlYWxfdGltZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmZ1bmN0aW9uLmJpbmQuanMiLCJ3ZWJwYWNrOi8vcmV2ZWRkaXRfcmVhbF90aW1lLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuZnVuY3Rpb24uaGFzLWluc3RhbmNlLmpzIiwid2VicGFjazovL3JldmVkZGl0X3JlYWxfdGltZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmZ1bmN0aW9uLm5hbWUuanMiLCJ3ZWJwYWNrOi8vcmV2ZWRkaXRfcmVhbF90aW1lLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubWFwLmpzIiwid2VicGFjazovL3JldmVkZGl0X3JlYWxfdGltZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm1hdGguYWNvc2guanMiLCJ3ZWJwYWNrOi8vcmV2ZWRkaXRfcmVhbF90aW1lLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubWF0aC5hc2luaC5qcyIsIndlYnBhY2s6Ly9yZXZlZGRpdF9yZWFsX3RpbWUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5tYXRoLmF0YW5oLmpzIiwid2VicGFjazovL3JldmVkZGl0X3JlYWxfdGltZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm1hdGguY2JydC5qcyIsIndlYnBhY2s6Ly9yZXZlZGRpdF9yZWFsX3RpbWUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5tYXRoLmNsejMyLmpzIiwid2VicGFjazovL3JldmVkZGl0X3JlYWxfdGltZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm1hdGguY29zaC5qcyIsIndlYnBhY2s6Ly9yZXZlZGRpdF9yZWFsX3RpbWUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5tYXRoLmV4cG0xLmpzIiwid2VicGFjazovL3JldmVkZGl0X3JlYWxfdGltZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm1hdGguZnJvdW5kLmpzIiwid2VicGFjazovL3JldmVkZGl0X3JlYWxfdGltZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm1hdGguaHlwb3QuanMiLCJ3ZWJwYWNrOi8vcmV2ZWRkaXRfcmVhbF90aW1lLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubWF0aC5pbXVsLmpzIiwid2VicGFjazovL3JldmVkZGl0X3JlYWxfdGltZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm1hdGgubG9nMTAuanMiLCJ3ZWJwYWNrOi8vcmV2ZWRkaXRfcmVhbF90aW1lLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubWF0aC5sb2cxcC5qcyIsIndlYnBhY2s6Ly9yZXZlZGRpdF9yZWFsX3RpbWUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5tYXRoLmxvZzIuanMiLCJ3ZWJwYWNrOi8vcmV2ZWRkaXRfcmVhbF90aW1lLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubWF0aC5zaWduLmpzIiwid2VicGFjazovL3JldmVkZGl0X3JlYWxfdGltZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm1hdGguc2luaC5qcyIsIndlYnBhY2s6Ly9yZXZlZGRpdF9yZWFsX3RpbWUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5tYXRoLnRhbmguanMiLCJ3ZWJwYWNrOi8vcmV2ZWRkaXRfcmVhbF90aW1lLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubWF0aC50cnVuYy5qcyIsIndlYnBhY2s6Ly9yZXZlZGRpdF9yZWFsX3RpbWUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5udW1iZXIuY29uc3RydWN0b3IuanMiLCJ3ZWJwYWNrOi8vcmV2ZWRkaXRfcmVhbF90aW1lLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubnVtYmVyLmVwc2lsb24uanMiLCJ3ZWJwYWNrOi8vcmV2ZWRkaXRfcmVhbF90aW1lLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubnVtYmVyLmlzLWZpbml0ZS5qcyIsIndlYnBhY2s6Ly9yZXZlZGRpdF9yZWFsX3RpbWUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5udW1iZXIuaXMtaW50ZWdlci5qcyIsIndlYnBhY2s6Ly9yZXZlZGRpdF9yZWFsX3RpbWUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5udW1iZXIuaXMtbmFuLmpzIiwid2VicGFjazovL3JldmVkZGl0X3JlYWxfdGltZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm51bWJlci5pcy1zYWZlLWludGVnZXIuanMiLCJ3ZWJwYWNrOi8vcmV2ZWRkaXRfcmVhbF90aW1lLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubnVtYmVyLm1heC1zYWZlLWludGVnZXIuanMiLCJ3ZWJwYWNrOi8vcmV2ZWRkaXRfcmVhbF90aW1lLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubnVtYmVyLm1pbi1zYWZlLWludGVnZXIuanMiLCJ3ZWJwYWNrOi8vcmV2ZWRkaXRfcmVhbF90aW1lLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubnVtYmVyLnBhcnNlLWZsb2F0LmpzIiwid2VicGFjazovL3JldmVkZGl0X3JlYWxfdGltZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm51bWJlci5wYXJzZS1pbnQuanMiLCJ3ZWJwYWNrOi8vcmV2ZWRkaXRfcmVhbF90aW1lLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubnVtYmVyLnRvLWZpeGVkLmpzIiwid2VicGFjazovL3JldmVkZGl0X3JlYWxfdGltZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm51bWJlci50by1wcmVjaXNpb24uanMiLCJ3ZWJwYWNrOi8vcmV2ZWRkaXRfcmVhbF90aW1lLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYub2JqZWN0LmFzc2lnbi5qcyIsIndlYnBhY2s6Ly9yZXZlZGRpdF9yZWFsX3RpbWUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5vYmplY3QuY3JlYXRlLmpzIiwid2VicGFjazovL3JldmVkZGl0X3JlYWxfdGltZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm9iamVjdC5kZWZpbmUtcHJvcGVydGllcy5qcyIsIndlYnBhY2s6Ly9yZXZlZGRpdF9yZWFsX3RpbWUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5vYmplY3QuZGVmaW5lLXByb3BlcnR5LmpzIiwid2VicGFjazovL3JldmVkZGl0X3JlYWxfdGltZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm9iamVjdC5mcmVlemUuanMiLCJ3ZWJwYWNrOi8vcmV2ZWRkaXRfcmVhbF90aW1lLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYub2JqZWN0LmdldC1vd24tcHJvcGVydHktZGVzY3JpcHRvci5qcyIsIndlYnBhY2s6Ly9yZXZlZGRpdF9yZWFsX3RpbWUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5vYmplY3QuZ2V0LW93bi1wcm9wZXJ0eS1uYW1lcy5qcyIsIndlYnBhY2s6Ly9yZXZlZGRpdF9yZWFsX3RpbWUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5vYmplY3QuZ2V0LXByb3RvdHlwZS1vZi5qcyIsIndlYnBhY2s6Ly9yZXZlZGRpdF9yZWFsX3RpbWUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5vYmplY3QuaXMtZXh0ZW5zaWJsZS5qcyIsIndlYnBhY2s6Ly9yZXZlZGRpdF9yZWFsX3RpbWUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5vYmplY3QuaXMtZnJvemVuLmpzIiwid2VicGFjazovL3JldmVkZGl0X3JlYWxfdGltZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm9iamVjdC5pcy1zZWFsZWQuanMiLCJ3ZWJwYWNrOi8vcmV2ZWRkaXRfcmVhbF90aW1lLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYub2JqZWN0LmlzLmpzIiwid2VicGFjazovL3JldmVkZGl0X3JlYWxfdGltZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm9iamVjdC5rZXlzLmpzIiwid2VicGFjazovL3JldmVkZGl0X3JlYWxfdGltZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm9iamVjdC5wcmV2ZW50LWV4dGVuc2lvbnMuanMiLCJ3ZWJwYWNrOi8vcmV2ZWRkaXRfcmVhbF90aW1lLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYub2JqZWN0LnNlYWwuanMiLCJ3ZWJwYWNrOi8vcmV2ZWRkaXRfcmVhbF90aW1lLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYub2JqZWN0LnNldC1wcm90b3R5cGUtb2YuanMiLCJ3ZWJwYWNrOi8vcmV2ZWRkaXRfcmVhbF90aW1lLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYub2JqZWN0LnRvLXN0cmluZy5qcyIsIndlYnBhY2s6Ly9yZXZlZGRpdF9yZWFsX3RpbWUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5wYXJzZS1mbG9hdC5qcyIsIndlYnBhY2s6Ly9yZXZlZGRpdF9yZWFsX3RpbWUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5wYXJzZS1pbnQuanMiLCJ3ZWJwYWNrOi8vcmV2ZWRkaXRfcmVhbF90aW1lLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucHJvbWlzZS5qcyIsIndlYnBhY2s6Ly9yZXZlZGRpdF9yZWFsX3RpbWUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5yZWZsZWN0LmFwcGx5LmpzIiwid2VicGFjazovL3JldmVkZGl0X3JlYWxfdGltZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnJlZmxlY3QuY29uc3RydWN0LmpzIiwid2VicGFjazovL3JldmVkZGl0X3JlYWxfdGltZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnJlZmxlY3QuZGVmaW5lLXByb3BlcnR5LmpzIiwid2VicGFjazovL3JldmVkZGl0X3JlYWxfdGltZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnJlZmxlY3QuZGVsZXRlLXByb3BlcnR5LmpzIiwid2VicGFjazovL3JldmVkZGl0X3JlYWxfdGltZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnJlZmxlY3QuZW51bWVyYXRlLmpzIiwid2VicGFjazovL3JldmVkZGl0X3JlYWxfdGltZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnJlZmxlY3QuZ2V0LW93bi1wcm9wZXJ0eS1kZXNjcmlwdG9yLmpzIiwid2VicGFjazovL3JldmVkZGl0X3JlYWxfdGltZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnJlZmxlY3QuZ2V0LXByb3RvdHlwZS1vZi5qcyIsIndlYnBhY2s6Ly9yZXZlZGRpdF9yZWFsX3RpbWUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5yZWZsZWN0LmdldC5qcyIsIndlYnBhY2s6Ly9yZXZlZGRpdF9yZWFsX3RpbWUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5yZWZsZWN0Lmhhcy5qcyIsIndlYnBhY2s6Ly9yZXZlZGRpdF9yZWFsX3RpbWUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5yZWZsZWN0LmlzLWV4dGVuc2libGUuanMiLCJ3ZWJwYWNrOi8vcmV2ZWRkaXRfcmVhbF90aW1lLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVmbGVjdC5vd24ta2V5cy5qcyIsIndlYnBhY2s6Ly9yZXZlZGRpdF9yZWFsX3RpbWUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5yZWZsZWN0LnByZXZlbnQtZXh0ZW5zaW9ucy5qcyIsIndlYnBhY2s6Ly9yZXZlZGRpdF9yZWFsX3RpbWUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5yZWZsZWN0LnNldC1wcm90b3R5cGUtb2YuanMiLCJ3ZWJwYWNrOi8vcmV2ZWRkaXRfcmVhbF90aW1lLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVmbGVjdC5zZXQuanMiLCJ3ZWJwYWNrOi8vcmV2ZWRkaXRfcmVhbF90aW1lLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVnZXhwLmNvbnN0cnVjdG9yLmpzIiwid2VicGFjazovL3JldmVkZGl0X3JlYWxfdGltZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnJlZ2V4cC5leGVjLmpzIiwid2VicGFjazovL3JldmVkZGl0X3JlYWxfdGltZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnJlZ2V4cC5mbGFncy5qcyIsIndlYnBhY2s6Ly9yZXZlZGRpdF9yZWFsX3RpbWUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5yZWdleHAubWF0Y2guanMiLCJ3ZWJwYWNrOi8vcmV2ZWRkaXRfcmVhbF90aW1lLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVnZXhwLnJlcGxhY2UuanMiLCJ3ZWJwYWNrOi8vcmV2ZWRkaXRfcmVhbF90aW1lLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVnZXhwLnNlYXJjaC5qcyIsIndlYnBhY2s6Ly9yZXZlZGRpdF9yZWFsX3RpbWUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5yZWdleHAuc3BsaXQuanMiLCJ3ZWJwYWNrOi8vcmV2ZWRkaXRfcmVhbF90aW1lLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVnZXhwLnRvLXN0cmluZy5qcyIsIndlYnBhY2s6Ly9yZXZlZGRpdF9yZWFsX3RpbWUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5zZXQuanMiLCJ3ZWJwYWNrOi8vcmV2ZWRkaXRfcmVhbF90aW1lLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLmFuY2hvci5qcyIsIndlYnBhY2s6Ly9yZXZlZGRpdF9yZWFsX3RpbWUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5zdHJpbmcuYmlnLmpzIiwid2VicGFjazovL3JldmVkZGl0X3JlYWxfdGltZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5ibGluay5qcyIsIndlYnBhY2s6Ly9yZXZlZGRpdF9yZWFsX3RpbWUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5zdHJpbmcuYm9sZC5qcyIsIndlYnBhY2s6Ly9yZXZlZGRpdF9yZWFsX3RpbWUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5zdHJpbmcuY29kZS1wb2ludC1hdC5qcyIsIndlYnBhY2s6Ly9yZXZlZGRpdF9yZWFsX3RpbWUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5zdHJpbmcuZW5kcy13aXRoLmpzIiwid2VicGFjazovL3JldmVkZGl0X3JlYWxfdGltZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5maXhlZC5qcyIsIndlYnBhY2s6Ly9yZXZlZGRpdF9yZWFsX3RpbWUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5zdHJpbmcuZm9udGNvbG9yLmpzIiwid2VicGFjazovL3JldmVkZGl0X3JlYWxfdGltZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5mb250c2l6ZS5qcyIsIndlYnBhY2s6Ly9yZXZlZGRpdF9yZWFsX3RpbWUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5zdHJpbmcuZnJvbS1jb2RlLXBvaW50LmpzIiwid2VicGFjazovL3JldmVkZGl0X3JlYWxfdGltZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5pbmNsdWRlcy5qcyIsIndlYnBhY2s6Ly9yZXZlZGRpdF9yZWFsX3RpbWUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5zdHJpbmcuaXRhbGljcy5qcyIsIndlYnBhY2s6Ly9yZXZlZGRpdF9yZWFsX3RpbWUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5zdHJpbmcuaXRlcmF0b3IuanMiLCJ3ZWJwYWNrOi8vcmV2ZWRkaXRfcmVhbF90aW1lLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLmxpbmsuanMiLCJ3ZWJwYWNrOi8vcmV2ZWRkaXRfcmVhbF90aW1lLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLnJhdy5qcyIsIndlYnBhY2s6Ly9yZXZlZGRpdF9yZWFsX3RpbWUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5zdHJpbmcucmVwZWF0LmpzIiwid2VicGFjazovL3JldmVkZGl0X3JlYWxfdGltZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5zbWFsbC5qcyIsIndlYnBhY2s6Ly9yZXZlZGRpdF9yZWFsX3RpbWUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5zdHJpbmcuc3RhcnRzLXdpdGguanMiLCJ3ZWJwYWNrOi8vcmV2ZWRkaXRfcmVhbF90aW1lLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLnN0cmlrZS5qcyIsIndlYnBhY2s6Ly9yZXZlZGRpdF9yZWFsX3RpbWUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5zdHJpbmcuc3ViLmpzIiwid2VicGFjazovL3JldmVkZGl0X3JlYWxfdGltZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5zdXAuanMiLCJ3ZWJwYWNrOi8vcmV2ZWRkaXRfcmVhbF90aW1lLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLnRyaW0uanMiLCJ3ZWJwYWNrOi8vcmV2ZWRkaXRfcmVhbF90aW1lLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3ltYm9sLmpzIiwid2VicGFjazovL3JldmVkZGl0X3JlYWxfdGltZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnR5cGVkLmFycmF5LWJ1ZmZlci5qcyIsIndlYnBhY2s6Ly9yZXZlZGRpdF9yZWFsX3RpbWUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi50eXBlZC5kYXRhLXZpZXcuanMiLCJ3ZWJwYWNrOi8vcmV2ZWRkaXRfcmVhbF90aW1lLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYudHlwZWQuZmxvYXQzMi1hcnJheS5qcyIsIndlYnBhY2s6Ly9yZXZlZGRpdF9yZWFsX3RpbWUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi50eXBlZC5mbG9hdDY0LWFycmF5LmpzIiwid2VicGFjazovL3JldmVkZGl0X3JlYWxfdGltZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnR5cGVkLmludDE2LWFycmF5LmpzIiwid2VicGFjazovL3JldmVkZGl0X3JlYWxfdGltZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnR5cGVkLmludDMyLWFycmF5LmpzIiwid2VicGFjazovL3JldmVkZGl0X3JlYWxfdGltZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnR5cGVkLmludDgtYXJyYXkuanMiLCJ3ZWJwYWNrOi8vcmV2ZWRkaXRfcmVhbF90aW1lLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYudHlwZWQudWludDE2LWFycmF5LmpzIiwid2VicGFjazovL3JldmVkZGl0X3JlYWxfdGltZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnR5cGVkLnVpbnQzMi1hcnJheS5qcyIsIndlYnBhY2s6Ly9yZXZlZGRpdF9yZWFsX3RpbWUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi50eXBlZC51aW50OC1hcnJheS5qcyIsIndlYnBhY2s6Ly9yZXZlZGRpdF9yZWFsX3RpbWUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi50eXBlZC51aW50OC1jbGFtcGVkLWFycmF5LmpzIiwid2VicGFjazovL3JldmVkZGl0X3JlYWxfdGltZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LndlYWstbWFwLmpzIiwid2VicGFjazovL3JldmVkZGl0X3JlYWxfdGltZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LndlYWstc2V0LmpzIiwid2VicGFjazovL3JldmVkZGl0X3JlYWxfdGltZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3LmFycmF5LmZsYXQtbWFwLmpzIiwid2VicGFjazovL3JldmVkZGl0X3JlYWxfdGltZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3LmFycmF5LmluY2x1ZGVzLmpzIiwid2VicGFjazovL3JldmVkZGl0X3JlYWxfdGltZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3Lm9iamVjdC5lbnRyaWVzLmpzIiwid2VicGFjazovL3JldmVkZGl0X3JlYWxfdGltZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3Lm9iamVjdC5nZXQtb3duLXByb3BlcnR5LWRlc2NyaXB0b3JzLmpzIiwid2VicGFjazovL3JldmVkZGl0X3JlYWxfdGltZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3Lm9iamVjdC52YWx1ZXMuanMiLCJ3ZWJwYWNrOi8vcmV2ZWRkaXRfcmVhbF90aW1lLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcucHJvbWlzZS5maW5hbGx5LmpzIiwid2VicGFjazovL3JldmVkZGl0X3JlYWxfdGltZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3LnN0cmluZy5wYWQtZW5kLmpzIiwid2VicGFjazovL3JldmVkZGl0X3JlYWxfdGltZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3LnN0cmluZy5wYWQtc3RhcnQuanMiLCJ3ZWJwYWNrOi8vcmV2ZWRkaXRfcmVhbF90aW1lLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcuc3RyaW5nLnRyaW0tbGVmdC5qcyIsIndlYnBhY2s6Ly9yZXZlZGRpdF9yZWFsX3RpbWUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5zdHJpbmcudHJpbS1yaWdodC5qcyIsIndlYnBhY2s6Ly9yZXZlZGRpdF9yZWFsX3RpbWUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5zeW1ib2wuYXN5bmMtaXRlcmF0b3IuanMiLCJ3ZWJwYWNrOi8vcmV2ZWRkaXRfcmVhbF90aW1lLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy93ZWIuZG9tLml0ZXJhYmxlLmpzIiwid2VicGFjazovL3JldmVkZGl0X3JlYWxfdGltZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvd2ViLmltbWVkaWF0ZS5qcyIsIndlYnBhY2s6Ly9yZXZlZGRpdF9yZWFsX3RpbWUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL3dlYi50aW1lcnMuanMiLCJ3ZWJwYWNrOi8vcmV2ZWRkaXRfcmVhbF90aW1lLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvd2ViL2luZGV4LmpzIiwid2VicGFjazovL3JldmVkZGl0X3JlYWxfdGltZS8uL25vZGVfbW9kdWxlcy9yZWdlbmVyYXRvci1ydW50aW1lL3J1bnRpbWUuanMiLCJ3ZWJwYWNrOi8vcmV2ZWRkaXRfcmVhbF90aW1lLy4vbm9kZV9tb2R1bGVzL3dlYmV4dGVuc2lvbi1wb2x5ZmlsbC9kaXN0L2Jyb3dzZXItcG9seWZpbGwuanMiLCJ3ZWJwYWNrOi8vcmV2ZWRkaXRfcmVhbF90aW1lLy4vc3JjL3NyYy9jb21tb24uanMiLCJ3ZWJwYWNrOi8vcmV2ZWRkaXRfcmVhbF90aW1lLy4vc3JjL3NyYy9tb25pdG9yaW5nLmpzIiwid2VicGFjazovL3JldmVkZGl0X3JlYWxfdGltZS8uL3NyYy9zcmMvY29udGVudC1jb21tb24uanMiLCJ3ZWJwYWNrOi8vcmV2ZWRkaXRfcmVhbF90aW1lLy4vc3JjL3NyYy9jb250ZW50LXJlZGRpdC5qcyIsIndlYnBhY2s6Ly9yZXZlZGRpdF9yZWFsX3RpbWUvLi9zcmMvc3JjL2NvbnRlbnQtcmV2ZGRpdC5qcyIsIndlYnBhY2s6Ly9yZXZlZGRpdF9yZWFsX3RpbWUvLi9zcmMvc3JjL3JlcXVlc3RzLmpzIiwid2VicGFjazovL3JldmVkZGl0X3JlYWxfdGltZS8uL3NyYy9zcmMvc3RvcmFnZS5qcyIsIndlYnBhY2s6Ly9yZXZlZGRpdF9yZWFsX3RpbWUvd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vcmV2ZWRkaXRfcmVhbF90aW1lL3dlYnBhY2svcnVudGltZS9kZWZpbmUgcHJvcGVydHkgZ2V0dGVycyIsIndlYnBhY2s6Ly9yZXZlZGRpdF9yZWFsX3RpbWUvd2VicGFjay9ydW50aW1lL2hhc093blByb3BlcnR5IHNob3J0aGFuZCIsIndlYnBhY2s6Ly9yZXZlZGRpdF9yZWFsX3RpbWUvLi9ub2RlX21vZHVsZXMvQGJhYmVsL3BvbHlmaWxsL2xpYi9pbmRleC5qcyIsIndlYnBhY2s6Ly9yZXZlZGRpdF9yZWFsX3RpbWUvLi9zcmMvc3JjL2NvbnRlbnQuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbnJlcXVpcmUoXCJjb3JlLWpzL2VzNlwiKTtcblxucmVxdWlyZShcImNvcmUtanMvZm4vYXJyYXkvaW5jbHVkZXNcIik7XG5cbnJlcXVpcmUoXCJjb3JlLWpzL2ZuL2FycmF5L2ZsYXQtbWFwXCIpO1xuXG5yZXF1aXJlKFwiY29yZS1qcy9mbi9zdHJpbmcvcGFkLXN0YXJ0XCIpO1xuXG5yZXF1aXJlKFwiY29yZS1qcy9mbi9zdHJpbmcvcGFkLWVuZFwiKTtcblxucmVxdWlyZShcImNvcmUtanMvZm4vc3RyaW5nL3RyaW0tc3RhcnRcIik7XG5cbnJlcXVpcmUoXCJjb3JlLWpzL2ZuL3N0cmluZy90cmltLWVuZFwiKTtcblxucmVxdWlyZShcImNvcmUtanMvZm4vc3ltYm9sL2FzeW5jLWl0ZXJhdG9yXCIpO1xuXG5yZXF1aXJlKFwiY29yZS1qcy9mbi9vYmplY3QvZ2V0LW93bi1wcm9wZXJ0eS1kZXNjcmlwdG9yc1wiKTtcblxucmVxdWlyZShcImNvcmUtanMvZm4vb2JqZWN0L3ZhbHVlc1wiKTtcblxucmVxdWlyZShcImNvcmUtanMvZm4vb2JqZWN0L2VudHJpZXNcIik7XG5cbnJlcXVpcmUoXCJjb3JlLWpzL2ZuL3Byb21pc2UvZmluYWxseVwiKTtcblxucmVxdWlyZShcImNvcmUtanMvd2ViXCIpO1xuXG5yZXF1aXJlKFwicmVnZW5lcmF0b3ItcnVudGltZS9ydW50aW1lXCIpOyIsInJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LnN5bWJvbCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYub2JqZWN0LmNyZWF0ZScpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYub2JqZWN0LmRlZmluZS1wcm9wZXJ0eScpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYub2JqZWN0LmRlZmluZS1wcm9wZXJ0aWVzJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5vYmplY3QuZ2V0LW93bi1wcm9wZXJ0eS1kZXNjcmlwdG9yJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5vYmplY3QuZ2V0LXByb3RvdHlwZS1vZicpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYub2JqZWN0LmtleXMnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2Lm9iamVjdC5nZXQtb3duLXByb3BlcnR5LW5hbWVzJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5vYmplY3QuZnJlZXplJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5vYmplY3Quc2VhbCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYub2JqZWN0LnByZXZlbnQtZXh0ZW5zaW9ucycpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYub2JqZWN0LmlzLWZyb3plbicpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYub2JqZWN0LmlzLXNlYWxlZCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYub2JqZWN0LmlzLWV4dGVuc2libGUnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2Lm9iamVjdC5hc3NpZ24nKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2Lm9iamVjdC5pcycpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYub2JqZWN0LnNldC1wcm90b3R5cGUtb2YnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2Lm9iamVjdC50by1zdHJpbmcnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LmZ1bmN0aW9uLmJpbmQnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LmZ1bmN0aW9uLm5hbWUnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LmZ1bmN0aW9uLmhhcy1pbnN0YW5jZScpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYucGFyc2UtaW50Jyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5wYXJzZS1mbG9hdCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYubnVtYmVyLmNvbnN0cnVjdG9yJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5udW1iZXIudG8tZml4ZWQnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2Lm51bWJlci50by1wcmVjaXNpb24nKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2Lm51bWJlci5lcHNpbG9uJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5udW1iZXIuaXMtZmluaXRlJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5udW1iZXIuaXMtaW50ZWdlcicpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYubnVtYmVyLmlzLW5hbicpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYubnVtYmVyLmlzLXNhZmUtaW50ZWdlcicpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYubnVtYmVyLm1heC1zYWZlLWludGVnZXInKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2Lm51bWJlci5taW4tc2FmZS1pbnRlZ2VyJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5udW1iZXIucGFyc2UtZmxvYXQnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2Lm51bWJlci5wYXJzZS1pbnQnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2Lm1hdGguYWNvc2gnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2Lm1hdGguYXNpbmgnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2Lm1hdGguYXRhbmgnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2Lm1hdGguY2JydCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYubWF0aC5jbHozMicpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYubWF0aC5jb3NoJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5tYXRoLmV4cG0xJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5tYXRoLmZyb3VuZCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYubWF0aC5oeXBvdCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYubWF0aC5pbXVsJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5tYXRoLmxvZzEwJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5tYXRoLmxvZzFwJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5tYXRoLmxvZzInKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2Lm1hdGguc2lnbicpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYubWF0aC5zaW5oJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5tYXRoLnRhbmgnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2Lm1hdGgudHJ1bmMnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LnN0cmluZy5mcm9tLWNvZGUtcG9pbnQnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LnN0cmluZy5yYXcnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LnN0cmluZy50cmltJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5zdHJpbmcuaXRlcmF0b3InKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LnN0cmluZy5jb2RlLXBvaW50LWF0Jyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5zdHJpbmcuZW5kcy13aXRoJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5zdHJpbmcuaW5jbHVkZXMnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LnN0cmluZy5yZXBlYXQnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LnN0cmluZy5zdGFydHMtd2l0aCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYuc3RyaW5nLmFuY2hvcicpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYuc3RyaW5nLmJpZycpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYuc3RyaW5nLmJsaW5rJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5zdHJpbmcuYm9sZCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYuc3RyaW5nLmZpeGVkJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5zdHJpbmcuZm9udGNvbG9yJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5zdHJpbmcuZm9udHNpemUnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LnN0cmluZy5pdGFsaWNzJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5zdHJpbmcubGluaycpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYuc3RyaW5nLnNtYWxsJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5zdHJpbmcuc3RyaWtlJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5zdHJpbmcuc3ViJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5zdHJpbmcuc3VwJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5kYXRlLm5vdycpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYuZGF0ZS50by1qc29uJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5kYXRlLnRvLWlzby1zdHJpbmcnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LmRhdGUudG8tc3RyaW5nJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5kYXRlLnRvLXByaW1pdGl2ZScpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYuYXJyYXkuaXMtYXJyYXknKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LmFycmF5LmZyb20nKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LmFycmF5Lm9mJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5hcnJheS5qb2luJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5hcnJheS5zbGljZScpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYuYXJyYXkuc29ydCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYuYXJyYXkuZm9yLWVhY2gnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LmFycmF5Lm1hcCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYuYXJyYXkuZmlsdGVyJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5hcnJheS5zb21lJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5hcnJheS5ldmVyeScpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYuYXJyYXkucmVkdWNlJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5hcnJheS5yZWR1Y2UtcmlnaHQnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LmFycmF5LmluZGV4LW9mJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5hcnJheS5sYXN0LWluZGV4LW9mJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5hcnJheS5jb3B5LXdpdGhpbicpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYuYXJyYXkuZmlsbCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYuYXJyYXkuZmluZCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYuYXJyYXkuZmluZC1pbmRleCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYuYXJyYXkuc3BlY2llcycpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYuYXJyYXkuaXRlcmF0b3InKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LnJlZ2V4cC5jb25zdHJ1Y3RvcicpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYucmVnZXhwLmV4ZWMnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LnJlZ2V4cC50by1zdHJpbmcnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LnJlZ2V4cC5mbGFncycpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYucmVnZXhwLm1hdGNoJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5yZWdleHAucmVwbGFjZScpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYucmVnZXhwLnNlYXJjaCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYucmVnZXhwLnNwbGl0Jyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5wcm9taXNlJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5tYXAnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LnNldCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYud2Vhay1tYXAnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LndlYWstc2V0Jyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi50eXBlZC5hcnJheS1idWZmZXInKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LnR5cGVkLmRhdGEtdmlldycpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYudHlwZWQuaW50OC1hcnJheScpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYudHlwZWQudWludDgtYXJyYXknKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LnR5cGVkLnVpbnQ4LWNsYW1wZWQtYXJyYXknKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LnR5cGVkLmludDE2LWFycmF5Jyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi50eXBlZC51aW50MTYtYXJyYXknKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LnR5cGVkLmludDMyLWFycmF5Jyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi50eXBlZC51aW50MzItYXJyYXknKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LnR5cGVkLmZsb2F0MzItYXJyYXknKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LnR5cGVkLmZsb2F0NjQtYXJyYXknKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LnJlZmxlY3QuYXBwbHknKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LnJlZmxlY3QuY29uc3RydWN0Jyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5yZWZsZWN0LmRlZmluZS1wcm9wZXJ0eScpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYucmVmbGVjdC5kZWxldGUtcHJvcGVydHknKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LnJlZmxlY3QuZW51bWVyYXRlJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5yZWZsZWN0LmdldCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYucmVmbGVjdC5nZXQtb3duLXByb3BlcnR5LWRlc2NyaXB0b3InKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LnJlZmxlY3QuZ2V0LXByb3RvdHlwZS1vZicpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYucmVmbGVjdC5oYXMnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LnJlZmxlY3QuaXMtZXh0ZW5zaWJsZScpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYucmVmbGVjdC5vd24ta2V5cycpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYucmVmbGVjdC5wcmV2ZW50LWV4dGVuc2lvbnMnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LnJlZmxlY3Quc2V0Jyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5yZWZsZWN0LnNldC1wcm90b3R5cGUtb2YnKTtcbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi4vbW9kdWxlcy9fY29yZScpO1xuIiwicmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9lczcuYXJyYXkuZmxhdC1tYXAnKTtcbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9fY29yZScpLkFycmF5LmZsYXRNYXA7XG4iLCJyZXF1aXJlKCcuLi8uLi9tb2R1bGVzL2VzNy5hcnJheS5pbmNsdWRlcycpO1xubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuLi8uLi9tb2R1bGVzL19jb3JlJykuQXJyYXkuaW5jbHVkZXM7XG4iLCJyZXF1aXJlKCcuLi8uLi9tb2R1bGVzL2VzNy5vYmplY3QuZW50cmllcycpO1xubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuLi8uLi9tb2R1bGVzL19jb3JlJykuT2JqZWN0LmVudHJpZXM7XG4iLCJyZXF1aXJlKCcuLi8uLi9tb2R1bGVzL2VzNy5vYmplY3QuZ2V0LW93bi1wcm9wZXJ0eS1kZXNjcmlwdG9ycycpO1xubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuLi8uLi9tb2R1bGVzL19jb3JlJykuT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnM7XG4iLCJyZXF1aXJlKCcuLi8uLi9tb2R1bGVzL2VzNy5vYmplY3QudmFsdWVzJyk7XG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4uLy4uL21vZHVsZXMvX2NvcmUnKS5PYmplY3QudmFsdWVzO1xuIiwiJ3VzZSBzdHJpY3QnO1xucmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9lczYucHJvbWlzZScpO1xucmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9lczcucHJvbWlzZS5maW5hbGx5Jyk7XG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4uLy4uL21vZHVsZXMvX2NvcmUnKS5Qcm9taXNlWydmaW5hbGx5J107XG4iLCJyZXF1aXJlKCcuLi8uLi9tb2R1bGVzL2VzNy5zdHJpbmcucGFkLWVuZCcpO1xubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuLi8uLi9tb2R1bGVzL19jb3JlJykuU3RyaW5nLnBhZEVuZDtcbiIsInJlcXVpcmUoJy4uLy4uL21vZHVsZXMvZXM3LnN0cmluZy5wYWQtc3RhcnQnKTtcbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9fY29yZScpLlN0cmluZy5wYWRTdGFydDtcbiIsInJlcXVpcmUoJy4uLy4uL21vZHVsZXMvZXM3LnN0cmluZy50cmltLXJpZ2h0Jyk7XG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4uLy4uL21vZHVsZXMvX2NvcmUnKS5TdHJpbmcudHJpbVJpZ2h0O1xuIiwicmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9lczcuc3RyaW5nLnRyaW0tbGVmdCcpO1xubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuLi8uLi9tb2R1bGVzL19jb3JlJykuU3RyaW5nLnRyaW1MZWZ0O1xuIiwicmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9lczcuc3ltYm9sLmFzeW5jLWl0ZXJhdG9yJyk7XG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4uLy4uL21vZHVsZXMvX3drcy1leHQnKS5mKCdhc3luY0l0ZXJhdG9yJyk7XG4iLCJyZXF1aXJlKCcuLi9tb2R1bGVzL2VzNy5nbG9iYWwnKTtcbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi4vbW9kdWxlcy9fY29yZScpLmdsb2JhbDtcbiIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIGlmICh0eXBlb2YgaXQgIT0gJ2Z1bmN0aW9uJykgdGhyb3cgVHlwZUVycm9yKGl0ICsgJyBpcyBub3QgYSBmdW5jdGlvbiEnKTtcbiAgcmV0dXJuIGl0O1xufTtcbiIsInZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgaWYgKCFpc09iamVjdChpdCkpIHRocm93IFR5cGVFcnJvcihpdCArICcgaXMgbm90IGFuIG9iamVjdCEnKTtcbiAgcmV0dXJuIGl0O1xufTtcbiIsInZhciBjb3JlID0gbW9kdWxlLmV4cG9ydHMgPSB7IHZlcnNpb246ICcyLjYuMTInIH07XG5pZiAodHlwZW9mIF9fZSA9PSAnbnVtYmVyJykgX19lID0gY29yZTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bmRlZlxuIiwiLy8gb3B0aW9uYWwgLyBzaW1wbGUgY29udGV4dCBiaW5kaW5nXG52YXIgYUZ1bmN0aW9uID0gcmVxdWlyZSgnLi9fYS1mdW5jdGlvbicpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoZm4sIHRoYXQsIGxlbmd0aCkge1xuICBhRnVuY3Rpb24oZm4pO1xuICBpZiAodGhhdCA9PT0gdW5kZWZpbmVkKSByZXR1cm4gZm47XG4gIHN3aXRjaCAobGVuZ3RoKSB7XG4gICAgY2FzZSAxOiByZXR1cm4gZnVuY3Rpb24gKGEpIHtcbiAgICAgIHJldHVybiBmbi5jYWxsKHRoYXQsIGEpO1xuICAgIH07XG4gICAgY2FzZSAyOiByZXR1cm4gZnVuY3Rpb24gKGEsIGIpIHtcbiAgICAgIHJldHVybiBmbi5jYWxsKHRoYXQsIGEsIGIpO1xuICAgIH07XG4gICAgY2FzZSAzOiByZXR1cm4gZnVuY3Rpb24gKGEsIGIsIGMpIHtcbiAgICAgIHJldHVybiBmbi5jYWxsKHRoYXQsIGEsIGIsIGMpO1xuICAgIH07XG4gIH1cbiAgcmV0dXJuIGZ1bmN0aW9uICgvKiAuLi5hcmdzICovKSB7XG4gICAgcmV0dXJuIGZuLmFwcGx5KHRoYXQsIGFyZ3VtZW50cyk7XG4gIH07XG59O1xuIiwiLy8gVGhhbmsncyBJRTggZm9yIGhpcyBmdW5ueSBkZWZpbmVQcm9wZXJ0eVxubW9kdWxlLmV4cG9ydHMgPSAhcmVxdWlyZSgnLi9fZmFpbHMnKShmdW5jdGlvbiAoKSB7XG4gIHJldHVybiBPYmplY3QuZGVmaW5lUHJvcGVydHkoe30sICdhJywgeyBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIDc7IH0gfSkuYSAhPSA3O1xufSk7XG4iLCJ2YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbnZhciBkb2N1bWVudCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpLmRvY3VtZW50O1xuLy8gdHlwZW9mIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQgaXMgJ29iamVjdCcgaW4gb2xkIElFXG52YXIgaXMgPSBpc09iamVjdChkb2N1bWVudCkgJiYgaXNPYmplY3QoZG9jdW1lbnQuY3JlYXRlRWxlbWVudCk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gaXMgPyBkb2N1bWVudC5jcmVhdGVFbGVtZW50KGl0KSA6IHt9O1xufTtcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuL19nbG9iYWwnKTtcbnZhciBjb3JlID0gcmVxdWlyZSgnLi9fY29yZScpO1xudmFyIGN0eCA9IHJlcXVpcmUoJy4vX2N0eCcpO1xudmFyIGhpZGUgPSByZXF1aXJlKCcuL19oaWRlJyk7XG52YXIgaGFzID0gcmVxdWlyZSgnLi9faGFzJyk7XG52YXIgUFJPVE9UWVBFID0gJ3Byb3RvdHlwZSc7XG5cbnZhciAkZXhwb3J0ID0gZnVuY3Rpb24gKHR5cGUsIG5hbWUsIHNvdXJjZSkge1xuICB2YXIgSVNfRk9SQ0VEID0gdHlwZSAmICRleHBvcnQuRjtcbiAgdmFyIElTX0dMT0JBTCA9IHR5cGUgJiAkZXhwb3J0Lkc7XG4gIHZhciBJU19TVEFUSUMgPSB0eXBlICYgJGV4cG9ydC5TO1xuICB2YXIgSVNfUFJPVE8gPSB0eXBlICYgJGV4cG9ydC5QO1xuICB2YXIgSVNfQklORCA9IHR5cGUgJiAkZXhwb3J0LkI7XG4gIHZhciBJU19XUkFQID0gdHlwZSAmICRleHBvcnQuVztcbiAgdmFyIGV4cG9ydHMgPSBJU19HTE9CQUwgPyBjb3JlIDogY29yZVtuYW1lXSB8fCAoY29yZVtuYW1lXSA9IHt9KTtcbiAgdmFyIGV4cFByb3RvID0gZXhwb3J0c1tQUk9UT1RZUEVdO1xuICB2YXIgdGFyZ2V0ID0gSVNfR0xPQkFMID8gZ2xvYmFsIDogSVNfU1RBVElDID8gZ2xvYmFsW25hbWVdIDogKGdsb2JhbFtuYW1lXSB8fCB7fSlbUFJPVE9UWVBFXTtcbiAgdmFyIGtleSwgb3duLCBvdXQ7XG4gIGlmIChJU19HTE9CQUwpIHNvdXJjZSA9IG5hbWU7XG4gIGZvciAoa2V5IGluIHNvdXJjZSkge1xuICAgIC8vIGNvbnRhaW5zIGluIG5hdGl2ZVxuICAgIG93biA9ICFJU19GT1JDRUQgJiYgdGFyZ2V0ICYmIHRhcmdldFtrZXldICE9PSB1bmRlZmluZWQ7XG4gICAgaWYgKG93biAmJiBoYXMoZXhwb3J0cywga2V5KSkgY29udGludWU7XG4gICAgLy8gZXhwb3J0IG5hdGl2ZSBvciBwYXNzZWRcbiAgICBvdXQgPSBvd24gPyB0YXJnZXRba2V5XSA6IHNvdXJjZVtrZXldO1xuICAgIC8vIHByZXZlbnQgZ2xvYmFsIHBvbGx1dGlvbiBmb3IgbmFtZXNwYWNlc1xuICAgIGV4cG9ydHNba2V5XSA9IElTX0dMT0JBTCAmJiB0eXBlb2YgdGFyZ2V0W2tleV0gIT0gJ2Z1bmN0aW9uJyA/IHNvdXJjZVtrZXldXG4gICAgLy8gYmluZCB0aW1lcnMgdG8gZ2xvYmFsIGZvciBjYWxsIGZyb20gZXhwb3J0IGNvbnRleHRcbiAgICA6IElTX0JJTkQgJiYgb3duID8gY3R4KG91dCwgZ2xvYmFsKVxuICAgIC8vIHdyYXAgZ2xvYmFsIGNvbnN0cnVjdG9ycyBmb3IgcHJldmVudCBjaGFuZ2UgdGhlbSBpbiBsaWJyYXJ5XG4gICAgOiBJU19XUkFQICYmIHRhcmdldFtrZXldID09IG91dCA/IChmdW5jdGlvbiAoQykge1xuICAgICAgdmFyIEYgPSBmdW5jdGlvbiAoYSwgYiwgYykge1xuICAgICAgICBpZiAodGhpcyBpbnN0YW5jZW9mIEMpIHtcbiAgICAgICAgICBzd2l0Y2ggKGFyZ3VtZW50cy5sZW5ndGgpIHtcbiAgICAgICAgICAgIGNhc2UgMDogcmV0dXJuIG5ldyBDKCk7XG4gICAgICAgICAgICBjYXNlIDE6IHJldHVybiBuZXcgQyhhKTtcbiAgICAgICAgICAgIGNhc2UgMjogcmV0dXJuIG5ldyBDKGEsIGIpO1xuICAgICAgICAgIH0gcmV0dXJuIG5ldyBDKGEsIGIsIGMpO1xuICAgICAgICB9IHJldHVybiBDLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgICB9O1xuICAgICAgRltQUk9UT1RZUEVdID0gQ1tQUk9UT1RZUEVdO1xuICAgICAgcmV0dXJuIEY7XG4gICAgLy8gbWFrZSBzdGF0aWMgdmVyc2lvbnMgZm9yIHByb3RvdHlwZSBtZXRob2RzXG4gICAgfSkob3V0KSA6IElTX1BST1RPICYmIHR5cGVvZiBvdXQgPT0gJ2Z1bmN0aW9uJyA/IGN0eChGdW5jdGlvbi5jYWxsLCBvdXQpIDogb3V0O1xuICAgIC8vIGV4cG9ydCBwcm90byBtZXRob2RzIHRvIGNvcmUuJUNPTlNUUlVDVE9SJS5tZXRob2RzLiVOQU1FJVxuICAgIGlmIChJU19QUk9UTykge1xuICAgICAgKGV4cG9ydHMudmlydHVhbCB8fCAoZXhwb3J0cy52aXJ0dWFsID0ge30pKVtrZXldID0gb3V0O1xuICAgICAgLy8gZXhwb3J0IHByb3RvIG1ldGhvZHMgdG8gY29yZS4lQ09OU1RSVUNUT1IlLnByb3RvdHlwZS4lTkFNRSVcbiAgICAgIGlmICh0eXBlICYgJGV4cG9ydC5SICYmIGV4cFByb3RvICYmICFleHBQcm90b1trZXldKSBoaWRlKGV4cFByb3RvLCBrZXksIG91dCk7XG4gICAgfVxuICB9XG59O1xuLy8gdHlwZSBiaXRtYXBcbiRleHBvcnQuRiA9IDE7ICAgLy8gZm9yY2VkXG4kZXhwb3J0LkcgPSAyOyAgIC8vIGdsb2JhbFxuJGV4cG9ydC5TID0gNDsgICAvLyBzdGF0aWNcbiRleHBvcnQuUCA9IDg7ICAgLy8gcHJvdG9cbiRleHBvcnQuQiA9IDE2OyAgLy8gYmluZFxuJGV4cG9ydC5XID0gMzI7ICAvLyB3cmFwXG4kZXhwb3J0LlUgPSA2NDsgIC8vIHNhZmVcbiRleHBvcnQuUiA9IDEyODsgLy8gcmVhbCBwcm90byBtZXRob2QgZm9yIGBsaWJyYXJ5YFxubW9kdWxlLmV4cG9ydHMgPSAkZXhwb3J0O1xuIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoZXhlYykge1xuICB0cnkge1xuICAgIHJldHVybiAhIWV4ZWMoKTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG59O1xuIiwiLy8gaHR0cHM6Ly9naXRodWIuY29tL3psb2lyb2NrL2NvcmUtanMvaXNzdWVzLzg2I2lzc3VlY29tbWVudC0xMTU3NTkwMjhcbnZhciBnbG9iYWwgPSBtb2R1bGUuZXhwb3J0cyA9IHR5cGVvZiB3aW5kb3cgIT0gJ3VuZGVmaW5lZCcgJiYgd2luZG93Lk1hdGggPT0gTWF0aFxuICA/IHdpbmRvdyA6IHR5cGVvZiBzZWxmICE9ICd1bmRlZmluZWQnICYmIHNlbGYuTWF0aCA9PSBNYXRoID8gc2VsZlxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tbmV3LWZ1bmNcbiAgOiBGdW5jdGlvbigncmV0dXJuIHRoaXMnKSgpO1xuaWYgKHR5cGVvZiBfX2cgPT0gJ251bWJlcicpIF9fZyA9IGdsb2JhbDsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bmRlZlxuIiwidmFyIGhhc093blByb3BlcnR5ID0ge30uaGFzT3duUHJvcGVydHk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCwga2V5KSB7XG4gIHJldHVybiBoYXNPd25Qcm9wZXJ0eS5jYWxsKGl0LCBrZXkpO1xufTtcbiIsInZhciBkUCA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpO1xudmFyIGNyZWF0ZURlc2MgPSByZXF1aXJlKCcuL19wcm9wZXJ0eS1kZXNjJyk7XG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJykgPyBmdW5jdGlvbiAob2JqZWN0LCBrZXksIHZhbHVlKSB7XG4gIHJldHVybiBkUC5mKG9iamVjdCwga2V5LCBjcmVhdGVEZXNjKDEsIHZhbHVlKSk7XG59IDogZnVuY3Rpb24gKG9iamVjdCwga2V5LCB2YWx1ZSkge1xuICBvYmplY3Rba2V5XSA9IHZhbHVlO1xuICByZXR1cm4gb2JqZWN0O1xufTtcbiIsIm1vZHVsZS5leHBvcnRzID0gIXJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJykgJiYgIXJlcXVpcmUoJy4vX2ZhaWxzJykoZnVuY3Rpb24gKCkge1xuICByZXR1cm4gT2JqZWN0LmRlZmluZVByb3BlcnR5KHJlcXVpcmUoJy4vX2RvbS1jcmVhdGUnKSgnZGl2JyksICdhJywgeyBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIDc7IH0gfSkuYSAhPSA3O1xufSk7XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gdHlwZW9mIGl0ID09PSAnb2JqZWN0JyA/IGl0ICE9PSBudWxsIDogdHlwZW9mIGl0ID09PSAnZnVuY3Rpb24nO1xufTtcbiIsInZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIElFOF9ET01fREVGSU5FID0gcmVxdWlyZSgnLi9faWU4LWRvbS1kZWZpbmUnKTtcbnZhciB0b1ByaW1pdGl2ZSA9IHJlcXVpcmUoJy4vX3RvLXByaW1pdGl2ZScpO1xudmFyIGRQID0gT2JqZWN0LmRlZmluZVByb3BlcnR5O1xuXG5leHBvcnRzLmYgPSByZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpID8gT2JqZWN0LmRlZmluZVByb3BlcnR5IDogZnVuY3Rpb24gZGVmaW5lUHJvcGVydHkoTywgUCwgQXR0cmlidXRlcykge1xuICBhbk9iamVjdChPKTtcbiAgUCA9IHRvUHJpbWl0aXZlKFAsIHRydWUpO1xuICBhbk9iamVjdChBdHRyaWJ1dGVzKTtcbiAgaWYgKElFOF9ET01fREVGSU5FKSB0cnkge1xuICAgIHJldHVybiBkUChPLCBQLCBBdHRyaWJ1dGVzKTtcbiAgfSBjYXRjaCAoZSkgeyAvKiBlbXB0eSAqLyB9XG4gIGlmICgnZ2V0JyBpbiBBdHRyaWJ1dGVzIHx8ICdzZXQnIGluIEF0dHJpYnV0ZXMpIHRocm93IFR5cGVFcnJvcignQWNjZXNzb3JzIG5vdCBzdXBwb3J0ZWQhJyk7XG4gIGlmICgndmFsdWUnIGluIEF0dHJpYnV0ZXMpIE9bUF0gPSBBdHRyaWJ1dGVzLnZhbHVlO1xuICByZXR1cm4gTztcbn07XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChiaXRtYXAsIHZhbHVlKSB7XG4gIHJldHVybiB7XG4gICAgZW51bWVyYWJsZTogIShiaXRtYXAgJiAxKSxcbiAgICBjb25maWd1cmFibGU6ICEoYml0bWFwICYgMiksXG4gICAgd3JpdGFibGU6ICEoYml0bWFwICYgNCksXG4gICAgdmFsdWU6IHZhbHVlXG4gIH07XG59O1xuIiwiLy8gNy4xLjEgVG9QcmltaXRpdmUoaW5wdXQgWywgUHJlZmVycmVkVHlwZV0pXG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbi8vIGluc3RlYWQgb2YgdGhlIEVTNiBzcGVjIHZlcnNpb24sIHdlIGRpZG4ndCBpbXBsZW1lbnQgQEB0b1ByaW1pdGl2ZSBjYXNlXG4vLyBhbmQgdGhlIHNlY29uZCBhcmd1bWVudCAtIGZsYWcgLSBwcmVmZXJyZWQgdHlwZSBpcyBhIHN0cmluZ1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQsIFMpIHtcbiAgaWYgKCFpc09iamVjdChpdCkpIHJldHVybiBpdDtcbiAgdmFyIGZuLCB2YWw7XG4gIGlmIChTICYmIHR5cGVvZiAoZm4gPSBpdC50b1N0cmluZykgPT0gJ2Z1bmN0aW9uJyAmJiAhaXNPYmplY3QodmFsID0gZm4uY2FsbChpdCkpKSByZXR1cm4gdmFsO1xuICBpZiAodHlwZW9mIChmbiA9IGl0LnZhbHVlT2YpID09ICdmdW5jdGlvbicgJiYgIWlzT2JqZWN0KHZhbCA9IGZuLmNhbGwoaXQpKSkgcmV0dXJuIHZhbDtcbiAgaWYgKCFTICYmIHR5cGVvZiAoZm4gPSBpdC50b1N0cmluZykgPT0gJ2Z1bmN0aW9uJyAmJiAhaXNPYmplY3QodmFsID0gZm4uY2FsbChpdCkpKSByZXR1cm4gdmFsO1xuICB0aHJvdyBUeXBlRXJyb3IoXCJDYW4ndCBjb252ZXJ0IG9iamVjdCB0byBwcmltaXRpdmUgdmFsdWVcIik7XG59O1xuIiwiLy8gaHR0cHM6Ly9naXRodWIuY29tL3RjMzkvcHJvcG9zYWwtZ2xvYmFsXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuRywgeyBnbG9iYWw6IHJlcXVpcmUoJy4vX2dsb2JhbCcpIH0pO1xuIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgaWYgKHR5cGVvZiBpdCAhPSAnZnVuY3Rpb24nKSB0aHJvdyBUeXBlRXJyb3IoaXQgKyAnIGlzIG5vdCBhIGZ1bmN0aW9uIScpO1xuICByZXR1cm4gaXQ7XG59O1xuIiwidmFyIGNvZiA9IHJlcXVpcmUoJy4vX2NvZicpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQsIG1zZykge1xuICBpZiAodHlwZW9mIGl0ICE9ICdudW1iZXInICYmIGNvZihpdCkgIT0gJ051bWJlcicpIHRocm93IFR5cGVFcnJvcihtc2cpO1xuICByZXR1cm4gK2l0O1xufTtcbiIsIi8vIDIyLjEuMy4zMSBBcnJheS5wcm90b3R5cGVbQEB1bnNjb3BhYmxlc11cbnZhciBVTlNDT1BBQkxFUyA9IHJlcXVpcmUoJy4vX3drcycpKCd1bnNjb3BhYmxlcycpO1xudmFyIEFycmF5UHJvdG8gPSBBcnJheS5wcm90b3R5cGU7XG5pZiAoQXJyYXlQcm90b1tVTlNDT1BBQkxFU10gPT0gdW5kZWZpbmVkKSByZXF1aXJlKCcuL19oaWRlJykoQXJyYXlQcm90bywgVU5TQ09QQUJMRVMsIHt9KTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGtleSkge1xuICBBcnJheVByb3RvW1VOU0NPUEFCTEVTXVtrZXldID0gdHJ1ZTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgYXQgPSByZXF1aXJlKCcuL19zdHJpbmctYXQnKSh0cnVlKTtcblxuIC8vIGBBZHZhbmNlU3RyaW5nSW5kZXhgIGFic3RyYWN0IG9wZXJhdGlvblxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtYWR2YW5jZXN0cmluZ2luZGV4XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChTLCBpbmRleCwgdW5pY29kZSkge1xuICByZXR1cm4gaW5kZXggKyAodW5pY29kZSA/IGF0KFMsIGluZGV4KS5sZW5ndGggOiAxKTtcbn07XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCwgQ29uc3RydWN0b3IsIG5hbWUsIGZvcmJpZGRlbkZpZWxkKSB7XG4gIGlmICghKGl0IGluc3RhbmNlb2YgQ29uc3RydWN0b3IpIHx8IChmb3JiaWRkZW5GaWVsZCAhPT0gdW5kZWZpbmVkICYmIGZvcmJpZGRlbkZpZWxkIGluIGl0KSkge1xuICAgIHRocm93IFR5cGVFcnJvcihuYW1lICsgJzogaW5jb3JyZWN0IGludm9jYXRpb24hJyk7XG4gIH0gcmV0dXJuIGl0O1xufTtcbiIsInZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgaWYgKCFpc09iamVjdChpdCkpIHRocm93IFR5cGVFcnJvcihpdCArICcgaXMgbm90IGFuIG9iamVjdCEnKTtcbiAgcmV0dXJuIGl0O1xufTtcbiIsIi8vIDIyLjEuMy4zIEFycmF5LnByb3RvdHlwZS5jb3B5V2l0aGluKHRhcmdldCwgc3RhcnQsIGVuZCA9IHRoaXMubGVuZ3RoKVxuJ3VzZSBzdHJpY3QnO1xudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8tb2JqZWN0Jyk7XG52YXIgdG9BYnNvbHV0ZUluZGV4ID0gcmVxdWlyZSgnLi9fdG8tYWJzb2x1dGUtaW5kZXgnKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFtdLmNvcHlXaXRoaW4gfHwgZnVuY3Rpb24gY29weVdpdGhpbih0YXJnZXQgLyogPSAwICovLCBzdGFydCAvKiA9IDAsIGVuZCA9IEBsZW5ndGggKi8pIHtcbiAgdmFyIE8gPSB0b09iamVjdCh0aGlzKTtcbiAgdmFyIGxlbiA9IHRvTGVuZ3RoKE8ubGVuZ3RoKTtcbiAgdmFyIHRvID0gdG9BYnNvbHV0ZUluZGV4KHRhcmdldCwgbGVuKTtcbiAgdmFyIGZyb20gPSB0b0Fic29sdXRlSW5kZXgoc3RhcnQsIGxlbik7XG4gIHZhciBlbmQgPSBhcmd1bWVudHMubGVuZ3RoID4gMiA/IGFyZ3VtZW50c1syXSA6IHVuZGVmaW5lZDtcbiAgdmFyIGNvdW50ID0gTWF0aC5taW4oKGVuZCA9PT0gdW5kZWZpbmVkID8gbGVuIDogdG9BYnNvbHV0ZUluZGV4KGVuZCwgbGVuKSkgLSBmcm9tLCBsZW4gLSB0byk7XG4gIHZhciBpbmMgPSAxO1xuICBpZiAoZnJvbSA8IHRvICYmIHRvIDwgZnJvbSArIGNvdW50KSB7XG4gICAgaW5jID0gLTE7XG4gICAgZnJvbSArPSBjb3VudCAtIDE7XG4gICAgdG8gKz0gY291bnQgLSAxO1xuICB9XG4gIHdoaWxlIChjb3VudC0tID4gMCkge1xuICAgIGlmIChmcm9tIGluIE8pIE9bdG9dID0gT1tmcm9tXTtcbiAgICBlbHNlIGRlbGV0ZSBPW3RvXTtcbiAgICB0byArPSBpbmM7XG4gICAgZnJvbSArPSBpbmM7XG4gIH0gcmV0dXJuIE87XG59O1xuIiwiLy8gMjIuMS4zLjYgQXJyYXkucHJvdG90eXBlLmZpbGwodmFsdWUsIHN0YXJ0ID0gMCwgZW5kID0gdGhpcy5sZW5ndGgpXG4ndXNlIHN0cmljdCc7XG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuL190by1vYmplY3QnKTtcbnZhciB0b0Fic29sdXRlSW5kZXggPSByZXF1aXJlKCcuL190by1hYnNvbHV0ZS1pbmRleCcpO1xudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi9fdG8tbGVuZ3RoJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGZpbGwodmFsdWUgLyogLCBzdGFydCA9IDAsIGVuZCA9IEBsZW5ndGggKi8pIHtcbiAgdmFyIE8gPSB0b09iamVjdCh0aGlzKTtcbiAgdmFyIGxlbmd0aCA9IHRvTGVuZ3RoKE8ubGVuZ3RoKTtcbiAgdmFyIGFMZW4gPSBhcmd1bWVudHMubGVuZ3RoO1xuICB2YXIgaW5kZXggPSB0b0Fic29sdXRlSW5kZXgoYUxlbiA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQsIGxlbmd0aCk7XG4gIHZhciBlbmQgPSBhTGVuID4gMiA/IGFyZ3VtZW50c1syXSA6IHVuZGVmaW5lZDtcbiAgdmFyIGVuZFBvcyA9IGVuZCA9PT0gdW5kZWZpbmVkID8gbGVuZ3RoIDogdG9BYnNvbHV0ZUluZGV4KGVuZCwgbGVuZ3RoKTtcbiAgd2hpbGUgKGVuZFBvcyA+IGluZGV4KSBPW2luZGV4KytdID0gdmFsdWU7XG4gIHJldHVybiBPO1xufTtcbiIsIi8vIGZhbHNlIC0+IEFycmF5I2luZGV4T2Zcbi8vIHRydWUgIC0+IEFycmF5I2luY2x1ZGVzXG52YXIgdG9JT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8taW9iamVjdCcpO1xudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi9fdG8tbGVuZ3RoJyk7XG52YXIgdG9BYnNvbHV0ZUluZGV4ID0gcmVxdWlyZSgnLi9fdG8tYWJzb2x1dGUtaW5kZXgnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKElTX0lOQ0xVREVTKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoJHRoaXMsIGVsLCBmcm9tSW5kZXgpIHtcbiAgICB2YXIgTyA9IHRvSU9iamVjdCgkdGhpcyk7XG4gICAgdmFyIGxlbmd0aCA9IHRvTGVuZ3RoKE8ubGVuZ3RoKTtcbiAgICB2YXIgaW5kZXggPSB0b0Fic29sdXRlSW5kZXgoZnJvbUluZGV4LCBsZW5ndGgpO1xuICAgIHZhciB2YWx1ZTtcbiAgICAvLyBBcnJheSNpbmNsdWRlcyB1c2VzIFNhbWVWYWx1ZVplcm8gZXF1YWxpdHkgYWxnb3JpdGhtXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXNlbGYtY29tcGFyZVxuICAgIGlmIChJU19JTkNMVURFUyAmJiBlbCAhPSBlbCkgd2hpbGUgKGxlbmd0aCA+IGluZGV4KSB7XG4gICAgICB2YWx1ZSA9IE9baW5kZXgrK107XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tc2VsZi1jb21wYXJlXG4gICAgICBpZiAodmFsdWUgIT0gdmFsdWUpIHJldHVybiB0cnVlO1xuICAgIC8vIEFycmF5I2luZGV4T2YgaWdub3JlcyBob2xlcywgQXJyYXkjaW5jbHVkZXMgLSBub3RcbiAgICB9IGVsc2UgZm9yICg7bGVuZ3RoID4gaW5kZXg7IGluZGV4KyspIGlmIChJU19JTkNMVURFUyB8fCBpbmRleCBpbiBPKSB7XG4gICAgICBpZiAoT1tpbmRleF0gPT09IGVsKSByZXR1cm4gSVNfSU5DTFVERVMgfHwgaW5kZXggfHwgMDtcbiAgICB9IHJldHVybiAhSVNfSU5DTFVERVMgJiYgLTE7XG4gIH07XG59O1xuIiwiLy8gMCAtPiBBcnJheSNmb3JFYWNoXG4vLyAxIC0+IEFycmF5I21hcFxuLy8gMiAtPiBBcnJheSNmaWx0ZXJcbi8vIDMgLT4gQXJyYXkjc29tZVxuLy8gNCAtPiBBcnJheSNldmVyeVxuLy8gNSAtPiBBcnJheSNmaW5kXG4vLyA2IC0+IEFycmF5I2ZpbmRJbmRleFxudmFyIGN0eCA9IHJlcXVpcmUoJy4vX2N0eCcpO1xudmFyIElPYmplY3QgPSByZXF1aXJlKCcuL19pb2JqZWN0Jyk7XG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuL190by1vYmplY3QnKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpO1xudmFyIGFzYyA9IHJlcXVpcmUoJy4vX2FycmF5LXNwZWNpZXMtY3JlYXRlJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChUWVBFLCAkY3JlYXRlKSB7XG4gIHZhciBJU19NQVAgPSBUWVBFID09IDE7XG4gIHZhciBJU19GSUxURVIgPSBUWVBFID09IDI7XG4gIHZhciBJU19TT01FID0gVFlQRSA9PSAzO1xuICB2YXIgSVNfRVZFUlkgPSBUWVBFID09IDQ7XG4gIHZhciBJU19GSU5EX0lOREVYID0gVFlQRSA9PSA2O1xuICB2YXIgTk9fSE9MRVMgPSBUWVBFID09IDUgfHwgSVNfRklORF9JTkRFWDtcbiAgdmFyIGNyZWF0ZSA9ICRjcmVhdGUgfHwgYXNjO1xuICByZXR1cm4gZnVuY3Rpb24gKCR0aGlzLCBjYWxsYmFja2ZuLCB0aGF0KSB7XG4gICAgdmFyIE8gPSB0b09iamVjdCgkdGhpcyk7XG4gICAgdmFyIHNlbGYgPSBJT2JqZWN0KE8pO1xuICAgIHZhciBmID0gY3R4KGNhbGxiYWNrZm4sIHRoYXQsIDMpO1xuICAgIHZhciBsZW5ndGggPSB0b0xlbmd0aChzZWxmLmxlbmd0aCk7XG4gICAgdmFyIGluZGV4ID0gMDtcbiAgICB2YXIgcmVzdWx0ID0gSVNfTUFQID8gY3JlYXRlKCR0aGlzLCBsZW5ndGgpIDogSVNfRklMVEVSID8gY3JlYXRlKCR0aGlzLCAwKSA6IHVuZGVmaW5lZDtcbiAgICB2YXIgdmFsLCByZXM7XG4gICAgZm9yICg7bGVuZ3RoID4gaW5kZXg7IGluZGV4KyspIGlmIChOT19IT0xFUyB8fCBpbmRleCBpbiBzZWxmKSB7XG4gICAgICB2YWwgPSBzZWxmW2luZGV4XTtcbiAgICAgIHJlcyA9IGYodmFsLCBpbmRleCwgTyk7XG4gICAgICBpZiAoVFlQRSkge1xuICAgICAgICBpZiAoSVNfTUFQKSByZXN1bHRbaW5kZXhdID0gcmVzOyAgIC8vIG1hcFxuICAgICAgICBlbHNlIGlmIChyZXMpIHN3aXRjaCAoVFlQRSkge1xuICAgICAgICAgIGNhc2UgMzogcmV0dXJuIHRydWU7ICAgICAgICAgICAgIC8vIHNvbWVcbiAgICAgICAgICBjYXNlIDU6IHJldHVybiB2YWw7ICAgICAgICAgICAgICAvLyBmaW5kXG4gICAgICAgICAgY2FzZSA2OiByZXR1cm4gaW5kZXg7ICAgICAgICAgICAgLy8gZmluZEluZGV4XG4gICAgICAgICAgY2FzZSAyOiByZXN1bHQucHVzaCh2YWwpOyAgICAgICAgLy8gZmlsdGVyXG4gICAgICAgIH0gZWxzZSBpZiAoSVNfRVZFUlkpIHJldHVybiBmYWxzZTsgLy8gZXZlcnlcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIElTX0ZJTkRfSU5ERVggPyAtMSA6IElTX1NPTUUgfHwgSVNfRVZFUlkgPyBJU19FVkVSWSA6IHJlc3VsdDtcbiAgfTtcbn07XG4iLCJ2YXIgYUZ1bmN0aW9uID0gcmVxdWlyZSgnLi9fYS1mdW5jdGlvbicpO1xudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8tb2JqZWN0Jyk7XG52YXIgSU9iamVjdCA9IHJlcXVpcmUoJy4vX2lvYmplY3QnKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICh0aGF0LCBjYWxsYmFja2ZuLCBhTGVuLCBtZW1vLCBpc1JpZ2h0KSB7XG4gIGFGdW5jdGlvbihjYWxsYmFja2ZuKTtcbiAgdmFyIE8gPSB0b09iamVjdCh0aGF0KTtcbiAgdmFyIHNlbGYgPSBJT2JqZWN0KE8pO1xuICB2YXIgbGVuZ3RoID0gdG9MZW5ndGgoTy5sZW5ndGgpO1xuICB2YXIgaW5kZXggPSBpc1JpZ2h0ID8gbGVuZ3RoIC0gMSA6IDA7XG4gIHZhciBpID0gaXNSaWdodCA/IC0xIDogMTtcbiAgaWYgKGFMZW4gPCAyKSBmb3IgKDs7KSB7XG4gICAgaWYgKGluZGV4IGluIHNlbGYpIHtcbiAgICAgIG1lbW8gPSBzZWxmW2luZGV4XTtcbiAgICAgIGluZGV4ICs9IGk7XG4gICAgICBicmVhaztcbiAgICB9XG4gICAgaW5kZXggKz0gaTtcbiAgICBpZiAoaXNSaWdodCA/IGluZGV4IDwgMCA6IGxlbmd0aCA8PSBpbmRleCkge1xuICAgICAgdGhyb3cgVHlwZUVycm9yKCdSZWR1Y2Ugb2YgZW1wdHkgYXJyYXkgd2l0aCBubyBpbml0aWFsIHZhbHVlJyk7XG4gICAgfVxuICB9XG4gIGZvciAoO2lzUmlnaHQgPyBpbmRleCA+PSAwIDogbGVuZ3RoID4gaW5kZXg7IGluZGV4ICs9IGkpIGlmIChpbmRleCBpbiBzZWxmKSB7XG4gICAgbWVtbyA9IGNhbGxiYWNrZm4obWVtbywgc2VsZltpbmRleF0sIGluZGV4LCBPKTtcbiAgfVxuICByZXR1cm4gbWVtbztcbn07XG4iLCJ2YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbnZhciBpc0FycmF5ID0gcmVxdWlyZSgnLi9faXMtYXJyYXknKTtcbnZhciBTUEVDSUVTID0gcmVxdWlyZSgnLi9fd2tzJykoJ3NwZWNpZXMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAob3JpZ2luYWwpIHtcbiAgdmFyIEM7XG4gIGlmIChpc0FycmF5KG9yaWdpbmFsKSkge1xuICAgIEMgPSBvcmlnaW5hbC5jb25zdHJ1Y3RvcjtcbiAgICAvLyBjcm9zcy1yZWFsbSBmYWxsYmFja1xuICAgIGlmICh0eXBlb2YgQyA9PSAnZnVuY3Rpb24nICYmIChDID09PSBBcnJheSB8fCBpc0FycmF5KEMucHJvdG90eXBlKSkpIEMgPSB1bmRlZmluZWQ7XG4gICAgaWYgKGlzT2JqZWN0KEMpKSB7XG4gICAgICBDID0gQ1tTUEVDSUVTXTtcbiAgICAgIGlmIChDID09PSBudWxsKSBDID0gdW5kZWZpbmVkO1xuICAgIH1cbiAgfSByZXR1cm4gQyA9PT0gdW5kZWZpbmVkID8gQXJyYXkgOiBDO1xufTtcbiIsIi8vIDkuNC4yLjMgQXJyYXlTcGVjaWVzQ3JlYXRlKG9yaWdpbmFsQXJyYXksIGxlbmd0aClcbnZhciBzcGVjaWVzQ29uc3RydWN0b3IgPSByZXF1aXJlKCcuL19hcnJheS1zcGVjaWVzLWNvbnN0cnVjdG9yJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKG9yaWdpbmFsLCBsZW5ndGgpIHtcbiAgcmV0dXJuIG5ldyAoc3BlY2llc0NvbnN0cnVjdG9yKG9yaWdpbmFsKSkobGVuZ3RoKTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgYUZ1bmN0aW9uID0gcmVxdWlyZSgnLi9fYS1mdW5jdGlvbicpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG52YXIgaW52b2tlID0gcmVxdWlyZSgnLi9faW52b2tlJyk7XG52YXIgYXJyYXlTbGljZSA9IFtdLnNsaWNlO1xudmFyIGZhY3RvcmllcyA9IHt9O1xuXG52YXIgY29uc3RydWN0ID0gZnVuY3Rpb24gKEYsIGxlbiwgYXJncykge1xuICBpZiAoIShsZW4gaW4gZmFjdG9yaWVzKSkge1xuICAgIGZvciAodmFyIG4gPSBbXSwgaSA9IDA7IGkgPCBsZW47IGkrKykgbltpXSA9ICdhWycgKyBpICsgJ10nO1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1uZXctZnVuY1xuICAgIGZhY3Rvcmllc1tsZW5dID0gRnVuY3Rpb24oJ0YsYScsICdyZXR1cm4gbmV3IEYoJyArIG4uam9pbignLCcpICsgJyknKTtcbiAgfSByZXR1cm4gZmFjdG9yaWVzW2xlbl0oRiwgYXJncyk7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IEZ1bmN0aW9uLmJpbmQgfHwgZnVuY3Rpb24gYmluZCh0aGF0IC8qICwgLi4uYXJncyAqLykge1xuICB2YXIgZm4gPSBhRnVuY3Rpb24odGhpcyk7XG4gIHZhciBwYXJ0QXJncyA9IGFycmF5U2xpY2UuY2FsbChhcmd1bWVudHMsIDEpO1xuICB2YXIgYm91bmQgPSBmdW5jdGlvbiAoLyogYXJncy4uLiAqLykge1xuICAgIHZhciBhcmdzID0gcGFydEFyZ3MuY29uY2F0KGFycmF5U2xpY2UuY2FsbChhcmd1bWVudHMpKTtcbiAgICByZXR1cm4gdGhpcyBpbnN0YW5jZW9mIGJvdW5kID8gY29uc3RydWN0KGZuLCBhcmdzLmxlbmd0aCwgYXJncykgOiBpbnZva2UoZm4sIGFyZ3MsIHRoYXQpO1xuICB9O1xuICBpZiAoaXNPYmplY3QoZm4ucHJvdG90eXBlKSkgYm91bmQucHJvdG90eXBlID0gZm4ucHJvdG90eXBlO1xuICByZXR1cm4gYm91bmQ7XG59O1xuIiwiLy8gZ2V0dGluZyB0YWcgZnJvbSAxOS4xLjMuNiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nKClcbnZhciBjb2YgPSByZXF1aXJlKCcuL19jb2YnKTtcbnZhciBUQUcgPSByZXF1aXJlKCcuL193a3MnKSgndG9TdHJpbmdUYWcnKTtcbi8vIEVTMyB3cm9uZyBoZXJlXG52YXIgQVJHID0gY29mKGZ1bmN0aW9uICgpIHsgcmV0dXJuIGFyZ3VtZW50czsgfSgpKSA9PSAnQXJndW1lbnRzJztcblxuLy8gZmFsbGJhY2sgZm9yIElFMTEgU2NyaXB0IEFjY2VzcyBEZW5pZWQgZXJyb3JcbnZhciB0cnlHZXQgPSBmdW5jdGlvbiAoaXQsIGtleSkge1xuICB0cnkge1xuICAgIHJldHVybiBpdFtrZXldO1xuICB9IGNhdGNoIChlKSB7IC8qIGVtcHR5ICovIH1cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHZhciBPLCBULCBCO1xuICByZXR1cm4gaXQgPT09IHVuZGVmaW5lZCA/ICdVbmRlZmluZWQnIDogaXQgPT09IG51bGwgPyAnTnVsbCdcbiAgICAvLyBAQHRvU3RyaW5nVGFnIGNhc2VcbiAgICA6IHR5cGVvZiAoVCA9IHRyeUdldChPID0gT2JqZWN0KGl0KSwgVEFHKSkgPT0gJ3N0cmluZycgPyBUXG4gICAgLy8gYnVpbHRpblRhZyBjYXNlXG4gICAgOiBBUkcgPyBjb2YoTylcbiAgICAvLyBFUzMgYXJndW1lbnRzIGZhbGxiYWNrXG4gICAgOiAoQiA9IGNvZihPKSkgPT0gJ09iamVjdCcgJiYgdHlwZW9mIE8uY2FsbGVlID09ICdmdW5jdGlvbicgPyAnQXJndW1lbnRzJyA6IEI7XG59O1xuIiwidmFyIHRvU3RyaW5nID0ge30udG9TdHJpbmc7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiB0b1N0cmluZy5jYWxsKGl0KS5zbGljZSg4LCAtMSk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGRQID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJykuZjtcbnZhciBjcmVhdGUgPSByZXF1aXJlKCcuL19vYmplY3QtY3JlYXRlJyk7XG52YXIgcmVkZWZpbmVBbGwgPSByZXF1aXJlKCcuL19yZWRlZmluZS1hbGwnKTtcbnZhciBjdHggPSByZXF1aXJlKCcuL19jdHgnKTtcbnZhciBhbkluc3RhbmNlID0gcmVxdWlyZSgnLi9fYW4taW5zdGFuY2UnKTtcbnZhciBmb3JPZiA9IHJlcXVpcmUoJy4vX2Zvci1vZicpO1xudmFyICRpdGVyRGVmaW5lID0gcmVxdWlyZSgnLi9faXRlci1kZWZpbmUnKTtcbnZhciBzdGVwID0gcmVxdWlyZSgnLi9faXRlci1zdGVwJyk7XG52YXIgc2V0U3BlY2llcyA9IHJlcXVpcmUoJy4vX3NldC1zcGVjaWVzJyk7XG52YXIgREVTQ1JJUFRPUlMgPSByZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpO1xudmFyIGZhc3RLZXkgPSByZXF1aXJlKCcuL19tZXRhJykuZmFzdEtleTtcbnZhciB2YWxpZGF0ZSA9IHJlcXVpcmUoJy4vX3ZhbGlkYXRlLWNvbGxlY3Rpb24nKTtcbnZhciBTSVpFID0gREVTQ1JJUFRPUlMgPyAnX3MnIDogJ3NpemUnO1xuXG52YXIgZ2V0RW50cnkgPSBmdW5jdGlvbiAodGhhdCwga2V5KSB7XG4gIC8vIGZhc3QgY2FzZVxuICB2YXIgaW5kZXggPSBmYXN0S2V5KGtleSk7XG4gIHZhciBlbnRyeTtcbiAgaWYgKGluZGV4ICE9PSAnRicpIHJldHVybiB0aGF0Ll9pW2luZGV4XTtcbiAgLy8gZnJvemVuIG9iamVjdCBjYXNlXG4gIGZvciAoZW50cnkgPSB0aGF0Ll9mOyBlbnRyeTsgZW50cnkgPSBlbnRyeS5uKSB7XG4gICAgaWYgKGVudHJ5LmsgPT0ga2V5KSByZXR1cm4gZW50cnk7XG4gIH1cbn07XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBnZXRDb25zdHJ1Y3RvcjogZnVuY3Rpb24gKHdyYXBwZXIsIE5BTUUsIElTX01BUCwgQURERVIpIHtcbiAgICB2YXIgQyA9IHdyYXBwZXIoZnVuY3Rpb24gKHRoYXQsIGl0ZXJhYmxlKSB7XG4gICAgICBhbkluc3RhbmNlKHRoYXQsIEMsIE5BTUUsICdfaScpO1xuICAgICAgdGhhdC5fdCA9IE5BTUU7ICAgICAgICAgLy8gY29sbGVjdGlvbiB0eXBlXG4gICAgICB0aGF0Ll9pID0gY3JlYXRlKG51bGwpOyAvLyBpbmRleFxuICAgICAgdGhhdC5fZiA9IHVuZGVmaW5lZDsgICAgLy8gZmlyc3QgZW50cnlcbiAgICAgIHRoYXQuX2wgPSB1bmRlZmluZWQ7ICAgIC8vIGxhc3QgZW50cnlcbiAgICAgIHRoYXRbU0laRV0gPSAwOyAgICAgICAgIC8vIHNpemVcbiAgICAgIGlmIChpdGVyYWJsZSAhPSB1bmRlZmluZWQpIGZvck9mKGl0ZXJhYmxlLCBJU19NQVAsIHRoYXRbQURERVJdLCB0aGF0KTtcbiAgICB9KTtcbiAgICByZWRlZmluZUFsbChDLnByb3RvdHlwZSwge1xuICAgICAgLy8gMjMuMS4zLjEgTWFwLnByb3RvdHlwZS5jbGVhcigpXG4gICAgICAvLyAyMy4yLjMuMiBTZXQucHJvdG90eXBlLmNsZWFyKClcbiAgICAgIGNsZWFyOiBmdW5jdGlvbiBjbGVhcigpIHtcbiAgICAgICAgZm9yICh2YXIgdGhhdCA9IHZhbGlkYXRlKHRoaXMsIE5BTUUpLCBkYXRhID0gdGhhdC5faSwgZW50cnkgPSB0aGF0Ll9mOyBlbnRyeTsgZW50cnkgPSBlbnRyeS5uKSB7XG4gICAgICAgICAgZW50cnkuciA9IHRydWU7XG4gICAgICAgICAgaWYgKGVudHJ5LnApIGVudHJ5LnAgPSBlbnRyeS5wLm4gPSB1bmRlZmluZWQ7XG4gICAgICAgICAgZGVsZXRlIGRhdGFbZW50cnkuaV07XG4gICAgICAgIH1cbiAgICAgICAgdGhhdC5fZiA9IHRoYXQuX2wgPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoYXRbU0laRV0gPSAwO1xuICAgICAgfSxcbiAgICAgIC8vIDIzLjEuMy4zIE1hcC5wcm90b3R5cGUuZGVsZXRlKGtleSlcbiAgICAgIC8vIDIzLjIuMy40IFNldC5wcm90b3R5cGUuZGVsZXRlKHZhbHVlKVxuICAgICAgJ2RlbGV0ZSc6IGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgdmFyIHRoYXQgPSB2YWxpZGF0ZSh0aGlzLCBOQU1FKTtcbiAgICAgICAgdmFyIGVudHJ5ID0gZ2V0RW50cnkodGhhdCwga2V5KTtcbiAgICAgICAgaWYgKGVudHJ5KSB7XG4gICAgICAgICAgdmFyIG5leHQgPSBlbnRyeS5uO1xuICAgICAgICAgIHZhciBwcmV2ID0gZW50cnkucDtcbiAgICAgICAgICBkZWxldGUgdGhhdC5faVtlbnRyeS5pXTtcbiAgICAgICAgICBlbnRyeS5yID0gdHJ1ZTtcbiAgICAgICAgICBpZiAocHJldikgcHJldi5uID0gbmV4dDtcbiAgICAgICAgICBpZiAobmV4dCkgbmV4dC5wID0gcHJldjtcbiAgICAgICAgICBpZiAodGhhdC5fZiA9PSBlbnRyeSkgdGhhdC5fZiA9IG5leHQ7XG4gICAgICAgICAgaWYgKHRoYXQuX2wgPT0gZW50cnkpIHRoYXQuX2wgPSBwcmV2O1xuICAgICAgICAgIHRoYXRbU0laRV0tLTtcbiAgICAgICAgfSByZXR1cm4gISFlbnRyeTtcbiAgICAgIH0sXG4gICAgICAvLyAyMy4yLjMuNiBTZXQucHJvdG90eXBlLmZvckVhY2goY2FsbGJhY2tmbiwgdGhpc0FyZyA9IHVuZGVmaW5lZClcbiAgICAgIC8vIDIzLjEuMy41IE1hcC5wcm90b3R5cGUuZm9yRWFjaChjYWxsYmFja2ZuLCB0aGlzQXJnID0gdW5kZWZpbmVkKVxuICAgICAgZm9yRWFjaDogZnVuY3Rpb24gZm9yRWFjaChjYWxsYmFja2ZuIC8qICwgdGhhdCA9IHVuZGVmaW5lZCAqLykge1xuICAgICAgICB2YWxpZGF0ZSh0aGlzLCBOQU1FKTtcbiAgICAgICAgdmFyIGYgPSBjdHgoY2FsbGJhY2tmbiwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQsIDMpO1xuICAgICAgICB2YXIgZW50cnk7XG4gICAgICAgIHdoaWxlIChlbnRyeSA9IGVudHJ5ID8gZW50cnkubiA6IHRoaXMuX2YpIHtcbiAgICAgICAgICBmKGVudHJ5LnYsIGVudHJ5LmssIHRoaXMpO1xuICAgICAgICAgIC8vIHJldmVydCB0byB0aGUgbGFzdCBleGlzdGluZyBlbnRyeVxuICAgICAgICAgIHdoaWxlIChlbnRyeSAmJiBlbnRyeS5yKSBlbnRyeSA9IGVudHJ5LnA7XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICAvLyAyMy4xLjMuNyBNYXAucHJvdG90eXBlLmhhcyhrZXkpXG4gICAgICAvLyAyMy4yLjMuNyBTZXQucHJvdG90eXBlLmhhcyh2YWx1ZSlcbiAgICAgIGhhczogZnVuY3Rpb24gaGFzKGtleSkge1xuICAgICAgICByZXR1cm4gISFnZXRFbnRyeSh2YWxpZGF0ZSh0aGlzLCBOQU1FKSwga2V5KTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICBpZiAoREVTQ1JJUFRPUlMpIGRQKEMucHJvdG90eXBlLCAnc2l6ZScsIHtcbiAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdmFsaWRhdGUodGhpcywgTkFNRSlbU0laRV07XG4gICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIEM7XG4gIH0sXG4gIGRlZjogZnVuY3Rpb24gKHRoYXQsIGtleSwgdmFsdWUpIHtcbiAgICB2YXIgZW50cnkgPSBnZXRFbnRyeSh0aGF0LCBrZXkpO1xuICAgIHZhciBwcmV2LCBpbmRleDtcbiAgICAvLyBjaGFuZ2UgZXhpc3RpbmcgZW50cnlcbiAgICBpZiAoZW50cnkpIHtcbiAgICAgIGVudHJ5LnYgPSB2YWx1ZTtcbiAgICAvLyBjcmVhdGUgbmV3IGVudHJ5XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoYXQuX2wgPSBlbnRyeSA9IHtcbiAgICAgICAgaTogaW5kZXggPSBmYXN0S2V5KGtleSwgdHJ1ZSksIC8vIDwtIGluZGV4XG4gICAgICAgIGs6IGtleSwgICAgICAgICAgICAgICAgICAgICAgICAvLyA8LSBrZXlcbiAgICAgICAgdjogdmFsdWUsICAgICAgICAgICAgICAgICAgICAgIC8vIDwtIHZhbHVlXG4gICAgICAgIHA6IHByZXYgPSB0aGF0Ll9sLCAgICAgICAgICAgICAvLyA8LSBwcmV2aW91cyBlbnRyeVxuICAgICAgICBuOiB1bmRlZmluZWQsICAgICAgICAgICAgICAgICAgLy8gPC0gbmV4dCBlbnRyeVxuICAgICAgICByOiBmYWxzZSAgICAgICAgICAgICAgICAgICAgICAgLy8gPC0gcmVtb3ZlZFxuICAgICAgfTtcbiAgICAgIGlmICghdGhhdC5fZikgdGhhdC5fZiA9IGVudHJ5O1xuICAgICAgaWYgKHByZXYpIHByZXYubiA9IGVudHJ5O1xuICAgICAgdGhhdFtTSVpFXSsrO1xuICAgICAgLy8gYWRkIHRvIGluZGV4XG4gICAgICBpZiAoaW5kZXggIT09ICdGJykgdGhhdC5faVtpbmRleF0gPSBlbnRyeTtcbiAgICB9IHJldHVybiB0aGF0O1xuICB9LFxuICBnZXRFbnRyeTogZ2V0RW50cnksXG4gIHNldFN0cm9uZzogZnVuY3Rpb24gKEMsIE5BTUUsIElTX01BUCkge1xuICAgIC8vIGFkZCAua2V5cywgLnZhbHVlcywgLmVudHJpZXMsIFtAQGl0ZXJhdG9yXVxuICAgIC8vIDIzLjEuMy40LCAyMy4xLjMuOCwgMjMuMS4zLjExLCAyMy4xLjMuMTIsIDIzLjIuMy41LCAyMy4yLjMuOCwgMjMuMi4zLjEwLCAyMy4yLjMuMTFcbiAgICAkaXRlckRlZmluZShDLCBOQU1FLCBmdW5jdGlvbiAoaXRlcmF0ZWQsIGtpbmQpIHtcbiAgICAgIHRoaXMuX3QgPSB2YWxpZGF0ZShpdGVyYXRlZCwgTkFNRSk7IC8vIHRhcmdldFxuICAgICAgdGhpcy5fayA9IGtpbmQ7ICAgICAgICAgICAgICAgICAgICAgLy8ga2luZFxuICAgICAgdGhpcy5fbCA9IHVuZGVmaW5lZDsgICAgICAgICAgICAgICAgLy8gcHJldmlvdXNcbiAgICB9LCBmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgdGhhdCA9IHRoaXM7XG4gICAgICB2YXIga2luZCA9IHRoYXQuX2s7XG4gICAgICB2YXIgZW50cnkgPSB0aGF0Ll9sO1xuICAgICAgLy8gcmV2ZXJ0IHRvIHRoZSBsYXN0IGV4aXN0aW5nIGVudHJ5XG4gICAgICB3aGlsZSAoZW50cnkgJiYgZW50cnkucikgZW50cnkgPSBlbnRyeS5wO1xuICAgICAgLy8gZ2V0IG5leHQgZW50cnlcbiAgICAgIGlmICghdGhhdC5fdCB8fCAhKHRoYXQuX2wgPSBlbnRyeSA9IGVudHJ5ID8gZW50cnkubiA6IHRoYXQuX3QuX2YpKSB7XG4gICAgICAgIC8vIG9yIGZpbmlzaCB0aGUgaXRlcmF0aW9uXG4gICAgICAgIHRoYXQuX3QgPSB1bmRlZmluZWQ7XG4gICAgICAgIHJldHVybiBzdGVwKDEpO1xuICAgICAgfVxuICAgICAgLy8gcmV0dXJuIHN0ZXAgYnkga2luZFxuICAgICAgaWYgKGtpbmQgPT0gJ2tleXMnKSByZXR1cm4gc3RlcCgwLCBlbnRyeS5rKTtcbiAgICAgIGlmIChraW5kID09ICd2YWx1ZXMnKSByZXR1cm4gc3RlcCgwLCBlbnRyeS52KTtcbiAgICAgIHJldHVybiBzdGVwKDAsIFtlbnRyeS5rLCBlbnRyeS52XSk7XG4gICAgfSwgSVNfTUFQID8gJ2VudHJpZXMnIDogJ3ZhbHVlcycsICFJU19NQVAsIHRydWUpO1xuXG4gICAgLy8gYWRkIFtAQHNwZWNpZXNdLCAyMy4xLjIuMiwgMjMuMi4yLjJcbiAgICBzZXRTcGVjaWVzKE5BTUUpO1xuICB9XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIHJlZGVmaW5lQWxsID0gcmVxdWlyZSgnLi9fcmVkZWZpbmUtYWxsJyk7XG52YXIgZ2V0V2VhayA9IHJlcXVpcmUoJy4vX21ldGEnKS5nZXRXZWFrO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbnZhciBhbkluc3RhbmNlID0gcmVxdWlyZSgnLi9fYW4taW5zdGFuY2UnKTtcbnZhciBmb3JPZiA9IHJlcXVpcmUoJy4vX2Zvci1vZicpO1xudmFyIGNyZWF0ZUFycmF5TWV0aG9kID0gcmVxdWlyZSgnLi9fYXJyYXktbWV0aG9kcycpO1xudmFyICRoYXMgPSByZXF1aXJlKCcuL19oYXMnKTtcbnZhciB2YWxpZGF0ZSA9IHJlcXVpcmUoJy4vX3ZhbGlkYXRlLWNvbGxlY3Rpb24nKTtcbnZhciBhcnJheUZpbmQgPSBjcmVhdGVBcnJheU1ldGhvZCg1KTtcbnZhciBhcnJheUZpbmRJbmRleCA9IGNyZWF0ZUFycmF5TWV0aG9kKDYpO1xudmFyIGlkID0gMDtcblxuLy8gZmFsbGJhY2sgZm9yIHVuY2F1Z2h0IGZyb3plbiBrZXlzXG52YXIgdW5jYXVnaHRGcm96ZW5TdG9yZSA9IGZ1bmN0aW9uICh0aGF0KSB7XG4gIHJldHVybiB0aGF0Ll9sIHx8ICh0aGF0Ll9sID0gbmV3IFVuY2F1Z2h0RnJvemVuU3RvcmUoKSk7XG59O1xudmFyIFVuY2F1Z2h0RnJvemVuU3RvcmUgPSBmdW5jdGlvbiAoKSB7XG4gIHRoaXMuYSA9IFtdO1xufTtcbnZhciBmaW5kVW5jYXVnaHRGcm96ZW4gPSBmdW5jdGlvbiAoc3RvcmUsIGtleSkge1xuICByZXR1cm4gYXJyYXlGaW5kKHN0b3JlLmEsIGZ1bmN0aW9uIChpdCkge1xuICAgIHJldHVybiBpdFswXSA9PT0ga2V5O1xuICB9KTtcbn07XG5VbmNhdWdodEZyb3plblN0b3JlLnByb3RvdHlwZSA9IHtcbiAgZ2V0OiBmdW5jdGlvbiAoa2V5KSB7XG4gICAgdmFyIGVudHJ5ID0gZmluZFVuY2F1Z2h0RnJvemVuKHRoaXMsIGtleSk7XG4gICAgaWYgKGVudHJ5KSByZXR1cm4gZW50cnlbMV07XG4gIH0sXG4gIGhhczogZnVuY3Rpb24gKGtleSkge1xuICAgIHJldHVybiAhIWZpbmRVbmNhdWdodEZyb3plbih0aGlzLCBrZXkpO1xuICB9LFxuICBzZXQ6IGZ1bmN0aW9uIChrZXksIHZhbHVlKSB7XG4gICAgdmFyIGVudHJ5ID0gZmluZFVuY2F1Z2h0RnJvemVuKHRoaXMsIGtleSk7XG4gICAgaWYgKGVudHJ5KSBlbnRyeVsxXSA9IHZhbHVlO1xuICAgIGVsc2UgdGhpcy5hLnB1c2goW2tleSwgdmFsdWVdKTtcbiAgfSxcbiAgJ2RlbGV0ZSc6IGZ1bmN0aW9uIChrZXkpIHtcbiAgICB2YXIgaW5kZXggPSBhcnJheUZpbmRJbmRleCh0aGlzLmEsIGZ1bmN0aW9uIChpdCkge1xuICAgICAgcmV0dXJuIGl0WzBdID09PSBrZXk7XG4gICAgfSk7XG4gICAgaWYgKH5pbmRleCkgdGhpcy5hLnNwbGljZShpbmRleCwgMSk7XG4gICAgcmV0dXJuICEhfmluZGV4O1xuICB9XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgZ2V0Q29uc3RydWN0b3I6IGZ1bmN0aW9uICh3cmFwcGVyLCBOQU1FLCBJU19NQVAsIEFEREVSKSB7XG4gICAgdmFyIEMgPSB3cmFwcGVyKGZ1bmN0aW9uICh0aGF0LCBpdGVyYWJsZSkge1xuICAgICAgYW5JbnN0YW5jZSh0aGF0LCBDLCBOQU1FLCAnX2knKTtcbiAgICAgIHRoYXQuX3QgPSBOQU1FOyAgICAgIC8vIGNvbGxlY3Rpb24gdHlwZVxuICAgICAgdGhhdC5faSA9IGlkKys7ICAgICAgLy8gY29sbGVjdGlvbiBpZFxuICAgICAgdGhhdC5fbCA9IHVuZGVmaW5lZDsgLy8gbGVhayBzdG9yZSBmb3IgdW5jYXVnaHQgZnJvemVuIG9iamVjdHNcbiAgICAgIGlmIChpdGVyYWJsZSAhPSB1bmRlZmluZWQpIGZvck9mKGl0ZXJhYmxlLCBJU19NQVAsIHRoYXRbQURERVJdLCB0aGF0KTtcbiAgICB9KTtcbiAgICByZWRlZmluZUFsbChDLnByb3RvdHlwZSwge1xuICAgICAgLy8gMjMuMy4zLjIgV2Vha01hcC5wcm90b3R5cGUuZGVsZXRlKGtleSlcbiAgICAgIC8vIDIzLjQuMy4zIFdlYWtTZXQucHJvdG90eXBlLmRlbGV0ZSh2YWx1ZSlcbiAgICAgICdkZWxldGUnOiBmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgIGlmICghaXNPYmplY3Qoa2V5KSkgcmV0dXJuIGZhbHNlO1xuICAgICAgICB2YXIgZGF0YSA9IGdldFdlYWsoa2V5KTtcbiAgICAgICAgaWYgKGRhdGEgPT09IHRydWUpIHJldHVybiB1bmNhdWdodEZyb3plblN0b3JlKHZhbGlkYXRlKHRoaXMsIE5BTUUpKVsnZGVsZXRlJ10oa2V5KTtcbiAgICAgICAgcmV0dXJuIGRhdGEgJiYgJGhhcyhkYXRhLCB0aGlzLl9pKSAmJiBkZWxldGUgZGF0YVt0aGlzLl9pXTtcbiAgICAgIH0sXG4gICAgICAvLyAyMy4zLjMuNCBXZWFrTWFwLnByb3RvdHlwZS5oYXMoa2V5KVxuICAgICAgLy8gMjMuNC4zLjQgV2Vha1NldC5wcm90b3R5cGUuaGFzKHZhbHVlKVxuICAgICAgaGFzOiBmdW5jdGlvbiBoYXMoa2V5KSB7XG4gICAgICAgIGlmICghaXNPYmplY3Qoa2V5KSkgcmV0dXJuIGZhbHNlO1xuICAgICAgICB2YXIgZGF0YSA9IGdldFdlYWsoa2V5KTtcbiAgICAgICAgaWYgKGRhdGEgPT09IHRydWUpIHJldHVybiB1bmNhdWdodEZyb3plblN0b3JlKHZhbGlkYXRlKHRoaXMsIE5BTUUpKS5oYXMoa2V5KTtcbiAgICAgICAgcmV0dXJuIGRhdGEgJiYgJGhhcyhkYXRhLCB0aGlzLl9pKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gQztcbiAgfSxcbiAgZGVmOiBmdW5jdGlvbiAodGhhdCwga2V5LCB2YWx1ZSkge1xuICAgIHZhciBkYXRhID0gZ2V0V2Vhayhhbk9iamVjdChrZXkpLCB0cnVlKTtcbiAgICBpZiAoZGF0YSA9PT0gdHJ1ZSkgdW5jYXVnaHRGcm96ZW5TdG9yZSh0aGF0KS5zZXQoa2V5LCB2YWx1ZSk7XG4gICAgZWxzZSBkYXRhW3RoYXQuX2ldID0gdmFsdWU7XG4gICAgcmV0dXJuIHRoYXQ7XG4gIH0sXG4gIHVmc3RvcmU6IHVuY2F1Z2h0RnJvemVuU3RvcmVcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi9fZ2xvYmFsJyk7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIHJlZGVmaW5lID0gcmVxdWlyZSgnLi9fcmVkZWZpbmUnKTtcbnZhciByZWRlZmluZUFsbCA9IHJlcXVpcmUoJy4vX3JlZGVmaW5lLWFsbCcpO1xudmFyIG1ldGEgPSByZXF1aXJlKCcuL19tZXRhJyk7XG52YXIgZm9yT2YgPSByZXF1aXJlKCcuL19mb3Itb2YnKTtcbnZhciBhbkluc3RhbmNlID0gcmVxdWlyZSgnLi9fYW4taW5zdGFuY2UnKTtcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi9fZmFpbHMnKTtcbnZhciAkaXRlckRldGVjdCA9IHJlcXVpcmUoJy4vX2l0ZXItZGV0ZWN0Jyk7XG52YXIgc2V0VG9TdHJpbmdUYWcgPSByZXF1aXJlKCcuL19zZXQtdG8tc3RyaW5nLXRhZycpO1xudmFyIGluaGVyaXRJZlJlcXVpcmVkID0gcmVxdWlyZSgnLi9faW5oZXJpdC1pZi1yZXF1aXJlZCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChOQU1FLCB3cmFwcGVyLCBtZXRob2RzLCBjb21tb24sIElTX01BUCwgSVNfV0VBSykge1xuICB2YXIgQmFzZSA9IGdsb2JhbFtOQU1FXTtcbiAgdmFyIEMgPSBCYXNlO1xuICB2YXIgQURERVIgPSBJU19NQVAgPyAnc2V0JyA6ICdhZGQnO1xuICB2YXIgcHJvdG8gPSBDICYmIEMucHJvdG90eXBlO1xuICB2YXIgTyA9IHt9O1xuICB2YXIgZml4TWV0aG9kID0gZnVuY3Rpb24gKEtFWSkge1xuICAgIHZhciBmbiA9IHByb3RvW0tFWV07XG4gICAgcmVkZWZpbmUocHJvdG8sIEtFWSxcbiAgICAgIEtFWSA9PSAnZGVsZXRlJyA/IGZ1bmN0aW9uIChhKSB7XG4gICAgICAgIHJldHVybiBJU19XRUFLICYmICFpc09iamVjdChhKSA/IGZhbHNlIDogZm4uY2FsbCh0aGlzLCBhID09PSAwID8gMCA6IGEpO1xuICAgICAgfSA6IEtFWSA9PSAnaGFzJyA/IGZ1bmN0aW9uIGhhcyhhKSB7XG4gICAgICAgIHJldHVybiBJU19XRUFLICYmICFpc09iamVjdChhKSA/IGZhbHNlIDogZm4uY2FsbCh0aGlzLCBhID09PSAwID8gMCA6IGEpO1xuICAgICAgfSA6IEtFWSA9PSAnZ2V0JyA/IGZ1bmN0aW9uIGdldChhKSB7XG4gICAgICAgIHJldHVybiBJU19XRUFLICYmICFpc09iamVjdChhKSA/IHVuZGVmaW5lZCA6IGZuLmNhbGwodGhpcywgYSA9PT0gMCA/IDAgOiBhKTtcbiAgICAgIH0gOiBLRVkgPT0gJ2FkZCcgPyBmdW5jdGlvbiBhZGQoYSkgeyBmbi5jYWxsKHRoaXMsIGEgPT09IDAgPyAwIDogYSk7IHJldHVybiB0aGlzOyB9XG4gICAgICAgIDogZnVuY3Rpb24gc2V0KGEsIGIpIHsgZm4uY2FsbCh0aGlzLCBhID09PSAwID8gMCA6IGEsIGIpOyByZXR1cm4gdGhpczsgfVxuICAgICk7XG4gIH07XG4gIGlmICh0eXBlb2YgQyAhPSAnZnVuY3Rpb24nIHx8ICEoSVNfV0VBSyB8fCBwcm90by5mb3JFYWNoICYmICFmYWlscyhmdW5jdGlvbiAoKSB7XG4gICAgbmV3IEMoKS5lbnRyaWVzKCkubmV4dCgpO1xuICB9KSkpIHtcbiAgICAvLyBjcmVhdGUgY29sbGVjdGlvbiBjb25zdHJ1Y3RvclxuICAgIEMgPSBjb21tb24uZ2V0Q29uc3RydWN0b3Iod3JhcHBlciwgTkFNRSwgSVNfTUFQLCBBRERFUik7XG4gICAgcmVkZWZpbmVBbGwoQy5wcm90b3R5cGUsIG1ldGhvZHMpO1xuICAgIG1ldGEuTkVFRCA9IHRydWU7XG4gIH0gZWxzZSB7XG4gICAgdmFyIGluc3RhbmNlID0gbmV3IEMoKTtcbiAgICAvLyBlYXJseSBpbXBsZW1lbnRhdGlvbnMgbm90IHN1cHBvcnRzIGNoYWluaW5nXG4gICAgdmFyIEhBU05UX0NIQUlOSU5HID0gaW5zdGFuY2VbQURERVJdKElTX1dFQUsgPyB7fSA6IC0wLCAxKSAhPSBpbnN0YW5jZTtcbiAgICAvLyBWOCB+ICBDaHJvbWl1bSA0MC0gd2Vhay1jb2xsZWN0aW9ucyB0aHJvd3Mgb24gcHJpbWl0aXZlcywgYnV0IHNob3VsZCByZXR1cm4gZmFsc2VcbiAgICB2YXIgVEhST1dTX09OX1BSSU1JVElWRVMgPSBmYWlscyhmdW5jdGlvbiAoKSB7IGluc3RhbmNlLmhhcygxKTsgfSk7XG4gICAgLy8gbW9zdCBlYXJseSBpbXBsZW1lbnRhdGlvbnMgZG9lc24ndCBzdXBwb3J0cyBpdGVyYWJsZXMsIG1vc3QgbW9kZXJuIC0gbm90IGNsb3NlIGl0IGNvcnJlY3RseVxuICAgIHZhciBBQ0NFUFRfSVRFUkFCTEVTID0gJGl0ZXJEZXRlY3QoZnVuY3Rpb24gKGl0ZXIpIHsgbmV3IEMoaXRlcik7IH0pOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLW5ld1xuICAgIC8vIGZvciBlYXJseSBpbXBsZW1lbnRhdGlvbnMgLTAgYW5kICswIG5vdCB0aGUgc2FtZVxuICAgIHZhciBCVUdHWV9aRVJPID0gIUlTX1dFQUsgJiYgZmFpbHMoZnVuY3Rpb24gKCkge1xuICAgICAgLy8gVjggfiBDaHJvbWl1bSA0Mi0gZmFpbHMgb25seSB3aXRoIDUrIGVsZW1lbnRzXG4gICAgICB2YXIgJGluc3RhbmNlID0gbmV3IEMoKTtcbiAgICAgIHZhciBpbmRleCA9IDU7XG4gICAgICB3aGlsZSAoaW5kZXgtLSkgJGluc3RhbmNlW0FEREVSXShpbmRleCwgaW5kZXgpO1xuICAgICAgcmV0dXJuICEkaW5zdGFuY2UuaGFzKC0wKTtcbiAgICB9KTtcbiAgICBpZiAoIUFDQ0VQVF9JVEVSQUJMRVMpIHtcbiAgICAgIEMgPSB3cmFwcGVyKGZ1bmN0aW9uICh0YXJnZXQsIGl0ZXJhYmxlKSB7XG4gICAgICAgIGFuSW5zdGFuY2UodGFyZ2V0LCBDLCBOQU1FKTtcbiAgICAgICAgdmFyIHRoYXQgPSBpbmhlcml0SWZSZXF1aXJlZChuZXcgQmFzZSgpLCB0YXJnZXQsIEMpO1xuICAgICAgICBpZiAoaXRlcmFibGUgIT0gdW5kZWZpbmVkKSBmb3JPZihpdGVyYWJsZSwgSVNfTUFQLCB0aGF0W0FEREVSXSwgdGhhdCk7XG4gICAgICAgIHJldHVybiB0aGF0O1xuICAgICAgfSk7XG4gICAgICBDLnByb3RvdHlwZSA9IHByb3RvO1xuICAgICAgcHJvdG8uY29uc3RydWN0b3IgPSBDO1xuICAgIH1cbiAgICBpZiAoVEhST1dTX09OX1BSSU1JVElWRVMgfHwgQlVHR1lfWkVSTykge1xuICAgICAgZml4TWV0aG9kKCdkZWxldGUnKTtcbiAgICAgIGZpeE1ldGhvZCgnaGFzJyk7XG4gICAgICBJU19NQVAgJiYgZml4TWV0aG9kKCdnZXQnKTtcbiAgICB9XG4gICAgaWYgKEJVR0dZX1pFUk8gfHwgSEFTTlRfQ0hBSU5JTkcpIGZpeE1ldGhvZChBRERFUik7XG4gICAgLy8gd2VhayBjb2xsZWN0aW9ucyBzaG91bGQgbm90IGNvbnRhaW5zIC5jbGVhciBtZXRob2RcbiAgICBpZiAoSVNfV0VBSyAmJiBwcm90by5jbGVhcikgZGVsZXRlIHByb3RvLmNsZWFyO1xuICB9XG5cbiAgc2V0VG9TdHJpbmdUYWcoQywgTkFNRSk7XG5cbiAgT1tOQU1FXSA9IEM7XG4gICRleHBvcnQoJGV4cG9ydC5HICsgJGV4cG9ydC5XICsgJGV4cG9ydC5GICogKEMgIT0gQmFzZSksIE8pO1xuXG4gIGlmICghSVNfV0VBSykgY29tbW9uLnNldFN0cm9uZyhDLCBOQU1FLCBJU19NQVApO1xuXG4gIHJldHVybiBDO1xufTtcbiIsInZhciBjb3JlID0gbW9kdWxlLmV4cG9ydHMgPSB7IHZlcnNpb246ICcyLjYuMTInIH07XG5pZiAodHlwZW9mIF9fZSA9PSAnbnVtYmVyJykgX19lID0gY29yZTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bmRlZlxuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICRkZWZpbmVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpO1xudmFyIGNyZWF0ZURlc2MgPSByZXF1aXJlKCcuL19wcm9wZXJ0eS1kZXNjJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKG9iamVjdCwgaW5kZXgsIHZhbHVlKSB7XG4gIGlmIChpbmRleCBpbiBvYmplY3QpICRkZWZpbmVQcm9wZXJ0eS5mKG9iamVjdCwgaW5kZXgsIGNyZWF0ZURlc2MoMCwgdmFsdWUpKTtcbiAgZWxzZSBvYmplY3RbaW5kZXhdID0gdmFsdWU7XG59O1xuIiwiLy8gb3B0aW9uYWwgLyBzaW1wbGUgY29udGV4dCBiaW5kaW5nXG52YXIgYUZ1bmN0aW9uID0gcmVxdWlyZSgnLi9fYS1mdW5jdGlvbicpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoZm4sIHRoYXQsIGxlbmd0aCkge1xuICBhRnVuY3Rpb24oZm4pO1xuICBpZiAodGhhdCA9PT0gdW5kZWZpbmVkKSByZXR1cm4gZm47XG4gIHN3aXRjaCAobGVuZ3RoKSB7XG4gICAgY2FzZSAxOiByZXR1cm4gZnVuY3Rpb24gKGEpIHtcbiAgICAgIHJldHVybiBmbi5jYWxsKHRoYXQsIGEpO1xuICAgIH07XG4gICAgY2FzZSAyOiByZXR1cm4gZnVuY3Rpb24gKGEsIGIpIHtcbiAgICAgIHJldHVybiBmbi5jYWxsKHRoYXQsIGEsIGIpO1xuICAgIH07XG4gICAgY2FzZSAzOiByZXR1cm4gZnVuY3Rpb24gKGEsIGIsIGMpIHtcbiAgICAgIHJldHVybiBmbi5jYWxsKHRoYXQsIGEsIGIsIGMpO1xuICAgIH07XG4gIH1cbiAgcmV0dXJuIGZ1bmN0aW9uICgvKiAuLi5hcmdzICovKSB7XG4gICAgcmV0dXJuIGZuLmFwcGx5KHRoYXQsIGFyZ3VtZW50cyk7XG4gIH07XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gMjAuMy40LjM2IC8gMTUuOS41LjQzIERhdGUucHJvdG90eXBlLnRvSVNPU3RyaW5nKClcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4vX2ZhaWxzJyk7XG52YXIgZ2V0VGltZSA9IERhdGUucHJvdG90eXBlLmdldFRpbWU7XG52YXIgJHRvSVNPU3RyaW5nID0gRGF0ZS5wcm90b3R5cGUudG9JU09TdHJpbmc7XG5cbnZhciBseiA9IGZ1bmN0aW9uIChudW0pIHtcbiAgcmV0dXJuIG51bSA+IDkgPyBudW0gOiAnMCcgKyBudW07XG59O1xuXG4vLyBQaGFudG9tSlMgLyBvbGQgV2ViS2l0IGhhcyBhIGJyb2tlbiBpbXBsZW1lbnRhdGlvbnNcbm1vZHVsZS5leHBvcnRzID0gKGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuICR0b0lTT1N0cmluZy5jYWxsKG5ldyBEYXRlKC01ZTEzIC0gMSkpICE9ICcwMzg1LTA3LTI1VDA3OjA2OjM5Ljk5OVonO1xufSkgfHwgIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgJHRvSVNPU3RyaW5nLmNhbGwobmV3IERhdGUoTmFOKSk7XG59KSkgPyBmdW5jdGlvbiB0b0lTT1N0cmluZygpIHtcbiAgaWYgKCFpc0Zpbml0ZShnZXRUaW1lLmNhbGwodGhpcykpKSB0aHJvdyBSYW5nZUVycm9yKCdJbnZhbGlkIHRpbWUgdmFsdWUnKTtcbiAgdmFyIGQgPSB0aGlzO1xuICB2YXIgeSA9IGQuZ2V0VVRDRnVsbFllYXIoKTtcbiAgdmFyIG0gPSBkLmdldFVUQ01pbGxpc2Vjb25kcygpO1xuICB2YXIgcyA9IHkgPCAwID8gJy0nIDogeSA+IDk5OTkgPyAnKycgOiAnJztcbiAgcmV0dXJuIHMgKyAoJzAwMDAwJyArIE1hdGguYWJzKHkpKS5zbGljZShzID8gLTYgOiAtNCkgK1xuICAgICctJyArIGx6KGQuZ2V0VVRDTW9udGgoKSArIDEpICsgJy0nICsgbHooZC5nZXRVVENEYXRlKCkpICtcbiAgICAnVCcgKyBseihkLmdldFVUQ0hvdXJzKCkpICsgJzonICsgbHooZC5nZXRVVENNaW51dGVzKCkpICtcbiAgICAnOicgKyBseihkLmdldFVUQ1NlY29uZHMoKSkgKyAnLicgKyAobSA+IDk5ID8gbSA6ICcwJyArIGx6KG0pKSArICdaJztcbn0gOiAkdG9JU09TdHJpbmc7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciB0b1ByaW1pdGl2ZSA9IHJlcXVpcmUoJy4vX3RvLXByaW1pdGl2ZScpO1xudmFyIE5VTUJFUiA9ICdudW1iZXInO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChoaW50KSB7XG4gIGlmIChoaW50ICE9PSAnc3RyaW5nJyAmJiBoaW50ICE9PSBOVU1CRVIgJiYgaGludCAhPT0gJ2RlZmF1bHQnKSB0aHJvdyBUeXBlRXJyb3IoJ0luY29ycmVjdCBoaW50Jyk7XG4gIHJldHVybiB0b1ByaW1pdGl2ZShhbk9iamVjdCh0aGlzKSwgaGludCAhPSBOVU1CRVIpO1xufTtcbiIsIi8vIDcuMi4xIFJlcXVpcmVPYmplY3RDb2VyY2libGUoYXJndW1lbnQpXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICBpZiAoaXQgPT0gdW5kZWZpbmVkKSB0aHJvdyBUeXBlRXJyb3IoXCJDYW4ndCBjYWxsIG1ldGhvZCBvbiAgXCIgKyBpdCk7XG4gIHJldHVybiBpdDtcbn07XG4iLCIvLyBUaGFuaydzIElFOCBmb3IgaGlzIGZ1bm55IGRlZmluZVByb3BlcnR5XG5tb2R1bGUuZXhwb3J0cyA9ICFyZXF1aXJlKCcuL19mYWlscycpKGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh7fSwgJ2EnLCB7IGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gNzsgfSB9KS5hICE9IDc7XG59KTtcbiIsInZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xudmFyIGRvY3VtZW50ID0gcmVxdWlyZSgnLi9fZ2xvYmFsJykuZG9jdW1lbnQ7XG4vLyB0eXBlb2YgZG9jdW1lbnQuY3JlYXRlRWxlbWVudCBpcyAnb2JqZWN0JyBpbiBvbGQgSUVcbnZhciBpcyA9IGlzT2JqZWN0KGRvY3VtZW50KSAmJiBpc09iamVjdChkb2N1bWVudC5jcmVhdGVFbGVtZW50KTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBpcyA/IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoaXQpIDoge307XG59O1xuIiwiLy8gSUUgOC0gZG9uJ3QgZW51bSBidWcga2V5c1xubW9kdWxlLmV4cG9ydHMgPSAoXG4gICdjb25zdHJ1Y3RvcixoYXNPd25Qcm9wZXJ0eSxpc1Byb3RvdHlwZU9mLHByb3BlcnR5SXNFbnVtZXJhYmxlLHRvTG9jYWxlU3RyaW5nLHRvU3RyaW5nLHZhbHVlT2YnXG4pLnNwbGl0KCcsJyk7XG4iLCIvLyBhbGwgZW51bWVyYWJsZSBvYmplY3Qga2V5cywgaW5jbHVkZXMgc3ltYm9sc1xudmFyIGdldEtleXMgPSByZXF1aXJlKCcuL19vYmplY3Qta2V5cycpO1xudmFyIGdPUFMgPSByZXF1aXJlKCcuL19vYmplY3QtZ29wcycpO1xudmFyIHBJRSA9IHJlcXVpcmUoJy4vX29iamVjdC1waWUnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHZhciByZXN1bHQgPSBnZXRLZXlzKGl0KTtcbiAgdmFyIGdldFN5bWJvbHMgPSBnT1BTLmY7XG4gIGlmIChnZXRTeW1ib2xzKSB7XG4gICAgdmFyIHN5bWJvbHMgPSBnZXRTeW1ib2xzKGl0KTtcbiAgICB2YXIgaXNFbnVtID0gcElFLmY7XG4gICAgdmFyIGkgPSAwO1xuICAgIHZhciBrZXk7XG4gICAgd2hpbGUgKHN5bWJvbHMubGVuZ3RoID4gaSkgaWYgKGlzRW51bS5jYWxsKGl0LCBrZXkgPSBzeW1ib2xzW2krK10pKSByZXN1bHQucHVzaChrZXkpO1xuICB9IHJldHVybiByZXN1bHQ7XG59O1xuIiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpO1xudmFyIGNvcmUgPSByZXF1aXJlKCcuL19jb3JlJyk7XG52YXIgaGlkZSA9IHJlcXVpcmUoJy4vX2hpZGUnKTtcbnZhciByZWRlZmluZSA9IHJlcXVpcmUoJy4vX3JlZGVmaW5lJyk7XG52YXIgY3R4ID0gcmVxdWlyZSgnLi9fY3R4Jyk7XG52YXIgUFJPVE9UWVBFID0gJ3Byb3RvdHlwZSc7XG5cbnZhciAkZXhwb3J0ID0gZnVuY3Rpb24gKHR5cGUsIG5hbWUsIHNvdXJjZSkge1xuICB2YXIgSVNfRk9SQ0VEID0gdHlwZSAmICRleHBvcnQuRjtcbiAgdmFyIElTX0dMT0JBTCA9IHR5cGUgJiAkZXhwb3J0Lkc7XG4gIHZhciBJU19TVEFUSUMgPSB0eXBlICYgJGV4cG9ydC5TO1xuICB2YXIgSVNfUFJPVE8gPSB0eXBlICYgJGV4cG9ydC5QO1xuICB2YXIgSVNfQklORCA9IHR5cGUgJiAkZXhwb3J0LkI7XG4gIHZhciB0YXJnZXQgPSBJU19HTE9CQUwgPyBnbG9iYWwgOiBJU19TVEFUSUMgPyBnbG9iYWxbbmFtZV0gfHwgKGdsb2JhbFtuYW1lXSA9IHt9KSA6IChnbG9iYWxbbmFtZV0gfHwge30pW1BST1RPVFlQRV07XG4gIHZhciBleHBvcnRzID0gSVNfR0xPQkFMID8gY29yZSA6IGNvcmVbbmFtZV0gfHwgKGNvcmVbbmFtZV0gPSB7fSk7XG4gIHZhciBleHBQcm90byA9IGV4cG9ydHNbUFJPVE9UWVBFXSB8fCAoZXhwb3J0c1tQUk9UT1RZUEVdID0ge30pO1xuICB2YXIga2V5LCBvd24sIG91dCwgZXhwO1xuICBpZiAoSVNfR0xPQkFMKSBzb3VyY2UgPSBuYW1lO1xuICBmb3IgKGtleSBpbiBzb3VyY2UpIHtcbiAgICAvLyBjb250YWlucyBpbiBuYXRpdmVcbiAgICBvd24gPSAhSVNfRk9SQ0VEICYmIHRhcmdldCAmJiB0YXJnZXRba2V5XSAhPT0gdW5kZWZpbmVkO1xuICAgIC8vIGV4cG9ydCBuYXRpdmUgb3IgcGFzc2VkXG4gICAgb3V0ID0gKG93biA/IHRhcmdldCA6IHNvdXJjZSlba2V5XTtcbiAgICAvLyBiaW5kIHRpbWVycyB0byBnbG9iYWwgZm9yIGNhbGwgZnJvbSBleHBvcnQgY29udGV4dFxuICAgIGV4cCA9IElTX0JJTkQgJiYgb3duID8gY3R4KG91dCwgZ2xvYmFsKSA6IElTX1BST1RPICYmIHR5cGVvZiBvdXQgPT0gJ2Z1bmN0aW9uJyA/IGN0eChGdW5jdGlvbi5jYWxsLCBvdXQpIDogb3V0O1xuICAgIC8vIGV4dGVuZCBnbG9iYWxcbiAgICBpZiAodGFyZ2V0KSByZWRlZmluZSh0YXJnZXQsIGtleSwgb3V0LCB0eXBlICYgJGV4cG9ydC5VKTtcbiAgICAvLyBleHBvcnRcbiAgICBpZiAoZXhwb3J0c1trZXldICE9IG91dCkgaGlkZShleHBvcnRzLCBrZXksIGV4cCk7XG4gICAgaWYgKElTX1BST1RPICYmIGV4cFByb3RvW2tleV0gIT0gb3V0KSBleHBQcm90b1trZXldID0gb3V0O1xuICB9XG59O1xuZ2xvYmFsLmNvcmUgPSBjb3JlO1xuLy8gdHlwZSBiaXRtYXBcbiRleHBvcnQuRiA9IDE7ICAgLy8gZm9yY2VkXG4kZXhwb3J0LkcgPSAyOyAgIC8vIGdsb2JhbFxuJGV4cG9ydC5TID0gNDsgICAvLyBzdGF0aWNcbiRleHBvcnQuUCA9IDg7ICAgLy8gcHJvdG9cbiRleHBvcnQuQiA9IDE2OyAgLy8gYmluZFxuJGV4cG9ydC5XID0gMzI7ICAvLyB3cmFwXG4kZXhwb3J0LlUgPSA2NDsgIC8vIHNhZmVcbiRleHBvcnQuUiA9IDEyODsgLy8gcmVhbCBwcm90byBtZXRob2QgZm9yIGBsaWJyYXJ5YFxubW9kdWxlLmV4cG9ydHMgPSAkZXhwb3J0O1xuIiwidmFyIE1BVENIID0gcmVxdWlyZSgnLi9fd2tzJykoJ21hdGNoJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChLRVkpIHtcbiAgdmFyIHJlID0gLy4vO1xuICB0cnkge1xuICAgICcvLi8nW0tFWV0ocmUpO1xuICB9IGNhdGNoIChlKSB7XG4gICAgdHJ5IHtcbiAgICAgIHJlW01BVENIXSA9IGZhbHNlO1xuICAgICAgcmV0dXJuICEnLy4vJ1tLRVldKHJlKTtcbiAgICB9IGNhdGNoIChmKSB7IC8qIGVtcHR5ICovIH1cbiAgfSByZXR1cm4gdHJ1ZTtcbn07XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChleGVjKSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuICEhZXhlYygpO1xuICB9IGNhdGNoIChlKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbn07XG4iLCIndXNlIHN0cmljdCc7XG5yZXF1aXJlKCcuL2VzNi5yZWdleHAuZXhlYycpO1xudmFyIHJlZGVmaW5lID0gcmVxdWlyZSgnLi9fcmVkZWZpbmUnKTtcbnZhciBoaWRlID0gcmVxdWlyZSgnLi9faGlkZScpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi9fZmFpbHMnKTtcbnZhciBkZWZpbmVkID0gcmVxdWlyZSgnLi9fZGVmaW5lZCcpO1xudmFyIHdrcyA9IHJlcXVpcmUoJy4vX3drcycpO1xudmFyIHJlZ2V4cEV4ZWMgPSByZXF1aXJlKCcuL19yZWdleHAtZXhlYycpO1xuXG52YXIgU1BFQ0lFUyA9IHdrcygnc3BlY2llcycpO1xuXG52YXIgUkVQTEFDRV9TVVBQT1JUU19OQU1FRF9HUk9VUFMgPSAhZmFpbHMoZnVuY3Rpb24gKCkge1xuICAvLyAjcmVwbGFjZSBuZWVkcyBidWlsdC1pbiBzdXBwb3J0IGZvciBuYW1lZCBncm91cHMuXG4gIC8vICNtYXRjaCB3b3JrcyBmaW5lIGJlY2F1c2UgaXQganVzdCByZXR1cm4gdGhlIGV4ZWMgcmVzdWx0cywgZXZlbiBpZiBpdCBoYXNcbiAgLy8gYSBcImdyb3BzXCIgcHJvcGVydHkuXG4gIHZhciByZSA9IC8uLztcbiAgcmUuZXhlYyA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgcmVzdWx0ID0gW107XG4gICAgcmVzdWx0Lmdyb3VwcyA9IHsgYTogJzcnIH07XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfTtcbiAgcmV0dXJuICcnLnJlcGxhY2UocmUsICckPGE+JykgIT09ICc3Jztcbn0pO1xuXG52YXIgU1BMSVRfV09SS1NfV0lUSF9PVkVSV1JJVFRFTl9FWEVDID0gKGZ1bmN0aW9uICgpIHtcbiAgLy8gQ2hyb21lIDUxIGhhcyBhIGJ1Z2d5IFwic3BsaXRcIiBpbXBsZW1lbnRhdGlvbiB3aGVuIFJlZ0V4cCNleGVjICE9PSBuYXRpdmVFeGVjXG4gIHZhciByZSA9IC8oPzopLztcbiAgdmFyIG9yaWdpbmFsRXhlYyA9IHJlLmV4ZWM7XG4gIHJlLmV4ZWMgPSBmdW5jdGlvbiAoKSB7IHJldHVybiBvcmlnaW5hbEV4ZWMuYXBwbHkodGhpcywgYXJndW1lbnRzKTsgfTtcbiAgdmFyIHJlc3VsdCA9ICdhYicuc3BsaXQocmUpO1xuICByZXR1cm4gcmVzdWx0Lmxlbmd0aCA9PT0gMiAmJiByZXN1bHRbMF0gPT09ICdhJyAmJiByZXN1bHRbMV0gPT09ICdiJztcbn0pKCk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKEtFWSwgbGVuZ3RoLCBleGVjKSB7XG4gIHZhciBTWU1CT0wgPSB3a3MoS0VZKTtcblxuICB2YXIgREVMRUdBVEVTX1RPX1NZTUJPTCA9ICFmYWlscyhmdW5jdGlvbiAoKSB7XG4gICAgLy8gU3RyaW5nIG1ldGhvZHMgY2FsbCBzeW1ib2wtbmFtZWQgUmVnRXAgbWV0aG9kc1xuICAgIHZhciBPID0ge307XG4gICAgT1tTWU1CT0xdID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gNzsgfTtcbiAgICByZXR1cm4gJydbS0VZXShPKSAhPSA3O1xuICB9KTtcblxuICB2YXIgREVMRUdBVEVTX1RPX0VYRUMgPSBERUxFR0FURVNfVE9fU1lNQk9MID8gIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgICAvLyBTeW1ib2wtbmFtZWQgUmVnRXhwIG1ldGhvZHMgY2FsbCAuZXhlY1xuICAgIHZhciBleGVjQ2FsbGVkID0gZmFsc2U7XG4gICAgdmFyIHJlID0gL2EvO1xuICAgIHJlLmV4ZWMgPSBmdW5jdGlvbiAoKSB7IGV4ZWNDYWxsZWQgPSB0cnVlOyByZXR1cm4gbnVsbDsgfTtcbiAgICBpZiAoS0VZID09PSAnc3BsaXQnKSB7XG4gICAgICAvLyBSZWdFeHBbQEBzcGxpdF0gZG9lc24ndCBjYWxsIHRoZSByZWdleCdzIGV4ZWMgbWV0aG9kLCBidXQgZmlyc3QgY3JlYXRlc1xuICAgICAgLy8gYSBuZXcgb25lLiBXZSBuZWVkIHRvIHJldHVybiB0aGUgcGF0Y2hlZCByZWdleCB3aGVuIGNyZWF0aW5nIHRoZSBuZXcgb25lLlxuICAgICAgcmUuY29uc3RydWN0b3IgPSB7fTtcbiAgICAgIHJlLmNvbnN0cnVjdG9yW1NQRUNJRVNdID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gcmU7IH07XG4gICAgfVxuICAgIHJlW1NZTUJPTF0oJycpO1xuICAgIHJldHVybiAhZXhlY0NhbGxlZDtcbiAgfSkgOiB1bmRlZmluZWQ7XG5cbiAgaWYgKFxuICAgICFERUxFR0FURVNfVE9fU1lNQk9MIHx8XG4gICAgIURFTEVHQVRFU19UT19FWEVDIHx8XG4gICAgKEtFWSA9PT0gJ3JlcGxhY2UnICYmICFSRVBMQUNFX1NVUFBPUlRTX05BTUVEX0dST1VQUykgfHxcbiAgICAoS0VZID09PSAnc3BsaXQnICYmICFTUExJVF9XT1JLU19XSVRIX09WRVJXUklUVEVOX0VYRUMpXG4gICkge1xuICAgIHZhciBuYXRpdmVSZWdFeHBNZXRob2QgPSAvLi9bU1lNQk9MXTtcbiAgICB2YXIgZm5zID0gZXhlYyhcbiAgICAgIGRlZmluZWQsXG4gICAgICBTWU1CT0wsXG4gICAgICAnJ1tLRVldLFxuICAgICAgZnVuY3Rpb24gbWF5YmVDYWxsTmF0aXZlKG5hdGl2ZU1ldGhvZCwgcmVnZXhwLCBzdHIsIGFyZzIsIGZvcmNlU3RyaW5nTWV0aG9kKSB7XG4gICAgICAgIGlmIChyZWdleHAuZXhlYyA9PT0gcmVnZXhwRXhlYykge1xuICAgICAgICAgIGlmIChERUxFR0FURVNfVE9fU1lNQk9MICYmICFmb3JjZVN0cmluZ01ldGhvZCkge1xuICAgICAgICAgICAgLy8gVGhlIG5hdGl2ZSBTdHJpbmcgbWV0aG9kIGFscmVhZHkgZGVsZWdhdGVzIHRvIEBAbWV0aG9kICh0aGlzXG4gICAgICAgICAgICAvLyBwb2x5ZmlsbGVkIGZ1bmN0aW9uKSwgbGVhc2luZyB0byBpbmZpbml0ZSByZWN1cnNpb24uXG4gICAgICAgICAgICAvLyBXZSBhdm9pZCBpdCBieSBkaXJlY3RseSBjYWxsaW5nIHRoZSBuYXRpdmUgQEBtZXRob2QgbWV0aG9kLlxuICAgICAgICAgICAgcmV0dXJuIHsgZG9uZTogdHJ1ZSwgdmFsdWU6IG5hdGl2ZVJlZ0V4cE1ldGhvZC5jYWxsKHJlZ2V4cCwgc3RyLCBhcmcyKSB9O1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4geyBkb25lOiB0cnVlLCB2YWx1ZTogbmF0aXZlTWV0aG9kLmNhbGwoc3RyLCByZWdleHAsIGFyZzIpIH07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHsgZG9uZTogZmFsc2UgfTtcbiAgICAgIH1cbiAgICApO1xuICAgIHZhciBzdHJmbiA9IGZuc1swXTtcbiAgICB2YXIgcnhmbiA9IGZuc1sxXTtcblxuICAgIHJlZGVmaW5lKFN0cmluZy5wcm90b3R5cGUsIEtFWSwgc3RyZm4pO1xuICAgIGhpZGUoUmVnRXhwLnByb3RvdHlwZSwgU1lNQk9MLCBsZW5ndGggPT0gMlxuICAgICAgLy8gMjEuMi41LjggUmVnRXhwLnByb3RvdHlwZVtAQHJlcGxhY2VdKHN0cmluZywgcmVwbGFjZVZhbHVlKVxuICAgICAgLy8gMjEuMi41LjExIFJlZ0V4cC5wcm90b3R5cGVbQEBzcGxpdF0oc3RyaW5nLCBsaW1pdClcbiAgICAgID8gZnVuY3Rpb24gKHN0cmluZywgYXJnKSB7IHJldHVybiByeGZuLmNhbGwoc3RyaW5nLCB0aGlzLCBhcmcpOyB9XG4gICAgICAvLyAyMS4yLjUuNiBSZWdFeHAucHJvdG90eXBlW0BAbWF0Y2hdKHN0cmluZylcbiAgICAgIC8vIDIxLjIuNS45IFJlZ0V4cC5wcm90b3R5cGVbQEBzZWFyY2hdKHN0cmluZylcbiAgICAgIDogZnVuY3Rpb24gKHN0cmluZykgeyByZXR1cm4gcnhmbi5jYWxsKHN0cmluZywgdGhpcyk7IH1cbiAgICApO1xuICB9XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gMjEuMi41LjMgZ2V0IFJlZ0V4cC5wcm90b3R5cGUuZmxhZ3NcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciB0aGF0ID0gYW5PYmplY3QodGhpcyk7XG4gIHZhciByZXN1bHQgPSAnJztcbiAgaWYgKHRoYXQuZ2xvYmFsKSByZXN1bHQgKz0gJ2cnO1xuICBpZiAodGhhdC5pZ25vcmVDYXNlKSByZXN1bHQgKz0gJ2knO1xuICBpZiAodGhhdC5tdWx0aWxpbmUpIHJlc3VsdCArPSAnbSc7XG4gIGlmICh0aGF0LnVuaWNvZGUpIHJlc3VsdCArPSAndSc7XG4gIGlmICh0aGF0LnN0aWNreSkgcmVzdWx0ICs9ICd5JztcbiAgcmV0dXJuIHJlc3VsdDtcbn07XG4iLCIndXNlIHN0cmljdCc7XG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL3Byb3Bvc2FsLWZsYXRNYXAvI3NlYy1GbGF0dGVuSW50b0FycmF5XG52YXIgaXNBcnJheSA9IHJlcXVpcmUoJy4vX2lzLWFycmF5Jyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpO1xudmFyIGN0eCA9IHJlcXVpcmUoJy4vX2N0eCcpO1xudmFyIElTX0NPTkNBVF9TUFJFQURBQkxFID0gcmVxdWlyZSgnLi9fd2tzJykoJ2lzQ29uY2F0U3ByZWFkYWJsZScpO1xuXG5mdW5jdGlvbiBmbGF0dGVuSW50b0FycmF5KHRhcmdldCwgb3JpZ2luYWwsIHNvdXJjZSwgc291cmNlTGVuLCBzdGFydCwgZGVwdGgsIG1hcHBlciwgdGhpc0FyZykge1xuICB2YXIgdGFyZ2V0SW5kZXggPSBzdGFydDtcbiAgdmFyIHNvdXJjZUluZGV4ID0gMDtcbiAgdmFyIG1hcEZuID0gbWFwcGVyID8gY3R4KG1hcHBlciwgdGhpc0FyZywgMykgOiBmYWxzZTtcbiAgdmFyIGVsZW1lbnQsIHNwcmVhZGFibGU7XG5cbiAgd2hpbGUgKHNvdXJjZUluZGV4IDwgc291cmNlTGVuKSB7XG4gICAgaWYgKHNvdXJjZUluZGV4IGluIHNvdXJjZSkge1xuICAgICAgZWxlbWVudCA9IG1hcEZuID8gbWFwRm4oc291cmNlW3NvdXJjZUluZGV4XSwgc291cmNlSW5kZXgsIG9yaWdpbmFsKSA6IHNvdXJjZVtzb3VyY2VJbmRleF07XG5cbiAgICAgIHNwcmVhZGFibGUgPSBmYWxzZTtcbiAgICAgIGlmIChpc09iamVjdChlbGVtZW50KSkge1xuICAgICAgICBzcHJlYWRhYmxlID0gZWxlbWVudFtJU19DT05DQVRfU1BSRUFEQUJMRV07XG4gICAgICAgIHNwcmVhZGFibGUgPSBzcHJlYWRhYmxlICE9PSB1bmRlZmluZWQgPyAhIXNwcmVhZGFibGUgOiBpc0FycmF5KGVsZW1lbnQpO1xuICAgICAgfVxuXG4gICAgICBpZiAoc3ByZWFkYWJsZSAmJiBkZXB0aCA+IDApIHtcbiAgICAgICAgdGFyZ2V0SW5kZXggPSBmbGF0dGVuSW50b0FycmF5KHRhcmdldCwgb3JpZ2luYWwsIGVsZW1lbnQsIHRvTGVuZ3RoKGVsZW1lbnQubGVuZ3RoKSwgdGFyZ2V0SW5kZXgsIGRlcHRoIC0gMSkgLSAxO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKHRhcmdldEluZGV4ID49IDB4MWZmZmZmZmZmZmZmZmYpIHRocm93IFR5cGVFcnJvcigpO1xuICAgICAgICB0YXJnZXRbdGFyZ2V0SW5kZXhdID0gZWxlbWVudDtcbiAgICAgIH1cblxuICAgICAgdGFyZ2V0SW5kZXgrKztcbiAgICB9XG4gICAgc291cmNlSW5kZXgrKztcbiAgfVxuICByZXR1cm4gdGFyZ2V0SW5kZXg7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZmxhdHRlbkludG9BcnJheTtcbiIsInZhciBjdHggPSByZXF1aXJlKCcuL19jdHgnKTtcbnZhciBjYWxsID0gcmVxdWlyZSgnLi9faXRlci1jYWxsJyk7XG52YXIgaXNBcnJheUl0ZXIgPSByZXF1aXJlKCcuL19pcy1hcnJheS1pdGVyJyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpO1xudmFyIGdldEl0ZXJGbiA9IHJlcXVpcmUoJy4vY29yZS5nZXQtaXRlcmF0b3ItbWV0aG9kJyk7XG52YXIgQlJFQUsgPSB7fTtcbnZhciBSRVRVUk4gPSB7fTtcbnZhciBleHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXRlcmFibGUsIGVudHJpZXMsIGZuLCB0aGF0LCBJVEVSQVRPUikge1xuICB2YXIgaXRlckZuID0gSVRFUkFUT1IgPyBmdW5jdGlvbiAoKSB7IHJldHVybiBpdGVyYWJsZTsgfSA6IGdldEl0ZXJGbihpdGVyYWJsZSk7XG4gIHZhciBmID0gY3R4KGZuLCB0aGF0LCBlbnRyaWVzID8gMiA6IDEpO1xuICB2YXIgaW5kZXggPSAwO1xuICB2YXIgbGVuZ3RoLCBzdGVwLCBpdGVyYXRvciwgcmVzdWx0O1xuICBpZiAodHlwZW9mIGl0ZXJGbiAhPSAnZnVuY3Rpb24nKSB0aHJvdyBUeXBlRXJyb3IoaXRlcmFibGUgKyAnIGlzIG5vdCBpdGVyYWJsZSEnKTtcbiAgLy8gZmFzdCBjYXNlIGZvciBhcnJheXMgd2l0aCBkZWZhdWx0IGl0ZXJhdG9yXG4gIGlmIChpc0FycmF5SXRlcihpdGVyRm4pKSBmb3IgKGxlbmd0aCA9IHRvTGVuZ3RoKGl0ZXJhYmxlLmxlbmd0aCk7IGxlbmd0aCA+IGluZGV4OyBpbmRleCsrKSB7XG4gICAgcmVzdWx0ID0gZW50cmllcyA/IGYoYW5PYmplY3Qoc3RlcCA9IGl0ZXJhYmxlW2luZGV4XSlbMF0sIHN0ZXBbMV0pIDogZihpdGVyYWJsZVtpbmRleF0pO1xuICAgIGlmIChyZXN1bHQgPT09IEJSRUFLIHx8IHJlc3VsdCA9PT0gUkVUVVJOKSByZXR1cm4gcmVzdWx0O1xuICB9IGVsc2UgZm9yIChpdGVyYXRvciA9IGl0ZXJGbi5jYWxsKGl0ZXJhYmxlKTsgIShzdGVwID0gaXRlcmF0b3IubmV4dCgpKS5kb25lOykge1xuICAgIHJlc3VsdCA9IGNhbGwoaXRlcmF0b3IsIGYsIHN0ZXAudmFsdWUsIGVudHJpZXMpO1xuICAgIGlmIChyZXN1bHQgPT09IEJSRUFLIHx8IHJlc3VsdCA9PT0gUkVUVVJOKSByZXR1cm4gcmVzdWx0O1xuICB9XG59O1xuZXhwb3J0cy5CUkVBSyA9IEJSRUFLO1xuZXhwb3J0cy5SRVRVUk4gPSBSRVRVUk47XG4iLCJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vX3NoYXJlZCcpKCduYXRpdmUtZnVuY3Rpb24tdG8tc3RyaW5nJywgRnVuY3Rpb24udG9TdHJpbmcpO1xuIiwiLy8gaHR0cHM6Ly9naXRodWIuY29tL3psb2lyb2NrL2NvcmUtanMvaXNzdWVzLzg2I2lzc3VlY29tbWVudC0xMTU3NTkwMjhcbnZhciBnbG9iYWwgPSBtb2R1bGUuZXhwb3J0cyA9IHR5cGVvZiB3aW5kb3cgIT0gJ3VuZGVmaW5lZCcgJiYgd2luZG93Lk1hdGggPT0gTWF0aFxuICA/IHdpbmRvdyA6IHR5cGVvZiBzZWxmICE9ICd1bmRlZmluZWQnICYmIHNlbGYuTWF0aCA9PSBNYXRoID8gc2VsZlxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tbmV3LWZ1bmNcbiAgOiBGdW5jdGlvbigncmV0dXJuIHRoaXMnKSgpO1xuaWYgKHR5cGVvZiBfX2cgPT0gJ251bWJlcicpIF9fZyA9IGdsb2JhbDsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bmRlZlxuIiwidmFyIGhhc093blByb3BlcnR5ID0ge30uaGFzT3duUHJvcGVydHk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCwga2V5KSB7XG4gIHJldHVybiBoYXNPd25Qcm9wZXJ0eS5jYWxsKGl0LCBrZXkpO1xufTtcbiIsInZhciBkUCA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpO1xudmFyIGNyZWF0ZURlc2MgPSByZXF1aXJlKCcuL19wcm9wZXJ0eS1kZXNjJyk7XG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJykgPyBmdW5jdGlvbiAob2JqZWN0LCBrZXksIHZhbHVlKSB7XG4gIHJldHVybiBkUC5mKG9iamVjdCwga2V5LCBjcmVhdGVEZXNjKDEsIHZhbHVlKSk7XG59IDogZnVuY3Rpb24gKG9iamVjdCwga2V5LCB2YWx1ZSkge1xuICBvYmplY3Rba2V5XSA9IHZhbHVlO1xuICByZXR1cm4gb2JqZWN0O1xufTtcbiIsInZhciBkb2N1bWVudCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpLmRvY3VtZW50O1xubW9kdWxlLmV4cG9ydHMgPSBkb2N1bWVudCAmJiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7XG4iLCJtb2R1bGUuZXhwb3J0cyA9ICFyZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpICYmICFyZXF1aXJlKCcuL19mYWlscycpKGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShyZXF1aXJlKCcuL19kb20tY3JlYXRlJykoJ2RpdicpLCAnYScsIHsgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiA3OyB9IH0pLmEgIT0gNztcbn0pO1xuIiwidmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG52YXIgc2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKCcuL19zZXQtcHJvdG8nKS5zZXQ7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICh0aGF0LCB0YXJnZXQsIEMpIHtcbiAgdmFyIFMgPSB0YXJnZXQuY29uc3RydWN0b3I7XG4gIHZhciBQO1xuICBpZiAoUyAhPT0gQyAmJiB0eXBlb2YgUyA9PSAnZnVuY3Rpb24nICYmIChQID0gUy5wcm90b3R5cGUpICE9PSBDLnByb3RvdHlwZSAmJiBpc09iamVjdChQKSAmJiBzZXRQcm90b3R5cGVPZikge1xuICAgIHNldFByb3RvdHlwZU9mKHRoYXQsIFApO1xuICB9IHJldHVybiB0aGF0O1xufTtcbiIsIi8vIGZhc3QgYXBwbHksIGh0dHA6Ly9qc3BlcmYubG5raXQuY29tL2Zhc3QtYXBwbHkvNVxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoZm4sIGFyZ3MsIHRoYXQpIHtcbiAgdmFyIHVuID0gdGhhdCA9PT0gdW5kZWZpbmVkO1xuICBzd2l0Y2ggKGFyZ3MubGVuZ3RoKSB7XG4gICAgY2FzZSAwOiByZXR1cm4gdW4gPyBmbigpXG4gICAgICAgICAgICAgICAgICAgICAgOiBmbi5jYWxsKHRoYXQpO1xuICAgIGNhc2UgMTogcmV0dXJuIHVuID8gZm4oYXJnc1swXSlcbiAgICAgICAgICAgICAgICAgICAgICA6IGZuLmNhbGwodGhhdCwgYXJnc1swXSk7XG4gICAgY2FzZSAyOiByZXR1cm4gdW4gPyBmbihhcmdzWzBdLCBhcmdzWzFdKVxuICAgICAgICAgICAgICAgICAgICAgIDogZm4uY2FsbCh0aGF0LCBhcmdzWzBdLCBhcmdzWzFdKTtcbiAgICBjYXNlIDM6IHJldHVybiB1biA/IGZuKGFyZ3NbMF0sIGFyZ3NbMV0sIGFyZ3NbMl0pXG4gICAgICAgICAgICAgICAgICAgICAgOiBmbi5jYWxsKHRoYXQsIGFyZ3NbMF0sIGFyZ3NbMV0sIGFyZ3NbMl0pO1xuICAgIGNhc2UgNDogcmV0dXJuIHVuID8gZm4oYXJnc1swXSwgYXJnc1sxXSwgYXJnc1syXSwgYXJnc1szXSlcbiAgICAgICAgICAgICAgICAgICAgICA6IGZuLmNhbGwodGhhdCwgYXJnc1swXSwgYXJnc1sxXSwgYXJnc1syXSwgYXJnc1szXSk7XG4gIH0gcmV0dXJuIGZuLmFwcGx5KHRoYXQsIGFyZ3MpO1xufTtcbiIsIi8vIGZhbGxiYWNrIGZvciBub24tYXJyYXktbGlrZSBFUzMgYW5kIG5vbi1lbnVtZXJhYmxlIG9sZCBWOCBzdHJpbmdzXG52YXIgY29mID0gcmVxdWlyZSgnLi9fY29mJyk7XG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcHJvdG90eXBlLWJ1aWx0aW5zXG5tb2R1bGUuZXhwb3J0cyA9IE9iamVjdCgneicpLnByb3BlcnR5SXNFbnVtZXJhYmxlKDApID8gT2JqZWN0IDogZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBjb2YoaXQpID09ICdTdHJpbmcnID8gaXQuc3BsaXQoJycpIDogT2JqZWN0KGl0KTtcbn07XG4iLCIvLyBjaGVjayBvbiBkZWZhdWx0IEFycmF5IGl0ZXJhdG9yXG52YXIgSXRlcmF0b3JzID0gcmVxdWlyZSgnLi9faXRlcmF0b3JzJyk7XG52YXIgSVRFUkFUT1IgPSByZXF1aXJlKCcuL193a3MnKSgnaXRlcmF0b3InKTtcbnZhciBBcnJheVByb3RvID0gQXJyYXkucHJvdG90eXBlO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gaXQgIT09IHVuZGVmaW5lZCAmJiAoSXRlcmF0b3JzLkFycmF5ID09PSBpdCB8fCBBcnJheVByb3RvW0lURVJBVE9SXSA9PT0gaXQpO1xufTtcbiIsIi8vIDcuMi4yIElzQXJyYXkoYXJndW1lbnQpXG52YXIgY29mID0gcmVxdWlyZSgnLi9fY29mJyk7XG5tb2R1bGUuZXhwb3J0cyA9IEFycmF5LmlzQXJyYXkgfHwgZnVuY3Rpb24gaXNBcnJheShhcmcpIHtcbiAgcmV0dXJuIGNvZihhcmcpID09ICdBcnJheSc7XG59O1xuIiwiLy8gMjAuMS4yLjMgTnVtYmVyLmlzSW50ZWdlcihudW1iZXIpXG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbnZhciBmbG9vciA9IE1hdGguZmxvb3I7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGlzSW50ZWdlcihpdCkge1xuICByZXR1cm4gIWlzT2JqZWN0KGl0KSAmJiBpc0Zpbml0ZShpdCkgJiYgZmxvb3IoaXQpID09PSBpdDtcbn07XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gdHlwZW9mIGl0ID09PSAnb2JqZWN0JyA/IGl0ICE9PSBudWxsIDogdHlwZW9mIGl0ID09PSAnZnVuY3Rpb24nO1xufTtcbiIsIi8vIDcuMi44IElzUmVnRXhwKGFyZ3VtZW50KVxudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG52YXIgY29mID0gcmVxdWlyZSgnLi9fY29mJyk7XG52YXIgTUFUQ0ggPSByZXF1aXJlKCcuL193a3MnKSgnbWF0Y2gnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHZhciBpc1JlZ0V4cDtcbiAgcmV0dXJuIGlzT2JqZWN0KGl0KSAmJiAoKGlzUmVnRXhwID0gaXRbTUFUQ0hdKSAhPT0gdW5kZWZpbmVkID8gISFpc1JlZ0V4cCA6IGNvZihpdCkgPT0gJ1JlZ0V4cCcpO1xufTtcbiIsIi8vIGNhbGwgc29tZXRoaW5nIG9uIGl0ZXJhdG9yIHN0ZXAgd2l0aCBzYWZlIGNsb3Npbmcgb24gZXJyb3JcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXRlcmF0b3IsIGZuLCB2YWx1ZSwgZW50cmllcykge1xuICB0cnkge1xuICAgIHJldHVybiBlbnRyaWVzID8gZm4oYW5PYmplY3QodmFsdWUpWzBdLCB2YWx1ZVsxXSkgOiBmbih2YWx1ZSk7XG4gIC8vIDcuNC42IEl0ZXJhdG9yQ2xvc2UoaXRlcmF0b3IsIGNvbXBsZXRpb24pXG4gIH0gY2F0Y2ggKGUpIHtcbiAgICB2YXIgcmV0ID0gaXRlcmF0b3JbJ3JldHVybiddO1xuICAgIGlmIChyZXQgIT09IHVuZGVmaW5lZCkgYW5PYmplY3QocmV0LmNhbGwoaXRlcmF0b3IpKTtcbiAgICB0aHJvdyBlO1xuICB9XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGNyZWF0ZSA9IHJlcXVpcmUoJy4vX29iamVjdC1jcmVhdGUnKTtcbnZhciBkZXNjcmlwdG9yID0gcmVxdWlyZSgnLi9fcHJvcGVydHktZGVzYycpO1xudmFyIHNldFRvU3RyaW5nVGFnID0gcmVxdWlyZSgnLi9fc2V0LXRvLXN0cmluZy10YWcnKTtcbnZhciBJdGVyYXRvclByb3RvdHlwZSA9IHt9O1xuXG4vLyAyNS4xLjIuMS4xICVJdGVyYXRvclByb3RvdHlwZSVbQEBpdGVyYXRvcl0oKVxucmVxdWlyZSgnLi9faGlkZScpKEl0ZXJhdG9yUHJvdG90eXBlLCByZXF1aXJlKCcuL193a3MnKSgnaXRlcmF0b3InKSwgZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpczsgfSk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBOQU1FLCBuZXh0KSB7XG4gIENvbnN0cnVjdG9yLnByb3RvdHlwZSA9IGNyZWF0ZShJdGVyYXRvclByb3RvdHlwZSwgeyBuZXh0OiBkZXNjcmlwdG9yKDEsIG5leHQpIH0pO1xuICBzZXRUb1N0cmluZ1RhZyhDb25zdHJ1Y3RvciwgTkFNRSArICcgSXRlcmF0b3InKTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgTElCUkFSWSA9IHJlcXVpcmUoJy4vX2xpYnJhcnknKTtcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgcmVkZWZpbmUgPSByZXF1aXJlKCcuL19yZWRlZmluZScpO1xudmFyIGhpZGUgPSByZXF1aXJlKCcuL19oaWRlJyk7XG52YXIgSXRlcmF0b3JzID0gcmVxdWlyZSgnLi9faXRlcmF0b3JzJyk7XG52YXIgJGl0ZXJDcmVhdGUgPSByZXF1aXJlKCcuL19pdGVyLWNyZWF0ZScpO1xudmFyIHNldFRvU3RyaW5nVGFnID0gcmVxdWlyZSgnLi9fc2V0LXRvLXN0cmluZy10YWcnKTtcbnZhciBnZXRQcm90b3R5cGVPZiA9IHJlcXVpcmUoJy4vX29iamVjdC1ncG8nKTtcbnZhciBJVEVSQVRPUiA9IHJlcXVpcmUoJy4vX3drcycpKCdpdGVyYXRvcicpO1xudmFyIEJVR0dZID0gIShbXS5rZXlzICYmICduZXh0JyBpbiBbXS5rZXlzKCkpOyAvLyBTYWZhcmkgaGFzIGJ1Z2d5IGl0ZXJhdG9ycyB3L28gYG5leHRgXG52YXIgRkZfSVRFUkFUT1IgPSAnQEBpdGVyYXRvcic7XG52YXIgS0VZUyA9ICdrZXlzJztcbnZhciBWQUxVRVMgPSAndmFsdWVzJztcblxudmFyIHJldHVyblRoaXMgPSBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzOyB9O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChCYXNlLCBOQU1FLCBDb25zdHJ1Y3RvciwgbmV4dCwgREVGQVVMVCwgSVNfU0VULCBGT1JDRUQpIHtcbiAgJGl0ZXJDcmVhdGUoQ29uc3RydWN0b3IsIE5BTUUsIG5leHQpO1xuICB2YXIgZ2V0TWV0aG9kID0gZnVuY3Rpb24gKGtpbmQpIHtcbiAgICBpZiAoIUJVR0dZICYmIGtpbmQgaW4gcHJvdG8pIHJldHVybiBwcm90b1traW5kXTtcbiAgICBzd2l0Y2ggKGtpbmQpIHtcbiAgICAgIGNhc2UgS0VZUzogcmV0dXJuIGZ1bmN0aW9uIGtleXMoKSB7IHJldHVybiBuZXcgQ29uc3RydWN0b3IodGhpcywga2luZCk7IH07XG4gICAgICBjYXNlIFZBTFVFUzogcmV0dXJuIGZ1bmN0aW9uIHZhbHVlcygpIHsgcmV0dXJuIG5ldyBDb25zdHJ1Y3Rvcih0aGlzLCBraW5kKTsgfTtcbiAgICB9IHJldHVybiBmdW5jdGlvbiBlbnRyaWVzKCkgeyByZXR1cm4gbmV3IENvbnN0cnVjdG9yKHRoaXMsIGtpbmQpOyB9O1xuICB9O1xuICB2YXIgVEFHID0gTkFNRSArICcgSXRlcmF0b3InO1xuICB2YXIgREVGX1ZBTFVFUyA9IERFRkFVTFQgPT0gVkFMVUVTO1xuICB2YXIgVkFMVUVTX0JVRyA9IGZhbHNlO1xuICB2YXIgcHJvdG8gPSBCYXNlLnByb3RvdHlwZTtcbiAgdmFyICRuYXRpdmUgPSBwcm90b1tJVEVSQVRPUl0gfHwgcHJvdG9bRkZfSVRFUkFUT1JdIHx8IERFRkFVTFQgJiYgcHJvdG9bREVGQVVMVF07XG4gIHZhciAkZGVmYXVsdCA9ICRuYXRpdmUgfHwgZ2V0TWV0aG9kKERFRkFVTFQpO1xuICB2YXIgJGVudHJpZXMgPSBERUZBVUxUID8gIURFRl9WQUxVRVMgPyAkZGVmYXVsdCA6IGdldE1ldGhvZCgnZW50cmllcycpIDogdW5kZWZpbmVkO1xuICB2YXIgJGFueU5hdGl2ZSA9IE5BTUUgPT0gJ0FycmF5JyA/IHByb3RvLmVudHJpZXMgfHwgJG5hdGl2ZSA6ICRuYXRpdmU7XG4gIHZhciBtZXRob2RzLCBrZXksIEl0ZXJhdG9yUHJvdG90eXBlO1xuICAvLyBGaXggbmF0aXZlXG4gIGlmICgkYW55TmF0aXZlKSB7XG4gICAgSXRlcmF0b3JQcm90b3R5cGUgPSBnZXRQcm90b3R5cGVPZigkYW55TmF0aXZlLmNhbGwobmV3IEJhc2UoKSkpO1xuICAgIGlmIChJdGVyYXRvclByb3RvdHlwZSAhPT0gT2JqZWN0LnByb3RvdHlwZSAmJiBJdGVyYXRvclByb3RvdHlwZS5uZXh0KSB7XG4gICAgICAvLyBTZXQgQEB0b1N0cmluZ1RhZyB0byBuYXRpdmUgaXRlcmF0b3JzXG4gICAgICBzZXRUb1N0cmluZ1RhZyhJdGVyYXRvclByb3RvdHlwZSwgVEFHLCB0cnVlKTtcbiAgICAgIC8vIGZpeCBmb3Igc29tZSBvbGQgZW5naW5lc1xuICAgICAgaWYgKCFMSUJSQVJZICYmIHR5cGVvZiBJdGVyYXRvclByb3RvdHlwZVtJVEVSQVRPUl0gIT0gJ2Z1bmN0aW9uJykgaGlkZShJdGVyYXRvclByb3RvdHlwZSwgSVRFUkFUT1IsIHJldHVyblRoaXMpO1xuICAgIH1cbiAgfVxuICAvLyBmaXggQXJyYXkje3ZhbHVlcywgQEBpdGVyYXRvcn0ubmFtZSBpbiBWOCAvIEZGXG4gIGlmIChERUZfVkFMVUVTICYmICRuYXRpdmUgJiYgJG5hdGl2ZS5uYW1lICE9PSBWQUxVRVMpIHtcbiAgICBWQUxVRVNfQlVHID0gdHJ1ZTtcbiAgICAkZGVmYXVsdCA9IGZ1bmN0aW9uIHZhbHVlcygpIHsgcmV0dXJuICRuYXRpdmUuY2FsbCh0aGlzKTsgfTtcbiAgfVxuICAvLyBEZWZpbmUgaXRlcmF0b3JcbiAgaWYgKCghTElCUkFSWSB8fCBGT1JDRUQpICYmIChCVUdHWSB8fCBWQUxVRVNfQlVHIHx8ICFwcm90b1tJVEVSQVRPUl0pKSB7XG4gICAgaGlkZShwcm90bywgSVRFUkFUT1IsICRkZWZhdWx0KTtcbiAgfVxuICAvLyBQbHVnIGZvciBsaWJyYXJ5XG4gIEl0ZXJhdG9yc1tOQU1FXSA9ICRkZWZhdWx0O1xuICBJdGVyYXRvcnNbVEFHXSA9IHJldHVyblRoaXM7XG4gIGlmIChERUZBVUxUKSB7XG4gICAgbWV0aG9kcyA9IHtcbiAgICAgIHZhbHVlczogREVGX1ZBTFVFUyA/ICRkZWZhdWx0IDogZ2V0TWV0aG9kKFZBTFVFUyksXG4gICAgICBrZXlzOiBJU19TRVQgPyAkZGVmYXVsdCA6IGdldE1ldGhvZChLRVlTKSxcbiAgICAgIGVudHJpZXM6ICRlbnRyaWVzXG4gICAgfTtcbiAgICBpZiAoRk9SQ0VEKSBmb3IgKGtleSBpbiBtZXRob2RzKSB7XG4gICAgICBpZiAoIShrZXkgaW4gcHJvdG8pKSByZWRlZmluZShwcm90bywga2V5LCBtZXRob2RzW2tleV0pO1xuICAgIH0gZWxzZSAkZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqIChCVUdHWSB8fCBWQUxVRVNfQlVHKSwgTkFNRSwgbWV0aG9kcyk7XG4gIH1cbiAgcmV0dXJuIG1ldGhvZHM7XG59O1xuIiwidmFyIElURVJBVE9SID0gcmVxdWlyZSgnLi9fd2tzJykoJ2l0ZXJhdG9yJyk7XG52YXIgU0FGRV9DTE9TSU5HID0gZmFsc2U7XG5cbnRyeSB7XG4gIHZhciByaXRlciA9IFs3XVtJVEVSQVRPUl0oKTtcbiAgcml0ZXJbJ3JldHVybiddID0gZnVuY3Rpb24gKCkgeyBTQUZFX0NMT1NJTkcgPSB0cnVlOyB9O1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdGhyb3ctbGl0ZXJhbFxuICBBcnJheS5mcm9tKHJpdGVyLCBmdW5jdGlvbiAoKSB7IHRocm93IDI7IH0pO1xufSBjYXRjaCAoZSkgeyAvKiBlbXB0eSAqLyB9XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGV4ZWMsIHNraXBDbG9zaW5nKSB7XG4gIGlmICghc2tpcENsb3NpbmcgJiYgIVNBRkVfQ0xPU0lORykgcmV0dXJuIGZhbHNlO1xuICB2YXIgc2FmZSA9IGZhbHNlO1xuICB0cnkge1xuICAgIHZhciBhcnIgPSBbN107XG4gICAgdmFyIGl0ZXIgPSBhcnJbSVRFUkFUT1JdKCk7XG4gICAgaXRlci5uZXh0ID0gZnVuY3Rpb24gKCkgeyByZXR1cm4geyBkb25lOiBzYWZlID0gdHJ1ZSB9OyB9O1xuICAgIGFycltJVEVSQVRPUl0gPSBmdW5jdGlvbiAoKSB7IHJldHVybiBpdGVyOyB9O1xuICAgIGV4ZWMoYXJyKTtcbiAgfSBjYXRjaCAoZSkgeyAvKiBlbXB0eSAqLyB9XG4gIHJldHVybiBzYWZlO1xufTtcbiIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGRvbmUsIHZhbHVlKSB7XG4gIHJldHVybiB7IHZhbHVlOiB2YWx1ZSwgZG9uZTogISFkb25lIH07XG59O1xuIiwibW9kdWxlLmV4cG9ydHMgPSB7fTtcbiIsIm1vZHVsZS5leHBvcnRzID0gZmFsc2U7XG4iLCIvLyAyMC4yLjIuMTQgTWF0aC5leHBtMSh4KVxudmFyICRleHBtMSA9IE1hdGguZXhwbTE7XG5tb2R1bGUuZXhwb3J0cyA9ICghJGV4cG0xXG4gIC8vIE9sZCBGRiBidWdcbiAgfHwgJGV4cG0xKDEwKSA+IDIyMDI1LjQ2NTc5NDgwNjcxOSB8fCAkZXhwbTEoMTApIDwgMjIwMjUuNDY1Nzk0ODA2NzE2NTE2OFxuICAvLyBUb3IgQnJvd3NlciBidWdcbiAgfHwgJGV4cG0xKC0yZS0xNykgIT0gLTJlLTE3XG4pID8gZnVuY3Rpb24gZXhwbTEoeCkge1xuICByZXR1cm4gKHggPSAreCkgPT0gMCA/IHggOiB4ID4gLTFlLTYgJiYgeCA8IDFlLTYgPyB4ICsgeCAqIHggLyAyIDogTWF0aC5leHAoeCkgLSAxO1xufSA6ICRleHBtMTtcbiIsIi8vIDIwLjIuMi4xNiBNYXRoLmZyb3VuZCh4KVxudmFyIHNpZ24gPSByZXF1aXJlKCcuL19tYXRoLXNpZ24nKTtcbnZhciBwb3cgPSBNYXRoLnBvdztcbnZhciBFUFNJTE9OID0gcG93KDIsIC01Mik7XG52YXIgRVBTSUxPTjMyID0gcG93KDIsIC0yMyk7XG52YXIgTUFYMzIgPSBwb3coMiwgMTI3KSAqICgyIC0gRVBTSUxPTjMyKTtcbnZhciBNSU4zMiA9IHBvdygyLCAtMTI2KTtcblxudmFyIHJvdW5kVGllc1RvRXZlbiA9IGZ1bmN0aW9uIChuKSB7XG4gIHJldHVybiBuICsgMSAvIEVQU0lMT04gLSAxIC8gRVBTSUxPTjtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gTWF0aC5mcm91bmQgfHwgZnVuY3Rpb24gZnJvdW5kKHgpIHtcbiAgdmFyICRhYnMgPSBNYXRoLmFicyh4KTtcbiAgdmFyICRzaWduID0gc2lnbih4KTtcbiAgdmFyIGEsIHJlc3VsdDtcbiAgaWYgKCRhYnMgPCBNSU4zMikgcmV0dXJuICRzaWduICogcm91bmRUaWVzVG9FdmVuKCRhYnMgLyBNSU4zMiAvIEVQU0lMT04zMikgKiBNSU4zMiAqIEVQU0lMT04zMjtcbiAgYSA9ICgxICsgRVBTSUxPTjMyIC8gRVBTSUxPTikgKiAkYWJzO1xuICByZXN1bHQgPSBhIC0gKGEgLSAkYWJzKTtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXNlbGYtY29tcGFyZVxuICBpZiAocmVzdWx0ID4gTUFYMzIgfHwgcmVzdWx0ICE9IHJlc3VsdCkgcmV0dXJuICRzaWduICogSW5maW5pdHk7XG4gIHJldHVybiAkc2lnbiAqIHJlc3VsdDtcbn07XG4iLCIvLyAyMC4yLjIuMjAgTWF0aC5sb2cxcCh4KVxubW9kdWxlLmV4cG9ydHMgPSBNYXRoLmxvZzFwIHx8IGZ1bmN0aW9uIGxvZzFwKHgpIHtcbiAgcmV0dXJuICh4ID0gK3gpID4gLTFlLTggJiYgeCA8IDFlLTggPyB4IC0geCAqIHggLyAyIDogTWF0aC5sb2coMSArIHgpO1xufTtcbiIsIi8vIDIwLjIuMi4yOCBNYXRoLnNpZ24oeClcbm1vZHVsZS5leHBvcnRzID0gTWF0aC5zaWduIHx8IGZ1bmN0aW9uIHNpZ24oeCkge1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tc2VsZi1jb21wYXJlXG4gIHJldHVybiAoeCA9ICt4KSA9PSAwIHx8IHggIT0geCA/IHggOiB4IDwgMCA/IC0xIDogMTtcbn07XG4iLCJ2YXIgTUVUQSA9IHJlcXVpcmUoJy4vX3VpZCcpKCdtZXRhJyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbnZhciBoYXMgPSByZXF1aXJlKCcuL19oYXMnKTtcbnZhciBzZXREZXNjID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJykuZjtcbnZhciBpZCA9IDA7XG52YXIgaXNFeHRlbnNpYmxlID0gT2JqZWN0LmlzRXh0ZW5zaWJsZSB8fCBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiB0cnVlO1xufTtcbnZhciBGUkVFWkUgPSAhcmVxdWlyZSgnLi9fZmFpbHMnKShmdW5jdGlvbiAoKSB7XG4gIHJldHVybiBpc0V4dGVuc2libGUoT2JqZWN0LnByZXZlbnRFeHRlbnNpb25zKHt9KSk7XG59KTtcbnZhciBzZXRNZXRhID0gZnVuY3Rpb24gKGl0KSB7XG4gIHNldERlc2MoaXQsIE1FVEEsIHsgdmFsdWU6IHtcbiAgICBpOiAnTycgKyArK2lkLCAvLyBvYmplY3QgSURcbiAgICB3OiB7fSAgICAgICAgICAvLyB3ZWFrIGNvbGxlY3Rpb25zIElEc1xuICB9IH0pO1xufTtcbnZhciBmYXN0S2V5ID0gZnVuY3Rpb24gKGl0LCBjcmVhdGUpIHtcbiAgLy8gcmV0dXJuIHByaW1pdGl2ZSB3aXRoIHByZWZpeFxuICBpZiAoIWlzT2JqZWN0KGl0KSkgcmV0dXJuIHR5cGVvZiBpdCA9PSAnc3ltYm9sJyA/IGl0IDogKHR5cGVvZiBpdCA9PSAnc3RyaW5nJyA/ICdTJyA6ICdQJykgKyBpdDtcbiAgaWYgKCFoYXMoaXQsIE1FVEEpKSB7XG4gICAgLy8gY2FuJ3Qgc2V0IG1ldGFkYXRhIHRvIHVuY2F1Z2h0IGZyb3plbiBvYmplY3RcbiAgICBpZiAoIWlzRXh0ZW5zaWJsZShpdCkpIHJldHVybiAnRic7XG4gICAgLy8gbm90IG5lY2Vzc2FyeSB0byBhZGQgbWV0YWRhdGFcbiAgICBpZiAoIWNyZWF0ZSkgcmV0dXJuICdFJztcbiAgICAvLyBhZGQgbWlzc2luZyBtZXRhZGF0YVxuICAgIHNldE1ldGEoaXQpO1xuICAvLyByZXR1cm4gb2JqZWN0IElEXG4gIH0gcmV0dXJuIGl0W01FVEFdLmk7XG59O1xudmFyIGdldFdlYWsgPSBmdW5jdGlvbiAoaXQsIGNyZWF0ZSkge1xuICBpZiAoIWhhcyhpdCwgTUVUQSkpIHtcbiAgICAvLyBjYW4ndCBzZXQgbWV0YWRhdGEgdG8gdW5jYXVnaHQgZnJvemVuIG9iamVjdFxuICAgIGlmICghaXNFeHRlbnNpYmxlKGl0KSkgcmV0dXJuIHRydWU7XG4gICAgLy8gbm90IG5lY2Vzc2FyeSB0byBhZGQgbWV0YWRhdGFcbiAgICBpZiAoIWNyZWF0ZSkgcmV0dXJuIGZhbHNlO1xuICAgIC8vIGFkZCBtaXNzaW5nIG1ldGFkYXRhXG4gICAgc2V0TWV0YShpdCk7XG4gIC8vIHJldHVybiBoYXNoIHdlYWsgY29sbGVjdGlvbnMgSURzXG4gIH0gcmV0dXJuIGl0W01FVEFdLnc7XG59O1xuLy8gYWRkIG1ldGFkYXRhIG9uIGZyZWV6ZS1mYW1pbHkgbWV0aG9kcyBjYWxsaW5nXG52YXIgb25GcmVlemUgPSBmdW5jdGlvbiAoaXQpIHtcbiAgaWYgKEZSRUVaRSAmJiBtZXRhLk5FRUQgJiYgaXNFeHRlbnNpYmxlKGl0KSAmJiAhaGFzKGl0LCBNRVRBKSkgc2V0TWV0YShpdCk7XG4gIHJldHVybiBpdDtcbn07XG52YXIgbWV0YSA9IG1vZHVsZS5leHBvcnRzID0ge1xuICBLRVk6IE1FVEEsXG4gIE5FRUQ6IGZhbHNlLFxuICBmYXN0S2V5OiBmYXN0S2V5LFxuICBnZXRXZWFrOiBnZXRXZWFrLFxuICBvbkZyZWV6ZTogb25GcmVlemVcbn07XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi9fZ2xvYmFsJyk7XG52YXIgbWFjcm90YXNrID0gcmVxdWlyZSgnLi9fdGFzaycpLnNldDtcbnZhciBPYnNlcnZlciA9IGdsb2JhbC5NdXRhdGlvbk9ic2VydmVyIHx8IGdsb2JhbC5XZWJLaXRNdXRhdGlvbk9ic2VydmVyO1xudmFyIHByb2Nlc3MgPSBnbG9iYWwucHJvY2VzcztcbnZhciBQcm9taXNlID0gZ2xvYmFsLlByb21pc2U7XG52YXIgaXNOb2RlID0gcmVxdWlyZSgnLi9fY29mJykocHJvY2VzcykgPT0gJ3Byb2Nlc3MnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIGhlYWQsIGxhc3QsIG5vdGlmeTtcblxuICB2YXIgZmx1c2ggPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHBhcmVudCwgZm47XG4gICAgaWYgKGlzTm9kZSAmJiAocGFyZW50ID0gcHJvY2Vzcy5kb21haW4pKSBwYXJlbnQuZXhpdCgpO1xuICAgIHdoaWxlIChoZWFkKSB7XG4gICAgICBmbiA9IGhlYWQuZm47XG4gICAgICBoZWFkID0gaGVhZC5uZXh0O1xuICAgICAgdHJ5IHtcbiAgICAgICAgZm4oKTtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgaWYgKGhlYWQpIG5vdGlmeSgpO1xuICAgICAgICBlbHNlIGxhc3QgPSB1bmRlZmluZWQ7XG4gICAgICAgIHRocm93IGU7XG4gICAgICB9XG4gICAgfSBsYXN0ID0gdW5kZWZpbmVkO1xuICAgIGlmIChwYXJlbnQpIHBhcmVudC5lbnRlcigpO1xuICB9O1xuXG4gIC8vIE5vZGUuanNcbiAgaWYgKGlzTm9kZSkge1xuICAgIG5vdGlmeSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHByb2Nlc3MubmV4dFRpY2soZmx1c2gpO1xuICAgIH07XG4gIC8vIGJyb3dzZXJzIHdpdGggTXV0YXRpb25PYnNlcnZlciwgZXhjZXB0IGlPUyBTYWZhcmkgLSBodHRwczovL2dpdGh1Yi5jb20vemxvaXJvY2svY29yZS1qcy9pc3N1ZXMvMzM5XG4gIH0gZWxzZSBpZiAoT2JzZXJ2ZXIgJiYgIShnbG9iYWwubmF2aWdhdG9yICYmIGdsb2JhbC5uYXZpZ2F0b3Iuc3RhbmRhbG9uZSkpIHtcbiAgICB2YXIgdG9nZ2xlID0gdHJ1ZTtcbiAgICB2YXIgbm9kZSA9IGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKCcnKTtcbiAgICBuZXcgT2JzZXJ2ZXIoZmx1c2gpLm9ic2VydmUobm9kZSwgeyBjaGFyYWN0ZXJEYXRhOiB0cnVlIH0pOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLW5ld1xuICAgIG5vdGlmeSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIG5vZGUuZGF0YSA9IHRvZ2dsZSA9ICF0b2dnbGU7XG4gICAgfTtcbiAgLy8gZW52aXJvbm1lbnRzIHdpdGggbWF5YmUgbm9uLWNvbXBsZXRlbHkgY29ycmVjdCwgYnV0IGV4aXN0ZW50IFByb21pc2VcbiAgfSBlbHNlIGlmIChQcm9taXNlICYmIFByb21pc2UucmVzb2x2ZSkge1xuICAgIC8vIFByb21pc2UucmVzb2x2ZSB3aXRob3V0IGFuIGFyZ3VtZW50IHRocm93cyBhbiBlcnJvciBpbiBMRyBXZWJPUyAyXG4gICAgdmFyIHByb21pc2UgPSBQcm9taXNlLnJlc29sdmUodW5kZWZpbmVkKTtcbiAgICBub3RpZnkgPSBmdW5jdGlvbiAoKSB7XG4gICAgICBwcm9taXNlLnRoZW4oZmx1c2gpO1xuICAgIH07XG4gIC8vIGZvciBvdGhlciBlbnZpcm9ubWVudHMgLSBtYWNyb3Rhc2sgYmFzZWQgb246XG4gIC8vIC0gc2V0SW1tZWRpYXRlXG4gIC8vIC0gTWVzc2FnZUNoYW5uZWxcbiAgLy8gLSB3aW5kb3cucG9zdE1lc3NhZ1xuICAvLyAtIG9ucmVhZHlzdGF0ZWNoYW5nZVxuICAvLyAtIHNldFRpbWVvdXRcbiAgfSBlbHNlIHtcbiAgICBub3RpZnkgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAvLyBzdHJhbmdlIElFICsgd2VicGFjayBkZXYgc2VydmVyIGJ1ZyAtIHVzZSAuY2FsbChnbG9iYWwpXG4gICAgICBtYWNyb3Rhc2suY2FsbChnbG9iYWwsIGZsdXNoKTtcbiAgICB9O1xuICB9XG5cbiAgcmV0dXJuIGZ1bmN0aW9uIChmbikge1xuICAgIHZhciB0YXNrID0geyBmbjogZm4sIG5leHQ6IHVuZGVmaW5lZCB9O1xuICAgIGlmIChsYXN0KSBsYXN0Lm5leHQgPSB0YXNrO1xuICAgIGlmICghaGVhZCkge1xuICAgICAgaGVhZCA9IHRhc2s7XG4gICAgICBub3RpZnkoKTtcbiAgICB9IGxhc3QgPSB0YXNrO1xuICB9O1xufTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIDI1LjQuMS41IE5ld1Byb21pc2VDYXBhYmlsaXR5KEMpXG52YXIgYUZ1bmN0aW9uID0gcmVxdWlyZSgnLi9fYS1mdW5jdGlvbicpO1xuXG5mdW5jdGlvbiBQcm9taXNlQ2FwYWJpbGl0eShDKSB7XG4gIHZhciByZXNvbHZlLCByZWplY3Q7XG4gIHRoaXMucHJvbWlzZSA9IG5ldyBDKGZ1bmN0aW9uICgkJHJlc29sdmUsICQkcmVqZWN0KSB7XG4gICAgaWYgKHJlc29sdmUgIT09IHVuZGVmaW5lZCB8fCByZWplY3QgIT09IHVuZGVmaW5lZCkgdGhyb3cgVHlwZUVycm9yKCdCYWQgUHJvbWlzZSBjb25zdHJ1Y3RvcicpO1xuICAgIHJlc29sdmUgPSAkJHJlc29sdmU7XG4gICAgcmVqZWN0ID0gJCRyZWplY3Q7XG4gIH0pO1xuICB0aGlzLnJlc29sdmUgPSBhRnVuY3Rpb24ocmVzb2x2ZSk7XG4gIHRoaXMucmVqZWN0ID0gYUZ1bmN0aW9uKHJlamVjdCk7XG59XG5cbm1vZHVsZS5leHBvcnRzLmYgPSBmdW5jdGlvbiAoQykge1xuICByZXR1cm4gbmV3IFByb21pc2VDYXBhYmlsaXR5KEMpO1xufTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIDE5LjEuMi4xIE9iamVjdC5hc3NpZ24odGFyZ2V0LCBzb3VyY2UsIC4uLilcbnZhciBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJyk7XG52YXIgZ2V0S2V5cyA9IHJlcXVpcmUoJy4vX29iamVjdC1rZXlzJyk7XG52YXIgZ09QUyA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BzJyk7XG52YXIgcElFID0gcmVxdWlyZSgnLi9fb2JqZWN0LXBpZScpO1xudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8tb2JqZWN0Jyk7XG52YXIgSU9iamVjdCA9IHJlcXVpcmUoJy4vX2lvYmplY3QnKTtcbnZhciAkYXNzaWduID0gT2JqZWN0LmFzc2lnbjtcblxuLy8gc2hvdWxkIHdvcmsgd2l0aCBzeW1ib2xzIGFuZCBzaG91bGQgaGF2ZSBkZXRlcm1pbmlzdGljIHByb3BlcnR5IG9yZGVyIChWOCBidWcpXG5tb2R1bGUuZXhwb3J0cyA9ICEkYXNzaWduIHx8IHJlcXVpcmUoJy4vX2ZhaWxzJykoZnVuY3Rpb24gKCkge1xuICB2YXIgQSA9IHt9O1xuICB2YXIgQiA9IHt9O1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW5kZWZcbiAgdmFyIFMgPSBTeW1ib2woKTtcbiAgdmFyIEsgPSAnYWJjZGVmZ2hpamtsbW5vcHFyc3QnO1xuICBBW1NdID0gNztcbiAgSy5zcGxpdCgnJykuZm9yRWFjaChmdW5jdGlvbiAoaykgeyBCW2tdID0gazsgfSk7XG4gIHJldHVybiAkYXNzaWduKHt9LCBBKVtTXSAhPSA3IHx8IE9iamVjdC5rZXlzKCRhc3NpZ24oe30sIEIpKS5qb2luKCcnKSAhPSBLO1xufSkgPyBmdW5jdGlvbiBhc3NpZ24odGFyZ2V0LCBzb3VyY2UpIHsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bnVzZWQtdmFyc1xuICB2YXIgVCA9IHRvT2JqZWN0KHRhcmdldCk7XG4gIHZhciBhTGVuID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgdmFyIGluZGV4ID0gMTtcbiAgdmFyIGdldFN5bWJvbHMgPSBnT1BTLmY7XG4gIHZhciBpc0VudW0gPSBwSUUuZjtcbiAgd2hpbGUgKGFMZW4gPiBpbmRleCkge1xuICAgIHZhciBTID0gSU9iamVjdChhcmd1bWVudHNbaW5kZXgrK10pO1xuICAgIHZhciBrZXlzID0gZ2V0U3ltYm9scyA/IGdldEtleXMoUykuY29uY2F0KGdldFN5bWJvbHMoUykpIDogZ2V0S2V5cyhTKTtcbiAgICB2YXIgbGVuZ3RoID0ga2V5cy5sZW5ndGg7XG4gICAgdmFyIGogPSAwO1xuICAgIHZhciBrZXk7XG4gICAgd2hpbGUgKGxlbmd0aCA+IGopIHtcbiAgICAgIGtleSA9IGtleXNbaisrXTtcbiAgICAgIGlmICghREVTQ1JJUFRPUlMgfHwgaXNFbnVtLmNhbGwoUywga2V5KSkgVFtrZXldID0gU1trZXldO1xuICAgIH1cbiAgfSByZXR1cm4gVDtcbn0gOiAkYXNzaWduO1xuIiwiLy8gMTkuMS4yLjIgLyAxNS4yLjMuNSBPYmplY3QuY3JlYXRlKE8gWywgUHJvcGVydGllc10pXG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciBkUHMgPSByZXF1aXJlKCcuL19vYmplY3QtZHBzJyk7XG52YXIgZW51bUJ1Z0tleXMgPSByZXF1aXJlKCcuL19lbnVtLWJ1Zy1rZXlzJyk7XG52YXIgSUVfUFJPVE8gPSByZXF1aXJlKCcuL19zaGFyZWQta2V5JykoJ0lFX1BST1RPJyk7XG52YXIgRW1wdHkgPSBmdW5jdGlvbiAoKSB7IC8qIGVtcHR5ICovIH07XG52YXIgUFJPVE9UWVBFID0gJ3Byb3RvdHlwZSc7XG5cbi8vIENyZWF0ZSBvYmplY3Qgd2l0aCBmYWtlIGBudWxsYCBwcm90b3R5cGU6IHVzZSBpZnJhbWUgT2JqZWN0IHdpdGggY2xlYXJlZCBwcm90b3R5cGVcbnZhciBjcmVhdGVEaWN0ID0gZnVuY3Rpb24gKCkge1xuICAvLyBUaHJhc2gsIHdhc3RlIGFuZCBzb2RvbXk6IElFIEdDIGJ1Z1xuICB2YXIgaWZyYW1lID0gcmVxdWlyZSgnLi9fZG9tLWNyZWF0ZScpKCdpZnJhbWUnKTtcbiAgdmFyIGkgPSBlbnVtQnVnS2V5cy5sZW5ndGg7XG4gIHZhciBsdCA9ICc8JztcbiAgdmFyIGd0ID0gJz4nO1xuICB2YXIgaWZyYW1lRG9jdW1lbnQ7XG4gIGlmcmFtZS5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xuICByZXF1aXJlKCcuL19odG1sJykuYXBwZW5kQ2hpbGQoaWZyYW1lKTtcbiAgaWZyYW1lLnNyYyA9ICdqYXZhc2NyaXB0Oic7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tc2NyaXB0LXVybFxuICAvLyBjcmVhdGVEaWN0ID0gaWZyYW1lLmNvbnRlbnRXaW5kb3cuT2JqZWN0O1xuICAvLyBodG1sLnJlbW92ZUNoaWxkKGlmcmFtZSk7XG4gIGlmcmFtZURvY3VtZW50ID0gaWZyYW1lLmNvbnRlbnRXaW5kb3cuZG9jdW1lbnQ7XG4gIGlmcmFtZURvY3VtZW50Lm9wZW4oKTtcbiAgaWZyYW1lRG9jdW1lbnQud3JpdGUobHQgKyAnc2NyaXB0JyArIGd0ICsgJ2RvY3VtZW50LkY9T2JqZWN0JyArIGx0ICsgJy9zY3JpcHQnICsgZ3QpO1xuICBpZnJhbWVEb2N1bWVudC5jbG9zZSgpO1xuICBjcmVhdGVEaWN0ID0gaWZyYW1lRG9jdW1lbnQuRjtcbiAgd2hpbGUgKGktLSkgZGVsZXRlIGNyZWF0ZURpY3RbUFJPVE9UWVBFXVtlbnVtQnVnS2V5c1tpXV07XG4gIHJldHVybiBjcmVhdGVEaWN0KCk7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IE9iamVjdC5jcmVhdGUgfHwgZnVuY3Rpb24gY3JlYXRlKE8sIFByb3BlcnRpZXMpIHtcbiAgdmFyIHJlc3VsdDtcbiAgaWYgKE8gIT09IG51bGwpIHtcbiAgICBFbXB0eVtQUk9UT1RZUEVdID0gYW5PYmplY3QoTyk7XG4gICAgcmVzdWx0ID0gbmV3IEVtcHR5KCk7XG4gICAgRW1wdHlbUFJPVE9UWVBFXSA9IG51bGw7XG4gICAgLy8gYWRkIFwiX19wcm90b19fXCIgZm9yIE9iamVjdC5nZXRQcm90b3R5cGVPZiBwb2x5ZmlsbFxuICAgIHJlc3VsdFtJRV9QUk9UT10gPSBPO1xuICB9IGVsc2UgcmVzdWx0ID0gY3JlYXRlRGljdCgpO1xuICByZXR1cm4gUHJvcGVydGllcyA9PT0gdW5kZWZpbmVkID8gcmVzdWx0IDogZFBzKHJlc3VsdCwgUHJvcGVydGllcyk7XG59O1xuIiwidmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgSUU4X0RPTV9ERUZJTkUgPSByZXF1aXJlKCcuL19pZTgtZG9tLWRlZmluZScpO1xudmFyIHRvUHJpbWl0aXZlID0gcmVxdWlyZSgnLi9fdG8tcHJpbWl0aXZlJyk7XG52YXIgZFAgPSBPYmplY3QuZGVmaW5lUHJvcGVydHk7XG5cbmV4cG9ydHMuZiA9IHJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJykgPyBPYmplY3QuZGVmaW5lUHJvcGVydHkgOiBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0eShPLCBQLCBBdHRyaWJ1dGVzKSB7XG4gIGFuT2JqZWN0KE8pO1xuICBQID0gdG9QcmltaXRpdmUoUCwgdHJ1ZSk7XG4gIGFuT2JqZWN0KEF0dHJpYnV0ZXMpO1xuICBpZiAoSUU4X0RPTV9ERUZJTkUpIHRyeSB7XG4gICAgcmV0dXJuIGRQKE8sIFAsIEF0dHJpYnV0ZXMpO1xuICB9IGNhdGNoIChlKSB7IC8qIGVtcHR5ICovIH1cbiAgaWYgKCdnZXQnIGluIEF0dHJpYnV0ZXMgfHwgJ3NldCcgaW4gQXR0cmlidXRlcykgdGhyb3cgVHlwZUVycm9yKCdBY2Nlc3NvcnMgbm90IHN1cHBvcnRlZCEnKTtcbiAgaWYgKCd2YWx1ZScgaW4gQXR0cmlidXRlcykgT1tQXSA9IEF0dHJpYnV0ZXMudmFsdWU7XG4gIHJldHVybiBPO1xufTtcbiIsInZhciBkUCA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgZ2V0S2V5cyA9IHJlcXVpcmUoJy4vX29iamVjdC1rZXlzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKSA/IE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzIDogZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyhPLCBQcm9wZXJ0aWVzKSB7XG4gIGFuT2JqZWN0KE8pO1xuICB2YXIga2V5cyA9IGdldEtleXMoUHJvcGVydGllcyk7XG4gIHZhciBsZW5ndGggPSBrZXlzLmxlbmd0aDtcbiAgdmFyIGkgPSAwO1xuICB2YXIgUDtcbiAgd2hpbGUgKGxlbmd0aCA+IGkpIGRQLmYoTywgUCA9IGtleXNbaSsrXSwgUHJvcGVydGllc1tQXSk7XG4gIHJldHVybiBPO1xufTtcbiIsInZhciBwSUUgPSByZXF1aXJlKCcuL19vYmplY3QtcGllJyk7XG52YXIgY3JlYXRlRGVzYyA9IHJlcXVpcmUoJy4vX3Byb3BlcnR5LWRlc2MnKTtcbnZhciB0b0lPYmplY3QgPSByZXF1aXJlKCcuL190by1pb2JqZWN0Jyk7XG52YXIgdG9QcmltaXRpdmUgPSByZXF1aXJlKCcuL190by1wcmltaXRpdmUnKTtcbnZhciBoYXMgPSByZXF1aXJlKCcuL19oYXMnKTtcbnZhciBJRThfRE9NX0RFRklORSA9IHJlcXVpcmUoJy4vX2llOC1kb20tZGVmaW5lJyk7XG52YXIgZ09QRCA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7XG5cbmV4cG9ydHMuZiA9IHJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJykgPyBnT1BEIDogZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKE8sIFApIHtcbiAgTyA9IHRvSU9iamVjdChPKTtcbiAgUCA9IHRvUHJpbWl0aXZlKFAsIHRydWUpO1xuICBpZiAoSUU4X0RPTV9ERUZJTkUpIHRyeSB7XG4gICAgcmV0dXJuIGdPUEQoTywgUCk7XG4gIH0gY2F0Y2ggKGUpIHsgLyogZW1wdHkgKi8gfVxuICBpZiAoaGFzKE8sIFApKSByZXR1cm4gY3JlYXRlRGVzYyghcElFLmYuY2FsbChPLCBQKSwgT1tQXSk7XG59O1xuIiwiLy8gZmFsbGJhY2sgZm9yIElFMTEgYnVnZ3kgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMgd2l0aCBpZnJhbWUgYW5kIHdpbmRvd1xudmFyIHRvSU9iamVjdCA9IHJlcXVpcmUoJy4vX3RvLWlvYmplY3QnKTtcbnZhciBnT1BOID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcG4nKS5mO1xudmFyIHRvU3RyaW5nID0ge30udG9TdHJpbmc7XG5cbnZhciB3aW5kb3dOYW1lcyA9IHR5cGVvZiB3aW5kb3cgPT0gJ29iamVjdCcgJiYgd2luZG93ICYmIE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzXG4gID8gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMod2luZG93KSA6IFtdO1xuXG52YXIgZ2V0V2luZG93TmFtZXMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gZ09QTihpdCk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICByZXR1cm4gd2luZG93TmFtZXMuc2xpY2UoKTtcbiAgfVxufTtcblxubW9kdWxlLmV4cG9ydHMuZiA9IGZ1bmN0aW9uIGdldE93blByb3BlcnR5TmFtZXMoaXQpIHtcbiAgcmV0dXJuIHdpbmRvd05hbWVzICYmIHRvU3RyaW5nLmNhbGwoaXQpID09ICdbb2JqZWN0IFdpbmRvd10nID8gZ2V0V2luZG93TmFtZXMoaXQpIDogZ09QTih0b0lPYmplY3QoaXQpKTtcbn07XG4iLCIvLyAxOS4xLjIuNyAvIDE1LjIuMy40IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKE8pXG52YXIgJGtleXMgPSByZXF1aXJlKCcuL19vYmplY3Qta2V5cy1pbnRlcm5hbCcpO1xudmFyIGhpZGRlbktleXMgPSByZXF1aXJlKCcuL19lbnVtLWJ1Zy1rZXlzJykuY29uY2F0KCdsZW5ndGgnLCAncHJvdG90eXBlJyk7XG5cbmV4cG9ydHMuZiA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzIHx8IGZ1bmN0aW9uIGdldE93blByb3BlcnR5TmFtZXMoTykge1xuICByZXR1cm4gJGtleXMoTywgaGlkZGVuS2V5cyk7XG59O1xuIiwiZXhwb3J0cy5mID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scztcbiIsIi8vIDE5LjEuMi45IC8gMTUuMi4zLjIgT2JqZWN0LmdldFByb3RvdHlwZU9mKE8pXG52YXIgaGFzID0gcmVxdWlyZSgnLi9faGFzJyk7XG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuL190by1vYmplY3QnKTtcbnZhciBJRV9QUk9UTyA9IHJlcXVpcmUoJy4vX3NoYXJlZC1rZXknKSgnSUVfUFJPVE8nKTtcbnZhciBPYmplY3RQcm90byA9IE9iamVjdC5wcm90b3R5cGU7XG5cbm1vZHVsZS5leHBvcnRzID0gT2JqZWN0LmdldFByb3RvdHlwZU9mIHx8IGZ1bmN0aW9uIChPKSB7XG4gIE8gPSB0b09iamVjdChPKTtcbiAgaWYgKGhhcyhPLCBJRV9QUk9UTykpIHJldHVybiBPW0lFX1BST1RPXTtcbiAgaWYgKHR5cGVvZiBPLmNvbnN0cnVjdG9yID09ICdmdW5jdGlvbicgJiYgTyBpbnN0YW5jZW9mIE8uY29uc3RydWN0b3IpIHtcbiAgICByZXR1cm4gTy5jb25zdHJ1Y3Rvci5wcm90b3R5cGU7XG4gIH0gcmV0dXJuIE8gaW5zdGFuY2VvZiBPYmplY3QgPyBPYmplY3RQcm90byA6IG51bGw7XG59O1xuIiwidmFyIGhhcyA9IHJlcXVpcmUoJy4vX2hhcycpO1xudmFyIHRvSU9iamVjdCA9IHJlcXVpcmUoJy4vX3RvLWlvYmplY3QnKTtcbnZhciBhcnJheUluZGV4T2YgPSByZXF1aXJlKCcuL19hcnJheS1pbmNsdWRlcycpKGZhbHNlKTtcbnZhciBJRV9QUk9UTyA9IHJlcXVpcmUoJy4vX3NoYXJlZC1rZXknKSgnSUVfUFJPVE8nKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAob2JqZWN0LCBuYW1lcykge1xuICB2YXIgTyA9IHRvSU9iamVjdChvYmplY3QpO1xuICB2YXIgaSA9IDA7XG4gIHZhciByZXN1bHQgPSBbXTtcbiAgdmFyIGtleTtcbiAgZm9yIChrZXkgaW4gTykgaWYgKGtleSAhPSBJRV9QUk9UTykgaGFzKE8sIGtleSkgJiYgcmVzdWx0LnB1c2goa2V5KTtcbiAgLy8gRG9uJ3QgZW51bSBidWcgJiBoaWRkZW4ga2V5c1xuICB3aGlsZSAobmFtZXMubGVuZ3RoID4gaSkgaWYgKGhhcyhPLCBrZXkgPSBuYW1lc1tpKytdKSkge1xuICAgIH5hcnJheUluZGV4T2YocmVzdWx0LCBrZXkpIHx8IHJlc3VsdC5wdXNoKGtleSk7XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn07XG4iLCIvLyAxOS4xLjIuMTQgLyAxNS4yLjMuMTQgT2JqZWN0LmtleXMoTylcbnZhciAka2V5cyA9IHJlcXVpcmUoJy4vX29iamVjdC1rZXlzLWludGVybmFsJyk7XG52YXIgZW51bUJ1Z0tleXMgPSByZXF1aXJlKCcuL19lbnVtLWJ1Zy1rZXlzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gT2JqZWN0LmtleXMgfHwgZnVuY3Rpb24ga2V5cyhPKSB7XG4gIHJldHVybiAka2V5cyhPLCBlbnVtQnVnS2V5cyk7XG59O1xuIiwiZXhwb3J0cy5mID0ge30ucHJvcGVydHlJc0VudW1lcmFibGU7XG4iLCIvLyBtb3N0IE9iamVjdCBtZXRob2RzIGJ5IEVTNiBzaG91bGQgYWNjZXB0IHByaW1pdGl2ZXNcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgY29yZSA9IHJlcXVpcmUoJy4vX2NvcmUnKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4vX2ZhaWxzJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChLRVksIGV4ZWMpIHtcbiAgdmFyIGZuID0gKGNvcmUuT2JqZWN0IHx8IHt9KVtLRVldIHx8IE9iamVjdFtLRVldO1xuICB2YXIgZXhwID0ge307XG4gIGV4cFtLRVldID0gZXhlYyhmbik7XG4gICRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogZmFpbHMoZnVuY3Rpb24gKCkgeyBmbigxKTsgfSksICdPYmplY3QnLCBleHApO1xufTtcbiIsInZhciBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJyk7XG52YXIgZ2V0S2V5cyA9IHJlcXVpcmUoJy4vX29iamVjdC1rZXlzJyk7XG52YXIgdG9JT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8taW9iamVjdCcpO1xudmFyIGlzRW51bSA9IHJlcXVpcmUoJy4vX29iamVjdC1waWUnKS5mO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXNFbnRyaWVzKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoaXQpIHtcbiAgICB2YXIgTyA9IHRvSU9iamVjdChpdCk7XG4gICAgdmFyIGtleXMgPSBnZXRLZXlzKE8pO1xuICAgIHZhciBsZW5ndGggPSBrZXlzLmxlbmd0aDtcbiAgICB2YXIgaSA9IDA7XG4gICAgdmFyIHJlc3VsdCA9IFtdO1xuICAgIHZhciBrZXk7XG4gICAgd2hpbGUgKGxlbmd0aCA+IGkpIHtcbiAgICAgIGtleSA9IGtleXNbaSsrXTtcbiAgICAgIGlmICghREVTQ1JJUFRPUlMgfHwgaXNFbnVtLmNhbGwoTywga2V5KSkge1xuICAgICAgICByZXN1bHQucHVzaChpc0VudHJpZXMgPyBba2V5LCBPW2tleV1dIDogT1trZXldKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfTtcbn07XG4iLCIvLyBhbGwgb2JqZWN0IGtleXMsIGluY2x1ZGVzIG5vbi1lbnVtZXJhYmxlIGFuZCBzeW1ib2xzXG52YXIgZ09QTiA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BuJyk7XG52YXIgZ09QUyA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BzJyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciBSZWZsZWN0ID0gcmVxdWlyZSgnLi9fZ2xvYmFsJykuUmVmbGVjdDtcbm1vZHVsZS5leHBvcnRzID0gUmVmbGVjdCAmJiBSZWZsZWN0Lm93bktleXMgfHwgZnVuY3Rpb24gb3duS2V5cyhpdCkge1xuICB2YXIga2V5cyA9IGdPUE4uZihhbk9iamVjdChpdCkpO1xuICB2YXIgZ2V0U3ltYm9scyA9IGdPUFMuZjtcbiAgcmV0dXJuIGdldFN5bWJvbHMgPyBrZXlzLmNvbmNhdChnZXRTeW1ib2xzKGl0KSkgOiBrZXlzO1xufTtcbiIsInZhciAkcGFyc2VGbG9hdCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpLnBhcnNlRmxvYXQ7XG52YXIgJHRyaW0gPSByZXF1aXJlKCcuL19zdHJpbmctdHJpbScpLnRyaW07XG5cbm1vZHVsZS5leHBvcnRzID0gMSAvICRwYXJzZUZsb2F0KHJlcXVpcmUoJy4vX3N0cmluZy13cycpICsgJy0wJykgIT09IC1JbmZpbml0eSA/IGZ1bmN0aW9uIHBhcnNlRmxvYXQoc3RyKSB7XG4gIHZhciBzdHJpbmcgPSAkdHJpbShTdHJpbmcoc3RyKSwgMyk7XG4gIHZhciByZXN1bHQgPSAkcGFyc2VGbG9hdChzdHJpbmcpO1xuICByZXR1cm4gcmVzdWx0ID09PSAwICYmIHN0cmluZy5jaGFyQXQoMCkgPT0gJy0nID8gLTAgOiByZXN1bHQ7XG59IDogJHBhcnNlRmxvYXQ7XG4iLCJ2YXIgJHBhcnNlSW50ID0gcmVxdWlyZSgnLi9fZ2xvYmFsJykucGFyc2VJbnQ7XG52YXIgJHRyaW0gPSByZXF1aXJlKCcuL19zdHJpbmctdHJpbScpLnRyaW07XG52YXIgd3MgPSByZXF1aXJlKCcuL19zdHJpbmctd3MnKTtcbnZhciBoZXggPSAvXlstK10/MFt4WF0vO1xuXG5tb2R1bGUuZXhwb3J0cyA9ICRwYXJzZUludCh3cyArICcwOCcpICE9PSA4IHx8ICRwYXJzZUludCh3cyArICcweDE2JykgIT09IDIyID8gZnVuY3Rpb24gcGFyc2VJbnQoc3RyLCByYWRpeCkge1xuICB2YXIgc3RyaW5nID0gJHRyaW0oU3RyaW5nKHN0ciksIDMpO1xuICByZXR1cm4gJHBhcnNlSW50KHN0cmluZywgKHJhZGl4ID4+PiAwKSB8fCAoaGV4LnRlc3Qoc3RyaW5nKSA/IDE2IDogMTApKTtcbn0gOiAkcGFyc2VJbnQ7XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChleGVjKSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuIHsgZTogZmFsc2UsIHY6IGV4ZWMoKSB9O1xuICB9IGNhdGNoIChlKSB7XG4gICAgcmV0dXJuIHsgZTogdHJ1ZSwgdjogZSB9O1xuICB9XG59O1xuIiwidmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbnZhciBuZXdQcm9taXNlQ2FwYWJpbGl0eSA9IHJlcXVpcmUoJy4vX25ldy1wcm9taXNlLWNhcGFiaWxpdHknKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoQywgeCkge1xuICBhbk9iamVjdChDKTtcbiAgaWYgKGlzT2JqZWN0KHgpICYmIHguY29uc3RydWN0b3IgPT09IEMpIHJldHVybiB4O1xuICB2YXIgcHJvbWlzZUNhcGFiaWxpdHkgPSBuZXdQcm9taXNlQ2FwYWJpbGl0eS5mKEMpO1xuICB2YXIgcmVzb2x2ZSA9IHByb21pc2VDYXBhYmlsaXR5LnJlc29sdmU7XG4gIHJlc29sdmUoeCk7XG4gIHJldHVybiBwcm9taXNlQ2FwYWJpbGl0eS5wcm9taXNlO1xufTtcbiIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGJpdG1hcCwgdmFsdWUpIHtcbiAgcmV0dXJuIHtcbiAgICBlbnVtZXJhYmxlOiAhKGJpdG1hcCAmIDEpLFxuICAgIGNvbmZpZ3VyYWJsZTogIShiaXRtYXAgJiAyKSxcbiAgICB3cml0YWJsZTogIShiaXRtYXAgJiA0KSxcbiAgICB2YWx1ZTogdmFsdWVcbiAgfTtcbn07XG4iLCJ2YXIgcmVkZWZpbmUgPSByZXF1aXJlKCcuL19yZWRlZmluZScpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAodGFyZ2V0LCBzcmMsIHNhZmUpIHtcbiAgZm9yICh2YXIga2V5IGluIHNyYykgcmVkZWZpbmUodGFyZ2V0LCBrZXksIHNyY1trZXldLCBzYWZlKTtcbiAgcmV0dXJuIHRhcmdldDtcbn07XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi9fZ2xvYmFsJyk7XG52YXIgaGlkZSA9IHJlcXVpcmUoJy4vX2hpZGUnKTtcbnZhciBoYXMgPSByZXF1aXJlKCcuL19oYXMnKTtcbnZhciBTUkMgPSByZXF1aXJlKCcuL191aWQnKSgnc3JjJyk7XG52YXIgJHRvU3RyaW5nID0gcmVxdWlyZSgnLi9fZnVuY3Rpb24tdG8tc3RyaW5nJyk7XG52YXIgVE9fU1RSSU5HID0gJ3RvU3RyaW5nJztcbnZhciBUUEwgPSAoJycgKyAkdG9TdHJpbmcpLnNwbGl0KFRPX1NUUklORyk7XG5cbnJlcXVpcmUoJy4vX2NvcmUnKS5pbnNwZWN0U291cmNlID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiAkdG9TdHJpbmcuY2FsbChpdCk7XG59O1xuXG4obW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoTywga2V5LCB2YWwsIHNhZmUpIHtcbiAgdmFyIGlzRnVuY3Rpb24gPSB0eXBlb2YgdmFsID09ICdmdW5jdGlvbic7XG4gIGlmIChpc0Z1bmN0aW9uKSBoYXModmFsLCAnbmFtZScpIHx8IGhpZGUodmFsLCAnbmFtZScsIGtleSk7XG4gIGlmIChPW2tleV0gPT09IHZhbCkgcmV0dXJuO1xuICBpZiAoaXNGdW5jdGlvbikgaGFzKHZhbCwgU1JDKSB8fCBoaWRlKHZhbCwgU1JDLCBPW2tleV0gPyAnJyArIE9ba2V5XSA6IFRQTC5qb2luKFN0cmluZyhrZXkpKSk7XG4gIGlmIChPID09PSBnbG9iYWwpIHtcbiAgICBPW2tleV0gPSB2YWw7XG4gIH0gZWxzZSBpZiAoIXNhZmUpIHtcbiAgICBkZWxldGUgT1trZXldO1xuICAgIGhpZGUoTywga2V5LCB2YWwpO1xuICB9IGVsc2UgaWYgKE9ba2V5XSkge1xuICAgIE9ba2V5XSA9IHZhbDtcbiAgfSBlbHNlIHtcbiAgICBoaWRlKE8sIGtleSwgdmFsKTtcbiAgfVxuLy8gYWRkIGZha2UgRnVuY3Rpb24jdG9TdHJpbmcgZm9yIGNvcnJlY3Qgd29yayB3cmFwcGVkIG1ldGhvZHMgLyBjb25zdHJ1Y3RvcnMgd2l0aCBtZXRob2RzIGxpa2UgTG9EYXNoIGlzTmF0aXZlXG59KShGdW5jdGlvbi5wcm90b3R5cGUsIFRPX1NUUklORywgZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gIHJldHVybiB0eXBlb2YgdGhpcyA9PSAnZnVuY3Rpb24nICYmIHRoaXNbU1JDXSB8fCAkdG9TdHJpbmcuY2FsbCh0aGlzKTtcbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgY2xhc3NvZiA9IHJlcXVpcmUoJy4vX2NsYXNzb2YnKTtcbnZhciBidWlsdGluRXhlYyA9IFJlZ0V4cC5wcm90b3R5cGUuZXhlYztcblxuIC8vIGBSZWdFeHBFeGVjYCBhYnN0cmFjdCBvcGVyYXRpb25cbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLXJlZ2V4cGV4ZWNcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKFIsIFMpIHtcbiAgdmFyIGV4ZWMgPSBSLmV4ZWM7XG4gIGlmICh0eXBlb2YgZXhlYyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHZhciByZXN1bHQgPSBleGVjLmNhbGwoUiwgUyk7XG4gICAgaWYgKHR5cGVvZiByZXN1bHQgIT09ICdvYmplY3QnKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdSZWdFeHAgZXhlYyBtZXRob2QgcmV0dXJuZWQgc29tZXRoaW5nIG90aGVyIHRoYW4gYW4gT2JqZWN0IG9yIG51bGwnKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuICBpZiAoY2xhc3NvZihSKSAhPT0gJ1JlZ0V4cCcpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdSZWdFeHAjZXhlYyBjYWxsZWQgb24gaW5jb21wYXRpYmxlIHJlY2VpdmVyJyk7XG4gIH1cbiAgcmV0dXJuIGJ1aWx0aW5FeGVjLmNhbGwoUiwgUyk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgcmVnZXhwRmxhZ3MgPSByZXF1aXJlKCcuL19mbGFncycpO1xuXG52YXIgbmF0aXZlRXhlYyA9IFJlZ0V4cC5wcm90b3R5cGUuZXhlYztcbi8vIFRoaXMgYWx3YXlzIHJlZmVycyB0byB0aGUgbmF0aXZlIGltcGxlbWVudGF0aW9uLCBiZWNhdXNlIHRoZVxuLy8gU3RyaW5nI3JlcGxhY2UgcG9seWZpbGwgdXNlcyAuL2ZpeC1yZWdleHAtd2VsbC1rbm93bi1zeW1ib2wtbG9naWMuanMsXG4vLyB3aGljaCBsb2FkcyB0aGlzIGZpbGUgYmVmb3JlIHBhdGNoaW5nIHRoZSBtZXRob2QuXG52YXIgbmF0aXZlUmVwbGFjZSA9IFN0cmluZy5wcm90b3R5cGUucmVwbGFjZTtcblxudmFyIHBhdGNoZWRFeGVjID0gbmF0aXZlRXhlYztcblxudmFyIExBU1RfSU5ERVggPSAnbGFzdEluZGV4JztcblxudmFyIFVQREFURVNfTEFTVF9JTkRFWF9XUk9ORyA9IChmdW5jdGlvbiAoKSB7XG4gIHZhciByZTEgPSAvYS8sXG4gICAgICByZTIgPSAvYiovZztcbiAgbmF0aXZlRXhlYy5jYWxsKHJlMSwgJ2EnKTtcbiAgbmF0aXZlRXhlYy5jYWxsKHJlMiwgJ2EnKTtcbiAgcmV0dXJuIHJlMVtMQVNUX0lOREVYXSAhPT0gMCB8fCByZTJbTEFTVF9JTkRFWF0gIT09IDA7XG59KSgpO1xuXG4vLyBub25wYXJ0aWNpcGF0aW5nIGNhcHR1cmluZyBncm91cCwgY29waWVkIGZyb20gZXM1LXNoaW0ncyBTdHJpbmcjc3BsaXQgcGF0Y2guXG52YXIgTlBDR19JTkNMVURFRCA9IC8oKT8/Ly5leGVjKCcnKVsxXSAhPT0gdW5kZWZpbmVkO1xuXG52YXIgUEFUQ0ggPSBVUERBVEVTX0xBU1RfSU5ERVhfV1JPTkcgfHwgTlBDR19JTkNMVURFRDtcblxuaWYgKFBBVENIKSB7XG4gIHBhdGNoZWRFeGVjID0gZnVuY3Rpb24gZXhlYyhzdHIpIHtcbiAgICB2YXIgcmUgPSB0aGlzO1xuICAgIHZhciBsYXN0SW5kZXgsIHJlQ29weSwgbWF0Y2gsIGk7XG5cbiAgICBpZiAoTlBDR19JTkNMVURFRCkge1xuICAgICAgcmVDb3B5ID0gbmV3IFJlZ0V4cCgnXicgKyByZS5zb3VyY2UgKyAnJCg/IVxcXFxzKScsIHJlZ2V4cEZsYWdzLmNhbGwocmUpKTtcbiAgICB9XG4gICAgaWYgKFVQREFURVNfTEFTVF9JTkRFWF9XUk9ORykgbGFzdEluZGV4ID0gcmVbTEFTVF9JTkRFWF07XG5cbiAgICBtYXRjaCA9IG5hdGl2ZUV4ZWMuY2FsbChyZSwgc3RyKTtcblxuICAgIGlmIChVUERBVEVTX0xBU1RfSU5ERVhfV1JPTkcgJiYgbWF0Y2gpIHtcbiAgICAgIHJlW0xBU1RfSU5ERVhdID0gcmUuZ2xvYmFsID8gbWF0Y2guaW5kZXggKyBtYXRjaFswXS5sZW5ndGggOiBsYXN0SW5kZXg7XG4gICAgfVxuICAgIGlmIChOUENHX0lOQ0xVREVEICYmIG1hdGNoICYmIG1hdGNoLmxlbmd0aCA+IDEpIHtcbiAgICAgIC8vIEZpeCBicm93c2VycyB3aG9zZSBgZXhlY2AgbWV0aG9kcyBkb24ndCBjb25zaXN0ZW50bHkgcmV0dXJuIGB1bmRlZmluZWRgXG4gICAgICAvLyBmb3IgTlBDRywgbGlrZSBJRTguIE5PVEU6IFRoaXMgZG9lc24nIHdvcmsgZm9yIC8oLj8pPy9cbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1sb29wLWZ1bmNcbiAgICAgIG5hdGl2ZVJlcGxhY2UuY2FsbChtYXRjaFswXSwgcmVDb3B5LCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGZvciAoaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoIC0gMjsgaSsrKSB7XG4gICAgICAgICAgaWYgKGFyZ3VtZW50c1tpXSA9PT0gdW5kZWZpbmVkKSBtYXRjaFtpXSA9IHVuZGVmaW5lZDtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIG1hdGNoO1xuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHBhdGNoZWRFeGVjO1xuIiwiLy8gNy4yLjkgU2FtZVZhbHVlKHgsIHkpXG5tb2R1bGUuZXhwb3J0cyA9IE9iamVjdC5pcyB8fCBmdW5jdGlvbiBpcyh4LCB5KSB7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zZWxmLWNvbXBhcmVcbiAgcmV0dXJuIHggPT09IHkgPyB4ICE9PSAwIHx8IDEgLyB4ID09PSAxIC8geSA6IHggIT0geCAmJiB5ICE9IHk7XG59O1xuIiwiLy8gV29ya3Mgd2l0aCBfX3Byb3RvX18gb25seS4gT2xkIHY4IGNhbid0IHdvcmsgd2l0aCBudWxsIHByb3RvIG9iamVjdHMuXG4vKiBlc2xpbnQtZGlzYWJsZSBuby1wcm90byAqL1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciBjaGVjayA9IGZ1bmN0aW9uIChPLCBwcm90bykge1xuICBhbk9iamVjdChPKTtcbiAgaWYgKCFpc09iamVjdChwcm90bykgJiYgcHJvdG8gIT09IG51bGwpIHRocm93IFR5cGVFcnJvcihwcm90byArIFwiOiBjYW4ndCBzZXQgYXMgcHJvdG90eXBlIVwiKTtcbn07XG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgc2V0OiBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHwgKCdfX3Byb3RvX18nIGluIHt9ID8gLy8gZXNsaW50LWRpc2FibGUtbGluZVxuICAgIGZ1bmN0aW9uICh0ZXN0LCBidWdneSwgc2V0KSB7XG4gICAgICB0cnkge1xuICAgICAgICBzZXQgPSByZXF1aXJlKCcuL19jdHgnKShGdW5jdGlvbi5jYWxsLCByZXF1aXJlKCcuL19vYmplY3QtZ29wZCcpLmYoT2JqZWN0LnByb3RvdHlwZSwgJ19fcHJvdG9fXycpLnNldCwgMik7XG4gICAgICAgIHNldCh0ZXN0LCBbXSk7XG4gICAgICAgIGJ1Z2d5ID0gISh0ZXN0IGluc3RhbmNlb2YgQXJyYXkpO1xuICAgICAgfSBjYXRjaCAoZSkgeyBidWdneSA9IHRydWU7IH1cbiAgICAgIHJldHVybiBmdW5jdGlvbiBzZXRQcm90b3R5cGVPZihPLCBwcm90bykge1xuICAgICAgICBjaGVjayhPLCBwcm90byk7XG4gICAgICAgIGlmIChidWdneSkgTy5fX3Byb3RvX18gPSBwcm90bztcbiAgICAgICAgZWxzZSBzZXQoTywgcHJvdG8pO1xuICAgICAgICByZXR1cm4gTztcbiAgICAgIH07XG4gICAgfSh7fSwgZmFsc2UpIDogdW5kZWZpbmVkKSxcbiAgY2hlY2s6IGNoZWNrXG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpO1xudmFyIGRQID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJyk7XG52YXIgREVTQ1JJUFRPUlMgPSByZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpO1xudmFyIFNQRUNJRVMgPSByZXF1aXJlKCcuL193a3MnKSgnc3BlY2llcycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChLRVkpIHtcbiAgdmFyIEMgPSBnbG9iYWxbS0VZXTtcbiAgaWYgKERFU0NSSVBUT1JTICYmIEMgJiYgIUNbU1BFQ0lFU10pIGRQLmYoQywgU1BFQ0lFUywge1xuICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXM7IH1cbiAgfSk7XG59O1xuIiwidmFyIGRlZiA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpLmY7XG52YXIgaGFzID0gcmVxdWlyZSgnLi9faGFzJyk7XG52YXIgVEFHID0gcmVxdWlyZSgnLi9fd2tzJykoJ3RvU3RyaW5nVGFnJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0LCB0YWcsIHN0YXQpIHtcbiAgaWYgKGl0ICYmICFoYXMoaXQgPSBzdGF0ID8gaXQgOiBpdC5wcm90b3R5cGUsIFRBRykpIGRlZihpdCwgVEFHLCB7IGNvbmZpZ3VyYWJsZTogdHJ1ZSwgdmFsdWU6IHRhZyB9KTtcbn07XG4iLCJ2YXIgc2hhcmVkID0gcmVxdWlyZSgnLi9fc2hhcmVkJykoJ2tleXMnKTtcbnZhciB1aWQgPSByZXF1aXJlKCcuL191aWQnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGtleSkge1xuICByZXR1cm4gc2hhcmVkW2tleV0gfHwgKHNoYXJlZFtrZXldID0gdWlkKGtleSkpO1xufTtcbiIsInZhciBjb3JlID0gcmVxdWlyZSgnLi9fY29yZScpO1xudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpO1xudmFyIFNIQVJFRCA9ICdfX2NvcmUtanNfc2hhcmVkX18nO1xudmFyIHN0b3JlID0gZ2xvYmFsW1NIQVJFRF0gfHwgKGdsb2JhbFtTSEFSRURdID0ge30pO1xuXG4obW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoa2V5LCB2YWx1ZSkge1xuICByZXR1cm4gc3RvcmVba2V5XSB8fCAoc3RvcmVba2V5XSA9IHZhbHVlICE9PSB1bmRlZmluZWQgPyB2YWx1ZSA6IHt9KTtcbn0pKCd2ZXJzaW9ucycsIFtdKS5wdXNoKHtcbiAgdmVyc2lvbjogY29yZS52ZXJzaW9uLFxuICBtb2RlOiByZXF1aXJlKCcuL19saWJyYXJ5JykgPyAncHVyZScgOiAnZ2xvYmFsJyxcbiAgY29weXJpZ2h0OiAnwqkgMjAyMCBEZW5pcyBQdXNoa2FyZXYgKHpsb2lyb2NrLnJ1KSdcbn0pO1xuIiwiLy8gNy4zLjIwIFNwZWNpZXNDb25zdHJ1Y3RvcihPLCBkZWZhdWx0Q29uc3RydWN0b3IpXG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciBhRnVuY3Rpb24gPSByZXF1aXJlKCcuL19hLWZ1bmN0aW9uJyk7XG52YXIgU1BFQ0lFUyA9IHJlcXVpcmUoJy4vX3drcycpKCdzcGVjaWVzJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChPLCBEKSB7XG4gIHZhciBDID0gYW5PYmplY3QoTykuY29uc3RydWN0b3I7XG4gIHZhciBTO1xuICByZXR1cm4gQyA9PT0gdW5kZWZpbmVkIHx8IChTID0gYW5PYmplY3QoQylbU1BFQ0lFU10pID09IHVuZGVmaW5lZCA/IEQgOiBhRnVuY3Rpb24oUyk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi9fZmFpbHMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAobWV0aG9kLCBhcmcpIHtcbiAgcmV0dXJuICEhbWV0aG9kICYmIGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdXNlbGVzcy1jYWxsXG4gICAgYXJnID8gbWV0aG9kLmNhbGwobnVsbCwgZnVuY3Rpb24gKCkgeyAvKiBlbXB0eSAqLyB9LCAxKSA6IG1ldGhvZC5jYWxsKG51bGwpO1xuICB9KTtcbn07XG4iLCJ2YXIgdG9JbnRlZ2VyID0gcmVxdWlyZSgnLi9fdG8taW50ZWdlcicpO1xudmFyIGRlZmluZWQgPSByZXF1aXJlKCcuL19kZWZpbmVkJyk7XG4vLyB0cnVlICAtPiBTdHJpbmcjYXRcbi8vIGZhbHNlIC0+IFN0cmluZyNjb2RlUG9pbnRBdFxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoVE9fU1RSSU5HKSB7XG4gIHJldHVybiBmdW5jdGlvbiAodGhhdCwgcG9zKSB7XG4gICAgdmFyIHMgPSBTdHJpbmcoZGVmaW5lZCh0aGF0KSk7XG4gICAgdmFyIGkgPSB0b0ludGVnZXIocG9zKTtcbiAgICB2YXIgbCA9IHMubGVuZ3RoO1xuICAgIHZhciBhLCBiO1xuICAgIGlmIChpIDwgMCB8fCBpID49IGwpIHJldHVybiBUT19TVFJJTkcgPyAnJyA6IHVuZGVmaW5lZDtcbiAgICBhID0gcy5jaGFyQ29kZUF0KGkpO1xuICAgIHJldHVybiBhIDwgMHhkODAwIHx8IGEgPiAweGRiZmYgfHwgaSArIDEgPT09IGwgfHwgKGIgPSBzLmNoYXJDb2RlQXQoaSArIDEpKSA8IDB4ZGMwMCB8fCBiID4gMHhkZmZmXG4gICAgICA/IFRPX1NUUklORyA/IHMuY2hhckF0KGkpIDogYVxuICAgICAgOiBUT19TVFJJTkcgPyBzLnNsaWNlKGksIGkgKyAyKSA6IChhIC0gMHhkODAwIDw8IDEwKSArIChiIC0gMHhkYzAwKSArIDB4MTAwMDA7XG4gIH07XG59O1xuIiwiLy8gaGVscGVyIGZvciBTdHJpbmcje3N0YXJ0c1dpdGgsIGVuZHNXaXRoLCBpbmNsdWRlc31cbnZhciBpc1JlZ0V4cCA9IHJlcXVpcmUoJy4vX2lzLXJlZ2V4cCcpO1xudmFyIGRlZmluZWQgPSByZXF1aXJlKCcuL19kZWZpbmVkJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKHRoYXQsIHNlYXJjaFN0cmluZywgTkFNRSkge1xuICBpZiAoaXNSZWdFeHAoc2VhcmNoU3RyaW5nKSkgdGhyb3cgVHlwZUVycm9yKCdTdHJpbmcjJyArIE5BTUUgKyBcIiBkb2Vzbid0IGFjY2VwdCByZWdleCFcIik7XG4gIHJldHVybiBTdHJpbmcoZGVmaW5lZCh0aGF0KSk7XG59O1xuIiwidmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4vX2ZhaWxzJyk7XG52YXIgZGVmaW5lZCA9IHJlcXVpcmUoJy4vX2RlZmluZWQnKTtcbnZhciBxdW90ID0gL1wiL2c7XG4vLyBCLjIuMy4yLjEgQ3JlYXRlSFRNTChzdHJpbmcsIHRhZywgYXR0cmlidXRlLCB2YWx1ZSlcbnZhciBjcmVhdGVIVE1MID0gZnVuY3Rpb24gKHN0cmluZywgdGFnLCBhdHRyaWJ1dGUsIHZhbHVlKSB7XG4gIHZhciBTID0gU3RyaW5nKGRlZmluZWQoc3RyaW5nKSk7XG4gIHZhciBwMSA9ICc8JyArIHRhZztcbiAgaWYgKGF0dHJpYnV0ZSAhPT0gJycpIHAxICs9ICcgJyArIGF0dHJpYnV0ZSArICc9XCInICsgU3RyaW5nKHZhbHVlKS5yZXBsYWNlKHF1b3QsICcmcXVvdDsnKSArICdcIic7XG4gIHJldHVybiBwMSArICc+JyArIFMgKyAnPC8nICsgdGFnICsgJz4nO1xufTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKE5BTUUsIGV4ZWMpIHtcbiAgdmFyIE8gPSB7fTtcbiAgT1tOQU1FXSA9IGV4ZWMoY3JlYXRlSFRNTCk7XG4gICRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogZmFpbHMoZnVuY3Rpb24gKCkge1xuICAgIHZhciB0ZXN0ID0gJydbTkFNRV0oJ1wiJyk7XG4gICAgcmV0dXJuIHRlc3QgIT09IHRlc3QudG9Mb3dlckNhc2UoKSB8fCB0ZXN0LnNwbGl0KCdcIicpLmxlbmd0aCA+IDM7XG4gIH0pLCAnU3RyaW5nJywgTyk7XG59O1xuIiwiLy8gaHR0cHM6Ly9naXRodWIuY29tL3RjMzkvcHJvcG9zYWwtc3RyaW5nLXBhZC1zdGFydC1lbmRcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpO1xudmFyIHJlcGVhdCA9IHJlcXVpcmUoJy4vX3N0cmluZy1yZXBlYXQnKTtcbnZhciBkZWZpbmVkID0gcmVxdWlyZSgnLi9fZGVmaW5lZCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICh0aGF0LCBtYXhMZW5ndGgsIGZpbGxTdHJpbmcsIGxlZnQpIHtcbiAgdmFyIFMgPSBTdHJpbmcoZGVmaW5lZCh0aGF0KSk7XG4gIHZhciBzdHJpbmdMZW5ndGggPSBTLmxlbmd0aDtcbiAgdmFyIGZpbGxTdHIgPSBmaWxsU3RyaW5nID09PSB1bmRlZmluZWQgPyAnICcgOiBTdHJpbmcoZmlsbFN0cmluZyk7XG4gIHZhciBpbnRNYXhMZW5ndGggPSB0b0xlbmd0aChtYXhMZW5ndGgpO1xuICBpZiAoaW50TWF4TGVuZ3RoIDw9IHN0cmluZ0xlbmd0aCB8fCBmaWxsU3RyID09ICcnKSByZXR1cm4gUztcbiAgdmFyIGZpbGxMZW4gPSBpbnRNYXhMZW5ndGggLSBzdHJpbmdMZW5ndGg7XG4gIHZhciBzdHJpbmdGaWxsZXIgPSByZXBlYXQuY2FsbChmaWxsU3RyLCBNYXRoLmNlaWwoZmlsbExlbiAvIGZpbGxTdHIubGVuZ3RoKSk7XG4gIGlmIChzdHJpbmdGaWxsZXIubGVuZ3RoID4gZmlsbExlbikgc3RyaW5nRmlsbGVyID0gc3RyaW5nRmlsbGVyLnNsaWNlKDAsIGZpbGxMZW4pO1xuICByZXR1cm4gbGVmdCA/IHN0cmluZ0ZpbGxlciArIFMgOiBTICsgc3RyaW5nRmlsbGVyO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciB0b0ludGVnZXIgPSByZXF1aXJlKCcuL190by1pbnRlZ2VyJyk7XG52YXIgZGVmaW5lZCA9IHJlcXVpcmUoJy4vX2RlZmluZWQnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiByZXBlYXQoY291bnQpIHtcbiAgdmFyIHN0ciA9IFN0cmluZyhkZWZpbmVkKHRoaXMpKTtcbiAgdmFyIHJlcyA9ICcnO1xuICB2YXIgbiA9IHRvSW50ZWdlcihjb3VudCk7XG4gIGlmIChuIDwgMCB8fCBuID09IEluZmluaXR5KSB0aHJvdyBSYW5nZUVycm9yKFwiQ291bnQgY2FuJ3QgYmUgbmVnYXRpdmVcIik7XG4gIGZvciAoO24gPiAwOyAobiA+Pj49IDEpICYmIChzdHIgKz0gc3RyKSkgaWYgKG4gJiAxKSByZXMgKz0gc3RyO1xuICByZXR1cm4gcmVzO1xufTtcbiIsInZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgZGVmaW5lZCA9IHJlcXVpcmUoJy4vX2RlZmluZWQnKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4vX2ZhaWxzJyk7XG52YXIgc3BhY2VzID0gcmVxdWlyZSgnLi9fc3RyaW5nLXdzJyk7XG52YXIgc3BhY2UgPSAnWycgKyBzcGFjZXMgKyAnXSc7XG52YXIgbm9uID0gJ1xcdTIwMGJcXHUwMDg1JztcbnZhciBsdHJpbSA9IFJlZ0V4cCgnXicgKyBzcGFjZSArIHNwYWNlICsgJyonKTtcbnZhciBydHJpbSA9IFJlZ0V4cChzcGFjZSArIHNwYWNlICsgJyokJyk7XG5cbnZhciBleHBvcnRlciA9IGZ1bmN0aW9uIChLRVksIGV4ZWMsIEFMSUFTKSB7XG4gIHZhciBleHAgPSB7fTtcbiAgdmFyIEZPUkNFID0gZmFpbHMoZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiAhIXNwYWNlc1tLRVldKCkgfHwgbm9uW0tFWV0oKSAhPSBub247XG4gIH0pO1xuICB2YXIgZm4gPSBleHBbS0VZXSA9IEZPUkNFID8gZXhlYyh0cmltKSA6IHNwYWNlc1tLRVldO1xuICBpZiAoQUxJQVMpIGV4cFtBTElBU10gPSBmbjtcbiAgJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiBGT1JDRSwgJ1N0cmluZycsIGV4cCk7XG59O1xuXG4vLyAxIC0+IFN0cmluZyN0cmltTGVmdFxuLy8gMiAtPiBTdHJpbmcjdHJpbVJpZ2h0XG4vLyAzIC0+IFN0cmluZyN0cmltXG52YXIgdHJpbSA9IGV4cG9ydGVyLnRyaW0gPSBmdW5jdGlvbiAoc3RyaW5nLCBUWVBFKSB7XG4gIHN0cmluZyA9IFN0cmluZyhkZWZpbmVkKHN0cmluZykpO1xuICBpZiAoVFlQRSAmIDEpIHN0cmluZyA9IHN0cmluZy5yZXBsYWNlKGx0cmltLCAnJyk7XG4gIGlmIChUWVBFICYgMikgc3RyaW5nID0gc3RyaW5nLnJlcGxhY2UocnRyaW0sICcnKTtcbiAgcmV0dXJuIHN0cmluZztcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0ZXI7XG4iLCJtb2R1bGUuZXhwb3J0cyA9ICdcXHgwOVxceDBBXFx4MEJcXHgwQ1xceDBEXFx4MjBcXHhBMFxcdTE2ODBcXHUxODBFXFx1MjAwMFxcdTIwMDFcXHUyMDAyXFx1MjAwMycgK1xuICAnXFx1MjAwNFxcdTIwMDVcXHUyMDA2XFx1MjAwN1xcdTIwMDhcXHUyMDA5XFx1MjAwQVxcdTIwMkZcXHUyMDVGXFx1MzAwMFxcdTIwMjhcXHUyMDI5XFx1RkVGRic7XG4iLCJ2YXIgY3R4ID0gcmVxdWlyZSgnLi9fY3R4Jyk7XG52YXIgaW52b2tlID0gcmVxdWlyZSgnLi9faW52b2tlJyk7XG52YXIgaHRtbCA9IHJlcXVpcmUoJy4vX2h0bWwnKTtcbnZhciBjZWwgPSByZXF1aXJlKCcuL19kb20tY3JlYXRlJyk7XG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi9fZ2xvYmFsJyk7XG52YXIgcHJvY2VzcyA9IGdsb2JhbC5wcm9jZXNzO1xudmFyIHNldFRhc2sgPSBnbG9iYWwuc2V0SW1tZWRpYXRlO1xudmFyIGNsZWFyVGFzayA9IGdsb2JhbC5jbGVhckltbWVkaWF0ZTtcbnZhciBNZXNzYWdlQ2hhbm5lbCA9IGdsb2JhbC5NZXNzYWdlQ2hhbm5lbDtcbnZhciBEaXNwYXRjaCA9IGdsb2JhbC5EaXNwYXRjaDtcbnZhciBjb3VudGVyID0gMDtcbnZhciBxdWV1ZSA9IHt9O1xudmFyIE9OUkVBRFlTVEFURUNIQU5HRSA9ICdvbnJlYWR5c3RhdGVjaGFuZ2UnO1xudmFyIGRlZmVyLCBjaGFubmVsLCBwb3J0O1xudmFyIHJ1biA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIGlkID0gK3RoaXM7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wcm90b3R5cGUtYnVpbHRpbnNcbiAgaWYgKHF1ZXVlLmhhc093blByb3BlcnR5KGlkKSkge1xuICAgIHZhciBmbiA9IHF1ZXVlW2lkXTtcbiAgICBkZWxldGUgcXVldWVbaWRdO1xuICAgIGZuKCk7XG4gIH1cbn07XG52YXIgbGlzdGVuZXIgPSBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgcnVuLmNhbGwoZXZlbnQuZGF0YSk7XG59O1xuLy8gTm9kZS5qcyAwLjkrICYgSUUxMCsgaGFzIHNldEltbWVkaWF0ZSwgb3RoZXJ3aXNlOlxuaWYgKCFzZXRUYXNrIHx8ICFjbGVhclRhc2spIHtcbiAgc2V0VGFzayA9IGZ1bmN0aW9uIHNldEltbWVkaWF0ZShmbikge1xuICAgIHZhciBhcmdzID0gW107XG4gICAgdmFyIGkgPSAxO1xuICAgIHdoaWxlIChhcmd1bWVudHMubGVuZ3RoID4gaSkgYXJncy5wdXNoKGFyZ3VtZW50c1tpKytdKTtcbiAgICBxdWV1ZVsrK2NvdW50ZXJdID0gZnVuY3Rpb24gKCkge1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLW5ldy1mdW5jXG4gICAgICBpbnZva2UodHlwZW9mIGZuID09ICdmdW5jdGlvbicgPyBmbiA6IEZ1bmN0aW9uKGZuKSwgYXJncyk7XG4gICAgfTtcbiAgICBkZWZlcihjb3VudGVyKTtcbiAgICByZXR1cm4gY291bnRlcjtcbiAgfTtcbiAgY2xlYXJUYXNrID0gZnVuY3Rpb24gY2xlYXJJbW1lZGlhdGUoaWQpIHtcbiAgICBkZWxldGUgcXVldWVbaWRdO1xuICB9O1xuICAvLyBOb2RlLmpzIDAuOC1cbiAgaWYgKHJlcXVpcmUoJy4vX2NvZicpKHByb2Nlc3MpID09ICdwcm9jZXNzJykge1xuICAgIGRlZmVyID0gZnVuY3Rpb24gKGlkKSB7XG4gICAgICBwcm9jZXNzLm5leHRUaWNrKGN0eChydW4sIGlkLCAxKSk7XG4gICAgfTtcbiAgLy8gU3BoZXJlIChKUyBnYW1lIGVuZ2luZSkgRGlzcGF0Y2ggQVBJXG4gIH0gZWxzZSBpZiAoRGlzcGF0Y2ggJiYgRGlzcGF0Y2gubm93KSB7XG4gICAgZGVmZXIgPSBmdW5jdGlvbiAoaWQpIHtcbiAgICAgIERpc3BhdGNoLm5vdyhjdHgocnVuLCBpZCwgMSkpO1xuICAgIH07XG4gIC8vIEJyb3dzZXJzIHdpdGggTWVzc2FnZUNoYW5uZWwsIGluY2x1ZGVzIFdlYldvcmtlcnNcbiAgfSBlbHNlIGlmIChNZXNzYWdlQ2hhbm5lbCkge1xuICAgIGNoYW5uZWwgPSBuZXcgTWVzc2FnZUNoYW5uZWwoKTtcbiAgICBwb3J0ID0gY2hhbm5lbC5wb3J0MjtcbiAgICBjaGFubmVsLnBvcnQxLm9ubWVzc2FnZSA9IGxpc3RlbmVyO1xuICAgIGRlZmVyID0gY3R4KHBvcnQucG9zdE1lc3NhZ2UsIHBvcnQsIDEpO1xuICAvLyBCcm93c2VycyB3aXRoIHBvc3RNZXNzYWdlLCBza2lwIFdlYldvcmtlcnNcbiAgLy8gSUU4IGhhcyBwb3N0TWVzc2FnZSwgYnV0IGl0J3Mgc3luYyAmIHR5cGVvZiBpdHMgcG9zdE1lc3NhZ2UgaXMgJ29iamVjdCdcbiAgfSBlbHNlIGlmIChnbG9iYWwuYWRkRXZlbnRMaXN0ZW5lciAmJiB0eXBlb2YgcG9zdE1lc3NhZ2UgPT0gJ2Z1bmN0aW9uJyAmJiAhZ2xvYmFsLmltcG9ydFNjcmlwdHMpIHtcbiAgICBkZWZlciA9IGZ1bmN0aW9uIChpZCkge1xuICAgICAgZ2xvYmFsLnBvc3RNZXNzYWdlKGlkICsgJycsICcqJyk7XG4gICAgfTtcbiAgICBnbG9iYWwuYWRkRXZlbnRMaXN0ZW5lcignbWVzc2FnZScsIGxpc3RlbmVyLCBmYWxzZSk7XG4gIC8vIElFOC1cbiAgfSBlbHNlIGlmIChPTlJFQURZU1RBVEVDSEFOR0UgaW4gY2VsKCdzY3JpcHQnKSkge1xuICAgIGRlZmVyID0gZnVuY3Rpb24gKGlkKSB7XG4gICAgICBodG1sLmFwcGVuZENoaWxkKGNlbCgnc2NyaXB0JykpW09OUkVBRFlTVEFURUNIQU5HRV0gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGh0bWwucmVtb3ZlQ2hpbGQodGhpcyk7XG4gICAgICAgIHJ1bi5jYWxsKGlkKTtcbiAgICAgIH07XG4gICAgfTtcbiAgLy8gUmVzdCBvbGQgYnJvd3NlcnNcbiAgfSBlbHNlIHtcbiAgICBkZWZlciA9IGZ1bmN0aW9uIChpZCkge1xuICAgICAgc2V0VGltZW91dChjdHgocnVuLCBpZCwgMSksIDApO1xuICAgIH07XG4gIH1cbn1cbm1vZHVsZS5leHBvcnRzID0ge1xuICBzZXQ6IHNldFRhc2ssXG4gIGNsZWFyOiBjbGVhclRhc2tcbn07XG4iLCJ2YXIgdG9JbnRlZ2VyID0gcmVxdWlyZSgnLi9fdG8taW50ZWdlcicpO1xudmFyIG1heCA9IE1hdGgubWF4O1xudmFyIG1pbiA9IE1hdGgubWluO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaW5kZXgsIGxlbmd0aCkge1xuICBpbmRleCA9IHRvSW50ZWdlcihpbmRleCk7XG4gIHJldHVybiBpbmRleCA8IDAgPyBtYXgoaW5kZXggKyBsZW5ndGgsIDApIDogbWluKGluZGV4LCBsZW5ndGgpO1xufTtcbiIsIi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLXRvaW5kZXhcbnZhciB0b0ludGVnZXIgPSByZXF1aXJlKCcuL190by1pbnRlZ2VyJyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuL190by1sZW5ndGgnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIGlmIChpdCA9PT0gdW5kZWZpbmVkKSByZXR1cm4gMDtcbiAgdmFyIG51bWJlciA9IHRvSW50ZWdlcihpdCk7XG4gIHZhciBsZW5ndGggPSB0b0xlbmd0aChudW1iZXIpO1xuICBpZiAobnVtYmVyICE9PSBsZW5ndGgpIHRocm93IFJhbmdlRXJyb3IoJ1dyb25nIGxlbmd0aCEnKTtcbiAgcmV0dXJuIGxlbmd0aDtcbn07XG4iLCIvLyA3LjEuNCBUb0ludGVnZXJcbnZhciBjZWlsID0gTWF0aC5jZWlsO1xudmFyIGZsb29yID0gTWF0aC5mbG9vcjtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBpc05hTihpdCA9ICtpdCkgPyAwIDogKGl0ID4gMCA/IGZsb29yIDogY2VpbCkoaXQpO1xufTtcbiIsIi8vIHRvIGluZGV4ZWQgb2JqZWN0LCB0b09iamVjdCB3aXRoIGZhbGxiYWNrIGZvciBub24tYXJyYXktbGlrZSBFUzMgc3RyaW5nc1xudmFyIElPYmplY3QgPSByZXF1aXJlKCcuL19pb2JqZWN0Jyk7XG52YXIgZGVmaW5lZCA9IHJlcXVpcmUoJy4vX2RlZmluZWQnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBJT2JqZWN0KGRlZmluZWQoaXQpKTtcbn07XG4iLCIvLyA3LjEuMTUgVG9MZW5ndGhcbnZhciB0b0ludGVnZXIgPSByZXF1aXJlKCcuL190by1pbnRlZ2VyJyk7XG52YXIgbWluID0gTWF0aC5taW47XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gaXQgPiAwID8gbWluKHRvSW50ZWdlcihpdCksIDB4MWZmZmZmZmZmZmZmZmYpIDogMDsgLy8gcG93KDIsIDUzKSAtIDEgPT0gOTAwNzE5OTI1NDc0MDk5MVxufTtcbiIsIi8vIDcuMS4xMyBUb09iamVjdChhcmd1bWVudClcbnZhciBkZWZpbmVkID0gcmVxdWlyZSgnLi9fZGVmaW5lZCcpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIE9iamVjdChkZWZpbmVkKGl0KSk7XG59O1xuIiwiLy8gNy4xLjEgVG9QcmltaXRpdmUoaW5wdXQgWywgUHJlZmVycmVkVHlwZV0pXG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbi8vIGluc3RlYWQgb2YgdGhlIEVTNiBzcGVjIHZlcnNpb24sIHdlIGRpZG4ndCBpbXBsZW1lbnQgQEB0b1ByaW1pdGl2ZSBjYXNlXG4vLyBhbmQgdGhlIHNlY29uZCBhcmd1bWVudCAtIGZsYWcgLSBwcmVmZXJyZWQgdHlwZSBpcyBhIHN0cmluZ1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQsIFMpIHtcbiAgaWYgKCFpc09iamVjdChpdCkpIHJldHVybiBpdDtcbiAgdmFyIGZuLCB2YWw7XG4gIGlmIChTICYmIHR5cGVvZiAoZm4gPSBpdC50b1N0cmluZykgPT0gJ2Z1bmN0aW9uJyAmJiAhaXNPYmplY3QodmFsID0gZm4uY2FsbChpdCkpKSByZXR1cm4gdmFsO1xuICBpZiAodHlwZW9mIChmbiA9IGl0LnZhbHVlT2YpID09ICdmdW5jdGlvbicgJiYgIWlzT2JqZWN0KHZhbCA9IGZuLmNhbGwoaXQpKSkgcmV0dXJuIHZhbDtcbiAgaWYgKCFTICYmIHR5cGVvZiAoZm4gPSBpdC50b1N0cmluZykgPT0gJ2Z1bmN0aW9uJyAmJiAhaXNPYmplY3QodmFsID0gZm4uY2FsbChpdCkpKSByZXR1cm4gdmFsO1xuICB0aHJvdyBUeXBlRXJyb3IoXCJDYW4ndCBjb252ZXJ0IG9iamVjdCB0byBwcmltaXRpdmUgdmFsdWVcIik7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuaWYgKHJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJykpIHtcbiAgdmFyIExJQlJBUlkgPSByZXF1aXJlKCcuL19saWJyYXJ5Jyk7XG4gIHZhciBnbG9iYWwgPSByZXF1aXJlKCcuL19nbG9iYWwnKTtcbiAgdmFyIGZhaWxzID0gcmVxdWlyZSgnLi9fZmFpbHMnKTtcbiAgdmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbiAgdmFyICR0eXBlZCA9IHJlcXVpcmUoJy4vX3R5cGVkJyk7XG4gIHZhciAkYnVmZmVyID0gcmVxdWlyZSgnLi9fdHlwZWQtYnVmZmVyJyk7XG4gIHZhciBjdHggPSByZXF1aXJlKCcuL19jdHgnKTtcbiAgdmFyIGFuSW5zdGFuY2UgPSByZXF1aXJlKCcuL19hbi1pbnN0YW5jZScpO1xuICB2YXIgcHJvcGVydHlEZXNjID0gcmVxdWlyZSgnLi9fcHJvcGVydHktZGVzYycpO1xuICB2YXIgaGlkZSA9IHJlcXVpcmUoJy4vX2hpZGUnKTtcbiAgdmFyIHJlZGVmaW5lQWxsID0gcmVxdWlyZSgnLi9fcmVkZWZpbmUtYWxsJyk7XG4gIHZhciB0b0ludGVnZXIgPSByZXF1aXJlKCcuL190by1pbnRlZ2VyJyk7XG4gIHZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpO1xuICB2YXIgdG9JbmRleCA9IHJlcXVpcmUoJy4vX3RvLWluZGV4Jyk7XG4gIHZhciB0b0Fic29sdXRlSW5kZXggPSByZXF1aXJlKCcuL190by1hYnNvbHV0ZS1pbmRleCcpO1xuICB2YXIgdG9QcmltaXRpdmUgPSByZXF1aXJlKCcuL190by1wcmltaXRpdmUnKTtcbiAgdmFyIGhhcyA9IHJlcXVpcmUoJy4vX2hhcycpO1xuICB2YXIgY2xhc3NvZiA9IHJlcXVpcmUoJy4vX2NsYXNzb2YnKTtcbiAgdmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG4gIHZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4vX3RvLW9iamVjdCcpO1xuICB2YXIgaXNBcnJheUl0ZXIgPSByZXF1aXJlKCcuL19pcy1hcnJheS1pdGVyJyk7XG4gIHZhciBjcmVhdGUgPSByZXF1aXJlKCcuL19vYmplY3QtY3JlYXRlJyk7XG4gIHZhciBnZXRQcm90b3R5cGVPZiA9IHJlcXVpcmUoJy4vX29iamVjdC1ncG8nKTtcbiAgdmFyIGdPUE4gPSByZXF1aXJlKCcuL19vYmplY3QtZ29wbicpLmY7XG4gIHZhciBnZXRJdGVyRm4gPSByZXF1aXJlKCcuL2NvcmUuZ2V0LWl0ZXJhdG9yLW1ldGhvZCcpO1xuICB2YXIgdWlkID0gcmVxdWlyZSgnLi9fdWlkJyk7XG4gIHZhciB3a3MgPSByZXF1aXJlKCcuL193a3MnKTtcbiAgdmFyIGNyZWF0ZUFycmF5TWV0aG9kID0gcmVxdWlyZSgnLi9fYXJyYXktbWV0aG9kcycpO1xuICB2YXIgY3JlYXRlQXJyYXlJbmNsdWRlcyA9IHJlcXVpcmUoJy4vX2FycmF5LWluY2x1ZGVzJyk7XG4gIHZhciBzcGVjaWVzQ29uc3RydWN0b3IgPSByZXF1aXJlKCcuL19zcGVjaWVzLWNvbnN0cnVjdG9yJyk7XG4gIHZhciBBcnJheUl0ZXJhdG9ycyA9IHJlcXVpcmUoJy4vZXM2LmFycmF5Lml0ZXJhdG9yJyk7XG4gIHZhciBJdGVyYXRvcnMgPSByZXF1aXJlKCcuL19pdGVyYXRvcnMnKTtcbiAgdmFyICRpdGVyRGV0ZWN0ID0gcmVxdWlyZSgnLi9faXRlci1kZXRlY3QnKTtcbiAgdmFyIHNldFNwZWNpZXMgPSByZXF1aXJlKCcuL19zZXQtc3BlY2llcycpO1xuICB2YXIgYXJyYXlGaWxsID0gcmVxdWlyZSgnLi9fYXJyYXktZmlsbCcpO1xuICB2YXIgYXJyYXlDb3B5V2l0aGluID0gcmVxdWlyZSgnLi9fYXJyYXktY29weS13aXRoaW4nKTtcbiAgdmFyICREUCA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpO1xuICB2YXIgJEdPUEQgPSByZXF1aXJlKCcuL19vYmplY3QtZ29wZCcpO1xuICB2YXIgZFAgPSAkRFAuZjtcbiAgdmFyIGdPUEQgPSAkR09QRC5mO1xuICB2YXIgUmFuZ2VFcnJvciA9IGdsb2JhbC5SYW5nZUVycm9yO1xuICB2YXIgVHlwZUVycm9yID0gZ2xvYmFsLlR5cGVFcnJvcjtcbiAgdmFyIFVpbnQ4QXJyYXkgPSBnbG9iYWwuVWludDhBcnJheTtcbiAgdmFyIEFSUkFZX0JVRkZFUiA9ICdBcnJheUJ1ZmZlcic7XG4gIHZhciBTSEFSRURfQlVGRkVSID0gJ1NoYXJlZCcgKyBBUlJBWV9CVUZGRVI7XG4gIHZhciBCWVRFU19QRVJfRUxFTUVOVCA9ICdCWVRFU19QRVJfRUxFTUVOVCc7XG4gIHZhciBQUk9UT1RZUEUgPSAncHJvdG90eXBlJztcbiAgdmFyIEFycmF5UHJvdG8gPSBBcnJheVtQUk9UT1RZUEVdO1xuICB2YXIgJEFycmF5QnVmZmVyID0gJGJ1ZmZlci5BcnJheUJ1ZmZlcjtcbiAgdmFyICREYXRhVmlldyA9ICRidWZmZXIuRGF0YVZpZXc7XG4gIHZhciBhcnJheUZvckVhY2ggPSBjcmVhdGVBcnJheU1ldGhvZCgwKTtcbiAgdmFyIGFycmF5RmlsdGVyID0gY3JlYXRlQXJyYXlNZXRob2QoMik7XG4gIHZhciBhcnJheVNvbWUgPSBjcmVhdGVBcnJheU1ldGhvZCgzKTtcbiAgdmFyIGFycmF5RXZlcnkgPSBjcmVhdGVBcnJheU1ldGhvZCg0KTtcbiAgdmFyIGFycmF5RmluZCA9IGNyZWF0ZUFycmF5TWV0aG9kKDUpO1xuICB2YXIgYXJyYXlGaW5kSW5kZXggPSBjcmVhdGVBcnJheU1ldGhvZCg2KTtcbiAgdmFyIGFycmF5SW5jbHVkZXMgPSBjcmVhdGVBcnJheUluY2x1ZGVzKHRydWUpO1xuICB2YXIgYXJyYXlJbmRleE9mID0gY3JlYXRlQXJyYXlJbmNsdWRlcyhmYWxzZSk7XG4gIHZhciBhcnJheVZhbHVlcyA9IEFycmF5SXRlcmF0b3JzLnZhbHVlcztcbiAgdmFyIGFycmF5S2V5cyA9IEFycmF5SXRlcmF0b3JzLmtleXM7XG4gIHZhciBhcnJheUVudHJpZXMgPSBBcnJheUl0ZXJhdG9ycy5lbnRyaWVzO1xuICB2YXIgYXJyYXlMYXN0SW5kZXhPZiA9IEFycmF5UHJvdG8ubGFzdEluZGV4T2Y7XG4gIHZhciBhcnJheVJlZHVjZSA9IEFycmF5UHJvdG8ucmVkdWNlO1xuICB2YXIgYXJyYXlSZWR1Y2VSaWdodCA9IEFycmF5UHJvdG8ucmVkdWNlUmlnaHQ7XG4gIHZhciBhcnJheUpvaW4gPSBBcnJheVByb3RvLmpvaW47XG4gIHZhciBhcnJheVNvcnQgPSBBcnJheVByb3RvLnNvcnQ7XG4gIHZhciBhcnJheVNsaWNlID0gQXJyYXlQcm90by5zbGljZTtcbiAgdmFyIGFycmF5VG9TdHJpbmcgPSBBcnJheVByb3RvLnRvU3RyaW5nO1xuICB2YXIgYXJyYXlUb0xvY2FsZVN0cmluZyA9IEFycmF5UHJvdG8udG9Mb2NhbGVTdHJpbmc7XG4gIHZhciBJVEVSQVRPUiA9IHdrcygnaXRlcmF0b3InKTtcbiAgdmFyIFRBRyA9IHdrcygndG9TdHJpbmdUYWcnKTtcbiAgdmFyIFRZUEVEX0NPTlNUUlVDVE9SID0gdWlkKCd0eXBlZF9jb25zdHJ1Y3RvcicpO1xuICB2YXIgREVGX0NPTlNUUlVDVE9SID0gdWlkKCdkZWZfY29uc3RydWN0b3InKTtcbiAgdmFyIEFMTF9DT05TVFJVQ1RPUlMgPSAkdHlwZWQuQ09OU1RSO1xuICB2YXIgVFlQRURfQVJSQVkgPSAkdHlwZWQuVFlQRUQ7XG4gIHZhciBWSUVXID0gJHR5cGVkLlZJRVc7XG4gIHZhciBXUk9OR19MRU5HVEggPSAnV3JvbmcgbGVuZ3RoISc7XG5cbiAgdmFyICRtYXAgPSBjcmVhdGVBcnJheU1ldGhvZCgxLCBmdW5jdGlvbiAoTywgbGVuZ3RoKSB7XG4gICAgcmV0dXJuIGFsbG9jYXRlKHNwZWNpZXNDb25zdHJ1Y3RvcihPLCBPW0RFRl9DT05TVFJVQ1RPUl0pLCBsZW5ndGgpO1xuICB9KTtcblxuICB2YXIgTElUVExFX0VORElBTiA9IGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW5kZWZcbiAgICByZXR1cm4gbmV3IFVpbnQ4QXJyYXkobmV3IFVpbnQxNkFycmF5KFsxXSkuYnVmZmVyKVswXSA9PT0gMTtcbiAgfSk7XG5cbiAgdmFyIEZPUkNFRF9TRVQgPSAhIVVpbnQ4QXJyYXkgJiYgISFVaW50OEFycmF5W1BST1RPVFlQRV0uc2V0ICYmIGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgICBuZXcgVWludDhBcnJheSgxKS5zZXQoe30pO1xuICB9KTtcblxuICB2YXIgdG9PZmZzZXQgPSBmdW5jdGlvbiAoaXQsIEJZVEVTKSB7XG4gICAgdmFyIG9mZnNldCA9IHRvSW50ZWdlcihpdCk7XG4gICAgaWYgKG9mZnNldCA8IDAgfHwgb2Zmc2V0ICUgQllURVMpIHRocm93IFJhbmdlRXJyb3IoJ1dyb25nIG9mZnNldCEnKTtcbiAgICByZXR1cm4gb2Zmc2V0O1xuICB9O1xuXG4gIHZhciB2YWxpZGF0ZSA9IGZ1bmN0aW9uIChpdCkge1xuICAgIGlmIChpc09iamVjdChpdCkgJiYgVFlQRURfQVJSQVkgaW4gaXQpIHJldHVybiBpdDtcbiAgICB0aHJvdyBUeXBlRXJyb3IoaXQgKyAnIGlzIG5vdCBhIHR5cGVkIGFycmF5IScpO1xuICB9O1xuXG4gIHZhciBhbGxvY2F0ZSA9IGZ1bmN0aW9uIChDLCBsZW5ndGgpIHtcbiAgICBpZiAoIShpc09iamVjdChDKSAmJiBUWVBFRF9DT05TVFJVQ1RPUiBpbiBDKSkge1xuICAgICAgdGhyb3cgVHlwZUVycm9yKCdJdCBpcyBub3QgYSB0eXBlZCBhcnJheSBjb25zdHJ1Y3RvciEnKTtcbiAgICB9IHJldHVybiBuZXcgQyhsZW5ndGgpO1xuICB9O1xuXG4gIHZhciBzcGVjaWVzRnJvbUxpc3QgPSBmdW5jdGlvbiAoTywgbGlzdCkge1xuICAgIHJldHVybiBmcm9tTGlzdChzcGVjaWVzQ29uc3RydWN0b3IoTywgT1tERUZfQ09OU1RSVUNUT1JdKSwgbGlzdCk7XG4gIH07XG5cbiAgdmFyIGZyb21MaXN0ID0gZnVuY3Rpb24gKEMsIGxpc3QpIHtcbiAgICB2YXIgaW5kZXggPSAwO1xuICAgIHZhciBsZW5ndGggPSBsaXN0Lmxlbmd0aDtcbiAgICB2YXIgcmVzdWx0ID0gYWxsb2NhdGUoQywgbGVuZ3RoKTtcbiAgICB3aGlsZSAobGVuZ3RoID4gaW5kZXgpIHJlc3VsdFtpbmRleF0gPSBsaXN0W2luZGV4KytdO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH07XG5cbiAgdmFyIGFkZEdldHRlciA9IGZ1bmN0aW9uIChpdCwga2V5LCBpbnRlcm5hbCkge1xuICAgIGRQKGl0LCBrZXksIHsgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzLl9kW2ludGVybmFsXTsgfSB9KTtcbiAgfTtcblxuICB2YXIgJGZyb20gPSBmdW5jdGlvbiBmcm9tKHNvdXJjZSAvKiAsIG1hcGZuLCB0aGlzQXJnICovKSB7XG4gICAgdmFyIE8gPSB0b09iamVjdChzb3VyY2UpO1xuICAgIHZhciBhTGVuID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgICB2YXIgbWFwZm4gPSBhTGVuID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZDtcbiAgICB2YXIgbWFwcGluZyA9IG1hcGZuICE9PSB1bmRlZmluZWQ7XG4gICAgdmFyIGl0ZXJGbiA9IGdldEl0ZXJGbihPKTtcbiAgICB2YXIgaSwgbGVuZ3RoLCB2YWx1ZXMsIHJlc3VsdCwgc3RlcCwgaXRlcmF0b3I7XG4gICAgaWYgKGl0ZXJGbiAhPSB1bmRlZmluZWQgJiYgIWlzQXJyYXlJdGVyKGl0ZXJGbikpIHtcbiAgICAgIGZvciAoaXRlcmF0b3IgPSBpdGVyRm4uY2FsbChPKSwgdmFsdWVzID0gW10sIGkgPSAwOyAhKHN0ZXAgPSBpdGVyYXRvci5uZXh0KCkpLmRvbmU7IGkrKykge1xuICAgICAgICB2YWx1ZXMucHVzaChzdGVwLnZhbHVlKTtcbiAgICAgIH0gTyA9IHZhbHVlcztcbiAgICB9XG4gICAgaWYgKG1hcHBpbmcgJiYgYUxlbiA+IDIpIG1hcGZuID0gY3R4KG1hcGZuLCBhcmd1bWVudHNbMl0sIDIpO1xuICAgIGZvciAoaSA9IDAsIGxlbmd0aCA9IHRvTGVuZ3RoKE8ubGVuZ3RoKSwgcmVzdWx0ID0gYWxsb2NhdGUodGhpcywgbGVuZ3RoKTsgbGVuZ3RoID4gaTsgaSsrKSB7XG4gICAgICByZXN1bHRbaV0gPSBtYXBwaW5nID8gbWFwZm4oT1tpXSwgaSkgOiBPW2ldO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9O1xuXG4gIHZhciAkb2YgPSBmdW5jdGlvbiBvZigvKiAuLi5pdGVtcyAqLykge1xuICAgIHZhciBpbmRleCA9IDA7XG4gICAgdmFyIGxlbmd0aCA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gICAgdmFyIHJlc3VsdCA9IGFsbG9jYXRlKHRoaXMsIGxlbmd0aCk7XG4gICAgd2hpbGUgKGxlbmd0aCA+IGluZGV4KSByZXN1bHRbaW5kZXhdID0gYXJndW1lbnRzW2luZGV4KytdO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH07XG5cbiAgLy8gaU9TIFNhZmFyaSA2LnggZmFpbHMgaGVyZVxuICB2YXIgVE9fTE9DQUxFX0JVRyA9ICEhVWludDhBcnJheSAmJiBmYWlscyhmdW5jdGlvbiAoKSB7IGFycmF5VG9Mb2NhbGVTdHJpbmcuY2FsbChuZXcgVWludDhBcnJheSgxKSk7IH0pO1xuXG4gIHZhciAkdG9Mb2NhbGVTdHJpbmcgPSBmdW5jdGlvbiB0b0xvY2FsZVN0cmluZygpIHtcbiAgICByZXR1cm4gYXJyYXlUb0xvY2FsZVN0cmluZy5hcHBseShUT19MT0NBTEVfQlVHID8gYXJyYXlTbGljZS5jYWxsKHZhbGlkYXRlKHRoaXMpKSA6IHZhbGlkYXRlKHRoaXMpLCBhcmd1bWVudHMpO1xuICB9O1xuXG4gIHZhciBwcm90byA9IHtcbiAgICBjb3B5V2l0aGluOiBmdW5jdGlvbiBjb3B5V2l0aGluKHRhcmdldCwgc3RhcnQgLyogLCBlbmQgKi8pIHtcbiAgICAgIHJldHVybiBhcnJheUNvcHlXaXRoaW4uY2FsbCh2YWxpZGF0ZSh0aGlzKSwgdGFyZ2V0LCBzdGFydCwgYXJndW1lbnRzLmxlbmd0aCA+IDIgPyBhcmd1bWVudHNbMl0gOiB1bmRlZmluZWQpO1xuICAgIH0sXG4gICAgZXZlcnk6IGZ1bmN0aW9uIGV2ZXJ5KGNhbGxiYWNrZm4gLyogLCB0aGlzQXJnICovKSB7XG4gICAgICByZXR1cm4gYXJyYXlFdmVyeSh2YWxpZGF0ZSh0aGlzKSwgY2FsbGJhY2tmbiwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpO1xuICAgIH0sXG4gICAgZmlsbDogZnVuY3Rpb24gZmlsbCh2YWx1ZSAvKiAsIHN0YXJ0LCBlbmQgKi8pIHsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bnVzZWQtdmFyc1xuICAgICAgcmV0dXJuIGFycmF5RmlsbC5hcHBseSh2YWxpZGF0ZSh0aGlzKSwgYXJndW1lbnRzKTtcbiAgICB9LFxuICAgIGZpbHRlcjogZnVuY3Rpb24gZmlsdGVyKGNhbGxiYWNrZm4gLyogLCB0aGlzQXJnICovKSB7XG4gICAgICByZXR1cm4gc3BlY2llc0Zyb21MaXN0KHRoaXMsIGFycmF5RmlsdGVyKHZhbGlkYXRlKHRoaXMpLCBjYWxsYmFja2ZuLFxuICAgICAgICBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCkpO1xuICAgIH0sXG4gICAgZmluZDogZnVuY3Rpb24gZmluZChwcmVkaWNhdGUgLyogLCB0aGlzQXJnICovKSB7XG4gICAgICByZXR1cm4gYXJyYXlGaW5kKHZhbGlkYXRlKHRoaXMpLCBwcmVkaWNhdGUsIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKTtcbiAgICB9LFxuICAgIGZpbmRJbmRleDogZnVuY3Rpb24gZmluZEluZGV4KHByZWRpY2F0ZSAvKiAsIHRoaXNBcmcgKi8pIHtcbiAgICAgIHJldHVybiBhcnJheUZpbmRJbmRleCh2YWxpZGF0ZSh0aGlzKSwgcHJlZGljYXRlLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCk7XG4gICAgfSxcbiAgICBmb3JFYWNoOiBmdW5jdGlvbiBmb3JFYWNoKGNhbGxiYWNrZm4gLyogLCB0aGlzQXJnICovKSB7XG4gICAgICBhcnJheUZvckVhY2godmFsaWRhdGUodGhpcyksIGNhbGxiYWNrZm4sIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKTtcbiAgICB9LFxuICAgIGluZGV4T2Y6IGZ1bmN0aW9uIGluZGV4T2Yoc2VhcmNoRWxlbWVudCAvKiAsIGZyb21JbmRleCAqLykge1xuICAgICAgcmV0dXJuIGFycmF5SW5kZXhPZih2YWxpZGF0ZSh0aGlzKSwgc2VhcmNoRWxlbWVudCwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpO1xuICAgIH0sXG4gICAgaW5jbHVkZXM6IGZ1bmN0aW9uIGluY2x1ZGVzKHNlYXJjaEVsZW1lbnQgLyogLCBmcm9tSW5kZXggKi8pIHtcbiAgICAgIHJldHVybiBhcnJheUluY2x1ZGVzKHZhbGlkYXRlKHRoaXMpLCBzZWFyY2hFbGVtZW50LCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCk7XG4gICAgfSxcbiAgICBqb2luOiBmdW5jdGlvbiBqb2luKHNlcGFyYXRvcikgeyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVudXNlZC12YXJzXG4gICAgICByZXR1cm4gYXJyYXlKb2luLmFwcGx5KHZhbGlkYXRlKHRoaXMpLCBhcmd1bWVudHMpO1xuICAgIH0sXG4gICAgbGFzdEluZGV4T2Y6IGZ1bmN0aW9uIGxhc3RJbmRleE9mKHNlYXJjaEVsZW1lbnQgLyogLCBmcm9tSW5kZXggKi8pIHsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bnVzZWQtdmFyc1xuICAgICAgcmV0dXJuIGFycmF5TGFzdEluZGV4T2YuYXBwbHkodmFsaWRhdGUodGhpcyksIGFyZ3VtZW50cyk7XG4gICAgfSxcbiAgICBtYXA6IGZ1bmN0aW9uIG1hcChtYXBmbiAvKiAsIHRoaXNBcmcgKi8pIHtcbiAgICAgIHJldHVybiAkbWFwKHZhbGlkYXRlKHRoaXMpLCBtYXBmbiwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpO1xuICAgIH0sXG4gICAgcmVkdWNlOiBmdW5jdGlvbiByZWR1Y2UoY2FsbGJhY2tmbiAvKiAsIGluaXRpYWxWYWx1ZSAqLykgeyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVudXNlZC12YXJzXG4gICAgICByZXR1cm4gYXJyYXlSZWR1Y2UuYXBwbHkodmFsaWRhdGUodGhpcyksIGFyZ3VtZW50cyk7XG4gICAgfSxcbiAgICByZWR1Y2VSaWdodDogZnVuY3Rpb24gcmVkdWNlUmlnaHQoY2FsbGJhY2tmbiAvKiAsIGluaXRpYWxWYWx1ZSAqLykgeyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVudXNlZC12YXJzXG4gICAgICByZXR1cm4gYXJyYXlSZWR1Y2VSaWdodC5hcHBseSh2YWxpZGF0ZSh0aGlzKSwgYXJndW1lbnRzKTtcbiAgICB9LFxuICAgIHJldmVyc2U6IGZ1bmN0aW9uIHJldmVyc2UoKSB7XG4gICAgICB2YXIgdGhhdCA9IHRoaXM7XG4gICAgICB2YXIgbGVuZ3RoID0gdmFsaWRhdGUodGhhdCkubGVuZ3RoO1xuICAgICAgdmFyIG1pZGRsZSA9IE1hdGguZmxvb3IobGVuZ3RoIC8gMik7XG4gICAgICB2YXIgaW5kZXggPSAwO1xuICAgICAgdmFyIHZhbHVlO1xuICAgICAgd2hpbGUgKGluZGV4IDwgbWlkZGxlKSB7XG4gICAgICAgIHZhbHVlID0gdGhhdFtpbmRleF07XG4gICAgICAgIHRoYXRbaW5kZXgrK10gPSB0aGF0Wy0tbGVuZ3RoXTtcbiAgICAgICAgdGhhdFtsZW5ndGhdID0gdmFsdWU7XG4gICAgICB9IHJldHVybiB0aGF0O1xuICAgIH0sXG4gICAgc29tZTogZnVuY3Rpb24gc29tZShjYWxsYmFja2ZuIC8qICwgdGhpc0FyZyAqLykge1xuICAgICAgcmV0dXJuIGFycmF5U29tZSh2YWxpZGF0ZSh0aGlzKSwgY2FsbGJhY2tmbiwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpO1xuICAgIH0sXG4gICAgc29ydDogZnVuY3Rpb24gc29ydChjb21wYXJlZm4pIHtcbiAgICAgIHJldHVybiBhcnJheVNvcnQuY2FsbCh2YWxpZGF0ZSh0aGlzKSwgY29tcGFyZWZuKTtcbiAgICB9LFxuICAgIHN1YmFycmF5OiBmdW5jdGlvbiBzdWJhcnJheShiZWdpbiwgZW5kKSB7XG4gICAgICB2YXIgTyA9IHZhbGlkYXRlKHRoaXMpO1xuICAgICAgdmFyIGxlbmd0aCA9IE8ubGVuZ3RoO1xuICAgICAgdmFyICRiZWdpbiA9IHRvQWJzb2x1dGVJbmRleChiZWdpbiwgbGVuZ3RoKTtcbiAgICAgIHJldHVybiBuZXcgKHNwZWNpZXNDb25zdHJ1Y3RvcihPLCBPW0RFRl9DT05TVFJVQ1RPUl0pKShcbiAgICAgICAgTy5idWZmZXIsXG4gICAgICAgIE8uYnl0ZU9mZnNldCArICRiZWdpbiAqIE8uQllURVNfUEVSX0VMRU1FTlQsXG4gICAgICAgIHRvTGVuZ3RoKChlbmQgPT09IHVuZGVmaW5lZCA/IGxlbmd0aCA6IHRvQWJzb2x1dGVJbmRleChlbmQsIGxlbmd0aCkpIC0gJGJlZ2luKVxuICAgICAgKTtcbiAgICB9XG4gIH07XG5cbiAgdmFyICRzbGljZSA9IGZ1bmN0aW9uIHNsaWNlKHN0YXJ0LCBlbmQpIHtcbiAgICByZXR1cm4gc3BlY2llc0Zyb21MaXN0KHRoaXMsIGFycmF5U2xpY2UuY2FsbCh2YWxpZGF0ZSh0aGlzKSwgc3RhcnQsIGVuZCkpO1xuICB9O1xuXG4gIHZhciAkc2V0ID0gZnVuY3Rpb24gc2V0KGFycmF5TGlrZSAvKiAsIG9mZnNldCAqLykge1xuICAgIHZhbGlkYXRlKHRoaXMpO1xuICAgIHZhciBvZmZzZXQgPSB0b09mZnNldChhcmd1bWVudHNbMV0sIDEpO1xuICAgIHZhciBsZW5ndGggPSB0aGlzLmxlbmd0aDtcbiAgICB2YXIgc3JjID0gdG9PYmplY3QoYXJyYXlMaWtlKTtcbiAgICB2YXIgbGVuID0gdG9MZW5ndGgoc3JjLmxlbmd0aCk7XG4gICAgdmFyIGluZGV4ID0gMDtcbiAgICBpZiAobGVuICsgb2Zmc2V0ID4gbGVuZ3RoKSB0aHJvdyBSYW5nZUVycm9yKFdST05HX0xFTkdUSCk7XG4gICAgd2hpbGUgKGluZGV4IDwgbGVuKSB0aGlzW29mZnNldCArIGluZGV4XSA9IHNyY1tpbmRleCsrXTtcbiAgfTtcblxuICB2YXIgJGl0ZXJhdG9ycyA9IHtcbiAgICBlbnRyaWVzOiBmdW5jdGlvbiBlbnRyaWVzKCkge1xuICAgICAgcmV0dXJuIGFycmF5RW50cmllcy5jYWxsKHZhbGlkYXRlKHRoaXMpKTtcbiAgICB9LFxuICAgIGtleXM6IGZ1bmN0aW9uIGtleXMoKSB7XG4gICAgICByZXR1cm4gYXJyYXlLZXlzLmNhbGwodmFsaWRhdGUodGhpcykpO1xuICAgIH0sXG4gICAgdmFsdWVzOiBmdW5jdGlvbiB2YWx1ZXMoKSB7XG4gICAgICByZXR1cm4gYXJyYXlWYWx1ZXMuY2FsbCh2YWxpZGF0ZSh0aGlzKSk7XG4gICAgfVxuICB9O1xuXG4gIHZhciBpc1RBSW5kZXggPSBmdW5jdGlvbiAodGFyZ2V0LCBrZXkpIHtcbiAgICByZXR1cm4gaXNPYmplY3QodGFyZ2V0KVxuICAgICAgJiYgdGFyZ2V0W1RZUEVEX0FSUkFZXVxuICAgICAgJiYgdHlwZW9mIGtleSAhPSAnc3ltYm9sJ1xuICAgICAgJiYga2V5IGluIHRhcmdldFxuICAgICAgJiYgU3RyaW5nKCtrZXkpID09IFN0cmluZyhrZXkpO1xuICB9O1xuICB2YXIgJGdldERlc2MgPSBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodGFyZ2V0LCBrZXkpIHtcbiAgICByZXR1cm4gaXNUQUluZGV4KHRhcmdldCwga2V5ID0gdG9QcmltaXRpdmUoa2V5LCB0cnVlKSlcbiAgICAgID8gcHJvcGVydHlEZXNjKDIsIHRhcmdldFtrZXldKVxuICAgICAgOiBnT1BEKHRhcmdldCwga2V5KTtcbiAgfTtcbiAgdmFyICRzZXREZXNjID0gZnVuY3Rpb24gZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIGRlc2MpIHtcbiAgICBpZiAoaXNUQUluZGV4KHRhcmdldCwga2V5ID0gdG9QcmltaXRpdmUoa2V5LCB0cnVlKSlcbiAgICAgICYmIGlzT2JqZWN0KGRlc2MpXG4gICAgICAmJiBoYXMoZGVzYywgJ3ZhbHVlJylcbiAgICAgICYmICFoYXMoZGVzYywgJ2dldCcpXG4gICAgICAmJiAhaGFzKGRlc2MsICdzZXQnKVxuICAgICAgLy8gVE9ETzogYWRkIHZhbGlkYXRpb24gZGVzY3JpcHRvciB3L28gY2FsbGluZyBhY2Nlc3NvcnNcbiAgICAgICYmICFkZXNjLmNvbmZpZ3VyYWJsZVxuICAgICAgJiYgKCFoYXMoZGVzYywgJ3dyaXRhYmxlJykgfHwgZGVzYy53cml0YWJsZSlcbiAgICAgICYmICghaGFzKGRlc2MsICdlbnVtZXJhYmxlJykgfHwgZGVzYy5lbnVtZXJhYmxlKVxuICAgICkge1xuICAgICAgdGFyZ2V0W2tleV0gPSBkZXNjLnZhbHVlO1xuICAgICAgcmV0dXJuIHRhcmdldDtcbiAgICB9IHJldHVybiBkUCh0YXJnZXQsIGtleSwgZGVzYyk7XG4gIH07XG5cbiAgaWYgKCFBTExfQ09OU1RSVUNUT1JTKSB7XG4gICAgJEdPUEQuZiA9ICRnZXREZXNjO1xuICAgICREUC5mID0gJHNldERlc2M7XG4gIH1cblxuICAkZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqICFBTExfQ09OU1RSVUNUT1JTLCAnT2JqZWN0Jywge1xuICAgIGdldE93blByb3BlcnR5RGVzY3JpcHRvcjogJGdldERlc2MsXG4gICAgZGVmaW5lUHJvcGVydHk6ICRzZXREZXNjXG4gIH0pO1xuXG4gIGlmIChmYWlscyhmdW5jdGlvbiAoKSB7IGFycmF5VG9TdHJpbmcuY2FsbCh7fSk7IH0pKSB7XG4gICAgYXJyYXlUb1N0cmluZyA9IGFycmF5VG9Mb2NhbGVTdHJpbmcgPSBmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgICAgIHJldHVybiBhcnJheUpvaW4uY2FsbCh0aGlzKTtcbiAgICB9O1xuICB9XG5cbiAgdmFyICRUeXBlZEFycmF5UHJvdG90eXBlJCA9IHJlZGVmaW5lQWxsKHt9LCBwcm90byk7XG4gIHJlZGVmaW5lQWxsKCRUeXBlZEFycmF5UHJvdG90eXBlJCwgJGl0ZXJhdG9ycyk7XG4gIGhpZGUoJFR5cGVkQXJyYXlQcm90b3R5cGUkLCBJVEVSQVRPUiwgJGl0ZXJhdG9ycy52YWx1ZXMpO1xuICByZWRlZmluZUFsbCgkVHlwZWRBcnJheVByb3RvdHlwZSQsIHtcbiAgICBzbGljZTogJHNsaWNlLFxuICAgIHNldDogJHNldCxcbiAgICBjb25zdHJ1Y3RvcjogZnVuY3Rpb24gKCkgeyAvKiBub29wICovIH0sXG4gICAgdG9TdHJpbmc6IGFycmF5VG9TdHJpbmcsXG4gICAgdG9Mb2NhbGVTdHJpbmc6ICR0b0xvY2FsZVN0cmluZ1xuICB9KTtcbiAgYWRkR2V0dGVyKCRUeXBlZEFycmF5UHJvdG90eXBlJCwgJ2J1ZmZlcicsICdiJyk7XG4gIGFkZEdldHRlcigkVHlwZWRBcnJheVByb3RvdHlwZSQsICdieXRlT2Zmc2V0JywgJ28nKTtcbiAgYWRkR2V0dGVyKCRUeXBlZEFycmF5UHJvdG90eXBlJCwgJ2J5dGVMZW5ndGgnLCAnbCcpO1xuICBhZGRHZXR0ZXIoJFR5cGVkQXJyYXlQcm90b3R5cGUkLCAnbGVuZ3RoJywgJ2UnKTtcbiAgZFAoJFR5cGVkQXJyYXlQcm90b3R5cGUkLCBUQUcsIHtcbiAgICBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXNbVFlQRURfQVJSQVldOyB9XG4gIH0pO1xuXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBtYXgtc3RhdGVtZW50c1xuICBtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChLRVksIEJZVEVTLCB3cmFwcGVyLCBDTEFNUEVEKSB7XG4gICAgQ0xBTVBFRCA9ICEhQ0xBTVBFRDtcbiAgICB2YXIgTkFNRSA9IEtFWSArIChDTEFNUEVEID8gJ0NsYW1wZWQnIDogJycpICsgJ0FycmF5JztcbiAgICB2YXIgR0VUVEVSID0gJ2dldCcgKyBLRVk7XG4gICAgdmFyIFNFVFRFUiA9ICdzZXQnICsgS0VZO1xuICAgIHZhciBUeXBlZEFycmF5ID0gZ2xvYmFsW05BTUVdO1xuICAgIHZhciBCYXNlID0gVHlwZWRBcnJheSB8fCB7fTtcbiAgICB2YXIgVEFDID0gVHlwZWRBcnJheSAmJiBnZXRQcm90b3R5cGVPZihUeXBlZEFycmF5KTtcbiAgICB2YXIgRk9SQ0VEID0gIVR5cGVkQXJyYXkgfHwgISR0eXBlZC5BQlY7XG4gICAgdmFyIE8gPSB7fTtcbiAgICB2YXIgVHlwZWRBcnJheVByb3RvdHlwZSA9IFR5cGVkQXJyYXkgJiYgVHlwZWRBcnJheVtQUk9UT1RZUEVdO1xuICAgIHZhciBnZXR0ZXIgPSBmdW5jdGlvbiAodGhhdCwgaW5kZXgpIHtcbiAgICAgIHZhciBkYXRhID0gdGhhdC5fZDtcbiAgICAgIHJldHVybiBkYXRhLnZbR0VUVEVSXShpbmRleCAqIEJZVEVTICsgZGF0YS5vLCBMSVRUTEVfRU5ESUFOKTtcbiAgICB9O1xuICAgIHZhciBzZXR0ZXIgPSBmdW5jdGlvbiAodGhhdCwgaW5kZXgsIHZhbHVlKSB7XG4gICAgICB2YXIgZGF0YSA9IHRoYXQuX2Q7XG4gICAgICBpZiAoQ0xBTVBFRCkgdmFsdWUgPSAodmFsdWUgPSBNYXRoLnJvdW5kKHZhbHVlKSkgPCAwID8gMCA6IHZhbHVlID4gMHhmZiA/IDB4ZmYgOiB2YWx1ZSAmIDB4ZmY7XG4gICAgICBkYXRhLnZbU0VUVEVSXShpbmRleCAqIEJZVEVTICsgZGF0YS5vLCB2YWx1ZSwgTElUVExFX0VORElBTik7XG4gICAgfTtcbiAgICB2YXIgYWRkRWxlbWVudCA9IGZ1bmN0aW9uICh0aGF0LCBpbmRleCkge1xuICAgICAgZFAodGhhdCwgaW5kZXgsIHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgcmV0dXJuIGdldHRlcih0aGlzLCBpbmRleCk7XG4gICAgICAgIH0sXG4gICAgICAgIHNldDogZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgcmV0dXJuIHNldHRlcih0aGlzLCBpbmRleCwgdmFsdWUpO1xuICAgICAgICB9LFxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlXG4gICAgICB9KTtcbiAgICB9O1xuICAgIGlmIChGT1JDRUQpIHtcbiAgICAgIFR5cGVkQXJyYXkgPSB3cmFwcGVyKGZ1bmN0aW9uICh0aGF0LCBkYXRhLCAkb2Zmc2V0LCAkbGVuZ3RoKSB7XG4gICAgICAgIGFuSW5zdGFuY2UodGhhdCwgVHlwZWRBcnJheSwgTkFNRSwgJ19kJyk7XG4gICAgICAgIHZhciBpbmRleCA9IDA7XG4gICAgICAgIHZhciBvZmZzZXQgPSAwO1xuICAgICAgICB2YXIgYnVmZmVyLCBieXRlTGVuZ3RoLCBsZW5ndGgsIGtsYXNzO1xuICAgICAgICBpZiAoIWlzT2JqZWN0KGRhdGEpKSB7XG4gICAgICAgICAgbGVuZ3RoID0gdG9JbmRleChkYXRhKTtcbiAgICAgICAgICBieXRlTGVuZ3RoID0gbGVuZ3RoICogQllURVM7XG4gICAgICAgICAgYnVmZmVyID0gbmV3ICRBcnJheUJ1ZmZlcihieXRlTGVuZ3RoKTtcbiAgICAgICAgfSBlbHNlIGlmIChkYXRhIGluc3RhbmNlb2YgJEFycmF5QnVmZmVyIHx8IChrbGFzcyA9IGNsYXNzb2YoZGF0YSkpID09IEFSUkFZX0JVRkZFUiB8fCBrbGFzcyA9PSBTSEFSRURfQlVGRkVSKSB7XG4gICAgICAgICAgYnVmZmVyID0gZGF0YTtcbiAgICAgICAgICBvZmZzZXQgPSB0b09mZnNldCgkb2Zmc2V0LCBCWVRFUyk7XG4gICAgICAgICAgdmFyICRsZW4gPSBkYXRhLmJ5dGVMZW5ndGg7XG4gICAgICAgICAgaWYgKCRsZW5ndGggPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgaWYgKCRsZW4gJSBCWVRFUykgdGhyb3cgUmFuZ2VFcnJvcihXUk9OR19MRU5HVEgpO1xuICAgICAgICAgICAgYnl0ZUxlbmd0aCA9ICRsZW4gLSBvZmZzZXQ7XG4gICAgICAgICAgICBpZiAoYnl0ZUxlbmd0aCA8IDApIHRocm93IFJhbmdlRXJyb3IoV1JPTkdfTEVOR1RIKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgYnl0ZUxlbmd0aCA9IHRvTGVuZ3RoKCRsZW5ndGgpICogQllURVM7XG4gICAgICAgICAgICBpZiAoYnl0ZUxlbmd0aCArIG9mZnNldCA+ICRsZW4pIHRocm93IFJhbmdlRXJyb3IoV1JPTkdfTEVOR1RIKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgbGVuZ3RoID0gYnl0ZUxlbmd0aCAvIEJZVEVTO1xuICAgICAgICB9IGVsc2UgaWYgKFRZUEVEX0FSUkFZIGluIGRhdGEpIHtcbiAgICAgICAgICByZXR1cm4gZnJvbUxpc3QoVHlwZWRBcnJheSwgZGF0YSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV0dXJuICRmcm9tLmNhbGwoVHlwZWRBcnJheSwgZGF0YSk7XG4gICAgICAgIH1cbiAgICAgICAgaGlkZSh0aGF0LCAnX2QnLCB7XG4gICAgICAgICAgYjogYnVmZmVyLFxuICAgICAgICAgIG86IG9mZnNldCxcbiAgICAgICAgICBsOiBieXRlTGVuZ3RoLFxuICAgICAgICAgIGU6IGxlbmd0aCxcbiAgICAgICAgICB2OiBuZXcgJERhdGFWaWV3KGJ1ZmZlcilcbiAgICAgICAgfSk7XG4gICAgICAgIHdoaWxlIChpbmRleCA8IGxlbmd0aCkgYWRkRWxlbWVudCh0aGF0LCBpbmRleCsrKTtcbiAgICAgIH0pO1xuICAgICAgVHlwZWRBcnJheVByb3RvdHlwZSA9IFR5cGVkQXJyYXlbUFJPVE9UWVBFXSA9IGNyZWF0ZSgkVHlwZWRBcnJheVByb3RvdHlwZSQpO1xuICAgICAgaGlkZShUeXBlZEFycmF5UHJvdG90eXBlLCAnY29uc3RydWN0b3InLCBUeXBlZEFycmF5KTtcbiAgICB9IGVsc2UgaWYgKCFmYWlscyhmdW5jdGlvbiAoKSB7XG4gICAgICBUeXBlZEFycmF5KDEpO1xuICAgIH0pIHx8ICFmYWlscyhmdW5jdGlvbiAoKSB7XG4gICAgICBuZXcgVHlwZWRBcnJheSgtMSk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tbmV3XG4gICAgfSkgfHwgISRpdGVyRGV0ZWN0KGZ1bmN0aW9uIChpdGVyKSB7XG4gICAgICBuZXcgVHlwZWRBcnJheSgpOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLW5ld1xuICAgICAgbmV3IFR5cGVkQXJyYXkobnVsbCk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tbmV3XG4gICAgICBuZXcgVHlwZWRBcnJheSgxLjUpOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLW5ld1xuICAgICAgbmV3IFR5cGVkQXJyYXkoaXRlcik7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tbmV3XG4gICAgfSwgdHJ1ZSkpIHtcbiAgICAgIFR5cGVkQXJyYXkgPSB3cmFwcGVyKGZ1bmN0aW9uICh0aGF0LCBkYXRhLCAkb2Zmc2V0LCAkbGVuZ3RoKSB7XG4gICAgICAgIGFuSW5zdGFuY2UodGhhdCwgVHlwZWRBcnJheSwgTkFNRSk7XG4gICAgICAgIHZhciBrbGFzcztcbiAgICAgICAgLy8gYHdzYCBtb2R1bGUgYnVnLCB0ZW1wb3JhcmlseSByZW1vdmUgdmFsaWRhdGlvbiBsZW5ndGggZm9yIFVpbnQ4QXJyYXlcbiAgICAgICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL3dlYnNvY2tldHMvd3MvcHVsbC82NDVcbiAgICAgICAgaWYgKCFpc09iamVjdChkYXRhKSkgcmV0dXJuIG5ldyBCYXNlKHRvSW5kZXgoZGF0YSkpO1xuICAgICAgICBpZiAoZGF0YSBpbnN0YW5jZW9mICRBcnJheUJ1ZmZlciB8fCAoa2xhc3MgPSBjbGFzc29mKGRhdGEpKSA9PSBBUlJBWV9CVUZGRVIgfHwga2xhc3MgPT0gU0hBUkVEX0JVRkZFUikge1xuICAgICAgICAgIHJldHVybiAkbGVuZ3RoICE9PSB1bmRlZmluZWRcbiAgICAgICAgICAgID8gbmV3IEJhc2UoZGF0YSwgdG9PZmZzZXQoJG9mZnNldCwgQllURVMpLCAkbGVuZ3RoKVxuICAgICAgICAgICAgOiAkb2Zmc2V0ICE9PSB1bmRlZmluZWRcbiAgICAgICAgICAgICAgPyBuZXcgQmFzZShkYXRhLCB0b09mZnNldCgkb2Zmc2V0LCBCWVRFUykpXG4gICAgICAgICAgICAgIDogbmV3IEJhc2UoZGF0YSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKFRZUEVEX0FSUkFZIGluIGRhdGEpIHJldHVybiBmcm9tTGlzdChUeXBlZEFycmF5LCBkYXRhKTtcbiAgICAgICAgcmV0dXJuICRmcm9tLmNhbGwoVHlwZWRBcnJheSwgZGF0YSk7XG4gICAgICB9KTtcbiAgICAgIGFycmF5Rm9yRWFjaChUQUMgIT09IEZ1bmN0aW9uLnByb3RvdHlwZSA/IGdPUE4oQmFzZSkuY29uY2F0KGdPUE4oVEFDKSkgOiBnT1BOKEJhc2UpLCBmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgIGlmICghKGtleSBpbiBUeXBlZEFycmF5KSkgaGlkZShUeXBlZEFycmF5LCBrZXksIEJhc2Vba2V5XSk7XG4gICAgICB9KTtcbiAgICAgIFR5cGVkQXJyYXlbUFJPVE9UWVBFXSA9IFR5cGVkQXJyYXlQcm90b3R5cGU7XG4gICAgICBpZiAoIUxJQlJBUlkpIFR5cGVkQXJyYXlQcm90b3R5cGUuY29uc3RydWN0b3IgPSBUeXBlZEFycmF5O1xuICAgIH1cbiAgICB2YXIgJG5hdGl2ZUl0ZXJhdG9yID0gVHlwZWRBcnJheVByb3RvdHlwZVtJVEVSQVRPUl07XG4gICAgdmFyIENPUlJFQ1RfSVRFUl9OQU1FID0gISEkbmF0aXZlSXRlcmF0b3JcbiAgICAgICYmICgkbmF0aXZlSXRlcmF0b3IubmFtZSA9PSAndmFsdWVzJyB8fCAkbmF0aXZlSXRlcmF0b3IubmFtZSA9PSB1bmRlZmluZWQpO1xuICAgIHZhciAkaXRlcmF0b3IgPSAkaXRlcmF0b3JzLnZhbHVlcztcbiAgICBoaWRlKFR5cGVkQXJyYXksIFRZUEVEX0NPTlNUUlVDVE9SLCB0cnVlKTtcbiAgICBoaWRlKFR5cGVkQXJyYXlQcm90b3R5cGUsIFRZUEVEX0FSUkFZLCBOQU1FKTtcbiAgICBoaWRlKFR5cGVkQXJyYXlQcm90b3R5cGUsIFZJRVcsIHRydWUpO1xuICAgIGhpZGUoVHlwZWRBcnJheVByb3RvdHlwZSwgREVGX0NPTlNUUlVDVE9SLCBUeXBlZEFycmF5KTtcblxuICAgIGlmIChDTEFNUEVEID8gbmV3IFR5cGVkQXJyYXkoMSlbVEFHXSAhPSBOQU1FIDogIShUQUcgaW4gVHlwZWRBcnJheVByb3RvdHlwZSkpIHtcbiAgICAgIGRQKFR5cGVkQXJyYXlQcm90b3R5cGUsIFRBRywge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIE5BTUU7IH1cbiAgICAgIH0pO1xuICAgIH1cblxuICAgIE9bTkFNRV0gPSBUeXBlZEFycmF5O1xuXG4gICAgJGV4cG9ydCgkZXhwb3J0LkcgKyAkZXhwb3J0LlcgKyAkZXhwb3J0LkYgKiAoVHlwZWRBcnJheSAhPSBCYXNlKSwgTyk7XG5cbiAgICAkZXhwb3J0KCRleHBvcnQuUywgTkFNRSwge1xuICAgICAgQllURVNfUEVSX0VMRU1FTlQ6IEJZVEVTXG4gICAgfSk7XG5cbiAgICAkZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqIGZhaWxzKGZ1bmN0aW9uICgpIHsgQmFzZS5vZi5jYWxsKFR5cGVkQXJyYXksIDEpOyB9KSwgTkFNRSwge1xuICAgICAgZnJvbTogJGZyb20sXG4gICAgICBvZjogJG9mXG4gICAgfSk7XG5cbiAgICBpZiAoIShCWVRFU19QRVJfRUxFTUVOVCBpbiBUeXBlZEFycmF5UHJvdG90eXBlKSkgaGlkZShUeXBlZEFycmF5UHJvdG90eXBlLCBCWVRFU19QRVJfRUxFTUVOVCwgQllURVMpO1xuXG4gICAgJGV4cG9ydCgkZXhwb3J0LlAsIE5BTUUsIHByb3RvKTtcblxuICAgIHNldFNwZWNpZXMoTkFNRSk7XG5cbiAgICAkZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqIEZPUkNFRF9TRVQsIE5BTUUsIHsgc2V0OiAkc2V0IH0pO1xuXG4gICAgJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiAhQ09SUkVDVF9JVEVSX05BTUUsIE5BTUUsICRpdGVyYXRvcnMpO1xuXG4gICAgaWYgKCFMSUJSQVJZICYmIFR5cGVkQXJyYXlQcm90b3R5cGUudG9TdHJpbmcgIT0gYXJyYXlUb1N0cmluZykgVHlwZWRBcnJheVByb3RvdHlwZS50b1N0cmluZyA9IGFycmF5VG9TdHJpbmc7XG5cbiAgICAkZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqIGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgICAgIG5ldyBUeXBlZEFycmF5KDEpLnNsaWNlKCk7XG4gICAgfSksIE5BTUUsIHsgc2xpY2U6ICRzbGljZSB9KTtcblxuICAgICRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogKGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBbMSwgMl0udG9Mb2NhbGVTdHJpbmcoKSAhPSBuZXcgVHlwZWRBcnJheShbMSwgMl0pLnRvTG9jYWxlU3RyaW5nKCk7XG4gICAgfSkgfHwgIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgICAgIFR5cGVkQXJyYXlQcm90b3R5cGUudG9Mb2NhbGVTdHJpbmcuY2FsbChbMSwgMl0pO1xuICAgIH0pKSwgTkFNRSwgeyB0b0xvY2FsZVN0cmluZzogJHRvTG9jYWxlU3RyaW5nIH0pO1xuXG4gICAgSXRlcmF0b3JzW05BTUVdID0gQ09SUkVDVF9JVEVSX05BTUUgPyAkbmF0aXZlSXRlcmF0b3IgOiAkaXRlcmF0b3I7XG4gICAgaWYgKCFMSUJSQVJZICYmICFDT1JSRUNUX0lURVJfTkFNRSkgaGlkZShUeXBlZEFycmF5UHJvdG90eXBlLCBJVEVSQVRPUiwgJGl0ZXJhdG9yKTtcbiAgfTtcbn0gZWxzZSBtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICgpIHsgLyogZW1wdHkgKi8gfTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuL19nbG9iYWwnKTtcbnZhciBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJyk7XG52YXIgTElCUkFSWSA9IHJlcXVpcmUoJy4vX2xpYnJhcnknKTtcbnZhciAkdHlwZWQgPSByZXF1aXJlKCcuL190eXBlZCcpO1xudmFyIGhpZGUgPSByZXF1aXJlKCcuL19oaWRlJyk7XG52YXIgcmVkZWZpbmVBbGwgPSByZXF1aXJlKCcuL19yZWRlZmluZS1hbGwnKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4vX2ZhaWxzJyk7XG52YXIgYW5JbnN0YW5jZSA9IHJlcXVpcmUoJy4vX2FuLWluc3RhbmNlJyk7XG52YXIgdG9JbnRlZ2VyID0gcmVxdWlyZSgnLi9fdG8taW50ZWdlcicpO1xudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi9fdG8tbGVuZ3RoJyk7XG52YXIgdG9JbmRleCA9IHJlcXVpcmUoJy4vX3RvLWluZGV4Jyk7XG52YXIgZ09QTiA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BuJykuZjtcbnZhciBkUCA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpLmY7XG52YXIgYXJyYXlGaWxsID0gcmVxdWlyZSgnLi9fYXJyYXktZmlsbCcpO1xudmFyIHNldFRvU3RyaW5nVGFnID0gcmVxdWlyZSgnLi9fc2V0LXRvLXN0cmluZy10YWcnKTtcbnZhciBBUlJBWV9CVUZGRVIgPSAnQXJyYXlCdWZmZXInO1xudmFyIERBVEFfVklFVyA9ICdEYXRhVmlldyc7XG52YXIgUFJPVE9UWVBFID0gJ3Byb3RvdHlwZSc7XG52YXIgV1JPTkdfTEVOR1RIID0gJ1dyb25nIGxlbmd0aCEnO1xudmFyIFdST05HX0lOREVYID0gJ1dyb25nIGluZGV4ISc7XG52YXIgJEFycmF5QnVmZmVyID0gZ2xvYmFsW0FSUkFZX0JVRkZFUl07XG52YXIgJERhdGFWaWV3ID0gZ2xvYmFsW0RBVEFfVklFV107XG52YXIgTWF0aCA9IGdsb2JhbC5NYXRoO1xudmFyIFJhbmdlRXJyb3IgPSBnbG9iYWwuUmFuZ2VFcnJvcjtcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zaGFkb3ctcmVzdHJpY3RlZC1uYW1lc1xudmFyIEluZmluaXR5ID0gZ2xvYmFsLkluZmluaXR5O1xudmFyIEJhc2VCdWZmZXIgPSAkQXJyYXlCdWZmZXI7XG52YXIgYWJzID0gTWF0aC5hYnM7XG52YXIgcG93ID0gTWF0aC5wb3c7XG52YXIgZmxvb3IgPSBNYXRoLmZsb29yO1xudmFyIGxvZyA9IE1hdGgubG9nO1xudmFyIExOMiA9IE1hdGguTE4yO1xudmFyIEJVRkZFUiA9ICdidWZmZXInO1xudmFyIEJZVEVfTEVOR1RIID0gJ2J5dGVMZW5ndGgnO1xudmFyIEJZVEVfT0ZGU0VUID0gJ2J5dGVPZmZzZXQnO1xudmFyICRCVUZGRVIgPSBERVNDUklQVE9SUyA/ICdfYicgOiBCVUZGRVI7XG52YXIgJExFTkdUSCA9IERFU0NSSVBUT1JTID8gJ19sJyA6IEJZVEVfTEVOR1RIO1xudmFyICRPRkZTRVQgPSBERVNDUklQVE9SUyA/ICdfbycgOiBCWVRFX09GRlNFVDtcblxuLy8gSUVFRTc1NCBjb252ZXJzaW9ucyBiYXNlZCBvbiBodHRwczovL2dpdGh1Yi5jb20vZmVyb3NzL2llZWU3NTRcbmZ1bmN0aW9uIHBhY2tJRUVFNzU0KHZhbHVlLCBtTGVuLCBuQnl0ZXMpIHtcbiAgdmFyIGJ1ZmZlciA9IG5ldyBBcnJheShuQnl0ZXMpO1xuICB2YXIgZUxlbiA9IG5CeXRlcyAqIDggLSBtTGVuIC0gMTtcbiAgdmFyIGVNYXggPSAoMSA8PCBlTGVuKSAtIDE7XG4gIHZhciBlQmlhcyA9IGVNYXggPj4gMTtcbiAgdmFyIHJ0ID0gbUxlbiA9PT0gMjMgPyBwb3coMiwgLTI0KSAtIHBvdygyLCAtNzcpIDogMDtcbiAgdmFyIGkgPSAwO1xuICB2YXIgcyA9IHZhbHVlIDwgMCB8fCB2YWx1ZSA9PT0gMCAmJiAxIC8gdmFsdWUgPCAwID8gMSA6IDA7XG4gIHZhciBlLCBtLCBjO1xuICB2YWx1ZSA9IGFicyh2YWx1ZSk7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zZWxmLWNvbXBhcmVcbiAgaWYgKHZhbHVlICE9IHZhbHVlIHx8IHZhbHVlID09PSBJbmZpbml0eSkge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zZWxmLWNvbXBhcmVcbiAgICBtID0gdmFsdWUgIT0gdmFsdWUgPyAxIDogMDtcbiAgICBlID0gZU1heDtcbiAgfSBlbHNlIHtcbiAgICBlID0gZmxvb3IobG9nKHZhbHVlKSAvIExOMik7XG4gICAgaWYgKHZhbHVlICogKGMgPSBwb3coMiwgLWUpKSA8IDEpIHtcbiAgICAgIGUtLTtcbiAgICAgIGMgKj0gMjtcbiAgICB9XG4gICAgaWYgKGUgKyBlQmlhcyA+PSAxKSB7XG4gICAgICB2YWx1ZSArPSBydCAvIGM7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhbHVlICs9IHJ0ICogcG93KDIsIDEgLSBlQmlhcyk7XG4gICAgfVxuICAgIGlmICh2YWx1ZSAqIGMgPj0gMikge1xuICAgICAgZSsrO1xuICAgICAgYyAvPSAyO1xuICAgIH1cbiAgICBpZiAoZSArIGVCaWFzID49IGVNYXgpIHtcbiAgICAgIG0gPSAwO1xuICAgICAgZSA9IGVNYXg7XG4gICAgfSBlbHNlIGlmIChlICsgZUJpYXMgPj0gMSkge1xuICAgICAgbSA9ICh2YWx1ZSAqIGMgLSAxKSAqIHBvdygyLCBtTGVuKTtcbiAgICAgIGUgPSBlICsgZUJpYXM7XG4gICAgfSBlbHNlIHtcbiAgICAgIG0gPSB2YWx1ZSAqIHBvdygyLCBlQmlhcyAtIDEpICogcG93KDIsIG1MZW4pO1xuICAgICAgZSA9IDA7XG4gICAgfVxuICB9XG4gIGZvciAoOyBtTGVuID49IDg7IGJ1ZmZlcltpKytdID0gbSAmIDI1NSwgbSAvPSAyNTYsIG1MZW4gLT0gOCk7XG4gIGUgPSBlIDw8IG1MZW4gfCBtO1xuICBlTGVuICs9IG1MZW47XG4gIGZvciAoOyBlTGVuID4gMDsgYnVmZmVyW2krK10gPSBlICYgMjU1LCBlIC89IDI1NiwgZUxlbiAtPSA4KTtcbiAgYnVmZmVyWy0taV0gfD0gcyAqIDEyODtcbiAgcmV0dXJuIGJ1ZmZlcjtcbn1cbmZ1bmN0aW9uIHVucGFja0lFRUU3NTQoYnVmZmVyLCBtTGVuLCBuQnl0ZXMpIHtcbiAgdmFyIGVMZW4gPSBuQnl0ZXMgKiA4IC0gbUxlbiAtIDE7XG4gIHZhciBlTWF4ID0gKDEgPDwgZUxlbikgLSAxO1xuICB2YXIgZUJpYXMgPSBlTWF4ID4+IDE7XG4gIHZhciBuQml0cyA9IGVMZW4gLSA3O1xuICB2YXIgaSA9IG5CeXRlcyAtIDE7XG4gIHZhciBzID0gYnVmZmVyW2ktLV07XG4gIHZhciBlID0gcyAmIDEyNztcbiAgdmFyIG07XG4gIHMgPj49IDc7XG4gIGZvciAoOyBuQml0cyA+IDA7IGUgPSBlICogMjU2ICsgYnVmZmVyW2ldLCBpLS0sIG5CaXRzIC09IDgpO1xuICBtID0gZSAmICgxIDw8IC1uQml0cykgLSAxO1xuICBlID4+PSAtbkJpdHM7XG4gIG5CaXRzICs9IG1MZW47XG4gIGZvciAoOyBuQml0cyA+IDA7IG0gPSBtICogMjU2ICsgYnVmZmVyW2ldLCBpLS0sIG5CaXRzIC09IDgpO1xuICBpZiAoZSA9PT0gMCkge1xuICAgIGUgPSAxIC0gZUJpYXM7XG4gIH0gZWxzZSBpZiAoZSA9PT0gZU1heCkge1xuICAgIHJldHVybiBtID8gTmFOIDogcyA/IC1JbmZpbml0eSA6IEluZmluaXR5O1xuICB9IGVsc2Uge1xuICAgIG0gPSBtICsgcG93KDIsIG1MZW4pO1xuICAgIGUgPSBlIC0gZUJpYXM7XG4gIH0gcmV0dXJuIChzID8gLTEgOiAxKSAqIG0gKiBwb3coMiwgZSAtIG1MZW4pO1xufVxuXG5mdW5jdGlvbiB1bnBhY2tJMzIoYnl0ZXMpIHtcbiAgcmV0dXJuIGJ5dGVzWzNdIDw8IDI0IHwgYnl0ZXNbMl0gPDwgMTYgfCBieXRlc1sxXSA8PCA4IHwgYnl0ZXNbMF07XG59XG5mdW5jdGlvbiBwYWNrSTgoaXQpIHtcbiAgcmV0dXJuIFtpdCAmIDB4ZmZdO1xufVxuZnVuY3Rpb24gcGFja0kxNihpdCkge1xuICByZXR1cm4gW2l0ICYgMHhmZiwgaXQgPj4gOCAmIDB4ZmZdO1xufVxuZnVuY3Rpb24gcGFja0kzMihpdCkge1xuICByZXR1cm4gW2l0ICYgMHhmZiwgaXQgPj4gOCAmIDB4ZmYsIGl0ID4+IDE2ICYgMHhmZiwgaXQgPj4gMjQgJiAweGZmXTtcbn1cbmZ1bmN0aW9uIHBhY2tGNjQoaXQpIHtcbiAgcmV0dXJuIHBhY2tJRUVFNzU0KGl0LCA1MiwgOCk7XG59XG5mdW5jdGlvbiBwYWNrRjMyKGl0KSB7XG4gIHJldHVybiBwYWNrSUVFRTc1NChpdCwgMjMsIDQpO1xufVxuXG5mdW5jdGlvbiBhZGRHZXR0ZXIoQywga2V5LCBpbnRlcm5hbCkge1xuICBkUChDW1BST1RPVFlQRV0sIGtleSwgeyBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXNbaW50ZXJuYWxdOyB9IH0pO1xufVxuXG5mdW5jdGlvbiBnZXQodmlldywgYnl0ZXMsIGluZGV4LCBpc0xpdHRsZUVuZGlhbikge1xuICB2YXIgbnVtSW5kZXggPSAraW5kZXg7XG4gIHZhciBpbnRJbmRleCA9IHRvSW5kZXgobnVtSW5kZXgpO1xuICBpZiAoaW50SW5kZXggKyBieXRlcyA+IHZpZXdbJExFTkdUSF0pIHRocm93IFJhbmdlRXJyb3IoV1JPTkdfSU5ERVgpO1xuICB2YXIgc3RvcmUgPSB2aWV3WyRCVUZGRVJdLl9iO1xuICB2YXIgc3RhcnQgPSBpbnRJbmRleCArIHZpZXdbJE9GRlNFVF07XG4gIHZhciBwYWNrID0gc3RvcmUuc2xpY2Uoc3RhcnQsIHN0YXJ0ICsgYnl0ZXMpO1xuICByZXR1cm4gaXNMaXR0bGVFbmRpYW4gPyBwYWNrIDogcGFjay5yZXZlcnNlKCk7XG59XG5mdW5jdGlvbiBzZXQodmlldywgYnl0ZXMsIGluZGV4LCBjb252ZXJzaW9uLCB2YWx1ZSwgaXNMaXR0bGVFbmRpYW4pIHtcbiAgdmFyIG51bUluZGV4ID0gK2luZGV4O1xuICB2YXIgaW50SW5kZXggPSB0b0luZGV4KG51bUluZGV4KTtcbiAgaWYgKGludEluZGV4ICsgYnl0ZXMgPiB2aWV3WyRMRU5HVEhdKSB0aHJvdyBSYW5nZUVycm9yKFdST05HX0lOREVYKTtcbiAgdmFyIHN0b3JlID0gdmlld1skQlVGRkVSXS5fYjtcbiAgdmFyIHN0YXJ0ID0gaW50SW5kZXggKyB2aWV3WyRPRkZTRVRdO1xuICB2YXIgcGFjayA9IGNvbnZlcnNpb24oK3ZhbHVlKTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBieXRlczsgaSsrKSBzdG9yZVtzdGFydCArIGldID0gcGFja1tpc0xpdHRsZUVuZGlhbiA/IGkgOiBieXRlcyAtIGkgLSAxXTtcbn1cblxuaWYgKCEkdHlwZWQuQUJWKSB7XG4gICRBcnJheUJ1ZmZlciA9IGZ1bmN0aW9uIEFycmF5QnVmZmVyKGxlbmd0aCkge1xuICAgIGFuSW5zdGFuY2UodGhpcywgJEFycmF5QnVmZmVyLCBBUlJBWV9CVUZGRVIpO1xuICAgIHZhciBieXRlTGVuZ3RoID0gdG9JbmRleChsZW5ndGgpO1xuICAgIHRoaXMuX2IgPSBhcnJheUZpbGwuY2FsbChuZXcgQXJyYXkoYnl0ZUxlbmd0aCksIDApO1xuICAgIHRoaXNbJExFTkdUSF0gPSBieXRlTGVuZ3RoO1xuICB9O1xuXG4gICREYXRhVmlldyA9IGZ1bmN0aW9uIERhdGFWaWV3KGJ1ZmZlciwgYnl0ZU9mZnNldCwgYnl0ZUxlbmd0aCkge1xuICAgIGFuSW5zdGFuY2UodGhpcywgJERhdGFWaWV3LCBEQVRBX1ZJRVcpO1xuICAgIGFuSW5zdGFuY2UoYnVmZmVyLCAkQXJyYXlCdWZmZXIsIERBVEFfVklFVyk7XG4gICAgdmFyIGJ1ZmZlckxlbmd0aCA9IGJ1ZmZlclskTEVOR1RIXTtcbiAgICB2YXIgb2Zmc2V0ID0gdG9JbnRlZ2VyKGJ5dGVPZmZzZXQpO1xuICAgIGlmIChvZmZzZXQgPCAwIHx8IG9mZnNldCA+IGJ1ZmZlckxlbmd0aCkgdGhyb3cgUmFuZ2VFcnJvcignV3Jvbmcgb2Zmc2V0IScpO1xuICAgIGJ5dGVMZW5ndGggPSBieXRlTGVuZ3RoID09PSB1bmRlZmluZWQgPyBidWZmZXJMZW5ndGggLSBvZmZzZXQgOiB0b0xlbmd0aChieXRlTGVuZ3RoKTtcbiAgICBpZiAob2Zmc2V0ICsgYnl0ZUxlbmd0aCA+IGJ1ZmZlckxlbmd0aCkgdGhyb3cgUmFuZ2VFcnJvcihXUk9OR19MRU5HVEgpO1xuICAgIHRoaXNbJEJVRkZFUl0gPSBidWZmZXI7XG4gICAgdGhpc1skT0ZGU0VUXSA9IG9mZnNldDtcbiAgICB0aGlzWyRMRU5HVEhdID0gYnl0ZUxlbmd0aDtcbiAgfTtcblxuICBpZiAoREVTQ1JJUFRPUlMpIHtcbiAgICBhZGRHZXR0ZXIoJEFycmF5QnVmZmVyLCBCWVRFX0xFTkdUSCwgJ19sJyk7XG4gICAgYWRkR2V0dGVyKCREYXRhVmlldywgQlVGRkVSLCAnX2InKTtcbiAgICBhZGRHZXR0ZXIoJERhdGFWaWV3LCBCWVRFX0xFTkdUSCwgJ19sJyk7XG4gICAgYWRkR2V0dGVyKCREYXRhVmlldywgQllURV9PRkZTRVQsICdfbycpO1xuICB9XG5cbiAgcmVkZWZpbmVBbGwoJERhdGFWaWV3W1BST1RPVFlQRV0sIHtcbiAgICBnZXRJbnQ4OiBmdW5jdGlvbiBnZXRJbnQ4KGJ5dGVPZmZzZXQpIHtcbiAgICAgIHJldHVybiBnZXQodGhpcywgMSwgYnl0ZU9mZnNldClbMF0gPDwgMjQgPj4gMjQ7XG4gICAgfSxcbiAgICBnZXRVaW50ODogZnVuY3Rpb24gZ2V0VWludDgoYnl0ZU9mZnNldCkge1xuICAgICAgcmV0dXJuIGdldCh0aGlzLCAxLCBieXRlT2Zmc2V0KVswXTtcbiAgICB9LFxuICAgIGdldEludDE2OiBmdW5jdGlvbiBnZXRJbnQxNihieXRlT2Zmc2V0IC8qICwgbGl0dGxlRW5kaWFuICovKSB7XG4gICAgICB2YXIgYnl0ZXMgPSBnZXQodGhpcywgMiwgYnl0ZU9mZnNldCwgYXJndW1lbnRzWzFdKTtcbiAgICAgIHJldHVybiAoYnl0ZXNbMV0gPDwgOCB8IGJ5dGVzWzBdKSA8PCAxNiA+PiAxNjtcbiAgICB9LFxuICAgIGdldFVpbnQxNjogZnVuY3Rpb24gZ2V0VWludDE2KGJ5dGVPZmZzZXQgLyogLCBsaXR0bGVFbmRpYW4gKi8pIHtcbiAgICAgIHZhciBieXRlcyA9IGdldCh0aGlzLCAyLCBieXRlT2Zmc2V0LCBhcmd1bWVudHNbMV0pO1xuICAgICAgcmV0dXJuIGJ5dGVzWzFdIDw8IDggfCBieXRlc1swXTtcbiAgICB9LFxuICAgIGdldEludDMyOiBmdW5jdGlvbiBnZXRJbnQzMihieXRlT2Zmc2V0IC8qICwgbGl0dGxlRW5kaWFuICovKSB7XG4gICAgICByZXR1cm4gdW5wYWNrSTMyKGdldCh0aGlzLCA0LCBieXRlT2Zmc2V0LCBhcmd1bWVudHNbMV0pKTtcbiAgICB9LFxuICAgIGdldFVpbnQzMjogZnVuY3Rpb24gZ2V0VWludDMyKGJ5dGVPZmZzZXQgLyogLCBsaXR0bGVFbmRpYW4gKi8pIHtcbiAgICAgIHJldHVybiB1bnBhY2tJMzIoZ2V0KHRoaXMsIDQsIGJ5dGVPZmZzZXQsIGFyZ3VtZW50c1sxXSkpID4+PiAwO1xuICAgIH0sXG4gICAgZ2V0RmxvYXQzMjogZnVuY3Rpb24gZ2V0RmxvYXQzMihieXRlT2Zmc2V0IC8qICwgbGl0dGxlRW5kaWFuICovKSB7XG4gICAgICByZXR1cm4gdW5wYWNrSUVFRTc1NChnZXQodGhpcywgNCwgYnl0ZU9mZnNldCwgYXJndW1lbnRzWzFdKSwgMjMsIDQpO1xuICAgIH0sXG4gICAgZ2V0RmxvYXQ2NDogZnVuY3Rpb24gZ2V0RmxvYXQ2NChieXRlT2Zmc2V0IC8qICwgbGl0dGxlRW5kaWFuICovKSB7XG4gICAgICByZXR1cm4gdW5wYWNrSUVFRTc1NChnZXQodGhpcywgOCwgYnl0ZU9mZnNldCwgYXJndW1lbnRzWzFdKSwgNTIsIDgpO1xuICAgIH0sXG4gICAgc2V0SW50ODogZnVuY3Rpb24gc2V0SW50OChieXRlT2Zmc2V0LCB2YWx1ZSkge1xuICAgICAgc2V0KHRoaXMsIDEsIGJ5dGVPZmZzZXQsIHBhY2tJOCwgdmFsdWUpO1xuICAgIH0sXG4gICAgc2V0VWludDg6IGZ1bmN0aW9uIHNldFVpbnQ4KGJ5dGVPZmZzZXQsIHZhbHVlKSB7XG4gICAgICBzZXQodGhpcywgMSwgYnl0ZU9mZnNldCwgcGFja0k4LCB2YWx1ZSk7XG4gICAgfSxcbiAgICBzZXRJbnQxNjogZnVuY3Rpb24gc2V0SW50MTYoYnl0ZU9mZnNldCwgdmFsdWUgLyogLCBsaXR0bGVFbmRpYW4gKi8pIHtcbiAgICAgIHNldCh0aGlzLCAyLCBieXRlT2Zmc2V0LCBwYWNrSTE2LCB2YWx1ZSwgYXJndW1lbnRzWzJdKTtcbiAgICB9LFxuICAgIHNldFVpbnQxNjogZnVuY3Rpb24gc2V0VWludDE2KGJ5dGVPZmZzZXQsIHZhbHVlIC8qICwgbGl0dGxlRW5kaWFuICovKSB7XG4gICAgICBzZXQodGhpcywgMiwgYnl0ZU9mZnNldCwgcGFja0kxNiwgdmFsdWUsIGFyZ3VtZW50c1syXSk7XG4gICAgfSxcbiAgICBzZXRJbnQzMjogZnVuY3Rpb24gc2V0SW50MzIoYnl0ZU9mZnNldCwgdmFsdWUgLyogLCBsaXR0bGVFbmRpYW4gKi8pIHtcbiAgICAgIHNldCh0aGlzLCA0LCBieXRlT2Zmc2V0LCBwYWNrSTMyLCB2YWx1ZSwgYXJndW1lbnRzWzJdKTtcbiAgICB9LFxuICAgIHNldFVpbnQzMjogZnVuY3Rpb24gc2V0VWludDMyKGJ5dGVPZmZzZXQsIHZhbHVlIC8qICwgbGl0dGxlRW5kaWFuICovKSB7XG4gICAgICBzZXQodGhpcywgNCwgYnl0ZU9mZnNldCwgcGFja0kzMiwgdmFsdWUsIGFyZ3VtZW50c1syXSk7XG4gICAgfSxcbiAgICBzZXRGbG9hdDMyOiBmdW5jdGlvbiBzZXRGbG9hdDMyKGJ5dGVPZmZzZXQsIHZhbHVlIC8qICwgbGl0dGxlRW5kaWFuICovKSB7XG4gICAgICBzZXQodGhpcywgNCwgYnl0ZU9mZnNldCwgcGFja0YzMiwgdmFsdWUsIGFyZ3VtZW50c1syXSk7XG4gICAgfSxcbiAgICBzZXRGbG9hdDY0OiBmdW5jdGlvbiBzZXRGbG9hdDY0KGJ5dGVPZmZzZXQsIHZhbHVlIC8qICwgbGl0dGxlRW5kaWFuICovKSB7XG4gICAgICBzZXQodGhpcywgOCwgYnl0ZU9mZnNldCwgcGFja0Y2NCwgdmFsdWUsIGFyZ3VtZW50c1syXSk7XG4gICAgfVxuICB9KTtcbn0gZWxzZSB7XG4gIGlmICghZmFpbHMoZnVuY3Rpb24gKCkge1xuICAgICRBcnJheUJ1ZmZlcigxKTtcbiAgfSkgfHwgIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgICBuZXcgJEFycmF5QnVmZmVyKC0xKTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1uZXdcbiAgfSkgfHwgZmFpbHMoZnVuY3Rpb24gKCkge1xuICAgIG5ldyAkQXJyYXlCdWZmZXIoKTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1uZXdcbiAgICBuZXcgJEFycmF5QnVmZmVyKDEuNSk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tbmV3XG4gICAgbmV3ICRBcnJheUJ1ZmZlcihOYU4pOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLW5ld1xuICAgIHJldHVybiAkQXJyYXlCdWZmZXIubmFtZSAhPSBBUlJBWV9CVUZGRVI7XG4gIH0pKSB7XG4gICAgJEFycmF5QnVmZmVyID0gZnVuY3Rpb24gQXJyYXlCdWZmZXIobGVuZ3RoKSB7XG4gICAgICBhbkluc3RhbmNlKHRoaXMsICRBcnJheUJ1ZmZlcik7XG4gICAgICByZXR1cm4gbmV3IEJhc2VCdWZmZXIodG9JbmRleChsZW5ndGgpKTtcbiAgICB9O1xuICAgIHZhciBBcnJheUJ1ZmZlclByb3RvID0gJEFycmF5QnVmZmVyW1BST1RPVFlQRV0gPSBCYXNlQnVmZmVyW1BST1RPVFlQRV07XG4gICAgZm9yICh2YXIga2V5cyA9IGdPUE4oQmFzZUJ1ZmZlciksIGogPSAwLCBrZXk7IGtleXMubGVuZ3RoID4gajspIHtcbiAgICAgIGlmICghKChrZXkgPSBrZXlzW2orK10pIGluICRBcnJheUJ1ZmZlcikpIGhpZGUoJEFycmF5QnVmZmVyLCBrZXksIEJhc2VCdWZmZXJba2V5XSk7XG4gICAgfVxuICAgIGlmICghTElCUkFSWSkgQXJyYXlCdWZmZXJQcm90by5jb25zdHJ1Y3RvciA9ICRBcnJheUJ1ZmZlcjtcbiAgfVxuICAvLyBpT1MgU2FmYXJpIDcueCBidWdcbiAgdmFyIHZpZXcgPSBuZXcgJERhdGFWaWV3KG5ldyAkQXJyYXlCdWZmZXIoMikpO1xuICB2YXIgJHNldEludDggPSAkRGF0YVZpZXdbUFJPVE9UWVBFXS5zZXRJbnQ4O1xuICB2aWV3LnNldEludDgoMCwgMjE0NzQ4MzY0OCk7XG4gIHZpZXcuc2V0SW50OCgxLCAyMTQ3NDgzNjQ5KTtcbiAgaWYgKHZpZXcuZ2V0SW50OCgwKSB8fCAhdmlldy5nZXRJbnQ4KDEpKSByZWRlZmluZUFsbCgkRGF0YVZpZXdbUFJPVE9UWVBFXSwge1xuICAgIHNldEludDg6IGZ1bmN0aW9uIHNldEludDgoYnl0ZU9mZnNldCwgdmFsdWUpIHtcbiAgICAgICRzZXRJbnQ4LmNhbGwodGhpcywgYnl0ZU9mZnNldCwgdmFsdWUgPDwgMjQgPj4gMjQpO1xuICAgIH0sXG4gICAgc2V0VWludDg6IGZ1bmN0aW9uIHNldFVpbnQ4KGJ5dGVPZmZzZXQsIHZhbHVlKSB7XG4gICAgICAkc2V0SW50OC5jYWxsKHRoaXMsIGJ5dGVPZmZzZXQsIHZhbHVlIDw8IDI0ID4+IDI0KTtcbiAgICB9XG4gIH0sIHRydWUpO1xufVxuc2V0VG9TdHJpbmdUYWcoJEFycmF5QnVmZmVyLCBBUlJBWV9CVUZGRVIpO1xuc2V0VG9TdHJpbmdUYWcoJERhdGFWaWV3LCBEQVRBX1ZJRVcpO1xuaGlkZSgkRGF0YVZpZXdbUFJPVE9UWVBFXSwgJHR5cGVkLlZJRVcsIHRydWUpO1xuZXhwb3J0c1tBUlJBWV9CVUZGRVJdID0gJEFycmF5QnVmZmVyO1xuZXhwb3J0c1tEQVRBX1ZJRVddID0gJERhdGFWaWV3O1xuIiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpO1xudmFyIGhpZGUgPSByZXF1aXJlKCcuL19oaWRlJyk7XG52YXIgdWlkID0gcmVxdWlyZSgnLi9fdWlkJyk7XG52YXIgVFlQRUQgPSB1aWQoJ3R5cGVkX2FycmF5Jyk7XG52YXIgVklFVyA9IHVpZCgndmlldycpO1xudmFyIEFCViA9ICEhKGdsb2JhbC5BcnJheUJ1ZmZlciAmJiBnbG9iYWwuRGF0YVZpZXcpO1xudmFyIENPTlNUUiA9IEFCVjtcbnZhciBpID0gMDtcbnZhciBsID0gOTtcbnZhciBUeXBlZDtcblxudmFyIFR5cGVkQXJyYXlDb25zdHJ1Y3RvcnMgPSAoXG4gICdJbnQ4QXJyYXksVWludDhBcnJheSxVaW50OENsYW1wZWRBcnJheSxJbnQxNkFycmF5LFVpbnQxNkFycmF5LEludDMyQXJyYXksVWludDMyQXJyYXksRmxvYXQzMkFycmF5LEZsb2F0NjRBcnJheSdcbikuc3BsaXQoJywnKTtcblxud2hpbGUgKGkgPCBsKSB7XG4gIGlmIChUeXBlZCA9IGdsb2JhbFtUeXBlZEFycmF5Q29uc3RydWN0b3JzW2krK11dKSB7XG4gICAgaGlkZShUeXBlZC5wcm90b3R5cGUsIFRZUEVELCB0cnVlKTtcbiAgICBoaWRlKFR5cGVkLnByb3RvdHlwZSwgVklFVywgdHJ1ZSk7XG4gIH0gZWxzZSBDT05TVFIgPSBmYWxzZTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIEFCVjogQUJWLFxuICBDT05TVFI6IENPTlNUUixcbiAgVFlQRUQ6IFRZUEVELFxuICBWSUVXOiBWSUVXXG59O1xuIiwidmFyIGlkID0gMDtcbnZhciBweCA9IE1hdGgucmFuZG9tKCk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChrZXkpIHtcbiAgcmV0dXJuICdTeW1ib2woJy5jb25jYXQoa2V5ID09PSB1bmRlZmluZWQgPyAnJyA6IGtleSwgJylfJywgKCsraWQgKyBweCkudG9TdHJpbmcoMzYpKTtcbn07XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi9fZ2xvYmFsJyk7XG52YXIgbmF2aWdhdG9yID0gZ2xvYmFsLm5hdmlnYXRvcjtcblxubW9kdWxlLmV4cG9ydHMgPSBuYXZpZ2F0b3IgJiYgbmF2aWdhdG9yLnVzZXJBZ2VudCB8fCAnJztcbiIsInZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQsIFRZUEUpIHtcbiAgaWYgKCFpc09iamVjdChpdCkgfHwgaXQuX3QgIT09IFRZUEUpIHRocm93IFR5cGVFcnJvcignSW5jb21wYXRpYmxlIHJlY2VpdmVyLCAnICsgVFlQRSArICcgcmVxdWlyZWQhJyk7XG4gIHJldHVybiBpdDtcbn07XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi9fZ2xvYmFsJyk7XG52YXIgY29yZSA9IHJlcXVpcmUoJy4vX2NvcmUnKTtcbnZhciBMSUJSQVJZID0gcmVxdWlyZSgnLi9fbGlicmFyeScpO1xudmFyIHdrc0V4dCA9IHJlcXVpcmUoJy4vX3drcy1leHQnKTtcbnZhciBkZWZpbmVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpLmY7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChuYW1lKSB7XG4gIHZhciAkU3ltYm9sID0gY29yZS5TeW1ib2wgfHwgKGNvcmUuU3ltYm9sID0gTElCUkFSWSA/IHt9IDogZ2xvYmFsLlN5bWJvbCB8fCB7fSk7XG4gIGlmIChuYW1lLmNoYXJBdCgwKSAhPSAnXycgJiYgIShuYW1lIGluICRTeW1ib2wpKSBkZWZpbmVQcm9wZXJ0eSgkU3ltYm9sLCBuYW1lLCB7IHZhbHVlOiB3a3NFeHQuZihuYW1lKSB9KTtcbn07XG4iLCJleHBvcnRzLmYgPSByZXF1aXJlKCcuL193a3MnKTtcbiIsInZhciBzdG9yZSA9IHJlcXVpcmUoJy4vX3NoYXJlZCcpKCd3a3MnKTtcbnZhciB1aWQgPSByZXF1aXJlKCcuL191aWQnKTtcbnZhciBTeW1ib2wgPSByZXF1aXJlKCcuL19nbG9iYWwnKS5TeW1ib2w7XG52YXIgVVNFX1NZTUJPTCA9IHR5cGVvZiBTeW1ib2wgPT0gJ2Z1bmN0aW9uJztcblxudmFyICRleHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAobmFtZSkge1xuICByZXR1cm4gc3RvcmVbbmFtZV0gfHwgKHN0b3JlW25hbWVdID1cbiAgICBVU0VfU1lNQk9MICYmIFN5bWJvbFtuYW1lXSB8fCAoVVNFX1NZTUJPTCA/IFN5bWJvbCA6IHVpZCkoJ1N5bWJvbC4nICsgbmFtZSkpO1xufTtcblxuJGV4cG9ydHMuc3RvcmUgPSBzdG9yZTtcbiIsInZhciBjbGFzc29mID0gcmVxdWlyZSgnLi9fY2xhc3NvZicpO1xudmFyIElURVJBVE9SID0gcmVxdWlyZSgnLi9fd2tzJykoJ2l0ZXJhdG9yJyk7XG52YXIgSXRlcmF0b3JzID0gcmVxdWlyZSgnLi9faXRlcmF0b3JzJyk7XG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vX2NvcmUnKS5nZXRJdGVyYXRvck1ldGhvZCA9IGZ1bmN0aW9uIChpdCkge1xuICBpZiAoaXQgIT0gdW5kZWZpbmVkKSByZXR1cm4gaXRbSVRFUkFUT1JdXG4gICAgfHwgaXRbJ0BAaXRlcmF0b3InXVxuICAgIHx8IEl0ZXJhdG9yc1tjbGFzc29mKGl0KV07XG59O1xuIiwiLy8gMjIuMS4zLjMgQXJyYXkucHJvdG90eXBlLmNvcHlXaXRoaW4odGFyZ2V0LCBzdGFydCwgZW5kID0gdGhpcy5sZW5ndGgpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUCwgJ0FycmF5JywgeyBjb3B5V2l0aGluOiByZXF1aXJlKCcuL19hcnJheS1jb3B5LXdpdGhpbicpIH0pO1xuXG5yZXF1aXJlKCcuL19hZGQtdG8tdW5zY29wYWJsZXMnKSgnY29weVdpdGhpbicpO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciAkZXZlcnkgPSByZXF1aXJlKCcuL19hcnJheS1tZXRob2RzJykoNCk7XG5cbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogIXJlcXVpcmUoJy4vX3N0cmljdC1tZXRob2QnKShbXS5ldmVyeSwgdHJ1ZSksICdBcnJheScsIHtcbiAgLy8gMjIuMS4zLjUgLyAxNS40LjQuMTYgQXJyYXkucHJvdG90eXBlLmV2ZXJ5KGNhbGxiYWNrZm4gWywgdGhpc0FyZ10pXG4gIGV2ZXJ5OiBmdW5jdGlvbiBldmVyeShjYWxsYmFja2ZuIC8qICwgdGhpc0FyZyAqLykge1xuICAgIHJldHVybiAkZXZlcnkodGhpcywgY2FsbGJhY2tmbiwgYXJndW1lbnRzWzFdKTtcbiAgfVxufSk7XG4iLCIvLyAyMi4xLjMuNiBBcnJheS5wcm90b3R5cGUuZmlsbCh2YWx1ZSwgc3RhcnQgPSAwLCBlbmQgPSB0aGlzLmxlbmd0aClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5QLCAnQXJyYXknLCB7IGZpbGw6IHJlcXVpcmUoJy4vX2FycmF5LWZpbGwnKSB9KTtcblxucmVxdWlyZSgnLi9fYWRkLXRvLXVuc2NvcGFibGVzJykoJ2ZpbGwnKTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgJGZpbHRlciA9IHJlcXVpcmUoJy4vX2FycmF5LW1ldGhvZHMnKSgyKTtcblxuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiAhcmVxdWlyZSgnLi9fc3RyaWN0LW1ldGhvZCcpKFtdLmZpbHRlciwgdHJ1ZSksICdBcnJheScsIHtcbiAgLy8gMjIuMS4zLjcgLyAxNS40LjQuMjAgQXJyYXkucHJvdG90eXBlLmZpbHRlcihjYWxsYmFja2ZuIFssIHRoaXNBcmddKVxuICBmaWx0ZXI6IGZ1bmN0aW9uIGZpbHRlcihjYWxsYmFja2ZuIC8qICwgdGhpc0FyZyAqLykge1xuICAgIHJldHVybiAkZmlsdGVyKHRoaXMsIGNhbGxiYWNrZm4sIGFyZ3VtZW50c1sxXSk7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gMjIuMS4zLjkgQXJyYXkucHJvdG90eXBlLmZpbmRJbmRleChwcmVkaWNhdGUsIHRoaXNBcmcgPSB1bmRlZmluZWQpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyICRmaW5kID0gcmVxdWlyZSgnLi9fYXJyYXktbWV0aG9kcycpKDYpO1xudmFyIEtFWSA9ICdmaW5kSW5kZXgnO1xudmFyIGZvcmNlZCA9IHRydWU7XG4vLyBTaG91bGRuJ3Qgc2tpcCBob2xlc1xuaWYgKEtFWSBpbiBbXSkgQXJyYXkoMSlbS0VZXShmdW5jdGlvbiAoKSB7IGZvcmNlZCA9IGZhbHNlOyB9KTtcbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogZm9yY2VkLCAnQXJyYXknLCB7XG4gIGZpbmRJbmRleDogZnVuY3Rpb24gZmluZEluZGV4KGNhbGxiYWNrZm4gLyogLCB0aGF0ID0gdW5kZWZpbmVkICovKSB7XG4gICAgcmV0dXJuICRmaW5kKHRoaXMsIGNhbGxiYWNrZm4sIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKTtcbiAgfVxufSk7XG5yZXF1aXJlKCcuL19hZGQtdG8tdW5zY29wYWJsZXMnKShLRVkpO1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gMjIuMS4zLjggQXJyYXkucHJvdG90eXBlLmZpbmQocHJlZGljYXRlLCB0aGlzQXJnID0gdW5kZWZpbmVkKVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciAkZmluZCA9IHJlcXVpcmUoJy4vX2FycmF5LW1ldGhvZHMnKSg1KTtcbnZhciBLRVkgPSAnZmluZCc7XG52YXIgZm9yY2VkID0gdHJ1ZTtcbi8vIFNob3VsZG4ndCBza2lwIGhvbGVzXG5pZiAoS0VZIGluIFtdKSBBcnJheSgxKVtLRVldKGZ1bmN0aW9uICgpIHsgZm9yY2VkID0gZmFsc2U7IH0pO1xuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiBmb3JjZWQsICdBcnJheScsIHtcbiAgZmluZDogZnVuY3Rpb24gZmluZChjYWxsYmFja2ZuIC8qICwgdGhhdCA9IHVuZGVmaW5lZCAqLykge1xuICAgIHJldHVybiAkZmluZCh0aGlzLCBjYWxsYmFja2ZuLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCk7XG4gIH1cbn0pO1xucmVxdWlyZSgnLi9fYWRkLXRvLXVuc2NvcGFibGVzJykoS0VZKTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgJGZvckVhY2ggPSByZXF1aXJlKCcuL19hcnJheS1tZXRob2RzJykoMCk7XG52YXIgU1RSSUNUID0gcmVxdWlyZSgnLi9fc3RyaWN0LW1ldGhvZCcpKFtdLmZvckVhY2gsIHRydWUpO1xuXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqICFTVFJJQ1QsICdBcnJheScsIHtcbiAgLy8gMjIuMS4zLjEwIC8gMTUuNC40LjE4IEFycmF5LnByb3RvdHlwZS5mb3JFYWNoKGNhbGxiYWNrZm4gWywgdGhpc0FyZ10pXG4gIGZvckVhY2g6IGZ1bmN0aW9uIGZvckVhY2goY2FsbGJhY2tmbiAvKiAsIHRoaXNBcmcgKi8pIHtcbiAgICByZXR1cm4gJGZvckVhY2godGhpcywgY2FsbGJhY2tmbiwgYXJndW1lbnRzWzFdKTtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgY3R4ID0gcmVxdWlyZSgnLi9fY3R4Jyk7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8tb2JqZWN0Jyk7XG52YXIgY2FsbCA9IHJlcXVpcmUoJy4vX2l0ZXItY2FsbCcpO1xudmFyIGlzQXJyYXlJdGVyID0gcmVxdWlyZSgnLi9faXMtYXJyYXktaXRlcicpO1xudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi9fdG8tbGVuZ3RoJyk7XG52YXIgY3JlYXRlUHJvcGVydHkgPSByZXF1aXJlKCcuL19jcmVhdGUtcHJvcGVydHknKTtcbnZhciBnZXRJdGVyRm4gPSByZXF1aXJlKCcuL2NvcmUuZ2V0LWl0ZXJhdG9yLW1ldGhvZCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqICFyZXF1aXJlKCcuL19pdGVyLWRldGVjdCcpKGZ1bmN0aW9uIChpdGVyKSB7IEFycmF5LmZyb20oaXRlcik7IH0pLCAnQXJyYXknLCB7XG4gIC8vIDIyLjEuMi4xIEFycmF5LmZyb20oYXJyYXlMaWtlLCBtYXBmbiA9IHVuZGVmaW5lZCwgdGhpc0FyZyA9IHVuZGVmaW5lZClcbiAgZnJvbTogZnVuY3Rpb24gZnJvbShhcnJheUxpa2UgLyogLCBtYXBmbiA9IHVuZGVmaW5lZCwgdGhpc0FyZyA9IHVuZGVmaW5lZCAqLykge1xuICAgIHZhciBPID0gdG9PYmplY3QoYXJyYXlMaWtlKTtcbiAgICB2YXIgQyA9IHR5cGVvZiB0aGlzID09ICdmdW5jdGlvbicgPyB0aGlzIDogQXJyYXk7XG4gICAgdmFyIGFMZW4gPSBhcmd1bWVudHMubGVuZ3RoO1xuICAgIHZhciBtYXBmbiA9IGFMZW4gPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkO1xuICAgIHZhciBtYXBwaW5nID0gbWFwZm4gIT09IHVuZGVmaW5lZDtcbiAgICB2YXIgaW5kZXggPSAwO1xuICAgIHZhciBpdGVyRm4gPSBnZXRJdGVyRm4oTyk7XG4gICAgdmFyIGxlbmd0aCwgcmVzdWx0LCBzdGVwLCBpdGVyYXRvcjtcbiAgICBpZiAobWFwcGluZykgbWFwZm4gPSBjdHgobWFwZm4sIGFMZW4gPiAyID8gYXJndW1lbnRzWzJdIDogdW5kZWZpbmVkLCAyKTtcbiAgICAvLyBpZiBvYmplY3QgaXNuJ3QgaXRlcmFibGUgb3IgaXQncyBhcnJheSB3aXRoIGRlZmF1bHQgaXRlcmF0b3IgLSB1c2Ugc2ltcGxlIGNhc2VcbiAgICBpZiAoaXRlckZuICE9IHVuZGVmaW5lZCAmJiAhKEMgPT0gQXJyYXkgJiYgaXNBcnJheUl0ZXIoaXRlckZuKSkpIHtcbiAgICAgIGZvciAoaXRlcmF0b3IgPSBpdGVyRm4uY2FsbChPKSwgcmVzdWx0ID0gbmV3IEMoKTsgIShzdGVwID0gaXRlcmF0b3IubmV4dCgpKS5kb25lOyBpbmRleCsrKSB7XG4gICAgICAgIGNyZWF0ZVByb3BlcnR5KHJlc3VsdCwgaW5kZXgsIG1hcHBpbmcgPyBjYWxsKGl0ZXJhdG9yLCBtYXBmbiwgW3N0ZXAudmFsdWUsIGluZGV4XSwgdHJ1ZSkgOiBzdGVwLnZhbHVlKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgbGVuZ3RoID0gdG9MZW5ndGgoTy5sZW5ndGgpO1xuICAgICAgZm9yIChyZXN1bHQgPSBuZXcgQyhsZW5ndGgpOyBsZW5ndGggPiBpbmRleDsgaW5kZXgrKykge1xuICAgICAgICBjcmVhdGVQcm9wZXJ0eShyZXN1bHQsIGluZGV4LCBtYXBwaW5nID8gbWFwZm4oT1tpbmRleF0sIGluZGV4KSA6IE9baW5kZXhdKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmVzdWx0Lmxlbmd0aCA9IGluZGV4O1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciAkaW5kZXhPZiA9IHJlcXVpcmUoJy4vX2FycmF5LWluY2x1ZGVzJykoZmFsc2UpO1xudmFyICRuYXRpdmUgPSBbXS5pbmRleE9mO1xudmFyIE5FR0FUSVZFX1pFUk8gPSAhISRuYXRpdmUgJiYgMSAvIFsxXS5pbmRleE9mKDEsIC0wKSA8IDA7XG5cbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogKE5FR0FUSVZFX1pFUk8gfHwgIXJlcXVpcmUoJy4vX3N0cmljdC1tZXRob2QnKSgkbmF0aXZlKSksICdBcnJheScsIHtcbiAgLy8gMjIuMS4zLjExIC8gMTUuNC40LjE0IEFycmF5LnByb3RvdHlwZS5pbmRleE9mKHNlYXJjaEVsZW1lbnQgWywgZnJvbUluZGV4XSlcbiAgaW5kZXhPZjogZnVuY3Rpb24gaW5kZXhPZihzZWFyY2hFbGVtZW50IC8qICwgZnJvbUluZGV4ID0gMCAqLykge1xuICAgIHJldHVybiBORUdBVElWRV9aRVJPXG4gICAgICAvLyBjb252ZXJ0IC0wIHRvICswXG4gICAgICA/ICRuYXRpdmUuYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCAwXG4gICAgICA6ICRpbmRleE9mKHRoaXMsIHNlYXJjaEVsZW1lbnQsIGFyZ3VtZW50c1sxXSk7XG4gIH1cbn0pO1xuIiwiLy8gMjIuMS4yLjIgLyAxNS40LjMuMiBBcnJheS5pc0FycmF5KGFyZylcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnQXJyYXknLCB7IGlzQXJyYXk6IHJlcXVpcmUoJy4vX2lzLWFycmF5JykgfSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgYWRkVG9VbnNjb3BhYmxlcyA9IHJlcXVpcmUoJy4vX2FkZC10by11bnNjb3BhYmxlcycpO1xudmFyIHN0ZXAgPSByZXF1aXJlKCcuL19pdGVyLXN0ZXAnKTtcbnZhciBJdGVyYXRvcnMgPSByZXF1aXJlKCcuL19pdGVyYXRvcnMnKTtcbnZhciB0b0lPYmplY3QgPSByZXF1aXJlKCcuL190by1pb2JqZWN0Jyk7XG5cbi8vIDIyLjEuMy40IEFycmF5LnByb3RvdHlwZS5lbnRyaWVzKClcbi8vIDIyLjEuMy4xMyBBcnJheS5wcm90b3R5cGUua2V5cygpXG4vLyAyMi4xLjMuMjkgQXJyYXkucHJvdG90eXBlLnZhbHVlcygpXG4vLyAyMi4xLjMuMzAgQXJyYXkucHJvdG90eXBlW0BAaXRlcmF0b3JdKClcbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9faXRlci1kZWZpbmUnKShBcnJheSwgJ0FycmF5JywgZnVuY3Rpb24gKGl0ZXJhdGVkLCBraW5kKSB7XG4gIHRoaXMuX3QgPSB0b0lPYmplY3QoaXRlcmF0ZWQpOyAvLyB0YXJnZXRcbiAgdGhpcy5faSA9IDA7ICAgICAgICAgICAgICAgICAgIC8vIG5leHQgaW5kZXhcbiAgdGhpcy5fayA9IGtpbmQ7ICAgICAgICAgICAgICAgIC8vIGtpbmRcbi8vIDIyLjEuNS4yLjEgJUFycmF5SXRlcmF0b3JQcm90b3R5cGUlLm5leHQoKVxufSwgZnVuY3Rpb24gKCkge1xuICB2YXIgTyA9IHRoaXMuX3Q7XG4gIHZhciBraW5kID0gdGhpcy5faztcbiAgdmFyIGluZGV4ID0gdGhpcy5faSsrO1xuICBpZiAoIU8gfHwgaW5kZXggPj0gTy5sZW5ndGgpIHtcbiAgICB0aGlzLl90ID0gdW5kZWZpbmVkO1xuICAgIHJldHVybiBzdGVwKDEpO1xuICB9XG4gIGlmIChraW5kID09ICdrZXlzJykgcmV0dXJuIHN0ZXAoMCwgaW5kZXgpO1xuICBpZiAoa2luZCA9PSAndmFsdWVzJykgcmV0dXJuIHN0ZXAoMCwgT1tpbmRleF0pO1xuICByZXR1cm4gc3RlcCgwLCBbaW5kZXgsIE9baW5kZXhdXSk7XG59LCAndmFsdWVzJyk7XG5cbi8vIGFyZ3VtZW50c0xpc3RbQEBpdGVyYXRvcl0gaXMgJUFycmF5UHJvdG9fdmFsdWVzJSAoOS40LjQuNiwgOS40LjQuNylcbkl0ZXJhdG9ycy5Bcmd1bWVudHMgPSBJdGVyYXRvcnMuQXJyYXk7XG5cbmFkZFRvVW5zY29wYWJsZXMoJ2tleXMnKTtcbmFkZFRvVW5zY29wYWJsZXMoJ3ZhbHVlcycpO1xuYWRkVG9VbnNjb3BhYmxlcygnZW50cmllcycpO1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gMjIuMS4zLjEzIEFycmF5LnByb3RvdHlwZS5qb2luKHNlcGFyYXRvcilcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgdG9JT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8taW9iamVjdCcpO1xudmFyIGFycmF5Sm9pbiA9IFtdLmpvaW47XG5cbi8vIGZhbGxiYWNrIGZvciBub3QgYXJyYXktbGlrZSBzdHJpbmdzXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqIChyZXF1aXJlKCcuL19pb2JqZWN0JykgIT0gT2JqZWN0IHx8ICFyZXF1aXJlKCcuL19zdHJpY3QtbWV0aG9kJykoYXJyYXlKb2luKSksICdBcnJheScsIHtcbiAgam9pbjogZnVuY3Rpb24gam9pbihzZXBhcmF0b3IpIHtcbiAgICByZXR1cm4gYXJyYXlKb2luLmNhbGwodG9JT2JqZWN0KHRoaXMpLCBzZXBhcmF0b3IgPT09IHVuZGVmaW5lZCA/ICcsJyA6IHNlcGFyYXRvcik7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciB0b0lPYmplY3QgPSByZXF1aXJlKCcuL190by1pb2JqZWN0Jyk7XG52YXIgdG9JbnRlZ2VyID0gcmVxdWlyZSgnLi9fdG8taW50ZWdlcicpO1xudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi9fdG8tbGVuZ3RoJyk7XG52YXIgJG5hdGl2ZSA9IFtdLmxhc3RJbmRleE9mO1xudmFyIE5FR0FUSVZFX1pFUk8gPSAhISRuYXRpdmUgJiYgMSAvIFsxXS5sYXN0SW5kZXhPZigxLCAtMCkgPCAwO1xuXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqIChORUdBVElWRV9aRVJPIHx8ICFyZXF1aXJlKCcuL19zdHJpY3QtbWV0aG9kJykoJG5hdGl2ZSkpLCAnQXJyYXknLCB7XG4gIC8vIDIyLjEuMy4xNCAvIDE1LjQuNC4xNSBBcnJheS5wcm90b3R5cGUubGFzdEluZGV4T2Yoc2VhcmNoRWxlbWVudCBbLCBmcm9tSW5kZXhdKVxuICBsYXN0SW5kZXhPZjogZnVuY3Rpb24gbGFzdEluZGV4T2Yoc2VhcmNoRWxlbWVudCAvKiAsIGZyb21JbmRleCA9IEBbKi0xXSAqLykge1xuICAgIC8vIGNvbnZlcnQgLTAgdG8gKzBcbiAgICBpZiAoTkVHQVRJVkVfWkVSTykgcmV0dXJuICRuYXRpdmUuYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCAwO1xuICAgIHZhciBPID0gdG9JT2JqZWN0KHRoaXMpO1xuICAgIHZhciBsZW5ndGggPSB0b0xlbmd0aChPLmxlbmd0aCk7XG4gICAgdmFyIGluZGV4ID0gbGVuZ3RoIC0gMTtcbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA+IDEpIGluZGV4ID0gTWF0aC5taW4oaW5kZXgsIHRvSW50ZWdlcihhcmd1bWVudHNbMV0pKTtcbiAgICBpZiAoaW5kZXggPCAwKSBpbmRleCA9IGxlbmd0aCArIGluZGV4O1xuICAgIGZvciAoO2luZGV4ID49IDA7IGluZGV4LS0pIGlmIChpbmRleCBpbiBPKSBpZiAoT1tpbmRleF0gPT09IHNlYXJjaEVsZW1lbnQpIHJldHVybiBpbmRleCB8fCAwO1xuICAgIHJldHVybiAtMTtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyICRtYXAgPSByZXF1aXJlKCcuL19hcnJheS1tZXRob2RzJykoMSk7XG5cbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogIXJlcXVpcmUoJy4vX3N0cmljdC1tZXRob2QnKShbXS5tYXAsIHRydWUpLCAnQXJyYXknLCB7XG4gIC8vIDIyLjEuMy4xNSAvIDE1LjQuNC4xOSBBcnJheS5wcm90b3R5cGUubWFwKGNhbGxiYWNrZm4gWywgdGhpc0FyZ10pXG4gIG1hcDogZnVuY3Rpb24gbWFwKGNhbGxiYWNrZm4gLyogLCB0aGlzQXJnICovKSB7XG4gICAgcmV0dXJuICRtYXAodGhpcywgY2FsbGJhY2tmbiwgYXJndW1lbnRzWzFdKTtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIGNyZWF0ZVByb3BlcnR5ID0gcmVxdWlyZSgnLi9fY3JlYXRlLXByb3BlcnR5Jyk7XG5cbi8vIFdlYktpdCBBcnJheS5vZiBpc24ndCBnZW5lcmljXG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqIHJlcXVpcmUoJy4vX2ZhaWxzJykoZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBGKCkgeyAvKiBlbXB0eSAqLyB9XG4gIHJldHVybiAhKEFycmF5Lm9mLmNhbGwoRikgaW5zdGFuY2VvZiBGKTtcbn0pLCAnQXJyYXknLCB7XG4gIC8vIDIyLjEuMi4zIEFycmF5Lm9mKCAuLi5pdGVtcylcbiAgb2Y6IGZ1bmN0aW9uIG9mKC8qIC4uLmFyZ3MgKi8pIHtcbiAgICB2YXIgaW5kZXggPSAwO1xuICAgIHZhciBhTGVuID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgICB2YXIgcmVzdWx0ID0gbmV3ICh0eXBlb2YgdGhpcyA9PSAnZnVuY3Rpb24nID8gdGhpcyA6IEFycmF5KShhTGVuKTtcbiAgICB3aGlsZSAoYUxlbiA+IGluZGV4KSBjcmVhdGVQcm9wZXJ0eShyZXN1bHQsIGluZGV4LCBhcmd1bWVudHNbaW5kZXgrK10pO1xuICAgIHJlc3VsdC5sZW5ndGggPSBhTGVuO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciAkcmVkdWNlID0gcmVxdWlyZSgnLi9fYXJyYXktcmVkdWNlJyk7XG5cbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogIXJlcXVpcmUoJy4vX3N0cmljdC1tZXRob2QnKShbXS5yZWR1Y2VSaWdodCwgdHJ1ZSksICdBcnJheScsIHtcbiAgLy8gMjIuMS4zLjE5IC8gMTUuNC40LjIyIEFycmF5LnByb3RvdHlwZS5yZWR1Y2VSaWdodChjYWxsYmFja2ZuIFssIGluaXRpYWxWYWx1ZV0pXG4gIHJlZHVjZVJpZ2h0OiBmdW5jdGlvbiByZWR1Y2VSaWdodChjYWxsYmFja2ZuIC8qICwgaW5pdGlhbFZhbHVlICovKSB7XG4gICAgcmV0dXJuICRyZWR1Y2UodGhpcywgY2FsbGJhY2tmbiwgYXJndW1lbnRzLmxlbmd0aCwgYXJndW1lbnRzWzFdLCB0cnVlKTtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyICRyZWR1Y2UgPSByZXF1aXJlKCcuL19hcnJheS1yZWR1Y2UnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiAhcmVxdWlyZSgnLi9fc3RyaWN0LW1ldGhvZCcpKFtdLnJlZHVjZSwgdHJ1ZSksICdBcnJheScsIHtcbiAgLy8gMjIuMS4zLjE4IC8gMTUuNC40LjIxIEFycmF5LnByb3RvdHlwZS5yZWR1Y2UoY2FsbGJhY2tmbiBbLCBpbml0aWFsVmFsdWVdKVxuICByZWR1Y2U6IGZ1bmN0aW9uIHJlZHVjZShjYWxsYmFja2ZuIC8qICwgaW5pdGlhbFZhbHVlICovKSB7XG4gICAgcmV0dXJuICRyZWR1Y2UodGhpcywgY2FsbGJhY2tmbiwgYXJndW1lbnRzLmxlbmd0aCwgYXJndW1lbnRzWzFdLCBmYWxzZSk7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBodG1sID0gcmVxdWlyZSgnLi9faHRtbCcpO1xudmFyIGNvZiA9IHJlcXVpcmUoJy4vX2NvZicpO1xudmFyIHRvQWJzb2x1dGVJbmRleCA9IHJlcXVpcmUoJy4vX3RvLWFic29sdXRlLWluZGV4Jyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuL190by1sZW5ndGgnKTtcbnZhciBhcnJheVNsaWNlID0gW10uc2xpY2U7XG5cbi8vIGZhbGxiYWNrIGZvciBub3QgYXJyYXktbGlrZSBFUzMgc3RyaW5ncyBhbmQgRE9NIG9iamVjdHNcbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogcmVxdWlyZSgnLi9fZmFpbHMnKShmdW5jdGlvbiAoKSB7XG4gIGlmIChodG1sKSBhcnJheVNsaWNlLmNhbGwoaHRtbCk7XG59KSwgJ0FycmF5Jywge1xuICBzbGljZTogZnVuY3Rpb24gc2xpY2UoYmVnaW4sIGVuZCkge1xuICAgIHZhciBsZW4gPSB0b0xlbmd0aCh0aGlzLmxlbmd0aCk7XG4gICAgdmFyIGtsYXNzID0gY29mKHRoaXMpO1xuICAgIGVuZCA9IGVuZCA9PT0gdW5kZWZpbmVkID8gbGVuIDogZW5kO1xuICAgIGlmIChrbGFzcyA9PSAnQXJyYXknKSByZXR1cm4gYXJyYXlTbGljZS5jYWxsKHRoaXMsIGJlZ2luLCBlbmQpO1xuICAgIHZhciBzdGFydCA9IHRvQWJzb2x1dGVJbmRleChiZWdpbiwgbGVuKTtcbiAgICB2YXIgdXBUbyA9IHRvQWJzb2x1dGVJbmRleChlbmQsIGxlbik7XG4gICAgdmFyIHNpemUgPSB0b0xlbmd0aCh1cFRvIC0gc3RhcnQpO1xuICAgIHZhciBjbG9uZWQgPSBuZXcgQXJyYXkoc2l6ZSk7XG4gICAgdmFyIGkgPSAwO1xuICAgIGZvciAoOyBpIDwgc2l6ZTsgaSsrKSBjbG9uZWRbaV0gPSBrbGFzcyA9PSAnU3RyaW5nJ1xuICAgICAgPyB0aGlzLmNoYXJBdChzdGFydCArIGkpXG4gICAgICA6IHRoaXNbc3RhcnQgKyBpXTtcbiAgICByZXR1cm4gY2xvbmVkO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgJHNvbWUgPSByZXF1aXJlKCcuL19hcnJheS1tZXRob2RzJykoMyk7XG5cbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogIXJlcXVpcmUoJy4vX3N0cmljdC1tZXRob2QnKShbXS5zb21lLCB0cnVlKSwgJ0FycmF5Jywge1xuICAvLyAyMi4xLjMuMjMgLyAxNS40LjQuMTcgQXJyYXkucHJvdG90eXBlLnNvbWUoY2FsbGJhY2tmbiBbLCB0aGlzQXJnXSlcbiAgc29tZTogZnVuY3Rpb24gc29tZShjYWxsYmFja2ZuIC8qICwgdGhpc0FyZyAqLykge1xuICAgIHJldHVybiAkc29tZSh0aGlzLCBjYWxsYmFja2ZuLCBhcmd1bWVudHNbMV0pO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgYUZ1bmN0aW9uID0gcmVxdWlyZSgnLi9fYS1mdW5jdGlvbicpO1xudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8tb2JqZWN0Jyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuL19mYWlscycpO1xudmFyICRzb3J0ID0gW10uc29ydDtcbnZhciB0ZXN0ID0gWzEsIDIsIDNdO1xuXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqIChmYWlscyhmdW5jdGlvbiAoKSB7XG4gIC8vIElFOC1cbiAgdGVzdC5zb3J0KHVuZGVmaW5lZCk7XG59KSB8fCAhZmFpbHMoZnVuY3Rpb24gKCkge1xuICAvLyBWOCBidWdcbiAgdGVzdC5zb3J0KG51bGwpO1xuICAvLyBPbGQgV2ViS2l0XG59KSB8fCAhcmVxdWlyZSgnLi9fc3RyaWN0LW1ldGhvZCcpKCRzb3J0KSksICdBcnJheScsIHtcbiAgLy8gMjIuMS4zLjI1IEFycmF5LnByb3RvdHlwZS5zb3J0KGNvbXBhcmVmbilcbiAgc29ydDogZnVuY3Rpb24gc29ydChjb21wYXJlZm4pIHtcbiAgICByZXR1cm4gY29tcGFyZWZuID09PSB1bmRlZmluZWRcbiAgICAgID8gJHNvcnQuY2FsbCh0b09iamVjdCh0aGlzKSlcbiAgICAgIDogJHNvcnQuY2FsbCh0b09iamVjdCh0aGlzKSwgYUZ1bmN0aW9uKGNvbXBhcmVmbikpO1xuICB9XG59KTtcbiIsInJlcXVpcmUoJy4vX3NldC1zcGVjaWVzJykoJ0FycmF5Jyk7XG4iLCIvLyAyMC4zLjMuMSAvIDE1LjkuNC40IERhdGUubm93KClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnRGF0ZScsIHsgbm93OiBmdW5jdGlvbiAoKSB7IHJldHVybiBuZXcgRGF0ZSgpLmdldFRpbWUoKTsgfSB9KTtcbiIsIi8vIDIwLjMuNC4zNiAvIDE1LjkuNS40MyBEYXRlLnByb3RvdHlwZS50b0lTT1N0cmluZygpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIHRvSVNPU3RyaW5nID0gcmVxdWlyZSgnLi9fZGF0ZS10by1pc28tc3RyaW5nJyk7XG5cbi8vIFBoYW50b21KUyAvIG9sZCBXZWJLaXQgaGFzIGEgYnJva2VuIGltcGxlbWVudGF0aW9uc1xuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiAoRGF0ZS5wcm90b3R5cGUudG9JU09TdHJpbmcgIT09IHRvSVNPU3RyaW5nKSwgJ0RhdGUnLCB7XG4gIHRvSVNPU3RyaW5nOiB0b0lTT1N0cmluZ1xufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8tb2JqZWN0Jyk7XG52YXIgdG9QcmltaXRpdmUgPSByZXF1aXJlKCcuL190by1wcmltaXRpdmUnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiByZXF1aXJlKCcuL19mYWlscycpKGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIG5ldyBEYXRlKE5hTikudG9KU09OKCkgIT09IG51bGxcbiAgICB8fCBEYXRlLnByb3RvdHlwZS50b0pTT04uY2FsbCh7IHRvSVNPU3RyaW5nOiBmdW5jdGlvbiAoKSB7IHJldHVybiAxOyB9IH0pICE9PSAxO1xufSksICdEYXRlJywge1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW51c2VkLXZhcnNcbiAgdG9KU09OOiBmdW5jdGlvbiB0b0pTT04oa2V5KSB7XG4gICAgdmFyIE8gPSB0b09iamVjdCh0aGlzKTtcbiAgICB2YXIgcHYgPSB0b1ByaW1pdGl2ZShPKTtcbiAgICByZXR1cm4gdHlwZW9mIHB2ID09ICdudW1iZXInICYmICFpc0Zpbml0ZShwdikgPyBudWxsIDogTy50b0lTT1N0cmluZygpO1xuICB9XG59KTtcbiIsInZhciBUT19QUklNSVRJVkUgPSByZXF1aXJlKCcuL193a3MnKSgndG9QcmltaXRpdmUnKTtcbnZhciBwcm90byA9IERhdGUucHJvdG90eXBlO1xuXG5pZiAoIShUT19QUklNSVRJVkUgaW4gcHJvdG8pKSByZXF1aXJlKCcuL19oaWRlJykocHJvdG8sIFRPX1BSSU1JVElWRSwgcmVxdWlyZSgnLi9fZGF0ZS10by1wcmltaXRpdmUnKSk7XG4iLCJ2YXIgRGF0ZVByb3RvID0gRGF0ZS5wcm90b3R5cGU7XG52YXIgSU5WQUxJRF9EQVRFID0gJ0ludmFsaWQgRGF0ZSc7XG52YXIgVE9fU1RSSU5HID0gJ3RvU3RyaW5nJztcbnZhciAkdG9TdHJpbmcgPSBEYXRlUHJvdG9bVE9fU1RSSU5HXTtcbnZhciBnZXRUaW1lID0gRGF0ZVByb3RvLmdldFRpbWU7XG5pZiAobmV3IERhdGUoTmFOKSArICcnICE9IElOVkFMSURfREFURSkge1xuICByZXF1aXJlKCcuL19yZWRlZmluZScpKERhdGVQcm90bywgVE9fU1RSSU5HLCBmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgICB2YXIgdmFsdWUgPSBnZXRUaW1lLmNhbGwodGhpcyk7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXNlbGYtY29tcGFyZVxuICAgIHJldHVybiB2YWx1ZSA9PT0gdmFsdWUgPyAkdG9TdHJpbmcuY2FsbCh0aGlzKSA6IElOVkFMSURfREFURTtcbiAgfSk7XG59XG4iLCIvLyAxOS4yLjMuMiAvIDE1LjMuNC41IEZ1bmN0aW9uLnByb3RvdHlwZS5iaW5kKHRoaXNBcmcsIGFyZ3MuLi4pXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUCwgJ0Z1bmN0aW9uJywgeyBiaW5kOiByZXF1aXJlKCcuL19iaW5kJykgfSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbnZhciBnZXRQcm90b3R5cGVPZiA9IHJlcXVpcmUoJy4vX29iamVjdC1ncG8nKTtcbnZhciBIQVNfSU5TVEFOQ0UgPSByZXF1aXJlKCcuL193a3MnKSgnaGFzSW5zdGFuY2UnKTtcbnZhciBGdW5jdGlvblByb3RvID0gRnVuY3Rpb24ucHJvdG90eXBlO1xuLy8gMTkuMi4zLjYgRnVuY3Rpb24ucHJvdG90eXBlW0BAaGFzSW5zdGFuY2VdKFYpXG5pZiAoIShIQVNfSU5TVEFOQ0UgaW4gRnVuY3Rpb25Qcm90bykpIHJlcXVpcmUoJy4vX29iamVjdC1kcCcpLmYoRnVuY3Rpb25Qcm90bywgSEFTX0lOU1RBTkNFLCB7IHZhbHVlOiBmdW5jdGlvbiAoTykge1xuICBpZiAodHlwZW9mIHRoaXMgIT0gJ2Z1bmN0aW9uJyB8fCAhaXNPYmplY3QoTykpIHJldHVybiBmYWxzZTtcbiAgaWYgKCFpc09iamVjdCh0aGlzLnByb3RvdHlwZSkpIHJldHVybiBPIGluc3RhbmNlb2YgdGhpcztcbiAgLy8gZm9yIGVudmlyb25tZW50IHcvbyBuYXRpdmUgYEBAaGFzSW5zdGFuY2VgIGxvZ2ljIGVub3VnaCBgaW5zdGFuY2VvZmAsIGJ1dCBhZGQgdGhpczpcbiAgd2hpbGUgKE8gPSBnZXRQcm90b3R5cGVPZihPKSkgaWYgKHRoaXMucHJvdG90eXBlID09PSBPKSByZXR1cm4gdHJ1ZTtcbiAgcmV0dXJuIGZhbHNlO1xufSB9KTtcbiIsInZhciBkUCA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpLmY7XG52YXIgRlByb3RvID0gRnVuY3Rpb24ucHJvdG90eXBlO1xudmFyIG5hbWVSRSA9IC9eXFxzKmZ1bmN0aW9uIChbXiAoXSopLztcbnZhciBOQU1FID0gJ25hbWUnO1xuXG4vLyAxOS4yLjQuMiBuYW1lXG5OQU1FIGluIEZQcm90byB8fCByZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpICYmIGRQKEZQcm90bywgTkFNRSwge1xuICBjb25maWd1cmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gKCkge1xuICAgIHRyeSB7XG4gICAgICByZXR1cm4gKCcnICsgdGhpcykubWF0Y2gobmFtZVJFKVsxXTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICByZXR1cm4gJyc7XG4gICAgfVxuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBzdHJvbmcgPSByZXF1aXJlKCcuL19jb2xsZWN0aW9uLXN0cm9uZycpO1xudmFyIHZhbGlkYXRlID0gcmVxdWlyZSgnLi9fdmFsaWRhdGUtY29sbGVjdGlvbicpO1xudmFyIE1BUCA9ICdNYXAnO1xuXG4vLyAyMy4xIE1hcCBPYmplY3RzXG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vX2NvbGxlY3Rpb24nKShNQVAsIGZ1bmN0aW9uIChnZXQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIE1hcCgpIHsgcmV0dXJuIGdldCh0aGlzLCBhcmd1bWVudHMubGVuZ3RoID4gMCA/IGFyZ3VtZW50c1swXSA6IHVuZGVmaW5lZCk7IH07XG59LCB7XG4gIC8vIDIzLjEuMy42IE1hcC5wcm90b3R5cGUuZ2V0KGtleSlcbiAgZ2V0OiBmdW5jdGlvbiBnZXQoa2V5KSB7XG4gICAgdmFyIGVudHJ5ID0gc3Ryb25nLmdldEVudHJ5KHZhbGlkYXRlKHRoaXMsIE1BUCksIGtleSk7XG4gICAgcmV0dXJuIGVudHJ5ICYmIGVudHJ5LnY7XG4gIH0sXG4gIC8vIDIzLjEuMy45IE1hcC5wcm90b3R5cGUuc2V0KGtleSwgdmFsdWUpXG4gIHNldDogZnVuY3Rpb24gc2V0KGtleSwgdmFsdWUpIHtcbiAgICByZXR1cm4gc3Ryb25nLmRlZih2YWxpZGF0ZSh0aGlzLCBNQVApLCBrZXkgPT09IDAgPyAwIDoga2V5LCB2YWx1ZSk7XG4gIH1cbn0sIHN0cm9uZywgdHJ1ZSk7XG4iLCIvLyAyMC4yLjIuMyBNYXRoLmFjb3NoKHgpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIGxvZzFwID0gcmVxdWlyZSgnLi9fbWF0aC1sb2cxcCcpO1xudmFyIHNxcnQgPSBNYXRoLnNxcnQ7XG52YXIgJGFjb3NoID0gTWF0aC5hY29zaDtcblxuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAhKCRhY29zaFxuICAvLyBWOCBidWc6IGh0dHBzOi8vY29kZS5nb29nbGUuY29tL3AvdjgvaXNzdWVzL2RldGFpbD9pZD0zNTA5XG4gICYmIE1hdGguZmxvb3IoJGFjb3NoKE51bWJlci5NQVhfVkFMVUUpKSA9PSA3MTBcbiAgLy8gVG9yIEJyb3dzZXIgYnVnOiBNYXRoLmFjb3NoKEluZmluaXR5KSAtPiBOYU5cbiAgJiYgJGFjb3NoKEluZmluaXR5KSA9PSBJbmZpbml0eVxuKSwgJ01hdGgnLCB7XG4gIGFjb3NoOiBmdW5jdGlvbiBhY29zaCh4KSB7XG4gICAgcmV0dXJuICh4ID0gK3gpIDwgMSA/IE5hTiA6IHggPiA5NDkwNjI2NS42MjQyNTE1NlxuICAgICAgPyBNYXRoLmxvZyh4KSArIE1hdGguTE4yXG4gICAgICA6IGxvZzFwKHggLSAxICsgc3FydCh4IC0gMSkgKiBzcXJ0KHggKyAxKSk7XG4gIH1cbn0pO1xuIiwiLy8gMjAuMi4yLjUgTWF0aC5hc2luaCh4KVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciAkYXNpbmggPSBNYXRoLmFzaW5oO1xuXG5mdW5jdGlvbiBhc2luaCh4KSB7XG4gIHJldHVybiAhaXNGaW5pdGUoeCA9ICt4KSB8fCB4ID09IDAgPyB4IDogeCA8IDAgPyAtYXNpbmgoLXgpIDogTWF0aC5sb2coeCArIE1hdGguc3FydCh4ICogeCArIDEpKTtcbn1cblxuLy8gVG9yIEJyb3dzZXIgYnVnOiBNYXRoLmFzaW5oKDApIC0+IC0wXG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqICEoJGFzaW5oICYmIDEgLyAkYXNpbmgoMCkgPiAwKSwgJ01hdGgnLCB7IGFzaW5oOiBhc2luaCB9KTtcbiIsIi8vIDIwLjIuMi43IE1hdGguYXRhbmgoeClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgJGF0YW5oID0gTWF0aC5hdGFuaDtcblxuLy8gVG9yIEJyb3dzZXIgYnVnOiBNYXRoLmF0YW5oKC0wKSAtPiAwXG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqICEoJGF0YW5oICYmIDEgLyAkYXRhbmgoLTApIDwgMCksICdNYXRoJywge1xuICBhdGFuaDogZnVuY3Rpb24gYXRhbmgoeCkge1xuICAgIHJldHVybiAoeCA9ICt4KSA9PSAwID8geCA6IE1hdGgubG9nKCgxICsgeCkgLyAoMSAtIHgpKSAvIDI7XG4gIH1cbn0pO1xuIiwiLy8gMjAuMi4yLjkgTWF0aC5jYnJ0KHgpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIHNpZ24gPSByZXF1aXJlKCcuL19tYXRoLXNpZ24nKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdNYXRoJywge1xuICBjYnJ0OiBmdW5jdGlvbiBjYnJ0KHgpIHtcbiAgICByZXR1cm4gc2lnbih4ID0gK3gpICogTWF0aC5wb3coTWF0aC5hYnMoeCksIDEgLyAzKTtcbiAgfVxufSk7XG4iLCIvLyAyMC4yLjIuMTEgTWF0aC5jbHozMih4KVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdNYXRoJywge1xuICBjbHozMjogZnVuY3Rpb24gY2x6MzIoeCkge1xuICAgIHJldHVybiAoeCA+Pj49IDApID8gMzEgLSBNYXRoLmZsb29yKE1hdGgubG9nKHggKyAwLjUpICogTWF0aC5MT0cyRSkgOiAzMjtcbiAgfVxufSk7XG4iLCIvLyAyMC4yLjIuMTIgTWF0aC5jb3NoKHgpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIGV4cCA9IE1hdGguZXhwO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ01hdGgnLCB7XG4gIGNvc2g6IGZ1bmN0aW9uIGNvc2goeCkge1xuICAgIHJldHVybiAoZXhwKHggPSAreCkgKyBleHAoLXgpKSAvIDI7XG4gIH1cbn0pO1xuIiwiLy8gMjAuMi4yLjE0IE1hdGguZXhwbTEoeClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgJGV4cG0xID0gcmVxdWlyZSgnLi9fbWF0aC1leHBtMScpO1xuXG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqICgkZXhwbTEgIT0gTWF0aC5leHBtMSksICdNYXRoJywgeyBleHBtMTogJGV4cG0xIH0pO1xuIiwiLy8gMjAuMi4yLjE2IE1hdGguZnJvdW5kKHgpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ01hdGgnLCB7IGZyb3VuZDogcmVxdWlyZSgnLi9fbWF0aC1mcm91bmQnKSB9KTtcbiIsIi8vIDIwLjIuMi4xNyBNYXRoLmh5cG90KFt2YWx1ZTFbLCB2YWx1ZTJbLCDigKYgXV1dKVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBhYnMgPSBNYXRoLmFicztcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdNYXRoJywge1xuICBoeXBvdDogZnVuY3Rpb24gaHlwb3QodmFsdWUxLCB2YWx1ZTIpIHsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bnVzZWQtdmFyc1xuICAgIHZhciBzdW0gPSAwO1xuICAgIHZhciBpID0gMDtcbiAgICB2YXIgYUxlbiA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gICAgdmFyIGxhcmcgPSAwO1xuICAgIHZhciBhcmcsIGRpdjtcbiAgICB3aGlsZSAoaSA8IGFMZW4pIHtcbiAgICAgIGFyZyA9IGFicyhhcmd1bWVudHNbaSsrXSk7XG4gICAgICBpZiAobGFyZyA8IGFyZykge1xuICAgICAgICBkaXYgPSBsYXJnIC8gYXJnO1xuICAgICAgICBzdW0gPSBzdW0gKiBkaXYgKiBkaXYgKyAxO1xuICAgICAgICBsYXJnID0gYXJnO1xuICAgICAgfSBlbHNlIGlmIChhcmcgPiAwKSB7XG4gICAgICAgIGRpdiA9IGFyZyAvIGxhcmc7XG4gICAgICAgIHN1bSArPSBkaXYgKiBkaXY7XG4gICAgICB9IGVsc2Ugc3VtICs9IGFyZztcbiAgICB9XG4gICAgcmV0dXJuIGxhcmcgPT09IEluZmluaXR5ID8gSW5maW5pdHkgOiBsYXJnICogTWF0aC5zcXJ0KHN1bSk7XG4gIH1cbn0pO1xuIiwiLy8gMjAuMi4yLjE4IE1hdGguaW11bCh4LCB5KVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciAkaW11bCA9IE1hdGguaW11bDtcblxuLy8gc29tZSBXZWJLaXQgdmVyc2lvbnMgZmFpbHMgd2l0aCBiaWcgbnVtYmVycywgc29tZSBoYXMgd3JvbmcgYXJpdHlcbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogcmVxdWlyZSgnLi9fZmFpbHMnKShmdW5jdGlvbiAoKSB7XG4gIHJldHVybiAkaW11bCgweGZmZmZmZmZmLCA1KSAhPSAtNSB8fCAkaW11bC5sZW5ndGggIT0gMjtcbn0pLCAnTWF0aCcsIHtcbiAgaW11bDogZnVuY3Rpb24gaW11bCh4LCB5KSB7XG4gICAgdmFyIFVJTlQxNiA9IDB4ZmZmZjtcbiAgICB2YXIgeG4gPSAreDtcbiAgICB2YXIgeW4gPSAreTtcbiAgICB2YXIgeGwgPSBVSU5UMTYgJiB4bjtcbiAgICB2YXIgeWwgPSBVSU5UMTYgJiB5bjtcbiAgICByZXR1cm4gMCB8IHhsICogeWwgKyAoKFVJTlQxNiAmIHhuID4+PiAxNikgKiB5bCArIHhsICogKFVJTlQxNiAmIHluID4+PiAxNikgPDwgMTYgPj4+IDApO1xuICB9XG59KTtcbiIsIi8vIDIwLjIuMi4yMSBNYXRoLmxvZzEwKHgpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ01hdGgnLCB7XG4gIGxvZzEwOiBmdW5jdGlvbiBsb2cxMCh4KSB7XG4gICAgcmV0dXJuIE1hdGgubG9nKHgpICogTWF0aC5MT0cxMEU7XG4gIH1cbn0pO1xuIiwiLy8gMjAuMi4yLjIwIE1hdGgubG9nMXAoeClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnTWF0aCcsIHsgbG9nMXA6IHJlcXVpcmUoJy4vX21hdGgtbG9nMXAnKSB9KTtcbiIsIi8vIDIwLjIuMi4yMiBNYXRoLmxvZzIoeClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnTWF0aCcsIHtcbiAgbG9nMjogZnVuY3Rpb24gbG9nMih4KSB7XG4gICAgcmV0dXJuIE1hdGgubG9nKHgpIC8gTWF0aC5MTjI7XG4gIH1cbn0pO1xuIiwiLy8gMjAuMi4yLjI4IE1hdGguc2lnbih4KVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdNYXRoJywgeyBzaWduOiByZXF1aXJlKCcuL19tYXRoLXNpZ24nKSB9KTtcbiIsIi8vIDIwLjIuMi4zMCBNYXRoLnNpbmgoeClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgZXhwbTEgPSByZXF1aXJlKCcuL19tYXRoLWV4cG0xJyk7XG52YXIgZXhwID0gTWF0aC5leHA7XG5cbi8vIFY4IG5lYXIgQ2hyb21pdW0gMzggaGFzIGEgcHJvYmxlbSB3aXRoIHZlcnkgc21hbGwgbnVtYmVyc1xuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiByZXF1aXJlKCcuL19mYWlscycpKGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuICFNYXRoLnNpbmgoLTJlLTE3KSAhPSAtMmUtMTc7XG59KSwgJ01hdGgnLCB7XG4gIHNpbmg6IGZ1bmN0aW9uIHNpbmgoeCkge1xuICAgIHJldHVybiBNYXRoLmFicyh4ID0gK3gpIDwgMVxuICAgICAgPyAoZXhwbTEoeCkgLSBleHBtMSgteCkpIC8gMlxuICAgICAgOiAoZXhwKHggLSAxKSAtIGV4cCgteCAtIDEpKSAqIChNYXRoLkUgLyAyKTtcbiAgfVxufSk7XG4iLCIvLyAyMC4yLjIuMzMgTWF0aC50YW5oKHgpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIGV4cG0xID0gcmVxdWlyZSgnLi9fbWF0aC1leHBtMScpO1xudmFyIGV4cCA9IE1hdGguZXhwO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ01hdGgnLCB7XG4gIHRhbmg6IGZ1bmN0aW9uIHRhbmgoeCkge1xuICAgIHZhciBhID0gZXhwbTEoeCA9ICt4KTtcbiAgICB2YXIgYiA9IGV4cG0xKC14KTtcbiAgICByZXR1cm4gYSA9PSBJbmZpbml0eSA/IDEgOiBiID09IEluZmluaXR5ID8gLTEgOiAoYSAtIGIpIC8gKGV4cCh4KSArIGV4cCgteCkpO1xuICB9XG59KTtcbiIsIi8vIDIwLjIuMi4zNCBNYXRoLnRydW5jKHgpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ01hdGgnLCB7XG4gIHRydW5jOiBmdW5jdGlvbiB0cnVuYyhpdCkge1xuICAgIHJldHVybiAoaXQgPiAwID8gTWF0aC5mbG9vciA6IE1hdGguY2VpbCkoaXQpO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuL19nbG9iYWwnKTtcbnZhciBoYXMgPSByZXF1aXJlKCcuL19oYXMnKTtcbnZhciBjb2YgPSByZXF1aXJlKCcuL19jb2YnKTtcbnZhciBpbmhlcml0SWZSZXF1aXJlZCA9IHJlcXVpcmUoJy4vX2luaGVyaXQtaWYtcmVxdWlyZWQnKTtcbnZhciB0b1ByaW1pdGl2ZSA9IHJlcXVpcmUoJy4vX3RvLXByaW1pdGl2ZScpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi9fZmFpbHMnKTtcbnZhciBnT1BOID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcG4nKS5mO1xudmFyIGdPUEQgPSByZXF1aXJlKCcuL19vYmplY3QtZ29wZCcpLmY7XG52YXIgZFAgPSByZXF1aXJlKCcuL19vYmplY3QtZHAnKS5mO1xudmFyICR0cmltID0gcmVxdWlyZSgnLi9fc3RyaW5nLXRyaW0nKS50cmltO1xudmFyIE5VTUJFUiA9ICdOdW1iZXInO1xudmFyICROdW1iZXIgPSBnbG9iYWxbTlVNQkVSXTtcbnZhciBCYXNlID0gJE51bWJlcjtcbnZhciBwcm90byA9ICROdW1iZXIucHJvdG90eXBlO1xuLy8gT3BlcmEgfjEyIGhhcyBicm9rZW4gT2JqZWN0I3RvU3RyaW5nXG52YXIgQlJPS0VOX0NPRiA9IGNvZihyZXF1aXJlKCcuL19vYmplY3QtY3JlYXRlJykocHJvdG8pKSA9PSBOVU1CRVI7XG52YXIgVFJJTSA9ICd0cmltJyBpbiBTdHJpbmcucHJvdG90eXBlO1xuXG4vLyA3LjEuMyBUb051bWJlcihhcmd1bWVudClcbnZhciB0b051bWJlciA9IGZ1bmN0aW9uIChhcmd1bWVudCkge1xuICB2YXIgaXQgPSB0b1ByaW1pdGl2ZShhcmd1bWVudCwgZmFsc2UpO1xuICBpZiAodHlwZW9mIGl0ID09ICdzdHJpbmcnICYmIGl0Lmxlbmd0aCA+IDIpIHtcbiAgICBpdCA9IFRSSU0gPyBpdC50cmltKCkgOiAkdHJpbShpdCwgMyk7XG4gICAgdmFyIGZpcnN0ID0gaXQuY2hhckNvZGVBdCgwKTtcbiAgICB2YXIgdGhpcmQsIHJhZGl4LCBtYXhDb2RlO1xuICAgIGlmIChmaXJzdCA9PT0gNDMgfHwgZmlyc3QgPT09IDQ1KSB7XG4gICAgICB0aGlyZCA9IGl0LmNoYXJDb2RlQXQoMik7XG4gICAgICBpZiAodGhpcmQgPT09IDg4IHx8IHRoaXJkID09PSAxMjApIHJldHVybiBOYU47IC8vIE51bWJlcignKzB4MScpIHNob3VsZCBiZSBOYU4sIG9sZCBWOCBmaXhcbiAgICB9IGVsc2UgaWYgKGZpcnN0ID09PSA0OCkge1xuICAgICAgc3dpdGNoIChpdC5jaGFyQ29kZUF0KDEpKSB7XG4gICAgICAgIGNhc2UgNjY6IGNhc2UgOTg6IHJhZGl4ID0gMjsgbWF4Q29kZSA9IDQ5OyBicmVhazsgLy8gZmFzdCBlcXVhbCAvXjBiWzAxXSskL2lcbiAgICAgICAgY2FzZSA3OTogY2FzZSAxMTE6IHJhZGl4ID0gODsgbWF4Q29kZSA9IDU1OyBicmVhazsgLy8gZmFzdCBlcXVhbCAvXjBvWzAtN10rJC9pXG4gICAgICAgIGRlZmF1bHQ6IHJldHVybiAraXQ7XG4gICAgICB9XG4gICAgICBmb3IgKHZhciBkaWdpdHMgPSBpdC5zbGljZSgyKSwgaSA9IDAsIGwgPSBkaWdpdHMubGVuZ3RoLCBjb2RlOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgIGNvZGUgPSBkaWdpdHMuY2hhckNvZGVBdChpKTtcbiAgICAgICAgLy8gcGFyc2VJbnQgcGFyc2VzIGEgc3RyaW5nIHRvIGEgZmlyc3QgdW5hdmFpbGFibGUgc3ltYm9sXG4gICAgICAgIC8vIGJ1dCBUb051bWJlciBzaG91bGQgcmV0dXJuIE5hTiBpZiBhIHN0cmluZyBjb250YWlucyB1bmF2YWlsYWJsZSBzeW1ib2xzXG4gICAgICAgIGlmIChjb2RlIDwgNDggfHwgY29kZSA+IG1heENvZGUpIHJldHVybiBOYU47XG4gICAgICB9IHJldHVybiBwYXJzZUludChkaWdpdHMsIHJhZGl4KTtcbiAgICB9XG4gIH0gcmV0dXJuICtpdDtcbn07XG5cbmlmICghJE51bWJlcignIDBvMScpIHx8ICEkTnVtYmVyKCcwYjEnKSB8fCAkTnVtYmVyKCcrMHgxJykpIHtcbiAgJE51bWJlciA9IGZ1bmN0aW9uIE51bWJlcih2YWx1ZSkge1xuICAgIHZhciBpdCA9IGFyZ3VtZW50cy5sZW5ndGggPCAxID8gMCA6IHZhbHVlO1xuICAgIHZhciB0aGF0ID0gdGhpcztcbiAgICByZXR1cm4gdGhhdCBpbnN0YW5jZW9mICROdW1iZXJcbiAgICAgIC8vIGNoZWNrIG9uIDEuLmNvbnN0cnVjdG9yKGZvbykgY2FzZVxuICAgICAgJiYgKEJST0tFTl9DT0YgPyBmYWlscyhmdW5jdGlvbiAoKSB7IHByb3RvLnZhbHVlT2YuY2FsbCh0aGF0KTsgfSkgOiBjb2YodGhhdCkgIT0gTlVNQkVSKVxuICAgICAgICA/IGluaGVyaXRJZlJlcXVpcmVkKG5ldyBCYXNlKHRvTnVtYmVyKGl0KSksIHRoYXQsICROdW1iZXIpIDogdG9OdW1iZXIoaXQpO1xuICB9O1xuICBmb3IgKHZhciBrZXlzID0gcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKSA/IGdPUE4oQmFzZSkgOiAoXG4gICAgLy8gRVMzOlxuICAgICdNQVhfVkFMVUUsTUlOX1ZBTFVFLE5hTixORUdBVElWRV9JTkZJTklUWSxQT1NJVElWRV9JTkZJTklUWSwnICtcbiAgICAvLyBFUzYgKGluIGNhc2UsIGlmIG1vZHVsZXMgd2l0aCBFUzYgTnVtYmVyIHN0YXRpY3MgcmVxdWlyZWQgYmVmb3JlKTpcbiAgICAnRVBTSUxPTixpc0Zpbml0ZSxpc0ludGVnZXIsaXNOYU4saXNTYWZlSW50ZWdlcixNQVhfU0FGRV9JTlRFR0VSLCcgK1xuICAgICdNSU5fU0FGRV9JTlRFR0VSLHBhcnNlRmxvYXQscGFyc2VJbnQsaXNJbnRlZ2VyJ1xuICApLnNwbGl0KCcsJyksIGogPSAwLCBrZXk7IGtleXMubGVuZ3RoID4gajsgaisrKSB7XG4gICAgaWYgKGhhcyhCYXNlLCBrZXkgPSBrZXlzW2pdKSAmJiAhaGFzKCROdW1iZXIsIGtleSkpIHtcbiAgICAgIGRQKCROdW1iZXIsIGtleSwgZ09QRChCYXNlLCBrZXkpKTtcbiAgICB9XG4gIH1cbiAgJE51bWJlci5wcm90b3R5cGUgPSBwcm90bztcbiAgcHJvdG8uY29uc3RydWN0b3IgPSAkTnVtYmVyO1xuICByZXF1aXJlKCcuL19yZWRlZmluZScpKGdsb2JhbCwgTlVNQkVSLCAkTnVtYmVyKTtcbn1cbiIsIi8vIDIwLjEuMi4xIE51bWJlci5FUFNJTE9OXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ051bWJlcicsIHsgRVBTSUxPTjogTWF0aC5wb3coMiwgLTUyKSB9KTtcbiIsIi8vIDIwLjEuMi4yIE51bWJlci5pc0Zpbml0ZShudW1iZXIpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIF9pc0Zpbml0ZSA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpLmlzRmluaXRlO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ051bWJlcicsIHtcbiAgaXNGaW5pdGU6IGZ1bmN0aW9uIGlzRmluaXRlKGl0KSB7XG4gICAgcmV0dXJuIHR5cGVvZiBpdCA9PSAnbnVtYmVyJyAmJiBfaXNGaW5pdGUoaXQpO1xuICB9XG59KTtcbiIsIi8vIDIwLjEuMi4zIE51bWJlci5pc0ludGVnZXIobnVtYmVyKVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdOdW1iZXInLCB7IGlzSW50ZWdlcjogcmVxdWlyZSgnLi9faXMtaW50ZWdlcicpIH0pO1xuIiwiLy8gMjAuMS4yLjQgTnVtYmVyLmlzTmFOKG51bWJlcilcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnTnVtYmVyJywge1xuICBpc05hTjogZnVuY3Rpb24gaXNOYU4obnVtYmVyKSB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXNlbGYtY29tcGFyZVxuICAgIHJldHVybiBudW1iZXIgIT0gbnVtYmVyO1xuICB9XG59KTtcbiIsIi8vIDIwLjEuMi41IE51bWJlci5pc1NhZmVJbnRlZ2VyKG51bWJlcilcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgaXNJbnRlZ2VyID0gcmVxdWlyZSgnLi9faXMtaW50ZWdlcicpO1xudmFyIGFicyA9IE1hdGguYWJzO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ051bWJlcicsIHtcbiAgaXNTYWZlSW50ZWdlcjogZnVuY3Rpb24gaXNTYWZlSW50ZWdlcihudW1iZXIpIHtcbiAgICByZXR1cm4gaXNJbnRlZ2VyKG51bWJlcikgJiYgYWJzKG51bWJlcikgPD0gMHgxZmZmZmZmZmZmZmZmZjtcbiAgfVxufSk7XG4iLCIvLyAyMC4xLjIuNiBOdW1iZXIuTUFYX1NBRkVfSU5URUdFUlxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdOdW1iZXInLCB7IE1BWF9TQUZFX0lOVEVHRVI6IDB4MWZmZmZmZmZmZmZmZmYgfSk7XG4iLCIvLyAyMC4xLjIuMTAgTnVtYmVyLk1JTl9TQUZFX0lOVEVHRVJcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnTnVtYmVyJywgeyBNSU5fU0FGRV9JTlRFR0VSOiAtMHgxZmZmZmZmZmZmZmZmZiB9KTtcbiIsInZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgJHBhcnNlRmxvYXQgPSByZXF1aXJlKCcuL19wYXJzZS1mbG9hdCcpO1xuLy8gMjAuMS4yLjEyIE51bWJlci5wYXJzZUZsb2F0KHN0cmluZylcbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogKE51bWJlci5wYXJzZUZsb2F0ICE9ICRwYXJzZUZsb2F0KSwgJ051bWJlcicsIHsgcGFyc2VGbG9hdDogJHBhcnNlRmxvYXQgfSk7XG4iLCJ2YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyICRwYXJzZUludCA9IHJlcXVpcmUoJy4vX3BhcnNlLWludCcpO1xuLy8gMjAuMS4yLjEzIE51bWJlci5wYXJzZUludChzdHJpbmcsIHJhZGl4KVxuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAoTnVtYmVyLnBhcnNlSW50ICE9ICRwYXJzZUludCksICdOdW1iZXInLCB7IHBhcnNlSW50OiAkcGFyc2VJbnQgfSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIHRvSW50ZWdlciA9IHJlcXVpcmUoJy4vX3RvLWludGVnZXInKTtcbnZhciBhTnVtYmVyVmFsdWUgPSByZXF1aXJlKCcuL19hLW51bWJlci12YWx1ZScpO1xudmFyIHJlcGVhdCA9IHJlcXVpcmUoJy4vX3N0cmluZy1yZXBlYXQnKTtcbnZhciAkdG9GaXhlZCA9IDEuMC50b0ZpeGVkO1xudmFyIGZsb29yID0gTWF0aC5mbG9vcjtcbnZhciBkYXRhID0gWzAsIDAsIDAsIDAsIDAsIDBdO1xudmFyIEVSUk9SID0gJ051bWJlci50b0ZpeGVkOiBpbmNvcnJlY3QgaW52b2NhdGlvbiEnO1xudmFyIFpFUk8gPSAnMCc7XG5cbnZhciBtdWx0aXBseSA9IGZ1bmN0aW9uIChuLCBjKSB7XG4gIHZhciBpID0gLTE7XG4gIHZhciBjMiA9IGM7XG4gIHdoaWxlICgrK2kgPCA2KSB7XG4gICAgYzIgKz0gbiAqIGRhdGFbaV07XG4gICAgZGF0YVtpXSA9IGMyICUgMWU3O1xuICAgIGMyID0gZmxvb3IoYzIgLyAxZTcpO1xuICB9XG59O1xudmFyIGRpdmlkZSA9IGZ1bmN0aW9uIChuKSB7XG4gIHZhciBpID0gNjtcbiAgdmFyIGMgPSAwO1xuICB3aGlsZSAoLS1pID49IDApIHtcbiAgICBjICs9IGRhdGFbaV07XG4gICAgZGF0YVtpXSA9IGZsb29yKGMgLyBuKTtcbiAgICBjID0gKGMgJSBuKSAqIDFlNztcbiAgfVxufTtcbnZhciBudW1Ub1N0cmluZyA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIGkgPSA2O1xuICB2YXIgcyA9ICcnO1xuICB3aGlsZSAoLS1pID49IDApIHtcbiAgICBpZiAocyAhPT0gJycgfHwgaSA9PT0gMCB8fCBkYXRhW2ldICE9PSAwKSB7XG4gICAgICB2YXIgdCA9IFN0cmluZyhkYXRhW2ldKTtcbiAgICAgIHMgPSBzID09PSAnJyA/IHQgOiBzICsgcmVwZWF0LmNhbGwoWkVSTywgNyAtIHQubGVuZ3RoKSArIHQ7XG4gICAgfVxuICB9IHJldHVybiBzO1xufTtcbnZhciBwb3cgPSBmdW5jdGlvbiAoeCwgbiwgYWNjKSB7XG4gIHJldHVybiBuID09PSAwID8gYWNjIDogbiAlIDIgPT09IDEgPyBwb3coeCwgbiAtIDEsIGFjYyAqIHgpIDogcG93KHggKiB4LCBuIC8gMiwgYWNjKTtcbn07XG52YXIgbG9nID0gZnVuY3Rpb24gKHgpIHtcbiAgdmFyIG4gPSAwO1xuICB2YXIgeDIgPSB4O1xuICB3aGlsZSAoeDIgPj0gNDA5Nikge1xuICAgIG4gKz0gMTI7XG4gICAgeDIgLz0gNDA5NjtcbiAgfVxuICB3aGlsZSAoeDIgPj0gMikge1xuICAgIG4gKz0gMTtcbiAgICB4MiAvPSAyO1xuICB9IHJldHVybiBuO1xufTtcblxuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiAoISEkdG9GaXhlZCAmJiAoXG4gIDAuMDAwMDgudG9GaXhlZCgzKSAhPT0gJzAuMDAwJyB8fFxuICAwLjkudG9GaXhlZCgwKSAhPT0gJzEnIHx8XG4gIDEuMjU1LnRvRml4ZWQoMikgIT09ICcxLjI1JyB8fFxuICAxMDAwMDAwMDAwMDAwMDAwMTI4LjAudG9GaXhlZCgwKSAhPT0gJzEwMDAwMDAwMDAwMDAwMDAxMjgnXG4pIHx8ICFyZXF1aXJlKCcuL19mYWlscycpKGZ1bmN0aW9uICgpIHtcbiAgLy8gVjggfiBBbmRyb2lkIDQuMy1cbiAgJHRvRml4ZWQuY2FsbCh7fSk7XG59KSksICdOdW1iZXInLCB7XG4gIHRvRml4ZWQ6IGZ1bmN0aW9uIHRvRml4ZWQoZnJhY3Rpb25EaWdpdHMpIHtcbiAgICB2YXIgeCA9IGFOdW1iZXJWYWx1ZSh0aGlzLCBFUlJPUik7XG4gICAgdmFyIGYgPSB0b0ludGVnZXIoZnJhY3Rpb25EaWdpdHMpO1xuICAgIHZhciBzID0gJyc7XG4gICAgdmFyIG0gPSBaRVJPO1xuICAgIHZhciBlLCB6LCBqLCBrO1xuICAgIGlmIChmIDwgMCB8fCBmID4gMjApIHRocm93IFJhbmdlRXJyb3IoRVJST1IpO1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zZWxmLWNvbXBhcmVcbiAgICBpZiAoeCAhPSB4KSByZXR1cm4gJ05hTic7XG4gICAgaWYgKHggPD0gLTFlMjEgfHwgeCA+PSAxZTIxKSByZXR1cm4gU3RyaW5nKHgpO1xuICAgIGlmICh4IDwgMCkge1xuICAgICAgcyA9ICctJztcbiAgICAgIHggPSAteDtcbiAgICB9XG4gICAgaWYgKHggPiAxZS0yMSkge1xuICAgICAgZSA9IGxvZyh4ICogcG93KDIsIDY5LCAxKSkgLSA2OTtcbiAgICAgIHogPSBlIDwgMCA/IHggKiBwb3coMiwgLWUsIDEpIDogeCAvIHBvdygyLCBlLCAxKTtcbiAgICAgIHogKj0gMHgxMDAwMDAwMDAwMDAwMDtcbiAgICAgIGUgPSA1MiAtIGU7XG4gICAgICBpZiAoZSA+IDApIHtcbiAgICAgICAgbXVsdGlwbHkoMCwgeik7XG4gICAgICAgIGogPSBmO1xuICAgICAgICB3aGlsZSAoaiA+PSA3KSB7XG4gICAgICAgICAgbXVsdGlwbHkoMWU3LCAwKTtcbiAgICAgICAgICBqIC09IDc7XG4gICAgICAgIH1cbiAgICAgICAgbXVsdGlwbHkocG93KDEwLCBqLCAxKSwgMCk7XG4gICAgICAgIGogPSBlIC0gMTtcbiAgICAgICAgd2hpbGUgKGogPj0gMjMpIHtcbiAgICAgICAgICBkaXZpZGUoMSA8PCAyMyk7XG4gICAgICAgICAgaiAtPSAyMztcbiAgICAgICAgfVxuICAgICAgICBkaXZpZGUoMSA8PCBqKTtcbiAgICAgICAgbXVsdGlwbHkoMSwgMSk7XG4gICAgICAgIGRpdmlkZSgyKTtcbiAgICAgICAgbSA9IG51bVRvU3RyaW5nKCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBtdWx0aXBseSgwLCB6KTtcbiAgICAgICAgbXVsdGlwbHkoMSA8PCAtZSwgMCk7XG4gICAgICAgIG0gPSBudW1Ub1N0cmluZygpICsgcmVwZWF0LmNhbGwoWkVSTywgZik7XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChmID4gMCkge1xuICAgICAgayA9IG0ubGVuZ3RoO1xuICAgICAgbSA9IHMgKyAoayA8PSBmID8gJzAuJyArIHJlcGVhdC5jYWxsKFpFUk8sIGYgLSBrKSArIG0gOiBtLnNsaWNlKDAsIGsgLSBmKSArICcuJyArIG0uc2xpY2UoayAtIGYpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgbSA9IHMgKyBtO1xuICAgIH0gcmV0dXJuIG07XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciAkZmFpbHMgPSByZXF1aXJlKCcuL19mYWlscycpO1xudmFyIGFOdW1iZXJWYWx1ZSA9IHJlcXVpcmUoJy4vX2EtbnVtYmVyLXZhbHVlJyk7XG52YXIgJHRvUHJlY2lzaW9uID0gMS4wLnRvUHJlY2lzaW9uO1xuXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqICgkZmFpbHMoZnVuY3Rpb24gKCkge1xuICAvLyBJRTctXG4gIHJldHVybiAkdG9QcmVjaXNpb24uY2FsbCgxLCB1bmRlZmluZWQpICE9PSAnMSc7XG59KSB8fCAhJGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgLy8gVjggfiBBbmRyb2lkIDQuMy1cbiAgJHRvUHJlY2lzaW9uLmNhbGwoe30pO1xufSkpLCAnTnVtYmVyJywge1xuICB0b1ByZWNpc2lvbjogZnVuY3Rpb24gdG9QcmVjaXNpb24ocHJlY2lzaW9uKSB7XG4gICAgdmFyIHRoYXQgPSBhTnVtYmVyVmFsdWUodGhpcywgJ051bWJlciN0b1ByZWNpc2lvbjogaW5jb3JyZWN0IGludm9jYXRpb24hJyk7XG4gICAgcmV0dXJuIHByZWNpc2lvbiA9PT0gdW5kZWZpbmVkID8gJHRvUHJlY2lzaW9uLmNhbGwodGhhdCkgOiAkdG9QcmVjaXNpb24uY2FsbCh0aGF0LCBwcmVjaXNpb24pO1xuICB9XG59KTtcbiIsIi8vIDE5LjEuMy4xIE9iamVjdC5hc3NpZ24odGFyZ2V0LCBzb3VyY2UpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiwgJ09iamVjdCcsIHsgYXNzaWduOiByZXF1aXJlKCcuL19vYmplY3QtYXNzaWduJykgfSk7XG4iLCJ2YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuLy8gMTkuMS4yLjIgLyAxNS4yLjMuNSBPYmplY3QuY3JlYXRlKE8gWywgUHJvcGVydGllc10pXG4kZXhwb3J0KCRleHBvcnQuUywgJ09iamVjdCcsIHsgY3JlYXRlOiByZXF1aXJlKCcuL19vYmplY3QtY3JlYXRlJykgfSk7XG4iLCJ2YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuLy8gMTkuMS4yLjMgLyAxNS4yLjMuNyBPYmplY3QuZGVmaW5lUHJvcGVydGllcyhPLCBQcm9wZXJ0aWVzKVxuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAhcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKSwgJ09iamVjdCcsIHsgZGVmaW5lUHJvcGVydGllczogcmVxdWlyZSgnLi9fb2JqZWN0LWRwcycpIH0pO1xuIiwidmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbi8vIDE5LjEuMi40IC8gMTUuMi4zLjYgT2JqZWN0LmRlZmluZVByb3BlcnR5KE8sIFAsIEF0dHJpYnV0ZXMpXG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqICFyZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpLCAnT2JqZWN0JywgeyBkZWZpbmVQcm9wZXJ0eTogcmVxdWlyZSgnLi9fb2JqZWN0LWRwJykuZiB9KTtcbiIsIi8vIDE5LjEuMi41IE9iamVjdC5mcmVlemUoTylcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xudmFyIG1ldGEgPSByZXF1aXJlKCcuL19tZXRhJykub25GcmVlemU7XG5cbnJlcXVpcmUoJy4vX29iamVjdC1zYXAnKSgnZnJlZXplJywgZnVuY3Rpb24gKCRmcmVlemUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIGZyZWV6ZShpdCkge1xuICAgIHJldHVybiAkZnJlZXplICYmIGlzT2JqZWN0KGl0KSA/ICRmcmVlemUobWV0YShpdCkpIDogaXQ7XG4gIH07XG59KTtcbiIsIi8vIDE5LjEuMi42IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoTywgUClcbnZhciB0b0lPYmplY3QgPSByZXF1aXJlKCcuL190by1pb2JqZWN0Jyk7XG52YXIgJGdldE93blByb3BlcnR5RGVzY3JpcHRvciA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BkJykuZjtcblxucmVxdWlyZSgnLi9fb2JqZWN0LXNhcCcpKCdnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3InLCBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoaXQsIGtleSkge1xuICAgIHJldHVybiAkZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHRvSU9iamVjdChpdCksIGtleSk7XG4gIH07XG59KTtcbiIsIi8vIDE5LjEuMi43IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKE8pXG5yZXF1aXJlKCcuL19vYmplY3Qtc2FwJykoJ2dldE93blByb3BlcnR5TmFtZXMnLCBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiByZXF1aXJlKCcuL19vYmplY3QtZ29wbi1leHQnKS5mO1xufSk7XG4iLCIvLyAxOS4xLjIuOSBPYmplY3QuZ2V0UHJvdG90eXBlT2YoTylcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4vX3RvLW9iamVjdCcpO1xudmFyICRnZXRQcm90b3R5cGVPZiA9IHJlcXVpcmUoJy4vX29iamVjdC1ncG8nKTtcblxucmVxdWlyZSgnLi9fb2JqZWN0LXNhcCcpKCdnZXRQcm90b3R5cGVPZicsIGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIGdldFByb3RvdHlwZU9mKGl0KSB7XG4gICAgcmV0dXJuICRnZXRQcm90b3R5cGVPZih0b09iamVjdChpdCkpO1xuICB9O1xufSk7XG4iLCIvLyAxOS4xLjIuMTEgT2JqZWN0LmlzRXh0ZW5zaWJsZShPKVxudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG5cbnJlcXVpcmUoJy4vX29iamVjdC1zYXAnKSgnaXNFeHRlbnNpYmxlJywgZnVuY3Rpb24gKCRpc0V4dGVuc2libGUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIGlzRXh0ZW5zaWJsZShpdCkge1xuICAgIHJldHVybiBpc09iamVjdChpdCkgPyAkaXNFeHRlbnNpYmxlID8gJGlzRXh0ZW5zaWJsZShpdCkgOiB0cnVlIDogZmFsc2U7XG4gIH07XG59KTtcbiIsIi8vIDE5LjEuMi4xMiBPYmplY3QuaXNGcm96ZW4oTylcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xuXG5yZXF1aXJlKCcuL19vYmplY3Qtc2FwJykoJ2lzRnJvemVuJywgZnVuY3Rpb24gKCRpc0Zyb3plbikge1xuICByZXR1cm4gZnVuY3Rpb24gaXNGcm96ZW4oaXQpIHtcbiAgICByZXR1cm4gaXNPYmplY3QoaXQpID8gJGlzRnJvemVuID8gJGlzRnJvemVuKGl0KSA6IGZhbHNlIDogdHJ1ZTtcbiAgfTtcbn0pO1xuIiwiLy8gMTkuMS4yLjEzIE9iamVjdC5pc1NlYWxlZChPKVxudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG5cbnJlcXVpcmUoJy4vX29iamVjdC1zYXAnKSgnaXNTZWFsZWQnLCBmdW5jdGlvbiAoJGlzU2VhbGVkKSB7XG4gIHJldHVybiBmdW5jdGlvbiBpc1NlYWxlZChpdCkge1xuICAgIHJldHVybiBpc09iamVjdChpdCkgPyAkaXNTZWFsZWQgPyAkaXNTZWFsZWQoaXQpIDogZmFsc2UgOiB0cnVlO1xuICB9O1xufSk7XG4iLCIvLyAxOS4xLjMuMTAgT2JqZWN0LmlzKHZhbHVlMSwgdmFsdWUyKVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbiRleHBvcnQoJGV4cG9ydC5TLCAnT2JqZWN0JywgeyBpczogcmVxdWlyZSgnLi9fc2FtZS12YWx1ZScpIH0pO1xuIiwiLy8gMTkuMS4yLjE0IE9iamVjdC5rZXlzKE8pXG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuL190by1vYmplY3QnKTtcbnZhciAka2V5cyA9IHJlcXVpcmUoJy4vX29iamVjdC1rZXlzJyk7XG5cbnJlcXVpcmUoJy4vX29iamVjdC1zYXAnKSgna2V5cycsIGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIGtleXMoaXQpIHtcbiAgICByZXR1cm4gJGtleXModG9PYmplY3QoaXQpKTtcbiAgfTtcbn0pO1xuIiwiLy8gMTkuMS4yLjE1IE9iamVjdC5wcmV2ZW50RXh0ZW5zaW9ucyhPKVxudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG52YXIgbWV0YSA9IHJlcXVpcmUoJy4vX21ldGEnKS5vbkZyZWV6ZTtcblxucmVxdWlyZSgnLi9fb2JqZWN0LXNhcCcpKCdwcmV2ZW50RXh0ZW5zaW9ucycsIGZ1bmN0aW9uICgkcHJldmVudEV4dGVuc2lvbnMpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIHByZXZlbnRFeHRlbnNpb25zKGl0KSB7XG4gICAgcmV0dXJuICRwcmV2ZW50RXh0ZW5zaW9ucyAmJiBpc09iamVjdChpdCkgPyAkcHJldmVudEV4dGVuc2lvbnMobWV0YShpdCkpIDogaXQ7XG4gIH07XG59KTtcbiIsIi8vIDE5LjEuMi4xNyBPYmplY3Quc2VhbChPKVxudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG52YXIgbWV0YSA9IHJlcXVpcmUoJy4vX21ldGEnKS5vbkZyZWV6ZTtcblxucmVxdWlyZSgnLi9fb2JqZWN0LXNhcCcpKCdzZWFsJywgZnVuY3Rpb24gKCRzZWFsKSB7XG4gIHJldHVybiBmdW5jdGlvbiBzZWFsKGl0KSB7XG4gICAgcmV0dXJuICRzZWFsICYmIGlzT2JqZWN0KGl0KSA/ICRzZWFsKG1ldGEoaXQpKSA6IGl0O1xuICB9O1xufSk7XG4iLCIvLyAxOS4xLjMuMTkgT2JqZWN0LnNldFByb3RvdHlwZU9mKE8sIHByb3RvKVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbiRleHBvcnQoJGV4cG9ydC5TLCAnT2JqZWN0JywgeyBzZXRQcm90b3R5cGVPZjogcmVxdWlyZSgnLi9fc2V0LXByb3RvJykuc2V0IH0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gMTkuMS4zLjYgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZygpXG52YXIgY2xhc3NvZiA9IHJlcXVpcmUoJy4vX2NsYXNzb2YnKTtcbnZhciB0ZXN0ID0ge307XG50ZXN0W3JlcXVpcmUoJy4vX3drcycpKCd0b1N0cmluZ1RhZycpXSA9ICd6JztcbmlmICh0ZXN0ICsgJycgIT0gJ1tvYmplY3Qgel0nKSB7XG4gIHJlcXVpcmUoJy4vX3JlZGVmaW5lJykoT2JqZWN0LnByb3RvdHlwZSwgJ3RvU3RyaW5nJywgZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gICAgcmV0dXJuICdbb2JqZWN0ICcgKyBjbGFzc29mKHRoaXMpICsgJ10nO1xuICB9LCB0cnVlKTtcbn1cbiIsInZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgJHBhcnNlRmxvYXQgPSByZXF1aXJlKCcuL19wYXJzZS1mbG9hdCcpO1xuLy8gMTguMi40IHBhcnNlRmxvYXQoc3RyaW5nKVxuJGV4cG9ydCgkZXhwb3J0LkcgKyAkZXhwb3J0LkYgKiAocGFyc2VGbG9hdCAhPSAkcGFyc2VGbG9hdCksIHsgcGFyc2VGbG9hdDogJHBhcnNlRmxvYXQgfSk7XG4iLCJ2YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyICRwYXJzZUludCA9IHJlcXVpcmUoJy4vX3BhcnNlLWludCcpO1xuLy8gMTguMi41IHBhcnNlSW50KHN0cmluZywgcmFkaXgpXG4kZXhwb3J0KCRleHBvcnQuRyArICRleHBvcnQuRiAqIChwYXJzZUludCAhPSAkcGFyc2VJbnQpLCB7IHBhcnNlSW50OiAkcGFyc2VJbnQgfSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgTElCUkFSWSA9IHJlcXVpcmUoJy4vX2xpYnJhcnknKTtcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuL19nbG9iYWwnKTtcbnZhciBjdHggPSByZXF1aXJlKCcuL19jdHgnKTtcbnZhciBjbGFzc29mID0gcmVxdWlyZSgnLi9fY2xhc3NvZicpO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xudmFyIGFGdW5jdGlvbiA9IHJlcXVpcmUoJy4vX2EtZnVuY3Rpb24nKTtcbnZhciBhbkluc3RhbmNlID0gcmVxdWlyZSgnLi9fYW4taW5zdGFuY2UnKTtcbnZhciBmb3JPZiA9IHJlcXVpcmUoJy4vX2Zvci1vZicpO1xudmFyIHNwZWNpZXNDb25zdHJ1Y3RvciA9IHJlcXVpcmUoJy4vX3NwZWNpZXMtY29uc3RydWN0b3InKTtcbnZhciB0YXNrID0gcmVxdWlyZSgnLi9fdGFzaycpLnNldDtcbnZhciBtaWNyb3Rhc2sgPSByZXF1aXJlKCcuL19taWNyb3Rhc2snKSgpO1xudmFyIG5ld1Byb21pc2VDYXBhYmlsaXR5TW9kdWxlID0gcmVxdWlyZSgnLi9fbmV3LXByb21pc2UtY2FwYWJpbGl0eScpO1xudmFyIHBlcmZvcm0gPSByZXF1aXJlKCcuL19wZXJmb3JtJyk7XG52YXIgdXNlckFnZW50ID0gcmVxdWlyZSgnLi9fdXNlci1hZ2VudCcpO1xudmFyIHByb21pc2VSZXNvbHZlID0gcmVxdWlyZSgnLi9fcHJvbWlzZS1yZXNvbHZlJyk7XG52YXIgUFJPTUlTRSA9ICdQcm9taXNlJztcbnZhciBUeXBlRXJyb3IgPSBnbG9iYWwuVHlwZUVycm9yO1xudmFyIHByb2Nlc3MgPSBnbG9iYWwucHJvY2VzcztcbnZhciB2ZXJzaW9ucyA9IHByb2Nlc3MgJiYgcHJvY2Vzcy52ZXJzaW9ucztcbnZhciB2OCA9IHZlcnNpb25zICYmIHZlcnNpb25zLnY4IHx8ICcnO1xudmFyICRQcm9taXNlID0gZ2xvYmFsW1BST01JU0VdO1xudmFyIGlzTm9kZSA9IGNsYXNzb2YocHJvY2VzcykgPT0gJ3Byb2Nlc3MnO1xudmFyIGVtcHR5ID0gZnVuY3Rpb24gKCkgeyAvKiBlbXB0eSAqLyB9O1xudmFyIEludGVybmFsLCBuZXdHZW5lcmljUHJvbWlzZUNhcGFiaWxpdHksIE93blByb21pc2VDYXBhYmlsaXR5LCBXcmFwcGVyO1xudmFyIG5ld1Byb21pc2VDYXBhYmlsaXR5ID0gbmV3R2VuZXJpY1Byb21pc2VDYXBhYmlsaXR5ID0gbmV3UHJvbWlzZUNhcGFiaWxpdHlNb2R1bGUuZjtcblxudmFyIFVTRV9OQVRJVkUgPSAhIWZ1bmN0aW9uICgpIHtcbiAgdHJ5IHtcbiAgICAvLyBjb3JyZWN0IHN1YmNsYXNzaW5nIHdpdGggQEBzcGVjaWVzIHN1cHBvcnRcbiAgICB2YXIgcHJvbWlzZSA9ICRQcm9taXNlLnJlc29sdmUoMSk7XG4gICAgdmFyIEZha2VQcm9taXNlID0gKHByb21pc2UuY29uc3RydWN0b3IgPSB7fSlbcmVxdWlyZSgnLi9fd2tzJykoJ3NwZWNpZXMnKV0gPSBmdW5jdGlvbiAoZXhlYykge1xuICAgICAgZXhlYyhlbXB0eSwgZW1wdHkpO1xuICAgIH07XG4gICAgLy8gdW5oYW5kbGVkIHJlamVjdGlvbnMgdHJhY2tpbmcgc3VwcG9ydCwgTm9kZUpTIFByb21pc2Ugd2l0aG91dCBpdCBmYWlscyBAQHNwZWNpZXMgdGVzdFxuICAgIHJldHVybiAoaXNOb2RlIHx8IHR5cGVvZiBQcm9taXNlUmVqZWN0aW9uRXZlbnQgPT0gJ2Z1bmN0aW9uJylcbiAgICAgICYmIHByb21pc2UudGhlbihlbXB0eSkgaW5zdGFuY2VvZiBGYWtlUHJvbWlzZVxuICAgICAgLy8gdjggNi42IChOb2RlIDEwIGFuZCBDaHJvbWUgNjYpIGhhdmUgYSBidWcgd2l0aCByZXNvbHZpbmcgY3VzdG9tIHRoZW5hYmxlc1xuICAgICAgLy8gaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL2Nocm9taXVtL2lzc3Vlcy9kZXRhaWw/aWQ9ODMwNTY1XG4gICAgICAvLyB3ZSBjYW4ndCBkZXRlY3QgaXQgc3luY2hyb25vdXNseSwgc28ganVzdCBjaGVjayB2ZXJzaW9uc1xuICAgICAgJiYgdjguaW5kZXhPZignNi42JykgIT09IDBcbiAgICAgICYmIHVzZXJBZ2VudC5pbmRleE9mKCdDaHJvbWUvNjYnKSA9PT0gLTE7XG4gIH0gY2F0Y2ggKGUpIHsgLyogZW1wdHkgKi8gfVxufSgpO1xuXG4vLyBoZWxwZXJzXG52YXIgaXNUaGVuYWJsZSA9IGZ1bmN0aW9uIChpdCkge1xuICB2YXIgdGhlbjtcbiAgcmV0dXJuIGlzT2JqZWN0KGl0KSAmJiB0eXBlb2YgKHRoZW4gPSBpdC50aGVuKSA9PSAnZnVuY3Rpb24nID8gdGhlbiA6IGZhbHNlO1xufTtcbnZhciBub3RpZnkgPSBmdW5jdGlvbiAocHJvbWlzZSwgaXNSZWplY3QpIHtcbiAgaWYgKHByb21pc2UuX24pIHJldHVybjtcbiAgcHJvbWlzZS5fbiA9IHRydWU7XG4gIHZhciBjaGFpbiA9IHByb21pc2UuX2M7XG4gIG1pY3JvdGFzayhmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHZhbHVlID0gcHJvbWlzZS5fdjtcbiAgICB2YXIgb2sgPSBwcm9taXNlLl9zID09IDE7XG4gICAgdmFyIGkgPSAwO1xuICAgIHZhciBydW4gPSBmdW5jdGlvbiAocmVhY3Rpb24pIHtcbiAgICAgIHZhciBoYW5kbGVyID0gb2sgPyByZWFjdGlvbi5vayA6IHJlYWN0aW9uLmZhaWw7XG4gICAgICB2YXIgcmVzb2x2ZSA9IHJlYWN0aW9uLnJlc29sdmU7XG4gICAgICB2YXIgcmVqZWN0ID0gcmVhY3Rpb24ucmVqZWN0O1xuICAgICAgdmFyIGRvbWFpbiA9IHJlYWN0aW9uLmRvbWFpbjtcbiAgICAgIHZhciByZXN1bHQsIHRoZW4sIGV4aXRlZDtcbiAgICAgIHRyeSB7XG4gICAgICAgIGlmIChoYW5kbGVyKSB7XG4gICAgICAgICAgaWYgKCFvaykge1xuICAgICAgICAgICAgaWYgKHByb21pc2UuX2ggPT0gMikgb25IYW5kbGVVbmhhbmRsZWQocHJvbWlzZSk7XG4gICAgICAgICAgICBwcm9taXNlLl9oID0gMTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKGhhbmRsZXIgPT09IHRydWUpIHJlc3VsdCA9IHZhbHVlO1xuICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgaWYgKGRvbWFpbikgZG9tYWluLmVudGVyKCk7XG4gICAgICAgICAgICByZXN1bHQgPSBoYW5kbGVyKHZhbHVlKTsgLy8gbWF5IHRocm93XG4gICAgICAgICAgICBpZiAoZG9tYWluKSB7XG4gICAgICAgICAgICAgIGRvbWFpbi5leGl0KCk7XG4gICAgICAgICAgICAgIGV4aXRlZCA9IHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChyZXN1bHQgPT09IHJlYWN0aW9uLnByb21pc2UpIHtcbiAgICAgICAgICAgIHJlamVjdChUeXBlRXJyb3IoJ1Byb21pc2UtY2hhaW4gY3ljbGUnKSk7XG4gICAgICAgICAgfSBlbHNlIGlmICh0aGVuID0gaXNUaGVuYWJsZShyZXN1bHQpKSB7XG4gICAgICAgICAgICB0aGVuLmNhbGwocmVzdWx0LCByZXNvbHZlLCByZWplY3QpO1xuICAgICAgICAgIH0gZWxzZSByZXNvbHZlKHJlc3VsdCk7XG4gICAgICAgIH0gZWxzZSByZWplY3QodmFsdWUpO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBpZiAoZG9tYWluICYmICFleGl0ZWQpIGRvbWFpbi5leGl0KCk7XG4gICAgICAgIHJlamVjdChlKTtcbiAgICAgIH1cbiAgICB9O1xuICAgIHdoaWxlIChjaGFpbi5sZW5ndGggPiBpKSBydW4oY2hhaW5baSsrXSk7IC8vIHZhcmlhYmxlIGxlbmd0aCAtIGNhbid0IHVzZSBmb3JFYWNoXG4gICAgcHJvbWlzZS5fYyA9IFtdO1xuICAgIHByb21pc2UuX24gPSBmYWxzZTtcbiAgICBpZiAoaXNSZWplY3QgJiYgIXByb21pc2UuX2gpIG9uVW5oYW5kbGVkKHByb21pc2UpO1xuICB9KTtcbn07XG52YXIgb25VbmhhbmRsZWQgPSBmdW5jdGlvbiAocHJvbWlzZSkge1xuICB0YXNrLmNhbGwoZ2xvYmFsLCBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHZhbHVlID0gcHJvbWlzZS5fdjtcbiAgICB2YXIgdW5oYW5kbGVkID0gaXNVbmhhbmRsZWQocHJvbWlzZSk7XG4gICAgdmFyIHJlc3VsdCwgaGFuZGxlciwgY29uc29sZTtcbiAgICBpZiAodW5oYW5kbGVkKSB7XG4gICAgICByZXN1bHQgPSBwZXJmb3JtKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKGlzTm9kZSkge1xuICAgICAgICAgIHByb2Nlc3MuZW1pdCgndW5oYW5kbGVkUmVqZWN0aW9uJywgdmFsdWUsIHByb21pc2UpO1xuICAgICAgICB9IGVsc2UgaWYgKGhhbmRsZXIgPSBnbG9iYWwub251bmhhbmRsZWRyZWplY3Rpb24pIHtcbiAgICAgICAgICBoYW5kbGVyKHsgcHJvbWlzZTogcHJvbWlzZSwgcmVhc29uOiB2YWx1ZSB9KTtcbiAgICAgICAgfSBlbHNlIGlmICgoY29uc29sZSA9IGdsb2JhbC5jb25zb2xlKSAmJiBjb25zb2xlLmVycm9yKSB7XG4gICAgICAgICAgY29uc29sZS5lcnJvcignVW5oYW5kbGVkIHByb21pc2UgcmVqZWN0aW9uJywgdmFsdWUpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIC8vIEJyb3dzZXJzIHNob3VsZCBub3QgdHJpZ2dlciBgcmVqZWN0aW9uSGFuZGxlZGAgZXZlbnQgaWYgaXQgd2FzIGhhbmRsZWQgaGVyZSwgTm9kZUpTIC0gc2hvdWxkXG4gICAgICBwcm9taXNlLl9oID0gaXNOb2RlIHx8IGlzVW5oYW5kbGVkKHByb21pc2UpID8gMiA6IDE7XG4gICAgfSBwcm9taXNlLl9hID0gdW5kZWZpbmVkO1xuICAgIGlmICh1bmhhbmRsZWQgJiYgcmVzdWx0LmUpIHRocm93IHJlc3VsdC52O1xuICB9KTtcbn07XG52YXIgaXNVbmhhbmRsZWQgPSBmdW5jdGlvbiAocHJvbWlzZSkge1xuICByZXR1cm4gcHJvbWlzZS5faCAhPT0gMSAmJiAocHJvbWlzZS5fYSB8fCBwcm9taXNlLl9jKS5sZW5ndGggPT09IDA7XG59O1xudmFyIG9uSGFuZGxlVW5oYW5kbGVkID0gZnVuY3Rpb24gKHByb21pc2UpIHtcbiAgdGFzay5jYWxsKGdsb2JhbCwgZnVuY3Rpb24gKCkge1xuICAgIHZhciBoYW5kbGVyO1xuICAgIGlmIChpc05vZGUpIHtcbiAgICAgIHByb2Nlc3MuZW1pdCgncmVqZWN0aW9uSGFuZGxlZCcsIHByb21pc2UpO1xuICAgIH0gZWxzZSBpZiAoaGFuZGxlciA9IGdsb2JhbC5vbnJlamVjdGlvbmhhbmRsZWQpIHtcbiAgICAgIGhhbmRsZXIoeyBwcm9taXNlOiBwcm9taXNlLCByZWFzb246IHByb21pc2UuX3YgfSk7XG4gICAgfVxuICB9KTtcbn07XG52YXIgJHJlamVjdCA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICB2YXIgcHJvbWlzZSA9IHRoaXM7XG4gIGlmIChwcm9taXNlLl9kKSByZXR1cm47XG4gIHByb21pc2UuX2QgPSB0cnVlO1xuICBwcm9taXNlID0gcHJvbWlzZS5fdyB8fCBwcm9taXNlOyAvLyB1bndyYXBcbiAgcHJvbWlzZS5fdiA9IHZhbHVlO1xuICBwcm9taXNlLl9zID0gMjtcbiAgaWYgKCFwcm9taXNlLl9hKSBwcm9taXNlLl9hID0gcHJvbWlzZS5fYy5zbGljZSgpO1xuICBub3RpZnkocHJvbWlzZSwgdHJ1ZSk7XG59O1xudmFyICRyZXNvbHZlID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gIHZhciBwcm9taXNlID0gdGhpcztcbiAgdmFyIHRoZW47XG4gIGlmIChwcm9taXNlLl9kKSByZXR1cm47XG4gIHByb21pc2UuX2QgPSB0cnVlO1xuICBwcm9taXNlID0gcHJvbWlzZS5fdyB8fCBwcm9taXNlOyAvLyB1bndyYXBcbiAgdHJ5IHtcbiAgICBpZiAocHJvbWlzZSA9PT0gdmFsdWUpIHRocm93IFR5cGVFcnJvcihcIlByb21pc2UgY2FuJ3QgYmUgcmVzb2x2ZWQgaXRzZWxmXCIpO1xuICAgIGlmICh0aGVuID0gaXNUaGVuYWJsZSh2YWx1ZSkpIHtcbiAgICAgIG1pY3JvdGFzayhmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciB3cmFwcGVyID0geyBfdzogcHJvbWlzZSwgX2Q6IGZhbHNlIH07IC8vIHdyYXBcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICB0aGVuLmNhbGwodmFsdWUsIGN0eCgkcmVzb2x2ZSwgd3JhcHBlciwgMSksIGN0eCgkcmVqZWN0LCB3cmFwcGVyLCAxKSk7XG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAkcmVqZWN0LmNhbGwod3JhcHBlciwgZSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICBwcm9taXNlLl92ID0gdmFsdWU7XG4gICAgICBwcm9taXNlLl9zID0gMTtcbiAgICAgIG5vdGlmeShwcm9taXNlLCBmYWxzZSk7XG4gICAgfVxuICB9IGNhdGNoIChlKSB7XG4gICAgJHJlamVjdC5jYWxsKHsgX3c6IHByb21pc2UsIF9kOiBmYWxzZSB9LCBlKTsgLy8gd3JhcFxuICB9XG59O1xuXG4vLyBjb25zdHJ1Y3RvciBwb2x5ZmlsbFxuaWYgKCFVU0VfTkFUSVZFKSB7XG4gIC8vIDI1LjQuMy4xIFByb21pc2UoZXhlY3V0b3IpXG4gICRQcm9taXNlID0gZnVuY3Rpb24gUHJvbWlzZShleGVjdXRvcikge1xuICAgIGFuSW5zdGFuY2UodGhpcywgJFByb21pc2UsIFBST01JU0UsICdfaCcpO1xuICAgIGFGdW5jdGlvbihleGVjdXRvcik7XG4gICAgSW50ZXJuYWwuY2FsbCh0aGlzKTtcbiAgICB0cnkge1xuICAgICAgZXhlY3V0b3IoY3R4KCRyZXNvbHZlLCB0aGlzLCAxKSwgY3R4KCRyZWplY3QsIHRoaXMsIDEpKTtcbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICRyZWplY3QuY2FsbCh0aGlzLCBlcnIpO1xuICAgIH1cbiAgfTtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVudXNlZC12YXJzXG4gIEludGVybmFsID0gZnVuY3Rpb24gUHJvbWlzZShleGVjdXRvcikge1xuICAgIHRoaXMuX2MgPSBbXTsgICAgICAgICAgICAgLy8gPC0gYXdhaXRpbmcgcmVhY3Rpb25zXG4gICAgdGhpcy5fYSA9IHVuZGVmaW5lZDsgICAgICAvLyA8LSBjaGVja2VkIGluIGlzVW5oYW5kbGVkIHJlYWN0aW9uc1xuICAgIHRoaXMuX3MgPSAwOyAgICAgICAgICAgICAgLy8gPC0gc3RhdGVcbiAgICB0aGlzLl9kID0gZmFsc2U7ICAgICAgICAgIC8vIDwtIGRvbmVcbiAgICB0aGlzLl92ID0gdW5kZWZpbmVkOyAgICAgIC8vIDwtIHZhbHVlXG4gICAgdGhpcy5faCA9IDA7ICAgICAgICAgICAgICAvLyA8LSByZWplY3Rpb24gc3RhdGUsIDAgLSBkZWZhdWx0LCAxIC0gaGFuZGxlZCwgMiAtIHVuaGFuZGxlZFxuICAgIHRoaXMuX24gPSBmYWxzZTsgICAgICAgICAgLy8gPC0gbm90aWZ5XG4gIH07XG4gIEludGVybmFsLnByb3RvdHlwZSA9IHJlcXVpcmUoJy4vX3JlZGVmaW5lLWFsbCcpKCRQcm9taXNlLnByb3RvdHlwZSwge1xuICAgIC8vIDI1LjQuNS4zIFByb21pc2UucHJvdG90eXBlLnRoZW4ob25GdWxmaWxsZWQsIG9uUmVqZWN0ZWQpXG4gICAgdGhlbjogZnVuY3Rpb24gdGhlbihvbkZ1bGZpbGxlZCwgb25SZWplY3RlZCkge1xuICAgICAgdmFyIHJlYWN0aW9uID0gbmV3UHJvbWlzZUNhcGFiaWxpdHkoc3BlY2llc0NvbnN0cnVjdG9yKHRoaXMsICRQcm9taXNlKSk7XG4gICAgICByZWFjdGlvbi5vayA9IHR5cGVvZiBvbkZ1bGZpbGxlZCA9PSAnZnVuY3Rpb24nID8gb25GdWxmaWxsZWQgOiB0cnVlO1xuICAgICAgcmVhY3Rpb24uZmFpbCA9IHR5cGVvZiBvblJlamVjdGVkID09ICdmdW5jdGlvbicgJiYgb25SZWplY3RlZDtcbiAgICAgIHJlYWN0aW9uLmRvbWFpbiA9IGlzTm9kZSA/IHByb2Nlc3MuZG9tYWluIDogdW5kZWZpbmVkO1xuICAgICAgdGhpcy5fYy5wdXNoKHJlYWN0aW9uKTtcbiAgICAgIGlmICh0aGlzLl9hKSB0aGlzLl9hLnB1c2gocmVhY3Rpb24pO1xuICAgICAgaWYgKHRoaXMuX3MpIG5vdGlmeSh0aGlzLCBmYWxzZSk7XG4gICAgICByZXR1cm4gcmVhY3Rpb24ucHJvbWlzZTtcbiAgICB9LFxuICAgIC8vIDI1LjQuNS4xIFByb21pc2UucHJvdG90eXBlLmNhdGNoKG9uUmVqZWN0ZWQpXG4gICAgJ2NhdGNoJzogZnVuY3Rpb24gKG9uUmVqZWN0ZWQpIHtcbiAgICAgIHJldHVybiB0aGlzLnRoZW4odW5kZWZpbmVkLCBvblJlamVjdGVkKTtcbiAgICB9XG4gIH0pO1xuICBPd25Qcm9taXNlQ2FwYWJpbGl0eSA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgcHJvbWlzZSA9IG5ldyBJbnRlcm5hbCgpO1xuICAgIHRoaXMucHJvbWlzZSA9IHByb21pc2U7XG4gICAgdGhpcy5yZXNvbHZlID0gY3R4KCRyZXNvbHZlLCBwcm9taXNlLCAxKTtcbiAgICB0aGlzLnJlamVjdCA9IGN0eCgkcmVqZWN0LCBwcm9taXNlLCAxKTtcbiAgfTtcbiAgbmV3UHJvbWlzZUNhcGFiaWxpdHlNb2R1bGUuZiA9IG5ld1Byb21pc2VDYXBhYmlsaXR5ID0gZnVuY3Rpb24gKEMpIHtcbiAgICByZXR1cm4gQyA9PT0gJFByb21pc2UgfHwgQyA9PT0gV3JhcHBlclxuICAgICAgPyBuZXcgT3duUHJvbWlzZUNhcGFiaWxpdHkoQylcbiAgICAgIDogbmV3R2VuZXJpY1Byb21pc2VDYXBhYmlsaXR5KEMpO1xuICB9O1xufVxuXG4kZXhwb3J0KCRleHBvcnQuRyArICRleHBvcnQuVyArICRleHBvcnQuRiAqICFVU0VfTkFUSVZFLCB7IFByb21pc2U6ICRQcm9taXNlIH0pO1xucmVxdWlyZSgnLi9fc2V0LXRvLXN0cmluZy10YWcnKSgkUHJvbWlzZSwgUFJPTUlTRSk7XG5yZXF1aXJlKCcuL19zZXQtc3BlY2llcycpKFBST01JU0UpO1xuV3JhcHBlciA9IHJlcXVpcmUoJy4vX2NvcmUnKVtQUk9NSVNFXTtcblxuLy8gc3RhdGljc1xuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAhVVNFX05BVElWRSwgUFJPTUlTRSwge1xuICAvLyAyNS40LjQuNSBQcm9taXNlLnJlamVjdChyKVxuICByZWplY3Q6IGZ1bmN0aW9uIHJlamVjdChyKSB7XG4gICAgdmFyIGNhcGFiaWxpdHkgPSBuZXdQcm9taXNlQ2FwYWJpbGl0eSh0aGlzKTtcbiAgICB2YXIgJCRyZWplY3QgPSBjYXBhYmlsaXR5LnJlamVjdDtcbiAgICAkJHJlamVjdChyKTtcbiAgICByZXR1cm4gY2FwYWJpbGl0eS5wcm9taXNlO1xuICB9XG59KTtcbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogKExJQlJBUlkgfHwgIVVTRV9OQVRJVkUpLCBQUk9NSVNFLCB7XG4gIC8vIDI1LjQuNC42IFByb21pc2UucmVzb2x2ZSh4KVxuICByZXNvbHZlOiBmdW5jdGlvbiByZXNvbHZlKHgpIHtcbiAgICByZXR1cm4gcHJvbWlzZVJlc29sdmUoTElCUkFSWSAmJiB0aGlzID09PSBXcmFwcGVyID8gJFByb21pc2UgOiB0aGlzLCB4KTtcbiAgfVxufSk7XG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqICEoVVNFX05BVElWRSAmJiByZXF1aXJlKCcuL19pdGVyLWRldGVjdCcpKGZ1bmN0aW9uIChpdGVyKSB7XG4gICRQcm9taXNlLmFsbChpdGVyKVsnY2F0Y2gnXShlbXB0eSk7XG59KSksIFBST01JU0UsIHtcbiAgLy8gMjUuNC40LjEgUHJvbWlzZS5hbGwoaXRlcmFibGUpXG4gIGFsbDogZnVuY3Rpb24gYWxsKGl0ZXJhYmxlKSB7XG4gICAgdmFyIEMgPSB0aGlzO1xuICAgIHZhciBjYXBhYmlsaXR5ID0gbmV3UHJvbWlzZUNhcGFiaWxpdHkoQyk7XG4gICAgdmFyIHJlc29sdmUgPSBjYXBhYmlsaXR5LnJlc29sdmU7XG4gICAgdmFyIHJlamVjdCA9IGNhcGFiaWxpdHkucmVqZWN0O1xuICAgIHZhciByZXN1bHQgPSBwZXJmb3JtKGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciB2YWx1ZXMgPSBbXTtcbiAgICAgIHZhciBpbmRleCA9IDA7XG4gICAgICB2YXIgcmVtYWluaW5nID0gMTtcbiAgICAgIGZvck9mKGl0ZXJhYmxlLCBmYWxzZSwgZnVuY3Rpb24gKHByb21pc2UpIHtcbiAgICAgICAgdmFyICRpbmRleCA9IGluZGV4Kys7XG4gICAgICAgIHZhciBhbHJlYWR5Q2FsbGVkID0gZmFsc2U7XG4gICAgICAgIHZhbHVlcy5wdXNoKHVuZGVmaW5lZCk7XG4gICAgICAgIHJlbWFpbmluZysrO1xuICAgICAgICBDLnJlc29sdmUocHJvbWlzZSkudGhlbihmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICBpZiAoYWxyZWFkeUNhbGxlZCkgcmV0dXJuO1xuICAgICAgICAgIGFscmVhZHlDYWxsZWQgPSB0cnVlO1xuICAgICAgICAgIHZhbHVlc1skaW5kZXhdID0gdmFsdWU7XG4gICAgICAgICAgLS1yZW1haW5pbmcgfHwgcmVzb2x2ZSh2YWx1ZXMpO1xuICAgICAgICB9LCByZWplY3QpO1xuICAgICAgfSk7XG4gICAgICAtLXJlbWFpbmluZyB8fCByZXNvbHZlKHZhbHVlcyk7XG4gICAgfSk7XG4gICAgaWYgKHJlc3VsdC5lKSByZWplY3QocmVzdWx0LnYpO1xuICAgIHJldHVybiBjYXBhYmlsaXR5LnByb21pc2U7XG4gIH0sXG4gIC8vIDI1LjQuNC40IFByb21pc2UucmFjZShpdGVyYWJsZSlcbiAgcmFjZTogZnVuY3Rpb24gcmFjZShpdGVyYWJsZSkge1xuICAgIHZhciBDID0gdGhpcztcbiAgICB2YXIgY2FwYWJpbGl0eSA9IG5ld1Byb21pc2VDYXBhYmlsaXR5KEMpO1xuICAgIHZhciByZWplY3QgPSBjYXBhYmlsaXR5LnJlamVjdDtcbiAgICB2YXIgcmVzdWx0ID0gcGVyZm9ybShmdW5jdGlvbiAoKSB7XG4gICAgICBmb3JPZihpdGVyYWJsZSwgZmFsc2UsIGZ1bmN0aW9uIChwcm9taXNlKSB7XG4gICAgICAgIEMucmVzb2x2ZShwcm9taXNlKS50aGVuKGNhcGFiaWxpdHkucmVzb2x2ZSwgcmVqZWN0KTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICAgIGlmIChyZXN1bHQuZSkgcmVqZWN0KHJlc3VsdC52KTtcbiAgICByZXR1cm4gY2FwYWJpbGl0eS5wcm9taXNlO1xuICB9XG59KTtcbiIsIi8vIDI2LjEuMSBSZWZsZWN0LmFwcGx5KHRhcmdldCwgdGhpc0FyZ3VtZW50LCBhcmd1bWVudHNMaXN0KVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBhRnVuY3Rpb24gPSByZXF1aXJlKCcuL19hLWZ1bmN0aW9uJyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciByQXBwbHkgPSAocmVxdWlyZSgnLi9fZ2xvYmFsJykuUmVmbGVjdCB8fCB7fSkuYXBwbHk7XG52YXIgZkFwcGx5ID0gRnVuY3Rpb24uYXBwbHk7XG4vLyBNUyBFZGdlIGFyZ3VtZW50c0xpc3QgYXJndW1lbnQgaXMgb3B0aW9uYWxcbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogIXJlcXVpcmUoJy4vX2ZhaWxzJykoZnVuY3Rpb24gKCkge1xuICByQXBwbHkoZnVuY3Rpb24gKCkgeyAvKiBlbXB0eSAqLyB9KTtcbn0pLCAnUmVmbGVjdCcsIHtcbiAgYXBwbHk6IGZ1bmN0aW9uIGFwcGx5KHRhcmdldCwgdGhpc0FyZ3VtZW50LCBhcmd1bWVudHNMaXN0KSB7XG4gICAgdmFyIFQgPSBhRnVuY3Rpb24odGFyZ2V0KTtcbiAgICB2YXIgTCA9IGFuT2JqZWN0KGFyZ3VtZW50c0xpc3QpO1xuICAgIHJldHVybiByQXBwbHkgPyByQXBwbHkoVCwgdGhpc0FyZ3VtZW50LCBMKSA6IGZBcHBseS5jYWxsKFQsIHRoaXNBcmd1bWVudCwgTCk7XG4gIH1cbn0pO1xuIiwiLy8gMjYuMS4yIFJlZmxlY3QuY29uc3RydWN0KHRhcmdldCwgYXJndW1lbnRzTGlzdCBbLCBuZXdUYXJnZXRdKVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBjcmVhdGUgPSByZXF1aXJlKCcuL19vYmplY3QtY3JlYXRlJyk7XG52YXIgYUZ1bmN0aW9uID0gcmVxdWlyZSgnLi9fYS1mdW5jdGlvbicpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4vX2ZhaWxzJyk7XG52YXIgYmluZCA9IHJlcXVpcmUoJy4vX2JpbmQnKTtcbnZhciByQ29uc3RydWN0ID0gKHJlcXVpcmUoJy4vX2dsb2JhbCcpLlJlZmxlY3QgfHwge30pLmNvbnN0cnVjdDtcblxuLy8gTVMgRWRnZSBzdXBwb3J0cyBvbmx5IDIgYXJndW1lbnRzIGFuZCBhcmd1bWVudHNMaXN0IGFyZ3VtZW50IGlzIG9wdGlvbmFsXG4vLyBGRiBOaWdodGx5IHNldHMgdGhpcmQgYXJndW1lbnQgYXMgYG5ldy50YXJnZXRgLCBidXQgZG9lcyBub3QgY3JlYXRlIGB0aGlzYCBmcm9tIGl0XG52YXIgTkVXX1RBUkdFVF9CVUcgPSBmYWlscyhmdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIEYoKSB7IC8qIGVtcHR5ICovIH1cbiAgcmV0dXJuICEockNvbnN0cnVjdChmdW5jdGlvbiAoKSB7IC8qIGVtcHR5ICovIH0sIFtdLCBGKSBpbnN0YW5jZW9mIEYpO1xufSk7XG52YXIgQVJHU19CVUcgPSAhZmFpbHMoZnVuY3Rpb24gKCkge1xuICByQ29uc3RydWN0KGZ1bmN0aW9uICgpIHsgLyogZW1wdHkgKi8gfSk7XG59KTtcblxuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAoTkVXX1RBUkdFVF9CVUcgfHwgQVJHU19CVUcpLCAnUmVmbGVjdCcsIHtcbiAgY29uc3RydWN0OiBmdW5jdGlvbiBjb25zdHJ1Y3QoVGFyZ2V0LCBhcmdzIC8qICwgbmV3VGFyZ2V0ICovKSB7XG4gICAgYUZ1bmN0aW9uKFRhcmdldCk7XG4gICAgYW5PYmplY3QoYXJncyk7XG4gICAgdmFyIG5ld1RhcmdldCA9IGFyZ3VtZW50cy5sZW5ndGggPCAzID8gVGFyZ2V0IDogYUZ1bmN0aW9uKGFyZ3VtZW50c1syXSk7XG4gICAgaWYgKEFSR1NfQlVHICYmICFORVdfVEFSR0VUX0JVRykgcmV0dXJuIHJDb25zdHJ1Y3QoVGFyZ2V0LCBhcmdzLCBuZXdUYXJnZXQpO1xuICAgIGlmIChUYXJnZXQgPT0gbmV3VGFyZ2V0KSB7XG4gICAgICAvLyB3L28gYWx0ZXJlZCBuZXdUYXJnZXQsIG9wdGltaXphdGlvbiBmb3IgMC00IGFyZ3VtZW50c1xuICAgICAgc3dpdGNoIChhcmdzLmxlbmd0aCkge1xuICAgICAgICBjYXNlIDA6IHJldHVybiBuZXcgVGFyZ2V0KCk7XG4gICAgICAgIGNhc2UgMTogcmV0dXJuIG5ldyBUYXJnZXQoYXJnc1swXSk7XG4gICAgICAgIGNhc2UgMjogcmV0dXJuIG5ldyBUYXJnZXQoYXJnc1swXSwgYXJnc1sxXSk7XG4gICAgICAgIGNhc2UgMzogcmV0dXJuIG5ldyBUYXJnZXQoYXJnc1swXSwgYXJnc1sxXSwgYXJnc1syXSk7XG4gICAgICAgIGNhc2UgNDogcmV0dXJuIG5ldyBUYXJnZXQoYXJnc1swXSwgYXJnc1sxXSwgYXJnc1syXSwgYXJnc1szXSk7XG4gICAgICB9XG4gICAgICAvLyB3L28gYWx0ZXJlZCBuZXdUYXJnZXQsIGxvdCBvZiBhcmd1bWVudHMgY2FzZVxuICAgICAgdmFyICRhcmdzID0gW251bGxdO1xuICAgICAgJGFyZ3MucHVzaC5hcHBseSgkYXJncywgYXJncyk7XG4gICAgICByZXR1cm4gbmV3IChiaW5kLmFwcGx5KFRhcmdldCwgJGFyZ3MpKSgpO1xuICAgIH1cbiAgICAvLyB3aXRoIGFsdGVyZWQgbmV3VGFyZ2V0LCBub3Qgc3VwcG9ydCBidWlsdC1pbiBjb25zdHJ1Y3RvcnNcbiAgICB2YXIgcHJvdG8gPSBuZXdUYXJnZXQucHJvdG90eXBlO1xuICAgIHZhciBpbnN0YW5jZSA9IGNyZWF0ZShpc09iamVjdChwcm90bykgPyBwcm90byA6IE9iamVjdC5wcm90b3R5cGUpO1xuICAgIHZhciByZXN1bHQgPSBGdW5jdGlvbi5hcHBseS5jYWxsKFRhcmdldCwgaW5zdGFuY2UsIGFyZ3MpO1xuICAgIHJldHVybiBpc09iamVjdChyZXN1bHQpID8gcmVzdWx0IDogaW5zdGFuY2U7XG4gIH1cbn0pO1xuIiwiLy8gMjYuMS4zIFJlZmxlY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBwcm9wZXJ0eUtleSwgYXR0cmlidXRlcylcbnZhciBkUCA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIHRvUHJpbWl0aXZlID0gcmVxdWlyZSgnLi9fdG8tcHJpbWl0aXZlJyk7XG5cbi8vIE1TIEVkZ2UgaGFzIGJyb2tlbiBSZWZsZWN0LmRlZmluZVByb3BlcnR5IC0gdGhyb3dpbmcgaW5zdGVhZCBvZiByZXR1cm5pbmcgZmFsc2VcbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogcmVxdWlyZSgnLi9fZmFpbHMnKShmdW5jdGlvbiAoKSB7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bmRlZlxuICBSZWZsZWN0LmRlZmluZVByb3BlcnR5KGRQLmYoe30sIDEsIHsgdmFsdWU6IDEgfSksIDEsIHsgdmFsdWU6IDIgfSk7XG59KSwgJ1JlZmxlY3QnLCB7XG4gIGRlZmluZVByb3BlcnR5OiBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIHByb3BlcnR5S2V5LCBhdHRyaWJ1dGVzKSB7XG4gICAgYW5PYmplY3QodGFyZ2V0KTtcbiAgICBwcm9wZXJ0eUtleSA9IHRvUHJpbWl0aXZlKHByb3BlcnR5S2V5LCB0cnVlKTtcbiAgICBhbk9iamVjdChhdHRyaWJ1dGVzKTtcbiAgICB0cnkge1xuICAgICAgZFAuZih0YXJnZXQsIHByb3BlcnR5S2V5LCBhdHRyaWJ1dGVzKTtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH1cbn0pO1xuIiwiLy8gMjYuMS40IFJlZmxlY3QuZGVsZXRlUHJvcGVydHkodGFyZ2V0LCBwcm9wZXJ0eUtleSlcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgZ09QRCA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BkJykuZjtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ1JlZmxlY3QnLCB7XG4gIGRlbGV0ZVByb3BlcnR5OiBmdW5jdGlvbiBkZWxldGVQcm9wZXJ0eSh0YXJnZXQsIHByb3BlcnR5S2V5KSB7XG4gICAgdmFyIGRlc2MgPSBnT1BEKGFuT2JqZWN0KHRhcmdldCksIHByb3BlcnR5S2V5KTtcbiAgICByZXR1cm4gZGVzYyAmJiAhZGVzYy5jb25maWd1cmFibGUgPyBmYWxzZSA6IGRlbGV0ZSB0YXJnZXRbcHJvcGVydHlLZXldO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIDI2LjEuNSBSZWZsZWN0LmVudW1lcmF0ZSh0YXJnZXQpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgRW51bWVyYXRlID0gZnVuY3Rpb24gKGl0ZXJhdGVkKSB7XG4gIHRoaXMuX3QgPSBhbk9iamVjdChpdGVyYXRlZCk7IC8vIHRhcmdldFxuICB0aGlzLl9pID0gMDsgICAgICAgICAgICAgICAgICAvLyBuZXh0IGluZGV4XG4gIHZhciBrZXlzID0gdGhpcy5fayA9IFtdOyAgICAgIC8vIGtleXNcbiAgdmFyIGtleTtcbiAgZm9yIChrZXkgaW4gaXRlcmF0ZWQpIGtleXMucHVzaChrZXkpO1xufTtcbnJlcXVpcmUoJy4vX2l0ZXItY3JlYXRlJykoRW51bWVyYXRlLCAnT2JqZWN0JywgZnVuY3Rpb24gKCkge1xuICB2YXIgdGhhdCA9IHRoaXM7XG4gIHZhciBrZXlzID0gdGhhdC5faztcbiAgdmFyIGtleTtcbiAgZG8ge1xuICAgIGlmICh0aGF0Ll9pID49IGtleXMubGVuZ3RoKSByZXR1cm4geyB2YWx1ZTogdW5kZWZpbmVkLCBkb25lOiB0cnVlIH07XG4gIH0gd2hpbGUgKCEoKGtleSA9IGtleXNbdGhhdC5faSsrXSkgaW4gdGhhdC5fdCkpO1xuICByZXR1cm4geyB2YWx1ZToga2V5LCBkb25lOiBmYWxzZSB9O1xufSk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnUmVmbGVjdCcsIHtcbiAgZW51bWVyYXRlOiBmdW5jdGlvbiBlbnVtZXJhdGUodGFyZ2V0KSB7XG4gICAgcmV0dXJuIG5ldyBFbnVtZXJhdGUodGFyZ2V0KTtcbiAgfVxufSk7XG4iLCIvLyAyNi4xLjcgUmVmbGVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodGFyZ2V0LCBwcm9wZXJ0eUtleSlcbnZhciBnT1BEID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcGQnKTtcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdSZWZsZWN0Jywge1xuICBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I6IGZ1bmN0aW9uIGdldE93blByb3BlcnR5RGVzY3JpcHRvcih0YXJnZXQsIHByb3BlcnR5S2V5KSB7XG4gICAgcmV0dXJuIGdPUEQuZihhbk9iamVjdCh0YXJnZXQpLCBwcm9wZXJ0eUtleSk7XG4gIH1cbn0pO1xuIiwiLy8gMjYuMS44IFJlZmxlY3QuZ2V0UHJvdG90eXBlT2YodGFyZ2V0KVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBnZXRQcm90byA9IHJlcXVpcmUoJy4vX29iamVjdC1ncG8nKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ1JlZmxlY3QnLCB7XG4gIGdldFByb3RvdHlwZU9mOiBmdW5jdGlvbiBnZXRQcm90b3R5cGVPZih0YXJnZXQpIHtcbiAgICByZXR1cm4gZ2V0UHJvdG8oYW5PYmplY3QodGFyZ2V0KSk7XG4gIH1cbn0pO1xuIiwiLy8gMjYuMS42IFJlZmxlY3QuZ2V0KHRhcmdldCwgcHJvcGVydHlLZXkgWywgcmVjZWl2ZXJdKVxudmFyIGdPUEQgPSByZXF1aXJlKCcuL19vYmplY3QtZ29wZCcpO1xudmFyIGdldFByb3RvdHlwZU9mID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdwbycpO1xudmFyIGhhcyA9IHJlcXVpcmUoJy4vX2hhcycpO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG5cbmZ1bmN0aW9uIGdldCh0YXJnZXQsIHByb3BlcnR5S2V5IC8qICwgcmVjZWl2ZXIgKi8pIHtcbiAgdmFyIHJlY2VpdmVyID0gYXJndW1lbnRzLmxlbmd0aCA8IDMgPyB0YXJnZXQgOiBhcmd1bWVudHNbMl07XG4gIHZhciBkZXNjLCBwcm90bztcbiAgaWYgKGFuT2JqZWN0KHRhcmdldCkgPT09IHJlY2VpdmVyKSByZXR1cm4gdGFyZ2V0W3Byb3BlcnR5S2V5XTtcbiAgaWYgKGRlc2MgPSBnT1BELmYodGFyZ2V0LCBwcm9wZXJ0eUtleSkpIHJldHVybiBoYXMoZGVzYywgJ3ZhbHVlJylcbiAgICA/IGRlc2MudmFsdWVcbiAgICA6IGRlc2MuZ2V0ICE9PSB1bmRlZmluZWRcbiAgICAgID8gZGVzYy5nZXQuY2FsbChyZWNlaXZlcilcbiAgICAgIDogdW5kZWZpbmVkO1xuICBpZiAoaXNPYmplY3QocHJvdG8gPSBnZXRQcm90b3R5cGVPZih0YXJnZXQpKSkgcmV0dXJuIGdldChwcm90bywgcHJvcGVydHlLZXksIHJlY2VpdmVyKTtcbn1cblxuJGV4cG9ydCgkZXhwb3J0LlMsICdSZWZsZWN0JywgeyBnZXQ6IGdldCB9KTtcbiIsIi8vIDI2LjEuOSBSZWZsZWN0Lmhhcyh0YXJnZXQsIHByb3BlcnR5S2V5KVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdSZWZsZWN0Jywge1xuICBoYXM6IGZ1bmN0aW9uIGhhcyh0YXJnZXQsIHByb3BlcnR5S2V5KSB7XG4gICAgcmV0dXJuIHByb3BlcnR5S2V5IGluIHRhcmdldDtcbiAgfVxufSk7XG4iLCIvLyAyNi4xLjEwIFJlZmxlY3QuaXNFeHRlbnNpYmxlKHRhcmdldClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciAkaXNFeHRlbnNpYmxlID0gT2JqZWN0LmlzRXh0ZW5zaWJsZTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdSZWZsZWN0Jywge1xuICBpc0V4dGVuc2libGU6IGZ1bmN0aW9uIGlzRXh0ZW5zaWJsZSh0YXJnZXQpIHtcbiAgICBhbk9iamVjdCh0YXJnZXQpO1xuICAgIHJldHVybiAkaXNFeHRlbnNpYmxlID8gJGlzRXh0ZW5zaWJsZSh0YXJnZXQpIDogdHJ1ZTtcbiAgfVxufSk7XG4iLCIvLyAyNi4xLjExIFJlZmxlY3Qub3duS2V5cyh0YXJnZXQpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ1JlZmxlY3QnLCB7IG93bktleXM6IHJlcXVpcmUoJy4vX293bi1rZXlzJykgfSk7XG4iLCIvLyAyNi4xLjEyIFJlZmxlY3QucHJldmVudEV4dGVuc2lvbnModGFyZ2V0KVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyICRwcmV2ZW50RXh0ZW5zaW9ucyA9IE9iamVjdC5wcmV2ZW50RXh0ZW5zaW9ucztcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdSZWZsZWN0Jywge1xuICBwcmV2ZW50RXh0ZW5zaW9uczogZnVuY3Rpb24gcHJldmVudEV4dGVuc2lvbnModGFyZ2V0KSB7XG4gICAgYW5PYmplY3QodGFyZ2V0KTtcbiAgICB0cnkge1xuICAgICAgaWYgKCRwcmV2ZW50RXh0ZW5zaW9ucykgJHByZXZlbnRFeHRlbnNpb25zKHRhcmdldCk7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG59KTtcbiIsIi8vIDI2LjEuMTQgUmVmbGVjdC5zZXRQcm90b3R5cGVPZih0YXJnZXQsIHByb3RvKVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBzZXRQcm90byA9IHJlcXVpcmUoJy4vX3NldC1wcm90bycpO1xuXG5pZiAoc2V0UHJvdG8pICRleHBvcnQoJGV4cG9ydC5TLCAnUmVmbGVjdCcsIHtcbiAgc2V0UHJvdG90eXBlT2Y6IGZ1bmN0aW9uIHNldFByb3RvdHlwZU9mKHRhcmdldCwgcHJvdG8pIHtcbiAgICBzZXRQcm90by5jaGVjayh0YXJnZXQsIHByb3RvKTtcbiAgICB0cnkge1xuICAgICAgc2V0UHJvdG8uc2V0KHRhcmdldCwgcHJvdG8pO1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxufSk7XG4iLCIvLyAyNi4xLjEzIFJlZmxlY3Quc2V0KHRhcmdldCwgcHJvcGVydHlLZXksIFYgWywgcmVjZWl2ZXJdKVxudmFyIGRQID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJyk7XG52YXIgZ09QRCA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BkJyk7XG52YXIgZ2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKCcuL19vYmplY3QtZ3BvJyk7XG52YXIgaGFzID0gcmVxdWlyZSgnLi9faGFzJyk7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIGNyZWF0ZURlc2MgPSByZXF1aXJlKCcuL19wcm9wZXJ0eS1kZXNjJyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xuXG5mdW5jdGlvbiBzZXQodGFyZ2V0LCBwcm9wZXJ0eUtleSwgViAvKiAsIHJlY2VpdmVyICovKSB7XG4gIHZhciByZWNlaXZlciA9IGFyZ3VtZW50cy5sZW5ndGggPCA0ID8gdGFyZ2V0IDogYXJndW1lbnRzWzNdO1xuICB2YXIgb3duRGVzYyA9IGdPUEQuZihhbk9iamVjdCh0YXJnZXQpLCBwcm9wZXJ0eUtleSk7XG4gIHZhciBleGlzdGluZ0Rlc2NyaXB0b3IsIHByb3RvO1xuICBpZiAoIW93bkRlc2MpIHtcbiAgICBpZiAoaXNPYmplY3QocHJvdG8gPSBnZXRQcm90b3R5cGVPZih0YXJnZXQpKSkge1xuICAgICAgcmV0dXJuIHNldChwcm90bywgcHJvcGVydHlLZXksIFYsIHJlY2VpdmVyKTtcbiAgICB9XG4gICAgb3duRGVzYyA9IGNyZWF0ZURlc2MoMCk7XG4gIH1cbiAgaWYgKGhhcyhvd25EZXNjLCAndmFsdWUnKSkge1xuICAgIGlmIChvd25EZXNjLndyaXRhYmxlID09PSBmYWxzZSB8fCAhaXNPYmplY3QocmVjZWl2ZXIpKSByZXR1cm4gZmFsc2U7XG4gICAgaWYgKGV4aXN0aW5nRGVzY3JpcHRvciA9IGdPUEQuZihyZWNlaXZlciwgcHJvcGVydHlLZXkpKSB7XG4gICAgICBpZiAoZXhpc3RpbmdEZXNjcmlwdG9yLmdldCB8fCBleGlzdGluZ0Rlc2NyaXB0b3Iuc2V0IHx8IGV4aXN0aW5nRGVzY3JpcHRvci53cml0YWJsZSA9PT0gZmFsc2UpIHJldHVybiBmYWxzZTtcbiAgICAgIGV4aXN0aW5nRGVzY3JpcHRvci52YWx1ZSA9IFY7XG4gICAgICBkUC5mKHJlY2VpdmVyLCBwcm9wZXJ0eUtleSwgZXhpc3RpbmdEZXNjcmlwdG9yKTtcbiAgICB9IGVsc2UgZFAuZihyZWNlaXZlciwgcHJvcGVydHlLZXksIGNyZWF0ZURlc2MoMCwgVikpO1xuICAgIHJldHVybiB0cnVlO1xuICB9XG4gIHJldHVybiBvd25EZXNjLnNldCA9PT0gdW5kZWZpbmVkID8gZmFsc2UgOiAob3duRGVzYy5zZXQuY2FsbChyZWNlaXZlciwgViksIHRydWUpO1xufVxuXG4kZXhwb3J0KCRleHBvcnQuUywgJ1JlZmxlY3QnLCB7IHNldDogc2V0IH0pO1xuIiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpO1xudmFyIGluaGVyaXRJZlJlcXVpcmVkID0gcmVxdWlyZSgnLi9faW5oZXJpdC1pZi1yZXF1aXJlZCcpO1xudmFyIGRQID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJykuZjtcbnZhciBnT1BOID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcG4nKS5mO1xudmFyIGlzUmVnRXhwID0gcmVxdWlyZSgnLi9faXMtcmVnZXhwJyk7XG52YXIgJGZsYWdzID0gcmVxdWlyZSgnLi9fZmxhZ3MnKTtcbnZhciAkUmVnRXhwID0gZ2xvYmFsLlJlZ0V4cDtcbnZhciBCYXNlID0gJFJlZ0V4cDtcbnZhciBwcm90byA9ICRSZWdFeHAucHJvdG90eXBlO1xudmFyIHJlMSA9IC9hL2c7XG52YXIgcmUyID0gL2EvZztcbi8vIFwibmV3XCIgY3JlYXRlcyBhIG5ldyBvYmplY3QsIG9sZCB3ZWJraXQgYnVnZ3kgaGVyZVxudmFyIENPUlJFQ1RfTkVXID0gbmV3ICRSZWdFeHAocmUxKSAhPT0gcmUxO1xuXG5pZiAocmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKSAmJiAoIUNPUlJFQ1RfTkVXIHx8IHJlcXVpcmUoJy4vX2ZhaWxzJykoZnVuY3Rpb24gKCkge1xuICByZTJbcmVxdWlyZSgnLi9fd2tzJykoJ21hdGNoJyldID0gZmFsc2U7XG4gIC8vIFJlZ0V4cCBjb25zdHJ1Y3RvciBjYW4gYWx0ZXIgZmxhZ3MgYW5kIElzUmVnRXhwIHdvcmtzIGNvcnJlY3Qgd2l0aCBAQG1hdGNoXG4gIHJldHVybiAkUmVnRXhwKHJlMSkgIT0gcmUxIHx8ICRSZWdFeHAocmUyKSA9PSByZTIgfHwgJFJlZ0V4cChyZTEsICdpJykgIT0gJy9hL2knO1xufSkpKSB7XG4gICRSZWdFeHAgPSBmdW5jdGlvbiBSZWdFeHAocCwgZikge1xuICAgIHZhciB0aVJFID0gdGhpcyBpbnN0YW5jZW9mICRSZWdFeHA7XG4gICAgdmFyIHBpUkUgPSBpc1JlZ0V4cChwKTtcbiAgICB2YXIgZmlVID0gZiA9PT0gdW5kZWZpbmVkO1xuICAgIHJldHVybiAhdGlSRSAmJiBwaVJFICYmIHAuY29uc3RydWN0b3IgPT09ICRSZWdFeHAgJiYgZmlVID8gcFxuICAgICAgOiBpbmhlcml0SWZSZXF1aXJlZChDT1JSRUNUX05FV1xuICAgICAgICA/IG5ldyBCYXNlKHBpUkUgJiYgIWZpVSA/IHAuc291cmNlIDogcCwgZilcbiAgICAgICAgOiBCYXNlKChwaVJFID0gcCBpbnN0YW5jZW9mICRSZWdFeHApID8gcC5zb3VyY2UgOiBwLCBwaVJFICYmIGZpVSA/ICRmbGFncy5jYWxsKHApIDogZilcbiAgICAgICwgdGlSRSA/IHRoaXMgOiBwcm90bywgJFJlZ0V4cCk7XG4gIH07XG4gIHZhciBwcm94eSA9IGZ1bmN0aW9uIChrZXkpIHtcbiAgICBrZXkgaW4gJFJlZ0V4cCB8fCBkUCgkUmVnRXhwLCBrZXksIHtcbiAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gQmFzZVtrZXldOyB9LFxuICAgICAgc2V0OiBmdW5jdGlvbiAoaXQpIHsgQmFzZVtrZXldID0gaXQ7IH1cbiAgICB9KTtcbiAgfTtcbiAgZm9yICh2YXIga2V5cyA9IGdPUE4oQmFzZSksIGkgPSAwOyBrZXlzLmxlbmd0aCA+IGk7KSBwcm94eShrZXlzW2krK10pO1xuICBwcm90by5jb25zdHJ1Y3RvciA9ICRSZWdFeHA7XG4gICRSZWdFeHAucHJvdG90eXBlID0gcHJvdG87XG4gIHJlcXVpcmUoJy4vX3JlZGVmaW5lJykoZ2xvYmFsLCAnUmVnRXhwJywgJFJlZ0V4cCk7XG59XG5cbnJlcXVpcmUoJy4vX3NldC1zcGVjaWVzJykoJ1JlZ0V4cCcpO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIHJlZ2V4cEV4ZWMgPSByZXF1aXJlKCcuL19yZWdleHAtZXhlYycpO1xucmVxdWlyZSgnLi9fZXhwb3J0Jykoe1xuICB0YXJnZXQ6ICdSZWdFeHAnLFxuICBwcm90bzogdHJ1ZSxcbiAgZm9yY2VkOiByZWdleHBFeGVjICE9PSAvLi8uZXhlY1xufSwge1xuICBleGVjOiByZWdleHBFeGVjXG59KTtcbiIsIi8vIDIxLjIuNS4zIGdldCBSZWdFeHAucHJvdG90eXBlLmZsYWdzKClcbmlmIChyZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpICYmIC8uL2cuZmxhZ3MgIT0gJ2cnKSByZXF1aXJlKCcuL19vYmplY3QtZHAnKS5mKFJlZ0V4cC5wcm90b3R5cGUsICdmbGFncycsIHtcbiAgY29uZmlndXJhYmxlOiB0cnVlLFxuICBnZXQ6IHJlcXVpcmUoJy4vX2ZsYWdzJylcbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpO1xudmFyIGFkdmFuY2VTdHJpbmdJbmRleCA9IHJlcXVpcmUoJy4vX2FkdmFuY2Utc3RyaW5nLWluZGV4Jyk7XG52YXIgcmVnRXhwRXhlYyA9IHJlcXVpcmUoJy4vX3JlZ2V4cC1leGVjLWFic3RyYWN0Jyk7XG5cbi8vIEBAbWF0Y2ggbG9naWNcbnJlcXVpcmUoJy4vX2ZpeC1yZS13a3MnKSgnbWF0Y2gnLCAxLCBmdW5jdGlvbiAoZGVmaW5lZCwgTUFUQ0gsICRtYXRjaCwgbWF5YmVDYWxsTmF0aXZlKSB7XG4gIHJldHVybiBbXG4gICAgLy8gYFN0cmluZy5wcm90b3R5cGUubWF0Y2hgIG1ldGhvZFxuICAgIC8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLXN0cmluZy5wcm90b3R5cGUubWF0Y2hcbiAgICBmdW5jdGlvbiBtYXRjaChyZWdleHApIHtcbiAgICAgIHZhciBPID0gZGVmaW5lZCh0aGlzKTtcbiAgICAgIHZhciBmbiA9IHJlZ2V4cCA9PSB1bmRlZmluZWQgPyB1bmRlZmluZWQgOiByZWdleHBbTUFUQ0hdO1xuICAgICAgcmV0dXJuIGZuICE9PSB1bmRlZmluZWQgPyBmbi5jYWxsKHJlZ2V4cCwgTykgOiBuZXcgUmVnRXhwKHJlZ2V4cClbTUFUQ0hdKFN0cmluZyhPKSk7XG4gICAgfSxcbiAgICAvLyBgUmVnRXhwLnByb3RvdHlwZVtAQG1hdGNoXWAgbWV0aG9kXG4gICAgLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtcmVnZXhwLnByb3RvdHlwZS1AQG1hdGNoXG4gICAgZnVuY3Rpb24gKHJlZ2V4cCkge1xuICAgICAgdmFyIHJlcyA9IG1heWJlQ2FsbE5hdGl2ZSgkbWF0Y2gsIHJlZ2V4cCwgdGhpcyk7XG4gICAgICBpZiAocmVzLmRvbmUpIHJldHVybiByZXMudmFsdWU7XG4gICAgICB2YXIgcnggPSBhbk9iamVjdChyZWdleHApO1xuICAgICAgdmFyIFMgPSBTdHJpbmcodGhpcyk7XG4gICAgICBpZiAoIXJ4Lmdsb2JhbCkgcmV0dXJuIHJlZ0V4cEV4ZWMocngsIFMpO1xuICAgICAgdmFyIGZ1bGxVbmljb2RlID0gcngudW5pY29kZTtcbiAgICAgIHJ4Lmxhc3RJbmRleCA9IDA7XG4gICAgICB2YXIgQSA9IFtdO1xuICAgICAgdmFyIG4gPSAwO1xuICAgICAgdmFyIHJlc3VsdDtcbiAgICAgIHdoaWxlICgocmVzdWx0ID0gcmVnRXhwRXhlYyhyeCwgUykpICE9PSBudWxsKSB7XG4gICAgICAgIHZhciBtYXRjaFN0ciA9IFN0cmluZyhyZXN1bHRbMF0pO1xuICAgICAgICBBW25dID0gbWF0Y2hTdHI7XG4gICAgICAgIGlmIChtYXRjaFN0ciA9PT0gJycpIHJ4Lmxhc3RJbmRleCA9IGFkdmFuY2VTdHJpbmdJbmRleChTLCB0b0xlbmd0aChyeC5sYXN0SW5kZXgpLCBmdWxsVW5pY29kZSk7XG4gICAgICAgIG4rKztcbiAgICAgIH1cbiAgICAgIHJldHVybiBuID09PSAwID8gbnVsbCA6IEE7XG4gICAgfVxuICBdO1xufSk7XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8tb2JqZWN0Jyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuL190by1sZW5ndGgnKTtcbnZhciB0b0ludGVnZXIgPSByZXF1aXJlKCcuL190by1pbnRlZ2VyJyk7XG52YXIgYWR2YW5jZVN0cmluZ0luZGV4ID0gcmVxdWlyZSgnLi9fYWR2YW5jZS1zdHJpbmctaW5kZXgnKTtcbnZhciByZWdFeHBFeGVjID0gcmVxdWlyZSgnLi9fcmVnZXhwLWV4ZWMtYWJzdHJhY3QnKTtcbnZhciBtYXggPSBNYXRoLm1heDtcbnZhciBtaW4gPSBNYXRoLm1pbjtcbnZhciBmbG9vciA9IE1hdGguZmxvb3I7XG52YXIgU1VCU1RJVFVUSU9OX1NZTUJPTFMgPSAvXFwkKFskJmAnXXxcXGRcXGQ/fDxbXj5dKj4pL2c7XG52YXIgU1VCU1RJVFVUSU9OX1NZTUJPTFNfTk9fTkFNRUQgPSAvXFwkKFskJmAnXXxcXGRcXGQ/KS9nO1xuXG52YXIgbWF5YmVUb1N0cmluZyA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gaXQgPT09IHVuZGVmaW5lZCA/IGl0IDogU3RyaW5nKGl0KTtcbn07XG5cbi8vIEBAcmVwbGFjZSBsb2dpY1xucmVxdWlyZSgnLi9fZml4LXJlLXdrcycpKCdyZXBsYWNlJywgMiwgZnVuY3Rpb24gKGRlZmluZWQsIFJFUExBQ0UsICRyZXBsYWNlLCBtYXliZUNhbGxOYXRpdmUpIHtcbiAgcmV0dXJuIFtcbiAgICAvLyBgU3RyaW5nLnByb3RvdHlwZS5yZXBsYWNlYCBtZXRob2RcbiAgICAvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1zdHJpbmcucHJvdG90eXBlLnJlcGxhY2VcbiAgICBmdW5jdGlvbiByZXBsYWNlKHNlYXJjaFZhbHVlLCByZXBsYWNlVmFsdWUpIHtcbiAgICAgIHZhciBPID0gZGVmaW5lZCh0aGlzKTtcbiAgICAgIHZhciBmbiA9IHNlYXJjaFZhbHVlID09IHVuZGVmaW5lZCA/IHVuZGVmaW5lZCA6IHNlYXJjaFZhbHVlW1JFUExBQ0VdO1xuICAgICAgcmV0dXJuIGZuICE9PSB1bmRlZmluZWRcbiAgICAgICAgPyBmbi5jYWxsKHNlYXJjaFZhbHVlLCBPLCByZXBsYWNlVmFsdWUpXG4gICAgICAgIDogJHJlcGxhY2UuY2FsbChTdHJpbmcoTyksIHNlYXJjaFZhbHVlLCByZXBsYWNlVmFsdWUpO1xuICAgIH0sXG4gICAgLy8gYFJlZ0V4cC5wcm90b3R5cGVbQEByZXBsYWNlXWAgbWV0aG9kXG4gICAgLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtcmVnZXhwLnByb3RvdHlwZS1AQHJlcGxhY2VcbiAgICBmdW5jdGlvbiAocmVnZXhwLCByZXBsYWNlVmFsdWUpIHtcbiAgICAgIHZhciByZXMgPSBtYXliZUNhbGxOYXRpdmUoJHJlcGxhY2UsIHJlZ2V4cCwgdGhpcywgcmVwbGFjZVZhbHVlKTtcbiAgICAgIGlmIChyZXMuZG9uZSkgcmV0dXJuIHJlcy52YWx1ZTtcblxuICAgICAgdmFyIHJ4ID0gYW5PYmplY3QocmVnZXhwKTtcbiAgICAgIHZhciBTID0gU3RyaW5nKHRoaXMpO1xuICAgICAgdmFyIGZ1bmN0aW9uYWxSZXBsYWNlID0gdHlwZW9mIHJlcGxhY2VWYWx1ZSA9PT0gJ2Z1bmN0aW9uJztcbiAgICAgIGlmICghZnVuY3Rpb25hbFJlcGxhY2UpIHJlcGxhY2VWYWx1ZSA9IFN0cmluZyhyZXBsYWNlVmFsdWUpO1xuICAgICAgdmFyIGdsb2JhbCA9IHJ4Lmdsb2JhbDtcbiAgICAgIGlmIChnbG9iYWwpIHtcbiAgICAgICAgdmFyIGZ1bGxVbmljb2RlID0gcngudW5pY29kZTtcbiAgICAgICAgcngubGFzdEluZGV4ID0gMDtcbiAgICAgIH1cbiAgICAgIHZhciByZXN1bHRzID0gW107XG4gICAgICB3aGlsZSAodHJ1ZSkge1xuICAgICAgICB2YXIgcmVzdWx0ID0gcmVnRXhwRXhlYyhyeCwgUyk7XG4gICAgICAgIGlmIChyZXN1bHQgPT09IG51bGwpIGJyZWFrO1xuICAgICAgICByZXN1bHRzLnB1c2gocmVzdWx0KTtcbiAgICAgICAgaWYgKCFnbG9iYWwpIGJyZWFrO1xuICAgICAgICB2YXIgbWF0Y2hTdHIgPSBTdHJpbmcocmVzdWx0WzBdKTtcbiAgICAgICAgaWYgKG1hdGNoU3RyID09PSAnJykgcngubGFzdEluZGV4ID0gYWR2YW5jZVN0cmluZ0luZGV4KFMsIHRvTGVuZ3RoKHJ4Lmxhc3RJbmRleCksIGZ1bGxVbmljb2RlKTtcbiAgICAgIH1cbiAgICAgIHZhciBhY2N1bXVsYXRlZFJlc3VsdCA9ICcnO1xuICAgICAgdmFyIG5leHRTb3VyY2VQb3NpdGlvbiA9IDA7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHJlc3VsdHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgcmVzdWx0ID0gcmVzdWx0c1tpXTtcbiAgICAgICAgdmFyIG1hdGNoZWQgPSBTdHJpbmcocmVzdWx0WzBdKTtcbiAgICAgICAgdmFyIHBvc2l0aW9uID0gbWF4KG1pbih0b0ludGVnZXIocmVzdWx0LmluZGV4KSwgUy5sZW5ndGgpLCAwKTtcbiAgICAgICAgdmFyIGNhcHR1cmVzID0gW107XG4gICAgICAgIC8vIE5PVEU6IFRoaXMgaXMgZXF1aXZhbGVudCB0b1xuICAgICAgICAvLyAgIGNhcHR1cmVzID0gcmVzdWx0LnNsaWNlKDEpLm1hcChtYXliZVRvU3RyaW5nKVxuICAgICAgICAvLyBidXQgZm9yIHNvbWUgcmVhc29uIGBuYXRpdmVTbGljZS5jYWxsKHJlc3VsdCwgMSwgcmVzdWx0Lmxlbmd0aClgIChjYWxsZWQgaW5cbiAgICAgICAgLy8gdGhlIHNsaWNlIHBvbHlmaWxsIHdoZW4gc2xpY2luZyBuYXRpdmUgYXJyYXlzKSBcImRvZXNuJ3Qgd29ya1wiIGluIHNhZmFyaSA5IGFuZFxuICAgICAgICAvLyBjYXVzZXMgYSBjcmFzaCAoaHR0cHM6Ly9wYXN0ZWJpbi5jb20vTjIxUXplUUEpIHdoZW4gdHJ5aW5nIHRvIGRlYnVnIGl0LlxuICAgICAgICBmb3IgKHZhciBqID0gMTsgaiA8IHJlc3VsdC5sZW5ndGg7IGorKykgY2FwdHVyZXMucHVzaChtYXliZVRvU3RyaW5nKHJlc3VsdFtqXSkpO1xuICAgICAgICB2YXIgbmFtZWRDYXB0dXJlcyA9IHJlc3VsdC5ncm91cHM7XG4gICAgICAgIGlmIChmdW5jdGlvbmFsUmVwbGFjZSkge1xuICAgICAgICAgIHZhciByZXBsYWNlckFyZ3MgPSBbbWF0Y2hlZF0uY29uY2F0KGNhcHR1cmVzLCBwb3NpdGlvbiwgUyk7XG4gICAgICAgICAgaWYgKG5hbWVkQ2FwdHVyZXMgIT09IHVuZGVmaW5lZCkgcmVwbGFjZXJBcmdzLnB1c2gobmFtZWRDYXB0dXJlcyk7XG4gICAgICAgICAgdmFyIHJlcGxhY2VtZW50ID0gU3RyaW5nKHJlcGxhY2VWYWx1ZS5hcHBseSh1bmRlZmluZWQsIHJlcGxhY2VyQXJncykpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJlcGxhY2VtZW50ID0gZ2V0U3Vic3RpdHV0aW9uKG1hdGNoZWQsIFMsIHBvc2l0aW9uLCBjYXB0dXJlcywgbmFtZWRDYXB0dXJlcywgcmVwbGFjZVZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAocG9zaXRpb24gPj0gbmV4dFNvdXJjZVBvc2l0aW9uKSB7XG4gICAgICAgICAgYWNjdW11bGF0ZWRSZXN1bHQgKz0gUy5zbGljZShuZXh0U291cmNlUG9zaXRpb24sIHBvc2l0aW9uKSArIHJlcGxhY2VtZW50O1xuICAgICAgICAgIG5leHRTb3VyY2VQb3NpdGlvbiA9IHBvc2l0aW9uICsgbWF0Y2hlZC5sZW5ndGg7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBhY2N1bXVsYXRlZFJlc3VsdCArIFMuc2xpY2UobmV4dFNvdXJjZVBvc2l0aW9uKTtcbiAgICB9XG4gIF07XG5cbiAgICAvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1nZXRzdWJzdGl0dXRpb25cbiAgZnVuY3Rpb24gZ2V0U3Vic3RpdHV0aW9uKG1hdGNoZWQsIHN0ciwgcG9zaXRpb24sIGNhcHR1cmVzLCBuYW1lZENhcHR1cmVzLCByZXBsYWNlbWVudCkge1xuICAgIHZhciB0YWlsUG9zID0gcG9zaXRpb24gKyBtYXRjaGVkLmxlbmd0aDtcbiAgICB2YXIgbSA9IGNhcHR1cmVzLmxlbmd0aDtcbiAgICB2YXIgc3ltYm9scyA9IFNVQlNUSVRVVElPTl9TWU1CT0xTX05PX05BTUVEO1xuICAgIGlmIChuYW1lZENhcHR1cmVzICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIG5hbWVkQ2FwdHVyZXMgPSB0b09iamVjdChuYW1lZENhcHR1cmVzKTtcbiAgICAgIHN5bWJvbHMgPSBTVUJTVElUVVRJT05fU1lNQk9MUztcbiAgICB9XG4gICAgcmV0dXJuICRyZXBsYWNlLmNhbGwocmVwbGFjZW1lbnQsIHN5bWJvbHMsIGZ1bmN0aW9uIChtYXRjaCwgY2gpIHtcbiAgICAgIHZhciBjYXB0dXJlO1xuICAgICAgc3dpdGNoIChjaC5jaGFyQXQoMCkpIHtcbiAgICAgICAgY2FzZSAnJCc6IHJldHVybiAnJCc7XG4gICAgICAgIGNhc2UgJyYnOiByZXR1cm4gbWF0Y2hlZDtcbiAgICAgICAgY2FzZSAnYCc6IHJldHVybiBzdHIuc2xpY2UoMCwgcG9zaXRpb24pO1xuICAgICAgICBjYXNlIFwiJ1wiOiByZXR1cm4gc3RyLnNsaWNlKHRhaWxQb3MpO1xuICAgICAgICBjYXNlICc8JzpcbiAgICAgICAgICBjYXB0dXJlID0gbmFtZWRDYXB0dXJlc1tjaC5zbGljZSgxLCAtMSldO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBkZWZhdWx0OiAvLyBcXGRcXGQ/XG4gICAgICAgICAgdmFyIG4gPSArY2g7XG4gICAgICAgICAgaWYgKG4gPT09IDApIHJldHVybiBtYXRjaDtcbiAgICAgICAgICBpZiAobiA+IG0pIHtcbiAgICAgICAgICAgIHZhciBmID0gZmxvb3IobiAvIDEwKTtcbiAgICAgICAgICAgIGlmIChmID09PSAwKSByZXR1cm4gbWF0Y2g7XG4gICAgICAgICAgICBpZiAoZiA8PSBtKSByZXR1cm4gY2FwdHVyZXNbZiAtIDFdID09PSB1bmRlZmluZWQgPyBjaC5jaGFyQXQoMSkgOiBjYXB0dXJlc1tmIC0gMV0gKyBjaC5jaGFyQXQoMSk7XG4gICAgICAgICAgICByZXR1cm4gbWF0Y2g7XG4gICAgICAgICAgfVxuICAgICAgICAgIGNhcHR1cmUgPSBjYXB0dXJlc1tuIC0gMV07XG4gICAgICB9XG4gICAgICByZXR1cm4gY2FwdHVyZSA9PT0gdW5kZWZpbmVkID8gJycgOiBjYXB0dXJlO1xuICAgIH0pO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgc2FtZVZhbHVlID0gcmVxdWlyZSgnLi9fc2FtZS12YWx1ZScpO1xudmFyIHJlZ0V4cEV4ZWMgPSByZXF1aXJlKCcuL19yZWdleHAtZXhlYy1hYnN0cmFjdCcpO1xuXG4vLyBAQHNlYXJjaCBsb2dpY1xucmVxdWlyZSgnLi9fZml4LXJlLXdrcycpKCdzZWFyY2gnLCAxLCBmdW5jdGlvbiAoZGVmaW5lZCwgU0VBUkNILCAkc2VhcmNoLCBtYXliZUNhbGxOYXRpdmUpIHtcbiAgcmV0dXJuIFtcbiAgICAvLyBgU3RyaW5nLnByb3RvdHlwZS5zZWFyY2hgIG1ldGhvZFxuICAgIC8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLXN0cmluZy5wcm90b3R5cGUuc2VhcmNoXG4gICAgZnVuY3Rpb24gc2VhcmNoKHJlZ2V4cCkge1xuICAgICAgdmFyIE8gPSBkZWZpbmVkKHRoaXMpO1xuICAgICAgdmFyIGZuID0gcmVnZXhwID09IHVuZGVmaW5lZCA/IHVuZGVmaW5lZCA6IHJlZ2V4cFtTRUFSQ0hdO1xuICAgICAgcmV0dXJuIGZuICE9PSB1bmRlZmluZWQgPyBmbi5jYWxsKHJlZ2V4cCwgTykgOiBuZXcgUmVnRXhwKHJlZ2V4cClbU0VBUkNIXShTdHJpbmcoTykpO1xuICAgIH0sXG4gICAgLy8gYFJlZ0V4cC5wcm90b3R5cGVbQEBzZWFyY2hdYCBtZXRob2RcbiAgICAvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1yZWdleHAucHJvdG90eXBlLUBAc2VhcmNoXG4gICAgZnVuY3Rpb24gKHJlZ2V4cCkge1xuICAgICAgdmFyIHJlcyA9IG1heWJlQ2FsbE5hdGl2ZSgkc2VhcmNoLCByZWdleHAsIHRoaXMpO1xuICAgICAgaWYgKHJlcy5kb25lKSByZXR1cm4gcmVzLnZhbHVlO1xuICAgICAgdmFyIHJ4ID0gYW5PYmplY3QocmVnZXhwKTtcbiAgICAgIHZhciBTID0gU3RyaW5nKHRoaXMpO1xuICAgICAgdmFyIHByZXZpb3VzTGFzdEluZGV4ID0gcngubGFzdEluZGV4O1xuICAgICAgaWYgKCFzYW1lVmFsdWUocHJldmlvdXNMYXN0SW5kZXgsIDApKSByeC5sYXN0SW5kZXggPSAwO1xuICAgICAgdmFyIHJlc3VsdCA9IHJlZ0V4cEV4ZWMocngsIFMpO1xuICAgICAgaWYgKCFzYW1lVmFsdWUocngubGFzdEluZGV4LCBwcmV2aW91c0xhc3RJbmRleCkpIHJ4Lmxhc3RJbmRleCA9IHByZXZpb3VzTGFzdEluZGV4O1xuICAgICAgcmV0dXJuIHJlc3VsdCA9PT0gbnVsbCA/IC0xIDogcmVzdWx0LmluZGV4O1xuICAgIH1cbiAgXTtcbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgaXNSZWdFeHAgPSByZXF1aXJlKCcuL19pcy1yZWdleHAnKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIHNwZWNpZXNDb25zdHJ1Y3RvciA9IHJlcXVpcmUoJy4vX3NwZWNpZXMtY29uc3RydWN0b3InKTtcbnZhciBhZHZhbmNlU3RyaW5nSW5kZXggPSByZXF1aXJlKCcuL19hZHZhbmNlLXN0cmluZy1pbmRleCcpO1xudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi9fdG8tbGVuZ3RoJyk7XG52YXIgY2FsbFJlZ0V4cEV4ZWMgPSByZXF1aXJlKCcuL19yZWdleHAtZXhlYy1hYnN0cmFjdCcpO1xudmFyIHJlZ2V4cEV4ZWMgPSByZXF1aXJlKCcuL19yZWdleHAtZXhlYycpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi9fZmFpbHMnKTtcbnZhciAkbWluID0gTWF0aC5taW47XG52YXIgJHB1c2ggPSBbXS5wdXNoO1xudmFyICRTUExJVCA9ICdzcGxpdCc7XG52YXIgTEVOR1RIID0gJ2xlbmd0aCc7XG52YXIgTEFTVF9JTkRFWCA9ICdsYXN0SW5kZXgnO1xudmFyIE1BWF9VSU5UMzIgPSAweGZmZmZmZmZmO1xuXG4vLyBiYWJlbC1taW5pZnkgdHJhbnNwaWxlcyBSZWdFeHAoJ3gnLCAneScpIC0+IC94L3kgYW5kIGl0IGNhdXNlcyBTeW50YXhFcnJvclxudmFyIFNVUFBPUlRTX1kgPSAhZmFpbHMoZnVuY3Rpb24gKCkgeyBSZWdFeHAoTUFYX1VJTlQzMiwgJ3knKTsgfSk7XG5cbi8vIEBAc3BsaXQgbG9naWNcbnJlcXVpcmUoJy4vX2ZpeC1yZS13a3MnKSgnc3BsaXQnLCAyLCBmdW5jdGlvbiAoZGVmaW5lZCwgU1BMSVQsICRzcGxpdCwgbWF5YmVDYWxsTmF0aXZlKSB7XG4gIHZhciBpbnRlcm5hbFNwbGl0O1xuICBpZiAoXG4gICAgJ2FiYmMnWyRTUExJVF0oLyhiKSovKVsxXSA9PSAnYycgfHxcbiAgICAndGVzdCdbJFNQTElUXSgvKD86KS8sIC0xKVtMRU5HVEhdICE9IDQgfHxcbiAgICAnYWInWyRTUExJVF0oLyg/OmFiKSovKVtMRU5HVEhdICE9IDIgfHxcbiAgICAnLidbJFNQTElUXSgvKC4/KSguPykvKVtMRU5HVEhdICE9IDQgfHxcbiAgICAnLidbJFNQTElUXSgvKCkoKS8pW0xFTkdUSF0gPiAxIHx8XG4gICAgJydbJFNQTElUXSgvLj8vKVtMRU5HVEhdXG4gICkge1xuICAgIC8vIGJhc2VkIG9uIGVzNS1zaGltIGltcGxlbWVudGF0aW9uLCBuZWVkIHRvIHJld29yayBpdFxuICAgIGludGVybmFsU3BsaXQgPSBmdW5jdGlvbiAoc2VwYXJhdG9yLCBsaW1pdCkge1xuICAgICAgdmFyIHN0cmluZyA9IFN0cmluZyh0aGlzKTtcbiAgICAgIGlmIChzZXBhcmF0b3IgPT09IHVuZGVmaW5lZCAmJiBsaW1pdCA9PT0gMCkgcmV0dXJuIFtdO1xuICAgICAgLy8gSWYgYHNlcGFyYXRvcmAgaXMgbm90IGEgcmVnZXgsIHVzZSBuYXRpdmUgc3BsaXRcbiAgICAgIGlmICghaXNSZWdFeHAoc2VwYXJhdG9yKSkgcmV0dXJuICRzcGxpdC5jYWxsKHN0cmluZywgc2VwYXJhdG9yLCBsaW1pdCk7XG4gICAgICB2YXIgb3V0cHV0ID0gW107XG4gICAgICB2YXIgZmxhZ3MgPSAoc2VwYXJhdG9yLmlnbm9yZUNhc2UgPyAnaScgOiAnJykgK1xuICAgICAgICAgICAgICAgICAgKHNlcGFyYXRvci5tdWx0aWxpbmUgPyAnbScgOiAnJykgK1xuICAgICAgICAgICAgICAgICAgKHNlcGFyYXRvci51bmljb2RlID8gJ3UnIDogJycpICtcbiAgICAgICAgICAgICAgICAgIChzZXBhcmF0b3Iuc3RpY2t5ID8gJ3knIDogJycpO1xuICAgICAgdmFyIGxhc3RMYXN0SW5kZXggPSAwO1xuICAgICAgdmFyIHNwbGl0TGltaXQgPSBsaW1pdCA9PT0gdW5kZWZpbmVkID8gTUFYX1VJTlQzMiA6IGxpbWl0ID4+PiAwO1xuICAgICAgLy8gTWFrZSBgZ2xvYmFsYCBhbmQgYXZvaWQgYGxhc3RJbmRleGAgaXNzdWVzIGJ5IHdvcmtpbmcgd2l0aCBhIGNvcHlcbiAgICAgIHZhciBzZXBhcmF0b3JDb3B5ID0gbmV3IFJlZ0V4cChzZXBhcmF0b3Iuc291cmNlLCBmbGFncyArICdnJyk7XG4gICAgICB2YXIgbWF0Y2gsIGxhc3RJbmRleCwgbGFzdExlbmd0aDtcbiAgICAgIHdoaWxlIChtYXRjaCA9IHJlZ2V4cEV4ZWMuY2FsbChzZXBhcmF0b3JDb3B5LCBzdHJpbmcpKSB7XG4gICAgICAgIGxhc3RJbmRleCA9IHNlcGFyYXRvckNvcHlbTEFTVF9JTkRFWF07XG4gICAgICAgIGlmIChsYXN0SW5kZXggPiBsYXN0TGFzdEluZGV4KSB7XG4gICAgICAgICAgb3V0cHV0LnB1c2goc3RyaW5nLnNsaWNlKGxhc3RMYXN0SW5kZXgsIG1hdGNoLmluZGV4KSk7XG4gICAgICAgICAgaWYgKG1hdGNoW0xFTkdUSF0gPiAxICYmIG1hdGNoLmluZGV4IDwgc3RyaW5nW0xFTkdUSF0pICRwdXNoLmFwcGx5KG91dHB1dCwgbWF0Y2guc2xpY2UoMSkpO1xuICAgICAgICAgIGxhc3RMZW5ndGggPSBtYXRjaFswXVtMRU5HVEhdO1xuICAgICAgICAgIGxhc3RMYXN0SW5kZXggPSBsYXN0SW5kZXg7XG4gICAgICAgICAgaWYgKG91dHB1dFtMRU5HVEhdID49IHNwbGl0TGltaXQpIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGlmIChzZXBhcmF0b3JDb3B5W0xBU1RfSU5ERVhdID09PSBtYXRjaC5pbmRleCkgc2VwYXJhdG9yQ29weVtMQVNUX0lOREVYXSsrOyAvLyBBdm9pZCBhbiBpbmZpbml0ZSBsb29wXG4gICAgICB9XG4gICAgICBpZiAobGFzdExhc3RJbmRleCA9PT0gc3RyaW5nW0xFTkdUSF0pIHtcbiAgICAgICAgaWYgKGxhc3RMZW5ndGggfHwgIXNlcGFyYXRvckNvcHkudGVzdCgnJykpIG91dHB1dC5wdXNoKCcnKTtcbiAgICAgIH0gZWxzZSBvdXRwdXQucHVzaChzdHJpbmcuc2xpY2UobGFzdExhc3RJbmRleCkpO1xuICAgICAgcmV0dXJuIG91dHB1dFtMRU5HVEhdID4gc3BsaXRMaW1pdCA/IG91dHB1dC5zbGljZSgwLCBzcGxpdExpbWl0KSA6IG91dHB1dDtcbiAgICB9O1xuICAvLyBDaGFrcmEsIFY4XG4gIH0gZWxzZSBpZiAoJzAnWyRTUExJVF0odW5kZWZpbmVkLCAwKVtMRU5HVEhdKSB7XG4gICAgaW50ZXJuYWxTcGxpdCA9IGZ1bmN0aW9uIChzZXBhcmF0b3IsIGxpbWl0KSB7XG4gICAgICByZXR1cm4gc2VwYXJhdG9yID09PSB1bmRlZmluZWQgJiYgbGltaXQgPT09IDAgPyBbXSA6ICRzcGxpdC5jYWxsKHRoaXMsIHNlcGFyYXRvciwgbGltaXQpO1xuICAgIH07XG4gIH0gZWxzZSB7XG4gICAgaW50ZXJuYWxTcGxpdCA9ICRzcGxpdDtcbiAgfVxuXG4gIHJldHVybiBbXG4gICAgLy8gYFN0cmluZy5wcm90b3R5cGUuc3BsaXRgIG1ldGhvZFxuICAgIC8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLXN0cmluZy5wcm90b3R5cGUuc3BsaXRcbiAgICBmdW5jdGlvbiBzcGxpdChzZXBhcmF0b3IsIGxpbWl0KSB7XG4gICAgICB2YXIgTyA9IGRlZmluZWQodGhpcyk7XG4gICAgICB2YXIgc3BsaXR0ZXIgPSBzZXBhcmF0b3IgPT0gdW5kZWZpbmVkID8gdW5kZWZpbmVkIDogc2VwYXJhdG9yW1NQTElUXTtcbiAgICAgIHJldHVybiBzcGxpdHRlciAhPT0gdW5kZWZpbmVkXG4gICAgICAgID8gc3BsaXR0ZXIuY2FsbChzZXBhcmF0b3IsIE8sIGxpbWl0KVxuICAgICAgICA6IGludGVybmFsU3BsaXQuY2FsbChTdHJpbmcoTyksIHNlcGFyYXRvciwgbGltaXQpO1xuICAgIH0sXG4gICAgLy8gYFJlZ0V4cC5wcm90b3R5cGVbQEBzcGxpdF1gIG1ldGhvZFxuICAgIC8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLXJlZ2V4cC5wcm90b3R5cGUtQEBzcGxpdFxuICAgIC8vXG4gICAgLy8gTk9URTogVGhpcyBjYW5ub3QgYmUgcHJvcGVybHkgcG9seWZpbGxlZCBpbiBlbmdpbmVzIHRoYXQgZG9uJ3Qgc3VwcG9ydFxuICAgIC8vIHRoZSAneScgZmxhZy5cbiAgICBmdW5jdGlvbiAocmVnZXhwLCBsaW1pdCkge1xuICAgICAgdmFyIHJlcyA9IG1heWJlQ2FsbE5hdGl2ZShpbnRlcm5hbFNwbGl0LCByZWdleHAsIHRoaXMsIGxpbWl0LCBpbnRlcm5hbFNwbGl0ICE9PSAkc3BsaXQpO1xuICAgICAgaWYgKHJlcy5kb25lKSByZXR1cm4gcmVzLnZhbHVlO1xuXG4gICAgICB2YXIgcnggPSBhbk9iamVjdChyZWdleHApO1xuICAgICAgdmFyIFMgPSBTdHJpbmcodGhpcyk7XG4gICAgICB2YXIgQyA9IHNwZWNpZXNDb25zdHJ1Y3RvcihyeCwgUmVnRXhwKTtcblxuICAgICAgdmFyIHVuaWNvZGVNYXRjaGluZyA9IHJ4LnVuaWNvZGU7XG4gICAgICB2YXIgZmxhZ3MgPSAocnguaWdub3JlQ2FzZSA/ICdpJyA6ICcnKSArXG4gICAgICAgICAgICAgICAgICAocngubXVsdGlsaW5lID8gJ20nIDogJycpICtcbiAgICAgICAgICAgICAgICAgIChyeC51bmljb2RlID8gJ3UnIDogJycpICtcbiAgICAgICAgICAgICAgICAgIChTVVBQT1JUU19ZID8gJ3knIDogJ2cnKTtcblxuICAgICAgLy8gXig/ICsgcnggKyApIGlzIG5lZWRlZCwgaW4gY29tYmluYXRpb24gd2l0aCBzb21lIFMgc2xpY2luZywgdG9cbiAgICAgIC8vIHNpbXVsYXRlIHRoZSAneScgZmxhZy5cbiAgICAgIHZhciBzcGxpdHRlciA9IG5ldyBDKFNVUFBPUlRTX1kgPyByeCA6ICdeKD86JyArIHJ4LnNvdXJjZSArICcpJywgZmxhZ3MpO1xuICAgICAgdmFyIGxpbSA9IGxpbWl0ID09PSB1bmRlZmluZWQgPyBNQVhfVUlOVDMyIDogbGltaXQgPj4+IDA7XG4gICAgICBpZiAobGltID09PSAwKSByZXR1cm4gW107XG4gICAgICBpZiAoUy5sZW5ndGggPT09IDApIHJldHVybiBjYWxsUmVnRXhwRXhlYyhzcGxpdHRlciwgUykgPT09IG51bGwgPyBbU10gOiBbXTtcbiAgICAgIHZhciBwID0gMDtcbiAgICAgIHZhciBxID0gMDtcbiAgICAgIHZhciBBID0gW107XG4gICAgICB3aGlsZSAocSA8IFMubGVuZ3RoKSB7XG4gICAgICAgIHNwbGl0dGVyLmxhc3RJbmRleCA9IFNVUFBPUlRTX1kgPyBxIDogMDtcbiAgICAgICAgdmFyIHogPSBjYWxsUmVnRXhwRXhlYyhzcGxpdHRlciwgU1VQUE9SVFNfWSA/IFMgOiBTLnNsaWNlKHEpKTtcbiAgICAgICAgdmFyIGU7XG4gICAgICAgIGlmIChcbiAgICAgICAgICB6ID09PSBudWxsIHx8XG4gICAgICAgICAgKGUgPSAkbWluKHRvTGVuZ3RoKHNwbGl0dGVyLmxhc3RJbmRleCArIChTVVBQT1JUU19ZID8gMCA6IHEpKSwgUy5sZW5ndGgpKSA9PT0gcFxuICAgICAgICApIHtcbiAgICAgICAgICBxID0gYWR2YW5jZVN0cmluZ0luZGV4KFMsIHEsIHVuaWNvZGVNYXRjaGluZyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgQS5wdXNoKFMuc2xpY2UocCwgcSkpO1xuICAgICAgICAgIGlmIChBLmxlbmd0aCA9PT0gbGltKSByZXR1cm4gQTtcbiAgICAgICAgICBmb3IgKHZhciBpID0gMTsgaSA8PSB6Lmxlbmd0aCAtIDE7IGkrKykge1xuICAgICAgICAgICAgQS5wdXNoKHpbaV0pO1xuICAgICAgICAgICAgaWYgKEEubGVuZ3RoID09PSBsaW0pIHJldHVybiBBO1xuICAgICAgICAgIH1cbiAgICAgICAgICBxID0gcCA9IGU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIEEucHVzaChTLnNsaWNlKHApKTtcbiAgICAgIHJldHVybiBBO1xuICAgIH1cbiAgXTtcbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xucmVxdWlyZSgnLi9lczYucmVnZXhwLmZsYWdzJyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciAkZmxhZ3MgPSByZXF1aXJlKCcuL19mbGFncycpO1xudmFyIERFU0NSSVBUT1JTID0gcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKTtcbnZhciBUT19TVFJJTkcgPSAndG9TdHJpbmcnO1xudmFyICR0b1N0cmluZyA9IC8uL1tUT19TVFJJTkddO1xuXG52YXIgZGVmaW5lID0gZnVuY3Rpb24gKGZuKSB7XG4gIHJlcXVpcmUoJy4vX3JlZGVmaW5lJykoUmVnRXhwLnByb3RvdHlwZSwgVE9fU1RSSU5HLCBmbiwgdHJ1ZSk7XG59O1xuXG4vLyAyMS4yLjUuMTQgUmVnRXhwLnByb3RvdHlwZS50b1N0cmluZygpXG5pZiAocmVxdWlyZSgnLi9fZmFpbHMnKShmdW5jdGlvbiAoKSB7IHJldHVybiAkdG9TdHJpbmcuY2FsbCh7IHNvdXJjZTogJ2EnLCBmbGFnczogJ2InIH0pICE9ICcvYS9iJzsgfSkpIHtcbiAgZGVmaW5lKGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICAgIHZhciBSID0gYW5PYmplY3QodGhpcyk7XG4gICAgcmV0dXJuICcvJy5jb25jYXQoUi5zb3VyY2UsICcvJyxcbiAgICAgICdmbGFncycgaW4gUiA/IFIuZmxhZ3MgOiAhREVTQ1JJUFRPUlMgJiYgUiBpbnN0YW5jZW9mIFJlZ0V4cCA/ICRmbGFncy5jYWxsKFIpIDogdW5kZWZpbmVkKTtcbiAgfSk7XG4vLyBGRjQ0LSBSZWdFeHAjdG9TdHJpbmcgaGFzIGEgd3JvbmcgbmFtZVxufSBlbHNlIGlmICgkdG9TdHJpbmcubmFtZSAhPSBUT19TVFJJTkcpIHtcbiAgZGVmaW5lKGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICAgIHJldHVybiAkdG9TdHJpbmcuY2FsbCh0aGlzKTtcbiAgfSk7XG59XG4iLCIndXNlIHN0cmljdCc7XG52YXIgc3Ryb25nID0gcmVxdWlyZSgnLi9fY29sbGVjdGlvbi1zdHJvbmcnKTtcbnZhciB2YWxpZGF0ZSA9IHJlcXVpcmUoJy4vX3ZhbGlkYXRlLWNvbGxlY3Rpb24nKTtcbnZhciBTRVQgPSAnU2V0JztcblxuLy8gMjMuMiBTZXQgT2JqZWN0c1xubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL19jb2xsZWN0aW9uJykoU0VULCBmdW5jdGlvbiAoZ2V0KSB7XG4gIHJldHVybiBmdW5jdGlvbiBTZXQoKSB7IHJldHVybiBnZXQodGhpcywgYXJndW1lbnRzLmxlbmd0aCA+IDAgPyBhcmd1bWVudHNbMF0gOiB1bmRlZmluZWQpOyB9O1xufSwge1xuICAvLyAyMy4yLjMuMSBTZXQucHJvdG90eXBlLmFkZCh2YWx1ZSlcbiAgYWRkOiBmdW5jdGlvbiBhZGQodmFsdWUpIHtcbiAgICByZXR1cm4gc3Ryb25nLmRlZih2YWxpZGF0ZSh0aGlzLCBTRVQpLCB2YWx1ZSA9IHZhbHVlID09PSAwID8gMCA6IHZhbHVlLCB2YWx1ZSk7XG4gIH1cbn0sIHN0cm9uZyk7XG4iLCIndXNlIHN0cmljdCc7XG4vLyBCLjIuMy4yIFN0cmluZy5wcm90b3R5cGUuYW5jaG9yKG5hbWUpXG5yZXF1aXJlKCcuL19zdHJpbmctaHRtbCcpKCdhbmNob3InLCBmdW5jdGlvbiAoY3JlYXRlSFRNTCkge1xuICByZXR1cm4gZnVuY3Rpb24gYW5jaG9yKG5hbWUpIHtcbiAgICByZXR1cm4gY3JlYXRlSFRNTCh0aGlzLCAnYScsICduYW1lJywgbmFtZSk7XG4gIH07XG59KTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIEIuMi4zLjMgU3RyaW5nLnByb3RvdHlwZS5iaWcoKVxucmVxdWlyZSgnLi9fc3RyaW5nLWh0bWwnKSgnYmlnJywgZnVuY3Rpb24gKGNyZWF0ZUhUTUwpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIGJpZygpIHtcbiAgICByZXR1cm4gY3JlYXRlSFRNTCh0aGlzLCAnYmlnJywgJycsICcnKTtcbiAgfTtcbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gQi4yLjMuNCBTdHJpbmcucHJvdG90eXBlLmJsaW5rKClcbnJlcXVpcmUoJy4vX3N0cmluZy1odG1sJykoJ2JsaW5rJywgZnVuY3Rpb24gKGNyZWF0ZUhUTUwpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIGJsaW5rKCkge1xuICAgIHJldHVybiBjcmVhdGVIVE1MKHRoaXMsICdibGluaycsICcnLCAnJyk7XG4gIH07XG59KTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIEIuMi4zLjUgU3RyaW5nLnByb3RvdHlwZS5ib2xkKClcbnJlcXVpcmUoJy4vX3N0cmluZy1odG1sJykoJ2JvbGQnLCBmdW5jdGlvbiAoY3JlYXRlSFRNTCkge1xuICByZXR1cm4gZnVuY3Rpb24gYm9sZCgpIHtcbiAgICByZXR1cm4gY3JlYXRlSFRNTCh0aGlzLCAnYicsICcnLCAnJyk7XG4gIH07XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgJGF0ID0gcmVxdWlyZSgnLi9fc3RyaW5nLWF0JykoZmFsc2UpO1xuJGV4cG9ydCgkZXhwb3J0LlAsICdTdHJpbmcnLCB7XG4gIC8vIDIxLjEuMy4zIFN0cmluZy5wcm90b3R5cGUuY29kZVBvaW50QXQocG9zKVxuICBjb2RlUG9pbnRBdDogZnVuY3Rpb24gY29kZVBvaW50QXQocG9zKSB7XG4gICAgcmV0dXJuICRhdCh0aGlzLCBwb3MpO1xuICB9XG59KTtcbiIsIi8vIDIxLjEuMy42IFN0cmluZy5wcm90b3R5cGUuZW5kc1dpdGgoc2VhcmNoU3RyaW5nIFssIGVuZFBvc2l0aW9uXSlcbid1c2Ugc3RyaWN0JztcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuL190by1sZW5ndGgnKTtcbnZhciBjb250ZXh0ID0gcmVxdWlyZSgnLi9fc3RyaW5nLWNvbnRleHQnKTtcbnZhciBFTkRTX1dJVEggPSAnZW5kc1dpdGgnO1xudmFyICRlbmRzV2l0aCA9ICcnW0VORFNfV0lUSF07XG5cbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogcmVxdWlyZSgnLi9fZmFpbHMtaXMtcmVnZXhwJykoRU5EU19XSVRIKSwgJ1N0cmluZycsIHtcbiAgZW5kc1dpdGg6IGZ1bmN0aW9uIGVuZHNXaXRoKHNlYXJjaFN0cmluZyAvKiAsIGVuZFBvc2l0aW9uID0gQGxlbmd0aCAqLykge1xuICAgIHZhciB0aGF0ID0gY29udGV4dCh0aGlzLCBzZWFyY2hTdHJpbmcsIEVORFNfV0lUSCk7XG4gICAgdmFyIGVuZFBvc2l0aW9uID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQ7XG4gICAgdmFyIGxlbiA9IHRvTGVuZ3RoKHRoYXQubGVuZ3RoKTtcbiAgICB2YXIgZW5kID0gZW5kUG9zaXRpb24gPT09IHVuZGVmaW5lZCA/IGxlbiA6IE1hdGgubWluKHRvTGVuZ3RoKGVuZFBvc2l0aW9uKSwgbGVuKTtcbiAgICB2YXIgc2VhcmNoID0gU3RyaW5nKHNlYXJjaFN0cmluZyk7XG4gICAgcmV0dXJuICRlbmRzV2l0aFxuICAgICAgPyAkZW5kc1dpdGguY2FsbCh0aGF0LCBzZWFyY2gsIGVuZClcbiAgICAgIDogdGhhdC5zbGljZShlbmQgLSBzZWFyY2gubGVuZ3RoLCBlbmQpID09PSBzZWFyY2g7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gQi4yLjMuNiBTdHJpbmcucHJvdG90eXBlLmZpeGVkKClcbnJlcXVpcmUoJy4vX3N0cmluZy1odG1sJykoJ2ZpeGVkJywgZnVuY3Rpb24gKGNyZWF0ZUhUTUwpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIGZpeGVkKCkge1xuICAgIHJldHVybiBjcmVhdGVIVE1MKHRoaXMsICd0dCcsICcnLCAnJyk7XG4gIH07XG59KTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIEIuMi4zLjcgU3RyaW5nLnByb3RvdHlwZS5mb250Y29sb3IoY29sb3IpXG5yZXF1aXJlKCcuL19zdHJpbmctaHRtbCcpKCdmb250Y29sb3InLCBmdW5jdGlvbiAoY3JlYXRlSFRNTCkge1xuICByZXR1cm4gZnVuY3Rpb24gZm9udGNvbG9yKGNvbG9yKSB7XG4gICAgcmV0dXJuIGNyZWF0ZUhUTUwodGhpcywgJ2ZvbnQnLCAnY29sb3InLCBjb2xvcik7XG4gIH07XG59KTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIEIuMi4zLjggU3RyaW5nLnByb3RvdHlwZS5mb250c2l6ZShzaXplKVxucmVxdWlyZSgnLi9fc3RyaW5nLWh0bWwnKSgnZm9udHNpemUnLCBmdW5jdGlvbiAoY3JlYXRlSFRNTCkge1xuICByZXR1cm4gZnVuY3Rpb24gZm9udHNpemUoc2l6ZSkge1xuICAgIHJldHVybiBjcmVhdGVIVE1MKHRoaXMsICdmb250JywgJ3NpemUnLCBzaXplKTtcbiAgfTtcbn0pO1xuIiwidmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciB0b0Fic29sdXRlSW5kZXggPSByZXF1aXJlKCcuL190by1hYnNvbHV0ZS1pbmRleCcpO1xudmFyIGZyb21DaGFyQ29kZSA9IFN0cmluZy5mcm9tQ2hhckNvZGU7XG52YXIgJGZyb21Db2RlUG9pbnQgPSBTdHJpbmcuZnJvbUNvZGVQb2ludDtcblxuLy8gbGVuZ3RoIHNob3VsZCBiZSAxLCBvbGQgRkYgcHJvYmxlbVxuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAoISEkZnJvbUNvZGVQb2ludCAmJiAkZnJvbUNvZGVQb2ludC5sZW5ndGggIT0gMSksICdTdHJpbmcnLCB7XG4gIC8vIDIxLjEuMi4yIFN0cmluZy5mcm9tQ29kZVBvaW50KC4uLmNvZGVQb2ludHMpXG4gIGZyb21Db2RlUG9pbnQ6IGZ1bmN0aW9uIGZyb21Db2RlUG9pbnQoeCkgeyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVudXNlZC12YXJzXG4gICAgdmFyIHJlcyA9IFtdO1xuICAgIHZhciBhTGVuID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgICB2YXIgaSA9IDA7XG4gICAgdmFyIGNvZGU7XG4gICAgd2hpbGUgKGFMZW4gPiBpKSB7XG4gICAgICBjb2RlID0gK2FyZ3VtZW50c1tpKytdO1xuICAgICAgaWYgKHRvQWJzb2x1dGVJbmRleChjb2RlLCAweDEwZmZmZikgIT09IGNvZGUpIHRocm93IFJhbmdlRXJyb3IoY29kZSArICcgaXMgbm90IGEgdmFsaWQgY29kZSBwb2ludCcpO1xuICAgICAgcmVzLnB1c2goY29kZSA8IDB4MTAwMDBcbiAgICAgICAgPyBmcm9tQ2hhckNvZGUoY29kZSlcbiAgICAgICAgOiBmcm9tQ2hhckNvZGUoKChjb2RlIC09IDB4MTAwMDApID4+IDEwKSArIDB4ZDgwMCwgY29kZSAlIDB4NDAwICsgMHhkYzAwKVxuICAgICAgKTtcbiAgICB9IHJldHVybiByZXMuam9pbignJyk7XG4gIH1cbn0pO1xuIiwiLy8gMjEuMS4zLjcgU3RyaW5nLnByb3RvdHlwZS5pbmNsdWRlcyhzZWFyY2hTdHJpbmcsIHBvc2l0aW9uID0gMClcbid1c2Ugc3RyaWN0JztcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgY29udGV4dCA9IHJlcXVpcmUoJy4vX3N0cmluZy1jb250ZXh0Jyk7XG52YXIgSU5DTFVERVMgPSAnaW5jbHVkZXMnO1xuXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqIHJlcXVpcmUoJy4vX2ZhaWxzLWlzLXJlZ2V4cCcpKElOQ0xVREVTKSwgJ1N0cmluZycsIHtcbiAgaW5jbHVkZXM6IGZ1bmN0aW9uIGluY2x1ZGVzKHNlYXJjaFN0cmluZyAvKiAsIHBvc2l0aW9uID0gMCAqLykge1xuICAgIHJldHVybiAhIX5jb250ZXh0KHRoaXMsIHNlYXJjaFN0cmluZywgSU5DTFVERVMpXG4gICAgICAuaW5kZXhPZihzZWFyY2hTdHJpbmcsIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKTtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG4vLyBCLjIuMy45IFN0cmluZy5wcm90b3R5cGUuaXRhbGljcygpXG5yZXF1aXJlKCcuL19zdHJpbmctaHRtbCcpKCdpdGFsaWNzJywgZnVuY3Rpb24gKGNyZWF0ZUhUTUwpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIGl0YWxpY3MoKSB7XG4gICAgcmV0dXJuIGNyZWF0ZUhUTUwodGhpcywgJ2knLCAnJywgJycpO1xuICB9O1xufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJGF0ID0gcmVxdWlyZSgnLi9fc3RyaW5nLWF0JykodHJ1ZSk7XG5cbi8vIDIxLjEuMy4yNyBTdHJpbmcucHJvdG90eXBlW0BAaXRlcmF0b3JdKClcbnJlcXVpcmUoJy4vX2l0ZXItZGVmaW5lJykoU3RyaW5nLCAnU3RyaW5nJywgZnVuY3Rpb24gKGl0ZXJhdGVkKSB7XG4gIHRoaXMuX3QgPSBTdHJpbmcoaXRlcmF0ZWQpOyAvLyB0YXJnZXRcbiAgdGhpcy5faSA9IDA7ICAgICAgICAgICAgICAgIC8vIG5leHQgaW5kZXhcbi8vIDIxLjEuNS4yLjEgJVN0cmluZ0l0ZXJhdG9yUHJvdG90eXBlJS5uZXh0KClcbn0sIGZ1bmN0aW9uICgpIHtcbiAgdmFyIE8gPSB0aGlzLl90O1xuICB2YXIgaW5kZXggPSB0aGlzLl9pO1xuICB2YXIgcG9pbnQ7XG4gIGlmIChpbmRleCA+PSBPLmxlbmd0aCkgcmV0dXJuIHsgdmFsdWU6IHVuZGVmaW5lZCwgZG9uZTogdHJ1ZSB9O1xuICBwb2ludCA9ICRhdChPLCBpbmRleCk7XG4gIHRoaXMuX2kgKz0gcG9pbnQubGVuZ3RoO1xuICByZXR1cm4geyB2YWx1ZTogcG9pbnQsIGRvbmU6IGZhbHNlIH07XG59KTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIEIuMi4zLjEwIFN0cmluZy5wcm90b3R5cGUubGluayh1cmwpXG5yZXF1aXJlKCcuL19zdHJpbmctaHRtbCcpKCdsaW5rJywgZnVuY3Rpb24gKGNyZWF0ZUhUTUwpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIGxpbmsodXJsKSB7XG4gICAgcmV0dXJuIGNyZWF0ZUhUTUwodGhpcywgJ2EnLCAnaHJlZicsIHVybCk7XG4gIH07XG59KTtcbiIsInZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgdG9JT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8taW9iamVjdCcpO1xudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi9fdG8tbGVuZ3RoJyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnU3RyaW5nJywge1xuICAvLyAyMS4xLjIuNCBTdHJpbmcucmF3KGNhbGxTaXRlLCAuLi5zdWJzdGl0dXRpb25zKVxuICByYXc6IGZ1bmN0aW9uIHJhdyhjYWxsU2l0ZSkge1xuICAgIHZhciB0cGwgPSB0b0lPYmplY3QoY2FsbFNpdGUucmF3KTtcbiAgICB2YXIgbGVuID0gdG9MZW5ndGgodHBsLmxlbmd0aCk7XG4gICAgdmFyIGFMZW4gPSBhcmd1bWVudHMubGVuZ3RoO1xuICAgIHZhciByZXMgPSBbXTtcbiAgICB2YXIgaSA9IDA7XG4gICAgd2hpbGUgKGxlbiA+IGkpIHtcbiAgICAgIHJlcy5wdXNoKFN0cmluZyh0cGxbaSsrXSkpO1xuICAgICAgaWYgKGkgPCBhTGVuKSByZXMucHVzaChTdHJpbmcoYXJndW1lbnRzW2ldKSk7XG4gICAgfSByZXR1cm4gcmVzLmpvaW4oJycpO1xuICB9XG59KTtcbiIsInZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5QLCAnU3RyaW5nJywge1xuICAvLyAyMS4xLjMuMTMgU3RyaW5nLnByb3RvdHlwZS5yZXBlYXQoY291bnQpXG4gIHJlcGVhdDogcmVxdWlyZSgnLi9fc3RyaW5nLXJlcGVhdCcpXG59KTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIEIuMi4zLjExIFN0cmluZy5wcm90b3R5cGUuc21hbGwoKVxucmVxdWlyZSgnLi9fc3RyaW5nLWh0bWwnKSgnc21hbGwnLCBmdW5jdGlvbiAoY3JlYXRlSFRNTCkge1xuICByZXR1cm4gZnVuY3Rpb24gc21hbGwoKSB7XG4gICAgcmV0dXJuIGNyZWF0ZUhUTUwodGhpcywgJ3NtYWxsJywgJycsICcnKTtcbiAgfTtcbn0pO1xuIiwiLy8gMjEuMS4zLjE4IFN0cmluZy5wcm90b3R5cGUuc3RhcnRzV2l0aChzZWFyY2hTdHJpbmcgWywgcG9zaXRpb24gXSlcbid1c2Ugc3RyaWN0JztcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuL190by1sZW5ndGgnKTtcbnZhciBjb250ZXh0ID0gcmVxdWlyZSgnLi9fc3RyaW5nLWNvbnRleHQnKTtcbnZhciBTVEFSVFNfV0lUSCA9ICdzdGFydHNXaXRoJztcbnZhciAkc3RhcnRzV2l0aCA9ICcnW1NUQVJUU19XSVRIXTtcblxuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiByZXF1aXJlKCcuL19mYWlscy1pcy1yZWdleHAnKShTVEFSVFNfV0lUSCksICdTdHJpbmcnLCB7XG4gIHN0YXJ0c1dpdGg6IGZ1bmN0aW9uIHN0YXJ0c1dpdGgoc2VhcmNoU3RyaW5nIC8qICwgcG9zaXRpb24gPSAwICovKSB7XG4gICAgdmFyIHRoYXQgPSBjb250ZXh0KHRoaXMsIHNlYXJjaFN0cmluZywgU1RBUlRTX1dJVEgpO1xuICAgIHZhciBpbmRleCA9IHRvTGVuZ3RoKE1hdGgubWluKGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkLCB0aGF0Lmxlbmd0aCkpO1xuICAgIHZhciBzZWFyY2ggPSBTdHJpbmcoc2VhcmNoU3RyaW5nKTtcbiAgICByZXR1cm4gJHN0YXJ0c1dpdGhcbiAgICAgID8gJHN0YXJ0c1dpdGguY2FsbCh0aGF0LCBzZWFyY2gsIGluZGV4KVxuICAgICAgOiB0aGF0LnNsaWNlKGluZGV4LCBpbmRleCArIHNlYXJjaC5sZW5ndGgpID09PSBzZWFyY2g7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gQi4yLjMuMTIgU3RyaW5nLnByb3RvdHlwZS5zdHJpa2UoKVxucmVxdWlyZSgnLi9fc3RyaW5nLWh0bWwnKSgnc3RyaWtlJywgZnVuY3Rpb24gKGNyZWF0ZUhUTUwpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIHN0cmlrZSgpIHtcbiAgICByZXR1cm4gY3JlYXRlSFRNTCh0aGlzLCAnc3RyaWtlJywgJycsICcnKTtcbiAgfTtcbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gQi4yLjMuMTMgU3RyaW5nLnByb3RvdHlwZS5zdWIoKVxucmVxdWlyZSgnLi9fc3RyaW5nLWh0bWwnKSgnc3ViJywgZnVuY3Rpb24gKGNyZWF0ZUhUTUwpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIHN1YigpIHtcbiAgICByZXR1cm4gY3JlYXRlSFRNTCh0aGlzLCAnc3ViJywgJycsICcnKTtcbiAgfTtcbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gQi4yLjMuMTQgU3RyaW5nLnByb3RvdHlwZS5zdXAoKVxucmVxdWlyZSgnLi9fc3RyaW5nLWh0bWwnKSgnc3VwJywgZnVuY3Rpb24gKGNyZWF0ZUhUTUwpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIHN1cCgpIHtcbiAgICByZXR1cm4gY3JlYXRlSFRNTCh0aGlzLCAnc3VwJywgJycsICcnKTtcbiAgfTtcbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gMjEuMS4zLjI1IFN0cmluZy5wcm90b3R5cGUudHJpbSgpXG5yZXF1aXJlKCcuL19zdHJpbmctdHJpbScpKCd0cmltJywgZnVuY3Rpb24gKCR0cmltKSB7XG4gIHJldHVybiBmdW5jdGlvbiB0cmltKCkge1xuICAgIHJldHVybiAkdHJpbSh0aGlzLCAzKTtcbiAgfTtcbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gRUNNQVNjcmlwdCA2IHN5bWJvbHMgc2hpbVxudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpO1xudmFyIGhhcyA9IHJlcXVpcmUoJy4vX2hhcycpO1xudmFyIERFU0NSSVBUT1JTID0gcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKTtcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgcmVkZWZpbmUgPSByZXF1aXJlKCcuL19yZWRlZmluZScpO1xudmFyIE1FVEEgPSByZXF1aXJlKCcuL19tZXRhJykuS0VZO1xudmFyICRmYWlscyA9IHJlcXVpcmUoJy4vX2ZhaWxzJyk7XG52YXIgc2hhcmVkID0gcmVxdWlyZSgnLi9fc2hhcmVkJyk7XG52YXIgc2V0VG9TdHJpbmdUYWcgPSByZXF1aXJlKCcuL19zZXQtdG8tc3RyaW5nLXRhZycpO1xudmFyIHVpZCA9IHJlcXVpcmUoJy4vX3VpZCcpO1xudmFyIHdrcyA9IHJlcXVpcmUoJy4vX3drcycpO1xudmFyIHdrc0V4dCA9IHJlcXVpcmUoJy4vX3drcy1leHQnKTtcbnZhciB3a3NEZWZpbmUgPSByZXF1aXJlKCcuL193a3MtZGVmaW5lJyk7XG52YXIgZW51bUtleXMgPSByZXF1aXJlKCcuL19lbnVtLWtleXMnKTtcbnZhciBpc0FycmF5ID0gcmVxdWlyZSgnLi9faXMtYXJyYXknKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuL190by1vYmplY3QnKTtcbnZhciB0b0lPYmplY3QgPSByZXF1aXJlKCcuL190by1pb2JqZWN0Jyk7XG52YXIgdG9QcmltaXRpdmUgPSByZXF1aXJlKCcuL190by1wcmltaXRpdmUnKTtcbnZhciBjcmVhdGVEZXNjID0gcmVxdWlyZSgnLi9fcHJvcGVydHktZGVzYycpO1xudmFyIF9jcmVhdGUgPSByZXF1aXJlKCcuL19vYmplY3QtY3JlYXRlJyk7XG52YXIgZ09QTkV4dCA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BuLWV4dCcpO1xudmFyICRHT1BEID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcGQnKTtcbnZhciAkR09QUyA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BzJyk7XG52YXIgJERQID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJyk7XG52YXIgJGtleXMgPSByZXF1aXJlKCcuL19vYmplY3Qta2V5cycpO1xudmFyIGdPUEQgPSAkR09QRC5mO1xudmFyIGRQID0gJERQLmY7XG52YXIgZ09QTiA9IGdPUE5FeHQuZjtcbnZhciAkU3ltYm9sID0gZ2xvYmFsLlN5bWJvbDtcbnZhciAkSlNPTiA9IGdsb2JhbC5KU09OO1xudmFyIF9zdHJpbmdpZnkgPSAkSlNPTiAmJiAkSlNPTi5zdHJpbmdpZnk7XG52YXIgUFJPVE9UWVBFID0gJ3Byb3RvdHlwZSc7XG52YXIgSElEREVOID0gd2tzKCdfaGlkZGVuJyk7XG52YXIgVE9fUFJJTUlUSVZFID0gd2tzKCd0b1ByaW1pdGl2ZScpO1xudmFyIGlzRW51bSA9IHt9LnByb3BlcnR5SXNFbnVtZXJhYmxlO1xudmFyIFN5bWJvbFJlZ2lzdHJ5ID0gc2hhcmVkKCdzeW1ib2wtcmVnaXN0cnknKTtcbnZhciBBbGxTeW1ib2xzID0gc2hhcmVkKCdzeW1ib2xzJyk7XG52YXIgT1BTeW1ib2xzID0gc2hhcmVkKCdvcC1zeW1ib2xzJyk7XG52YXIgT2JqZWN0UHJvdG8gPSBPYmplY3RbUFJPVE9UWVBFXTtcbnZhciBVU0VfTkFUSVZFID0gdHlwZW9mICRTeW1ib2wgPT0gJ2Z1bmN0aW9uJyAmJiAhISRHT1BTLmY7XG52YXIgUU9iamVjdCA9IGdsb2JhbC5RT2JqZWN0O1xuLy8gRG9uJ3QgdXNlIHNldHRlcnMgaW4gUXQgU2NyaXB0LCBodHRwczovL2dpdGh1Yi5jb20vemxvaXJvY2svY29yZS1qcy9pc3N1ZXMvMTczXG52YXIgc2V0dGVyID0gIVFPYmplY3QgfHwgIVFPYmplY3RbUFJPVE9UWVBFXSB8fCAhUU9iamVjdFtQUk9UT1RZUEVdLmZpbmRDaGlsZDtcblxuLy8gZmFsbGJhY2sgZm9yIG9sZCBBbmRyb2lkLCBodHRwczovL2NvZGUuZ29vZ2xlLmNvbS9wL3Y4L2lzc3Vlcy9kZXRhaWw/aWQ9Njg3XG52YXIgc2V0U3ltYm9sRGVzYyA9IERFU0NSSVBUT1JTICYmICRmYWlscyhmdW5jdGlvbiAoKSB7XG4gIHJldHVybiBfY3JlYXRlKGRQKHt9LCAnYScsIHtcbiAgICBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGRQKHRoaXMsICdhJywgeyB2YWx1ZTogNyB9KS5hOyB9XG4gIH0pKS5hICE9IDc7XG59KSA/IGZ1bmN0aW9uIChpdCwga2V5LCBEKSB7XG4gIHZhciBwcm90b0Rlc2MgPSBnT1BEKE9iamVjdFByb3RvLCBrZXkpO1xuICBpZiAocHJvdG9EZXNjKSBkZWxldGUgT2JqZWN0UHJvdG9ba2V5XTtcbiAgZFAoaXQsIGtleSwgRCk7XG4gIGlmIChwcm90b0Rlc2MgJiYgaXQgIT09IE9iamVjdFByb3RvKSBkUChPYmplY3RQcm90bywga2V5LCBwcm90b0Rlc2MpO1xufSA6IGRQO1xuXG52YXIgd3JhcCA9IGZ1bmN0aW9uICh0YWcpIHtcbiAgdmFyIHN5bSA9IEFsbFN5bWJvbHNbdGFnXSA9IF9jcmVhdGUoJFN5bWJvbFtQUk9UT1RZUEVdKTtcbiAgc3ltLl9rID0gdGFnO1xuICByZXR1cm4gc3ltO1xufTtcblxudmFyIGlzU3ltYm9sID0gVVNFX05BVElWRSAmJiB0eXBlb2YgJFN5bWJvbC5pdGVyYXRvciA9PSAnc3ltYm9sJyA/IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gdHlwZW9mIGl0ID09ICdzeW1ib2wnO1xufSA6IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gaXQgaW5zdGFuY2VvZiAkU3ltYm9sO1xufTtcblxudmFyICRkZWZpbmVQcm9wZXJ0eSA9IGZ1bmN0aW9uIGRlZmluZVByb3BlcnR5KGl0LCBrZXksIEQpIHtcbiAgaWYgKGl0ID09PSBPYmplY3RQcm90bykgJGRlZmluZVByb3BlcnR5KE9QU3ltYm9scywga2V5LCBEKTtcbiAgYW5PYmplY3QoaXQpO1xuICBrZXkgPSB0b1ByaW1pdGl2ZShrZXksIHRydWUpO1xuICBhbk9iamVjdChEKTtcbiAgaWYgKGhhcyhBbGxTeW1ib2xzLCBrZXkpKSB7XG4gICAgaWYgKCFELmVudW1lcmFibGUpIHtcbiAgICAgIGlmICghaGFzKGl0LCBISURERU4pKSBkUChpdCwgSElEREVOLCBjcmVhdGVEZXNjKDEsIHt9KSk7XG4gICAgICBpdFtISURERU5dW2tleV0gPSB0cnVlO1xuICAgIH0gZWxzZSB7XG4gICAgICBpZiAoaGFzKGl0LCBISURERU4pICYmIGl0W0hJRERFTl1ba2V5XSkgaXRbSElEREVOXVtrZXldID0gZmFsc2U7XG4gICAgICBEID0gX2NyZWF0ZShELCB7IGVudW1lcmFibGU6IGNyZWF0ZURlc2MoMCwgZmFsc2UpIH0pO1xuICAgIH0gcmV0dXJuIHNldFN5bWJvbERlc2MoaXQsIGtleSwgRCk7XG4gIH0gcmV0dXJuIGRQKGl0LCBrZXksIEQpO1xufTtcbnZhciAkZGVmaW5lUHJvcGVydGllcyA9IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXMoaXQsIFApIHtcbiAgYW5PYmplY3QoaXQpO1xuICB2YXIga2V5cyA9IGVudW1LZXlzKFAgPSB0b0lPYmplY3QoUCkpO1xuICB2YXIgaSA9IDA7XG4gIHZhciBsID0ga2V5cy5sZW5ndGg7XG4gIHZhciBrZXk7XG4gIHdoaWxlIChsID4gaSkgJGRlZmluZVByb3BlcnR5KGl0LCBrZXkgPSBrZXlzW2krK10sIFBba2V5XSk7XG4gIHJldHVybiBpdDtcbn07XG52YXIgJGNyZWF0ZSA9IGZ1bmN0aW9uIGNyZWF0ZShpdCwgUCkge1xuICByZXR1cm4gUCA9PT0gdW5kZWZpbmVkID8gX2NyZWF0ZShpdCkgOiAkZGVmaW5lUHJvcGVydGllcyhfY3JlYXRlKGl0KSwgUCk7XG59O1xudmFyICRwcm9wZXJ0eUlzRW51bWVyYWJsZSA9IGZ1bmN0aW9uIHByb3BlcnR5SXNFbnVtZXJhYmxlKGtleSkge1xuICB2YXIgRSA9IGlzRW51bS5jYWxsKHRoaXMsIGtleSA9IHRvUHJpbWl0aXZlKGtleSwgdHJ1ZSkpO1xuICBpZiAodGhpcyA9PT0gT2JqZWN0UHJvdG8gJiYgaGFzKEFsbFN5bWJvbHMsIGtleSkgJiYgIWhhcyhPUFN5bWJvbHMsIGtleSkpIHJldHVybiBmYWxzZTtcbiAgcmV0dXJuIEUgfHwgIWhhcyh0aGlzLCBrZXkpIHx8ICFoYXMoQWxsU3ltYm9scywga2V5KSB8fCBoYXModGhpcywgSElEREVOKSAmJiB0aGlzW0hJRERFTl1ba2V5XSA/IEUgOiB0cnVlO1xufTtcbnZhciAkZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID0gZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGl0LCBrZXkpIHtcbiAgaXQgPSB0b0lPYmplY3QoaXQpO1xuICBrZXkgPSB0b1ByaW1pdGl2ZShrZXksIHRydWUpO1xuICBpZiAoaXQgPT09IE9iamVjdFByb3RvICYmIGhhcyhBbGxTeW1ib2xzLCBrZXkpICYmICFoYXMoT1BTeW1ib2xzLCBrZXkpKSByZXR1cm47XG4gIHZhciBEID0gZ09QRChpdCwga2V5KTtcbiAgaWYgKEQgJiYgaGFzKEFsbFN5bWJvbHMsIGtleSkgJiYgIShoYXMoaXQsIEhJRERFTikgJiYgaXRbSElEREVOXVtrZXldKSkgRC5lbnVtZXJhYmxlID0gdHJ1ZTtcbiAgcmV0dXJuIEQ7XG59O1xudmFyICRnZXRPd25Qcm9wZXJ0eU5hbWVzID0gZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlOYW1lcyhpdCkge1xuICB2YXIgbmFtZXMgPSBnT1BOKHRvSU9iamVjdChpdCkpO1xuICB2YXIgcmVzdWx0ID0gW107XG4gIHZhciBpID0gMDtcbiAgdmFyIGtleTtcbiAgd2hpbGUgKG5hbWVzLmxlbmd0aCA+IGkpIHtcbiAgICBpZiAoIWhhcyhBbGxTeW1ib2xzLCBrZXkgPSBuYW1lc1tpKytdKSAmJiBrZXkgIT0gSElEREVOICYmIGtleSAhPSBNRVRBKSByZXN1bHQucHVzaChrZXkpO1xuICB9IHJldHVybiByZXN1bHQ7XG59O1xudmFyICRnZXRPd25Qcm9wZXJ0eVN5bWJvbHMgPSBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eVN5bWJvbHMoaXQpIHtcbiAgdmFyIElTX09QID0gaXQgPT09IE9iamVjdFByb3RvO1xuICB2YXIgbmFtZXMgPSBnT1BOKElTX09QID8gT1BTeW1ib2xzIDogdG9JT2JqZWN0KGl0KSk7XG4gIHZhciByZXN1bHQgPSBbXTtcbiAgdmFyIGkgPSAwO1xuICB2YXIga2V5O1xuICB3aGlsZSAobmFtZXMubGVuZ3RoID4gaSkge1xuICAgIGlmIChoYXMoQWxsU3ltYm9scywga2V5ID0gbmFtZXNbaSsrXSkgJiYgKElTX09QID8gaGFzKE9iamVjdFByb3RvLCBrZXkpIDogdHJ1ZSkpIHJlc3VsdC5wdXNoKEFsbFN5bWJvbHNba2V5XSk7XG4gIH0gcmV0dXJuIHJlc3VsdDtcbn07XG5cbi8vIDE5LjQuMS4xIFN5bWJvbChbZGVzY3JpcHRpb25dKVxuaWYgKCFVU0VfTkFUSVZFKSB7XG4gICRTeW1ib2wgPSBmdW5jdGlvbiBTeW1ib2woKSB7XG4gICAgaWYgKHRoaXMgaW5zdGFuY2VvZiAkU3ltYm9sKSB0aHJvdyBUeXBlRXJyb3IoJ1N5bWJvbCBpcyBub3QgYSBjb25zdHJ1Y3RvciEnKTtcbiAgICB2YXIgdGFnID0gdWlkKGFyZ3VtZW50cy5sZW5ndGggPiAwID8gYXJndW1lbnRzWzBdIDogdW5kZWZpbmVkKTtcbiAgICB2YXIgJHNldCA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgaWYgKHRoaXMgPT09IE9iamVjdFByb3RvKSAkc2V0LmNhbGwoT1BTeW1ib2xzLCB2YWx1ZSk7XG4gICAgICBpZiAoaGFzKHRoaXMsIEhJRERFTikgJiYgaGFzKHRoaXNbSElEREVOXSwgdGFnKSkgdGhpc1tISURERU5dW3RhZ10gPSBmYWxzZTtcbiAgICAgIHNldFN5bWJvbERlc2ModGhpcywgdGFnLCBjcmVhdGVEZXNjKDEsIHZhbHVlKSk7XG4gICAgfTtcbiAgICBpZiAoREVTQ1JJUFRPUlMgJiYgc2V0dGVyKSBzZXRTeW1ib2xEZXNjKE9iamVjdFByb3RvLCB0YWcsIHsgY29uZmlndXJhYmxlOiB0cnVlLCBzZXQ6ICRzZXQgfSk7XG4gICAgcmV0dXJuIHdyYXAodGFnKTtcbiAgfTtcbiAgcmVkZWZpbmUoJFN5bWJvbFtQUk9UT1RZUEVdLCAndG9TdHJpbmcnLCBmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgICByZXR1cm4gdGhpcy5faztcbiAgfSk7XG5cbiAgJEdPUEQuZiA9ICRnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7XG4gICREUC5mID0gJGRlZmluZVByb3BlcnR5O1xuICByZXF1aXJlKCcuL19vYmplY3QtZ29wbicpLmYgPSBnT1BORXh0LmYgPSAkZ2V0T3duUHJvcGVydHlOYW1lcztcbiAgcmVxdWlyZSgnLi9fb2JqZWN0LXBpZScpLmYgPSAkcHJvcGVydHlJc0VudW1lcmFibGU7XG4gICRHT1BTLmYgPSAkZ2V0T3duUHJvcGVydHlTeW1ib2xzO1xuXG4gIGlmIChERVNDUklQVE9SUyAmJiAhcmVxdWlyZSgnLi9fbGlicmFyeScpKSB7XG4gICAgcmVkZWZpbmUoT2JqZWN0UHJvdG8sICdwcm9wZXJ0eUlzRW51bWVyYWJsZScsICRwcm9wZXJ0eUlzRW51bWVyYWJsZSwgdHJ1ZSk7XG4gIH1cblxuICB3a3NFeHQuZiA9IGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgcmV0dXJuIHdyYXAod2tzKG5hbWUpKTtcbiAgfTtcbn1cblxuJGV4cG9ydCgkZXhwb3J0LkcgKyAkZXhwb3J0LlcgKyAkZXhwb3J0LkYgKiAhVVNFX05BVElWRSwgeyBTeW1ib2w6ICRTeW1ib2wgfSk7XG5cbmZvciAodmFyIGVzNlN5bWJvbHMgPSAoXG4gIC8vIDE5LjQuMi4yLCAxOS40LjIuMywgMTkuNC4yLjQsIDE5LjQuMi42LCAxOS40LjIuOCwgMTkuNC4yLjksIDE5LjQuMi4xMCwgMTkuNC4yLjExLCAxOS40LjIuMTIsIDE5LjQuMi4xMywgMTkuNC4yLjE0XG4gICdoYXNJbnN0YW5jZSxpc0NvbmNhdFNwcmVhZGFibGUsaXRlcmF0b3IsbWF0Y2gscmVwbGFjZSxzZWFyY2gsc3BlY2llcyxzcGxpdCx0b1ByaW1pdGl2ZSx0b1N0cmluZ1RhZyx1bnNjb3BhYmxlcydcbikuc3BsaXQoJywnKSwgaiA9IDA7IGVzNlN5bWJvbHMubGVuZ3RoID4gajspd2tzKGVzNlN5bWJvbHNbaisrXSk7XG5cbmZvciAodmFyIHdlbGxLbm93blN5bWJvbHMgPSAka2V5cyh3a3Muc3RvcmUpLCBrID0gMDsgd2VsbEtub3duU3ltYm9scy5sZW5ndGggPiBrOykgd2tzRGVmaW5lKHdlbGxLbm93blN5bWJvbHNbaysrXSk7XG5cbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogIVVTRV9OQVRJVkUsICdTeW1ib2wnLCB7XG4gIC8vIDE5LjQuMi4xIFN5bWJvbC5mb3Ioa2V5KVxuICAnZm9yJzogZnVuY3Rpb24gKGtleSkge1xuICAgIHJldHVybiBoYXMoU3ltYm9sUmVnaXN0cnksIGtleSArPSAnJylcbiAgICAgID8gU3ltYm9sUmVnaXN0cnlba2V5XVxuICAgICAgOiBTeW1ib2xSZWdpc3RyeVtrZXldID0gJFN5bWJvbChrZXkpO1xuICB9LFxuICAvLyAxOS40LjIuNSBTeW1ib2wua2V5Rm9yKHN5bSlcbiAga2V5Rm9yOiBmdW5jdGlvbiBrZXlGb3Ioc3ltKSB7XG4gICAgaWYgKCFpc1N5bWJvbChzeW0pKSB0aHJvdyBUeXBlRXJyb3Ioc3ltICsgJyBpcyBub3QgYSBzeW1ib2whJyk7XG4gICAgZm9yICh2YXIga2V5IGluIFN5bWJvbFJlZ2lzdHJ5KSBpZiAoU3ltYm9sUmVnaXN0cnlba2V5XSA9PT0gc3ltKSByZXR1cm4ga2V5O1xuICB9LFxuICB1c2VTZXR0ZXI6IGZ1bmN0aW9uICgpIHsgc2V0dGVyID0gdHJ1ZTsgfSxcbiAgdXNlU2ltcGxlOiBmdW5jdGlvbiAoKSB7IHNldHRlciA9IGZhbHNlOyB9XG59KTtcblxuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAhVVNFX05BVElWRSwgJ09iamVjdCcsIHtcbiAgLy8gMTkuMS4yLjIgT2JqZWN0LmNyZWF0ZShPIFssIFByb3BlcnRpZXNdKVxuICBjcmVhdGU6ICRjcmVhdGUsXG4gIC8vIDE5LjEuMi40IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShPLCBQLCBBdHRyaWJ1dGVzKVxuICBkZWZpbmVQcm9wZXJ0eTogJGRlZmluZVByb3BlcnR5LFxuICAvLyAxOS4xLjIuMyBPYmplY3QuZGVmaW5lUHJvcGVydGllcyhPLCBQcm9wZXJ0aWVzKVxuICBkZWZpbmVQcm9wZXJ0aWVzOiAkZGVmaW5lUHJvcGVydGllcyxcbiAgLy8gMTkuMS4yLjYgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihPLCBQKVxuICBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I6ICRnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IsXG4gIC8vIDE5LjEuMi43IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKE8pXG4gIGdldE93blByb3BlcnR5TmFtZXM6ICRnZXRPd25Qcm9wZXJ0eU5hbWVzLFxuICAvLyAxOS4xLjIuOCBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKE8pXG4gIGdldE93blByb3BlcnR5U3ltYm9sczogJGdldE93blByb3BlcnR5U3ltYm9sc1xufSk7XG5cbi8vIENocm9tZSAzOCBhbmQgMzkgYE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHNgIGZhaWxzIG9uIHByaW1pdGl2ZXNcbi8vIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC92OC9pc3N1ZXMvZGV0YWlsP2lkPTM0NDNcbnZhciBGQUlMU19PTl9QUklNSVRJVkVTID0gJGZhaWxzKGZ1bmN0aW9uICgpIHsgJEdPUFMuZigxKTsgfSk7XG5cbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogRkFJTFNfT05fUFJJTUlUSVZFUywgJ09iamVjdCcsIHtcbiAgZ2V0T3duUHJvcGVydHlTeW1ib2xzOiBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eVN5bWJvbHMoaXQpIHtcbiAgICByZXR1cm4gJEdPUFMuZih0b09iamVjdChpdCkpO1xuICB9XG59KTtcblxuLy8gMjQuMy4yIEpTT04uc3RyaW5naWZ5KHZhbHVlIFssIHJlcGxhY2VyIFssIHNwYWNlXV0pXG4kSlNPTiAmJiAkZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqICghVVNFX05BVElWRSB8fCAkZmFpbHMoZnVuY3Rpb24gKCkge1xuICB2YXIgUyA9ICRTeW1ib2woKTtcbiAgLy8gTVMgRWRnZSBjb252ZXJ0cyBzeW1ib2wgdmFsdWVzIHRvIEpTT04gYXMge31cbiAgLy8gV2ViS2l0IGNvbnZlcnRzIHN5bWJvbCB2YWx1ZXMgdG8gSlNPTiBhcyBudWxsXG4gIC8vIFY4IHRocm93cyBvbiBib3hlZCBzeW1ib2xzXG4gIHJldHVybiBfc3RyaW5naWZ5KFtTXSkgIT0gJ1tudWxsXScgfHwgX3N0cmluZ2lmeSh7IGE6IFMgfSkgIT0gJ3t9JyB8fCBfc3RyaW5naWZ5KE9iamVjdChTKSkgIT0gJ3t9Jztcbn0pKSwgJ0pTT04nLCB7XG4gIHN0cmluZ2lmeTogZnVuY3Rpb24gc3RyaW5naWZ5KGl0KSB7XG4gICAgdmFyIGFyZ3MgPSBbaXRdO1xuICAgIHZhciBpID0gMTtcbiAgICB2YXIgcmVwbGFjZXIsICRyZXBsYWNlcjtcbiAgICB3aGlsZSAoYXJndW1lbnRzLmxlbmd0aCA+IGkpIGFyZ3MucHVzaChhcmd1bWVudHNbaSsrXSk7XG4gICAgJHJlcGxhY2VyID0gcmVwbGFjZXIgPSBhcmdzWzFdO1xuICAgIGlmICghaXNPYmplY3QocmVwbGFjZXIpICYmIGl0ID09PSB1bmRlZmluZWQgfHwgaXNTeW1ib2woaXQpKSByZXR1cm47IC8vIElFOCByZXR1cm5zIHN0cmluZyBvbiB1bmRlZmluZWRcbiAgICBpZiAoIWlzQXJyYXkocmVwbGFjZXIpKSByZXBsYWNlciA9IGZ1bmN0aW9uIChrZXksIHZhbHVlKSB7XG4gICAgICBpZiAodHlwZW9mICRyZXBsYWNlciA9PSAnZnVuY3Rpb24nKSB2YWx1ZSA9ICRyZXBsYWNlci5jYWxsKHRoaXMsIGtleSwgdmFsdWUpO1xuICAgICAgaWYgKCFpc1N5bWJvbCh2YWx1ZSkpIHJldHVybiB2YWx1ZTtcbiAgICB9O1xuICAgIGFyZ3NbMV0gPSByZXBsYWNlcjtcbiAgICByZXR1cm4gX3N0cmluZ2lmeS5hcHBseSgkSlNPTiwgYXJncyk7XG4gIH1cbn0pO1xuXG4vLyAxOS40LjMuNCBTeW1ib2wucHJvdG90eXBlW0BAdG9QcmltaXRpdmVdKGhpbnQpXG4kU3ltYm9sW1BST1RPVFlQRV1bVE9fUFJJTUlUSVZFXSB8fCByZXF1aXJlKCcuL19oaWRlJykoJFN5bWJvbFtQUk9UT1RZUEVdLCBUT19QUklNSVRJVkUsICRTeW1ib2xbUFJPVE9UWVBFXS52YWx1ZU9mKTtcbi8vIDE5LjQuMy41IFN5bWJvbC5wcm90b3R5cGVbQEB0b1N0cmluZ1RhZ11cbnNldFRvU3RyaW5nVGFnKCRTeW1ib2wsICdTeW1ib2wnKTtcbi8vIDIwLjIuMS45IE1hdGhbQEB0b1N0cmluZ1RhZ11cbnNldFRvU3RyaW5nVGFnKE1hdGgsICdNYXRoJywgdHJ1ZSk7XG4vLyAyNC4zLjMgSlNPTltAQHRvU3RyaW5nVGFnXVxuc2V0VG9TdHJpbmdUYWcoZ2xvYmFsLkpTT04sICdKU09OJywgdHJ1ZSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyICR0eXBlZCA9IHJlcXVpcmUoJy4vX3R5cGVkJyk7XG52YXIgYnVmZmVyID0gcmVxdWlyZSgnLi9fdHlwZWQtYnVmZmVyJyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciB0b0Fic29sdXRlSW5kZXggPSByZXF1aXJlKCcuL190by1hYnNvbHV0ZS1pbmRleCcpO1xudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi9fdG8tbGVuZ3RoJyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbnZhciBBcnJheUJ1ZmZlciA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpLkFycmF5QnVmZmVyO1xudmFyIHNwZWNpZXNDb25zdHJ1Y3RvciA9IHJlcXVpcmUoJy4vX3NwZWNpZXMtY29uc3RydWN0b3InKTtcbnZhciAkQXJyYXlCdWZmZXIgPSBidWZmZXIuQXJyYXlCdWZmZXI7XG52YXIgJERhdGFWaWV3ID0gYnVmZmVyLkRhdGFWaWV3O1xudmFyICRpc1ZpZXcgPSAkdHlwZWQuQUJWICYmIEFycmF5QnVmZmVyLmlzVmlldztcbnZhciAkc2xpY2UgPSAkQXJyYXlCdWZmZXIucHJvdG90eXBlLnNsaWNlO1xudmFyIFZJRVcgPSAkdHlwZWQuVklFVztcbnZhciBBUlJBWV9CVUZGRVIgPSAnQXJyYXlCdWZmZXInO1xuXG4kZXhwb3J0KCRleHBvcnQuRyArICRleHBvcnQuVyArICRleHBvcnQuRiAqIChBcnJheUJ1ZmZlciAhPT0gJEFycmF5QnVmZmVyKSwgeyBBcnJheUJ1ZmZlcjogJEFycmF5QnVmZmVyIH0pO1xuXG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqICEkdHlwZWQuQ09OU1RSLCBBUlJBWV9CVUZGRVIsIHtcbiAgLy8gMjQuMS4zLjEgQXJyYXlCdWZmZXIuaXNWaWV3KGFyZylcbiAgaXNWaWV3OiBmdW5jdGlvbiBpc1ZpZXcoaXQpIHtcbiAgICByZXR1cm4gJGlzVmlldyAmJiAkaXNWaWV3KGl0KSB8fCBpc09iamVjdChpdCkgJiYgVklFVyBpbiBpdDtcbiAgfVxufSk7XG5cbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5VICsgJGV4cG9ydC5GICogcmVxdWlyZSgnLi9fZmFpbHMnKShmdW5jdGlvbiAoKSB7XG4gIHJldHVybiAhbmV3ICRBcnJheUJ1ZmZlcigyKS5zbGljZSgxLCB1bmRlZmluZWQpLmJ5dGVMZW5ndGg7XG59KSwgQVJSQVlfQlVGRkVSLCB7XG4gIC8vIDI0LjEuNC4zIEFycmF5QnVmZmVyLnByb3RvdHlwZS5zbGljZShzdGFydCwgZW5kKVxuICBzbGljZTogZnVuY3Rpb24gc2xpY2Uoc3RhcnQsIGVuZCkge1xuICAgIGlmICgkc2xpY2UgIT09IHVuZGVmaW5lZCAmJiBlbmQgPT09IHVuZGVmaW5lZCkgcmV0dXJuICRzbGljZS5jYWxsKGFuT2JqZWN0KHRoaXMpLCBzdGFydCk7IC8vIEZGIGZpeFxuICAgIHZhciBsZW4gPSBhbk9iamVjdCh0aGlzKS5ieXRlTGVuZ3RoO1xuICAgIHZhciBmaXJzdCA9IHRvQWJzb2x1dGVJbmRleChzdGFydCwgbGVuKTtcbiAgICB2YXIgZmluID0gdG9BYnNvbHV0ZUluZGV4KGVuZCA9PT0gdW5kZWZpbmVkID8gbGVuIDogZW5kLCBsZW4pO1xuICAgIHZhciByZXN1bHQgPSBuZXcgKHNwZWNpZXNDb25zdHJ1Y3Rvcih0aGlzLCAkQXJyYXlCdWZmZXIpKSh0b0xlbmd0aChmaW4gLSBmaXJzdCkpO1xuICAgIHZhciB2aWV3UyA9IG5ldyAkRGF0YVZpZXcodGhpcyk7XG4gICAgdmFyIHZpZXdUID0gbmV3ICREYXRhVmlldyhyZXN1bHQpO1xuICAgIHZhciBpbmRleCA9IDA7XG4gICAgd2hpbGUgKGZpcnN0IDwgZmluKSB7XG4gICAgICB2aWV3VC5zZXRVaW50OChpbmRleCsrLCB2aWV3Uy5nZXRVaW50OChmaXJzdCsrKSk7XG4gICAgfSByZXR1cm4gcmVzdWx0O1xuICB9XG59KTtcblxucmVxdWlyZSgnLi9fc2V0LXNwZWNpZXMnKShBUlJBWV9CVUZGRVIpO1xuIiwidmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbiRleHBvcnQoJGV4cG9ydC5HICsgJGV4cG9ydC5XICsgJGV4cG9ydC5GICogIXJlcXVpcmUoJy4vX3R5cGVkJykuQUJWLCB7XG4gIERhdGFWaWV3OiByZXF1aXJlKCcuL190eXBlZC1idWZmZXInKS5EYXRhVmlld1xufSk7XG4iLCJyZXF1aXJlKCcuL190eXBlZC1hcnJheScpKCdGbG9hdDMyJywgNCwgZnVuY3Rpb24gKGluaXQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIEZsb2F0MzJBcnJheShkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpIHtcbiAgICByZXR1cm4gaW5pdCh0aGlzLCBkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpO1xuICB9O1xufSk7XG4iLCJyZXF1aXJlKCcuL190eXBlZC1hcnJheScpKCdGbG9hdDY0JywgOCwgZnVuY3Rpb24gKGluaXQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIEZsb2F0NjRBcnJheShkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpIHtcbiAgICByZXR1cm4gaW5pdCh0aGlzLCBkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpO1xuICB9O1xufSk7XG4iLCJyZXF1aXJlKCcuL190eXBlZC1hcnJheScpKCdJbnQxNicsIDIsIGZ1bmN0aW9uIChpbml0KSB7XG4gIHJldHVybiBmdW5jdGlvbiBJbnQxNkFycmF5KGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCkge1xuICAgIHJldHVybiBpbml0KHRoaXMsIGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCk7XG4gIH07XG59KTtcbiIsInJlcXVpcmUoJy4vX3R5cGVkLWFycmF5JykoJ0ludDMyJywgNCwgZnVuY3Rpb24gKGluaXQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIEludDMyQXJyYXkoZGF0YSwgYnl0ZU9mZnNldCwgbGVuZ3RoKSB7XG4gICAgcmV0dXJuIGluaXQodGhpcywgZGF0YSwgYnl0ZU9mZnNldCwgbGVuZ3RoKTtcbiAgfTtcbn0pO1xuIiwicmVxdWlyZSgnLi9fdHlwZWQtYXJyYXknKSgnSW50OCcsIDEsIGZ1bmN0aW9uIChpbml0KSB7XG4gIHJldHVybiBmdW5jdGlvbiBJbnQ4QXJyYXkoZGF0YSwgYnl0ZU9mZnNldCwgbGVuZ3RoKSB7XG4gICAgcmV0dXJuIGluaXQodGhpcywgZGF0YSwgYnl0ZU9mZnNldCwgbGVuZ3RoKTtcbiAgfTtcbn0pO1xuIiwicmVxdWlyZSgnLi9fdHlwZWQtYXJyYXknKSgnVWludDE2JywgMiwgZnVuY3Rpb24gKGluaXQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIFVpbnQxNkFycmF5KGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCkge1xuICAgIHJldHVybiBpbml0KHRoaXMsIGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCk7XG4gIH07XG59KTtcbiIsInJlcXVpcmUoJy4vX3R5cGVkLWFycmF5JykoJ1VpbnQzMicsIDQsIGZ1bmN0aW9uIChpbml0KSB7XG4gIHJldHVybiBmdW5jdGlvbiBVaW50MzJBcnJheShkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpIHtcbiAgICByZXR1cm4gaW5pdCh0aGlzLCBkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpO1xuICB9O1xufSk7XG4iLCJyZXF1aXJlKCcuL190eXBlZC1hcnJheScpKCdVaW50OCcsIDEsIGZ1bmN0aW9uIChpbml0KSB7XG4gIHJldHVybiBmdW5jdGlvbiBVaW50OEFycmF5KGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCkge1xuICAgIHJldHVybiBpbml0KHRoaXMsIGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCk7XG4gIH07XG59KTtcbiIsInJlcXVpcmUoJy4vX3R5cGVkLWFycmF5JykoJ1VpbnQ4JywgMSwgZnVuY3Rpb24gKGluaXQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIFVpbnQ4Q2xhbXBlZEFycmF5KGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCkge1xuICAgIHJldHVybiBpbml0KHRoaXMsIGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCk7XG4gIH07XG59LCB0cnVlKTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuL19nbG9iYWwnKTtcbnZhciBlYWNoID0gcmVxdWlyZSgnLi9fYXJyYXktbWV0aG9kcycpKDApO1xudmFyIHJlZGVmaW5lID0gcmVxdWlyZSgnLi9fcmVkZWZpbmUnKTtcbnZhciBtZXRhID0gcmVxdWlyZSgnLi9fbWV0YScpO1xudmFyIGFzc2lnbiA9IHJlcXVpcmUoJy4vX29iamVjdC1hc3NpZ24nKTtcbnZhciB3ZWFrID0gcmVxdWlyZSgnLi9fY29sbGVjdGlvbi13ZWFrJyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbnZhciB2YWxpZGF0ZSA9IHJlcXVpcmUoJy4vX3ZhbGlkYXRlLWNvbGxlY3Rpb24nKTtcbnZhciBOQVRJVkVfV0VBS19NQVAgPSByZXF1aXJlKCcuL192YWxpZGF0ZS1jb2xsZWN0aW9uJyk7XG52YXIgSVNfSUUxMSA9ICFnbG9iYWwuQWN0aXZlWE9iamVjdCAmJiAnQWN0aXZlWE9iamVjdCcgaW4gZ2xvYmFsO1xudmFyIFdFQUtfTUFQID0gJ1dlYWtNYXAnO1xudmFyIGdldFdlYWsgPSBtZXRhLmdldFdlYWs7XG52YXIgaXNFeHRlbnNpYmxlID0gT2JqZWN0LmlzRXh0ZW5zaWJsZTtcbnZhciB1bmNhdWdodEZyb3plblN0b3JlID0gd2Vhay51ZnN0b3JlO1xudmFyIEludGVybmFsTWFwO1xuXG52YXIgd3JhcHBlciA9IGZ1bmN0aW9uIChnZXQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIFdlYWtNYXAoKSB7XG4gICAgcmV0dXJuIGdldCh0aGlzLCBhcmd1bWVudHMubGVuZ3RoID4gMCA/IGFyZ3VtZW50c1swXSA6IHVuZGVmaW5lZCk7XG4gIH07XG59O1xuXG52YXIgbWV0aG9kcyA9IHtcbiAgLy8gMjMuMy4zLjMgV2Vha01hcC5wcm90b3R5cGUuZ2V0KGtleSlcbiAgZ2V0OiBmdW5jdGlvbiBnZXQoa2V5KSB7XG4gICAgaWYgKGlzT2JqZWN0KGtleSkpIHtcbiAgICAgIHZhciBkYXRhID0gZ2V0V2VhayhrZXkpO1xuICAgICAgaWYgKGRhdGEgPT09IHRydWUpIHJldHVybiB1bmNhdWdodEZyb3plblN0b3JlKHZhbGlkYXRlKHRoaXMsIFdFQUtfTUFQKSkuZ2V0KGtleSk7XG4gICAgICByZXR1cm4gZGF0YSA/IGRhdGFbdGhpcy5faV0gOiB1bmRlZmluZWQ7XG4gICAgfVxuICB9LFxuICAvLyAyMy4zLjMuNSBXZWFrTWFwLnByb3RvdHlwZS5zZXQoa2V5LCB2YWx1ZSlcbiAgc2V0OiBmdW5jdGlvbiBzZXQoa2V5LCB2YWx1ZSkge1xuICAgIHJldHVybiB3ZWFrLmRlZih2YWxpZGF0ZSh0aGlzLCBXRUFLX01BUCksIGtleSwgdmFsdWUpO1xuICB9XG59O1xuXG4vLyAyMy4zIFdlYWtNYXAgT2JqZWN0c1xudmFyICRXZWFrTWFwID0gbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL19jb2xsZWN0aW9uJykoV0VBS19NQVAsIHdyYXBwZXIsIG1ldGhvZHMsIHdlYWssIHRydWUsIHRydWUpO1xuXG4vLyBJRTExIFdlYWtNYXAgZnJvemVuIGtleXMgZml4XG5pZiAoTkFUSVZFX1dFQUtfTUFQICYmIElTX0lFMTEpIHtcbiAgSW50ZXJuYWxNYXAgPSB3ZWFrLmdldENvbnN0cnVjdG9yKHdyYXBwZXIsIFdFQUtfTUFQKTtcbiAgYXNzaWduKEludGVybmFsTWFwLnByb3RvdHlwZSwgbWV0aG9kcyk7XG4gIG1ldGEuTkVFRCA9IHRydWU7XG4gIGVhY2goWydkZWxldGUnLCAnaGFzJywgJ2dldCcsICdzZXQnXSwgZnVuY3Rpb24gKGtleSkge1xuICAgIHZhciBwcm90byA9ICRXZWFrTWFwLnByb3RvdHlwZTtcbiAgICB2YXIgbWV0aG9kID0gcHJvdG9ba2V5XTtcbiAgICByZWRlZmluZShwcm90bywga2V5LCBmdW5jdGlvbiAoYSwgYikge1xuICAgICAgLy8gc3RvcmUgZnJvemVuIG9iamVjdHMgb24gaW50ZXJuYWwgd2Vha21hcCBzaGltXG4gICAgICBpZiAoaXNPYmplY3QoYSkgJiYgIWlzRXh0ZW5zaWJsZShhKSkge1xuICAgICAgICBpZiAoIXRoaXMuX2YpIHRoaXMuX2YgPSBuZXcgSW50ZXJuYWxNYXAoKTtcbiAgICAgICAgdmFyIHJlc3VsdCA9IHRoaXMuX2Zba2V5XShhLCBiKTtcbiAgICAgICAgcmV0dXJuIGtleSA9PSAnc2V0JyA/IHRoaXMgOiByZXN1bHQ7XG4gICAgICAvLyBzdG9yZSBhbGwgdGhlIHJlc3Qgb24gbmF0aXZlIHdlYWttYXBcbiAgICAgIH0gcmV0dXJuIG1ldGhvZC5jYWxsKHRoaXMsIGEsIGIpO1xuICAgIH0pO1xuICB9KTtcbn1cbiIsIid1c2Ugc3RyaWN0JztcbnZhciB3ZWFrID0gcmVxdWlyZSgnLi9fY29sbGVjdGlvbi13ZWFrJyk7XG52YXIgdmFsaWRhdGUgPSByZXF1aXJlKCcuL192YWxpZGF0ZS1jb2xsZWN0aW9uJyk7XG52YXIgV0VBS19TRVQgPSAnV2Vha1NldCc7XG5cbi8vIDIzLjQgV2Vha1NldCBPYmplY3RzXG5yZXF1aXJlKCcuL19jb2xsZWN0aW9uJykoV0VBS19TRVQsIGZ1bmN0aW9uIChnZXQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIFdlYWtTZXQoKSB7IHJldHVybiBnZXQodGhpcywgYXJndW1lbnRzLmxlbmd0aCA+IDAgPyBhcmd1bWVudHNbMF0gOiB1bmRlZmluZWQpOyB9O1xufSwge1xuICAvLyAyMy40LjMuMSBXZWFrU2V0LnByb3RvdHlwZS5hZGQodmFsdWUpXG4gIGFkZDogZnVuY3Rpb24gYWRkKHZhbHVlKSB7XG4gICAgcmV0dXJuIHdlYWsuZGVmKHZhbGlkYXRlKHRoaXMsIFdFQUtfU0VUKSwgdmFsdWUsIHRydWUpO1xuICB9XG59LCB3ZWFrLCBmYWxzZSwgdHJ1ZSk7XG4iLCIndXNlIHN0cmljdCc7XG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL3Byb3Bvc2FsLWZsYXRNYXAvI3NlYy1BcnJheS5wcm90b3R5cGUuZmxhdE1hcFxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBmbGF0dGVuSW50b0FycmF5ID0gcmVxdWlyZSgnLi9fZmxhdHRlbi1pbnRvLWFycmF5Jyk7XG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuL190by1vYmplY3QnKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpO1xudmFyIGFGdW5jdGlvbiA9IHJlcXVpcmUoJy4vX2EtZnVuY3Rpb24nKTtcbnZhciBhcnJheVNwZWNpZXNDcmVhdGUgPSByZXF1aXJlKCcuL19hcnJheS1zcGVjaWVzLWNyZWF0ZScpO1xuXG4kZXhwb3J0KCRleHBvcnQuUCwgJ0FycmF5Jywge1xuICBmbGF0TWFwOiBmdW5jdGlvbiBmbGF0TWFwKGNhbGxiYWNrZm4gLyogLCB0aGlzQXJnICovKSB7XG4gICAgdmFyIE8gPSB0b09iamVjdCh0aGlzKTtcbiAgICB2YXIgc291cmNlTGVuLCBBO1xuICAgIGFGdW5jdGlvbihjYWxsYmFja2ZuKTtcbiAgICBzb3VyY2VMZW4gPSB0b0xlbmd0aChPLmxlbmd0aCk7XG4gICAgQSA9IGFycmF5U3BlY2llc0NyZWF0ZShPLCAwKTtcbiAgICBmbGF0dGVuSW50b0FycmF5KEEsIE8sIE8sIHNvdXJjZUxlbiwgMCwgMSwgY2FsbGJhY2tmbiwgYXJndW1lbnRzWzFdKTtcbiAgICByZXR1cm4gQTtcbiAgfVxufSk7XG5cbnJlcXVpcmUoJy4vX2FkZC10by11bnNjb3BhYmxlcycpKCdmbGF0TWFwJyk7XG4iLCIndXNlIHN0cmljdCc7XG4vLyBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9BcnJheS5wcm90b3R5cGUuaW5jbHVkZXNcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgJGluY2x1ZGVzID0gcmVxdWlyZSgnLi9fYXJyYXktaW5jbHVkZXMnKSh0cnVlKTtcblxuJGV4cG9ydCgkZXhwb3J0LlAsICdBcnJheScsIHtcbiAgaW5jbHVkZXM6IGZ1bmN0aW9uIGluY2x1ZGVzKGVsIC8qICwgZnJvbUluZGV4ID0gMCAqLykge1xuICAgIHJldHVybiAkaW5jbHVkZXModGhpcywgZWwsIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKTtcbiAgfVxufSk7XG5cbnJlcXVpcmUoJy4vX2FkZC10by11bnNjb3BhYmxlcycpKCdpbmNsdWRlcycpO1xuIiwiLy8gaHR0cHM6Ly9naXRodWIuY29tL3RjMzkvcHJvcG9zYWwtb2JqZWN0LXZhbHVlcy1lbnRyaWVzXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyICRlbnRyaWVzID0gcmVxdWlyZSgnLi9fb2JqZWN0LXRvLWFycmF5JykodHJ1ZSk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnT2JqZWN0Jywge1xuICBlbnRyaWVzOiBmdW5jdGlvbiBlbnRyaWVzKGl0KSB7XG4gICAgcmV0dXJuICRlbnRyaWVzKGl0KTtcbiAgfVxufSk7XG4iLCIvLyBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9wcm9wb3NhbC1vYmplY3QtZ2V0b3ducHJvcGVydHlkZXNjcmlwdG9yc1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBvd25LZXlzID0gcmVxdWlyZSgnLi9fb3duLWtleXMnKTtcbnZhciB0b0lPYmplY3QgPSByZXF1aXJlKCcuL190by1pb2JqZWN0Jyk7XG52YXIgZ09QRCA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BkJyk7XG52YXIgY3JlYXRlUHJvcGVydHkgPSByZXF1aXJlKCcuL19jcmVhdGUtcHJvcGVydHknKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdPYmplY3QnLCB7XG4gIGdldE93blByb3BlcnR5RGVzY3JpcHRvcnM6IGZ1bmN0aW9uIGdldE93blByb3BlcnR5RGVzY3JpcHRvcnMob2JqZWN0KSB7XG4gICAgdmFyIE8gPSB0b0lPYmplY3Qob2JqZWN0KTtcbiAgICB2YXIgZ2V0RGVzYyA9IGdPUEQuZjtcbiAgICB2YXIga2V5cyA9IG93bktleXMoTyk7XG4gICAgdmFyIHJlc3VsdCA9IHt9O1xuICAgIHZhciBpID0gMDtcbiAgICB2YXIga2V5LCBkZXNjO1xuICAgIHdoaWxlIChrZXlzLmxlbmd0aCA+IGkpIHtcbiAgICAgIGRlc2MgPSBnZXREZXNjKE8sIGtleSA9IGtleXNbaSsrXSk7XG4gICAgICBpZiAoZGVzYyAhPT0gdW5kZWZpbmVkKSBjcmVhdGVQcm9wZXJ0eShyZXN1bHQsIGtleSwgZGVzYyk7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cbn0pO1xuIiwiLy8gaHR0cHM6Ly9naXRodWIuY29tL3RjMzkvcHJvcG9zYWwtb2JqZWN0LXZhbHVlcy1lbnRyaWVzXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyICR2YWx1ZXMgPSByZXF1aXJlKCcuL19vYmplY3QtdG8tYXJyYXknKShmYWxzZSk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnT2JqZWN0Jywge1xuICB2YWx1ZXM6IGZ1bmN0aW9uIHZhbHVlcyhpdCkge1xuICAgIHJldHVybiAkdmFsdWVzKGl0KTtcbiAgfVxufSk7XG4iLCIvLyBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9wcm9wb3NhbC1wcm9taXNlLWZpbmFsbHlcbid1c2Ugc3RyaWN0JztcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgY29yZSA9IHJlcXVpcmUoJy4vX2NvcmUnKTtcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuL19nbG9iYWwnKTtcbnZhciBzcGVjaWVzQ29uc3RydWN0b3IgPSByZXF1aXJlKCcuL19zcGVjaWVzLWNvbnN0cnVjdG9yJyk7XG52YXIgcHJvbWlzZVJlc29sdmUgPSByZXF1aXJlKCcuL19wcm9taXNlLXJlc29sdmUnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LlIsICdQcm9taXNlJywgeyAnZmluYWxseSc6IGZ1bmN0aW9uIChvbkZpbmFsbHkpIHtcbiAgdmFyIEMgPSBzcGVjaWVzQ29uc3RydWN0b3IodGhpcywgY29yZS5Qcm9taXNlIHx8IGdsb2JhbC5Qcm9taXNlKTtcbiAgdmFyIGlzRnVuY3Rpb24gPSB0eXBlb2Ygb25GaW5hbGx5ID09ICdmdW5jdGlvbic7XG4gIHJldHVybiB0aGlzLnRoZW4oXG4gICAgaXNGdW5jdGlvbiA/IGZ1bmN0aW9uICh4KSB7XG4gICAgICByZXR1cm4gcHJvbWlzZVJlc29sdmUoQywgb25GaW5hbGx5KCkpLnRoZW4oZnVuY3Rpb24gKCkgeyByZXR1cm4geDsgfSk7XG4gICAgfSA6IG9uRmluYWxseSxcbiAgICBpc0Z1bmN0aW9uID8gZnVuY3Rpb24gKGUpIHtcbiAgICAgIHJldHVybiBwcm9taXNlUmVzb2x2ZShDLCBvbkZpbmFsbHkoKSkudGhlbihmdW5jdGlvbiAoKSB7IHRocm93IGU7IH0pO1xuICAgIH0gOiBvbkZpbmFsbHlcbiAgKTtcbn0gfSk7XG4iLCIndXNlIHN0cmljdCc7XG4vLyBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9wcm9wb3NhbC1zdHJpbmctcGFkLXN0YXJ0LWVuZFxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciAkcGFkID0gcmVxdWlyZSgnLi9fc3RyaW5nLXBhZCcpO1xudmFyIHVzZXJBZ2VudCA9IHJlcXVpcmUoJy4vX3VzZXItYWdlbnQnKTtcblxuLy8gaHR0cHM6Ly9naXRodWIuY29tL3psb2lyb2NrL2NvcmUtanMvaXNzdWVzLzI4MFxudmFyIFdFQktJVF9CVUcgPSAvVmVyc2lvblxcLzEwXFwuXFxkKyhcXC5cXGQrKT8oIE1vYmlsZVxcL1xcdyspPyBTYWZhcmlcXC8vLnRlc3QodXNlckFnZW50KTtcblxuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiBXRUJLSVRfQlVHLCAnU3RyaW5nJywge1xuICBwYWRFbmQ6IGZ1bmN0aW9uIHBhZEVuZChtYXhMZW5ndGggLyogLCBmaWxsU3RyaW5nID0gJyAnICovKSB7XG4gICAgcmV0dXJuICRwYWQodGhpcywgbWF4TGVuZ3RoLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCwgZmFsc2UpO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS90YzM5L3Byb3Bvc2FsLXN0cmluZy1wYWQtc3RhcnQtZW5kXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyICRwYWQgPSByZXF1aXJlKCcuL19zdHJpbmctcGFkJyk7XG52YXIgdXNlckFnZW50ID0gcmVxdWlyZSgnLi9fdXNlci1hZ2VudCcpO1xuXG4vLyBodHRwczovL2dpdGh1Yi5jb20vemxvaXJvY2svY29yZS1qcy9pc3N1ZXMvMjgwXG52YXIgV0VCS0lUX0JVRyA9IC9WZXJzaW9uXFwvMTBcXC5cXGQrKFxcLlxcZCspPyggTW9iaWxlXFwvXFx3Kyk/IFNhZmFyaVxcLy8udGVzdCh1c2VyQWdlbnQpO1xuXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqIFdFQktJVF9CVUcsICdTdHJpbmcnLCB7XG4gIHBhZFN0YXJ0OiBmdW5jdGlvbiBwYWRTdGFydChtYXhMZW5ndGggLyogLCBmaWxsU3RyaW5nID0gJyAnICovKSB7XG4gICAgcmV0dXJuICRwYWQodGhpcywgbWF4TGVuZ3RoLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCwgdHJ1ZSk7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gaHR0cHM6Ly9naXRodWIuY29tL3NlYm1hcmtiYWdlL2VjbWFzY3JpcHQtc3RyaW5nLWxlZnQtcmlnaHQtdHJpbVxucmVxdWlyZSgnLi9fc3RyaW5nLXRyaW0nKSgndHJpbUxlZnQnLCBmdW5jdGlvbiAoJHRyaW0pIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIHRyaW1MZWZ0KCkge1xuICAgIHJldHVybiAkdHJpbSh0aGlzLCAxKTtcbiAgfTtcbn0sICd0cmltU3RhcnQnKTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9zZWJtYXJrYmFnZS9lY21hc2NyaXB0LXN0cmluZy1sZWZ0LXJpZ2h0LXRyaW1cbnJlcXVpcmUoJy4vX3N0cmluZy10cmltJykoJ3RyaW1SaWdodCcsIGZ1bmN0aW9uICgkdHJpbSkge1xuICByZXR1cm4gZnVuY3Rpb24gdHJpbVJpZ2h0KCkge1xuICAgIHJldHVybiAkdHJpbSh0aGlzLCAyKTtcbiAgfTtcbn0sICd0cmltRW5kJyk7XG4iLCJyZXF1aXJlKCcuL193a3MtZGVmaW5lJykoJ2FzeW5jSXRlcmF0b3InKTtcbiIsInZhciAkaXRlcmF0b3JzID0gcmVxdWlyZSgnLi9lczYuYXJyYXkuaXRlcmF0b3InKTtcbnZhciBnZXRLZXlzID0gcmVxdWlyZSgnLi9fb2JqZWN0LWtleXMnKTtcbnZhciByZWRlZmluZSA9IHJlcXVpcmUoJy4vX3JlZGVmaW5lJyk7XG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi9fZ2xvYmFsJyk7XG52YXIgaGlkZSA9IHJlcXVpcmUoJy4vX2hpZGUnKTtcbnZhciBJdGVyYXRvcnMgPSByZXF1aXJlKCcuL19pdGVyYXRvcnMnKTtcbnZhciB3a3MgPSByZXF1aXJlKCcuL193a3MnKTtcbnZhciBJVEVSQVRPUiA9IHdrcygnaXRlcmF0b3InKTtcbnZhciBUT19TVFJJTkdfVEFHID0gd2tzKCd0b1N0cmluZ1RhZycpO1xudmFyIEFycmF5VmFsdWVzID0gSXRlcmF0b3JzLkFycmF5O1xuXG52YXIgRE9NSXRlcmFibGVzID0ge1xuICBDU1NSdWxlTGlzdDogdHJ1ZSwgLy8gVE9ETzogTm90IHNwZWMgY29tcGxpYW50LCBzaG91bGQgYmUgZmFsc2UuXG4gIENTU1N0eWxlRGVjbGFyYXRpb246IGZhbHNlLFxuICBDU1NWYWx1ZUxpc3Q6IGZhbHNlLFxuICBDbGllbnRSZWN0TGlzdDogZmFsc2UsXG4gIERPTVJlY3RMaXN0OiBmYWxzZSxcbiAgRE9NU3RyaW5nTGlzdDogZmFsc2UsXG4gIERPTVRva2VuTGlzdDogdHJ1ZSxcbiAgRGF0YVRyYW5zZmVySXRlbUxpc3Q6IGZhbHNlLFxuICBGaWxlTGlzdDogZmFsc2UsXG4gIEhUTUxBbGxDb2xsZWN0aW9uOiBmYWxzZSxcbiAgSFRNTENvbGxlY3Rpb246IGZhbHNlLFxuICBIVE1MRm9ybUVsZW1lbnQ6IGZhbHNlLFxuICBIVE1MU2VsZWN0RWxlbWVudDogZmFsc2UsXG4gIE1lZGlhTGlzdDogdHJ1ZSwgLy8gVE9ETzogTm90IHNwZWMgY29tcGxpYW50LCBzaG91bGQgYmUgZmFsc2UuXG4gIE1pbWVUeXBlQXJyYXk6IGZhbHNlLFxuICBOYW1lZE5vZGVNYXA6IGZhbHNlLFxuICBOb2RlTGlzdDogdHJ1ZSxcbiAgUGFpbnRSZXF1ZXN0TGlzdDogZmFsc2UsXG4gIFBsdWdpbjogZmFsc2UsXG4gIFBsdWdpbkFycmF5OiBmYWxzZSxcbiAgU1ZHTGVuZ3RoTGlzdDogZmFsc2UsXG4gIFNWR051bWJlckxpc3Q6IGZhbHNlLFxuICBTVkdQYXRoU2VnTGlzdDogZmFsc2UsXG4gIFNWR1BvaW50TGlzdDogZmFsc2UsXG4gIFNWR1N0cmluZ0xpc3Q6IGZhbHNlLFxuICBTVkdUcmFuc2Zvcm1MaXN0OiBmYWxzZSxcbiAgU291cmNlQnVmZmVyTGlzdDogZmFsc2UsXG4gIFN0eWxlU2hlZXRMaXN0OiB0cnVlLCAvLyBUT0RPOiBOb3Qgc3BlYyBjb21wbGlhbnQsIHNob3VsZCBiZSBmYWxzZS5cbiAgVGV4dFRyYWNrQ3VlTGlzdDogZmFsc2UsXG4gIFRleHRUcmFja0xpc3Q6IGZhbHNlLFxuICBUb3VjaExpc3Q6IGZhbHNlXG59O1xuXG5mb3IgKHZhciBjb2xsZWN0aW9ucyA9IGdldEtleXMoRE9NSXRlcmFibGVzKSwgaSA9IDA7IGkgPCBjb2xsZWN0aW9ucy5sZW5ndGg7IGkrKykge1xuICB2YXIgTkFNRSA9IGNvbGxlY3Rpb25zW2ldO1xuICB2YXIgZXhwbGljaXQgPSBET01JdGVyYWJsZXNbTkFNRV07XG4gIHZhciBDb2xsZWN0aW9uID0gZ2xvYmFsW05BTUVdO1xuICB2YXIgcHJvdG8gPSBDb2xsZWN0aW9uICYmIENvbGxlY3Rpb24ucHJvdG90eXBlO1xuICB2YXIga2V5O1xuICBpZiAocHJvdG8pIHtcbiAgICBpZiAoIXByb3RvW0lURVJBVE9SXSkgaGlkZShwcm90bywgSVRFUkFUT1IsIEFycmF5VmFsdWVzKTtcbiAgICBpZiAoIXByb3RvW1RPX1NUUklOR19UQUddKSBoaWRlKHByb3RvLCBUT19TVFJJTkdfVEFHLCBOQU1FKTtcbiAgICBJdGVyYXRvcnNbTkFNRV0gPSBBcnJheVZhbHVlcztcbiAgICBpZiAoZXhwbGljaXQpIGZvciAoa2V5IGluICRpdGVyYXRvcnMpIGlmICghcHJvdG9ba2V5XSkgcmVkZWZpbmUocHJvdG8sIGtleSwgJGl0ZXJhdG9yc1trZXldLCB0cnVlKTtcbiAgfVxufVxuIiwidmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciAkdGFzayA9IHJlcXVpcmUoJy4vX3Rhc2snKTtcbiRleHBvcnQoJGV4cG9ydC5HICsgJGV4cG9ydC5CLCB7XG4gIHNldEltbWVkaWF0ZTogJHRhc2suc2V0LFxuICBjbGVhckltbWVkaWF0ZTogJHRhc2suY2xlYXJcbn0pO1xuIiwiLy8gaWU5LSBzZXRUaW1lb3V0ICYgc2V0SW50ZXJ2YWwgYWRkaXRpb25hbCBwYXJhbWV0ZXJzIGZpeFxudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciB1c2VyQWdlbnQgPSByZXF1aXJlKCcuL191c2VyLWFnZW50Jyk7XG52YXIgc2xpY2UgPSBbXS5zbGljZTtcbnZhciBNU0lFID0gL01TSUUgLlxcLi8udGVzdCh1c2VyQWdlbnQpOyAvLyA8LSBkaXJ0eSBpZTktIGNoZWNrXG52YXIgd3JhcCA9IGZ1bmN0aW9uIChzZXQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIChmbiwgdGltZSAvKiAsIC4uLmFyZ3MgKi8pIHtcbiAgICB2YXIgYm91bmRBcmdzID0gYXJndW1lbnRzLmxlbmd0aCA+IDI7XG4gICAgdmFyIGFyZ3MgPSBib3VuZEFyZ3MgPyBzbGljZS5jYWxsKGFyZ3VtZW50cywgMikgOiBmYWxzZTtcbiAgICByZXR1cm4gc2V0KGJvdW5kQXJncyA/IGZ1bmN0aW9uICgpIHtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1uZXctZnVuY1xuICAgICAgKHR5cGVvZiBmbiA9PSAnZnVuY3Rpb24nID8gZm4gOiBGdW5jdGlvbihmbikpLmFwcGx5KHRoaXMsIGFyZ3MpO1xuICAgIH0gOiBmbiwgdGltZSk7XG4gIH07XG59O1xuJGV4cG9ydCgkZXhwb3J0LkcgKyAkZXhwb3J0LkIgKyAkZXhwb3J0LkYgKiBNU0lFLCB7XG4gIHNldFRpbWVvdXQ6IHdyYXAoZ2xvYmFsLnNldFRpbWVvdXQpLFxuICBzZXRJbnRlcnZhbDogd3JhcChnbG9iYWwuc2V0SW50ZXJ2YWwpXG59KTtcbiIsInJlcXVpcmUoJy4uL21vZHVsZXMvd2ViLnRpbWVycycpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy93ZWIuaW1tZWRpYXRlJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL3dlYi5kb20uaXRlcmFibGUnKTtcbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi4vbW9kdWxlcy9fY29yZScpO1xuIiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTQtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG52YXIgcnVudGltZSA9IChmdW5jdGlvbiAoZXhwb3J0cykge1xuICBcInVzZSBzdHJpY3RcIjtcblxuICB2YXIgT3AgPSBPYmplY3QucHJvdG90eXBlO1xuICB2YXIgaGFzT3duID0gT3AuaGFzT3duUHJvcGVydHk7XG4gIHZhciBkZWZpbmVQcm9wZXJ0eSA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSB8fCBmdW5jdGlvbiAob2JqLCBrZXksIGRlc2MpIHsgb2JqW2tleV0gPSBkZXNjLnZhbHVlOyB9O1xuICB2YXIgdW5kZWZpbmVkOyAvLyBNb3JlIGNvbXByZXNzaWJsZSB0aGFuIHZvaWQgMC5cbiAgdmFyICRTeW1ib2wgPSB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgPyBTeW1ib2wgOiB7fTtcbiAgdmFyIGl0ZXJhdG9yU3ltYm9sID0gJFN5bWJvbC5pdGVyYXRvciB8fCBcIkBAaXRlcmF0b3JcIjtcbiAgdmFyIGFzeW5jSXRlcmF0b3JTeW1ib2wgPSAkU3ltYm9sLmFzeW5jSXRlcmF0b3IgfHwgXCJAQGFzeW5jSXRlcmF0b3JcIjtcbiAgdmFyIHRvU3RyaW5nVGFnU3ltYm9sID0gJFN5bWJvbC50b1N0cmluZ1RhZyB8fCBcIkBAdG9TdHJpbmdUYWdcIjtcblxuICBmdW5jdGlvbiBkZWZpbmUob2JqLCBrZXksIHZhbHVlKSB7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwga2V5LCB7XG4gICAgICB2YWx1ZTogdmFsdWUsXG4gICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgd3JpdGFibGU6IHRydWVcbiAgICB9KTtcbiAgICByZXR1cm4gb2JqW2tleV07XG4gIH1cbiAgdHJ5IHtcbiAgICAvLyBJRSA4IGhhcyBhIGJyb2tlbiBPYmplY3QuZGVmaW5lUHJvcGVydHkgdGhhdCBvbmx5IHdvcmtzIG9uIERPTSBvYmplY3RzLlxuICAgIGRlZmluZSh7fSwgXCJcIik7XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIGRlZmluZSA9IGZ1bmN0aW9uKG9iaiwga2V5LCB2YWx1ZSkge1xuICAgICAgcmV0dXJuIG9ialtrZXldID0gdmFsdWU7XG4gICAgfTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHdyYXAoaW5uZXJGbiwgb3V0ZXJGbiwgc2VsZiwgdHJ5TG9jc0xpc3QpIHtcbiAgICAvLyBJZiBvdXRlckZuIHByb3ZpZGVkIGFuZCBvdXRlckZuLnByb3RvdHlwZSBpcyBhIEdlbmVyYXRvciwgdGhlbiBvdXRlckZuLnByb3RvdHlwZSBpbnN0YW5jZW9mIEdlbmVyYXRvci5cbiAgICB2YXIgcHJvdG9HZW5lcmF0b3IgPSBvdXRlckZuICYmIG91dGVyRm4ucHJvdG90eXBlIGluc3RhbmNlb2YgR2VuZXJhdG9yID8gb3V0ZXJGbiA6IEdlbmVyYXRvcjtcbiAgICB2YXIgZ2VuZXJhdG9yID0gT2JqZWN0LmNyZWF0ZShwcm90b0dlbmVyYXRvci5wcm90b3R5cGUpO1xuICAgIHZhciBjb250ZXh0ID0gbmV3IENvbnRleHQodHJ5TG9jc0xpc3QgfHwgW10pO1xuXG4gICAgLy8gVGhlIC5faW52b2tlIG1ldGhvZCB1bmlmaWVzIHRoZSBpbXBsZW1lbnRhdGlvbnMgb2YgdGhlIC5uZXh0LFxuICAgIC8vIC50aHJvdywgYW5kIC5yZXR1cm4gbWV0aG9kcy5cbiAgICBkZWZpbmVQcm9wZXJ0eShnZW5lcmF0b3IsIFwiX2ludm9rZVwiLCB7IHZhbHVlOiBtYWtlSW52b2tlTWV0aG9kKGlubmVyRm4sIHNlbGYsIGNvbnRleHQpIH0pO1xuXG4gICAgcmV0dXJuIGdlbmVyYXRvcjtcbiAgfVxuICBleHBvcnRzLndyYXAgPSB3cmFwO1xuXG4gIC8vIFRyeS9jYXRjaCBoZWxwZXIgdG8gbWluaW1pemUgZGVvcHRpbWl6YXRpb25zLiBSZXR1cm5zIGEgY29tcGxldGlvblxuICAvLyByZWNvcmQgbGlrZSBjb250ZXh0LnRyeUVudHJpZXNbaV0uY29tcGxldGlvbi4gVGhpcyBpbnRlcmZhY2UgY291bGRcbiAgLy8gaGF2ZSBiZWVuIChhbmQgd2FzIHByZXZpb3VzbHkpIGRlc2lnbmVkIHRvIHRha2UgYSBjbG9zdXJlIHRvIGJlXG4gIC8vIGludm9rZWQgd2l0aG91dCBhcmd1bWVudHMsIGJ1dCBpbiBhbGwgdGhlIGNhc2VzIHdlIGNhcmUgYWJvdXQgd2VcbiAgLy8gYWxyZWFkeSBoYXZlIGFuIGV4aXN0aW5nIG1ldGhvZCB3ZSB3YW50IHRvIGNhbGwsIHNvIHRoZXJlJ3Mgbm8gbmVlZFxuICAvLyB0byBjcmVhdGUgYSBuZXcgZnVuY3Rpb24gb2JqZWN0LiBXZSBjYW4gZXZlbiBnZXQgYXdheSB3aXRoIGFzc3VtaW5nXG4gIC8vIHRoZSBtZXRob2QgdGFrZXMgZXhhY3RseSBvbmUgYXJndW1lbnQsIHNpbmNlIHRoYXQgaGFwcGVucyB0byBiZSB0cnVlXG4gIC8vIGluIGV2ZXJ5IGNhc2UsIHNvIHdlIGRvbid0IGhhdmUgdG8gdG91Y2ggdGhlIGFyZ3VtZW50cyBvYmplY3QuIFRoZVxuICAvLyBvbmx5IGFkZGl0aW9uYWwgYWxsb2NhdGlvbiByZXF1aXJlZCBpcyB0aGUgY29tcGxldGlvbiByZWNvcmQsIHdoaWNoXG4gIC8vIGhhcyBhIHN0YWJsZSBzaGFwZSBhbmQgc28gaG9wZWZ1bGx5IHNob3VsZCBiZSBjaGVhcCB0byBhbGxvY2F0ZS5cbiAgZnVuY3Rpb24gdHJ5Q2F0Y2goZm4sIG9iaiwgYXJnKSB7XG4gICAgdHJ5IHtcbiAgICAgIHJldHVybiB7IHR5cGU6IFwibm9ybWFsXCIsIGFyZzogZm4uY2FsbChvYmosIGFyZykgfTtcbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgIHJldHVybiB7IHR5cGU6IFwidGhyb3dcIiwgYXJnOiBlcnIgfTtcbiAgICB9XG4gIH1cblxuICB2YXIgR2VuU3RhdGVTdXNwZW5kZWRTdGFydCA9IFwic3VzcGVuZGVkU3RhcnRcIjtcbiAgdmFyIEdlblN0YXRlU3VzcGVuZGVkWWllbGQgPSBcInN1c3BlbmRlZFlpZWxkXCI7XG4gIHZhciBHZW5TdGF0ZUV4ZWN1dGluZyA9IFwiZXhlY3V0aW5nXCI7XG4gIHZhciBHZW5TdGF0ZUNvbXBsZXRlZCA9IFwiY29tcGxldGVkXCI7XG5cbiAgLy8gUmV0dXJuaW5nIHRoaXMgb2JqZWN0IGZyb20gdGhlIGlubmVyRm4gaGFzIHRoZSBzYW1lIGVmZmVjdCBhc1xuICAvLyBicmVha2luZyBvdXQgb2YgdGhlIGRpc3BhdGNoIHN3aXRjaCBzdGF0ZW1lbnQuXG4gIHZhciBDb250aW51ZVNlbnRpbmVsID0ge307XG5cbiAgLy8gRHVtbXkgY29uc3RydWN0b3IgZnVuY3Rpb25zIHRoYXQgd2UgdXNlIGFzIHRoZSAuY29uc3RydWN0b3IgYW5kXG4gIC8vIC5jb25zdHJ1Y3Rvci5wcm90b3R5cGUgcHJvcGVydGllcyBmb3IgZnVuY3Rpb25zIHRoYXQgcmV0dXJuIEdlbmVyYXRvclxuICAvLyBvYmplY3RzLiBGb3IgZnVsbCBzcGVjIGNvbXBsaWFuY2UsIHlvdSBtYXkgd2lzaCB0byBjb25maWd1cmUgeW91clxuICAvLyBtaW5pZmllciBub3QgdG8gbWFuZ2xlIHRoZSBuYW1lcyBvZiB0aGVzZSB0d28gZnVuY3Rpb25zLlxuICBmdW5jdGlvbiBHZW5lcmF0b3IoKSB7fVxuICBmdW5jdGlvbiBHZW5lcmF0b3JGdW5jdGlvbigpIHt9XG4gIGZ1bmN0aW9uIEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlKCkge31cblxuICAvLyBUaGlzIGlzIGEgcG9seWZpbGwgZm9yICVJdGVyYXRvclByb3RvdHlwZSUgZm9yIGVudmlyb25tZW50cyB0aGF0XG4gIC8vIGRvbid0IG5hdGl2ZWx5IHN1cHBvcnQgaXQuXG4gIHZhciBJdGVyYXRvclByb3RvdHlwZSA9IHt9O1xuICBkZWZpbmUoSXRlcmF0b3JQcm90b3R5cGUsIGl0ZXJhdG9yU3ltYm9sLCBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH0pO1xuXG4gIHZhciBnZXRQcm90byA9IE9iamVjdC5nZXRQcm90b3R5cGVPZjtcbiAgdmFyIE5hdGl2ZUl0ZXJhdG9yUHJvdG90eXBlID0gZ2V0UHJvdG8gJiYgZ2V0UHJvdG8oZ2V0UHJvdG8odmFsdWVzKFtdKSkpO1xuICBpZiAoTmF0aXZlSXRlcmF0b3JQcm90b3R5cGUgJiZcbiAgICAgIE5hdGl2ZUl0ZXJhdG9yUHJvdG90eXBlICE9PSBPcCAmJlxuICAgICAgaGFzT3duLmNhbGwoTmF0aXZlSXRlcmF0b3JQcm90b3R5cGUsIGl0ZXJhdG9yU3ltYm9sKSkge1xuICAgIC8vIFRoaXMgZW52aXJvbm1lbnQgaGFzIGEgbmF0aXZlICVJdGVyYXRvclByb3RvdHlwZSU7IHVzZSBpdCBpbnN0ZWFkXG4gICAgLy8gb2YgdGhlIHBvbHlmaWxsLlxuICAgIEl0ZXJhdG9yUHJvdG90eXBlID0gTmF0aXZlSXRlcmF0b3JQcm90b3R5cGU7XG4gIH1cblxuICB2YXIgR3AgPSBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZS5wcm90b3R5cGUgPVxuICAgIEdlbmVyYXRvci5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKEl0ZXJhdG9yUHJvdG90eXBlKTtcbiAgR2VuZXJhdG9yRnVuY3Rpb24ucHJvdG90eXBlID0gR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGU7XG4gIGRlZmluZVByb3BlcnR5KEdwLCBcImNvbnN0cnVjdG9yXCIsIHsgdmFsdWU6IEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlLCBjb25maWd1cmFibGU6IHRydWUgfSk7XG4gIGRlZmluZVByb3BlcnR5KFxuICAgIEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlLFxuICAgIFwiY29uc3RydWN0b3JcIixcbiAgICB7IHZhbHVlOiBHZW5lcmF0b3JGdW5jdGlvbiwgY29uZmlndXJhYmxlOiB0cnVlIH1cbiAgKTtcbiAgR2VuZXJhdG9yRnVuY3Rpb24uZGlzcGxheU5hbWUgPSBkZWZpbmUoXG4gICAgR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGUsXG4gICAgdG9TdHJpbmdUYWdTeW1ib2wsXG4gICAgXCJHZW5lcmF0b3JGdW5jdGlvblwiXG4gICk7XG5cbiAgLy8gSGVscGVyIGZvciBkZWZpbmluZyB0aGUgLm5leHQsIC50aHJvdywgYW5kIC5yZXR1cm4gbWV0aG9kcyBvZiB0aGVcbiAgLy8gSXRlcmF0b3IgaW50ZXJmYWNlIGluIHRlcm1zIG9mIGEgc2luZ2xlIC5faW52b2tlIG1ldGhvZC5cbiAgZnVuY3Rpb24gZGVmaW5lSXRlcmF0b3JNZXRob2RzKHByb3RvdHlwZSkge1xuICAgIFtcIm5leHRcIiwgXCJ0aHJvd1wiLCBcInJldHVyblwiXS5mb3JFYWNoKGZ1bmN0aW9uKG1ldGhvZCkge1xuICAgICAgZGVmaW5lKHByb3RvdHlwZSwgbWV0aG9kLCBmdW5jdGlvbihhcmcpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2ludm9rZShtZXRob2QsIGFyZyk7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfVxuXG4gIGV4cG9ydHMuaXNHZW5lcmF0b3JGdW5jdGlvbiA9IGZ1bmN0aW9uKGdlbkZ1bikge1xuICAgIHZhciBjdG9yID0gdHlwZW9mIGdlbkZ1biA9PT0gXCJmdW5jdGlvblwiICYmIGdlbkZ1bi5jb25zdHJ1Y3RvcjtcbiAgICByZXR1cm4gY3RvclxuICAgICAgPyBjdG9yID09PSBHZW5lcmF0b3JGdW5jdGlvbiB8fFxuICAgICAgICAvLyBGb3IgdGhlIG5hdGl2ZSBHZW5lcmF0b3JGdW5jdGlvbiBjb25zdHJ1Y3RvciwgdGhlIGJlc3Qgd2UgY2FuXG4gICAgICAgIC8vIGRvIGlzIHRvIGNoZWNrIGl0cyAubmFtZSBwcm9wZXJ0eS5cbiAgICAgICAgKGN0b3IuZGlzcGxheU5hbWUgfHwgY3Rvci5uYW1lKSA9PT0gXCJHZW5lcmF0b3JGdW5jdGlvblwiXG4gICAgICA6IGZhbHNlO1xuICB9O1xuXG4gIGV4cG9ydHMubWFyayA9IGZ1bmN0aW9uKGdlbkZ1bikge1xuICAgIGlmIChPYmplY3Quc2V0UHJvdG90eXBlT2YpIHtcbiAgICAgIE9iamVjdC5zZXRQcm90b3R5cGVPZihnZW5GdW4sIEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZ2VuRnVuLl9fcHJvdG9fXyA9IEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlO1xuICAgICAgZGVmaW5lKGdlbkZ1biwgdG9TdHJpbmdUYWdTeW1ib2wsIFwiR2VuZXJhdG9yRnVuY3Rpb25cIik7XG4gICAgfVxuICAgIGdlbkZ1bi5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKEdwKTtcbiAgICByZXR1cm4gZ2VuRnVuO1xuICB9O1xuXG4gIC8vIFdpdGhpbiB0aGUgYm9keSBvZiBhbnkgYXN5bmMgZnVuY3Rpb24sIGBhd2FpdCB4YCBpcyB0cmFuc2Zvcm1lZCB0b1xuICAvLyBgeWllbGQgcmVnZW5lcmF0b3JSdW50aW1lLmF3cmFwKHgpYCwgc28gdGhhdCB0aGUgcnVudGltZSBjYW4gdGVzdFxuICAvLyBgaGFzT3duLmNhbGwodmFsdWUsIFwiX19hd2FpdFwiKWAgdG8gZGV0ZXJtaW5lIGlmIHRoZSB5aWVsZGVkIHZhbHVlIGlzXG4gIC8vIG1lYW50IHRvIGJlIGF3YWl0ZWQuXG4gIGV4cG9ydHMuYXdyYXAgPSBmdW5jdGlvbihhcmcpIHtcbiAgICByZXR1cm4geyBfX2F3YWl0OiBhcmcgfTtcbiAgfTtcblxuICBmdW5jdGlvbiBBc3luY0l0ZXJhdG9yKGdlbmVyYXRvciwgUHJvbWlzZUltcGwpIHtcbiAgICBmdW5jdGlvbiBpbnZva2UobWV0aG9kLCBhcmcsIHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgdmFyIHJlY29yZCA9IHRyeUNhdGNoKGdlbmVyYXRvclttZXRob2RdLCBnZW5lcmF0b3IsIGFyZyk7XG4gICAgICBpZiAocmVjb3JkLnR5cGUgPT09IFwidGhyb3dcIikge1xuICAgICAgICByZWplY3QocmVjb3JkLmFyZyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YXIgcmVzdWx0ID0gcmVjb3JkLmFyZztcbiAgICAgICAgdmFyIHZhbHVlID0gcmVzdWx0LnZhbHVlO1xuICAgICAgICBpZiAodmFsdWUgJiZcbiAgICAgICAgICAgIHR5cGVvZiB2YWx1ZSA9PT0gXCJvYmplY3RcIiAmJlxuICAgICAgICAgICAgaGFzT3duLmNhbGwodmFsdWUsIFwiX19hd2FpdFwiKSkge1xuICAgICAgICAgIHJldHVybiBQcm9taXNlSW1wbC5yZXNvbHZlKHZhbHVlLl9fYXdhaXQpLnRoZW4oZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgICAgIGludm9rZShcIm5leHRcIiwgdmFsdWUsIHJlc29sdmUsIHJlamVjdCk7XG4gICAgICAgICAgfSwgZnVuY3Rpb24oZXJyKSB7XG4gICAgICAgICAgICBpbnZva2UoXCJ0aHJvd1wiLCBlcnIsIHJlc29sdmUsIHJlamVjdCk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gUHJvbWlzZUltcGwucmVzb2x2ZSh2YWx1ZSkudGhlbihmdW5jdGlvbih1bndyYXBwZWQpIHtcbiAgICAgICAgICAvLyBXaGVuIGEgeWllbGRlZCBQcm9taXNlIGlzIHJlc29sdmVkLCBpdHMgZmluYWwgdmFsdWUgYmVjb21lc1xuICAgICAgICAgIC8vIHRoZSAudmFsdWUgb2YgdGhlIFByb21pc2U8e3ZhbHVlLGRvbmV9PiByZXN1bHQgZm9yIHRoZVxuICAgICAgICAgIC8vIGN1cnJlbnQgaXRlcmF0aW9uLlxuICAgICAgICAgIHJlc3VsdC52YWx1ZSA9IHVud3JhcHBlZDtcbiAgICAgICAgICByZXNvbHZlKHJlc3VsdCk7XG4gICAgICAgIH0sIGZ1bmN0aW9uKGVycm9yKSB7XG4gICAgICAgICAgLy8gSWYgYSByZWplY3RlZCBQcm9taXNlIHdhcyB5aWVsZGVkLCB0aHJvdyB0aGUgcmVqZWN0aW9uIGJhY2tcbiAgICAgICAgICAvLyBpbnRvIHRoZSBhc3luYyBnZW5lcmF0b3IgZnVuY3Rpb24gc28gaXQgY2FuIGJlIGhhbmRsZWQgdGhlcmUuXG4gICAgICAgICAgcmV0dXJuIGludm9rZShcInRocm93XCIsIGVycm9yLCByZXNvbHZlLCByZWplY3QpO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgcHJldmlvdXNQcm9taXNlO1xuXG4gICAgZnVuY3Rpb24gZW5xdWV1ZShtZXRob2QsIGFyZykge1xuICAgICAgZnVuY3Rpb24gY2FsbEludm9rZVdpdGhNZXRob2RBbmRBcmcoKSB7XG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZUltcGwoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgICAgaW52b2tlKG1ldGhvZCwgYXJnLCByZXNvbHZlLCByZWplY3QpO1xuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHByZXZpb3VzUHJvbWlzZSA9XG4gICAgICAgIC8vIElmIGVucXVldWUgaGFzIGJlZW4gY2FsbGVkIGJlZm9yZSwgdGhlbiB3ZSB3YW50IHRvIHdhaXQgdW50aWxcbiAgICAgICAgLy8gYWxsIHByZXZpb3VzIFByb21pc2VzIGhhdmUgYmVlbiByZXNvbHZlZCBiZWZvcmUgY2FsbGluZyBpbnZva2UsXG4gICAgICAgIC8vIHNvIHRoYXQgcmVzdWx0cyBhcmUgYWx3YXlzIGRlbGl2ZXJlZCBpbiB0aGUgY29ycmVjdCBvcmRlci4gSWZcbiAgICAgICAgLy8gZW5xdWV1ZSBoYXMgbm90IGJlZW4gY2FsbGVkIGJlZm9yZSwgdGhlbiBpdCBpcyBpbXBvcnRhbnQgdG9cbiAgICAgICAgLy8gY2FsbCBpbnZva2UgaW1tZWRpYXRlbHksIHdpdGhvdXQgd2FpdGluZyBvbiBhIGNhbGxiYWNrIHRvIGZpcmUsXG4gICAgICAgIC8vIHNvIHRoYXQgdGhlIGFzeW5jIGdlbmVyYXRvciBmdW5jdGlvbiBoYXMgdGhlIG9wcG9ydHVuaXR5IHRvIGRvXG4gICAgICAgIC8vIGFueSBuZWNlc3Nhcnkgc2V0dXAgaW4gYSBwcmVkaWN0YWJsZSB3YXkuIFRoaXMgcHJlZGljdGFiaWxpdHlcbiAgICAgICAgLy8gaXMgd2h5IHRoZSBQcm9taXNlIGNvbnN0cnVjdG9yIHN5bmNocm9ub3VzbHkgaW52b2tlcyBpdHNcbiAgICAgICAgLy8gZXhlY3V0b3IgY2FsbGJhY2ssIGFuZCB3aHkgYXN5bmMgZnVuY3Rpb25zIHN5bmNocm9ub3VzbHlcbiAgICAgICAgLy8gZXhlY3V0ZSBjb2RlIGJlZm9yZSB0aGUgZmlyc3QgYXdhaXQuIFNpbmNlIHdlIGltcGxlbWVudCBzaW1wbGVcbiAgICAgICAgLy8gYXN5bmMgZnVuY3Rpb25zIGluIHRlcm1zIG9mIGFzeW5jIGdlbmVyYXRvcnMsIGl0IGlzIGVzcGVjaWFsbHlcbiAgICAgICAgLy8gaW1wb3J0YW50IHRvIGdldCB0aGlzIHJpZ2h0LCBldmVuIHRob3VnaCBpdCByZXF1aXJlcyBjYXJlLlxuICAgICAgICBwcmV2aW91c1Byb21pc2UgPyBwcmV2aW91c1Byb21pc2UudGhlbihcbiAgICAgICAgICBjYWxsSW52b2tlV2l0aE1ldGhvZEFuZEFyZyxcbiAgICAgICAgICAvLyBBdm9pZCBwcm9wYWdhdGluZyBmYWlsdXJlcyB0byBQcm9taXNlcyByZXR1cm5lZCBieSBsYXRlclxuICAgICAgICAgIC8vIGludm9jYXRpb25zIG9mIHRoZSBpdGVyYXRvci5cbiAgICAgICAgICBjYWxsSW52b2tlV2l0aE1ldGhvZEFuZEFyZ1xuICAgICAgICApIDogY2FsbEludm9rZVdpdGhNZXRob2RBbmRBcmcoKTtcbiAgICB9XG5cbiAgICAvLyBEZWZpbmUgdGhlIHVuaWZpZWQgaGVscGVyIG1ldGhvZCB0aGF0IGlzIHVzZWQgdG8gaW1wbGVtZW50IC5uZXh0LFxuICAgIC8vIC50aHJvdywgYW5kIC5yZXR1cm4gKHNlZSBkZWZpbmVJdGVyYXRvck1ldGhvZHMpLlxuICAgIGRlZmluZVByb3BlcnR5KHRoaXMsIFwiX2ludm9rZVwiLCB7IHZhbHVlOiBlbnF1ZXVlIH0pO1xuICB9XG5cbiAgZGVmaW5lSXRlcmF0b3JNZXRob2RzKEFzeW5jSXRlcmF0b3IucHJvdG90eXBlKTtcbiAgZGVmaW5lKEFzeW5jSXRlcmF0b3IucHJvdG90eXBlLCBhc3luY0l0ZXJhdG9yU3ltYm9sLCBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH0pO1xuICBleHBvcnRzLkFzeW5jSXRlcmF0b3IgPSBBc3luY0l0ZXJhdG9yO1xuXG4gIC8vIE5vdGUgdGhhdCBzaW1wbGUgYXN5bmMgZnVuY3Rpb25zIGFyZSBpbXBsZW1lbnRlZCBvbiB0b3Agb2ZcbiAgLy8gQXN5bmNJdGVyYXRvciBvYmplY3RzOyB0aGV5IGp1c3QgcmV0dXJuIGEgUHJvbWlzZSBmb3IgdGhlIHZhbHVlIG9mXG4gIC8vIHRoZSBmaW5hbCByZXN1bHQgcHJvZHVjZWQgYnkgdGhlIGl0ZXJhdG9yLlxuICBleHBvcnRzLmFzeW5jID0gZnVuY3Rpb24oaW5uZXJGbiwgb3V0ZXJGbiwgc2VsZiwgdHJ5TG9jc0xpc3QsIFByb21pc2VJbXBsKSB7XG4gICAgaWYgKFByb21pc2VJbXBsID09PSB2b2lkIDApIFByb21pc2VJbXBsID0gUHJvbWlzZTtcblxuICAgIHZhciBpdGVyID0gbmV3IEFzeW5jSXRlcmF0b3IoXG4gICAgICB3cmFwKGlubmVyRm4sIG91dGVyRm4sIHNlbGYsIHRyeUxvY3NMaXN0KSxcbiAgICAgIFByb21pc2VJbXBsXG4gICAgKTtcblxuICAgIHJldHVybiBleHBvcnRzLmlzR2VuZXJhdG9yRnVuY3Rpb24ob3V0ZXJGbilcbiAgICAgID8gaXRlciAvLyBJZiBvdXRlckZuIGlzIGEgZ2VuZXJhdG9yLCByZXR1cm4gdGhlIGZ1bGwgaXRlcmF0b3IuXG4gICAgICA6IGl0ZXIubmV4dCgpLnRoZW4oZnVuY3Rpb24ocmVzdWx0KSB7XG4gICAgICAgICAgcmV0dXJuIHJlc3VsdC5kb25lID8gcmVzdWx0LnZhbHVlIDogaXRlci5uZXh0KCk7XG4gICAgICAgIH0pO1xuICB9O1xuXG4gIGZ1bmN0aW9uIG1ha2VJbnZva2VNZXRob2QoaW5uZXJGbiwgc2VsZiwgY29udGV4dCkge1xuICAgIHZhciBzdGF0ZSA9IEdlblN0YXRlU3VzcGVuZGVkU3RhcnQ7XG5cbiAgICByZXR1cm4gZnVuY3Rpb24gaW52b2tlKG1ldGhvZCwgYXJnKSB7XG4gICAgICBpZiAoc3RhdGUgPT09IEdlblN0YXRlRXhlY3V0aW5nKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIkdlbmVyYXRvciBpcyBhbHJlYWR5IHJ1bm5pbmdcIik7XG4gICAgICB9XG5cbiAgICAgIGlmIChzdGF0ZSA9PT0gR2VuU3RhdGVDb21wbGV0ZWQpIHtcbiAgICAgICAgaWYgKG1ldGhvZCA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgICAgdGhyb3cgYXJnO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gQmUgZm9yZ2l2aW5nLCBwZXIgMjUuMy4zLjMuMyBvZiB0aGUgc3BlYzpcbiAgICAgICAgLy8gaHR0cHM6Ly9wZW9wbGUubW96aWxsYS5vcmcvfmpvcmVuZG9yZmYvZXM2LWRyYWZ0Lmh0bWwjc2VjLWdlbmVyYXRvcnJlc3VtZVxuICAgICAgICByZXR1cm4gZG9uZVJlc3VsdCgpO1xuICAgICAgfVxuXG4gICAgICBjb250ZXh0Lm1ldGhvZCA9IG1ldGhvZDtcbiAgICAgIGNvbnRleHQuYXJnID0gYXJnO1xuXG4gICAgICB3aGlsZSAodHJ1ZSkge1xuICAgICAgICB2YXIgZGVsZWdhdGUgPSBjb250ZXh0LmRlbGVnYXRlO1xuICAgICAgICBpZiAoZGVsZWdhdGUpIHtcbiAgICAgICAgICB2YXIgZGVsZWdhdGVSZXN1bHQgPSBtYXliZUludm9rZURlbGVnYXRlKGRlbGVnYXRlLCBjb250ZXh0KTtcbiAgICAgICAgICBpZiAoZGVsZWdhdGVSZXN1bHQpIHtcbiAgICAgICAgICAgIGlmIChkZWxlZ2F0ZVJlc3VsdCA9PT0gQ29udGludWVTZW50aW5lbCkgY29udGludWU7XG4gICAgICAgICAgICByZXR1cm4gZGVsZWdhdGVSZXN1bHQ7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGNvbnRleHQubWV0aG9kID09PSBcIm5leHRcIikge1xuICAgICAgICAgIC8vIFNldHRpbmcgY29udGV4dC5fc2VudCBmb3IgbGVnYWN5IHN1cHBvcnQgb2YgQmFiZWwnc1xuICAgICAgICAgIC8vIGZ1bmN0aW9uLnNlbnQgaW1wbGVtZW50YXRpb24uXG4gICAgICAgICAgY29udGV4dC5zZW50ID0gY29udGV4dC5fc2VudCA9IGNvbnRleHQuYXJnO1xuXG4gICAgICAgIH0gZWxzZSBpZiAoY29udGV4dC5tZXRob2QgPT09IFwidGhyb3dcIikge1xuICAgICAgICAgIGlmIChzdGF0ZSA9PT0gR2VuU3RhdGVTdXNwZW5kZWRTdGFydCkge1xuICAgICAgICAgICAgc3RhdGUgPSBHZW5TdGF0ZUNvbXBsZXRlZDtcbiAgICAgICAgICAgIHRocm93IGNvbnRleHQuYXJnO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGNvbnRleHQuZGlzcGF0Y2hFeGNlcHRpb24oY29udGV4dC5hcmcpO1xuXG4gICAgICAgIH0gZWxzZSBpZiAoY29udGV4dC5tZXRob2QgPT09IFwicmV0dXJuXCIpIHtcbiAgICAgICAgICBjb250ZXh0LmFicnVwdChcInJldHVyblwiLCBjb250ZXh0LmFyZyk7XG4gICAgICAgIH1cblxuICAgICAgICBzdGF0ZSA9IEdlblN0YXRlRXhlY3V0aW5nO1xuXG4gICAgICAgIHZhciByZWNvcmQgPSB0cnlDYXRjaChpbm5lckZuLCBzZWxmLCBjb250ZXh0KTtcbiAgICAgICAgaWYgKHJlY29yZC50eXBlID09PSBcIm5vcm1hbFwiKSB7XG4gICAgICAgICAgLy8gSWYgYW4gZXhjZXB0aW9uIGlzIHRocm93biBmcm9tIGlubmVyRm4sIHdlIGxlYXZlIHN0YXRlID09PVxuICAgICAgICAgIC8vIEdlblN0YXRlRXhlY3V0aW5nIGFuZCBsb29wIGJhY2sgZm9yIGFub3RoZXIgaW52b2NhdGlvbi5cbiAgICAgICAgICBzdGF0ZSA9IGNvbnRleHQuZG9uZVxuICAgICAgICAgICAgPyBHZW5TdGF0ZUNvbXBsZXRlZFxuICAgICAgICAgICAgOiBHZW5TdGF0ZVN1c3BlbmRlZFlpZWxkO1xuXG4gICAgICAgICAgaWYgKHJlY29yZC5hcmcgPT09IENvbnRpbnVlU2VudGluZWwpIHtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB2YWx1ZTogcmVjb3JkLmFyZyxcbiAgICAgICAgICAgIGRvbmU6IGNvbnRleHQuZG9uZVxuICAgICAgICAgIH07XG5cbiAgICAgICAgfSBlbHNlIGlmIChyZWNvcmQudHlwZSA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgICAgc3RhdGUgPSBHZW5TdGF0ZUNvbXBsZXRlZDtcbiAgICAgICAgICAvLyBEaXNwYXRjaCB0aGUgZXhjZXB0aW9uIGJ5IGxvb3BpbmcgYmFjayBhcm91bmQgdG8gdGhlXG4gICAgICAgICAgLy8gY29udGV4dC5kaXNwYXRjaEV4Y2VwdGlvbihjb250ZXh0LmFyZykgY2FsbCBhYm92ZS5cbiAgICAgICAgICBjb250ZXh0Lm1ldGhvZCA9IFwidGhyb3dcIjtcbiAgICAgICAgICBjb250ZXh0LmFyZyA9IHJlY29yZC5hcmc7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9O1xuICB9XG5cbiAgLy8gQ2FsbCBkZWxlZ2F0ZS5pdGVyYXRvcltjb250ZXh0Lm1ldGhvZF0oY29udGV4dC5hcmcpIGFuZCBoYW5kbGUgdGhlXG4gIC8vIHJlc3VsdCwgZWl0aGVyIGJ5IHJldHVybmluZyBhIHsgdmFsdWUsIGRvbmUgfSByZXN1bHQgZnJvbSB0aGVcbiAgLy8gZGVsZWdhdGUgaXRlcmF0b3IsIG9yIGJ5IG1vZGlmeWluZyBjb250ZXh0Lm1ldGhvZCBhbmQgY29udGV4dC5hcmcsXG4gIC8vIHNldHRpbmcgY29udGV4dC5kZWxlZ2F0ZSB0byBudWxsLCBhbmQgcmV0dXJuaW5nIHRoZSBDb250aW51ZVNlbnRpbmVsLlxuICBmdW5jdGlvbiBtYXliZUludm9rZURlbGVnYXRlKGRlbGVnYXRlLCBjb250ZXh0KSB7XG4gICAgdmFyIG1ldGhvZE5hbWUgPSBjb250ZXh0Lm1ldGhvZDtcbiAgICB2YXIgbWV0aG9kID0gZGVsZWdhdGUuaXRlcmF0b3JbbWV0aG9kTmFtZV07XG4gICAgaWYgKG1ldGhvZCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAvLyBBIC50aHJvdyBvciAucmV0dXJuIHdoZW4gdGhlIGRlbGVnYXRlIGl0ZXJhdG9yIGhhcyBubyAudGhyb3dcbiAgICAgIC8vIG1ldGhvZCwgb3IgYSBtaXNzaW5nIC5uZXh0IG1laHRvZCwgYWx3YXlzIHRlcm1pbmF0ZSB0aGVcbiAgICAgIC8vIHlpZWxkKiBsb29wLlxuICAgICAgY29udGV4dC5kZWxlZ2F0ZSA9IG51bGw7XG5cbiAgICAgIC8vIE5vdGU6IFtcInJldHVyblwiXSBtdXN0IGJlIHVzZWQgZm9yIEVTMyBwYXJzaW5nIGNvbXBhdGliaWxpdHkuXG4gICAgICBpZiAobWV0aG9kTmFtZSA9PT0gXCJ0aHJvd1wiICYmIGRlbGVnYXRlLml0ZXJhdG9yW1wicmV0dXJuXCJdKSB7XG4gICAgICAgIC8vIElmIHRoZSBkZWxlZ2F0ZSBpdGVyYXRvciBoYXMgYSByZXR1cm4gbWV0aG9kLCBnaXZlIGl0IGFcbiAgICAgICAgLy8gY2hhbmNlIHRvIGNsZWFuIHVwLlxuICAgICAgICBjb250ZXh0Lm1ldGhvZCA9IFwicmV0dXJuXCI7XG4gICAgICAgIGNvbnRleHQuYXJnID0gdW5kZWZpbmVkO1xuICAgICAgICBtYXliZUludm9rZURlbGVnYXRlKGRlbGVnYXRlLCBjb250ZXh0KTtcblxuICAgICAgICBpZiAoY29udGV4dC5tZXRob2QgPT09IFwidGhyb3dcIikge1xuICAgICAgICAgIC8vIElmIG1heWJlSW52b2tlRGVsZWdhdGUoY29udGV4dCkgY2hhbmdlZCBjb250ZXh0Lm1ldGhvZCBmcm9tXG4gICAgICAgICAgLy8gXCJyZXR1cm5cIiB0byBcInRocm93XCIsIGxldCB0aGF0IG92ZXJyaWRlIHRoZSBUeXBlRXJyb3IgYmVsb3cuXG4gICAgICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChtZXRob2ROYW1lICE9PSBcInJldHVyblwiKSB7XG4gICAgICAgIGNvbnRleHQubWV0aG9kID0gXCJ0aHJvd1wiO1xuICAgICAgICBjb250ZXh0LmFyZyA9IG5ldyBUeXBlRXJyb3IoXG4gICAgICAgICAgXCJUaGUgaXRlcmF0b3IgZG9lcyBub3QgcHJvdmlkZSBhICdcIiArIG1ldGhvZE5hbWUgKyBcIicgbWV0aG9kXCIpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgICB9XG5cbiAgICB2YXIgcmVjb3JkID0gdHJ5Q2F0Y2gobWV0aG9kLCBkZWxlZ2F0ZS5pdGVyYXRvciwgY29udGV4dC5hcmcpO1xuXG4gICAgaWYgKHJlY29yZC50eXBlID09PSBcInRocm93XCIpIHtcbiAgICAgIGNvbnRleHQubWV0aG9kID0gXCJ0aHJvd1wiO1xuICAgICAgY29udGV4dC5hcmcgPSByZWNvcmQuYXJnO1xuICAgICAgY29udGV4dC5kZWxlZ2F0ZSA9IG51bGw7XG4gICAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgICB9XG5cbiAgICB2YXIgaW5mbyA9IHJlY29yZC5hcmc7XG5cbiAgICBpZiAoISBpbmZvKSB7XG4gICAgICBjb250ZXh0Lm1ldGhvZCA9IFwidGhyb3dcIjtcbiAgICAgIGNvbnRleHQuYXJnID0gbmV3IFR5cGVFcnJvcihcIml0ZXJhdG9yIHJlc3VsdCBpcyBub3QgYW4gb2JqZWN0XCIpO1xuICAgICAgY29udGV4dC5kZWxlZ2F0ZSA9IG51bGw7XG4gICAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgICB9XG5cbiAgICBpZiAoaW5mby5kb25lKSB7XG4gICAgICAvLyBBc3NpZ24gdGhlIHJlc3VsdCBvZiB0aGUgZmluaXNoZWQgZGVsZWdhdGUgdG8gdGhlIHRlbXBvcmFyeVxuICAgICAgLy8gdmFyaWFibGUgc3BlY2lmaWVkIGJ5IGRlbGVnYXRlLnJlc3VsdE5hbWUgKHNlZSBkZWxlZ2F0ZVlpZWxkKS5cbiAgICAgIGNvbnRleHRbZGVsZWdhdGUucmVzdWx0TmFtZV0gPSBpbmZvLnZhbHVlO1xuXG4gICAgICAvLyBSZXN1bWUgZXhlY3V0aW9uIGF0IHRoZSBkZXNpcmVkIGxvY2F0aW9uIChzZWUgZGVsZWdhdGVZaWVsZCkuXG4gICAgICBjb250ZXh0Lm5leHQgPSBkZWxlZ2F0ZS5uZXh0TG9jO1xuXG4gICAgICAvLyBJZiBjb250ZXh0Lm1ldGhvZCB3YXMgXCJ0aHJvd1wiIGJ1dCB0aGUgZGVsZWdhdGUgaGFuZGxlZCB0aGVcbiAgICAgIC8vIGV4Y2VwdGlvbiwgbGV0IHRoZSBvdXRlciBnZW5lcmF0b3IgcHJvY2VlZCBub3JtYWxseS4gSWZcbiAgICAgIC8vIGNvbnRleHQubWV0aG9kIHdhcyBcIm5leHRcIiwgZm9yZ2V0IGNvbnRleHQuYXJnIHNpbmNlIGl0IGhhcyBiZWVuXG4gICAgICAvLyBcImNvbnN1bWVkXCIgYnkgdGhlIGRlbGVnYXRlIGl0ZXJhdG9yLiBJZiBjb250ZXh0Lm1ldGhvZCB3YXNcbiAgICAgIC8vIFwicmV0dXJuXCIsIGFsbG93IHRoZSBvcmlnaW5hbCAucmV0dXJuIGNhbGwgdG8gY29udGludWUgaW4gdGhlXG4gICAgICAvLyBvdXRlciBnZW5lcmF0b3IuXG4gICAgICBpZiAoY29udGV4dC5tZXRob2QgIT09IFwicmV0dXJuXCIpIHtcbiAgICAgICAgY29udGV4dC5tZXRob2QgPSBcIm5leHRcIjtcbiAgICAgICAgY29udGV4dC5hcmcgPSB1bmRlZmluZWQ7XG4gICAgICB9XG5cbiAgICB9IGVsc2Uge1xuICAgICAgLy8gUmUteWllbGQgdGhlIHJlc3VsdCByZXR1cm5lZCBieSB0aGUgZGVsZWdhdGUgbWV0aG9kLlxuICAgICAgcmV0dXJuIGluZm87XG4gICAgfVxuXG4gICAgLy8gVGhlIGRlbGVnYXRlIGl0ZXJhdG9yIGlzIGZpbmlzaGVkLCBzbyBmb3JnZXQgaXQgYW5kIGNvbnRpbnVlIHdpdGhcbiAgICAvLyB0aGUgb3V0ZXIgZ2VuZXJhdG9yLlxuICAgIGNvbnRleHQuZGVsZWdhdGUgPSBudWxsO1xuICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICB9XG5cbiAgLy8gRGVmaW5lIEdlbmVyYXRvci5wcm90b3R5cGUue25leHQsdGhyb3cscmV0dXJufSBpbiB0ZXJtcyBvZiB0aGVcbiAgLy8gdW5pZmllZCAuX2ludm9rZSBoZWxwZXIgbWV0aG9kLlxuICBkZWZpbmVJdGVyYXRvck1ldGhvZHMoR3ApO1xuXG4gIGRlZmluZShHcCwgdG9TdHJpbmdUYWdTeW1ib2wsIFwiR2VuZXJhdG9yXCIpO1xuXG4gIC8vIEEgR2VuZXJhdG9yIHNob3VsZCBhbHdheXMgcmV0dXJuIGl0c2VsZiBhcyB0aGUgaXRlcmF0b3Igb2JqZWN0IHdoZW4gdGhlXG4gIC8vIEBAaXRlcmF0b3IgZnVuY3Rpb24gaXMgY2FsbGVkIG9uIGl0LiBTb21lIGJyb3dzZXJzJyBpbXBsZW1lbnRhdGlvbnMgb2YgdGhlXG4gIC8vIGl0ZXJhdG9yIHByb3RvdHlwZSBjaGFpbiBpbmNvcnJlY3RseSBpbXBsZW1lbnQgdGhpcywgY2F1c2luZyB0aGUgR2VuZXJhdG9yXG4gIC8vIG9iamVjdCB0byBub3QgYmUgcmV0dXJuZWQgZnJvbSB0aGlzIGNhbGwuIFRoaXMgZW5zdXJlcyB0aGF0IGRvZXNuJ3QgaGFwcGVuLlxuICAvLyBTZWUgaHR0cHM6Ly9naXRodWIuY29tL2ZhY2Vib29rL3JlZ2VuZXJhdG9yL2lzc3Vlcy8yNzQgZm9yIG1vcmUgZGV0YWlscy5cbiAgZGVmaW5lKEdwLCBpdGVyYXRvclN5bWJvbCwgZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH0pO1xuXG4gIGRlZmluZShHcCwgXCJ0b1N0cmluZ1wiLCBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gXCJbb2JqZWN0IEdlbmVyYXRvcl1cIjtcbiAgfSk7XG5cbiAgZnVuY3Rpb24gcHVzaFRyeUVudHJ5KGxvY3MpIHtcbiAgICB2YXIgZW50cnkgPSB7IHRyeUxvYzogbG9jc1swXSB9O1xuXG4gICAgaWYgKDEgaW4gbG9jcykge1xuICAgICAgZW50cnkuY2F0Y2hMb2MgPSBsb2NzWzFdO1xuICAgIH1cblxuICAgIGlmICgyIGluIGxvY3MpIHtcbiAgICAgIGVudHJ5LmZpbmFsbHlMb2MgPSBsb2NzWzJdO1xuICAgICAgZW50cnkuYWZ0ZXJMb2MgPSBsb2NzWzNdO1xuICAgIH1cblxuICAgIHRoaXMudHJ5RW50cmllcy5wdXNoKGVudHJ5KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHJlc2V0VHJ5RW50cnkoZW50cnkpIHtcbiAgICB2YXIgcmVjb3JkID0gZW50cnkuY29tcGxldGlvbiB8fCB7fTtcbiAgICByZWNvcmQudHlwZSA9IFwibm9ybWFsXCI7XG4gICAgZGVsZXRlIHJlY29yZC5hcmc7XG4gICAgZW50cnkuY29tcGxldGlvbiA9IHJlY29yZDtcbiAgfVxuXG4gIGZ1bmN0aW9uIENvbnRleHQodHJ5TG9jc0xpc3QpIHtcbiAgICAvLyBUaGUgcm9vdCBlbnRyeSBvYmplY3QgKGVmZmVjdGl2ZWx5IGEgdHJ5IHN0YXRlbWVudCB3aXRob3V0IGEgY2F0Y2hcbiAgICAvLyBvciBhIGZpbmFsbHkgYmxvY2spIGdpdmVzIHVzIGEgcGxhY2UgdG8gc3RvcmUgdmFsdWVzIHRocm93biBmcm9tXG4gICAgLy8gbG9jYXRpb25zIHdoZXJlIHRoZXJlIGlzIG5vIGVuY2xvc2luZyB0cnkgc3RhdGVtZW50LlxuICAgIHRoaXMudHJ5RW50cmllcyA9IFt7IHRyeUxvYzogXCJyb290XCIgfV07XG4gICAgdHJ5TG9jc0xpc3QuZm9yRWFjaChwdXNoVHJ5RW50cnksIHRoaXMpO1xuICAgIHRoaXMucmVzZXQodHJ1ZSk7XG4gIH1cblxuICBleHBvcnRzLmtleXMgPSBmdW5jdGlvbih2YWwpIHtcbiAgICB2YXIgb2JqZWN0ID0gT2JqZWN0KHZhbCk7XG4gICAgdmFyIGtleXMgPSBbXTtcbiAgICBmb3IgKHZhciBrZXkgaW4gb2JqZWN0KSB7XG4gICAgICBrZXlzLnB1c2goa2V5KTtcbiAgICB9XG4gICAga2V5cy5yZXZlcnNlKCk7XG5cbiAgICAvLyBSYXRoZXIgdGhhbiByZXR1cm5pbmcgYW4gb2JqZWN0IHdpdGggYSBuZXh0IG1ldGhvZCwgd2Uga2VlcFxuICAgIC8vIHRoaW5ncyBzaW1wbGUgYW5kIHJldHVybiB0aGUgbmV4dCBmdW5jdGlvbiBpdHNlbGYuXG4gICAgcmV0dXJuIGZ1bmN0aW9uIG5leHQoKSB7XG4gICAgICB3aGlsZSAoa2V5cy5sZW5ndGgpIHtcbiAgICAgICAgdmFyIGtleSA9IGtleXMucG9wKCk7XG4gICAgICAgIGlmIChrZXkgaW4gb2JqZWN0KSB7XG4gICAgICAgICAgbmV4dC52YWx1ZSA9IGtleTtcbiAgICAgICAgICBuZXh0LmRvbmUgPSBmYWxzZTtcbiAgICAgICAgICByZXR1cm4gbmV4dDtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvLyBUbyBhdm9pZCBjcmVhdGluZyBhbiBhZGRpdGlvbmFsIG9iamVjdCwgd2UganVzdCBoYW5nIHRoZSAudmFsdWVcbiAgICAgIC8vIGFuZCAuZG9uZSBwcm9wZXJ0aWVzIG9mZiB0aGUgbmV4dCBmdW5jdGlvbiBvYmplY3QgaXRzZWxmLiBUaGlzXG4gICAgICAvLyBhbHNvIGVuc3VyZXMgdGhhdCB0aGUgbWluaWZpZXIgd2lsbCBub3QgYW5vbnltaXplIHRoZSBmdW5jdGlvbi5cbiAgICAgIG5leHQuZG9uZSA9IHRydWU7XG4gICAgICByZXR1cm4gbmV4dDtcbiAgICB9O1xuICB9O1xuXG4gIGZ1bmN0aW9uIHZhbHVlcyhpdGVyYWJsZSkge1xuICAgIGlmIChpdGVyYWJsZSkge1xuICAgICAgdmFyIGl0ZXJhdG9yTWV0aG9kID0gaXRlcmFibGVbaXRlcmF0b3JTeW1ib2xdO1xuICAgICAgaWYgKGl0ZXJhdG9yTWV0aG9kKSB7XG4gICAgICAgIHJldHVybiBpdGVyYXRvck1ldGhvZC5jYWxsKGl0ZXJhYmxlKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHR5cGVvZiBpdGVyYWJsZS5uZXh0ID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgcmV0dXJuIGl0ZXJhYmxlO1xuICAgICAgfVxuXG4gICAgICBpZiAoIWlzTmFOKGl0ZXJhYmxlLmxlbmd0aCkpIHtcbiAgICAgICAgdmFyIGkgPSAtMSwgbmV4dCA9IGZ1bmN0aW9uIG5leHQoKSB7XG4gICAgICAgICAgd2hpbGUgKCsraSA8IGl0ZXJhYmxlLmxlbmd0aCkge1xuICAgICAgICAgICAgaWYgKGhhc093bi5jYWxsKGl0ZXJhYmxlLCBpKSkge1xuICAgICAgICAgICAgICBuZXh0LnZhbHVlID0gaXRlcmFibGVbaV07XG4gICAgICAgICAgICAgIG5leHQuZG9uZSA9IGZhbHNlO1xuICAgICAgICAgICAgICByZXR1cm4gbmV4dDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICBuZXh0LnZhbHVlID0gdW5kZWZpbmVkO1xuICAgICAgICAgIG5leHQuZG9uZSA9IHRydWU7XG5cbiAgICAgICAgICByZXR1cm4gbmV4dDtcbiAgICAgICAgfTtcblxuICAgICAgICByZXR1cm4gbmV4dC5uZXh0ID0gbmV4dDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBSZXR1cm4gYW4gaXRlcmF0b3Igd2l0aCBubyB2YWx1ZXMuXG4gICAgcmV0dXJuIHsgbmV4dDogZG9uZVJlc3VsdCB9O1xuICB9XG4gIGV4cG9ydHMudmFsdWVzID0gdmFsdWVzO1xuXG4gIGZ1bmN0aW9uIGRvbmVSZXN1bHQoKSB7XG4gICAgcmV0dXJuIHsgdmFsdWU6IHVuZGVmaW5lZCwgZG9uZTogdHJ1ZSB9O1xuICB9XG5cbiAgQ29udGV4dC5wcm90b3R5cGUgPSB7XG4gICAgY29uc3RydWN0b3I6IENvbnRleHQsXG5cbiAgICByZXNldDogZnVuY3Rpb24oc2tpcFRlbXBSZXNldCkge1xuICAgICAgdGhpcy5wcmV2ID0gMDtcbiAgICAgIHRoaXMubmV4dCA9IDA7XG4gICAgICAvLyBSZXNldHRpbmcgY29udGV4dC5fc2VudCBmb3IgbGVnYWN5IHN1cHBvcnQgb2YgQmFiZWwnc1xuICAgICAgLy8gZnVuY3Rpb24uc2VudCBpbXBsZW1lbnRhdGlvbi5cbiAgICAgIHRoaXMuc2VudCA9IHRoaXMuX3NlbnQgPSB1bmRlZmluZWQ7XG4gICAgICB0aGlzLmRvbmUgPSBmYWxzZTtcbiAgICAgIHRoaXMuZGVsZWdhdGUgPSBudWxsO1xuXG4gICAgICB0aGlzLm1ldGhvZCA9IFwibmV4dFwiO1xuICAgICAgdGhpcy5hcmcgPSB1bmRlZmluZWQ7XG5cbiAgICAgIHRoaXMudHJ5RW50cmllcy5mb3JFYWNoKHJlc2V0VHJ5RW50cnkpO1xuXG4gICAgICBpZiAoIXNraXBUZW1wUmVzZXQpIHtcbiAgICAgICAgZm9yICh2YXIgbmFtZSBpbiB0aGlzKSB7XG4gICAgICAgICAgLy8gTm90IHN1cmUgYWJvdXQgdGhlIG9wdGltYWwgb3JkZXIgb2YgdGhlc2UgY29uZGl0aW9uczpcbiAgICAgICAgICBpZiAobmFtZS5jaGFyQXQoMCkgPT09IFwidFwiICYmXG4gICAgICAgICAgICAgIGhhc093bi5jYWxsKHRoaXMsIG5hbWUpICYmXG4gICAgICAgICAgICAgICFpc05hTigrbmFtZS5zbGljZSgxKSkpIHtcbiAgICAgICAgICAgIHRoaXNbbmFtZV0gPSB1bmRlZmluZWQ7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcblxuICAgIHN0b3A6IGZ1bmN0aW9uKCkge1xuICAgICAgdGhpcy5kb25lID0gdHJ1ZTtcblxuICAgICAgdmFyIHJvb3RFbnRyeSA9IHRoaXMudHJ5RW50cmllc1swXTtcbiAgICAgIHZhciByb290UmVjb3JkID0gcm9vdEVudHJ5LmNvbXBsZXRpb247XG4gICAgICBpZiAocm9vdFJlY29yZC50eXBlID09PSBcInRocm93XCIpIHtcbiAgICAgICAgdGhyb3cgcm9vdFJlY29yZC5hcmc7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0aGlzLnJ2YWw7XG4gICAgfSxcblxuICAgIGRpc3BhdGNoRXhjZXB0aW9uOiBmdW5jdGlvbihleGNlcHRpb24pIHtcbiAgICAgIGlmICh0aGlzLmRvbmUpIHtcbiAgICAgICAgdGhyb3cgZXhjZXB0aW9uO1xuICAgICAgfVxuXG4gICAgICB2YXIgY29udGV4dCA9IHRoaXM7XG4gICAgICBmdW5jdGlvbiBoYW5kbGUobG9jLCBjYXVnaHQpIHtcbiAgICAgICAgcmVjb3JkLnR5cGUgPSBcInRocm93XCI7XG4gICAgICAgIHJlY29yZC5hcmcgPSBleGNlcHRpb247XG4gICAgICAgIGNvbnRleHQubmV4dCA9IGxvYztcblxuICAgICAgICBpZiAoY2F1Z2h0KSB7XG4gICAgICAgICAgLy8gSWYgdGhlIGRpc3BhdGNoZWQgZXhjZXB0aW9uIHdhcyBjYXVnaHQgYnkgYSBjYXRjaCBibG9jayxcbiAgICAgICAgICAvLyB0aGVuIGxldCB0aGF0IGNhdGNoIGJsb2NrIGhhbmRsZSB0aGUgZXhjZXB0aW9uIG5vcm1hbGx5LlxuICAgICAgICAgIGNvbnRleHQubWV0aG9kID0gXCJuZXh0XCI7XG4gICAgICAgICAgY29udGV4dC5hcmcgPSB1bmRlZmluZWQ7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gISEgY2F1Z2h0O1xuICAgICAgfVxuXG4gICAgICBmb3IgKHZhciBpID0gdGhpcy50cnlFbnRyaWVzLmxlbmd0aCAtIDE7IGkgPj0gMDsgLS1pKSB7XG4gICAgICAgIHZhciBlbnRyeSA9IHRoaXMudHJ5RW50cmllc1tpXTtcbiAgICAgICAgdmFyIHJlY29yZCA9IGVudHJ5LmNvbXBsZXRpb247XG5cbiAgICAgICAgaWYgKGVudHJ5LnRyeUxvYyA9PT0gXCJyb290XCIpIHtcbiAgICAgICAgICAvLyBFeGNlcHRpb24gdGhyb3duIG91dHNpZGUgb2YgYW55IHRyeSBibG9jayB0aGF0IGNvdWxkIGhhbmRsZVxuICAgICAgICAgIC8vIGl0LCBzbyBzZXQgdGhlIGNvbXBsZXRpb24gdmFsdWUgb2YgdGhlIGVudGlyZSBmdW5jdGlvbiB0b1xuICAgICAgICAgIC8vIHRocm93IHRoZSBleGNlcHRpb24uXG4gICAgICAgICAgcmV0dXJuIGhhbmRsZShcImVuZFwiKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChlbnRyeS50cnlMb2MgPD0gdGhpcy5wcmV2KSB7XG4gICAgICAgICAgdmFyIGhhc0NhdGNoID0gaGFzT3duLmNhbGwoZW50cnksIFwiY2F0Y2hMb2NcIik7XG4gICAgICAgICAgdmFyIGhhc0ZpbmFsbHkgPSBoYXNPd24uY2FsbChlbnRyeSwgXCJmaW5hbGx5TG9jXCIpO1xuXG4gICAgICAgICAgaWYgKGhhc0NhdGNoICYmIGhhc0ZpbmFsbHkpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLnByZXYgPCBlbnRyeS5jYXRjaExvYykge1xuICAgICAgICAgICAgICByZXR1cm4gaGFuZGxlKGVudHJ5LmNhdGNoTG9jLCB0cnVlKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAodGhpcy5wcmV2IDwgZW50cnkuZmluYWxseUxvYykge1xuICAgICAgICAgICAgICByZXR1cm4gaGFuZGxlKGVudHJ5LmZpbmFsbHlMb2MpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgfSBlbHNlIGlmIChoYXNDYXRjaCkge1xuICAgICAgICAgICAgaWYgKHRoaXMucHJldiA8IGVudHJ5LmNhdGNoTG9jKSB7XG4gICAgICAgICAgICAgIHJldHVybiBoYW5kbGUoZW50cnkuY2F0Y2hMb2MsIHRydWUpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgfSBlbHNlIGlmIChoYXNGaW5hbGx5KSB7XG4gICAgICAgICAgICBpZiAodGhpcy5wcmV2IDwgZW50cnkuZmluYWxseUxvYykge1xuICAgICAgICAgICAgICByZXR1cm4gaGFuZGxlKGVudHJ5LmZpbmFsbHlMb2MpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcInRyeSBzdGF0ZW1lbnQgd2l0aG91dCBjYXRjaCBvciBmaW5hbGx5XCIpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG5cbiAgICBhYnJ1cHQ6IGZ1bmN0aW9uKHR5cGUsIGFyZykge1xuICAgICAgZm9yICh2YXIgaSA9IHRoaXMudHJ5RW50cmllcy5sZW5ndGggLSAxOyBpID49IDA7IC0taSkge1xuICAgICAgICB2YXIgZW50cnkgPSB0aGlzLnRyeUVudHJpZXNbaV07XG4gICAgICAgIGlmIChlbnRyeS50cnlMb2MgPD0gdGhpcy5wcmV2ICYmXG4gICAgICAgICAgICBoYXNPd24uY2FsbChlbnRyeSwgXCJmaW5hbGx5TG9jXCIpICYmXG4gICAgICAgICAgICB0aGlzLnByZXYgPCBlbnRyeS5maW5hbGx5TG9jKSB7XG4gICAgICAgICAgdmFyIGZpbmFsbHlFbnRyeSA9IGVudHJ5O1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChmaW5hbGx5RW50cnkgJiZcbiAgICAgICAgICAodHlwZSA9PT0gXCJicmVha1wiIHx8XG4gICAgICAgICAgIHR5cGUgPT09IFwiY29udGludWVcIikgJiZcbiAgICAgICAgICBmaW5hbGx5RW50cnkudHJ5TG9jIDw9IGFyZyAmJlxuICAgICAgICAgIGFyZyA8PSBmaW5hbGx5RW50cnkuZmluYWxseUxvYykge1xuICAgICAgICAvLyBJZ25vcmUgdGhlIGZpbmFsbHkgZW50cnkgaWYgY29udHJvbCBpcyBub3QganVtcGluZyB0byBhXG4gICAgICAgIC8vIGxvY2F0aW9uIG91dHNpZGUgdGhlIHRyeS9jYXRjaCBibG9jay5cbiAgICAgICAgZmluYWxseUVudHJ5ID0gbnVsbDtcbiAgICAgIH1cblxuICAgICAgdmFyIHJlY29yZCA9IGZpbmFsbHlFbnRyeSA/IGZpbmFsbHlFbnRyeS5jb21wbGV0aW9uIDoge307XG4gICAgICByZWNvcmQudHlwZSA9IHR5cGU7XG4gICAgICByZWNvcmQuYXJnID0gYXJnO1xuXG4gICAgICBpZiAoZmluYWxseUVudHJ5KSB7XG4gICAgICAgIHRoaXMubWV0aG9kID0gXCJuZXh0XCI7XG4gICAgICAgIHRoaXMubmV4dCA9IGZpbmFsbHlFbnRyeS5maW5hbGx5TG9jO1xuICAgICAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRoaXMuY29tcGxldGUocmVjb3JkKTtcbiAgICB9LFxuXG4gICAgY29tcGxldGU6IGZ1bmN0aW9uKHJlY29yZCwgYWZ0ZXJMb2MpIHtcbiAgICAgIGlmIChyZWNvcmQudHlwZSA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgIHRocm93IHJlY29yZC5hcmc7XG4gICAgICB9XG5cbiAgICAgIGlmIChyZWNvcmQudHlwZSA9PT0gXCJicmVha1wiIHx8XG4gICAgICAgICAgcmVjb3JkLnR5cGUgPT09IFwiY29udGludWVcIikge1xuICAgICAgICB0aGlzLm5leHQgPSByZWNvcmQuYXJnO1xuICAgICAgfSBlbHNlIGlmIChyZWNvcmQudHlwZSA9PT0gXCJyZXR1cm5cIikge1xuICAgICAgICB0aGlzLnJ2YWwgPSB0aGlzLmFyZyA9IHJlY29yZC5hcmc7XG4gICAgICAgIHRoaXMubWV0aG9kID0gXCJyZXR1cm5cIjtcbiAgICAgICAgdGhpcy5uZXh0ID0gXCJlbmRcIjtcbiAgICAgIH0gZWxzZSBpZiAocmVjb3JkLnR5cGUgPT09IFwibm9ybWFsXCIgJiYgYWZ0ZXJMb2MpIHtcbiAgICAgICAgdGhpcy5uZXh0ID0gYWZ0ZXJMb2M7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgIH0sXG5cbiAgICBmaW5pc2g6IGZ1bmN0aW9uKGZpbmFsbHlMb2MpIHtcbiAgICAgIGZvciAodmFyIGkgPSB0aGlzLnRyeUVudHJpZXMubGVuZ3RoIC0gMTsgaSA+PSAwOyAtLWkpIHtcbiAgICAgICAgdmFyIGVudHJ5ID0gdGhpcy50cnlFbnRyaWVzW2ldO1xuICAgICAgICBpZiAoZW50cnkuZmluYWxseUxvYyA9PT0gZmluYWxseUxvYykge1xuICAgICAgICAgIHRoaXMuY29tcGxldGUoZW50cnkuY29tcGxldGlvbiwgZW50cnkuYWZ0ZXJMb2MpO1xuICAgICAgICAgIHJlc2V0VHJ5RW50cnkoZW50cnkpO1xuICAgICAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcblxuICAgIFwiY2F0Y2hcIjogZnVuY3Rpb24odHJ5TG9jKSB7XG4gICAgICBmb3IgKHZhciBpID0gdGhpcy50cnlFbnRyaWVzLmxlbmd0aCAtIDE7IGkgPj0gMDsgLS1pKSB7XG4gICAgICAgIHZhciBlbnRyeSA9IHRoaXMudHJ5RW50cmllc1tpXTtcbiAgICAgICAgaWYgKGVudHJ5LnRyeUxvYyA9PT0gdHJ5TG9jKSB7XG4gICAgICAgICAgdmFyIHJlY29yZCA9IGVudHJ5LmNvbXBsZXRpb247XG4gICAgICAgICAgaWYgKHJlY29yZC50eXBlID09PSBcInRocm93XCIpIHtcbiAgICAgICAgICAgIHZhciB0aHJvd24gPSByZWNvcmQuYXJnO1xuICAgICAgICAgICAgcmVzZXRUcnlFbnRyeShlbnRyeSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiB0aHJvd247XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLy8gVGhlIGNvbnRleHQuY2F0Y2ggbWV0aG9kIG11c3Qgb25seSBiZSBjYWxsZWQgd2l0aCBhIGxvY2F0aW9uXG4gICAgICAvLyBhcmd1bWVudCB0aGF0IGNvcnJlc3BvbmRzIHRvIGEga25vd24gY2F0Y2ggYmxvY2suXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJpbGxlZ2FsIGNhdGNoIGF0dGVtcHRcIik7XG4gICAgfSxcblxuICAgIGRlbGVnYXRlWWllbGQ6IGZ1bmN0aW9uKGl0ZXJhYmxlLCByZXN1bHROYW1lLCBuZXh0TG9jKSB7XG4gICAgICB0aGlzLmRlbGVnYXRlID0ge1xuICAgICAgICBpdGVyYXRvcjogdmFsdWVzKGl0ZXJhYmxlKSxcbiAgICAgICAgcmVzdWx0TmFtZTogcmVzdWx0TmFtZSxcbiAgICAgICAgbmV4dExvYzogbmV4dExvY1xuICAgICAgfTtcblxuICAgICAgaWYgKHRoaXMubWV0aG9kID09PSBcIm5leHRcIikge1xuICAgICAgICAvLyBEZWxpYmVyYXRlbHkgZm9yZ2V0IHRoZSBsYXN0IHNlbnQgdmFsdWUgc28gdGhhdCB3ZSBkb24ndFxuICAgICAgICAvLyBhY2NpZGVudGFsbHkgcGFzcyBpdCBvbiB0byB0aGUgZGVsZWdhdGUuXG4gICAgICAgIHRoaXMuYXJnID0gdW5kZWZpbmVkO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgICB9XG4gIH07XG5cbiAgLy8gUmVnYXJkbGVzcyBvZiB3aGV0aGVyIHRoaXMgc2NyaXB0IGlzIGV4ZWN1dGluZyBhcyBhIENvbW1vbkpTIG1vZHVsZVxuICAvLyBvciBub3QsIHJldHVybiB0aGUgcnVudGltZSBvYmplY3Qgc28gdGhhdCB3ZSBjYW4gZGVjbGFyZSB0aGUgdmFyaWFibGVcbiAgLy8gcmVnZW5lcmF0b3JSdW50aW1lIGluIHRoZSBvdXRlciBzY29wZSwgd2hpY2ggYWxsb3dzIHRoaXMgbW9kdWxlIHRvIGJlXG4gIC8vIGluamVjdGVkIGVhc2lseSBieSBgYmluL3JlZ2VuZXJhdG9yIC0taW5jbHVkZS1ydW50aW1lIHNjcmlwdC5qc2AuXG4gIHJldHVybiBleHBvcnRzO1xuXG59KFxuICAvLyBJZiB0aGlzIHNjcmlwdCBpcyBleGVjdXRpbmcgYXMgYSBDb21tb25KUyBtb2R1bGUsIHVzZSBtb2R1bGUuZXhwb3J0c1xuICAvLyBhcyB0aGUgcmVnZW5lcmF0b3JSdW50aW1lIG5hbWVzcGFjZS4gT3RoZXJ3aXNlIGNyZWF0ZSBhIG5ldyBlbXB0eVxuICAvLyBvYmplY3QuIEVpdGhlciB3YXksIHRoZSByZXN1bHRpbmcgb2JqZWN0IHdpbGwgYmUgdXNlZCB0byBpbml0aWFsaXplXG4gIC8vIHRoZSByZWdlbmVyYXRvclJ1bnRpbWUgdmFyaWFibGUgYXQgdGhlIHRvcCBvZiB0aGlzIGZpbGUuXG4gIHR5cGVvZiBtb2R1bGUgPT09IFwib2JqZWN0XCIgPyBtb2R1bGUuZXhwb3J0cyA6IHt9XG4pKTtcblxudHJ5IHtcbiAgcmVnZW5lcmF0b3JSdW50aW1lID0gcnVudGltZTtcbn0gY2F0Y2ggKGFjY2lkZW50YWxTdHJpY3RNb2RlKSB7XG4gIC8vIFRoaXMgbW9kdWxlIHNob3VsZCBub3QgYmUgcnVubmluZyBpbiBzdHJpY3QgbW9kZSwgc28gdGhlIGFib3ZlXG4gIC8vIGFzc2lnbm1lbnQgc2hvdWxkIGFsd2F5cyB3b3JrIHVubGVzcyBzb21ldGhpbmcgaXMgbWlzY29uZmlndXJlZC4gSnVzdFxuICAvLyBpbiBjYXNlIHJ1bnRpbWUuanMgYWNjaWRlbnRhbGx5IHJ1bnMgaW4gc3RyaWN0IG1vZGUsIGluIG1vZGVybiBlbmdpbmVzXG4gIC8vIHdlIGNhbiBleHBsaWNpdGx5IGFjY2VzcyBnbG9iYWxUaGlzLiBJbiBvbGRlciBlbmdpbmVzIHdlIGNhbiBlc2NhcGVcbiAgLy8gc3RyaWN0IG1vZGUgdXNpbmcgYSBnbG9iYWwgRnVuY3Rpb24gY2FsbC4gVGhpcyBjb3VsZCBjb25jZWl2YWJseSBmYWlsXG4gIC8vIGlmIGEgQ29udGVudCBTZWN1cml0eSBQb2xpY3kgZm9yYmlkcyB1c2luZyBGdW5jdGlvbiwgYnV0IGluIHRoYXQgY2FzZVxuICAvLyB0aGUgcHJvcGVyIHNvbHV0aW9uIGlzIHRvIGZpeCB0aGUgYWNjaWRlbnRhbCBzdHJpY3QgbW9kZSBwcm9ibGVtLiBJZlxuICAvLyB5b3UndmUgbWlzY29uZmlndXJlZCB5b3VyIGJ1bmRsZXIgdG8gZm9yY2Ugc3RyaWN0IG1vZGUgYW5kIGFwcGxpZWQgYVxuICAvLyBDU1AgdG8gZm9yYmlkIEZ1bmN0aW9uLCBhbmQgeW91J3JlIG5vdCB3aWxsaW5nIHRvIGZpeCBlaXRoZXIgb2YgdGhvc2VcbiAgLy8gcHJvYmxlbXMsIHBsZWFzZSBkZXRhaWwgeW91ciB1bmlxdWUgcHJlZGljYW1lbnQgaW4gYSBHaXRIdWIgaXNzdWUuXG4gIGlmICh0eXBlb2YgZ2xvYmFsVGhpcyA9PT0gXCJvYmplY3RcIikge1xuICAgIGdsb2JhbFRoaXMucmVnZW5lcmF0b3JSdW50aW1lID0gcnVudGltZTtcbiAgfSBlbHNlIHtcbiAgICBGdW5jdGlvbihcInJcIiwgXCJyZWdlbmVyYXRvclJ1bnRpbWUgPSByXCIpKHJ1bnRpbWUpO1xuICB9XG59XG4iLCIoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICBpZiAodHlwZW9mIGRlZmluZSA9PT0gXCJmdW5jdGlvblwiICYmIGRlZmluZS5hbWQpIHtcbiAgICBkZWZpbmUoXCJ3ZWJleHRlbnNpb24tcG9seWZpbGxcIiwgW1wibW9kdWxlXCJdLCBmYWN0b3J5KTtcbiAgfSBlbHNlIGlmICh0eXBlb2YgZXhwb3J0cyAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgIGZhY3RvcnkobW9kdWxlKTtcbiAgfSBlbHNlIHtcbiAgICB2YXIgbW9kID0ge1xuICAgICAgZXhwb3J0czoge31cbiAgICB9O1xuICAgIGZhY3RvcnkobW9kKTtcbiAgICBnbG9iYWwuYnJvd3NlciA9IG1vZC5leHBvcnRzO1xuICB9XG59KSh0eXBlb2YgZ2xvYmFsVGhpcyAhPT0gXCJ1bmRlZmluZWRcIiA/IGdsb2JhbFRoaXMgOiB0eXBlb2Ygc2VsZiAhPT0gXCJ1bmRlZmluZWRcIiA/IHNlbGYgOiB0aGlzLCBmdW5jdGlvbiAobW9kdWxlKSB7XG4gIC8qIHdlYmV4dGVuc2lvbi1wb2x5ZmlsbCAtIHYwLjEwLjAgLSBGcmkgQXVnIDEyIDIwMjIgMTk6NDI6NDQgKi9cblxuICAvKiAtKi0gTW9kZTogaW5kZW50LXRhYnMtbW9kZTogbmlsOyBqcy1pbmRlbnQtbGV2ZWw6IDIgLSotICovXG5cbiAgLyogdmltOiBzZXQgc3RzPTIgc3c9MiBldCB0dz04MDogKi9cblxuICAvKiBUaGlzIFNvdXJjZSBDb2RlIEZvcm0gaXMgc3ViamVjdCB0byB0aGUgdGVybXMgb2YgdGhlIE1vemlsbGEgUHVibGljXG4gICAqIExpY2Vuc2UsIHYuIDIuMC4gSWYgYSBjb3B5IG9mIHRoZSBNUEwgd2FzIG5vdCBkaXN0cmlidXRlZCB3aXRoIHRoaXNcbiAgICogZmlsZSwgWW91IGNhbiBvYnRhaW4gb25lIGF0IGh0dHA6Ly9tb3ppbGxhLm9yZy9NUEwvMi4wLy4gKi9cbiAgXCJ1c2Ugc3RyaWN0XCI7XG5cbiAgaWYgKCFnbG9iYWxUaGlzLmNocm9tZT8ucnVudGltZT8uaWQpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJUaGlzIHNjcmlwdCBzaG91bGQgb25seSBiZSBsb2FkZWQgaW4gYSBicm93c2VyIGV4dGVuc2lvbi5cIik7XG4gIH1cblxuICBpZiAodHlwZW9mIGdsb2JhbFRoaXMuYnJvd3NlciA9PT0gXCJ1bmRlZmluZWRcIiB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YoZ2xvYmFsVGhpcy5icm93c2VyKSAhPT0gT2JqZWN0LnByb3RvdHlwZSkge1xuICAgIGNvbnN0IENIUk9NRV9TRU5EX01FU1NBR0VfQ0FMTEJBQ0tfTk9fUkVTUE9OU0VfTUVTU0FHRSA9IFwiVGhlIG1lc3NhZ2UgcG9ydCBjbG9zZWQgYmVmb3JlIGEgcmVzcG9uc2Ugd2FzIHJlY2VpdmVkLlwiOyAvLyBXcmFwcGluZyB0aGUgYnVsayBvZiB0aGlzIHBvbHlmaWxsIGluIGEgb25lLXRpbWUtdXNlIGZ1bmN0aW9uIGlzIGEgbWlub3JcbiAgICAvLyBvcHRpbWl6YXRpb24gZm9yIEZpcmVmb3guIFNpbmNlIFNwaWRlcm1vbmtleSBkb2VzIG5vdCBmdWxseSBwYXJzZSB0aGVcbiAgICAvLyBjb250ZW50cyBvZiBhIGZ1bmN0aW9uIHVudGlsIHRoZSBmaXJzdCB0aW1lIGl0J3MgY2FsbGVkLCBhbmQgc2luY2UgaXQgd2lsbFxuICAgIC8vIG5ldmVyIGFjdHVhbGx5IG5lZWQgdG8gYmUgY2FsbGVkLCB0aGlzIGFsbG93cyB0aGUgcG9seWZpbGwgdG8gYmUgaW5jbHVkZWRcbiAgICAvLyBpbiBGaXJlZm94IG5lYXJseSBmb3IgZnJlZS5cblxuICAgIGNvbnN0IHdyYXBBUElzID0gZXh0ZW5zaW9uQVBJcyA9PiB7XG4gICAgICAvLyBOT1RFOiBhcGlNZXRhZGF0YSBpcyBhc3NvY2lhdGVkIHRvIHRoZSBjb250ZW50IG9mIHRoZSBhcGktbWV0YWRhdGEuanNvbiBmaWxlXG4gICAgICAvLyBhdCBidWlsZCB0aW1lIGJ5IHJlcGxhY2luZyB0aGUgZm9sbG93aW5nIFwiaW5jbHVkZVwiIHdpdGggdGhlIGNvbnRlbnQgb2YgdGhlXG4gICAgICAvLyBKU09OIGZpbGUuXG4gICAgICBjb25zdCBhcGlNZXRhZGF0YSA9IHtcbiAgICAgICAgXCJhbGFybXNcIjoge1xuICAgICAgICAgIFwiY2xlYXJcIjoge1xuICAgICAgICAgICAgXCJtaW5BcmdzXCI6IDAsXG4gICAgICAgICAgICBcIm1heEFyZ3NcIjogMVxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJjbGVhckFsbFwiOiB7XG4gICAgICAgICAgICBcIm1pbkFyZ3NcIjogMCxcbiAgICAgICAgICAgIFwibWF4QXJnc1wiOiAwXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcImdldFwiOiB7XG4gICAgICAgICAgICBcIm1pbkFyZ3NcIjogMCxcbiAgICAgICAgICAgIFwibWF4QXJnc1wiOiAxXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcImdldEFsbFwiOiB7XG4gICAgICAgICAgICBcIm1pbkFyZ3NcIjogMCxcbiAgICAgICAgICAgIFwibWF4QXJnc1wiOiAwXG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBcImJvb2ttYXJrc1wiOiB7XG4gICAgICAgICAgXCJjcmVhdGVcIjoge1xuICAgICAgICAgICAgXCJtaW5BcmdzXCI6IDEsXG4gICAgICAgICAgICBcIm1heEFyZ3NcIjogMVxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJnZXRcIjoge1xuICAgICAgICAgICAgXCJtaW5BcmdzXCI6IDEsXG4gICAgICAgICAgICBcIm1heEFyZ3NcIjogMVxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJnZXRDaGlsZHJlblwiOiB7XG4gICAgICAgICAgICBcIm1pbkFyZ3NcIjogMSxcbiAgICAgICAgICAgIFwibWF4QXJnc1wiOiAxXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcImdldFJlY2VudFwiOiB7XG4gICAgICAgICAgICBcIm1pbkFyZ3NcIjogMSxcbiAgICAgICAgICAgIFwibWF4QXJnc1wiOiAxXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcImdldFN1YlRyZWVcIjoge1xuICAgICAgICAgICAgXCJtaW5BcmdzXCI6IDEsXG4gICAgICAgICAgICBcIm1heEFyZ3NcIjogMVxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJnZXRUcmVlXCI6IHtcbiAgICAgICAgICAgIFwibWluQXJnc1wiOiAwLFxuICAgICAgICAgICAgXCJtYXhBcmdzXCI6IDBcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwibW92ZVwiOiB7XG4gICAgICAgICAgICBcIm1pbkFyZ3NcIjogMixcbiAgICAgICAgICAgIFwibWF4QXJnc1wiOiAyXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcInJlbW92ZVwiOiB7XG4gICAgICAgICAgICBcIm1pbkFyZ3NcIjogMSxcbiAgICAgICAgICAgIFwibWF4QXJnc1wiOiAxXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcInJlbW92ZVRyZWVcIjoge1xuICAgICAgICAgICAgXCJtaW5BcmdzXCI6IDEsXG4gICAgICAgICAgICBcIm1heEFyZ3NcIjogMVxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJzZWFyY2hcIjoge1xuICAgICAgICAgICAgXCJtaW5BcmdzXCI6IDEsXG4gICAgICAgICAgICBcIm1heEFyZ3NcIjogMVxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJ1cGRhdGVcIjoge1xuICAgICAgICAgICAgXCJtaW5BcmdzXCI6IDIsXG4gICAgICAgICAgICBcIm1heEFyZ3NcIjogMlxuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgXCJicm93c2VyQWN0aW9uXCI6IHtcbiAgICAgICAgICBcImRpc2FibGVcIjoge1xuICAgICAgICAgICAgXCJtaW5BcmdzXCI6IDAsXG4gICAgICAgICAgICBcIm1heEFyZ3NcIjogMSxcbiAgICAgICAgICAgIFwiZmFsbGJhY2tUb05vQ2FsbGJhY2tcIjogdHJ1ZVxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJlbmFibGVcIjoge1xuICAgICAgICAgICAgXCJtaW5BcmdzXCI6IDAsXG4gICAgICAgICAgICBcIm1heEFyZ3NcIjogMSxcbiAgICAgICAgICAgIFwiZmFsbGJhY2tUb05vQ2FsbGJhY2tcIjogdHJ1ZVxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJnZXRCYWRnZUJhY2tncm91bmRDb2xvclwiOiB7XG4gICAgICAgICAgICBcIm1pbkFyZ3NcIjogMSxcbiAgICAgICAgICAgIFwibWF4QXJnc1wiOiAxXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcImdldEJhZGdlVGV4dFwiOiB7XG4gICAgICAgICAgICBcIm1pbkFyZ3NcIjogMSxcbiAgICAgICAgICAgIFwibWF4QXJnc1wiOiAxXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcImdldFBvcHVwXCI6IHtcbiAgICAgICAgICAgIFwibWluQXJnc1wiOiAxLFxuICAgICAgICAgICAgXCJtYXhBcmdzXCI6IDFcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwiZ2V0VGl0bGVcIjoge1xuICAgICAgICAgICAgXCJtaW5BcmdzXCI6IDEsXG4gICAgICAgICAgICBcIm1heEFyZ3NcIjogMVxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJvcGVuUG9wdXBcIjoge1xuICAgICAgICAgICAgXCJtaW5BcmdzXCI6IDAsXG4gICAgICAgICAgICBcIm1heEFyZ3NcIjogMFxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJzZXRCYWRnZUJhY2tncm91bmRDb2xvclwiOiB7XG4gICAgICAgICAgICBcIm1pbkFyZ3NcIjogMSxcbiAgICAgICAgICAgIFwibWF4QXJnc1wiOiAxLFxuICAgICAgICAgICAgXCJmYWxsYmFja1RvTm9DYWxsYmFja1wiOiB0cnVlXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcInNldEJhZGdlVGV4dFwiOiB7XG4gICAgICAgICAgICBcIm1pbkFyZ3NcIjogMSxcbiAgICAgICAgICAgIFwibWF4QXJnc1wiOiAxLFxuICAgICAgICAgICAgXCJmYWxsYmFja1RvTm9DYWxsYmFja1wiOiB0cnVlXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcInNldEljb25cIjoge1xuICAgICAgICAgICAgXCJtaW5BcmdzXCI6IDEsXG4gICAgICAgICAgICBcIm1heEFyZ3NcIjogMVxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJzZXRQb3B1cFwiOiB7XG4gICAgICAgICAgICBcIm1pbkFyZ3NcIjogMSxcbiAgICAgICAgICAgIFwibWF4QXJnc1wiOiAxLFxuICAgICAgICAgICAgXCJmYWxsYmFja1RvTm9DYWxsYmFja1wiOiB0cnVlXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcInNldFRpdGxlXCI6IHtcbiAgICAgICAgICAgIFwibWluQXJnc1wiOiAxLFxuICAgICAgICAgICAgXCJtYXhBcmdzXCI6IDEsXG4gICAgICAgICAgICBcImZhbGxiYWNrVG9Ob0NhbGxiYWNrXCI6IHRydWVcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIFwiYnJvd3NpbmdEYXRhXCI6IHtcbiAgICAgICAgICBcInJlbW92ZVwiOiB7XG4gICAgICAgICAgICBcIm1pbkFyZ3NcIjogMixcbiAgICAgICAgICAgIFwibWF4QXJnc1wiOiAyXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcInJlbW92ZUNhY2hlXCI6IHtcbiAgICAgICAgICAgIFwibWluQXJnc1wiOiAxLFxuICAgICAgICAgICAgXCJtYXhBcmdzXCI6IDFcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwicmVtb3ZlQ29va2llc1wiOiB7XG4gICAgICAgICAgICBcIm1pbkFyZ3NcIjogMSxcbiAgICAgICAgICAgIFwibWF4QXJnc1wiOiAxXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcInJlbW92ZURvd25sb2Fkc1wiOiB7XG4gICAgICAgICAgICBcIm1pbkFyZ3NcIjogMSxcbiAgICAgICAgICAgIFwibWF4QXJnc1wiOiAxXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcInJlbW92ZUZvcm1EYXRhXCI6IHtcbiAgICAgICAgICAgIFwibWluQXJnc1wiOiAxLFxuICAgICAgICAgICAgXCJtYXhBcmdzXCI6IDFcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwicmVtb3ZlSGlzdG9yeVwiOiB7XG4gICAgICAgICAgICBcIm1pbkFyZ3NcIjogMSxcbiAgICAgICAgICAgIFwibWF4QXJnc1wiOiAxXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcInJlbW92ZUxvY2FsU3RvcmFnZVwiOiB7XG4gICAgICAgICAgICBcIm1pbkFyZ3NcIjogMSxcbiAgICAgICAgICAgIFwibWF4QXJnc1wiOiAxXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcInJlbW92ZVBhc3N3b3Jkc1wiOiB7XG4gICAgICAgICAgICBcIm1pbkFyZ3NcIjogMSxcbiAgICAgICAgICAgIFwibWF4QXJnc1wiOiAxXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcInJlbW92ZVBsdWdpbkRhdGFcIjoge1xuICAgICAgICAgICAgXCJtaW5BcmdzXCI6IDEsXG4gICAgICAgICAgICBcIm1heEFyZ3NcIjogMVxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJzZXR0aW5nc1wiOiB7XG4gICAgICAgICAgICBcIm1pbkFyZ3NcIjogMCxcbiAgICAgICAgICAgIFwibWF4QXJnc1wiOiAwXG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBcImNvbW1hbmRzXCI6IHtcbiAgICAgICAgICBcImdldEFsbFwiOiB7XG4gICAgICAgICAgICBcIm1pbkFyZ3NcIjogMCxcbiAgICAgICAgICAgIFwibWF4QXJnc1wiOiAwXG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBcImNvbnRleHRNZW51c1wiOiB7XG4gICAgICAgICAgXCJyZW1vdmVcIjoge1xuICAgICAgICAgICAgXCJtaW5BcmdzXCI6IDEsXG4gICAgICAgICAgICBcIm1heEFyZ3NcIjogMVxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJyZW1vdmVBbGxcIjoge1xuICAgICAgICAgICAgXCJtaW5BcmdzXCI6IDAsXG4gICAgICAgICAgICBcIm1heEFyZ3NcIjogMFxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJ1cGRhdGVcIjoge1xuICAgICAgICAgICAgXCJtaW5BcmdzXCI6IDIsXG4gICAgICAgICAgICBcIm1heEFyZ3NcIjogMlxuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgXCJjb29raWVzXCI6IHtcbiAgICAgICAgICBcImdldFwiOiB7XG4gICAgICAgICAgICBcIm1pbkFyZ3NcIjogMSxcbiAgICAgICAgICAgIFwibWF4QXJnc1wiOiAxXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcImdldEFsbFwiOiB7XG4gICAgICAgICAgICBcIm1pbkFyZ3NcIjogMSxcbiAgICAgICAgICAgIFwibWF4QXJnc1wiOiAxXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcImdldEFsbENvb2tpZVN0b3Jlc1wiOiB7XG4gICAgICAgICAgICBcIm1pbkFyZ3NcIjogMCxcbiAgICAgICAgICAgIFwibWF4QXJnc1wiOiAwXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcInJlbW92ZVwiOiB7XG4gICAgICAgICAgICBcIm1pbkFyZ3NcIjogMSxcbiAgICAgICAgICAgIFwibWF4QXJnc1wiOiAxXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcInNldFwiOiB7XG4gICAgICAgICAgICBcIm1pbkFyZ3NcIjogMSxcbiAgICAgICAgICAgIFwibWF4QXJnc1wiOiAxXG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBcImRldnRvb2xzXCI6IHtcbiAgICAgICAgICBcImluc3BlY3RlZFdpbmRvd1wiOiB7XG4gICAgICAgICAgICBcImV2YWxcIjoge1xuICAgICAgICAgICAgICBcIm1pbkFyZ3NcIjogMSxcbiAgICAgICAgICAgICAgXCJtYXhBcmdzXCI6IDIsXG4gICAgICAgICAgICAgIFwic2luZ2xlQ2FsbGJhY2tBcmdcIjogZmFsc2VcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9LFxuICAgICAgICAgIFwicGFuZWxzXCI6IHtcbiAgICAgICAgICAgIFwiY3JlYXRlXCI6IHtcbiAgICAgICAgICAgICAgXCJtaW5BcmdzXCI6IDMsXG4gICAgICAgICAgICAgIFwibWF4QXJnc1wiOiAzLFxuICAgICAgICAgICAgICBcInNpbmdsZUNhbGxiYWNrQXJnXCI6IHRydWVcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBcImVsZW1lbnRzXCI6IHtcbiAgICAgICAgICAgICAgXCJjcmVhdGVTaWRlYmFyUGFuZVwiOiB7XG4gICAgICAgICAgICAgICAgXCJtaW5BcmdzXCI6IDEsXG4gICAgICAgICAgICAgICAgXCJtYXhBcmdzXCI6IDFcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgXCJkb3dubG9hZHNcIjoge1xuICAgICAgICAgIFwiY2FuY2VsXCI6IHtcbiAgICAgICAgICAgIFwibWluQXJnc1wiOiAxLFxuICAgICAgICAgICAgXCJtYXhBcmdzXCI6IDFcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwiZG93bmxvYWRcIjoge1xuICAgICAgICAgICAgXCJtaW5BcmdzXCI6IDEsXG4gICAgICAgICAgICBcIm1heEFyZ3NcIjogMVxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJlcmFzZVwiOiB7XG4gICAgICAgICAgICBcIm1pbkFyZ3NcIjogMSxcbiAgICAgICAgICAgIFwibWF4QXJnc1wiOiAxXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcImdldEZpbGVJY29uXCI6IHtcbiAgICAgICAgICAgIFwibWluQXJnc1wiOiAxLFxuICAgICAgICAgICAgXCJtYXhBcmdzXCI6IDJcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwib3BlblwiOiB7XG4gICAgICAgICAgICBcIm1pbkFyZ3NcIjogMSxcbiAgICAgICAgICAgIFwibWF4QXJnc1wiOiAxLFxuICAgICAgICAgICAgXCJmYWxsYmFja1RvTm9DYWxsYmFja1wiOiB0cnVlXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcInBhdXNlXCI6IHtcbiAgICAgICAgICAgIFwibWluQXJnc1wiOiAxLFxuICAgICAgICAgICAgXCJtYXhBcmdzXCI6IDFcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwicmVtb3ZlRmlsZVwiOiB7XG4gICAgICAgICAgICBcIm1pbkFyZ3NcIjogMSxcbiAgICAgICAgICAgIFwibWF4QXJnc1wiOiAxXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcInJlc3VtZVwiOiB7XG4gICAgICAgICAgICBcIm1pbkFyZ3NcIjogMSxcbiAgICAgICAgICAgIFwibWF4QXJnc1wiOiAxXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcInNlYXJjaFwiOiB7XG4gICAgICAgICAgICBcIm1pbkFyZ3NcIjogMSxcbiAgICAgICAgICAgIFwibWF4QXJnc1wiOiAxXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcInNob3dcIjoge1xuICAgICAgICAgICAgXCJtaW5BcmdzXCI6IDEsXG4gICAgICAgICAgICBcIm1heEFyZ3NcIjogMSxcbiAgICAgICAgICAgIFwiZmFsbGJhY2tUb05vQ2FsbGJhY2tcIjogdHJ1ZVxuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgXCJleHRlbnNpb25cIjoge1xuICAgICAgICAgIFwiaXNBbGxvd2VkRmlsZVNjaGVtZUFjY2Vzc1wiOiB7XG4gICAgICAgICAgICBcIm1pbkFyZ3NcIjogMCxcbiAgICAgICAgICAgIFwibWF4QXJnc1wiOiAwXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcImlzQWxsb3dlZEluY29nbml0b0FjY2Vzc1wiOiB7XG4gICAgICAgICAgICBcIm1pbkFyZ3NcIjogMCxcbiAgICAgICAgICAgIFwibWF4QXJnc1wiOiAwXG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBcImhpc3RvcnlcIjoge1xuICAgICAgICAgIFwiYWRkVXJsXCI6IHtcbiAgICAgICAgICAgIFwibWluQXJnc1wiOiAxLFxuICAgICAgICAgICAgXCJtYXhBcmdzXCI6IDFcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwiZGVsZXRlQWxsXCI6IHtcbiAgICAgICAgICAgIFwibWluQXJnc1wiOiAwLFxuICAgICAgICAgICAgXCJtYXhBcmdzXCI6IDBcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwiZGVsZXRlUmFuZ2VcIjoge1xuICAgICAgICAgICAgXCJtaW5BcmdzXCI6IDEsXG4gICAgICAgICAgICBcIm1heEFyZ3NcIjogMVxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJkZWxldGVVcmxcIjoge1xuICAgICAgICAgICAgXCJtaW5BcmdzXCI6IDEsXG4gICAgICAgICAgICBcIm1heEFyZ3NcIjogMVxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJnZXRWaXNpdHNcIjoge1xuICAgICAgICAgICAgXCJtaW5BcmdzXCI6IDEsXG4gICAgICAgICAgICBcIm1heEFyZ3NcIjogMVxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJzZWFyY2hcIjoge1xuICAgICAgICAgICAgXCJtaW5BcmdzXCI6IDEsXG4gICAgICAgICAgICBcIm1heEFyZ3NcIjogMVxuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgXCJpMThuXCI6IHtcbiAgICAgICAgICBcImRldGVjdExhbmd1YWdlXCI6IHtcbiAgICAgICAgICAgIFwibWluQXJnc1wiOiAxLFxuICAgICAgICAgICAgXCJtYXhBcmdzXCI6IDFcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwiZ2V0QWNjZXB0TGFuZ3VhZ2VzXCI6IHtcbiAgICAgICAgICAgIFwibWluQXJnc1wiOiAwLFxuICAgICAgICAgICAgXCJtYXhBcmdzXCI6IDBcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIFwiaWRlbnRpdHlcIjoge1xuICAgICAgICAgIFwibGF1bmNoV2ViQXV0aEZsb3dcIjoge1xuICAgICAgICAgICAgXCJtaW5BcmdzXCI6IDEsXG4gICAgICAgICAgICBcIm1heEFyZ3NcIjogMVxuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgXCJpZGxlXCI6IHtcbiAgICAgICAgICBcInF1ZXJ5U3RhdGVcIjoge1xuICAgICAgICAgICAgXCJtaW5BcmdzXCI6IDEsXG4gICAgICAgICAgICBcIm1heEFyZ3NcIjogMVxuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgXCJtYW5hZ2VtZW50XCI6IHtcbiAgICAgICAgICBcImdldFwiOiB7XG4gICAgICAgICAgICBcIm1pbkFyZ3NcIjogMSxcbiAgICAgICAgICAgIFwibWF4QXJnc1wiOiAxXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcImdldEFsbFwiOiB7XG4gICAgICAgICAgICBcIm1pbkFyZ3NcIjogMCxcbiAgICAgICAgICAgIFwibWF4QXJnc1wiOiAwXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcImdldFNlbGZcIjoge1xuICAgICAgICAgICAgXCJtaW5BcmdzXCI6IDAsXG4gICAgICAgICAgICBcIm1heEFyZ3NcIjogMFxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJzZXRFbmFibGVkXCI6IHtcbiAgICAgICAgICAgIFwibWluQXJnc1wiOiAyLFxuICAgICAgICAgICAgXCJtYXhBcmdzXCI6IDJcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwidW5pbnN0YWxsU2VsZlwiOiB7XG4gICAgICAgICAgICBcIm1pbkFyZ3NcIjogMCxcbiAgICAgICAgICAgIFwibWF4QXJnc1wiOiAxXG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBcIm5vdGlmaWNhdGlvbnNcIjoge1xuICAgICAgICAgIFwiY2xlYXJcIjoge1xuICAgICAgICAgICAgXCJtaW5BcmdzXCI6IDEsXG4gICAgICAgICAgICBcIm1heEFyZ3NcIjogMVxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJjcmVhdGVcIjoge1xuICAgICAgICAgICAgXCJtaW5BcmdzXCI6IDEsXG4gICAgICAgICAgICBcIm1heEFyZ3NcIjogMlxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJnZXRBbGxcIjoge1xuICAgICAgICAgICAgXCJtaW5BcmdzXCI6IDAsXG4gICAgICAgICAgICBcIm1heEFyZ3NcIjogMFxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJnZXRQZXJtaXNzaW9uTGV2ZWxcIjoge1xuICAgICAgICAgICAgXCJtaW5BcmdzXCI6IDAsXG4gICAgICAgICAgICBcIm1heEFyZ3NcIjogMFxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJ1cGRhdGVcIjoge1xuICAgICAgICAgICAgXCJtaW5BcmdzXCI6IDIsXG4gICAgICAgICAgICBcIm1heEFyZ3NcIjogMlxuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgXCJwYWdlQWN0aW9uXCI6IHtcbiAgICAgICAgICBcImdldFBvcHVwXCI6IHtcbiAgICAgICAgICAgIFwibWluQXJnc1wiOiAxLFxuICAgICAgICAgICAgXCJtYXhBcmdzXCI6IDFcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwiZ2V0VGl0bGVcIjoge1xuICAgICAgICAgICAgXCJtaW5BcmdzXCI6IDEsXG4gICAgICAgICAgICBcIm1heEFyZ3NcIjogMVxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJoaWRlXCI6IHtcbiAgICAgICAgICAgIFwibWluQXJnc1wiOiAxLFxuICAgICAgICAgICAgXCJtYXhBcmdzXCI6IDEsXG4gICAgICAgICAgICBcImZhbGxiYWNrVG9Ob0NhbGxiYWNrXCI6IHRydWVcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwic2V0SWNvblwiOiB7XG4gICAgICAgICAgICBcIm1pbkFyZ3NcIjogMSxcbiAgICAgICAgICAgIFwibWF4QXJnc1wiOiAxXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcInNldFBvcHVwXCI6IHtcbiAgICAgICAgICAgIFwibWluQXJnc1wiOiAxLFxuICAgICAgICAgICAgXCJtYXhBcmdzXCI6IDEsXG4gICAgICAgICAgICBcImZhbGxiYWNrVG9Ob0NhbGxiYWNrXCI6IHRydWVcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwic2V0VGl0bGVcIjoge1xuICAgICAgICAgICAgXCJtaW5BcmdzXCI6IDEsXG4gICAgICAgICAgICBcIm1heEFyZ3NcIjogMSxcbiAgICAgICAgICAgIFwiZmFsbGJhY2tUb05vQ2FsbGJhY2tcIjogdHJ1ZVxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJzaG93XCI6IHtcbiAgICAgICAgICAgIFwibWluQXJnc1wiOiAxLFxuICAgICAgICAgICAgXCJtYXhBcmdzXCI6IDEsXG4gICAgICAgICAgICBcImZhbGxiYWNrVG9Ob0NhbGxiYWNrXCI6IHRydWVcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIFwicGVybWlzc2lvbnNcIjoge1xuICAgICAgICAgIFwiY29udGFpbnNcIjoge1xuICAgICAgICAgICAgXCJtaW5BcmdzXCI6IDEsXG4gICAgICAgICAgICBcIm1heEFyZ3NcIjogMVxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJnZXRBbGxcIjoge1xuICAgICAgICAgICAgXCJtaW5BcmdzXCI6IDAsXG4gICAgICAgICAgICBcIm1heEFyZ3NcIjogMFxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJyZW1vdmVcIjoge1xuICAgICAgICAgICAgXCJtaW5BcmdzXCI6IDEsXG4gICAgICAgICAgICBcIm1heEFyZ3NcIjogMVxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJyZXF1ZXN0XCI6IHtcbiAgICAgICAgICAgIFwibWluQXJnc1wiOiAxLFxuICAgICAgICAgICAgXCJtYXhBcmdzXCI6IDFcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIFwicnVudGltZVwiOiB7XG4gICAgICAgICAgXCJnZXRCYWNrZ3JvdW5kUGFnZVwiOiB7XG4gICAgICAgICAgICBcIm1pbkFyZ3NcIjogMCxcbiAgICAgICAgICAgIFwibWF4QXJnc1wiOiAwXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcImdldFBsYXRmb3JtSW5mb1wiOiB7XG4gICAgICAgICAgICBcIm1pbkFyZ3NcIjogMCxcbiAgICAgICAgICAgIFwibWF4QXJnc1wiOiAwXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcIm9wZW5PcHRpb25zUGFnZVwiOiB7XG4gICAgICAgICAgICBcIm1pbkFyZ3NcIjogMCxcbiAgICAgICAgICAgIFwibWF4QXJnc1wiOiAwXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcInJlcXVlc3RVcGRhdGVDaGVja1wiOiB7XG4gICAgICAgICAgICBcIm1pbkFyZ3NcIjogMCxcbiAgICAgICAgICAgIFwibWF4QXJnc1wiOiAwXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcInNlbmRNZXNzYWdlXCI6IHtcbiAgICAgICAgICAgIFwibWluQXJnc1wiOiAxLFxuICAgICAgICAgICAgXCJtYXhBcmdzXCI6IDNcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwic2VuZE5hdGl2ZU1lc3NhZ2VcIjoge1xuICAgICAgICAgICAgXCJtaW5BcmdzXCI6IDIsXG4gICAgICAgICAgICBcIm1heEFyZ3NcIjogMlxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJzZXRVbmluc3RhbGxVUkxcIjoge1xuICAgICAgICAgICAgXCJtaW5BcmdzXCI6IDEsXG4gICAgICAgICAgICBcIm1heEFyZ3NcIjogMVxuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgXCJzZXNzaW9uc1wiOiB7XG4gICAgICAgICAgXCJnZXREZXZpY2VzXCI6IHtcbiAgICAgICAgICAgIFwibWluQXJnc1wiOiAwLFxuICAgICAgICAgICAgXCJtYXhBcmdzXCI6IDFcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwiZ2V0UmVjZW50bHlDbG9zZWRcIjoge1xuICAgICAgICAgICAgXCJtaW5BcmdzXCI6IDAsXG4gICAgICAgICAgICBcIm1heEFyZ3NcIjogMVxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJyZXN0b3JlXCI6IHtcbiAgICAgICAgICAgIFwibWluQXJnc1wiOiAwLFxuICAgICAgICAgICAgXCJtYXhBcmdzXCI6IDFcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIFwic3RvcmFnZVwiOiB7XG4gICAgICAgICAgXCJsb2NhbFwiOiB7XG4gICAgICAgICAgICBcImNsZWFyXCI6IHtcbiAgICAgICAgICAgICAgXCJtaW5BcmdzXCI6IDAsXG4gICAgICAgICAgICAgIFwibWF4QXJnc1wiOiAwXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgXCJnZXRcIjoge1xuICAgICAgICAgICAgICBcIm1pbkFyZ3NcIjogMCxcbiAgICAgICAgICAgICAgXCJtYXhBcmdzXCI6IDFcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBcImdldEJ5dGVzSW5Vc2VcIjoge1xuICAgICAgICAgICAgICBcIm1pbkFyZ3NcIjogMCxcbiAgICAgICAgICAgICAgXCJtYXhBcmdzXCI6IDFcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBcInJlbW92ZVwiOiB7XG4gICAgICAgICAgICAgIFwibWluQXJnc1wiOiAxLFxuICAgICAgICAgICAgICBcIm1heEFyZ3NcIjogMVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIFwic2V0XCI6IHtcbiAgICAgICAgICAgICAgXCJtaW5BcmdzXCI6IDEsXG4gICAgICAgICAgICAgIFwibWF4QXJnc1wiOiAxXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSxcbiAgICAgICAgICBcIm1hbmFnZWRcIjoge1xuICAgICAgICAgICAgXCJnZXRcIjoge1xuICAgICAgICAgICAgICBcIm1pbkFyZ3NcIjogMCxcbiAgICAgICAgICAgICAgXCJtYXhBcmdzXCI6IDFcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBcImdldEJ5dGVzSW5Vc2VcIjoge1xuICAgICAgICAgICAgICBcIm1pbkFyZ3NcIjogMCxcbiAgICAgICAgICAgICAgXCJtYXhBcmdzXCI6IDFcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9LFxuICAgICAgICAgIFwic3luY1wiOiB7XG4gICAgICAgICAgICBcImNsZWFyXCI6IHtcbiAgICAgICAgICAgICAgXCJtaW5BcmdzXCI6IDAsXG4gICAgICAgICAgICAgIFwibWF4QXJnc1wiOiAwXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgXCJnZXRcIjoge1xuICAgICAgICAgICAgICBcIm1pbkFyZ3NcIjogMCxcbiAgICAgICAgICAgICAgXCJtYXhBcmdzXCI6IDFcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBcImdldEJ5dGVzSW5Vc2VcIjoge1xuICAgICAgICAgICAgICBcIm1pbkFyZ3NcIjogMCxcbiAgICAgICAgICAgICAgXCJtYXhBcmdzXCI6IDFcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBcInJlbW92ZVwiOiB7XG4gICAgICAgICAgICAgIFwibWluQXJnc1wiOiAxLFxuICAgICAgICAgICAgICBcIm1heEFyZ3NcIjogMVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIFwic2V0XCI6IHtcbiAgICAgICAgICAgICAgXCJtaW5BcmdzXCI6IDEsXG4gICAgICAgICAgICAgIFwibWF4QXJnc1wiOiAxXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBcInRhYnNcIjoge1xuICAgICAgICAgIFwiY2FwdHVyZVZpc2libGVUYWJcIjoge1xuICAgICAgICAgICAgXCJtaW5BcmdzXCI6IDAsXG4gICAgICAgICAgICBcIm1heEFyZ3NcIjogMlxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJjcmVhdGVcIjoge1xuICAgICAgICAgICAgXCJtaW5BcmdzXCI6IDEsXG4gICAgICAgICAgICBcIm1heEFyZ3NcIjogMVxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJkZXRlY3RMYW5ndWFnZVwiOiB7XG4gICAgICAgICAgICBcIm1pbkFyZ3NcIjogMCxcbiAgICAgICAgICAgIFwibWF4QXJnc1wiOiAxXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcImRpc2NhcmRcIjoge1xuICAgICAgICAgICAgXCJtaW5BcmdzXCI6IDAsXG4gICAgICAgICAgICBcIm1heEFyZ3NcIjogMVxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJkdXBsaWNhdGVcIjoge1xuICAgICAgICAgICAgXCJtaW5BcmdzXCI6IDEsXG4gICAgICAgICAgICBcIm1heEFyZ3NcIjogMVxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJleGVjdXRlU2NyaXB0XCI6IHtcbiAgICAgICAgICAgIFwibWluQXJnc1wiOiAxLFxuICAgICAgICAgICAgXCJtYXhBcmdzXCI6IDJcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwiZ2V0XCI6IHtcbiAgICAgICAgICAgIFwibWluQXJnc1wiOiAxLFxuICAgICAgICAgICAgXCJtYXhBcmdzXCI6IDFcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwiZ2V0Q3VycmVudFwiOiB7XG4gICAgICAgICAgICBcIm1pbkFyZ3NcIjogMCxcbiAgICAgICAgICAgIFwibWF4QXJnc1wiOiAwXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcImdldFpvb21cIjoge1xuICAgICAgICAgICAgXCJtaW5BcmdzXCI6IDAsXG4gICAgICAgICAgICBcIm1heEFyZ3NcIjogMVxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJnZXRab29tU2V0dGluZ3NcIjoge1xuICAgICAgICAgICAgXCJtaW5BcmdzXCI6IDAsXG4gICAgICAgICAgICBcIm1heEFyZ3NcIjogMVxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJnb0JhY2tcIjoge1xuICAgICAgICAgICAgXCJtaW5BcmdzXCI6IDAsXG4gICAgICAgICAgICBcIm1heEFyZ3NcIjogMVxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJnb0ZvcndhcmRcIjoge1xuICAgICAgICAgICAgXCJtaW5BcmdzXCI6IDAsXG4gICAgICAgICAgICBcIm1heEFyZ3NcIjogMVxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJoaWdobGlnaHRcIjoge1xuICAgICAgICAgICAgXCJtaW5BcmdzXCI6IDEsXG4gICAgICAgICAgICBcIm1heEFyZ3NcIjogMVxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJpbnNlcnRDU1NcIjoge1xuICAgICAgICAgICAgXCJtaW5BcmdzXCI6IDEsXG4gICAgICAgICAgICBcIm1heEFyZ3NcIjogMlxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJtb3ZlXCI6IHtcbiAgICAgICAgICAgIFwibWluQXJnc1wiOiAyLFxuICAgICAgICAgICAgXCJtYXhBcmdzXCI6IDJcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwicXVlcnlcIjoge1xuICAgICAgICAgICAgXCJtaW5BcmdzXCI6IDEsXG4gICAgICAgICAgICBcIm1heEFyZ3NcIjogMVxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJyZWxvYWRcIjoge1xuICAgICAgICAgICAgXCJtaW5BcmdzXCI6IDAsXG4gICAgICAgICAgICBcIm1heEFyZ3NcIjogMlxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJyZW1vdmVcIjoge1xuICAgICAgICAgICAgXCJtaW5BcmdzXCI6IDEsXG4gICAgICAgICAgICBcIm1heEFyZ3NcIjogMVxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJyZW1vdmVDU1NcIjoge1xuICAgICAgICAgICAgXCJtaW5BcmdzXCI6IDEsXG4gICAgICAgICAgICBcIm1heEFyZ3NcIjogMlxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJzZW5kTWVzc2FnZVwiOiB7XG4gICAgICAgICAgICBcIm1pbkFyZ3NcIjogMixcbiAgICAgICAgICAgIFwibWF4QXJnc1wiOiAzXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcInNldFpvb21cIjoge1xuICAgICAgICAgICAgXCJtaW5BcmdzXCI6IDEsXG4gICAgICAgICAgICBcIm1heEFyZ3NcIjogMlxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJzZXRab29tU2V0dGluZ3NcIjoge1xuICAgICAgICAgICAgXCJtaW5BcmdzXCI6IDEsXG4gICAgICAgICAgICBcIm1heEFyZ3NcIjogMlxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJ1cGRhdGVcIjoge1xuICAgICAgICAgICAgXCJtaW5BcmdzXCI6IDEsXG4gICAgICAgICAgICBcIm1heEFyZ3NcIjogMlxuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgXCJ0b3BTaXRlc1wiOiB7XG4gICAgICAgICAgXCJnZXRcIjoge1xuICAgICAgICAgICAgXCJtaW5BcmdzXCI6IDAsXG4gICAgICAgICAgICBcIm1heEFyZ3NcIjogMFxuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgXCJ3ZWJOYXZpZ2F0aW9uXCI6IHtcbiAgICAgICAgICBcImdldEFsbEZyYW1lc1wiOiB7XG4gICAgICAgICAgICBcIm1pbkFyZ3NcIjogMSxcbiAgICAgICAgICAgIFwibWF4QXJnc1wiOiAxXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcImdldEZyYW1lXCI6IHtcbiAgICAgICAgICAgIFwibWluQXJnc1wiOiAxLFxuICAgICAgICAgICAgXCJtYXhBcmdzXCI6IDFcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIFwid2ViUmVxdWVzdFwiOiB7XG4gICAgICAgICAgXCJoYW5kbGVyQmVoYXZpb3JDaGFuZ2VkXCI6IHtcbiAgICAgICAgICAgIFwibWluQXJnc1wiOiAwLFxuICAgICAgICAgICAgXCJtYXhBcmdzXCI6IDBcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIFwid2luZG93c1wiOiB7XG4gICAgICAgICAgXCJjcmVhdGVcIjoge1xuICAgICAgICAgICAgXCJtaW5BcmdzXCI6IDAsXG4gICAgICAgICAgICBcIm1heEFyZ3NcIjogMVxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJnZXRcIjoge1xuICAgICAgICAgICAgXCJtaW5BcmdzXCI6IDEsXG4gICAgICAgICAgICBcIm1heEFyZ3NcIjogMlxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJnZXRBbGxcIjoge1xuICAgICAgICAgICAgXCJtaW5BcmdzXCI6IDAsXG4gICAgICAgICAgICBcIm1heEFyZ3NcIjogMVxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJnZXRDdXJyZW50XCI6IHtcbiAgICAgICAgICAgIFwibWluQXJnc1wiOiAwLFxuICAgICAgICAgICAgXCJtYXhBcmdzXCI6IDFcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwiZ2V0TGFzdEZvY3VzZWRcIjoge1xuICAgICAgICAgICAgXCJtaW5BcmdzXCI6IDAsXG4gICAgICAgICAgICBcIm1heEFyZ3NcIjogMVxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJyZW1vdmVcIjoge1xuICAgICAgICAgICAgXCJtaW5BcmdzXCI6IDEsXG4gICAgICAgICAgICBcIm1heEFyZ3NcIjogMVxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJ1cGRhdGVcIjoge1xuICAgICAgICAgICAgXCJtaW5BcmdzXCI6IDIsXG4gICAgICAgICAgICBcIm1heEFyZ3NcIjogMlxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfTtcblxuICAgICAgaWYgKE9iamVjdC5rZXlzKGFwaU1ldGFkYXRhKS5sZW5ndGggPT09IDApIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiYXBpLW1ldGFkYXRhLmpzb24gaGFzIG5vdCBiZWVuIGluY2x1ZGVkIGluIGJyb3dzZXItcG9seWZpbGxcIik7XG4gICAgICB9XG4gICAgICAvKipcbiAgICAgICAqIEEgV2Vha01hcCBzdWJjbGFzcyB3aGljaCBjcmVhdGVzIGFuZCBzdG9yZXMgYSB2YWx1ZSBmb3IgYW55IGtleSB3aGljaCBkb2VzXG4gICAgICAgKiBub3QgZXhpc3Qgd2hlbiBhY2Nlc3NlZCwgYnV0IGJlaGF2ZXMgZXhhY3RseSBhcyBhbiBvcmRpbmFyeSBXZWFrTWFwXG4gICAgICAgKiBvdGhlcndpc2UuXG4gICAgICAgKlxuICAgICAgICogQHBhcmFtIHtmdW5jdGlvbn0gY3JlYXRlSXRlbVxuICAgICAgICogICAgICAgIEEgZnVuY3Rpb24gd2hpY2ggd2lsbCBiZSBjYWxsZWQgaW4gb3JkZXIgdG8gY3JlYXRlIHRoZSB2YWx1ZSBmb3IgYW55XG4gICAgICAgKiAgICAgICAga2V5IHdoaWNoIGRvZXMgbm90IGV4aXN0LCB0aGUgZmlyc3QgdGltZSBpdCBpcyBhY2Nlc3NlZC4gVGhlXG4gICAgICAgKiAgICAgICAgZnVuY3Rpb24gcmVjZWl2ZXMsIGFzIGl0cyBvbmx5IGFyZ3VtZW50LCB0aGUga2V5IGJlaW5nIGNyZWF0ZWQuXG4gICAgICAgKi9cblxuXG4gICAgICBjbGFzcyBEZWZhdWx0V2Vha01hcCBleHRlbmRzIFdlYWtNYXAge1xuICAgICAgICBjb25zdHJ1Y3RvcihjcmVhdGVJdGVtLCBpdGVtcyA9IHVuZGVmaW5lZCkge1xuICAgICAgICAgIHN1cGVyKGl0ZW1zKTtcbiAgICAgICAgICB0aGlzLmNyZWF0ZUl0ZW0gPSBjcmVhdGVJdGVtO1xuICAgICAgICB9XG5cbiAgICAgICAgZ2V0KGtleSkge1xuICAgICAgICAgIGlmICghdGhpcy5oYXMoa2V5KSkge1xuICAgICAgICAgICAgdGhpcy5zZXQoa2V5LCB0aGlzLmNyZWF0ZUl0ZW0oa2V5KSk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgcmV0dXJuIHN1cGVyLmdldChrZXkpO1xuICAgICAgICB9XG5cbiAgICAgIH1cbiAgICAgIC8qKlxuICAgICAgICogUmV0dXJucyB0cnVlIGlmIHRoZSBnaXZlbiBvYmplY3QgaXMgYW4gb2JqZWN0IHdpdGggYSBgdGhlbmAgbWV0aG9kLCBhbmQgY2FuXG4gICAgICAgKiB0aGVyZWZvcmUgYmUgYXNzdW1lZCB0byBiZWhhdmUgYXMgYSBQcm9taXNlLlxuICAgICAgICpcbiAgICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHRlc3QuXG4gICAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB0aGUgdmFsdWUgaXMgdGhlbmFibGUuXG4gICAgICAgKi9cblxuXG4gICAgICBjb25zdCBpc1RoZW5hYmxlID0gdmFsdWUgPT4ge1xuICAgICAgICByZXR1cm4gdmFsdWUgJiYgdHlwZW9mIHZhbHVlID09PSBcIm9iamVjdFwiICYmIHR5cGVvZiB2YWx1ZS50aGVuID09PSBcImZ1bmN0aW9uXCI7XG4gICAgICB9O1xuICAgICAgLyoqXG4gICAgICAgKiBDcmVhdGVzIGFuZCByZXR1cm5zIGEgZnVuY3Rpb24gd2hpY2gsIHdoZW4gY2FsbGVkLCB3aWxsIHJlc29sdmUgb3IgcmVqZWN0XG4gICAgICAgKiB0aGUgZ2l2ZW4gcHJvbWlzZSBiYXNlZCBvbiBob3cgaXQgaXMgY2FsbGVkOlxuICAgICAgICpcbiAgICAgICAqIC0gSWYsIHdoZW4gY2FsbGVkLCBgY2hyb21lLnJ1bnRpbWUubGFzdEVycm9yYCBjb250YWlucyBhIG5vbi1udWxsIG9iamVjdCxcbiAgICAgICAqICAgdGhlIHByb21pc2UgaXMgcmVqZWN0ZWQgd2l0aCB0aGF0IHZhbHVlLlxuICAgICAgICogLSBJZiB0aGUgZnVuY3Rpb24gaXMgY2FsbGVkIHdpdGggZXhhY3RseSBvbmUgYXJndW1lbnQsIHRoZSBwcm9taXNlIGlzXG4gICAgICAgKiAgIHJlc29sdmVkIHRvIHRoYXQgdmFsdWUuXG4gICAgICAgKiAtIE90aGVyd2lzZSwgdGhlIHByb21pc2UgaXMgcmVzb2x2ZWQgdG8gYW4gYXJyYXkgY29udGFpbmluZyBhbGwgb2YgdGhlXG4gICAgICAgKiAgIGZ1bmN0aW9uJ3MgYXJndW1lbnRzLlxuICAgICAgICpcbiAgICAgICAqIEBwYXJhbSB7b2JqZWN0fSBwcm9taXNlXG4gICAgICAgKiAgICAgICAgQW4gb2JqZWN0IGNvbnRhaW5pbmcgdGhlIHJlc29sdXRpb24gYW5kIHJlamVjdGlvbiBmdW5jdGlvbnMgb2YgYVxuICAgICAgICogICAgICAgIHByb21pc2UuXG4gICAgICAgKiBAcGFyYW0ge2Z1bmN0aW9ufSBwcm9taXNlLnJlc29sdmVcbiAgICAgICAqICAgICAgICBUaGUgcHJvbWlzZSdzIHJlc29sdXRpb24gZnVuY3Rpb24uXG4gICAgICAgKiBAcGFyYW0ge2Z1bmN0aW9ufSBwcm9taXNlLnJlamVjdFxuICAgICAgICogICAgICAgIFRoZSBwcm9taXNlJ3MgcmVqZWN0aW9uIGZ1bmN0aW9uLlxuICAgICAgICogQHBhcmFtIHtvYmplY3R9IG1ldGFkYXRhXG4gICAgICAgKiAgICAgICAgTWV0YWRhdGEgYWJvdXQgdGhlIHdyYXBwZWQgbWV0aG9kIHdoaWNoIGhhcyBjcmVhdGVkIHRoZSBjYWxsYmFjay5cbiAgICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gbWV0YWRhdGEuc2luZ2xlQ2FsbGJhY2tBcmdcbiAgICAgICAqICAgICAgICBXaGV0aGVyIG9yIG5vdCB0aGUgcHJvbWlzZSBpcyByZXNvbHZlZCB3aXRoIG9ubHkgdGhlIGZpcnN0XG4gICAgICAgKiAgICAgICAgYXJndW1lbnQgb2YgdGhlIGNhbGxiYWNrLCBhbHRlcm5hdGl2ZWx5IGFuIGFycmF5IG9mIGFsbCB0aGVcbiAgICAgICAqICAgICAgICBjYWxsYmFjayBhcmd1bWVudHMgaXMgcmVzb2x2ZWQuIEJ5IGRlZmF1bHQsIGlmIHRoZSBjYWxsYmFja1xuICAgICAgICogICAgICAgIGZ1bmN0aW9uIGlzIGludm9rZWQgd2l0aCBvbmx5IGEgc2luZ2xlIGFyZ3VtZW50LCB0aGF0IHdpbGwgYmVcbiAgICAgICAqICAgICAgICByZXNvbHZlZCB0byB0aGUgcHJvbWlzZSwgd2hpbGUgYWxsIGFyZ3VtZW50cyB3aWxsIGJlIHJlc29sdmVkIGFzXG4gICAgICAgKiAgICAgICAgYW4gYXJyYXkgaWYgbXVsdGlwbGUgYXJlIGdpdmVuLlxuICAgICAgICpcbiAgICAgICAqIEByZXR1cm5zIHtmdW5jdGlvbn1cbiAgICAgICAqICAgICAgICBUaGUgZ2VuZXJhdGVkIGNhbGxiYWNrIGZ1bmN0aW9uLlxuICAgICAgICovXG5cblxuICAgICAgY29uc3QgbWFrZUNhbGxiYWNrID0gKHByb21pc2UsIG1ldGFkYXRhKSA9PiB7XG4gICAgICAgIHJldHVybiAoLi4uY2FsbGJhY2tBcmdzKSA9PiB7XG4gICAgICAgICAgaWYgKGV4dGVuc2lvbkFQSXMucnVudGltZS5sYXN0RXJyb3IpIHtcbiAgICAgICAgICAgIHByb21pc2UucmVqZWN0KG5ldyBFcnJvcihleHRlbnNpb25BUElzLnJ1bnRpbWUubGFzdEVycm9yLm1lc3NhZ2UpKTtcbiAgICAgICAgICB9IGVsc2UgaWYgKG1ldGFkYXRhLnNpbmdsZUNhbGxiYWNrQXJnIHx8IGNhbGxiYWNrQXJncy5sZW5ndGggPD0gMSAmJiBtZXRhZGF0YS5zaW5nbGVDYWxsYmFja0FyZyAhPT0gZmFsc2UpIHtcbiAgICAgICAgICAgIHByb21pc2UucmVzb2x2ZShjYWxsYmFja0FyZ3NbMF0pO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBwcm9taXNlLnJlc29sdmUoY2FsbGJhY2tBcmdzKTtcbiAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICB9O1xuXG4gICAgICBjb25zdCBwbHVyYWxpemVBcmd1bWVudHMgPSBudW1BcmdzID0+IG51bUFyZ3MgPT0gMSA/IFwiYXJndW1lbnRcIiA6IFwiYXJndW1lbnRzXCI7XG4gICAgICAvKipcbiAgICAgICAqIENyZWF0ZXMgYSB3cmFwcGVyIGZ1bmN0aW9uIGZvciBhIG1ldGhvZCB3aXRoIHRoZSBnaXZlbiBuYW1lIGFuZCBtZXRhZGF0YS5cbiAgICAgICAqXG4gICAgICAgKiBAcGFyYW0ge3N0cmluZ30gbmFtZVxuICAgICAgICogICAgICAgIFRoZSBuYW1lIG9mIHRoZSBtZXRob2Qgd2hpY2ggaXMgYmVpbmcgd3JhcHBlZC5cbiAgICAgICAqIEBwYXJhbSB7b2JqZWN0fSBtZXRhZGF0YVxuICAgICAgICogICAgICAgIE1ldGFkYXRhIGFib3V0IHRoZSBtZXRob2QgYmVpbmcgd3JhcHBlZC5cbiAgICAgICAqIEBwYXJhbSB7aW50ZWdlcn0gbWV0YWRhdGEubWluQXJnc1xuICAgICAgICogICAgICAgIFRoZSBtaW5pbXVtIG51bWJlciBvZiBhcmd1bWVudHMgd2hpY2ggbXVzdCBiZSBwYXNzZWQgdG8gdGhlXG4gICAgICAgKiAgICAgICAgZnVuY3Rpb24uIElmIGNhbGxlZCB3aXRoIGZld2VyIHRoYW4gdGhpcyBudW1iZXIgb2YgYXJndW1lbnRzLCB0aGVcbiAgICAgICAqICAgICAgICB3cmFwcGVyIHdpbGwgcmFpc2UgYW4gZXhjZXB0aW9uLlxuICAgICAgICogQHBhcmFtIHtpbnRlZ2VyfSBtZXRhZGF0YS5tYXhBcmdzXG4gICAgICAgKiAgICAgICAgVGhlIG1heGltdW0gbnVtYmVyIG9mIGFyZ3VtZW50cyB3aGljaCBtYXkgYmUgcGFzc2VkIHRvIHRoZVxuICAgICAgICogICAgICAgIGZ1bmN0aW9uLiBJZiBjYWxsZWQgd2l0aCBtb3JlIHRoYW4gdGhpcyBudW1iZXIgb2YgYXJndW1lbnRzLCB0aGVcbiAgICAgICAqICAgICAgICB3cmFwcGVyIHdpbGwgcmFpc2UgYW4gZXhjZXB0aW9uLlxuICAgICAgICogQHBhcmFtIHtib29sZWFufSBtZXRhZGF0YS5zaW5nbGVDYWxsYmFja0FyZ1xuICAgICAgICogICAgICAgIFdoZXRoZXIgb3Igbm90IHRoZSBwcm9taXNlIGlzIHJlc29sdmVkIHdpdGggb25seSB0aGUgZmlyc3RcbiAgICAgICAqICAgICAgICBhcmd1bWVudCBvZiB0aGUgY2FsbGJhY2ssIGFsdGVybmF0aXZlbHkgYW4gYXJyYXkgb2YgYWxsIHRoZVxuICAgICAgICogICAgICAgIGNhbGxiYWNrIGFyZ3VtZW50cyBpcyByZXNvbHZlZC4gQnkgZGVmYXVsdCwgaWYgdGhlIGNhbGxiYWNrXG4gICAgICAgKiAgICAgICAgZnVuY3Rpb24gaXMgaW52b2tlZCB3aXRoIG9ubHkgYSBzaW5nbGUgYXJndW1lbnQsIHRoYXQgd2lsbCBiZVxuICAgICAgICogICAgICAgIHJlc29sdmVkIHRvIHRoZSBwcm9taXNlLCB3aGlsZSBhbGwgYXJndW1lbnRzIHdpbGwgYmUgcmVzb2x2ZWQgYXNcbiAgICAgICAqICAgICAgICBhbiBhcnJheSBpZiBtdWx0aXBsZSBhcmUgZ2l2ZW4uXG4gICAgICAgKlxuICAgICAgICogQHJldHVybnMge2Z1bmN0aW9uKG9iamVjdCwgLi4uKil9XG4gICAgICAgKiAgICAgICBUaGUgZ2VuZXJhdGVkIHdyYXBwZXIgZnVuY3Rpb24uXG4gICAgICAgKi9cblxuXG4gICAgICBjb25zdCB3cmFwQXN5bmNGdW5jdGlvbiA9IChuYW1lLCBtZXRhZGF0YSkgPT4ge1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24gYXN5bmNGdW5jdGlvbldyYXBwZXIodGFyZ2V0LCAuLi5hcmdzKSB7XG4gICAgICAgICAgaWYgKGFyZ3MubGVuZ3RoIDwgbWV0YWRhdGEubWluQXJncykge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBFeHBlY3RlZCBhdCBsZWFzdCAke21ldGFkYXRhLm1pbkFyZ3N9ICR7cGx1cmFsaXplQXJndW1lbnRzKG1ldGFkYXRhLm1pbkFyZ3MpfSBmb3IgJHtuYW1lfSgpLCBnb3QgJHthcmdzLmxlbmd0aH1gKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAoYXJncy5sZW5ndGggPiBtZXRhZGF0YS5tYXhBcmdzKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYEV4cGVjdGVkIGF0IG1vc3QgJHttZXRhZGF0YS5tYXhBcmdzfSAke3BsdXJhbGl6ZUFyZ3VtZW50cyhtZXRhZGF0YS5tYXhBcmdzKX0gZm9yICR7bmFtZX0oKSwgZ290ICR7YXJncy5sZW5ndGh9YCk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgICAgICAgIGlmIChtZXRhZGF0YS5mYWxsYmFja1RvTm9DYWxsYmFjaykge1xuICAgICAgICAgICAgICAvLyBUaGlzIEFQSSBtZXRob2QgaGFzIGN1cnJlbnRseSBubyBjYWxsYmFjayBvbiBDaHJvbWUsIGJ1dCBpdCByZXR1cm4gYSBwcm9taXNlIG9uIEZpcmVmb3gsXG4gICAgICAgICAgICAgIC8vIGFuZCBzbyB0aGUgcG9seWZpbGwgd2lsbCB0cnkgdG8gY2FsbCBpdCB3aXRoIGEgY2FsbGJhY2sgZmlyc3QsIGFuZCBpdCB3aWxsIGZhbGxiYWNrXG4gICAgICAgICAgICAgIC8vIHRvIG5vdCBwYXNzaW5nIHRoZSBjYWxsYmFjayBpZiB0aGUgZmlyc3QgY2FsbCBmYWlscy5cbiAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICB0YXJnZXRbbmFtZV0oLi4uYXJncywgbWFrZUNhbGxiYWNrKHtcbiAgICAgICAgICAgICAgICAgIHJlc29sdmUsXG4gICAgICAgICAgICAgICAgICByZWplY3RcbiAgICAgICAgICAgICAgICB9LCBtZXRhZGF0YSkpO1xuICAgICAgICAgICAgICB9IGNhdGNoIChjYkVycm9yKSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS53YXJuKGAke25hbWV9IEFQSSBtZXRob2QgZG9lc24ndCBzZWVtIHRvIHN1cHBvcnQgdGhlIGNhbGxiYWNrIHBhcmFtZXRlciwgYCArIFwiZmFsbGluZyBiYWNrIHRvIGNhbGwgaXQgd2l0aG91dCBhIGNhbGxiYWNrOiBcIiwgY2JFcnJvcik7XG4gICAgICAgICAgICAgICAgdGFyZ2V0W25hbWVdKC4uLmFyZ3MpOyAvLyBVcGRhdGUgdGhlIEFQSSBtZXRob2QgbWV0YWRhdGEsIHNvIHRoYXQgdGhlIG5leHQgQVBJIGNhbGxzIHdpbGwgbm90IHRyeSB0b1xuICAgICAgICAgICAgICAgIC8vIHVzZSB0aGUgdW5zdXBwb3J0ZWQgY2FsbGJhY2sgYW55bW9yZS5cblxuICAgICAgICAgICAgICAgIG1ldGFkYXRhLmZhbGxiYWNrVG9Ob0NhbGxiYWNrID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgbWV0YWRhdGEubm9DYWxsYmFjayA9IHRydWU7XG4gICAgICAgICAgICAgICAgcmVzb2x2ZSgpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2UgaWYgKG1ldGFkYXRhLm5vQ2FsbGJhY2spIHtcbiAgICAgICAgICAgICAgdGFyZ2V0W25hbWVdKC4uLmFyZ3MpO1xuICAgICAgICAgICAgICByZXNvbHZlKCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICB0YXJnZXRbbmFtZV0oLi4uYXJncywgbWFrZUNhbGxiYWNrKHtcbiAgICAgICAgICAgICAgICByZXNvbHZlLFxuICAgICAgICAgICAgICAgIHJlamVjdFxuICAgICAgICAgICAgICB9LCBtZXRhZGF0YSkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pO1xuICAgICAgICB9O1xuICAgICAgfTtcbiAgICAgIC8qKlxuICAgICAgICogV3JhcHMgYW4gZXhpc3RpbmcgbWV0aG9kIG9mIHRoZSB0YXJnZXQgb2JqZWN0LCBzbyB0aGF0IGNhbGxzIHRvIGl0IGFyZVxuICAgICAgICogaW50ZXJjZXB0ZWQgYnkgdGhlIGdpdmVuIHdyYXBwZXIgZnVuY3Rpb24uIFRoZSB3cmFwcGVyIGZ1bmN0aW9uIHJlY2VpdmVzLFxuICAgICAgICogYXMgaXRzIGZpcnN0IGFyZ3VtZW50LCB0aGUgb3JpZ2luYWwgYHRhcmdldGAgb2JqZWN0LCBmb2xsb3dlZCBieSBlYWNoIG9mXG4gICAgICAgKiB0aGUgYXJndW1lbnRzIHBhc3NlZCB0byB0aGUgb3JpZ2luYWwgbWV0aG9kLlxuICAgICAgICpcbiAgICAgICAqIEBwYXJhbSB7b2JqZWN0fSB0YXJnZXRcbiAgICAgICAqICAgICAgICBUaGUgb3JpZ2luYWwgdGFyZ2V0IG9iamVjdCB0aGF0IHRoZSB3cmFwcGVkIG1ldGhvZCBiZWxvbmdzIHRvLlxuICAgICAgICogQHBhcmFtIHtmdW5jdGlvbn0gbWV0aG9kXG4gICAgICAgKiAgICAgICAgVGhlIG1ldGhvZCBiZWluZyB3cmFwcGVkLiBUaGlzIGlzIHVzZWQgYXMgdGhlIHRhcmdldCBvZiB0aGUgUHJveHlcbiAgICAgICAqICAgICAgICBvYmplY3Qgd2hpY2ggaXMgY3JlYXRlZCB0byB3cmFwIHRoZSBtZXRob2QuXG4gICAgICAgKiBAcGFyYW0ge2Z1bmN0aW9ufSB3cmFwcGVyXG4gICAgICAgKiAgICAgICAgVGhlIHdyYXBwZXIgZnVuY3Rpb24gd2hpY2ggaXMgY2FsbGVkIGluIHBsYWNlIG9mIGEgZGlyZWN0IGludm9jYXRpb25cbiAgICAgICAqICAgICAgICBvZiB0aGUgd3JhcHBlZCBtZXRob2QuXG4gICAgICAgKlxuICAgICAgICogQHJldHVybnMge1Byb3h5PGZ1bmN0aW9uPn1cbiAgICAgICAqICAgICAgICBBIFByb3h5IG9iamVjdCBmb3IgdGhlIGdpdmVuIG1ldGhvZCwgd2hpY2ggaW52b2tlcyB0aGUgZ2l2ZW4gd3JhcHBlclxuICAgICAgICogICAgICAgIG1ldGhvZCBpbiBpdHMgcGxhY2UuXG4gICAgICAgKi9cblxuXG4gICAgICBjb25zdCB3cmFwTWV0aG9kID0gKHRhcmdldCwgbWV0aG9kLCB3cmFwcGVyKSA9PiB7XG4gICAgICAgIHJldHVybiBuZXcgUHJveHkobWV0aG9kLCB7XG4gICAgICAgICAgYXBwbHkodGFyZ2V0TWV0aG9kLCB0aGlzT2JqLCBhcmdzKSB7XG4gICAgICAgICAgICByZXR1cm4gd3JhcHBlci5jYWxsKHRoaXNPYmosIHRhcmdldCwgLi4uYXJncyk7XG4gICAgICAgICAgfVxuXG4gICAgICAgIH0pO1xuICAgICAgfTtcblxuICAgICAgbGV0IGhhc093blByb3BlcnR5ID0gRnVuY3Rpb24uY2FsbC5iaW5kKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkpO1xuICAgICAgLyoqXG4gICAgICAgKiBXcmFwcyBhbiBvYmplY3QgaW4gYSBQcm94eSB3aGljaCBpbnRlcmNlcHRzIGFuZCB3cmFwcyBjZXJ0YWluIG1ldGhvZHNcbiAgICAgICAqIGJhc2VkIG9uIHRoZSBnaXZlbiBgd3JhcHBlcnNgIGFuZCBgbWV0YWRhdGFgIG9iamVjdHMuXG4gICAgICAgKlxuICAgICAgICogQHBhcmFtIHtvYmplY3R9IHRhcmdldFxuICAgICAgICogICAgICAgIFRoZSB0YXJnZXQgb2JqZWN0IHRvIHdyYXAuXG4gICAgICAgKlxuICAgICAgICogQHBhcmFtIHtvYmplY3R9IFt3cmFwcGVycyA9IHt9XVxuICAgICAgICogICAgICAgIEFuIG9iamVjdCB0cmVlIGNvbnRhaW5pbmcgd3JhcHBlciBmdW5jdGlvbnMgZm9yIHNwZWNpYWwgY2FzZXMuIEFueVxuICAgICAgICogICAgICAgIGZ1bmN0aW9uIHByZXNlbnQgaW4gdGhpcyBvYmplY3QgdHJlZSBpcyBjYWxsZWQgaW4gcGxhY2Ugb2YgdGhlXG4gICAgICAgKiAgICAgICAgbWV0aG9kIGluIHRoZSBzYW1lIGxvY2F0aW9uIGluIHRoZSBgdGFyZ2V0YCBvYmplY3QgdHJlZS4gVGhlc2VcbiAgICAgICAqICAgICAgICB3cmFwcGVyIG1ldGhvZHMgYXJlIGludm9rZWQgYXMgZGVzY3JpYmVkIGluIHtAc2VlIHdyYXBNZXRob2R9LlxuICAgICAgICpcbiAgICAgICAqIEBwYXJhbSB7b2JqZWN0fSBbbWV0YWRhdGEgPSB7fV1cbiAgICAgICAqICAgICAgICBBbiBvYmplY3QgdHJlZSBjb250YWluaW5nIG1ldGFkYXRhIHVzZWQgdG8gYXV0b21hdGljYWxseSBnZW5lcmF0ZVxuICAgICAgICogICAgICAgIFByb21pc2UtYmFzZWQgd3JhcHBlciBmdW5jdGlvbnMgZm9yIGFzeW5jaHJvbm91cy4gQW55IGZ1bmN0aW9uIGluXG4gICAgICAgKiAgICAgICAgdGhlIGB0YXJnZXRgIG9iamVjdCB0cmVlIHdoaWNoIGhhcyBhIGNvcnJlc3BvbmRpbmcgbWV0YWRhdGEgb2JqZWN0XG4gICAgICAgKiAgICAgICAgaW4gdGhlIHNhbWUgbG9jYXRpb24gaW4gdGhlIGBtZXRhZGF0YWAgdHJlZSBpcyByZXBsYWNlZCB3aXRoIGFuXG4gICAgICAgKiAgICAgICAgYXV0b21hdGljYWxseS1nZW5lcmF0ZWQgd3JhcHBlciBmdW5jdGlvbiwgYXMgZGVzY3JpYmVkIGluXG4gICAgICAgKiAgICAgICAge0BzZWUgd3JhcEFzeW5jRnVuY3Rpb259XG4gICAgICAgKlxuICAgICAgICogQHJldHVybnMge1Byb3h5PG9iamVjdD59XG4gICAgICAgKi9cblxuICAgICAgY29uc3Qgd3JhcE9iamVjdCA9ICh0YXJnZXQsIHdyYXBwZXJzID0ge30sIG1ldGFkYXRhID0ge30pID0+IHtcbiAgICAgICAgbGV0IGNhY2hlID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICAgICAgbGV0IGhhbmRsZXJzID0ge1xuICAgICAgICAgIGhhcyhwcm94eVRhcmdldCwgcHJvcCkge1xuICAgICAgICAgICAgcmV0dXJuIHByb3AgaW4gdGFyZ2V0IHx8IHByb3AgaW4gY2FjaGU7XG4gICAgICAgICAgfSxcblxuICAgICAgICAgIGdldChwcm94eVRhcmdldCwgcHJvcCwgcmVjZWl2ZXIpIHtcbiAgICAgICAgICAgIGlmIChwcm9wIGluIGNhY2hlKSB7XG4gICAgICAgICAgICAgIHJldHVybiBjYWNoZVtwcm9wXTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKCEocHJvcCBpbiB0YXJnZXQpKSB7XG4gICAgICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGxldCB2YWx1ZSA9IHRhcmdldFtwcm9wXTtcblxuICAgICAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgICAgICAgIC8vIFRoaXMgaXMgYSBtZXRob2Qgb24gdGhlIHVuZGVybHlpbmcgb2JqZWN0LiBDaGVjayBpZiB3ZSBuZWVkIHRvIGRvXG4gICAgICAgICAgICAgIC8vIGFueSB3cmFwcGluZy5cbiAgICAgICAgICAgICAgaWYgKHR5cGVvZiB3cmFwcGVyc1twcm9wXSA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgICAgICAgICAgLy8gV2UgaGF2ZSBhIHNwZWNpYWwtY2FzZSB3cmFwcGVyIGZvciB0aGlzIG1ldGhvZC5cbiAgICAgICAgICAgICAgICB2YWx1ZSA9IHdyYXBNZXRob2QodGFyZ2V0LCB0YXJnZXRbcHJvcF0sIHdyYXBwZXJzW3Byb3BdKTtcbiAgICAgICAgICAgICAgfSBlbHNlIGlmIChoYXNPd25Qcm9wZXJ0eShtZXRhZGF0YSwgcHJvcCkpIHtcbiAgICAgICAgICAgICAgICAvLyBUaGlzIGlzIGFuIGFzeW5jIG1ldGhvZCB0aGF0IHdlIGhhdmUgbWV0YWRhdGEgZm9yLiBDcmVhdGUgYVxuICAgICAgICAgICAgICAgIC8vIFByb21pc2Ugd3JhcHBlciBmb3IgaXQuXG4gICAgICAgICAgICAgICAgbGV0IHdyYXBwZXIgPSB3cmFwQXN5bmNGdW5jdGlvbihwcm9wLCBtZXRhZGF0YVtwcm9wXSk7XG4gICAgICAgICAgICAgICAgdmFsdWUgPSB3cmFwTWV0aG9kKHRhcmdldCwgdGFyZ2V0W3Byb3BdLCB3cmFwcGVyKTtcbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAvLyBUaGlzIGlzIGEgbWV0aG9kIHRoYXQgd2UgZG9uJ3Qga25vdyBvciBjYXJlIGFib3V0LiBSZXR1cm4gdGhlXG4gICAgICAgICAgICAgICAgLy8gb3JpZ2luYWwgbWV0aG9kLCBib3VuZCB0byB0aGUgdW5kZXJseWluZyBvYmplY3QuXG4gICAgICAgICAgICAgICAgdmFsdWUgPSB2YWx1ZS5iaW5kKHRhcmdldCk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSBpZiAodHlwZW9mIHZhbHVlID09PSBcIm9iamVjdFwiICYmIHZhbHVlICE9PSBudWxsICYmIChoYXNPd25Qcm9wZXJ0eSh3cmFwcGVycywgcHJvcCkgfHwgaGFzT3duUHJvcGVydHkobWV0YWRhdGEsIHByb3ApKSkge1xuICAgICAgICAgICAgICAvLyBUaGlzIGlzIGFuIG9iamVjdCB0aGF0IHdlIG5lZWQgdG8gZG8gc29tZSB3cmFwcGluZyBmb3IgdGhlIGNoaWxkcmVuXG4gICAgICAgICAgICAgIC8vIG9mLiBDcmVhdGUgYSBzdWItb2JqZWN0IHdyYXBwZXIgZm9yIGl0IHdpdGggdGhlIGFwcHJvcHJpYXRlIGNoaWxkXG4gICAgICAgICAgICAgIC8vIG1ldGFkYXRhLlxuICAgICAgICAgICAgICB2YWx1ZSA9IHdyYXBPYmplY3QodmFsdWUsIHdyYXBwZXJzW3Byb3BdLCBtZXRhZGF0YVtwcm9wXSk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGhhc093blByb3BlcnR5KG1ldGFkYXRhLCBcIipcIikpIHtcbiAgICAgICAgICAgICAgLy8gV3JhcCBhbGwgcHJvcGVydGllcyBpbiAqIG5hbWVzcGFjZS5cbiAgICAgICAgICAgICAgdmFsdWUgPSB3cmFwT2JqZWN0KHZhbHVlLCB3cmFwcGVyc1twcm9wXSwgbWV0YWRhdGFbXCIqXCJdKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIC8vIFdlIGRvbid0IG5lZWQgdG8gZG8gYW55IHdyYXBwaW5nIGZvciB0aGlzIHByb3BlcnR5LFxuICAgICAgICAgICAgICAvLyBzbyBqdXN0IGZvcndhcmQgYWxsIGFjY2VzcyB0byB0aGUgdW5kZXJseWluZyBvYmplY3QuXG4gICAgICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShjYWNoZSwgcHJvcCwge1xuICAgICAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuXG4gICAgICAgICAgICAgICAgZ2V0KCkge1xuICAgICAgICAgICAgICAgICAgcmV0dXJuIHRhcmdldFtwcm9wXTtcbiAgICAgICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICAgICAgc2V0KHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgICB0YXJnZXRbcHJvcF0gPSB2YWx1ZTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgY2FjaGVbcHJvcF0gPSB2YWx1ZTtcbiAgICAgICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgICAgICB9LFxuXG4gICAgICAgICAgc2V0KHByb3h5VGFyZ2V0LCBwcm9wLCB2YWx1ZSwgcmVjZWl2ZXIpIHtcbiAgICAgICAgICAgIGlmIChwcm9wIGluIGNhY2hlKSB7XG4gICAgICAgICAgICAgIGNhY2hlW3Byb3BdID0gdmFsdWU7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICB0YXJnZXRbcHJvcF0gPSB2YWx1ZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgfSxcblxuICAgICAgICAgIGRlZmluZVByb3BlcnR5KHByb3h5VGFyZ2V0LCBwcm9wLCBkZXNjKSB7XG4gICAgICAgICAgICByZXR1cm4gUmVmbGVjdC5kZWZpbmVQcm9wZXJ0eShjYWNoZSwgcHJvcCwgZGVzYyk7XG4gICAgICAgICAgfSxcblxuICAgICAgICAgIGRlbGV0ZVByb3BlcnR5KHByb3h5VGFyZ2V0LCBwcm9wKSB7XG4gICAgICAgICAgICByZXR1cm4gUmVmbGVjdC5kZWxldGVQcm9wZXJ0eShjYWNoZSwgcHJvcCk7XG4gICAgICAgICAgfVxuXG4gICAgICAgIH07IC8vIFBlciBjb250cmFjdCBvZiB0aGUgUHJveHkgQVBJLCB0aGUgXCJnZXRcIiBwcm94eSBoYW5kbGVyIG11c3QgcmV0dXJuIHRoZVxuICAgICAgICAvLyBvcmlnaW5hbCB2YWx1ZSBvZiB0aGUgdGFyZ2V0IGlmIHRoYXQgdmFsdWUgaXMgZGVjbGFyZWQgcmVhZC1vbmx5IGFuZFxuICAgICAgICAvLyBub24tY29uZmlndXJhYmxlLiBGb3IgdGhpcyByZWFzb24sIHdlIGNyZWF0ZSBhbiBvYmplY3Qgd2l0aCB0aGVcbiAgICAgICAgLy8gcHJvdG90eXBlIHNldCB0byBgdGFyZ2V0YCBpbnN0ZWFkIG9mIHVzaW5nIGB0YXJnZXRgIGRpcmVjdGx5LlxuICAgICAgICAvLyBPdGhlcndpc2Ugd2UgY2Fubm90IHJldHVybiBhIGN1c3RvbSBvYmplY3QgZm9yIEFQSXMgdGhhdFxuICAgICAgICAvLyBhcmUgZGVjbGFyZWQgcmVhZC1vbmx5IGFuZCBub24tY29uZmlndXJhYmxlLCBzdWNoIGFzIGBjaHJvbWUuZGV2dG9vbHNgLlxuICAgICAgICAvL1xuICAgICAgICAvLyBUaGUgcHJveHkgaGFuZGxlcnMgdGhlbXNlbHZlcyB3aWxsIHN0aWxsIHVzZSB0aGUgb3JpZ2luYWwgYHRhcmdldGBcbiAgICAgICAgLy8gaW5zdGVhZCBvZiB0aGUgYHByb3h5VGFyZ2V0YCwgc28gdGhhdCB0aGUgbWV0aG9kcyBhbmQgcHJvcGVydGllcyBhcmVcbiAgICAgICAgLy8gZGVyZWZlcmVuY2VkIHZpYSB0aGUgb3JpZ2luYWwgdGFyZ2V0cy5cblxuICAgICAgICBsZXQgcHJveHlUYXJnZXQgPSBPYmplY3QuY3JlYXRlKHRhcmdldCk7XG4gICAgICAgIHJldHVybiBuZXcgUHJveHkocHJveHlUYXJnZXQsIGhhbmRsZXJzKTtcbiAgICAgIH07XG4gICAgICAvKipcbiAgICAgICAqIENyZWF0ZXMgYSBzZXQgb2Ygd3JhcHBlciBmdW5jdGlvbnMgZm9yIGFuIGV2ZW50IG9iamVjdCwgd2hpY2ggaGFuZGxlc1xuICAgICAgICogd3JhcHBpbmcgb2YgbGlzdGVuZXIgZnVuY3Rpb25zIHRoYXQgdGhvc2UgbWVzc2FnZXMgYXJlIHBhc3NlZC5cbiAgICAgICAqXG4gICAgICAgKiBBIHNpbmdsZSB3cmFwcGVyIGlzIGNyZWF0ZWQgZm9yIGVhY2ggbGlzdGVuZXIgZnVuY3Rpb24sIGFuZCBzdG9yZWQgaW4gYVxuICAgICAgICogbWFwLiBTdWJzZXF1ZW50IGNhbGxzIHRvIGBhZGRMaXN0ZW5lcmAsIGBoYXNMaXN0ZW5lcmAsIG9yIGByZW1vdmVMaXN0ZW5lcmBcbiAgICAgICAqIHJldHJpZXZlIHRoZSBvcmlnaW5hbCB3cmFwcGVyLCBzbyB0aGF0ICBhdHRlbXB0cyB0byByZW1vdmUgYVxuICAgICAgICogcHJldmlvdXNseS1hZGRlZCBsaXN0ZW5lciB3b3JrIGFzIGV4cGVjdGVkLlxuICAgICAgICpcbiAgICAgICAqIEBwYXJhbSB7RGVmYXVsdFdlYWtNYXA8ZnVuY3Rpb24sIGZ1bmN0aW9uPn0gd3JhcHBlck1hcFxuICAgICAgICogICAgICAgIEEgRGVmYXVsdFdlYWtNYXAgb2JqZWN0IHdoaWNoIHdpbGwgY3JlYXRlIHRoZSBhcHByb3ByaWF0ZSB3cmFwcGVyXG4gICAgICAgKiAgICAgICAgZm9yIGEgZ2l2ZW4gbGlzdGVuZXIgZnVuY3Rpb24gd2hlbiBvbmUgZG9lcyBub3QgZXhpc3QsIGFuZCByZXRyaWV2ZVxuICAgICAgICogICAgICAgIGFuIGV4aXN0aW5nIG9uZSB3aGVuIGl0IGRvZXMuXG4gICAgICAgKlxuICAgICAgICogQHJldHVybnMge29iamVjdH1cbiAgICAgICAqL1xuXG5cbiAgICAgIGNvbnN0IHdyYXBFdmVudCA9IHdyYXBwZXJNYXAgPT4gKHtcbiAgICAgICAgYWRkTGlzdGVuZXIodGFyZ2V0LCBsaXN0ZW5lciwgLi4uYXJncykge1xuICAgICAgICAgIHRhcmdldC5hZGRMaXN0ZW5lcih3cmFwcGVyTWFwLmdldChsaXN0ZW5lciksIC4uLmFyZ3MpO1xuICAgICAgICB9LFxuXG4gICAgICAgIGhhc0xpc3RlbmVyKHRhcmdldCwgbGlzdGVuZXIpIHtcbiAgICAgICAgICByZXR1cm4gdGFyZ2V0Lmhhc0xpc3RlbmVyKHdyYXBwZXJNYXAuZ2V0KGxpc3RlbmVyKSk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgcmVtb3ZlTGlzdGVuZXIodGFyZ2V0LCBsaXN0ZW5lcikge1xuICAgICAgICAgIHRhcmdldC5yZW1vdmVMaXN0ZW5lcih3cmFwcGVyTWFwLmdldChsaXN0ZW5lcikpO1xuICAgICAgICB9XG5cbiAgICAgIH0pO1xuXG4gICAgICBjb25zdCBvblJlcXVlc3RGaW5pc2hlZFdyYXBwZXJzID0gbmV3IERlZmF1bHRXZWFrTWFwKGxpc3RlbmVyID0+IHtcbiAgICAgICAgaWYgKHR5cGVvZiBsaXN0ZW5lciAhPT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgICAgcmV0dXJuIGxpc3RlbmVyO1xuICAgICAgICB9XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBXcmFwcyBhbiBvblJlcXVlc3RGaW5pc2hlZCBsaXN0ZW5lciBmdW5jdGlvbiBzbyB0aGF0IGl0IHdpbGwgcmV0dXJuIGFcbiAgICAgICAgICogYGdldENvbnRlbnQoKWAgcHJvcGVydHkgd2hpY2ggcmV0dXJucyBhIGBQcm9taXNlYCByYXRoZXIgdGhhbiB1c2luZyBhXG4gICAgICAgICAqIGNhbGxiYWNrIEFQSS5cbiAgICAgICAgICpcbiAgICAgICAgICogQHBhcmFtIHtvYmplY3R9IHJlcVxuICAgICAgICAgKiAgICAgICAgVGhlIEhBUiBlbnRyeSBvYmplY3QgcmVwcmVzZW50aW5nIHRoZSBuZXR3b3JrIHJlcXVlc3QuXG4gICAgICAgICAqL1xuXG5cbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIG9uUmVxdWVzdEZpbmlzaGVkKHJlcSkge1xuICAgICAgICAgIGNvbnN0IHdyYXBwZWRSZXEgPSB3cmFwT2JqZWN0KHJlcSwge31cbiAgICAgICAgICAvKiB3cmFwcGVycyAqL1xuICAgICAgICAgICwge1xuICAgICAgICAgICAgZ2V0Q29udGVudDoge1xuICAgICAgICAgICAgICBtaW5BcmdzOiAwLFxuICAgICAgICAgICAgICBtYXhBcmdzOiAwXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG4gICAgICAgICAgbGlzdGVuZXIod3JhcHBlZFJlcSk7XG4gICAgICAgIH07XG4gICAgICB9KTtcbiAgICAgIGNvbnN0IG9uTWVzc2FnZVdyYXBwZXJzID0gbmV3IERlZmF1bHRXZWFrTWFwKGxpc3RlbmVyID0+IHtcbiAgICAgICAgaWYgKHR5cGVvZiBsaXN0ZW5lciAhPT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgICAgcmV0dXJuIGxpc3RlbmVyO1xuICAgICAgICB9XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBXcmFwcyBhIG1lc3NhZ2UgbGlzdGVuZXIgZnVuY3Rpb24gc28gdGhhdCBpdCBtYXkgc2VuZCByZXNwb25zZXMgYmFzZWQgb25cbiAgICAgICAgICogaXRzIHJldHVybiB2YWx1ZSwgcmF0aGVyIHRoYW4gYnkgcmV0dXJuaW5nIGEgc2VudGluZWwgdmFsdWUgYW5kIGNhbGxpbmcgYVxuICAgICAgICAgKiBjYWxsYmFjay4gSWYgdGhlIGxpc3RlbmVyIGZ1bmN0aW9uIHJldHVybnMgYSBQcm9taXNlLCB0aGUgcmVzcG9uc2UgaXNcbiAgICAgICAgICogc2VudCB3aGVuIHRoZSBwcm9taXNlIGVpdGhlciByZXNvbHZlcyBvciByZWplY3RzLlxuICAgICAgICAgKlxuICAgICAgICAgKiBAcGFyYW0geyp9IG1lc3NhZ2VcbiAgICAgICAgICogICAgICAgIFRoZSBtZXNzYWdlIHNlbnQgYnkgdGhlIG90aGVyIGVuZCBvZiB0aGUgY2hhbm5lbC5cbiAgICAgICAgICogQHBhcmFtIHtvYmplY3R9IHNlbmRlclxuICAgICAgICAgKiAgICAgICAgRGV0YWlscyBhYm91dCB0aGUgc2VuZGVyIG9mIHRoZSBtZXNzYWdlLlxuICAgICAgICAgKiBAcGFyYW0ge2Z1bmN0aW9uKCopfSBzZW5kUmVzcG9uc2VcbiAgICAgICAgICogICAgICAgIEEgY2FsbGJhY2sgd2hpY2gsIHdoZW4gY2FsbGVkIHdpdGggYW4gYXJiaXRyYXJ5IGFyZ3VtZW50LCBzZW5kc1xuICAgICAgICAgKiAgICAgICAgdGhhdCB2YWx1ZSBhcyBhIHJlc3BvbnNlLlxuICAgICAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn1cbiAgICAgICAgICogICAgICAgIFRydWUgaWYgdGhlIHdyYXBwZWQgbGlzdGVuZXIgcmV0dXJuZWQgYSBQcm9taXNlLCB3aGljaCB3aWxsIGxhdGVyXG4gICAgICAgICAqICAgICAgICB5aWVsZCBhIHJlc3BvbnNlLiBGYWxzZSBvdGhlcndpc2UuXG4gICAgICAgICAqL1xuXG5cbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIG9uTWVzc2FnZShtZXNzYWdlLCBzZW5kZXIsIHNlbmRSZXNwb25zZSkge1xuICAgICAgICAgIGxldCBkaWRDYWxsU2VuZFJlc3BvbnNlID0gZmFsc2U7XG4gICAgICAgICAgbGV0IHdyYXBwZWRTZW5kUmVzcG9uc2U7XG4gICAgICAgICAgbGV0IHNlbmRSZXNwb25zZVByb21pc2UgPSBuZXcgUHJvbWlzZShyZXNvbHZlID0+IHtcbiAgICAgICAgICAgIHdyYXBwZWRTZW5kUmVzcG9uc2UgPSBmdW5jdGlvbiAocmVzcG9uc2UpIHtcbiAgICAgICAgICAgICAgZGlkQ2FsbFNlbmRSZXNwb25zZSA9IHRydWU7XG4gICAgICAgICAgICAgIHJlc29sdmUocmVzcG9uc2UpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgICBsZXQgcmVzdWx0O1xuXG4gICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHJlc3VsdCA9IGxpc3RlbmVyKG1lc3NhZ2UsIHNlbmRlciwgd3JhcHBlZFNlbmRSZXNwb25zZSk7XG4gICAgICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICByZXN1bHQgPSBQcm9taXNlLnJlamVjdChlcnIpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGNvbnN0IGlzUmVzdWx0VGhlbmFibGUgPSByZXN1bHQgIT09IHRydWUgJiYgaXNUaGVuYWJsZShyZXN1bHQpOyAvLyBJZiB0aGUgbGlzdGVuZXIgZGlkbid0IHJldHVybmVkIHRydWUgb3IgYSBQcm9taXNlLCBvciBjYWxsZWRcbiAgICAgICAgICAvLyB3cmFwcGVkU2VuZFJlc3BvbnNlIHN5bmNocm9ub3VzbHksIHdlIGNhbiBleGl0IGVhcmxpZXJcbiAgICAgICAgICAvLyBiZWNhdXNlIHRoZXJlIHdpbGwgYmUgbm8gcmVzcG9uc2Ugc2VudCBmcm9tIHRoaXMgbGlzdGVuZXIuXG5cbiAgICAgICAgICBpZiAocmVzdWx0ICE9PSB0cnVlICYmICFpc1Jlc3VsdFRoZW5hYmxlICYmICFkaWRDYWxsU2VuZFJlc3BvbnNlKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgfSAvLyBBIHNtYWxsIGhlbHBlciB0byBzZW5kIHRoZSBtZXNzYWdlIGlmIHRoZSBwcm9taXNlIHJlc29sdmVzXG4gICAgICAgICAgLy8gYW5kIGFuIGVycm9yIGlmIHRoZSBwcm9taXNlIHJlamVjdHMgKGEgd3JhcHBlZCBzZW5kTWVzc2FnZSBoYXNcbiAgICAgICAgICAvLyB0byB0cmFuc2xhdGUgdGhlIG1lc3NhZ2UgaW50byBhIHJlc29sdmVkIHByb21pc2Ugb3IgYSByZWplY3RlZFxuICAgICAgICAgIC8vIHByb21pc2UpLlxuXG5cbiAgICAgICAgICBjb25zdCBzZW5kUHJvbWlzZWRSZXN1bHQgPSBwcm9taXNlID0+IHtcbiAgICAgICAgICAgIHByb21pc2UudGhlbihtc2cgPT4ge1xuICAgICAgICAgICAgICAvLyBzZW5kIHRoZSBtZXNzYWdlIHZhbHVlLlxuICAgICAgICAgICAgICBzZW5kUmVzcG9uc2UobXNnKTtcbiAgICAgICAgICAgIH0sIGVycm9yID0+IHtcbiAgICAgICAgICAgICAgLy8gU2VuZCBhIEpTT04gcmVwcmVzZW50YXRpb24gb2YgdGhlIGVycm9yIGlmIHRoZSByZWplY3RlZCB2YWx1ZVxuICAgICAgICAgICAgICAvLyBpcyBhbiBpbnN0YW5jZSBvZiBlcnJvciwgb3IgdGhlIG9iamVjdCBpdHNlbGYgb3RoZXJ3aXNlLlxuICAgICAgICAgICAgICBsZXQgbWVzc2FnZTtcblxuICAgICAgICAgICAgICBpZiAoZXJyb3IgJiYgKGVycm9yIGluc3RhbmNlb2YgRXJyb3IgfHwgdHlwZW9mIGVycm9yLm1lc3NhZ2UgPT09IFwic3RyaW5nXCIpKSB7XG4gICAgICAgICAgICAgICAgbWVzc2FnZSA9IGVycm9yLm1lc3NhZ2U7XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgbWVzc2FnZSA9IFwiQW4gdW5leHBlY3RlZCBlcnJvciBvY2N1cnJlZFwiO1xuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgc2VuZFJlc3BvbnNlKHtcbiAgICAgICAgICAgICAgICBfX21veldlYkV4dGVuc2lvblBvbHlmaWxsUmVqZWN0X186IHRydWUsXG4gICAgICAgICAgICAgICAgbWVzc2FnZVxuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0pLmNhdGNoKGVyciA9PiB7XG4gICAgICAgICAgICAgIC8vIFByaW50IGFuIGVycm9yIG9uIHRoZSBjb25zb2xlIGlmIHVuYWJsZSB0byBzZW5kIHRoZSByZXNwb25zZS5cbiAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihcIkZhaWxlZCB0byBzZW5kIG9uTWVzc2FnZSByZWplY3RlZCByZXBseVwiLCBlcnIpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfTsgLy8gSWYgdGhlIGxpc3RlbmVyIHJldHVybmVkIGEgUHJvbWlzZSwgc2VuZCB0aGUgcmVzb2x2ZWQgdmFsdWUgYXMgYVxuICAgICAgICAgIC8vIHJlc3VsdCwgb3RoZXJ3aXNlIHdhaXQgdGhlIHByb21pc2UgcmVsYXRlZCB0byB0aGUgd3JhcHBlZFNlbmRSZXNwb25zZVxuICAgICAgICAgIC8vIGNhbGxiYWNrIHRvIHJlc29sdmUgYW5kIHNlbmQgaXQgYXMgYSByZXNwb25zZS5cblxuXG4gICAgICAgICAgaWYgKGlzUmVzdWx0VGhlbmFibGUpIHtcbiAgICAgICAgICAgIHNlbmRQcm9taXNlZFJlc3VsdChyZXN1bHQpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBzZW5kUHJvbWlzZWRSZXN1bHQoc2VuZFJlc3BvbnNlUHJvbWlzZSk7XG4gICAgICAgICAgfSAvLyBMZXQgQ2hyb21lIGtub3cgdGhhdCB0aGUgbGlzdGVuZXIgaXMgcmVwbHlpbmcuXG5cblxuICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9O1xuICAgICAgfSk7XG5cbiAgICAgIGNvbnN0IHdyYXBwZWRTZW5kTWVzc2FnZUNhbGxiYWNrID0gKHtcbiAgICAgICAgcmVqZWN0LFxuICAgICAgICByZXNvbHZlXG4gICAgICB9LCByZXBseSkgPT4ge1xuICAgICAgICBpZiAoZXh0ZW5zaW9uQVBJcy5ydW50aW1lLmxhc3RFcnJvcikge1xuICAgICAgICAgIC8vIERldGVjdCB3aGVuIG5vbmUgb2YgdGhlIGxpc3RlbmVycyByZXBsaWVkIHRvIHRoZSBzZW5kTWVzc2FnZSBjYWxsIGFuZCByZXNvbHZlXG4gICAgICAgICAgLy8gdGhlIHByb21pc2UgdG8gdW5kZWZpbmVkIGFzIGluIEZpcmVmb3guXG4gICAgICAgICAgLy8gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9tb3ppbGxhL3dlYmV4dGVuc2lvbi1wb2x5ZmlsbC9pc3N1ZXMvMTMwXG4gICAgICAgICAgaWYgKGV4dGVuc2lvbkFQSXMucnVudGltZS5sYXN0RXJyb3IubWVzc2FnZSA9PT0gQ0hST01FX1NFTkRfTUVTU0FHRV9DQUxMQkFDS19OT19SRVNQT05TRV9NRVNTQUdFKSB7XG4gICAgICAgICAgICByZXNvbHZlKCk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJlamVjdChuZXcgRXJyb3IoZXh0ZW5zaW9uQVBJcy5ydW50aW1lLmxhc3RFcnJvci5tZXNzYWdlKSk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKHJlcGx5ICYmIHJlcGx5Ll9fbW96V2ViRXh0ZW5zaW9uUG9seWZpbGxSZWplY3RfXykge1xuICAgICAgICAgIC8vIENvbnZlcnQgYmFjayB0aGUgSlNPTiByZXByZXNlbnRhdGlvbiBvZiB0aGUgZXJyb3IgaW50b1xuICAgICAgICAgIC8vIGFuIEVycm9yIGluc3RhbmNlLlxuICAgICAgICAgIHJlamVjdChuZXcgRXJyb3IocmVwbHkubWVzc2FnZSkpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJlc29sdmUocmVwbHkpO1xuICAgICAgICB9XG4gICAgICB9O1xuXG4gICAgICBjb25zdCB3cmFwcGVkU2VuZE1lc3NhZ2UgPSAobmFtZSwgbWV0YWRhdGEsIGFwaU5hbWVzcGFjZU9iaiwgLi4uYXJncykgPT4ge1xuICAgICAgICBpZiAoYXJncy5sZW5ndGggPCBtZXRhZGF0YS5taW5BcmdzKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBFeHBlY3RlZCBhdCBsZWFzdCAke21ldGFkYXRhLm1pbkFyZ3N9ICR7cGx1cmFsaXplQXJndW1lbnRzKG1ldGFkYXRhLm1pbkFyZ3MpfSBmb3IgJHtuYW1lfSgpLCBnb3QgJHthcmdzLmxlbmd0aH1gKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChhcmdzLmxlbmd0aCA+IG1ldGFkYXRhLm1heEFyZ3MpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYEV4cGVjdGVkIGF0IG1vc3QgJHttZXRhZGF0YS5tYXhBcmdzfSAke3BsdXJhbGl6ZUFyZ3VtZW50cyhtZXRhZGF0YS5tYXhBcmdzKX0gZm9yICR7bmFtZX0oKSwgZ290ICR7YXJncy5sZW5ndGh9YCk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgICAgIGNvbnN0IHdyYXBwZWRDYiA9IHdyYXBwZWRTZW5kTWVzc2FnZUNhbGxiYWNrLmJpbmQobnVsbCwge1xuICAgICAgICAgICAgcmVzb2x2ZSxcbiAgICAgICAgICAgIHJlamVjdFxuICAgICAgICAgIH0pO1xuICAgICAgICAgIGFyZ3MucHVzaCh3cmFwcGVkQ2IpO1xuICAgICAgICAgIGFwaU5hbWVzcGFjZU9iai5zZW5kTWVzc2FnZSguLi5hcmdzKTtcbiAgICAgICAgfSk7XG4gICAgICB9O1xuXG4gICAgICBjb25zdCBzdGF0aWNXcmFwcGVycyA9IHtcbiAgICAgICAgZGV2dG9vbHM6IHtcbiAgICAgICAgICBuZXR3b3JrOiB7XG4gICAgICAgICAgICBvblJlcXVlc3RGaW5pc2hlZDogd3JhcEV2ZW50KG9uUmVxdWVzdEZpbmlzaGVkV3JhcHBlcnMpXG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBydW50aW1lOiB7XG4gICAgICAgICAgb25NZXNzYWdlOiB3cmFwRXZlbnQob25NZXNzYWdlV3JhcHBlcnMpLFxuICAgICAgICAgIG9uTWVzc2FnZUV4dGVybmFsOiB3cmFwRXZlbnQob25NZXNzYWdlV3JhcHBlcnMpLFxuICAgICAgICAgIHNlbmRNZXNzYWdlOiB3cmFwcGVkU2VuZE1lc3NhZ2UuYmluZChudWxsLCBcInNlbmRNZXNzYWdlXCIsIHtcbiAgICAgICAgICAgIG1pbkFyZ3M6IDEsXG4gICAgICAgICAgICBtYXhBcmdzOiAzXG4gICAgICAgICAgfSlcbiAgICAgICAgfSxcbiAgICAgICAgdGFiczoge1xuICAgICAgICAgIHNlbmRNZXNzYWdlOiB3cmFwcGVkU2VuZE1lc3NhZ2UuYmluZChudWxsLCBcInNlbmRNZXNzYWdlXCIsIHtcbiAgICAgICAgICAgIG1pbkFyZ3M6IDIsXG4gICAgICAgICAgICBtYXhBcmdzOiAzXG4gICAgICAgICAgfSlcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICAgIGNvbnN0IHNldHRpbmdNZXRhZGF0YSA9IHtcbiAgICAgICAgY2xlYXI6IHtcbiAgICAgICAgICBtaW5BcmdzOiAxLFxuICAgICAgICAgIG1heEFyZ3M6IDFcbiAgICAgICAgfSxcbiAgICAgICAgZ2V0OiB7XG4gICAgICAgICAgbWluQXJnczogMSxcbiAgICAgICAgICBtYXhBcmdzOiAxXG4gICAgICAgIH0sXG4gICAgICAgIHNldDoge1xuICAgICAgICAgIG1pbkFyZ3M6IDEsXG4gICAgICAgICAgbWF4QXJnczogMVxuICAgICAgICB9XG4gICAgICB9O1xuICAgICAgYXBpTWV0YWRhdGEucHJpdmFjeSA9IHtcbiAgICAgICAgbmV0d29yazoge1xuICAgICAgICAgIFwiKlwiOiBzZXR0aW5nTWV0YWRhdGFcbiAgICAgICAgfSxcbiAgICAgICAgc2VydmljZXM6IHtcbiAgICAgICAgICBcIipcIjogc2V0dGluZ01ldGFkYXRhXG4gICAgICAgIH0sXG4gICAgICAgIHdlYnNpdGVzOiB7XG4gICAgICAgICAgXCIqXCI6IHNldHRpbmdNZXRhZGF0YVxuICAgICAgICB9XG4gICAgICB9O1xuICAgICAgcmV0dXJuIHdyYXBPYmplY3QoZXh0ZW5zaW9uQVBJcywgc3RhdGljV3JhcHBlcnMsIGFwaU1ldGFkYXRhKTtcbiAgICB9OyAvLyBUaGUgYnVpbGQgcHJvY2VzcyBhZGRzIGEgVU1EIHdyYXBwZXIgYXJvdW5kIHRoaXMgZmlsZSwgd2hpY2ggbWFrZXMgdGhlXG4gICAgLy8gYG1vZHVsZWAgdmFyaWFibGUgYXZhaWxhYmxlLlxuXG5cbiAgICBtb2R1bGUuZXhwb3J0cyA9IHdyYXBBUElzKGNocm9tZSk7XG4gIH0gZWxzZSB7XG4gICAgbW9kdWxlLmV4cG9ydHMgPSBnbG9iYWxUaGlzLmJyb3dzZXI7XG4gIH1cbn0pO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YnJvd3Nlci1wb2x5ZmlsbC5qcy5tYXBcbiIsImltcG9ydCB7UkVNT1ZFRCwgREVMRVRFRCwgQVBQUk9WRUQsIExPQ0tFRCwgVU5MT0NLRUQsIEVESVRFRCxcbiAgICAgICAgZ2V0U3Vic2NyaWJlZFVzZXJzX3dpdGhVbnNlZW5JRHMgfSBmcm9tICcuL3N0b3JhZ2UuanMnXG5pbXBvcnQgYnJvd3NlciBmcm9tICd3ZWJleHRlbnNpb24tcG9seWZpbGwnXG5cbmV4cG9ydCBjb25zdCBBTEFSTV9OQU1FID0gJ25vdGlmeW1lJ1xuY29uc3QgbWF4UmVkZGl0Q29udGVudExlbmd0aCA9IDMwMFxuY29uc3QgQUNUSU9OX0FQSSA9IF9fQlVJTFRfRk9SX18gPT09ICdjaHJvbWUnID8gJ2FjdGlvbicgOiAnYnJvd3NlckFjdGlvbidcblxuLy8gaHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvMjU5MzM1NTYvY2hyb21lLWV4dGVuc2lvbi1vcGVuLW5ldy10YWItd2hlbi1icm93c2VyLW9wZW5lZC1pbi1iYWNrZ3JvdW5kLW1hYy8yNTkzMzk2NCMyNTkzMzk2NFxuZXhwb3J0IGNvbnN0IGNyZWF0ZVRhYiA9ICh1cmwpID0+IHtcbiAgICBjaHJvbWUudGFicy5jcmVhdGUoe3VybDp1cmx9LCAodGFiKSA9PiB7XG4gICAgICAgIGlmKCEgdGFiKSB7XG4gICAgICAgICAgICAvLyBwcm9iYWJseSBubyB3aW5kb3cgYXZhaWxhYmxlXG4gICAgICAgICAgICBjaHJvbWUud2luZG93cy5jcmVhdGUoe3VybDp1cmx9LCAod2luKSA9PiB7XG4gICAgICAgICAgICAgICAgLy8gYmV0dGVyIHRvIGZvY3VzIGFmdGVyIHdpbmRvdyBjcmVhdGlvbiBjYWxsYmFja1xuICAgICAgICAgICAgICAgIGNocm9tZS53aW5kb3dzLnVwZGF0ZSh3aW4uaWQsIHtmb2N1c2VkOiB0cnVlfSlcbiAgICAgICAgICAgIH0pXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyBiZXR0ZXIgdG8gZm9jdXMgYWZ0ZXIgdGFiIGNyZWF0aW9uIGNhbGxiYWNrXG4gICAgICAgICAgICBjaHJvbWUud2luZG93cy51cGRhdGUodGFiLndpbmRvd0lkLCB7Zm9jdXNlZDogdHJ1ZX0pXG4gICAgICAgIH1cbiAgICB9KVxufVxuXG5leHBvcnQgY29uc3QgZ2V0RnVsbElEc0Zyb21VUkwgPSAodXJsKSA9PiB7XG4gICAgY29uc3QgcGF0aCA9IHVybC5yZXBsYWNlKC9odHRwczpcXC9cXC9bXi9dKnJlKHZlKT9kZGl0LmNvbS8sICcnKVxuICAgIHJldHVybiBnZXRGdWxsSURzRnJvbVBhdGgocGF0aClcbn1cblxuY29uc3QgcmVnZXhfcGMgPSAvXlxcLyh2fHJ8dXNlcilcXC8oW14vXSspXFwvY29tbWVudHNcXC8oW14vXSspXFwvW14vXSooPzpcXC8oW14vPyYjXSspKT8vXG5jb25zdCByZWdleF91c2VyID0gL15cXC8oPzp1c2VyfHl8dSlcXC8oW14vPyYjXSspXFwvPy9cblxuZXhwb3J0IGNvbnN0IGdldEZ1bGxJRHNGcm9tUGF0aCA9IChwYXRoKSA9PiB7XG4gICAgbGV0IHBvc3RJRCA9IHVuZGVmaW5lZCwgY29tbWVudElEID0gdW5kZWZpbmVkLCB1c2VyID0gdW5kZWZpbmVkLCBzdWJyZWRkaXQgPSB1bmRlZmluZWRcbiAgICBjb25zdCBtYXRjaGVzX3BjID0gcGF0aC5tYXRjaChyZWdleF9wYylcbiAgICBjb25zdCBtYXRjaGVzX3VzZXIgPSBwYXRoLm1hdGNoKHJlZ2V4X3VzZXIpXG4gICAgaWYgKG1hdGNoZXNfcGMpIHtcbiAgICAgICAgY29uc3QgdHlwZSA9IG1hdGNoZXNfcGNbMV1cbiAgICAgICAgaWYgKHR5cGUgPT09ICd1c2VyJykge1xuICAgICAgICAgICAgdXNlciA9IG1hdGNoZXNfcGNbMl1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHN1YnJlZGRpdCA9IG1hdGNoZXNfcGNbMl1cbiAgICAgICAgfVxuICAgICAgICBpZiAobWF0Y2hlc19wY1szXSkgcG9zdElEID0gJ3QzXycrbWF0Y2hlc19wY1szXVxuICAgICAgICBpZiAobWF0Y2hlc19wY1s0XSkgY29tbWVudElEID0gJ3QxXycrbWF0Y2hlc19wY1s0XVxuICAgIH0gZWxzZSBpZiAobWF0Y2hlc191c2VyKSB7XG4gICAgICAgIHVzZXIgPSBtYXRjaGVzX3VzZXJbMV1cbiAgICB9XG4gICAgcmV0dXJuIFtwb3N0SUQsIGNvbW1lbnRJRCwgdXNlciwgc3VicmVkZGl0XVxufVxuXG5leHBvcnQgY29uc3QgcmVmb3JtYXRSZWRkaXRUZXh0ID0gKGJvZHkpID0+IHtcbiAgICByZXR1cm4gYm9keS5yZXBsYWNlKC8mYW1wOy9nLCAnJicpLnJlcGxhY2UoLyZndDsvZywgJz4nKS5yZXBsYWNlKC8mbHQ7L2csICc8JylcbiAgICAgICAgLnJlcGxhY2UoL1xccysvZywgJyAnKS5zdWJzdHIoMCwgbWF4UmVkZGl0Q29udGVudExlbmd0aClcbn1cblxuZXhwb3J0IGNvbnN0IGlzUmVtb3ZlZEl0ZW0gPSAoaXRlbSkgPT4ge1xuICAgIGlmIChpdGVtLnJlbW92YWxfcmVhc29uKSB7XG4gICAgICAgIHJldHVybiB0cnVlXG4gICAgfVxuICAgIGlmIChpc0NvbW1lbnQoaXRlbS5uYW1lKSkge1xuICAgICAgICByZXR1cm4gaXNSZW1vdmVkQ29tbWVudChpdGVtKVxuICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBpc1JlbW92ZWRQb3N0KGl0ZW0pXG4gICAgfVxufVxuXG5leHBvcnQgY29uc3QgaXNDb21tZW50ID0gKG5hbWUpID0+IHtcbiAgICByZXR1cm4gbmFtZS5zdWJzdHIoMCwyKSA9PT0gJ3QxJ1xufVxuLy8gQ2hlY2tpbmcgdGhhdCBhdXRob3Igc3RhcnRzIHdpdGggJ1snIGZvciB1c2VycGFnZS1kcml2ZW4gY29udGVudCBpcyBzdWZmaWNpZW50IHRvIHByb3ZlIGNvbW1lbnQgaXMgcmVtb3ZlZC5cbi8vIFRoaXMgd2F5LCB0aGUgY2hlY2sgaXMgaW5kaWZmZXJlbnQgdG8gbGFuZ3VhZ2UsIGluIGNhc2UgQWNjZXB0LUxhbmd1YWdlIGlzIG5vdCBzZXQgdG8gJ2VuJ1xuLy8gQWxzbyBjaGVjayBib2R5IGJlY2F1c2UgY29tbWVudHMgd2hvc2UgYXV0aG9yIGFjY291bnQgaXMgZGVsZXRlZCBtYXkgaGF2ZSB2YWxpZCB1bnJlbW92ZWQgYm9keVxuZXhwb3J0IGNvbnN0IGlzUmVtb3ZlZENvbW1lbnQgPSAoaXRlbSkgPT4ge1xuICAgIHJldHVybiAoaXRlbS5hdXRob3IucmVwbGFjZSgvXFxcXC9nLCAnJylbMF0gPT09ICdbJ1xuICAgICAgICAmJiAgICBpdGVtLmJvZHkucmVwbGFjZSgvXFxcXC9nLCAnJylbMF0gPT09ICdbJylcbn1cbmV4cG9ydCBjb25zdCBpc1VzZXJEZWxldGVkQ29tbWVudCA9IChpdGVtKSA9PiB7XG4gICAgcmV0dXJuIChpdGVtLmJvZHkucmVwbGFjZSgvXFxcXC9nLCAnJykgPT09ICdbZGVsZXRlZF0nICYmXG4gICAgICAgICAgICBpdGVtLmF1dGhvci5yZXBsYWNlKC9cXFxcL2csICcnKSA9PT0gJ1tkZWxldGVkXScpXG59XG5leHBvcnQgY29uc3QgaXNVc2VyRGVsZXRlZFBvc3QgPSAoaXRlbSkgPT4ge1xuICAgIHJldHVybiAoISBpdGVtLmlzX3JvYm90X2luZGV4YWJsZSkgJiYgaXRlbS5hdXRob3IucmVwbGFjZSgvXFxcXC9nLCAnJykgPT09ICdbZGVsZXRlZF0nXG59XG5leHBvcnQgY29uc3QgaXNVc2VyRGVsZXRlZEl0ZW0gPSAoaXRlbSkgPT4ge1xuICAgIGlmIChpc0NvbW1lbnQoaXRlbS5uYW1lKSkge1xuICAgICAgICByZXR1cm4gaXNVc2VyRGVsZXRlZENvbW1lbnQoaXRlbSlcbiAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gaXNVc2VyRGVsZXRlZFBvc3QoaXRlbSlcbiAgICB9XG59XG5leHBvcnQgY29uc3QgaXNSZW1vdmVkUG9zdCA9IChpdGVtKSA9PiB7XG4gICAgcmV0dXJuICEgaXRlbS5pc19yb2JvdF9pbmRleGFibGVcbn1cblxuZXhwb3J0IGNvbnN0IHRyaW1EaWN0X2J5X251bWJlclZhbHVlZEF0dHJpYnV0ZSA9IChkaWN0LCBtYXhOdW1JdGVtcywgbnVtYmVyVmFsdWVkQXR0cmlidXRlKSA9PiB7XG4gICAgY29uc3QgYXJyYXkgPSBzb3J0RGljdF9ieV9udW1iZXJWYWx1ZWRBdHRyaWJ1dGUoZGljdCwgbnVtYmVyVmFsdWVkQXR0cmlidXRlKVxuXG4gICAgY29uc3Qgc2hvcnRlbmVkQXJyYXkgPSBhcnJheS5zbGljZSgwLCBtYXhOdW1JdGVtcylcbiAgICBjb25zdCBuZXdEaWN0ID0ge31cbiAgICBzaG9ydGVuZWRBcnJheS5mb3JFYWNoKGl0ZW0gPT4ge1xuICAgICAgICBuZXdEaWN0W2l0ZW1bMF1dID0gaXRlbVsxXVxuICAgIH0pXG4gICAgcmV0dXJuIG5ld0RpY3Rcbn1cblxuZXhwb3J0IGNvbnN0IHNvcnREaWN0X2J5X251bWJlclZhbHVlZEF0dHJpYnV0ZSA9IChkaWN0LCBudW1iZXJWYWx1ZWRBdHRyaWJ1dGUpID0+IHtcbiAgICBsZXQgYXJyYXkgPSBPYmplY3Qua2V5cyhkaWN0KS5tYXAoa2V5ID0+IHtcbiAgICAgICAgcmV0dXJuIFtrZXksIGRpY3Rba2V5XV1cbiAgICB9KVxuICAgIGFycmF5LnNvcnQoKGEsIGIpID0+IHtcbiAgICAgICAgcmV0dXJuIGJbMV1bbnVtYmVyVmFsdWVkQXR0cmlidXRlXSAtIGFbMV1bbnVtYmVyVmFsdWVkQXR0cmlidXRlXVxuICAgIH0pXG4gICAgcmV0dXJuIGFycmF5XG59XG5cbmV4cG9ydCBjbGFzcyBJdGVtRm9yU3RvcmFnZSB7XG4gICAgY29uc3RydWN0b3IoY3JlYXRlZF91dGMsIHVuc2Vlbikge1xuICAgICAgICB0aGlzLmMgPSBjcmVhdGVkX3V0Y1xuICAgICAgICB0aGlzLnUgPSB1bnNlZW5cbiAgICB9XG4gICAgZ2V0Q3JlYXRlZFVUQygpIHsgcmV0dXJuIHRoaXMuYyB9XG4gICAgZ2V0VW5zZWVuKCkgeyByZXR1cm4gdGhpcy51IH1cbn1cblxuZXhwb3J0IGNsYXNzIENoYW5nZUZvclN0b3JhZ2Uge1xuICAgIGNvbnN0cnVjdG9yKHsgaWQgPSBudWxsLCBvYnNlcnZlZF91dGMgPSBudWxsLCBjaGFuZ2VfdHlwZSA9IG51bGwsIHNlZW5fY291bnQgPSBudWxsLCBvYmplY3QgPSBudWxsIH0pIHtcbiAgICAgICAgaWYgKG9iamVjdCkge1xuICAgICAgICAgICAgdGhpcy5pID0gb2JqZWN0LmlcbiAgICAgICAgICAgIHRoaXMubyA9IG9iamVjdC5vXG4gICAgICAgICAgICB0aGlzLmcgPSBvYmplY3QuZ1xuICAgICAgICAgICAgdGhpcy5uID0gb2JqZWN0Lm5cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuaSA9IGlkXG4gICAgICAgICAgICB0aGlzLm8gPSBvYnNlcnZlZF91dGNcbiAgICAgICAgICAgIHRoaXMuZyA9IGNoYW5nZV90eXBlXG4gICAgICAgICAgICB0aGlzLm4gPSBzZWVuX2NvdW50XG4gICAgICAgIH1cbiAgICB9XG4gICAgZ2V0SUQoKSB7IHJldHVybiB0aGlzLmkgfVxuICAgIGdldE9ic2VydmVkVVRDKCkgeyByZXR1cm4gdGhpcy5vIH1cbiAgICBnZXRDaGFuZ2VUeXBlSW50ZXJuYWwoKSB7IHJldHVybiB0aGlzLmcgfVxuICAgIGdldENoYW5nZVR5cGUoKSB7XG4gICAgICAgIHN3aXRjaCh0aGlzLmcpIHtcbiAgICAgICAgICAgIGNhc2UgUkVNT1ZFRDogcmV0dXJuICdtb2QgcmVtb3ZlZCdcbiAgICAgICAgICAgIGNhc2UgREVMRVRFRDogcmV0dXJuICd1c2VyIGRlbGV0ZWQnXG4gICAgICAgICAgICBjYXNlIEFQUFJPVkVEOiByZXR1cm4gJ2FwcHJvdmVkJ1xuICAgICAgICAgICAgY2FzZSBMT0NLRUQ6IHJldHVybiAnbG9ja2VkJ1xuICAgICAgICAgICAgY2FzZSBVTkxPQ0tFRDogcmV0dXJuICd1bmxvY2tlZCdcbiAgICAgICAgICAgIGNhc2UgRURJVEVEOiByZXR1cm4gJ2VkaXRlZCdcbiAgICAgICAgfVxuICAgIH1cbiAgICBnZXRTZWVuQ291bnQoKSB7IHJldHVybiB0aGlzLm4gfVxufVxuXG5leHBvcnQgY2xhc3MgTG9jYWxTdG9yYWdlSXRlbSB7XG4gICAgY29uc3RydWN0b3IoeyBpdGVtID0gbnVsbCwgb2JzZXJ2ZWRfdXRjID0gbnVsbCwgb2JqZWN0ID0gbnVsbCB9KSB7XG4gICAgICAgIGlmIChvYmplY3QpIHtcbiAgICAgICAgICAgIHRoaXMudCA9IG9iamVjdC50XG4gICAgICAgICAgICB0aGlzLm8gPSBvYmplY3Qub1xuICAgICAgICAgICAgdGhpcy5jID0gb2JqZWN0LmNcbiAgICAgICAgICAgIHRoaXMubiA9IG9iamVjdC5uIHx8IDAgLy8gc2Vlbl9jb3VudCwgd2hpY2ggaW5jcmVtZW50cyB3aGVuIHRoZSBzYW1lIHN0YXR1cyBpcyBvYnNlcnZlZFxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgbGV0IHRleHQgPSAnJ1xuICAgICAgICAgICAgaWYgKGlzQ29tbWVudChpdGVtLm5hbWUpKSB7XG4gICAgICAgICAgICAgICAgdGV4dCA9IHJlZm9ybWF0UmVkZGl0VGV4dChpdGVtLmJvZHkpXG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHRleHQgPSBpdGVtLnRpdGxlXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLnQgPSB0ZXh0XG4gICAgICAgICAgICB0aGlzLm8gPSBvYnNlcnZlZF91dGNcbiAgICAgICAgICAgIHRoaXMuYyA9IGl0ZW0uY3JlYXRlZF91dGNcbiAgICAgICAgICAgIHRoaXMubiA9IDBcbiAgICAgICAgfVxuICAgIH1cbiAgICBzZXRUZXh0KHRleHQpIHt0aGlzLnQgPSByZWZvcm1hdFJlZGRpdFRleHQodGV4dCl9XG4gICAgZ2V0VGV4dCgpIHsgcmV0dXJuIHRoaXMudCB9XG4gICAgZ2V0T2JzZXJ2ZWRVVEMoKSB7IHJldHVybiB0aGlzLm8gfVxuICAgIGdldENyZWF0ZWRVVEMoKSB7IHJldHVybiB0aGlzLmMgfVxuICAgIHJlc2V0U2VlbkNvdW50KCkgeyB0aGlzLm4gPSAwIH1cbiAgICBnZXRTZWVuQ291bnQoKSB7IHJldHVybiB0aGlzLm4gfVxuICAgIGluY3JlbWVudFNlZW5Db3VudCgpIHtcbiAgICAgICAgaWYgKHR5cGVvZiB0aGlzLm4gPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICB0aGlzLm4gPSAwXG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5uICs9IDFcbiAgICAgICAgcmV0dXJuIHRoaXMublxuICAgIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHNldEFsYXJtKHBlcmlvZEluTWludXRlcykge1xuICAgIGNocm9tZS5hbGFybXMuY2xlYXIoQUxBUk1fTkFNRSlcbiAgICBjaHJvbWUuYWxhcm1zLmNyZWF0ZShBTEFSTV9OQU1FLCB7ZGVsYXlJbk1pbnV0ZXM6IDEsIHBlcmlvZEluTWludXRlczogcGVyaW9kSW5NaW51dGVzfSlcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGFscGhhTG93ZXJTb3J0IChhLCBiKSB7XG4gICAgdmFyIHRleHRBID0gYS50b0xvd2VyQ2FzZSgpXG4gICAgdmFyIHRleHRCID0gYi50b0xvd2VyQ2FzZSgpXG5cbiAgICBpZiAodGV4dEEgPCB0ZXh0QikgcmV0dXJuIC0xXG4gICAgaWYgKHRleHRBID4gdGV4dEIpIHJldHVybiAxXG4gICAgcmV0dXJuIDBcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdvVG9PcHRpb25zICgpIHtcbiAgICBpZiAoY2hyb21lLnJ1bnRpbWUub3Blbk9wdGlvbnNQYWdlKSB7XG4gICAgICAgIGNocm9tZS5ydW50aW1lLm9wZW5PcHRpb25zUGFnZSgpXG4gICAgICAgIHdpbmRvdy5jbG9zZSgpIC8vY2xvc2VzIHRoZSBwb3B1cCB3aGljaCBwZXJzaXN0cyBpbiBGRlxuICAgIH0gZWxzZSB7XG4gICAgICAgIHdpbmRvdy5vcGVuKGNocm9tZS5ydW50aW1lLmdldFVSTCgnL3NyYy9vcHRpb25zLmh0bWwnKSlcbiAgICB9XG59XG5cblxuZXhwb3J0IGZ1bmN0aW9uIHNob3dFcnJvcihtZXNzYWdlLCBzZWxlY3Rvcikge1xuICAgICQoJzxkaXYgY2xhc3M9XCJyci1lcnJvclwiPicrbWVzc2FnZSsnPC9kaXY+JykuYXBwZW5kVG8oc2VsZWN0b3IpLmRlbGF5KDI0MDApLmZhZGVUbyg0MDAsIDAsIGZ1bmN0aW9uKCkgeyQodGhpcykucmVtb3ZlKCl9KVxufVxuXG4vL25vaW5zcGVjdGlvbiBKU1VudXNlZExvY2FsU3ltYm9sc1xuZXhwb3J0IGZ1bmN0aW9uIHBwcmludChvYmopIHtcbiAgICBjb25zb2xlLmxvZyhKU09OLnN0cmluZ2lmeShvYmosIG51bGwsICdcXHQnKSlcbn1cblxuXG5leHBvcnQgY29uc3QgZ2V0UHJldHR5VGltZUxlbmd0aCA9IChzZWNvbmRzKSA9PiB7XG4gICAgY29uc3QgdGhyZXNob2xkcyA9IFtbNjAsICdzZWNvbmQnLCAnc2Vjb25kcyddLCBbNjAsICdtaW51dGUnLCAnbWludXRlcyddLCBbMjQsICdob3VyJywgJ2hvdXJzJ10sIFs3LCAnZGF5JywgJ2RheXMnXSxcbiAgICBbMzY1LzEyLzcsICd3ZWVrJywgJ3dlZWtzJ10sIFsxMiwgJ21vbnRoJywgJ21vbnRocyddLCBbMTAsICd5ZWFyJywgJ3llYXJzJ10sXG4gICAgWzEwLCAnZGVjYWRlJywgJ2RlY2FkZXMnXSwgWzEwLCAnY2VudHVyeScsICdjZW50dXJpZXMnXSwgWzEwLCAnbWlsbGVuaXVtJywgJ21pbGxlbmlhJ11dXG4gICAgaWYgKHNlY29uZHMgPCA2MCkgcmV0dXJuIHNlY29uZHMgKyAnIHNlY29uZHMnXG4gICAgbGV0IHRpbWUgPSBzZWNvbmRzXG4gICAgZm9yICh2YXIgaT0wOyBpPHRocmVzaG9sZHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgbGV0IGRpdmlzb3IgPSB0aHJlc2hvbGRzW2ldWzBdXG4gICAgICAgIGxldCB0ZXh0ID0gdGhyZXNob2xkc1tpXVsxXVxuICAgICAgICBsZXQgdGV4dFBsdXJhbCA9IHRocmVzaG9sZHNbaV1bMl1cbiAgICAgICAgaWYgKHRpbWUgPCBkaXZpc29yKSB7XG4gICAgICAgICAgICBsZXQgZXh0cmEgPSAodGltZSAtIE1hdGguZmxvb3IodGltZSkpXG4gICAgICAgICAgICBsZXQgcHJldlVuaXRUaW1lID0gTWF0aC5yb3VuZChleHRyYSp0aHJlc2hvbGRzW2ktMV1bMF0pXG4gICAgICAgICAgICBpZiAodGhyZXNob2xkc1tpLTFdWzBdID09PSBwcmV2VW5pdFRpbWUpIHtcbiAgICAgICAgICAgICAgICB0aW1lICs9IDFcbiAgICAgICAgICAgICAgICBwcmV2VW5pdFRpbWUgPSAwXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoTWF0aC5mbG9vcih0aW1lKSA+IDEgfHwgTWF0aC5mbG9vcih0aW1lKSA9PSAwKSB7XG4gICAgICAgICAgICAgICAgdGV4dCA9IHRleHRQbHVyYWxcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChpID4gMSAmJiBwcmV2VW5pdFRpbWUgPiAwKSB7XG4gICAgICAgICAgICAgICAgbGV0IHJlbWFpblRleHQgPSB0aHJlc2hvbGRzW2ktMV1bMV1cbiAgICAgICAgICAgICAgICBpZiAocHJldlVuaXRUaW1lID4gMSkge1xuICAgICAgICAgICAgICAgICAgICByZW1haW5UZXh0ID0gdGhyZXNob2xkc1tpLTFdWzJdXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHRleHQgKz0gJywgJyArIFN0cmluZyhwcmV2VW5pdFRpbWUpICsgJyAnICsgcmVtYWluVGV4dFxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIFN0cmluZyhNYXRoLmZsb29yKHRpbWUpKSArICcgJyArIHRleHRcbiAgICAgICAgfVxuICAgICAgICB0aW1lID0gdGltZSAvIGRpdmlzb3JcbiAgICB9XG59XG5cbmV4cG9ydCBjb25zdCBnZXRQcmV0dHlEYXRlID0gKGNyZWF0ZWRVVEMpID0+IHtcbiAgICBjb25zdCBzZWNvbmRzID0gTWF0aC5mbG9vcigobmV3IERhdGUpLmdldFRpbWUoKS8xMDAwKS1jcmVhdGVkVVRDXG4gICAgcmV0dXJuIGdldFByZXR0eVRpbWVMZW5ndGgoc2Vjb25kcykgKyAnIGFnbydcbn1cblxuZXhwb3J0IGNvbnN0IGNyZWF0ZU5vdGlmaWNhdGlvbiA9ICh7bm90aWZpY2F0aW9uSWQsIHRpdGxlLCBtZXNzYWdlfSkgPT4ge1xuICAgIGlmIChsb2NhdGlvbi5wcm90b2NvbC5tYXRjaCgvXmh0dHAvKSkge1xuICAgICAgICBjaHJvbWUucnVudGltZS5zZW5kTWVzc2FnZSh7XG4gICAgICAgICAgICBhY3Rpb246ICdjcmVhdGUtbm90aWZpY2F0aW9uJyxcbiAgICAgICAgICAgIG9wdGlvbnM6IHtub3RpZmljYXRpb25JZCwgdGl0bGUsIG1lc3NhZ2V9XG4gICAgICAgIH0pXG4gICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKF9fQlVJTFRfRk9SX18gPT09ICdjaHJvbWUnKSB7XG4gICAgICAgICAgICByZWdpc3RyYXRpb24uc2hvd05vdGlmaWNhdGlvbih0aXRsZSwge1xuICAgICAgICAgICAgICAgIGJvZHk6IG1lc3NhZ2UsXG4gICAgICAgICAgICAgICAgZGF0YTogbm90aWZpY2F0aW9uSWQsXG4gICAgICAgICAgICAgICAgaWNvbjogJy9pY29ucy8xMjgucG5nJyxcbiAgICAgICAgICAgICAgICBtZXNzYWdlXG4gICAgICAgICAgICB9KVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgLy8gbm90aWZpY2F0aW9ucy5jcmVhdGUgZG9lcyBub3Qgd29yayBpbiBjaHJvbWUncyBtYW5pZmVzdCB2Mywgc29tZXRoaW5nIHdyb25nIHdpdGggcmVhZGluZyBpbWFnZSBkYXRhXG4gICAgICAgICAgICAvLyBodHRwczovL3N0YWNrb3ZlcmZsb3cuY29tL3F1ZXN0aW9ucy82NTU3MDMzMi9nb29nbGUtY2hyb21lLWV4dGVuc2lvbnMtdjMtZXJyb3ItaW4tZXZlbnQtaGFuZGxlci1yZWZlcmVuY2VlcnJvci1pbWFnZS1pcy1uXG4gICAgICAgICAgICAvLyBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvY2hyb21pdW0vaXNzdWVzL2RldGFpbD9pZD0xMTY4NDc3JnE9aW1hZ2UlMjBpcyUyMG5vdCUyMGRlZmluZWQlMjBub3RpZmljYXRpb24lMjBtYW5pZmVzdCUyMHYzJmNhbj0yXG4gICAgICAgICAgICBjaHJvbWUubm90aWZpY2F0aW9ucy5jcmVhdGUobm90aWZpY2F0aW9uSWQsXG4gICAgICAgICAgICAgICAge3R5cGU6ICdiYXNpYycsXG4gICAgICAgICAgICAgICAgIGljb25Vcmw6ICcvaWNvbnMvMTI4LnBuZycsXG4gICAgICAgICAgICAgICAgIHRpdGxlLCBtZXNzYWdlfSlcbiAgICAgICAgfVxuICAgIH1cbn1cblxuZXhwb3J0IGNvbnN0IHVwZGF0ZUJhZGdlVW5zZWVuQ291bnQgPSAoKSA9PiB7XG4gICAgaWYgKGxvY2F0aW9uLnByb3RvY29sLm1hdGNoKC9eaHR0cC8pKSB7XG4gICAgICAgIGNocm9tZS5ydW50aW1lLnNlbmRNZXNzYWdlKHtcbiAgICAgICAgICAgIGFjdGlvbjogJ3VwZGF0ZS1iYWRnZSdcbiAgICAgICAgfSlcbiAgICB9IGVsc2Uge1xuICAgICAgICBnZXRTdWJzY3JpYmVkVXNlcnNfd2l0aFVuc2VlbklEcyh1c2Vyc1Vuc2VlbklEcyA9PiB7XG4gICAgICAgICAgICBsZXQgdG90YWwgPSAwXG4gICAgICAgICAgICBPYmplY3QudmFsdWVzKHVzZXJzVW5zZWVuSURzKS5mb3JFYWNoKGlkcyA9PiB7XG4gICAgICAgICAgICAgICAgdG90YWwgKz0gaWRzLmxlbmd0aFxuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIGxldCB0ZXh0ID0gdG90YWwudG9TdHJpbmcoKVxuICAgICAgICAgICAgaWYgKHRvdGFsID09IDApIHRleHQgPSAnJ1xuICAgICAgICAgICAgY2hyb21lW0FDVElPTl9BUEldLnNldEJhZGdlQmFja2dyb3VuZENvbG9yKHtjb2xvcjogXCJyZWRcIn0pXG4gICAgICAgICAgICBjaHJvbWVbQUNUSU9OX0FQSV0uc2V0QmFkZ2VUZXh0KHt0ZXh0OiB0ZXh0fSlcbiAgICAgICAgfSlcbiAgICB9XG59XG4iLCJpbXBvcnQge2xvb2t1cEl0ZW1zQnlJRCwgbG9va3VwSXRlbXNCeVVzZXIsIGdldEF1dGh9IGZyb20gJy4vcmVxdWVzdHMuanMnXG5pbXBvcnQge1JFTU9WRUQsIERFTEVURUQsIEFQUFJPVkVELCBMT0NLRUQsIFVOTE9DS0VELCBFRElURUQsXG4gICAgICAgIGFkZExvY2FsU3RvcmFnZUl0ZW1zLCBnZXRMb2NhbFN0b3JhZ2VJdGVtcyxcbiAgICAgICAgTUFYX1NZTkNfU1RPUkFHRV9JVEVNU19QRVJfT0JKRUNULCBNQVhfU1lOQ19TVE9SQUdFX0NIQU5HRVMsIFNFRU5fQ09VTlRfREVGQVVMVCxcbiAgICAgICAgZ2V0T2JqZWN0TmFtZXNGb3JUaGluZyB9IGZyb20gJy4vc3RvcmFnZS5qcydcbmltcG9ydCB7Y3JlYXRlTm90aWZpY2F0aW9uLCB1cGRhdGVCYWRnZVVuc2VlbkNvdW50LCB0cmltRGljdF9ieV9udW1iZXJWYWx1ZWRBdHRyaWJ1dGUsXG4gICAgICAgIGlzVXNlckRlbGV0ZWRJdGVtLCBpc1JlbW92ZWRJdGVtLFxuICAgICAgICBJdGVtRm9yU3RvcmFnZSwgTG9jYWxTdG9yYWdlSXRlbSwgQ2hhbmdlRm9yU3RvcmFnZX0gZnJvbSAnLi9jb21tb24uanMnXG5pbXBvcnQgYnJvd3NlciBmcm9tICd3ZWJleHRlbnNpb24tcG9seWZpbGwnXG5cblxuY29uc3QgU1VCU0NSSUJFRF9GUk9NX1JFRERJVCA9IDBcbmNvbnN0IFNVQlNDUklCRURfRlJPTV9SRVZFRERJVCA9IDFcbmNvbnN0IFNVQlNDUklCRURfRlJPTV9OQSA9IDJcblxuY29uc3QgVEFSR0VUX1NFRU5fQ09VTlRfRk9SX1BSRVZJT1VTTFlfUkVDT1JERURfQ0hBTkdFID0gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogNjApKzYwXG5cbmV4cG9ydCBjb25zdCBzZXRDdXJyZW50U3RhdGVGb3JJZCA9IChpZCwgc3Vic2NyaWJlZEZyb21VUkwpID0+IHtcbiAgICBsZXQgc3Vic2NyaWJlZEZyb20gPSBTVUJTQ1JJQkVEX0ZST01fUkVERElUXG4gICAgaWYgKHN1YnNjcmliZWRGcm9tVVJMLm1hdGNoKC9eaHR0cHM6XFwvXFwvd3d3LnJldmVkZGl0LmNvbS8pKSB7XG4gICAgICAgIHN1YnNjcmliZWRGcm9tID0gU1VCU0NSSUJFRF9GUk9NX1JFVkVERElUXG4gICAgfVxuICAgIHJldHVybiBjaHJvbWUuc3RvcmFnZS5zeW5jLmdldChudWxsLCBmdW5jdGlvbiAoc3RvcmFnZSkge1xuICAgICAgICBnZXRBdXRoKClcbiAgICAgICAgLnRoZW4oKGF1dGgpID0+IHtcbiAgICAgICAgICAgIHJldHVybiBjaGVja0ZvckNoYW5nZXNfdGhpbmdfYnlJZChbaWRdLCAnb3RoZXInLCBmYWxzZSwgYXV0aCwgc3RvcmFnZSwgc3Vic2NyaWJlZEZyb20sIHt9KVxuICAgICAgICB9KVxuICAgIH0pXG59XG5cbmNvbnN0IE1JTl9RVUFSQU5USU5FRF9DSEVDS19JTlRFUlZBTF9JTl9TRUNPTkRTID0gMjAqKDYwKjYwKjI0KVxuXG5leHBvcnQgY29uc3QgY2hlY2tGb3JDaGFuZ2VzID0gKCkgPT4ge1xuICAgIGNocm9tZS5zdG9yYWdlLnN5bmMuZ2V0KG51bGwsIGZ1bmN0aW9uIChzdG9yYWdlKSB7XG4gICAgICAgIHZhciB1c2VycyA9IE9iamVjdC5rZXlzKHN0b3JhZ2UudXNlcl9zdWJzY3JpcHRpb25zKVxuICAgICAgICB2YXIgb3RoZXIgPSBPYmplY3Qua2V5cyhzdG9yYWdlLm90aGVyX3N1YnNjcmlwdGlvbnMpXG4gICAgICAgIGlmICh1c2Vycy5sZW5ndGggfHwgb3RoZXIubGVuZ3RoKSB7XG4gICAgICAgICAgICBjb25zdCBub3cgPSBNYXRoLmZsb29yKG5ldyBEYXRlKCkvMTAwMClcbiAgICAgICAgICAgIC8vIGNoZWNrIGZvciBxdWFyYW50aW5lZCBjb250ZW50IG9uY2UgaW4gYXdoaWxlIGFuZCBlbmFibGUgbW9uaXRvcl9xdWFyYW50aW5lZCBpZiBzb21lIGlzIGZvdW5kXG4gICAgICAgICAgICAvLyBiZWNhdXNlIHVzZXJzIG1heSBub3Qga25vdyB0byBlbmFibGUgdGhpcyBvcHRpb25cbiAgICAgICAgICAgIC8vIHRoZSBvcHRpb24gaXMgb2ZmIGJ5IGRlZmF1bHQgYmVjYXVzZSBpdCBjYW4gYXBwZWFyIHRvIGNhdXNlIGFuIG9jY2FzaW9uYWwgbG9nb3V0XG4gICAgICAgICAgICBpZiAoISBzdG9yYWdlLmxhc3RfY2hlY2tfcXVhcmFudGluZWRcbiAgICAgICAgICAgICAgICB8fCAobm93IC0gc3RvcmFnZS5sYXN0X2NoZWNrX3F1YXJhbnRpbmVkKSA+IE1JTl9RVUFSQU5USU5FRF9DSEVDS19JTlRFUlZBTF9JTl9TRUNPTkRTICkge1xuICAgICAgICAgICAgICAgIHN0b3JhZ2UudGVtcFZhcl9tb25pdG9yX3F1YXJhbnRpbmVkID0gdHJ1ZVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZ2V0QXV0aChzdG9yYWdlLnRlbXBWYXJfbW9uaXRvcl9xdWFyYW50aW5lZClcbiAgICAgICAgICAgIC50aGVuKChhdXRoKSA9PiB7XG4gICAgICAgICAgICAgICAgY2hlY2tGb3JDaGFuZ2VzX290aGVyKGF1dGgsIHN0b3JhZ2UpXG4gICAgICAgICAgICAgICAgcmV0dXJuIGNoZWNrRm9yQ2hhbmdlc191c2Vycyh1c2VycywgYXV0aCwgc3RvcmFnZSlcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAudGhlbigoKSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3QgbmV3U3RvcmFnZSA9IHtsYXN0X2NoZWNrOiBub3d9XG4gICAgICAgICAgICAgICAgaWYgKHN0b3JhZ2UudGVtcFZhcl9tb25pdG9yX3F1YXJhbnRpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgIG5ld1N0b3JhZ2UubGFzdF9jaGVja19xdWFyYW50aW5lZCA9IG5vd1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoc3RvcmFnZS50ZW1wVmFyX3F1YXJhbnRpbmVkX2NvbnRlbnRfZm91bmQpIHtcbiAgICAgICAgICAgICAgICAgICAgbmV3U3RvcmFnZS5vcHRpb25zID0gc3RvcmFnZS5vcHRpb25zXG4gICAgICAgICAgICAgICAgICAgIG5ld1N0b3JhZ2Uub3B0aW9ucy5tb25pdG9yX3F1YXJhbnRpbmVkID0gdHJ1ZVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjaHJvbWUuc3RvcmFnZS5zeW5jLnNldChuZXdTdG9yYWdlKVxuICAgICAgICAgICAgfSlcbiAgICAgICAgfVxuICAgIH0pXG59XG5cbmNvbnN0IGNoZWNrRm9yQ2hhbmdlc191c2VycyA9IGFzeW5jICh1c2VycywgYXV0aCwgc3RvcmFnZSkgPT4ge1xuICAgIGlmICh1c2Vycy5sZW5ndGgpIHtcbiAgICAgICAgY29uc3QgdXNlciA9IHVzZXJzWzBdXG4gICAgICAgIHJldHVybiBsb29rdXBJdGVtc0J5VXNlcih1c2VyLCAnJywgJ25ldycsICcnLCBzdG9yYWdlLm9wdGlvbnMubW9uaXRvcl9xdWFyYW50aW5lZCwgc3RvcmFnZS50ZW1wVmFyX21vbml0b3JfcXVhcmFudGluZWQsIGF1dGgpXG4gICAgICAgIC50aGVuKGl0ZW1zID0+IHtcbiAgICAgICAgICAgIGlmICghIGl0ZW1zKSByZXR1cm4gLy8gaGFuZGxlIGV4cGVjdGVkIGVycm9yc1xuICAgICAgICAgICAgdmFyIGlkcyA9IFtdXG4gICAgICAgICAgICBsZXQgcXVhcmFudGluZWRfc3VicmVkZGl0cyA9IG5ldyBTZXQoKVxuICAgICAgICAgICAgY29uc3QgaXRlbUxvb2t1cCA9IHt9XG4gICAgICAgICAgICBpZiAoaXRlbXMudXNlciAmJiBpdGVtcy51c2VyLml0ZW1zKSB7IC8vIGZvcm1hdCBmcm9tIGNyZWQyLnJldmVkZGl0LmNvbVxuICAgICAgICAgICAgICAgIGl0ZW1zID0gaXRlbXMudXNlci5pdGVtc1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaXRlbXMuZm9yRWFjaChpdGVtID0+IHtcbiAgICAgICAgICAgICAgICBpZiAoaXRlbS5kYXRhICYmIGl0ZW0uZGF0YS5uYW1lKSB7IC8vIGZvcm1hdCBmcm9tIHJlZGRpdFxuICAgICAgICAgICAgICAgICAgICBpdGVtID0gaXRlbS5kYXRhXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlkcy5wdXNoKGl0ZW0ubmFtZSlcbiAgICAgICAgICAgICAgICBpdGVtTG9va3VwW2l0ZW0ubmFtZV0gPSBpdGVtXG4gICAgICAgICAgICAgICAgaWYgKGl0ZW0ucXVhcmFudGluZSkge1xuICAgICAgICAgICAgICAgICAgICBxdWFyYW50aW5lZF9zdWJyZWRkaXRzLmFkZChpdGVtLnN1YnJlZGRpdClcbiAgICAgICAgICAgICAgICAgICAgc3RvcmFnZS50ZW1wVmFyX3F1YXJhbnRpbmVkX2NvbnRlbnRfZm91bmQgPSB0cnVlXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIHJldHVybiBjaGVja0ZvckNoYW5nZXNfdGhpbmdfYnlJZChpZHMsIHVzZXIsIHRydWUsIGF1dGgsIHN0b3JhZ2UsIFNVQlNDUklCRURfRlJPTV9OQSwgaXRlbUxvb2t1cCwgQXJyYXkuZnJvbShxdWFyYW50aW5lZF9zdWJyZWRkaXRzKSlcbiAgICAgICAgICAgIC50aGVuKCgpID0+IGNoZWNrRm9yQ2hhbmdlc191c2Vycyh1c2Vycy5zbGljZSgxKSwgYXV0aCwgc3RvcmFnZSkpXG4gICAgICAgIH0pXG4gICAgfVxufVxuXG5mdW5jdGlvbiBjaGVja0ZvckNoYW5nZXNfb3RoZXIoYXV0aCwgc3RvcmFnZSkge1xuICAgIGNvbnN0IGlkcyA9IE9iamVjdC5rZXlzKHN0b3JhZ2Uub3RoZXJfc3Vic2NyaXB0aW9ucylcbiAgICBpZiAoaWRzLmxlbmd0aCkge1xuICAgICAgICBjaGVja0ZvckNoYW5nZXNfdGhpbmdfYnlJZChpZHMsICdvdGhlcicsIGZhbHNlLCBhdXRoLCBzdG9yYWdlLCBTVUJTQ1JJQkVEX0ZST01fTkEpXG4gICAgfVxufVxuXG5jb25zdCBjaGVja0ZvckNoYW5nZXNfdGhpbmdfYnlJZCA9IGFzeW5jIChpZHMsIHRoaW5nLCBpc1VzZXIsIGF1dGgsIHN0b3JhZ2UsIHN1YnNjcmliZWRGcm9tLCBpdGVtTG9va3VwID0ge30sIHF1YXJhbnRpbmVkX3N1YnJlZGRpdHMgPSBbXSkgPT4ge1xuICAgIGxldCBwcm9taXNlXG4gICAgY29uc3QgbW9uaXRvcl9xdWFyYW50aW5lZCA9IHN0b3JhZ2Uub3B0aW9ucy5tb25pdG9yX3F1YXJhbnRpbmVkXG4gICAgaWYgKGxvY2F0aW9uLnByb3RvY29sLm1hdGNoKC9eaHR0cC8pKSB7XG4gICAgICAgIC8vIHRoaXMgY29uZGl0aW9uIGlzIGZvciB3aGVuIHRoZSBjb2RlIGlzIGFjdGl2YXRlZCB2aWEgYSBjb250ZW50IHNjcmlwdCAoZS5nLiB0aGUgc3Vic2NyaWJlIGJ1dHRvbikgYW5kIGJyb3dzZXIuY29va2llcyBpcyB1bmF2YWlsYWJsZVxuICAgICAgICBwcm9taXNlID0gYnJvd3Nlci5ydW50aW1lLnNlbmRNZXNzYWdlKHthY3Rpb246ICdnZXQtcmVkZGl0LWl0ZW1zLWJ5LWlkJywgaWRzLCBtb25pdG9yX3F1YXJhbnRpbmVkfSlcbiAgICB9IGVsc2Uge1xuICAgICAgICBwcm9taXNlID0gbG9va3VwSXRlbXNCeUlEKGlkcywgYXV0aCwgbW9uaXRvcl9xdWFyYW50aW5lZCwgc3RvcmFnZS50ZW1wVmFyX21vbml0b3JfcXVhcmFudGluZWQsIHF1YXJhbnRpbmVkX3N1YnJlZGRpdHMpXG4gICAgfVxuICAgIHJldHVybiBwcm9taXNlXG4gICAgLnRoZW4ocmVzdWx0ID0+IHtcbiAgICAgICAgaWYgKCEgcmVzdWx0KSByZXR1cm4gLy8gaGFuZGxlIGV4cGVjdGVkIGVycm9yc1xuICAgICAgICBjb25zdCBpdGVtcyA9IEFycmF5LmlzQXJyYXkocmVzdWx0KSA/IHJlc3VsdCA6IHJlc3VsdC5pdGVtc1xuICAgICAgICBpZiAoISBpdGVtcykgcmV0dXJuIC8vIGhhbmRsZSBleHBlY3RlZCBlcnJvcnMgZnJvbSBvYmpcbiAgICAgICAgY29uc3QgcmVtb3ZhbF9zdGF0dXMgPSBzdG9yYWdlLm9wdGlvbnMucmVtb3ZhbF9zdGF0dXNcbiAgICAgICAgY29uc3QgbG9ja19zdGF0dXMgPSBzdG9yYWdlLm9wdGlvbnMubG9ja19zdGF0dXNcbiAgICAgICAgY29uc3QgdGFyZ2V0X3NlZW5fY291bnQgPSBzdG9yYWdlLm9wdGlvbnMuc2Vlbl9jb3VudCB8fCBTRUVOX0NPVU5UX0RFRkFVTFRcbiAgICAgICAgY29uc3Qga2V5cyA9IGdldE9iamVjdE5hbWVzRm9yVGhpbmcodGhpbmcsIGlzVXNlcilcblxuICAgICAgICBjb25zdCBrbm93bl9yZW1vdmVkID0gc3RvcmFnZVtrZXlzWydyZW1vdmVkJ11dIHx8IHt9XG4gICAgICAgIGNvbnN0IGtub3duX2FwcHJvdmVkID0gc3RvcmFnZVtrZXlzWydhcHByb3ZlZCddXSB8fCB7fVxuICAgICAgICBjb25zdCBrbm93bl9sb2NrZWQgPSBzdG9yYWdlW2tleXNbJ2xvY2tlZCddXSB8fCB7fVxuICAgICAgICBjb25zdCBrbm93bl91bmxvY2tlZCA9IHN0b3JhZ2Vba2V5c1sndW5sb2NrZWQnXV0gfHwge31cbiAgICAgICAgY29uc3QgY2hhbmdlcyA9IHN0b3JhZ2Vba2V5c1snY2hhbmdlcyddXSB8fCBbXVxuICAgICAgICBpZiAoISBpc1VzZXIpIHtcbiAgICAgICAgICAgIGl0ZW1Mb29rdXAgPSB7fVxuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHJlbW92ZWQgPSBbXSwgYXBwcm92ZWQgPSBbXSwgbG9ja2VkID0gW10sIHVubG9ja2VkID0gW11cbiAgICAgICAgaXRlbXMuZm9yRWFjaChpdGVtV3JhcCA9PiB7XG4gICAgICAgICAgICBjb25zdCBpdGVtID0gaXRlbVdyYXAuZGF0YVxuICAgICAgICAgICAgaWYgKCEgaXNVc2VyKSB7XG4gICAgICAgICAgICAgICAgaXRlbUxvb2t1cFtpdGVtLm5hbWVdID0gaXRlbVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGlzUmVtb3ZlZEl0ZW0oaXRlbSkpIHtcbiAgICAgICAgICAgICAgICByZW1vdmVkLnB1c2goaXRlbS5uYW1lKVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBhcHByb3ZlZC5wdXNoKGl0ZW0ubmFtZSlcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChpdGVtLmxvY2tlZCkge1xuICAgICAgICAgICAgICAgIGxvY2tlZC5wdXNoKGl0ZW0ubmFtZSlcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdW5sb2NrZWQucHVzaChpdGVtLm5hbWUpXG4gICAgICAgICAgICB9XG4gICAgICAgIH0pXG4gICAgICAgIC8vIG1hcmsgaXRlbXMgdGhhdCBkbyBub3QgZXhpc3QgaW4gYXJyYXlzXG4gICAgICAgIC8vIGNoYW5nZSBoYXBwZW5zIGlmOlxuICAgICAgICAvLyAgICAgIHRyYWNraW5nIHJlbW92YWxzICYmIGl0ZW0gaXMgcmVtb3ZlZFxuICAgICAgICAvLyAgICAgIHRyYWNraW5nIHJlbW92YWxzICYmIGl0ZW0gd2FzIGluIHJlbW92ZWQsIG5vdyBpbiBhcHByb3ZlZFxuICAgICAgICBjb25zdCBuZXdMb2NhbFN0b3JhZ2VJdGVtcyA9IHt9XG5cbiAgICAgICAgY29uc3QgY2hhbmdlVHlwZXMgPSBbXVxuICAgICAgICBsZXQgbnVtX2NoYW5nZXMgPSAwXG4gICAgICAgIHJldHVybiBnZXRMb2NhbFN0b3JhZ2VJdGVtcyh0aGluZywgaXNVc2VyKVxuICAgICAgICAudGhlbihleGlzdGluZ0xvY2FsU3RvcmFnZUl0ZW1zID0+IHtcbiAgICAgICAgICAgIGlmIChyZW1vdmFsX3N0YXR1cy50cmFjaykge1xuICAgICAgICAgICAgICAgIG51bV9jaGFuZ2VzICs9IG1hcmtDaGFuZ2VzKHJlbW92ZWQsIFJFTU9WRUQsICdtb2QgcmVtb3ZlZCcsIGtub3duX3JlbW92ZWQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXBwcm92ZWQsIEFQUFJPVkVELCAnYXBwcm92ZWQnLCBrbm93bl9hcHByb3ZlZCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaGFuZ2VzLCBpdGVtTG9va3VwLCByZW1vdmFsX3N0YXR1cy5ub3RpZnksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3TG9jYWxTdG9yYWdlSXRlbXMsIGNoYW5nZVR5cGVzLCBpc1VzZXIsIHN1YnNjcmliZWRGcm9tLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV4aXN0aW5nTG9jYWxTdG9yYWdlSXRlbXMsIHRhcmdldF9zZWVuX2NvdW50KVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGxvY2tfc3RhdHVzLnRyYWNrKSB7XG4gICAgICAgICAgICAgICAgbnVtX2NoYW5nZXMgKz0gbWFya0NoYW5nZXMobG9ja2VkLCBMT0NLRUQsICdsb2NrZWQnLCBrbm93bl9sb2NrZWQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdW5sb2NrZWQsIFVOTE9DS0VELCAndW5sb2NrZWQnLCBrbm93bl91bmxvY2tlZCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaGFuZ2VzLCBpdGVtTG9va3VwLCBsb2NrX3N0YXR1cy5ub3RpZnksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3TG9jYWxTdG9yYWdlSXRlbXMsIGNoYW5nZVR5cGVzLCBpc1VzZXIsIHN1YnNjcmliZWRGcm9tLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV4aXN0aW5nTG9jYWxTdG9yYWdlSXRlbXMsIHRhcmdldF9zZWVuX2NvdW50KVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG51bV9jaGFuZ2VzICYmIGNoYW5nZVR5cGVzLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgIGNyZWF0ZU5vdGlmaWNhdGlvbihcbiAgICAgICAgICAgICAgICAgICAge25vdGlmaWNhdGlvbklkOiB0aGluZyxcbiAgICAgICAgICAgICAgICAgICAgIHRpdGxlOiB0aGluZyxcbiAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6IGAke251bV9jaGFuZ2VzfSBuZXcgWyR7Y2hhbmdlVHlwZXMuam9pbignLCAnKX1dIGFjdGlvbnMsIGNsaWNrIHRvIHZpZXdgfSlcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBjaHJvbWUuc3RvcmFnZS5zeW5jLnNldCh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgW2tleXNbJ3JlbW92ZWQnXV06IHRyaW1EaWN0X2J5X251bWJlclZhbHVlZEF0dHJpYnV0ZShrbm93bl9yZW1vdmVkLCBNQVhfU1lOQ19TVE9SQUdFX0lURU1TX1BFUl9PQkpFQ1QsICdjJyksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgW2tleXNbJ2FwcHJvdmVkJ11dOiB0cmltRGljdF9ieV9udW1iZXJWYWx1ZWRBdHRyaWJ1dGUoa25vd25fYXBwcm92ZWQsIE1BWF9TWU5DX1NUT1JBR0VfSVRFTVNfUEVSX09CSkVDVCwgJ2MnKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBba2V5c1snbG9ja2VkJ11dOiB0cmltRGljdF9ieV9udW1iZXJWYWx1ZWRBdHRyaWJ1dGUoa25vd25fbG9ja2VkLCBNQVhfU1lOQ19TVE9SQUdFX0lURU1TX1BFUl9PQkpFQ1QsICdjJyksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgW2tleXNbJ3VubG9ja2VkJ11dOiB0cmltRGljdF9ieV9udW1iZXJWYWx1ZWRBdHRyaWJ1dGUoa25vd25fdW5sb2NrZWQsIE1BWF9TWU5DX1NUT1JBR0VfSVRFTVNfUEVSX09CSkVDVCwgJ2MnKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBba2V5c1snY2hhbmdlcyddXTogY2hhbmdlcy5zbGljZSgtTUFYX1NZTkNfU1RPUkFHRV9DSEFOR0VTKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwgKCkgPT4ge1xuICAgICAgICAgICAgICAgIHVwZGF0ZUJhZGdlVW5zZWVuQ291bnQoKVxuICAgICAgICAgICAgICAgIHJldHVybiBhZGRMb2NhbFN0b3JhZ2VJdGVtcyhuZXdMb2NhbFN0b3JhZ2VJdGVtcywgdGhpbmcsIGlzVXNlcilcbiAgICAgICAgICAgIH0pXG4gICAgICAgIH0pXG4gICAgfSlcbn1cblxuY29uc3QgY2hhbmdlSXNQcmV2aW91c2x5UmVjb3JkZWQgPSAobmFtZSwgY2hhbmdlX3R5cGUsIGNoYW5nZXMpID0+IHtcbiAgICBmb3IgKGNvbnN0IGNoYW5nZSBvZiBjaGFuZ2VzKSB7XG4gICAgICAgIGxldCBjaGFuZ2Vfb2JqID0gY2hhbmdlXG4gICAgICAgIGlmICghIChjaGFuZ2Vfb2JqIGluc3RhbmNlb2YgQ2hhbmdlRm9yU3RvcmFnZSkpIHtcbiAgICAgICAgICAgIGNoYW5nZV9vYmogPSBuZXcgQ2hhbmdlRm9yU3RvcmFnZSh7b2JqZWN0OiBjaGFuZ2V9KVxuICAgICAgICB9XG4gICAgICAgIGlmIChjaGFuZ2Vfb2JqLmdldElEKCkgPT09IG5hbWUgJiYgY2hhbmdlX3R5cGUgPT09IGNoYW5nZV9vYmouZ2V0Q2hhbmdlVHlwZUludGVybmFsKCkpIHtcbiAgICAgICAgICAgIHJldHVybiB0cnVlXG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlXG59XG5cblxuLy8gbmV3TG9jYWxTdG9yYWdlSXRlbXMgb3BlcmF0ZXMgYXMgYSByZXR1cm4gdmFsdWVcbmZ1bmN0aW9uIG1hcmtDaGFuZ2VzIChhbGVydF9jdXJyZW50X2xpc3QsIGFsZXJ0X3R5cGUsIGFsZXJ0X3RleHQsIGFsZXJ0X2tub3duX2hhc2gsXG4gICAgICAgICAgICAgICAgICAgICAgbm9ybWFsX2N1cnJlbnRfbGlzdCwgbm9ybWFsX3R5cGUsIG5vcm1hbF90ZXh0LCBub3JtYWxfa25vd25faGFzaCxcbiAgICAgICAgICAgICAgICAgICAgICBjaGFuZ2VzLCBpdGVtTG9va3VwLCBub3RpZnksIG5ld0xvY2FsU3RvcmFnZUl0ZW1zLCBjaGFuZ2VUeXBlcyxcbiAgICAgICAgICAgICAgICAgICAgICBpc1VzZXIsIHN1YnNjcmliZWRGcm9tLCBleGlzdGluZ0xvY2FsU3RvcmFnZUl0ZW1zLCB0YXJnZXRfc2Vlbl9jb3VudCkge1xuICAgIGNvbnN0IGFsZXJ0X3Vuc2Vlbl9pZHMgPSBbXSxcbiAgICAgICAgICBub3JtYWxfdW5zZWVuX2lkcyA9IFtdLFxuICAgICAgICAgIGFsZXJ0X3VzZXJEZWxldGVkX3Vuc2Vlbl9pZHMgPSBbXSxcbiAgICAgICAgICBub3cgPSBNYXRoLmZsb29yKG5ldyBEYXRlKCkvMTAwMClcblxuICAgIGFsZXJ0X2N1cnJlbnRfbGlzdC5mb3JFYWNoKG5hbWUgPT4ge1xuICAgICAgICBjb25zdCBpdGVtID0gaXRlbUxvb2t1cFtuYW1lXVxuICAgICAgICAvLyAxLiBpbiB0aGUgY2FzZSBvZiBhIG5vbi11c2VycGFnZS10cmFja2VkIChpc1VzZXI9ZmFsc2UpIHJlbW92ZWQgY29tbWVudCwgZG9uJ3Qgb3ZlcndyaXRlIGxvY2FsIHN0b3JhZ2UgYi9jXG4gICAgICAgIC8vIGlmIGl0IHdlcmUgb3ZlcndyaXR0ZW4sIGJvZHkgd291bGQgYXBwZWFyIG9uIGhpc3RvcnkgcGFnZSBhcyBbcmVtb3ZlZF1cbiAgICAgICAgLy8gMi4gaW4gdGhlIGNhc2Ugb2YgdXNlcnBhZ2UgdHJhY2tpbmcgKGlzVXNlcj10cnVlKSwgb25seSBuZWVkIHRvIHNhdmUgdGhlIHRleHQgaW4gbG9jYWwgc3RvcmFnZVxuICAgICAgICAvLyB3aGVuIHRoZXJlIGlzIGEgY2hhbmdlLiB1c2VyIHBhZ2UgbG9va3VwIChpdGVtTG9va3VwKSB3aWxsIGhhdmUgb3JpZ2luYWwgdGV4dFxuICAgICAgICBjb25zdCBleGlzdGluZ0xvY2FsU3RvcmFnZUl0ZW0gPSBleGlzdGluZ0xvY2FsU3RvcmFnZUl0ZW1zW25hbWVdXG4gICAgICAgIGlmICghIGlzVXNlciAmJiAhIGV4aXN0aW5nTG9jYWxTdG9yYWdlSXRlbSkge1xuICAgICAgICAgICAgbmV3TG9jYWxTdG9yYWdlSXRlbXNbbmFtZV0gPSBuZXcgTG9jYWxTdG9yYWdlSXRlbSh7aXRlbTogaXRlbSwgb2JzZXJ2ZWRfdXRjOiBub3d9KVxuICAgICAgICB9IGVsc2UgaWYgKGV4aXN0aW5nTG9jYWxTdG9yYWdlSXRlbSkge1xuICAgICAgICAgICAgLy8gcmVzZXQgc2Vlbl9jb3VudCBzbyB0aGF0IGl0ZW1zIG9ic2VydmVkIGFzIGFwcHJvdmVkL25vcm1hbCBtdXN0IGJlIGNvbnNlY3V0aXZlbHkgc2VlbiB3L3RoYXQgc3RhdGVcbiAgICAgICAgICAgIC8vIE5vdGU6IFRoZSB2YXIgc2Vlbl9jb3VudCBpcyByZWFsbHkgYSAnc2VlbiBhcyBub3JtYWwnIGNvdW50LCBidXQgd2UgZG9uJ3QgbmVlZCBhbiBhbGVydF9zZWVuX2NvdW50XG4gICAgICAgICAgICBjb25zdCBuZXdMb2NhbFN0b3JhZ2VJdGVtID0gbmV3IExvY2FsU3RvcmFnZUl0ZW0oe29iamVjdDogZXhpc3RpbmdMb2NhbFN0b3JhZ2VJdGVtfSlcbiAgICAgICAgICAgIG5ld0xvY2FsU3RvcmFnZUl0ZW0ucmVzZXRTZWVuQ291bnQoKVxuICAgICAgICAgICAgbmV3TG9jYWxTdG9yYWdlSXRlbXNbbmFtZV0gPSBuZXdMb2NhbFN0b3JhZ2VJdGVtXG4gICAgICAgIH1cbiAgICAgICAgaWYgKCEgKG5hbWUgaW4gYWxlcnRfa25vd25faGFzaCkpIHtcbiAgICAgICAgICAgIC8vIG1hcmtVbnNlZW4gaXMgYWx3YXlzIHRydWUgZXhjZXB0IHdoZW4gc3Vic2NyaWJpbmcgdmlhIGEgcmVkZGl0IChub3QgcmV2ZWRkaXQpIHBhZ2UgdG8gYSBuZXcgSUQgZm9yICdvdGhlcidcbiAgICAgICAgICAgIC8vIHN1YnNjcmlwdGlvbnMuIEFzIGxvbmcgYXMgdGhlIGl0ZW0gaXMgbm90ICdyZW1vdmVkJywgdGhlIGN1cnJlbnQgc3RhdGUgaXMgc3RvcmVkIGFzICdzZWVuJyAodW5zZWVuPWZhbHNlKS5cbiAgICAgICAgICAgIC8vIEl0IGlzIGFzc3VtZWQgdGhhdCB1c2VycyBzdWJzY3JpYmluZyBmcm9tIHJldmVkZGl0IHBhZ2VzIHdpbGwgYWxyZWFkeSBoYXZlIHNlZW4gYWxsIHRoZSBjdXJyZW50IG1vZCBhY3Rpb25zLFxuICAgICAgICAgICAgLy8gYW5kIHVzZXJzIHN1YnNjcmliaW5nIGZyb20gYSByZWRkaXQgcGFnZSB3aWxsIGFscmVhZHkga25vdyBhYm91dCBsb2NrZWQgaXRlbXNcbiAgICAgICAgICAgIGxldCBtYXJrVW5zZWVuID0gdHJ1ZVxuICAgICAgICAgICAgaWYgKChzdWJzY3JpYmVkRnJvbSA9PT0gU1VCU0NSSUJFRF9GUk9NX1JFRERJVCAmJiBhbGVydF90eXBlICE9PSBSRU1PVkVEKSB8fFxuICAgICAgICAgICAgICAgICBzdWJzY3JpYmVkRnJvbSA9PT0gU1VCU0NSSUJFRF9GUk9NX1JFVkVERElUKSB7XG4gICAgICAgICAgICAgICAgbWFya1Vuc2VlbiA9IGZhbHNlXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBhbGVydF9rbm93bl9oYXNoW25hbWVdID0gbmV3IEl0ZW1Gb3JTdG9yYWdlKGl0ZW0uY3JlYXRlZF91dGMsIG1hcmtVbnNlZW4pXG4gICAgICAgICAgICBkZWxldGUgbm9ybWFsX2tub3duX2hhc2hbbmFtZV1cbiAgICAgICAgICAgIGlmIChtYXJrVW5zZWVuKSB7XG4gICAgICAgICAgICAgICAgbGV0IGFsZXJ0X3R5cGVfdmFyID0gYWxlcnRfdHlwZVxuICAgICAgICAgICAgICAgIGlmIChpc1VzZXJEZWxldGVkSXRlbShpdGVtKSkge1xuICAgICAgICAgICAgICAgICAgICBhbGVydF90eXBlX3ZhciA9IERFTEVURURcbiAgICAgICAgICAgICAgICAgICAgYWxlcnRfdXNlckRlbGV0ZWRfdW5zZWVuX2lkcy5wdXNoKG5hbWUpXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgYWxlcnRfdW5zZWVuX2lkcy5wdXNoKG5hbWUpXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNoYW5nZXMucHVzaChuZXcgQ2hhbmdlRm9yU3RvcmFnZSh7aWQ6IG5hbWUsIG9ic2VydmVkX3V0Yzogbm93LCBjaGFuZ2VfdHlwZTogYWxlcnRfdHlwZV92YXJ9KSlcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChpc1VzZXIpIHtcbiAgICAgICAgICAgICAgICBuZXdMb2NhbFN0b3JhZ2VJdGVtc1tuYW1lXSA9IG5ldyBMb2NhbFN0b3JhZ2VJdGVtKHtpdGVtOiBpdGVtLCBvYnNlcnZlZF91dGM6IG5vd30pXG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9KVxuICAgIG5vcm1hbF9jdXJyZW50X2xpc3QuZm9yRWFjaChuYW1lID0+IHtcbiAgICAgICAgY29uc3QgaXRlbSA9IGl0ZW1Mb29rdXBbbmFtZV1cbiAgICAgICAgLy8gc2F2ZSBvcmlnaW5hbCB0ZXh0IGZvciBhbGwgbm9uLXVzZXJwYWdlLXRyYWNrZWQgaXRlbXMgc2luY2UgY29tbWVudCB0ZXh0IGNhbiBkaXNhcHBlYXJcbiAgICAgICAgaWYgKCEgaXNVc2VyICYmICEgZXhpc3RpbmdMb2NhbFN0b3JhZ2VJdGVtc1tuYW1lXSkge1xuICAgICAgICAgICAgbmV3TG9jYWxTdG9yYWdlSXRlbXNbbmFtZV0gPSBuZXcgTG9jYWxTdG9yYWdlSXRlbSh7aXRlbTogaXRlbSwgb2JzZXJ2ZWRfdXRjOiBub3d9KVxuICAgICAgICB9XG4gICAgICAgIGlmIChuYW1lIGluIGFsZXJ0X2tub3duX2hhc2gpIHtcbiAgICAgICAgICAgIGNvbnN0IHRoaXNfbG9jYWxTdG9yYWdlSXRlbSA9IG5ldyBMb2NhbFN0b3JhZ2VJdGVtKHtvYmplY3Q6IGV4aXN0aW5nTG9jYWxTdG9yYWdlSXRlbXNbbmFtZV19KVxuICAgICAgICAgICAgLy8gVHJhY2sgdGhlIHNlZW4gY291bnQsIGFrYSAnb2JzZXJ2ZWQgc2FtZSBzdGF0dXMnIGNvdW50XG4gICAgICAgICAgICAvLyBEb2luZyBzbyBhbGxvd3Mgc2VuZGluZyBhbiBhbGVydCBvbmx5IGFmdGVyIE4gdGltZXMgYSBuZXcgc3RhdHVzIGhhcyBiZWVuIG9ic2VydmVkLlxuICAgICAgICAgICAgLy8gU2VlOiBodHRwczovL3d3dy5yZWRkaXQuY29tL3IvcmV2ZWRkaXQvY29tbWVudHMvemM3dGNtL3JldmVkZGl0X3NlbmRpbmdfcmVwZXRpdGl2ZV9ub3RpZmljYXRpb25zL1xuICAgICAgICAgICAgY29uc3Qgc2Vlbl9jb3VudCA9IHRoaXNfbG9jYWxTdG9yYWdlSXRlbS5pbmNyZW1lbnRTZWVuQ291bnQoKVxuICAgICAgICAgICAgaWYgKHNlZW5fY291bnQgPj0gdGFyZ2V0X3NlZW5fY291bnQpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBjaGFuZ2VfaXNfcHJldmlvdXNseV9yZWNvcmRlZCA9IGNoYW5nZUlzUHJldmlvdXNseVJlY29yZGVkKG5hbWUsIG5vcm1hbF90eXBlLCBjaGFuZ2VzKVxuICAgICAgICAgICAgICAgIC8vIFRvIHByZXZlbnQgcmVwZWF0IG5vdGlmaWNhdGlvbnMsIHdob3NlIG5vbi1kZXRlcm1pbmlzdGljIGNhdXNlIEkgaGF2ZW4ndCB5ZXQgZmlndXJlZCBvdXQsXG4gICAgICAgICAgICAgICAgLy8gb25seSBub3RpZnkgYWJvdXQgdGhlIHNlY29uZCBvYnNlcnZlZCBjaGFuZ2UgaW4gc3RhdHVzIGJhY2sgdG8gJ25vcm1hbCcgKGFwcHJvdmVkL3VubG9ja2VkKVxuICAgICAgICAgICAgICAgIC8vIGlmIGEgaGlnaGVyIHRocmVzaG9sZCBvZiBjb25zZWN1dGl2ZSBub3JtYWwgc3RhdHVzZXMgaGFzIGJlZW4gb2JzZXJ2ZWRcbiAgICAgICAgICAgICAgICBpZiAoISBjaGFuZ2VfaXNfcHJldmlvdXNseV9yZWNvcmRlZCB8fCBzZWVuX2NvdW50ID49IFRBUkdFVF9TRUVOX0NPVU5UX0ZPUl9QUkVWSU9VU0xZX1JFQ09SREVEX0NIQU5HRSkge1xuICAgICAgICAgICAgICAgICAgICBub3JtYWxfa25vd25faGFzaFtuYW1lXSA9IG5ldyBJdGVtRm9yU3RvcmFnZShpdGVtLmNyZWF0ZWRfdXRjLCB0cnVlKVxuICAgICAgICAgICAgICAgICAgICBkZWxldGUgYWxlcnRfa25vd25faGFzaFtuYW1lXVxuXG4gICAgICAgICAgICAgICAgICAgIGNoYW5nZXMucHVzaChuZXcgQ2hhbmdlRm9yU3RvcmFnZSh7aWQ6IG5hbWUsIG9ic2VydmVkX3V0Yzogbm93LCBjaGFuZ2VfdHlwZTogbm9ybWFsX3R5cGUsIHNlZW5fY291bnR9KSlcbiAgICAgICAgICAgICAgICAgICAgbm9ybWFsX3Vuc2Vlbl9pZHMucHVzaChuYW1lKVxuXG4gICAgICAgICAgICAgICAgICAgIG5ld0xvY2FsU3RvcmFnZUl0ZW1zW25hbWVdID0gbmV3IExvY2FsU3RvcmFnZUl0ZW0oe2l0ZW06IGl0ZW0sIG9ic2VydmVkX3V0Yzogbm93fSlcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBuZXdMb2NhbFN0b3JhZ2VJdGVtc1tuYW1lXSA9IHRoaXNfbG9jYWxTdG9yYWdlSXRlbVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgbmV3TG9jYWxTdG9yYWdlSXRlbXNbbmFtZV0gPSB0aGlzX2xvY2FsU3RvcmFnZUl0ZW1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIG5vcm1hbF9rbm93bl9oYXNoW25hbWVdID0gbmV3IEl0ZW1Gb3JTdG9yYWdlKGl0ZW0uY3JlYXRlZF91dGMsIGZhbHNlKVxuICAgICAgICB9XG4gICAgfSlcbiAgICBjb25zdCBudW1fY2hhbmdlcyA9IGFsZXJ0X3Vuc2Vlbl9pZHMubGVuZ3RoICsgbm9ybWFsX3Vuc2Vlbl9pZHMubGVuZ3RoICsgYWxlcnRfdXNlckRlbGV0ZWRfdW5zZWVuX2lkcy5sZW5ndGhcbiAgICBpZiAobm90aWZ5ICYmIG51bV9jaGFuZ2VzKSB7XG4gICAgICAgIGlmIChhbGVydF91bnNlZW5faWRzLmxlbmd0aCkgY2hhbmdlVHlwZXMucHVzaChhbGVydF90ZXh0KVxuICAgICAgICBpZiAoYWxlcnRfdXNlckRlbGV0ZWRfdW5zZWVuX2lkcy5sZW5ndGgpIGNoYW5nZVR5cGVzLnB1c2goJ3VzZXIgZGVsZXRlZCcpXG4gICAgICAgIGlmIChub3JtYWxfdW5zZWVuX2lkcy5sZW5ndGgpIGNoYW5nZVR5cGVzLnB1c2gobm9ybWFsX3RleHQpXG4gICAgfVxuICAgIHJldHVybiBudW1fY2hhbmdlc1xufVxuIiwiaW1wb3J0IHtzdWJzY3JpYmVJZCwgdW5zdWJzY3JpYmVJZCwgZ2V0TG9jYWxTdG9yYWdlSXRlbXMsIHNhdmVMb2NhbFN0b3JhZ2VJdGVtc30gZnJvbSAnLi9zdG9yYWdlLmpzJ1xuaW1wb3J0IHtMb2NhbFN0b3JhZ2VJdGVtfSBmcm9tICcuL2NvbW1vbi5qcydcbmltcG9ydCB7c2V0Q3VycmVudFN0YXRlRm9ySWR9IGZyb20gJy4vbW9uaXRvcmluZy5qcydcbmltcG9ydCBicm93c2VyIGZyb20gJ3dlYmV4dGVuc2lvbi1wb2x5ZmlsbCdcblxubGV0IFVOU1VCU0NSSUJFX1RFWFQgPSAndW5zdWJzY3JpYmUtcmV2J1xubGV0IFNVQlNDUklCRV9URVhUID0gJ3N1YnNjcmliZS1yZXYnXG5cbmlmIChsb2NhdGlvbi5ob3N0bmFtZS5tYXRjaCgvcmV2ZWRkaXRcXC5jb20kLykpIHtcbiAgICBVTlNVQlNDUklCRV9URVhUID0gJ3Vuc3Vic2NyaWJlJ1xuICAgIFNVQlNDUklCRV9URVhUID0gJ3N1YnNjcmliZSdcbn1cblxuZXhwb3J0IGNvbnN0IHNldFRleHRBbmRGdW5jdGlvbl9zdWJzY3JpYmUgPSAoaWQsIGVsZW1lbnQsIGNvbW1lbnRCb2R5KSA9PiB7XG4gICAgcmV0dXJuICQoZWxlbWVudCkudGV4dChTVUJTQ1JJQkVfVEVYVCkub2ZmKCdjbGljaycpLmNsaWNrKChldmVudE9iaikgPT4gc3Vic2NyaWJlSWRfY2hhbmdlVGV4dChpZCwgZXZlbnRPYmoudGFyZ2V0LCBjb21tZW50Qm9keSkpXG59XG5cbmV4cG9ydCBjb25zdCBzZXRUZXh0QW5kRnVuY3Rpb25fdW5zdWJzY3JpYmUgPSAoaWQsIGVsZW1lbnQsIGNvbW1lbnRCb2R5KSA9PiB7XG4gICAgcmV0dXJuICQoZWxlbWVudCkudGV4dChVTlNVQlNDUklCRV9URVhUKS5vZmYoJ2NsaWNrJykuY2xpY2soKGV2ZW50T2JqKSA9PiB1bnN1YnNjcmliZUlkX2NoYW5nZVRleHQoaWQsIGV2ZW50T2JqLnRhcmdldCwgY29tbWVudEJvZHkpKVxufVxuXG5jb25zdCBzdWJzY3JpYmVJZF9jaGFuZ2VUZXh0ID0gKGlkLCBlbGVtZW50LCBjb21tZW50Qm9keSA9ICcnKSA9PiB7XG4gICAgc3Vic2NyaWJlSWQoaWQsIGFzeW5jICgpID0+IHtcbiAgICAgICAgc2V0VGV4dEFuZEZ1bmN0aW9uX3Vuc3Vic2NyaWJlKGlkLCBlbGVtZW50LCBjb21tZW50Qm9keSlcbiAgICAgICAgYXdhaXQgc2V0Q3VycmVudFN0YXRlRm9ySWQoaWQsIHdpbmRvdy5sb2NhdGlvbi5ocmVmKVxuICAgICAgICBpZiAoY29tbWVudEJvZHkpIHtcbiAgICAgICAgICAgIGdldExvY2FsU3RvcmFnZUl0ZW1zKCdvdGhlcicsIGZhbHNlKVxuICAgICAgICAgICAgLnRoZW4oc3RvcmVkSXRlbXMgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IGl0ZW0gPSBzdG9yZWRJdGVtc1tpZF1cbiAgICAgICAgICAgICAgICAvLyBjb250ZW50IGZyb20gcHJpdmF0ZSBzdWJzIHdvbid0IGJlIHNhdmVkIGIvY1xuICAgICAgICAgICAgICAgIC8vIG5vIGl0ZW0gaXMgY3JlYXRlZCBmb3IgdGhhdCAocmVkZGl0IHJldHVybnMgbm8gZGF0YSBmb3JcbiAgICAgICAgICAgICAgICAvLyBub24tbG9nZ2VkLWluIGF1dGhlbnRpY2F0ZWQgYXBwcylcbiAgICAgICAgICAgICAgICBpZiAoaXRlbSkge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBpdGVtT2JqID0gbmV3IExvY2FsU3RvcmFnZUl0ZW0oe29iamVjdDogaXRlbX0pXG4gICAgICAgICAgICAgICAgICAgIGl0ZW1PYmouc2V0VGV4dChjb21tZW50Qm9keSlcbiAgICAgICAgICAgICAgICAgICAgc3RvcmVkSXRlbXNbaWRdID0gaXRlbU9ialxuICAgICAgICAgICAgICAgICAgICBzYXZlTG9jYWxTdG9yYWdlSXRlbXMoJ290aGVyJywgZmFsc2UsIHN0b3JlZEl0ZW1zKVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pXG4gICAgICAgIH1cbiAgICB9KVxuICAgIHJldHVybiBmYWxzZVxufVxuXG5jb25zdCB1bnN1YnNjcmliZUlkX2NoYW5nZVRleHQgPSAoaWQsIGVsZW1lbnQsIGNvbW1lbnRCb2R5KSA9PiB7XG4gICAgdW5zdWJzY3JpYmVJZChpZCwgKCkgPT4ge1xuICAgICAgICBzZXRUZXh0QW5kRnVuY3Rpb25fc3Vic2NyaWJlKGlkLCBlbGVtZW50LCBjb21tZW50Qm9keSlcbiAgICB9KVxuICAgIHJldHVybiBmYWxzZVxufVxuIiwiaW1wb3J0IHtnZXRBdXRoLCBsb29rdXBJdGVtc0J5SUR9IGZyb20gJy4vcmVxdWVzdHMuanMnXG5pbXBvcnQge2dldEZ1bGxJRHNGcm9tUGF0aH0gZnJvbSAnLi9jb21tb24uanMnXG5pbXBvcnQge3NldFRleHRBbmRGdW5jdGlvbl9zdWJzY3JpYmUsc2V0VGV4dEFuZEZ1bmN0aW9uX3Vuc3Vic2NyaWJlfSBmcm9tICcuL2NvbnRlbnQtY29tbW9uLmpzJ1xuaW1wb3J0IGJyb3dzZXIgZnJvbSAnd2ViZXh0ZW5zaW9uLXBvbHlmaWxsJ1xuaW1wb3J0IHtzdWJzY3JpYmVVc2VyLCBNQVhfU1VCU0NSSVBUSU9OU30gZnJvbSAnLi9zdG9yYWdlLmpzJ1xuXG5jb25zdCBVU0VSX0RFTEVURUQgPSAncmV2LXVzZXItZGVsZXRlZCdcbmNvbnN0IE1PRF9SRU1PVkVEID0gJ3Jldi1tb2QtcmVtb3ZlZCdcbmNvbnN0IGlkX21hdGNoX2NvbW1lbnQgPSAvXnQxXy4rL1xuY29uc3QgaWRfbWF0Y2hfcG9zdCA9IC9edDNfLisvXG5jb25zdCBkZWZhdWx0TmV3UmVkZGl0VGFyZ2V0ID0gJ3NocmVkZGl0LXBvc3QnXG5cbmV4cG9ydCBjb25zdCByZWRkaXRNb2RpZmljYXRpb25zID0gKG90aGVyX3N1YnNjcmlwdGlvbnMsIGhpZGVfc3Vic2NyaWJlLCBtb25pdG9yX3F1YXJhbnRpbmVkLCBzdWJzY3JpYmVkX3VzZXJzX2xvd2VyY2FzZSwgdW5zdWJzY3JpYmVkX3VzZXJzX2xvd2VyY2FzZSkgPT4ge1xuICAgIGNvbnN0IGlzTmV3UmVkZGl0ID0gQm9vbGVhbihkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdoZWFkJykuZ2V0QXR0cmlidXRlKCdwcmVmaXgnKSlcbiAgICBpZlRocmVhZFBhZ2Vfc2hvd1JlbW92YWxTdGF0dXMoaXNOZXdSZWRkaXQsIG1vbml0b3JfcXVhcmFudGluZWQpXG4gICAgY29uc3Qgc3Vic2NyaWJlSWZOb3RVbnN1YnNjcmliZWQgPSAodXNlcikgPT4ge1xuICAgICAgICBjb25zdCB1c2VyX2xjID0gdXNlci50b0xvd2VyQ2FzZSgpXG4gICAgICAgIGlmIChzdWJzY3JpYmVkX3VzZXJzX2xvd2VyY2FzZS5sZW5ndGggPCBNQVhfU1VCU0NSSVBUSU9OUyAmJlxuICAgICAgICAgICAgISBzdWJzY3JpYmVkX3VzZXJzX2xvd2VyY2FzZS5pbmNsdWRlcyh1c2VyX2xjKSAmJlxuICAgICAgICAgICAgISB1bnN1YnNjcmliZWRfdXNlcnNfbG93ZXJjYXNlLmluY2x1ZGVzKHVzZXJfbGMpKSB7XG4gICAgICAgICAgICBzdWJzY3JpYmVVc2VyKHVzZXIpXG4gICAgICAgIH1cbiAgICB9XG4gICAgaWYgKCAhIGlzTmV3UmVkZGl0ICkge1xuICAgICAgICBjb25zdCB1c2VybmFtZSA9ICQoJyNoZWFkZXIgLnVzZXIgYScpWzBdPy50ZXh0Q29udGVudFxuICAgICAgICBpZiAodXNlcm5hbWUgJiYgISB1c2VybmFtZS5tYXRjaCgvIC8pICYmIHVzZXJuYW1lLnRyaW0oKS50b0xvd2VyQ2FzZSgpICE9PSAnbG9naW4nKSB7XG4gICAgICAgICAgICBzdWJzY3JpYmVJZk5vdFVuc3Vic2NyaWJlZCh1c2VybmFtZSlcbiAgICAgICAgfVxuICAgICAgICBpZiAoISBoaWRlX3N1YnNjcmliZSkge1xuICAgICAgICAgICAgY29uc3Qgc2VsZWN0b3IgPSAnLnRoaW5nLmxpbmssIC50aGluZy5jb21tZW50J1xuICAgICAgICAgICAgYWRkU3Vic2NyaWJlTGlua3Nfb2xkUmVkZGl0KCQoc2VsZWN0b3IpLCBvdGhlcl9zdWJzY3JpcHRpb25zKVxuICAgICAgICAgICAgJChkb2N1bWVudCkuYXJyaXZlKHNlbGVjdG9yLCAoZWxlbWVudCkgPT4ge1xuICAgICAgICAgICAgICAgIGFkZFN1YnNjcmliZUxpbmtzX29sZFJlZGRpdChbZWxlbWVudF0sIG90aGVyX3N1YnNjcmlwdGlvbnMpXG4gICAgICAgICAgICB9KVxuICAgICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgICAgY29uc3QgdXNlcm5hbWUgPSAkKCcuaGVhZGVyLXVzZXItZHJvcGRvd24gc3BhbicpLnRvQXJyYXkoKS5tYXAoeCA9PiB4LnRleHRDb250ZW50LnRyaW0oKSkuZmlsdGVyKHggPT4gISB4Lm1hdGNoKC8gLykpWzBdXG4gICAgICAgIGlmICh1c2VybmFtZSkge1xuICAgICAgICAgICAgc3Vic2NyaWJlSWZOb3RVbnN1YnNjcmliZWQodXNlcm5hbWUpXG4gICAgICAgIH1cbiAgICAgICAgaWYgKCEgaGlkZV9zdWJzY3JpYmUpIHtcbiAgICAgICAgICAgIGxldCBzZWxlY3Rvcl9jb21tZW50cyA9ICcuQ29tbWVudCdcbiAgICAgICAgICAgIGFkZFN1YnNjcmliZUxpbmtzX25ld1JlZGRpdF9jb21tZW50cygkKHNlbGVjdG9yX2NvbW1lbnRzKSwgb3RoZXJfc3Vic2NyaXB0aW9ucylcbiAgICAgICAgICAgICQoZG9jdW1lbnQpLmFycml2ZShzZWxlY3Rvcl9jb21tZW50cywgKGVsZW1lbnQpID0+IHtcbiAgICAgICAgICAgICAgICBhZGRTdWJzY3JpYmVMaW5rc19uZXdSZWRkaXRfY29tbWVudHMoW2VsZW1lbnRdLCBvdGhlcl9zdWJzY3JpcHRpb25zKVxuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIGNvbnN0IHNlbGVjdG9yX3Bvc3RzID0gJy5Qb3N0J1xuICAgICAgICAgICAgYWRkU3Vic2NyaWJlTGlua3NfbmV3UmVkZGl0X3Bvc3RzKCQoc2VsZWN0b3JfcG9zdHMpLCBvdGhlcl9zdWJzY3JpcHRpb25zKVxuICAgICAgICAgICAgJChkb2N1bWVudCkuYXJyaXZlKHNlbGVjdG9yX3Bvc3RzLCAoZWxlbWVudCkgPT4ge1xuICAgICAgICAgICAgICAgIGFkZFN1YnNjcmliZUxpbmtzX25ld1JlZGRpdF9wb3N0cyhbZWxlbWVudF0sIG90aGVyX3N1YnNjcmlwdGlvbnMpXG4gICAgICAgICAgICB9KVxuICAgICAgICB9XG4gICAgICAgIGFkZERpcmVjdExpbmtzX25ld1JlZGRpdF9jb21tZW50cygpXG4gICAgICAgIGNvbnN0IHNlbGVjdG9yX25ld1Bvc3QgPSAnLlBvc3QgZGl2W2RhdGEtdGVzdC1pZD1cInBvc3QtY29udGVudFwiXSdcbiAgICAgICAgJChkb2N1bWVudCkuYXJyaXZlKHNlbGVjdG9yX25ld1Bvc3QsIChlbGVtZW50KSA9PiB7XG4gICAgICAgICAgICBzaG93UmVtb3ZhbFN0YXR1c0ZvclRocmVhZE92ZXJsYXkoZWxlbWVudCwgbW9uaXRvcl9xdWFyYW50aW5lZClcbiAgICAgICAgfSlcbiAgICB9XG59XG5cbmNvbnN0IHJlbW92ZWRCeU1vZGVyYXRvclRleHQgPSAnQ29tbWVudCByZW1vdmVkIGJ5IG1vZGVyYXRvcicudG9Mb3dlckNhc2UoKS50cmltKClcbmNvbnN0IGRpcmVjdExpbmtfY2xhc3MgPSAnUmV2ZWRkaXRMaW5rJ1xuY29uc3QgYWRkRGlyZWN0TGlua3NfbmV3UmVkZGl0X2NvbW1lbnRzID0gKCkgPT4ge1xuICAgIGNvbnN0IHByb2Nlc3NMaXN0ID0gKGVsZW1lbnRzKSA9PiB7XG4gICAgICAgIGZvciAoY29uc3QgZWwgb2YgZWxlbWVudHMpIHtcbiAgICAgICAgICAgIGNvbnN0IGNsb3Nlc3RfZGl2X2FuY2VzdG9yID0gJChlbCkuY2xvc2VzdCgnZGl2JykuZmlyc3QoKVxuICAgICAgICAgICAgY29uc3QgcmV2ZWRkaXRMaW5rID0gJChjbG9zZXN0X2Rpdl9hbmNlc3RvcikucGFyZW50KCkuZmluZChgLiR7ZGlyZWN0TGlua19jbGFzc31gKS5sZW5ndGhcbiAgICAgICAgICAgIGlmICghIHJldmVkZGl0TGluaykge1xuICAgICAgICAgICAgICAgIGNvbnN0IHJlZGRpdExpbmsgPSAkKGNsb3Nlc3RfZGl2X2FuY2VzdG9yKS5maW5kKCdhW2hyZWZePVwiaHR0cHM6Ly93d3cucmVkZGl0LmNvbVwiXScpLmZpcnN0KCkuYXR0cignaHJlZicpXG4gICAgICAgICAgICAgICAgY29uc3QgdXJsID0gbmV3IFVSTChyZWRkaXRMaW5rKVxuICAgICAgICAgICAgICAgIHVybC5zZWFyY2hQYXJhbXMuc2V0KCd1dG1fc291cmNlJywgJ3JldmVkZGl0LXJ0JylcbiAgICAgICAgICAgICAgICB1cmwuaG9zdCA9ICd3d3cucmV2ZWRkaXQuY29tJ1xuICAgICAgICAgICAgICAgIGNvbnN0IG5ld0VsID0gJChlbCkuY2xvbmUoKVxuICAgICAgICAgICAgICAgICQobmV3RWwpLmh0bWwoYDxhIHRhcmdldD1cIl9ibGFua1wiIHN0eWxlPVwidGV4dC1kZWNvcmF0aW9uOiB1bmRlcmxpbmU7XCIgaHJlZj1cIiR7dXJsLnRvU3RyaW5nKCl9XCI+dmlldyBvbiBSZXZlZGRpdDwvYT5gKVxuICAgICAgICAgICAgICAgIGNvbnN0IHdyYXAgPSAkKGA8ZGl2IGNsYXNzPVwiJHtkaXJlY3RMaW5rX2NsYXNzfVwiPiR7JChuZXdFbClbMF0ub3V0ZXJIVE1MfTwvZGl2PmApXG4gICAgICAgICAgICAgICAgd3JhcC5pbnNlcnRBZnRlcihjbG9zZXN0X2Rpdl9hbmNlc3RvcilcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICAkKGRvY3VtZW50KS5hcnJpdmUoJ3NwYW4nLCAoZWxlbWVudCkgPT4ge1xuICAgICAgICBpZiAoZWxlbWVudC50ZXh0Q29udGVudC50b0xvd2VyQ2FzZSgpLnRyaW0oKSA9PT0gcmVtb3ZlZEJ5TW9kZXJhdG9yVGV4dCkge1xuICAgICAgICAgICAgcHJvY2Vzc0xpc3QoW2VsZW1lbnRdKVxuICAgICAgICB9XG4gICAgfSlcbiAgICBjb25zdCBwcm9jZXNzQ29tbWVudHNPblBhZ2VMb2FkID0gKCkgPT4ge1xuICAgICAgICAvLyB0aGlzIHNlbGVjdG9yIGlzIG5vdCBhY2Nlc3NpYmxlIHRvIGFycml2ZS5qc1xuICAgICAgICBwcm9jZXNzTGlzdCgkKGBzcGFuOmVxdWFsc2koXCIke3JlbW92ZWRCeU1vZGVyYXRvclRleHR9XCIpYCkpXG4gICAgfVxuICAgIHByb2Nlc3NDb21tZW50c09uUGFnZUxvYWQoKVxuICAgIHNldFRpbWVvdXQocHJvY2Vzc0NvbW1lbnRzT25QYWdlTG9hZCwgMTAwMClcbiAgICBzZXRUaW1lb3V0KHByb2Nlc3NDb21tZW50c09uUGFnZUxvYWQsIDUwMDApXG4gICAgc2V0VGltZW91dChwcm9jZXNzQ29tbWVudHNPblBhZ2VMb2FkLCAxMDAwMClcbn1cblxuY29uc3QgaWZUaHJlYWRQYWdlX3Nob3dSZW1vdmFsU3RhdHVzID0gKGlzTmV3UmVkZGl0LCBtb25pdG9yX3F1YXJhbnRpbmVkLCBuZXdSZWRkaXRUYXJnZXQgPSBkZWZhdWx0TmV3UmVkZGl0VGFyZ2V0LCBwb3N0RGF0YSA9IHt9KSA9PiB7XG4gICAgY29uc3QgW3Bvc3RJRCwgY29tbWVudElELCB1c2VyLCBzdWJyZWRkaXRdID0gZ2V0RnVsbElEc0Zyb21QYXRoKHdpbmRvdy5sb2NhdGlvbi5wYXRobmFtZSlcbiAgICAvLyBsaW5rcyB0byBjb21tZW50cyBvbiBuZXcgcmVkZGl0IGRvIG5vdCBoYXZlIHJvYm90cyBub2luZGV4LG5vZm9sbG93LCBzbyBuZWVkIHRvIGxvb2t1cCBkYXRhIGlmIGhhdmVuJ3QgYWxyZWFkeVxuICAgIC8vIGFzIG9mIDIwMjIvMjAyMzogb2xkZXIgcG9zdHMgZS5nLiB0M185ZW16aHAgbm8gbG9uZ2VyIGhhdmUgbm9pbmRleCxub2ZvbGxvdywgc28gYWx3YXlzIG5lZWQgdG8gbG9vayB1cCBkYXRhIGZvciBuZXcgcmVkZGl0XG4gICAgaWYgKGlzTmV3UmVkZGl0ICYmIE9iamVjdC5rZXlzKHBvc3REYXRhKS5sZW5ndGggPT09IDApIHtcbiAgICAgICAgYnJvd3Nlci5ydW50aW1lLnNlbmRNZXNzYWdlKHthY3Rpb246ICdnZXQtZnJvbS1vbGQnLCBwYXRoOiBgL3IvJHtzdWJyZWRkaXR9L2NvbW1lbnRzLyR7cG9zdElELnN1YnN0cmluZygzKX0vYH0pXG4gICAgICAgIC50aGVuKHJlc3BvbnNlID0+IHtcbiAgICAgICAgICAgIGlmICghIHJlc3BvbnNlKSByZXR1cm5cbiAgICAgICAgICAgIHNob3dSZW1vdmFsU3RhdHVzKHtpc05ld1JlZGRpdCwgbmV3UmVkZGl0VGFyZ2V0LFxuICAgICAgICAgICAgICAgIHBvc3REYXRhOiB7XG4gICAgICAgICAgICAgICAgICAgIGlzX3JvYm90X2luZGV4YWJsZTogISByZXNwb25zZS5pc19yZW1vdmVkLFxuICAgICAgICAgICAgICAgICAgICAuLi5yZXNwb25zZSxcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KVxuICAgICAgICB9KVxuICAgICAgICAvLyBQcmV2aW91cyBjb2RlIGhlcmUgY2FsbGVkICdnZXQtcmVkZGl0LWl0ZW1zLWJ5LWlkJywgYnV0IHRoYXQgbm93IHJldHVybnMgYSA0MDNcbiAgICB9IGVsc2Uge1xuICAgICAgICBzaG93UmVtb3ZhbFN0YXR1cyh7aXNOZXdSZWRkaXQsIG5ld1JlZGRpdFRhcmdldCwgcG9zdERhdGF9KVxuICAgIH1cblxufVxuXG5jb25zdCBzaG93UmVtb3ZhbFN0YXR1cyA9ICh7aXNOZXdSZWRkaXQsIG5ld1JlZGRpdFRhcmdldCA9IGRlZmF1bHROZXdSZWRkaXRUYXJnZXQsIHBvc3REYXRhID0ge319KSA9PiB7XG4gICAgY29uc3QgW3Bvc3RJRCwgY29tbWVudElELCB1c2VyLCBzdWJyZWRkaXRdID0gZ2V0RnVsbElEc0Zyb21QYXRoKHdpbmRvdy5sb2NhdGlvbi5wYXRobmFtZSlcbiAgICBsZXQgY2xhc3NOYW1lID0gdW5kZWZpbmVkLCBtZXNzYWdlXzEgPSB1bmRlZmluZWRcbiAgICBpZiAocG9zdElEKSB7XG4gICAgICAgIC8vIE5vdGU6IERvIE5PVCBhZGQgdGhpcyBoZXJlOiBtZXRhW25hbWU9XCJyb2JvdHNcIl1bY29udGVudD1cIm5vaW5kZXhcIl1cbiAgICAgICAgLy8gVGhhdCBzaG93cyB1cCBvbiBhbGwgcGFnZXMgdGhhdCBhcmUgcGVybWFsaW5rcyB0byBjb21tZW50c1xuICAgICAgICBpZiAoJCgnbWV0YVtuYW1lPVwicm9ib3RzXCJdW2NvbnRlbnQ9XCJub2luZGV4LG5vZm9sbG93XCJdJykubGVuZ3RoIHx8XG4gICAgICAgICAgICAoJ2lzX3JvYm90X2luZGV4YWJsZScgaW4gcG9zdERhdGEgJiYgISBwb3N0RGF0YS5pc19yb2JvdF9pbmRleGFibGUpICkge1xuICAgICAgICAgICAgY29uc3QgYXV0aG9yID0gcG9zdERhdGEuYXV0aG9yIHx8ICQoJy5saW5rIC50b3AtbWF0dGVyIC5hdXRob3InKS5maXJzdCgpLnRleHQoKSB8fCAkKCcubGluayAudG9wLW1hdHRlciAudGFnbGluZSBzcGFuOmNvbnRhaW5zKFwiW2RlbGV0ZWRdXCIpJykudGV4dCgpIHx8ICQoJy5Qb3N0IHNwYW46Y29udGFpbnMoXCJ1L1tkZWxldGVkXVwiKScpLmZpcnN0KCkudGV4dCgpIHx8ICQoJ3NwYW5bc2xvdD1cImF1dGhvck5hbWVcIl0nKS5maXJzdCgpLnRleHQoKS50cmltKClcbiAgICAgICAgICAgIGlmICgoYXV0aG9yID09PSAnW2RlbGV0ZWRdJyB8fCBhdXRob3IgPT09ICd1L1tkZWxldGVkXScpICYmIHBvc3REYXRhLnJlbW92ZWRfYnlfY2F0ZWdvcnkgIT09ICdtb2RlcmF0b3InKSB7XG4gICAgICAgICAgICAgICAgY2xhc3NOYW1lID0gVVNFUl9ERUxFVEVEXG4gICAgICAgICAgICAgICAgbWVzc2FnZV8xID0gYFRoaXMgcG9zdCB3YXMgZWl0aGVyIGRlbGV0ZWQgYnkgdGhlIHBlcnNvbiB3aG8gcG9zdGVkIGl0LCBvciByZW1vdmVkIGJ5IGEgbW9kZXJhdG9yIGFuZCB0aGVuIGRlbGV0ZWQgYnkgdGhlIHBlcnNvbiB3aG8gcG9zdGVkIGl0LmBcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgY2xhc3NOYW1lID0gTU9EX1JFTU9WRURcbiAgICAgICAgICAgICAgICBtZXNzYWdlXzEgPSBgVGhpcyBwb3N0IGlzIHVuYXBwcm92ZWQuIEl0IGlzIGVpdGhlciB3YWl0aW5nIHRvIGJlIGFwcHJvdmVkLCBvciBpdCB3YXMgcmVtb3ZlZCBieSBzb21lb25lIG9yIHNvbWUgcm9ib3QuYFxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgaWYgKG1lc3NhZ2VfMSkge1xuICAgICAgICBjb25zdCBvcHRpb25zSUQgPSAnZ290by1vcHRpb25zLWZyb20tY29udGVudCdcbiAgICAgICAgY29uc3QgbWVzc2FnZV8yID0gYCBJdCBpcyBub3QgY3VycmVudGx5IHZpc2libGUgaW4gci8ke3N1YnJlZGRpdH0gYW5kIG1heSBub3QgYXBwZWFyIGluIHdlYiBzZWFyY2ggcmVzdWx0cy5gXG4gICAgICAgIGNvbnN0IGZyb20gPSBgPGRpdiBjbGFzcz1cInJldi1mcm9tXCI+PGEgaWQ9XCIke29wdGlvbnNJRH1cIiBocmVmPVwiI1wiPlJldmVkZGl0IFJlYWwtVGltZTwvYT4gbm90ZTwvZGl2PmBcbiAgICAgICAgY29uc3QgcG9zdF9wYXRoID0gd2luZG93LmxvY2F0aW9uLnBhdGhuYW1lLnNwbGl0KCcvJyw2KS5qb2luKCcvJylcbiAgICAgICAgY29uc3QgcmV2ZWRkaXRfbGluayA9IGA8cD48YSBocmVmPVwiaHR0cHM6Ly93d3cucmV2ZWRkaXQuY29tJHtwb3N0X3BhdGh9L1wiPlZpZXcgdGhlIHBvc3Qgb24gUmV2ZWRkaXQuY29tPC9hPjwvcD5gXG4gICAgICAgIGlmICghIGlzTmV3UmVkZGl0KSB7XG4gICAgICAgICAgICBtZXNzYWdlXzEgKz0gYCBWaWV3IHRoZSBwb3N0IDxhIGhyZWY9XCJodHRwczovL3NoLnJlZGRpdC5jb20ke3Bvc3RfcGF0aH0vXCI+b24gbmV3IFwic2hcIiByZWRkaXQ8L2E+IGZvciBtb3JlIGRldGFpbHMuYFxuICAgICAgICAgICAgY29uc3QgJGh0bWxfbWVzc2FnZSA9ICQoYDxkaXYgY2xhc3M9XCJyZWRkaXQtaW5mb2JhciBtZC1jb250YWluZXItc21hbGwgJHtjbGFzc05hbWV9XCI+YClcbiAgICAgICAgICAgICAgICAuYXBwZW5kKGZyb20pXG4gICAgICAgICAgICAgICAgLmFwcGVuZChgPGRpdiBjbGFzcz1cIm1kXCI+PHA+JHttZXNzYWdlXzF9JHttZXNzYWdlXzJ9PC9wPiR7cmV2ZWRkaXRfbGlua308L2Rpdj5gKVxuICAgICAgICAgICAgJGh0bWxfbWVzc2FnZS5wcmVwZW5kVG8oJ2Rpdi5jb250ZW50W3JvbGU9XCJtYWluXCJdJylcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIG1lc3NhZ2VfMSArPSBgIE1vcmUgZGV0YWlscyBtYXkgYXBwZWFyIGluIGEgbWVzc2FnZSBhYm92ZSBmcm9tIHJlZGRpdC5gXG4gICAgICAgICAgICBjb25zdCAkaHRtbF93cmFwID0gJChgPGRpdiBjbGFzcz1cInJldi1uZXctcmVkZGl0LW1lc3NhZ2Utd3JhcCAke2NsYXNzTmFtZX1cIj4ke2Zyb219PC9kaXY+YClcbiAgICAgICAgICAgIGNvbnN0ICRodG1sX2NvbnRlbnQgPSAkKGA8ZGl2IGNsYXNzPVwicmV2LW5ldy1yZWRkaXQtbWVzc2FnZS1jb250ZW50XCI+PC9kaXY+YClcbiAgICAgICAgICAgIGNvbnN0ICRodG1sX2Rlc2NyaXB0aW9uID0gJChgPGRpdiBjbGFzcz1cInJldi1uZXctcmVkZGl0LW1lc3NhZ2UtY29udGVudC1kZXNjcmlwdGlvblwiPiR7bWVzc2FnZV8xfSR7bWVzc2FnZV8yfTwvZGl2PmApXG4gICAgICAgICAgICAkaHRtbF9jb250ZW50LmFwcGVuZCgkaHRtbF9kZXNjcmlwdGlvbilcbiAgICAgICAgICAgICRodG1sX2NvbnRlbnQuYXBwZW5kKHJldmVkZGl0X2xpbmspXG4gICAgICAgICAgICAkaHRtbF93cmFwLmFwcGVuZCgkaHRtbF9jb250ZW50KVxuICAgICAgICAgICAgJChuZXdSZWRkaXRUYXJnZXQpLmZpcnN0KCkuYWZ0ZXIoJGh0bWxfd3JhcClcbiAgICAgICAgfVxuICAgICAgICAkKGAjJHtvcHRpb25zSUR9YCkuY2xpY2soKCkgPT4gYnJvd3Nlci5ydW50aW1lLnNlbmRNZXNzYWdlKHthY3Rpb246ICdvcGVuLW9wdGlvbnMnfSkpXG4gICAgfVxufVxuXG5jb25zdCBzaG93UmVtb3ZhbFN0YXR1c0ZvclRocmVhZE92ZXJsYXkgPSAoZWxlbWVudCwgbW9uaXRvcl9xdWFyYW50aW5lZCkgPT4ge1xuICAgIGNvbnN0IFtwb3N0SUQsIGNvbW1lbnRJRCwgdXNlciwgc3VicmVkZGl0XSA9IGdldEZ1bGxJRHNGcm9tUGF0aCh3aW5kb3cubG9jYXRpb24ucGF0aG5hbWUpXG4gICAgLy8gYnVpbHQgZm9yIENocm9tZSwgaS5lLiwgaW5jb2duaXRvIG1vZGUgaXMgJ3NwbGl0JyBhbmQgQ09SQiBhcHBsaWVzXG4gICAgaWYgKF9fQlVJTFRfRk9SX18gPT09ICdjaHJvbWUnKSB7XG4gICAgICAgIGJyb3dzZXIucnVudGltZS5zZW5kTWVzc2FnZSh7YWN0aW9uOiAnZ2V0LXJlZGRpdC1pdGVtcy1ieS1pZCcsIGlkczogW3Bvc3RJRF0sIG1vbml0b3JfcXVhcmFudGluZWR9KVxuICAgICAgICAudGhlbihyZXNwb25zZSA9PiB7XG4gICAgICAgICAgICBpZiAoISByZXNwb25zZSB8fCAhIHJlc3BvbnNlLml0ZW1zIHx8ICEgcmVzcG9uc2UuaXRlbXMubGVuZ3RoKSByZXR1cm5cbiAgICAgICAgICAgIGNvbnN0IHBvc3REYXRhID0gcmVzcG9uc2UuaXRlbXNbMF0uZGF0YVxuICAgICAgICAgICAgaWZUaHJlYWRQYWdlX3Nob3dSZW1vdmFsU3RhdHVzKHRydWUsIG1vbml0b3JfcXVhcmFudGluZWQsIGVsZW1lbnQucGFyZW50Tm9kZSwgcG9zdERhdGEpXG4gICAgICAgIH0pXG4gICAgfSBlbHNlIHtcbiAgICAgICAgLy8gYnVpbHQgZm9yIEZpcmVmb3gsIGkuZS4sIGluY29nbml0byBtb2RlIGlzICdzcGFubmluZycgYW5kIGNvbnRlbnQgc2NyaXB0c1xuICAgICAgICAvLyBhcmUgYWxsb3dlZCB0byBzZW5kIGNyb3NzLW9yaWdpbiByZXF1ZXN0c1xuICAgICAgICBnZXRBdXRoKClcbiAgICAgICAgLnRoZW4oYXV0aCA9PiB7XG4gICAgICAgICAgICByZXR1cm4gbG9va3VwSXRlbXNCeUlEKFtwb3N0SURdLCBhdXRoLCBtb25pdG9yX3F1YXJhbnRpbmVkKVxuICAgICAgICB9KVxuICAgICAgICAudGhlbihpdGVtcyA9PiB7XG4gICAgICAgICAgICAvLyBpZiByZXF1ZXN0IGZhaWxzLCBpdGVtcyBpcyBudWxsXG4gICAgICAgICAgICBpZiAoISBpdGVtcykgcmV0dXJuXG4gICAgICAgICAgICBjb25zdCBwb3N0RGF0YSA9IGl0ZW1zWzBdLmRhdGFcbiAgICAgICAgICAgIGlmVGhyZWFkUGFnZV9zaG93UmVtb3ZhbFN0YXR1cyh0cnVlLCBtb25pdG9yX3F1YXJhbnRpbmVkLCBlbGVtZW50LnBhcmVudE5vZGUsIHBvc3REYXRhKVxuICAgICAgICB9KVxuICAgIH1cbn1cblxuY29uc3QgZ2V0SURfbmV3UmVkZGl0ID0gKGVsZW1lbnQsIGlkX21hdGNoKSA9PiB7XG4gICAgbGV0IGlkID0gZWxlbWVudC5pZFxuICAgIGlmIChpZCAmJiBpZC5tYXRjaChpZF9tYXRjaCkpIHJldHVybiBpZFxuICAgIGlkID0gJChlbGVtZW50KS5hdHRyKCdjbGFzcycpLnNwbGl0KC9cXHMrLykuZmlsdGVyKGMgPT4gYy5tYXRjaChpZF9tYXRjaCkpWzBdXG4gICAgaWYgKGlkICYmIGlkLm1hdGNoKGlkX21hdGNoKSkgcmV0dXJuIGlkXG4gICAgaWQgPSBlbGVtZW50LnBhcmVudE5vZGUuaWRcbiAgICBpZiAoaWQgJiYgaWQubWF0Y2goaWRfbWF0Y2gpKSByZXR1cm4gaWRcbiAgICBpZCA9ICQoZWxlbWVudCkuY2xvc2VzdCgnZGl2W3RhYmluZGV4PS0xXScpLmF0dHIoJ2lkJylcbiAgICByZXR1cm4gaWRcbn1cblxuY29uc3QgYWRkU3Vic2NyaWJlTGlua3NfbmV3UmVkZGl0X2NvbW1lbnRzID0gKGVsZW1lbnRzLCBzdWJzY3JpcHRpb25zKSA9PiB7XG4gICAgJChlbGVtZW50cykuZWFjaCgoaWR4LCB0YXJnZXRlZEVsZW1lbnQpID0+IHtcbiAgICAgICAgY29uc3QgZWxlbWVudCA9ICQodGFyZ2V0ZWRFbGVtZW50KS5jbG9zZXN0KCcuQ29tbWVudCcpWzBdXG4gICAgICAgIGNvbnN0IGlkID0gZ2V0SURfbmV3UmVkZGl0KGVsZW1lbnQsIGlkX21hdGNoX2NvbW1lbnQpXG4gICAgICAgIGlmICghIGlkIHx8ICEgaWQubWF0Y2goaWRfbWF0Y2hfY29tbWVudCkpIHJldHVyblxuICAgICAgICBsZXQgJGJ1dHRvbiA9IGdldEJ1dHRvbihlbGVtZW50LCAnc2F2ZScpXG4gICAgICAgIGxldCBhcHBlbmRCdXR0b25UbyA9ICRidXR0b24ucGFyZW50KClcbiAgICAgICAgaWYgKCEgJGJ1dHRvbi5sZW5ndGgpIHtcbiAgICAgICAgICAgICRidXR0b24gPSBnZXRCdXR0b24oZWxlbWVudCwgJ3NoYXJlJylcbiAgICAgICAgICAgIGFwcGVuZEJ1dHRvblRvID0gJGJ1dHRvbi5wYXJlbnQoKVxuICAgICAgICAgICAgLy8gaWYgKCEgJGJ1dHRvbi5sZW5ndGgpIHtcbiAgICAgICAgICAgIC8vICAgICAkYnV0dG9uID0gJCgnPGJ1dHRvbj4uLi48L2J1dHRvbj4nKVxuICAgICAgICAgICAgLy8gICAgIGFwcGVuZEJ1dHRvblRvID0gZWxlbWVudFxuICAgICAgICAgICAgLy8gfVxuICAgICAgICB9XG4gICAgICAgIGNvbnN0ICRidXR0b25fY2xvbmUgPSAkYnV0dG9uLmNsb25lKClcbiAgICAgICAgbGV0IGNvbW1lbnRCb2R5ID0gJydcbiAgICAgICAgY29uc3QgYm9keUVsZW1lbnQgPSBlbGVtZW50LnF1ZXJ5U2VsZWN0b3IoJy5SaWNoVGV4dEpTT04tcm9vdCcpXG4gICAgICAgIGlmIChib2R5RWxlbWVudCkge1xuICAgICAgICAgICAgY29tbWVudEJvZHkgPSBib2R5RWxlbWVudC50ZXh0Q29udGVudFxuICAgICAgICB9XG4gICAgICAgIGlmIChpZCBpbiBzdWJzY3JpcHRpb25zKSB7XG4gICAgICAgICAgICBzZXRUZXh0QW5kRnVuY3Rpb25fdW5zdWJzY3JpYmUoaWQsICRidXR0b25fY2xvbmUsIGNvbW1lbnRCb2R5KS5hcHBlbmRUbyhhcHBlbmRCdXR0b25UbylcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHNldFRleHRBbmRGdW5jdGlvbl9zdWJzY3JpYmUoaWQsICRidXR0b25fY2xvbmUsIGNvbW1lbnRCb2R5KS5hcHBlbmRUbyhhcHBlbmRCdXR0b25UbylcbiAgICAgICAgfVxuICAgIH0pXG59XG5cbmNvbnN0IGdldEJ1dHRvbiA9IChlbGVtZW50LCBidXR0b25fc2VhcmNoX3RleHQpID0+IHtcbiAgICByZXR1cm4gJChlbGVtZW50KS5maW5kKGBidXR0b246ZXF1YWxzaShcIiR7YnV0dG9uX3NlYXJjaF90ZXh0fVwiKWApLmZpcnN0KClcbn1cblxuY29uc3QgYWRkU3Vic2NyaWJlTGlua3NfbmV3UmVkZGl0X3Bvc3RzID0gKGVsZW1lbnRzLCBzdWJzY3JpcHRpb25zKSA9PiB7XG4gICAgJChlbGVtZW50cykuZWFjaCgoaWR4LCBlbGVtZW50KSA9PiB7XG4gICAgICAgIGNvbnN0IGlkID0gZ2V0SURfbmV3UmVkZGl0KGVsZW1lbnQsIGlkX21hdGNoX3Bvc3QpXG4gICAgICAgIGlmICghIGlkIHx8ICEgaWQubWF0Y2goaWRfbWF0Y2hfcG9zdCkpIHJldHVyblxuICAgICAgICBjb25zdCAkYnV0dG9uID0gJChlbGVtZW50KS5maW5kKCdidXR0b24gOmVxdWFsc2koXCJzYXZlXCIpJykuZmlyc3QoKS5wYXJlbnQoKVxuICAgICAgICBjb25zdCAkYnV0dG9uX2Nsb25lID0gJGJ1dHRvbi5jbG9uZSgpXG4gICAgICAgICRidXR0b25fY2xvbmUuZmluZCgnaS5pY29uJykuZmlyc3QoKS5wYXJlbnQoKS5yZW1vdmUoKVxuICAgICAgICBjb25zdCAkbGFzdF9idXR0b24gPSAkYnV0dG9uLnBhcmVudCgpLmNoaWxkcmVuKCdidXR0b24nKS5sYXN0KClcbiAgICAgICAgaWYgKGlkIGluIHN1YnNjcmlwdGlvbnMpIHtcbiAgICAgICAgICAgIHNldFRleHRBbmRGdW5jdGlvbl91bnN1YnNjcmliZShpZCwgJGJ1dHRvbl9jbG9uZSkuaW5zZXJ0QWZ0ZXIoJGxhc3RfYnV0dG9uKVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgc2V0VGV4dEFuZEZ1bmN0aW9uX3N1YnNjcmliZShpZCwgJGJ1dHRvbl9jbG9uZSkuaW5zZXJ0QWZ0ZXIoJGxhc3RfYnV0dG9uKVxuICAgICAgICB9XG4gICAgfSlcbn1cblxuY29uc3QgYWRkU3Vic2NyaWJlTGlua3Nfb2xkUmVkZGl0ID0gKGVsZW1lbnRzLCBzdWJzY3JpcHRpb25zKSA9PiB7XG4gICAgJChlbGVtZW50cykuZWFjaCgoaWR4LCBlbGVtZW50KSA9PiB7XG4gICAgICAgIGxldCBpZCA9IGVsZW1lbnQuZ2V0QXR0cmlidXRlKCdkYXRhLWZ1bGxuYW1lJylcbiAgICAgICAgaWYgKCEgaWQpIHtcbiAgICAgICAgICAgIGNvbnN0IFtwb3N0SUQsIGNvbW1lbnRJRCwgdXNlciwgc3VicmVkZGl0XSA9IGdldEZ1bGxJRHNGcm9tUGF0aChlbGVtZW50LmdldEF0dHJpYnV0ZSgnZGF0YS1wZXJtYWxpbmsnKSB8fCAnJylcbiAgICAgICAgICAgIGlmIChjb21tZW50SUQpIHtcbiAgICAgICAgICAgICAgICBpZCA9IGNvbW1lbnRJRFxuICAgICAgICAgICAgfSBlbHNlIGlmIChwb3N0SUQpIHtcbiAgICAgICAgICAgICAgICBpZCA9IHBvc3RJRFxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmICghIGlkKSByZXR1cm5cbiAgICAgICAgY29uc3QgYnV0dG9ucyA9IGVsZW1lbnQucXVlcnlTZWxlY3RvcigndWwuYnV0dG9ucycpXG4gICAgICAgIGlmICghIGJ1dHRvbnMpIHJldHVyblxuICAgICAgICBsZXQgY29tbWVudEJvZHkgPSAnJ1xuICAgICAgICBjb25zdCBib2R5RWxlbWVudCA9IGVsZW1lbnQucXVlcnlTZWxlY3RvcignLnVzZXJ0ZXh0LWJvZHknKVxuICAgICAgICBpZiAoYm9keUVsZW1lbnQgJiYgaWQubWF0Y2goL150MV8vKSkge1xuICAgICAgICAgICAgY29tbWVudEJvZHkgPSBib2R5RWxlbWVudC50ZXh0Q29udGVudFxuICAgICAgICB9XG5cbiAgICAgICAgbGV0ICRuZXdCdXR0b24gPSBzZXRUZXh0QW5kRnVuY3Rpb25fc3Vic2NyaWJlKGlkLCAkKGA8YSBocmVmPVwiXCI+YClbMF0sIGNvbW1lbnRCb2R5KVxuICAgICAgICBpZiAoaWQgaW4gc3Vic2NyaXB0aW9ucykge1xuICAgICAgICAgICAgJG5ld0J1dHRvbiA9IHNldFRleHRBbmRGdW5jdGlvbl91bnN1YnNjcmliZShpZCwgJChgPGEgaHJlZj1cIlwiPmApWzBdLCBjb21tZW50Qm9keSlcbiAgICAgICAgfVxuICAgICAgICAkKGJ1dHRvbnMpLmFwcGVuZCgkbmV3QnV0dG9uLndyYXAoJzxsaT4nKS5wYXJlbnQoKSlcbiAgICB9KVxufVxuIiwiaW1wb3J0IHttYXJrSURzQXNTZWVuSWZTdWJzY3JpYmVkfSBmcm9tICcuL3N0b3JhZ2UuanMnXG5pbXBvcnQge3NldFRleHRBbmRGdW5jdGlvbl9zdWJzY3JpYmUsc2V0VGV4dEFuZEZ1bmN0aW9uX3Vuc3Vic2NyaWJlfSBmcm9tICcuL2NvbnRlbnQtY29tbW9uLmpzJ1xuaW1wb3J0IGJyb3dzZXIgZnJvbSAnd2ViZXh0ZW5zaW9uLXBvbHlmaWxsJ1xuXG5jb25zdCBpZF9tYXRjaCA9IC9edFsxM11fLisvXG5cbmV4cG9ydCBjb25zdCByZXZkZGl0TW9kaWZpY2F0aW9ucyA9IChzdG9yYWdlLCB1c2VyLCBpc1VzZXJQYWdlLCBpc0luZm9QYWdlKSA9PiB7XG4gICAgaWYgKGlzVXNlclBhZ2UgfHwgaXNJbmZvUGFnZSkge1xuICAgICAgICB3YWl0Rm9yQWRkZWROb2RlX3dpdGhNaW5BdHRWYWx1ZSgnbnVtSXRlbXNMb2FkZWQnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcubWFpbicpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnZGF0YS1udW1pdGVtc2xvYWRlZCcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDEsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpbmRJRHNGb3JVc2VyQW5kTWFyayhzdG9yYWdlLCB1c2VyLCBpc1VzZXJQYWdlKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KVxuICAgIH1cblxuICAgIGNvbnN0IHNlbGVjdG9yX3Bvc3RzID0gJy5wb3N0Om5vdCguZGVsZXRlZCknXG4gICAgY29uc3Qgc2VsZWN0b3JfY29tbWVudHMgPSAnLmNvbW1lbnQtYm9keS1hbmQtbGlua3MnXG4gICAgJChkb2N1bWVudCkuYXJyaXZlKHNlbGVjdG9yX2NvbW1lbnRzLCAoZWxlbWVudCkgPT4ge1xuICAgICAgICBhZGRTdWJzY3JpYmVMaW5rc19yZXZkZGl0X2NvbW1lbnRzKFtlbGVtZW50XSwgc3RvcmFnZS5vdGhlcl9zdWJzY3JpcHRpb25zKVxuICAgIH0pXG4gICAgYWRkU3Vic2NyaWJlTGlua3NfcmV2ZGRpdF9jb21tZW50cygkKHNlbGVjdG9yX2NvbW1lbnRzKSwgc3RvcmFnZS5vdGhlcl9zdWJzY3JpcHRpb25zKVxuICAgICQoZG9jdW1lbnQpLmFycml2ZShzZWxlY3Rvcl9wb3N0cywgKGVsZW1lbnQpID0+IHtcbiAgICAgICAgYWRkU3Vic2NyaWJlTGlua3NfcmV2ZGRpdF9wb3N0cyhbZWxlbWVudF0sIHN0b3JhZ2Uub3RoZXJfc3Vic2NyaXB0aW9ucylcbiAgICB9KVxuICAgIHNldFRpbWVvdXQoKCkgPT4geyAvLyB0aGlzIGRlbGF5IGlzIG5lY2Vzc2FyeSB0byBtYWtlIGJ1dHRvbiBhcHBlYXIgb24gdGhyZWFkLXBhZ2UgcG9zdCBpdGVtcywgbm90IHN1cmUgd2h5XG4gICAgICAgIGFkZFN1YnNjcmliZUxpbmtzX3JldmRkaXRfcG9zdHMoJChzZWxlY3Rvcl9wb3N0cyksIHN0b3JhZ2Uub3RoZXJfc3Vic2NyaXB0aW9ucylcbiAgICB9LCAyMDAwKVxuXG59XG5cbmNvbnN0IGFkZFN1YnNjcmliZUxpbmtzX3JldmRkaXRfY29tbWVudHMgPSAoZWxlbWVudHMsIHN1YnNjcmlwdGlvbnMpID0+IHtcbiAgICAkKGVsZW1lbnRzKS5lYWNoKChpZHgsIHRhcmdldGVkRWxlbWVudCkgPT4ge1xuICAgICAgICBjb25zdCBlbGVtZW50ID0gdGFyZ2V0ZWRFbGVtZW50LnBhcmVudE5vZGVcbiAgICAgICAgaWYgKGVsZW1lbnQuY2xhc3NMaXN0LmNvbnRhaW5zKCdkZWxldGVkJykpIHJldHVyblxuICAgICAgICBjb25zdCBpZCA9IGVsZW1lbnQuaWRcbiAgICAgICAgY29uc3QgbGlua3MgPSBlbGVtZW50LnF1ZXJ5U2VsZWN0b3IoJy5jb21tZW50LWxpbmtzJylcbiAgICAgICAgbGV0IGNvbW1lbnRCb2R5ID0gJydcbiAgICAgICAgbGV0IGJvZHlFbGVtZW50ID0gZWxlbWVudC5xdWVyeVNlbGVjdG9yKCcuY29tbWVudC1ib2R5JylcbiAgICAgICAgaWYgKGJvZHlFbGVtZW50ICYmIGlkLm1hdGNoKC9edDFfLykpIHtcbiAgICAgICAgICAgIGNvbW1lbnRCb2R5ID0gYm9keUVsZW1lbnQudGV4dENvbnRlbnRcbiAgICAgICAgfVxuICAgICAgICBsZXQgJG5ld0xpbmsgPSBzZXRUZXh0QW5kRnVuY3Rpb25fc3Vic2NyaWJlKGlkLCAkKGA8YSBocmVmPVwiXCI+YClbMF0sIGNvbW1lbnRCb2R5KVxuICAgICAgICBpZiAoaWQgaW4gc3Vic2NyaXB0aW9ucykge1xuICAgICAgICAgICAgJG5ld0xpbmsgPSBzZXRUZXh0QW5kRnVuY3Rpb25fdW5zdWJzY3JpYmUoaWQsICQoYDxhIGhyZWY9XCJcIj5gKVswXSwgY29tbWVudEJvZHkpXG4gICAgICAgIH1cbiAgICAgICAgJChsaW5rcykuYXBwZW5kKCRuZXdMaW5rKVxuICAgIH0pXG59XG5cbmNvbnN0IGFkZFN1YnNjcmliZUxpbmtzX3JldmRkaXRfcG9zdHMgPSAoZWxlbWVudHMsIHN1YnNjcmlwdGlvbnMpID0+IHtcbiAgICAkKGVsZW1lbnRzKS5lYWNoKChpZHgsIGVsZW1lbnQpID0+IHtcbiAgICAgICAgY29uc3QgaWQgPSBlbGVtZW50LmlkXG4gICAgICAgIGNvbnN0IGxpbmtzID0gZWxlbWVudC5xdWVyeVNlbGVjdG9yKCcucG9zdC1saW5rcycpXG4gICAgICAgIGxldCAkbmV3TGluayA9IHNldFRleHRBbmRGdW5jdGlvbl9zdWJzY3JpYmUoaWQsICQoYDxhIGhyZWY9XCJcIj5gKVswXSlcbiAgICAgICAgaWYgKGlkIGluIHN1YnNjcmlwdGlvbnMpIHtcbiAgICAgICAgICAgICRuZXdMaW5rID0gc2V0VGV4dEFuZEZ1bmN0aW9uX3Vuc3Vic2NyaWJlKGlkLCAkKGA8YSBocmVmPVwiXCI+YClbMF0pXG4gICAgICAgIH1cbiAgICAgICAgJChsaW5rcykuYXBwZW5kKCRuZXdMaW5rKVxuICAgIH0pXG59XG5cbmZ1bmN0aW9uIHdhaXRGb3JBZGRlZE5vZGVfd2l0aE1pbkF0dFZhbHVlKGlkLCBwYXJlbnQsIGF0dHJpYnV0ZSwgbWluQXR0cmlidXRlVmFsdWUsIGRvbmUpIHtcbiAgICBuZXcgTXV0YXRpb25PYnNlcnZlcihmdW5jdGlvbihtdXRhdGlvbnMpIHtcbiAgICAgICAgdmFyIGVsID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoaWQpO1xuICAgICAgICBpZiAoZWwgJiYgZWwuZ2V0QXR0cmlidXRlKGF0dHJpYnV0ZSkgPj0gbWluQXR0cmlidXRlVmFsdWUpIHtcbiAgICAgICAgICAgIHRoaXMuZGlzY29ubmVjdCgpO1xuICAgICAgICAgICAgZG9uZSgpO1xuICAgICAgICB9XG4gICAgfSkub2JzZXJ2ZShwYXJlbnQgfHwgZG9jdW1lbnQsIHtcbiAgICAgICAgY2hpbGRMaXN0OiB0cnVlLFxuICAgICAgICBzdWJ0cmVlOiB0cnVlXG4gICAgfSk7XG59XG5cbmZ1bmN0aW9uIGZpbmRJRHNGb3JVc2VyQW5kTWFyayhzdG9yYWdlLCB1c2VyLCBpc1VzZXJQYWdlKSB7XG4gICAgY29uc3Qgc2Vlbl9yZW1vdmVkX2lkcyA9IGdldElEc0hhc2hGcm9tU2VsZWN0b3IoJy5jb21tZW50LnJlbW92ZWQsIC5wb3N0LnJlbW92ZWQsIC5jb21tZW50LmRlbGV0ZWQsIC5wb3N0LmRlbGV0ZWQnKVxuICAgIGNvbnN0IHNlZW5fYXBwcm92ZWRfaWRzID0gZ2V0SURzSGFzaEZyb21TZWxlY3RvcignLmNvbW1lbnQ6bm90KC5yZW1vdmVkKSwgLnBvc3Q6bm90KC5yZW1vdmVkKScpXG4gICAgY29uc3Qgc2Vlbl9sb2NrZWRfaWRzID0gZ2V0SURzSGFzaEZyb21TZWxlY3RvcignLmNvbW1lbnQubG9ja2VkLCAucG9zdC5sb2NrZWQnKVxuICAgIGNvbnN0IHNlZW5fdW5sb2NrZWRfaWRzID0gZ2V0SURzSGFzaEZyb21TZWxlY3RvcignLmNvbW1lbnQ6bm90KC5sb2NrZWQpJywgJy5wb3N0Om5vdCgubG9ja2VkKScpXG4gICAgbWFya0lEc0FzU2VlbklmU3Vic2NyaWJlZChzdG9yYWdlLCB1c2VyLCBpc1VzZXJQYWdlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2Vlbl9yZW1vdmVkX2lkcyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlZW5fYXBwcm92ZWRfaWRzLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2Vlbl9sb2NrZWRfaWRzLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2Vlbl91bmxvY2tlZF9pZHMsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAocykgPT4ge1xuICAgICAgICBjaHJvbWUucnVudGltZS5zZW5kTWVzc2FnZSh7YWN0aW9uOiAndXBkYXRlLWJhZGdlJ30pXG4gICAgfSlcbn1cblxuZnVuY3Rpb24gZ2V0SURzSGFzaEZyb21TZWxlY3RvcihzZWxlY3Rvcikge1xuICAgIGNvbnN0IGhhc2ggPSB7fVxuICAgICQoc2VsZWN0b3IpLmVhY2goZnVuY3Rpb24oKSB7XG4gICAgICAgIGNvbnN0IGlkID0gdGhpcy5nZXRBdHRyaWJ1dGUoJ2lkJylcbiAgICAgICAgaGFzaFtpZF0gPSB0aGlzLmdldEF0dHJpYnV0ZSgnZGF0YS1jcmVhdGVkX3V0YycpXG4gICAgfSlcbiAgICByZXR1cm4gaGFzaFxufVxuIiwiaW1wb3J0IHtnZXRPcHRpb25zfSBmcm9tICcuL3N0b3JhZ2UuanMnXG5pbXBvcnQgYnJvd3NlciBmcm9tICd3ZWJleHRlbnNpb24tcG9seWZpbGwnXG5cbmNvbnN0IGNsaWVudElEID0gJ1NFdzF1dlJkNmt4RkV3J1xuY29uc3Qgb2F1dGhfcmVkZGl0ID0gJ2h0dHBzOi8vb2F1dGgucmVkZGl0LmNvbS8nXG5jb25zdCB3d3dfcmVkZGl0ID0gJ2h0dHBzOi8vd3d3LnJlZGRpdC5jb20vJ1xuY29uc3QgT0FVVEhfUkVWRURESVQgPSAnaHR0cHM6Ly9jcmVkMi5yZXZlZGRpdC5jb20vJ1xuY29uc3QgV1dXX1JFVkVERElUID0gJ2h0dHBzOi8vd3JlZC5yZXZlZGRpdC5jb20vJ1xuXG5jb25zdCBOT19BVVRIID0gJ25vbmUnXG5cbmV4cG9ydCBjb25zdCBsb29rdXBJdGVtc0J5SUQgPSAoaWRzLCBhdXRoLCBtb25pdG9yX3F1YXJhbnRpbmVkID0gZmFsc2UsIG1vbml0b3JfcXVhcmFudGluZWRfcmVtb3RlID0gZmFsc2UsIHF1YXJhbnRpbmVkX3N1YnJlZGRpdHMgPSBbXSkgPT4ge1xuICAgIGNvbnN0IHBhcmFtcyA9IHtpZDppZHMsIHJhd19qc29uOjF9XG4gICAgaWYgKG1vbml0b3JfcXVhcmFudGluZWRfcmVtb3RlKSB7XG4gICAgICAgIHBhcmFtcy5xdWFyYW50aW5lZF9zdWJyZWRkaXRzID0gcXVhcmFudGluZWRfc3VicmVkZGl0cy5qb2luKCcsJylcbiAgICB9XG4gICAgY29uc3Qgc2VhcmNoID0gJz8nK09iamVjdC5rZXlzKHBhcmFtcykubWFwKGsgPT4gYCR7a309JHtwYXJhbXNba119YCkuam9pbignJicpXG5cbiAgICByZXR1cm4gZmV0Y2hfZm9yUmVkZGl0KC4uLmdldEZldGNoUGFyYW1zKCdhcGkvaW5mbycsIHNlYXJjaCwgYXV0aCwgbW9uaXRvcl9xdWFyYW50aW5lZF9yZW1vdGUpLCBtb25pdG9yX3F1YXJhbnRpbmVkKVxufVxuXG5jb25zdCBjb29raWVEZXRhaWxzX3JlZGRpdFNlc3Npb24gPSB7bmFtZTogJ3JlZGRpdF9zZXNzaW9uJywgdXJsOiAnaHR0cHM6Ly9yZWRkaXQuY29tJ31cblxuY29uc3QgYWNjZXB0YWJsZV9zZXRDb29raWVEZXRhaWxzID0gWyduYW1lJywgJ3ZhbHVlJywgJ2RvbWFpbicsICdwYXRoJywgJ3NlY3VyZScsICdodHRwT25seScsICdzdG9yZUlkJ11cblxuY29uc3QgZ2V0U2V0dGFibGVDb29raWUgPSAoY29va2llLCB1cmwgPSAnaHR0cHM6Ly9yZWRkaXQuY29tJykgPT4ge1xuICAgIGlmICghIGNvb2tpZSkge1xuICAgICAgICByZXR1cm4gY29va2llXG4gICAgfVxuICAgIGNvbnN0IGZpbHRlcmVkID0gT2JqZWN0LmtleXMoY29va2llKVxuICAgICAgICAuZmlsdGVyKGtleSA9PiBhY2NlcHRhYmxlX3NldENvb2tpZURldGFpbHMuaW5jbHVkZXMoa2V5KSlcbiAgICAgICAgLnJlZHVjZSgob2JqLCBrZXkpID0+IHtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgLi4ub2JqLFxuICAgICAgICAgICAgICAgIFtrZXldOiBjb29raWVba2V5XVxuICAgICAgICAgICAgfTtcbiAgICAgICAgfSwge30pO1xuICAgIGZpbHRlcmVkLnVybCA9IHVybFxuICAgIHJldHVybiBmaWx0ZXJlZFxufVxuXG5cbi8vbW9uaXRvcl9xdWFyYW50aW5lZCAtPiB3aGVuIHRydWUsIGNsaWVudCBzZXRzIGNvb2tpZSAodXNlZCBmb3IgZXZlcnkgbG9vayB1cClcbi8vbW9uaXRvcl9xdWFyYW50aW5lZF9yZW1vdGUgLT4gd2hlbiB0cnVlLCByZW1vdGUgc2VydmVyIHNldHMgY29va2llICh1c2VkIG9uY2UgaW4gYXdoaWxlKVxuY29uc3QgZmV0Y2hfZm9yUmVkZGl0ID0gYXN5bmMgKHVybCwgb3B0aW9ucywgbW9uaXRvcl9xdWFyYW50aW5lZCA9IGZhbHNlKSA9PiB7XG4gICAgbGV0IGNvb2tpZV9yZWRkaXRTZXNzaW9uXG4gICAgYXdhaXQgYnJvd3Nlci5jb29raWVzLnNldCh7ZG9tYWluOiAncmVkZGl0LmNvbScsIHVybDogJ2h0dHBzOi8vcmVkZGl0LmNvbScsIG5hbWU6ICdfb3B0aW9ucycsIHZhbHVlOiAneyUyMnByZWZfcXVhcmFudGluZV9vcHRpbiUyMjp0cnVlfSd9KVxuICAgIGlmIChtb25pdG9yX3F1YXJhbnRpbmVkKSB7XG4gICAgICAgIGNvb2tpZV9yZWRkaXRTZXNzaW9uID0gZ2V0U2V0dGFibGVDb29raWUoYXdhaXQgYnJvd3Nlci5jb29raWVzLmdldChjb29raWVEZXRhaWxzX3JlZGRpdFNlc3Npb24pKVxuICAgICAgICBpZiAoY29va2llX3JlZGRpdFNlc3Npb24pIHtcbiAgICAgICAgICAgIGF3YWl0IGJyb3dzZXIuY29va2llcy5yZW1vdmUoY29va2llRGV0YWlsc19yZWRkaXRTZXNzaW9uKVxuICAgICAgICB9XG4gICAgfVxuICAgIGlmICghIG9wdGlvbnMpIHtcbiAgICAgICAgb3B0aW9ucyA9IHtjcmVkZW50aWFsczogJ29taXQnfVxuICAgIH1cbiAgICBvcHRpb25zWydjYWNoZSddID0gJ3JlbG9hZCdcbiAgICBpZiAoISBvcHRpb25zLmhlYWRlcnMpIHtcbiAgICAgICAgb3B0aW9ucy5oZWFkZXJzID0ge31cbiAgICB9XG4gICAgaWYgKG9wdGlvbnMuaGVhZGVyc1snQWNjZXB0LUxhbmd1YWdlJ10gIT09ICdlbicpIHtcbiAgICAgICAgb3B0aW9ucy5oZWFkZXJzWydBY2NlcHQtTGFuZ3VhZ2UnXSA9ICdlbidcbiAgICB9XG4gICAgY29uc3QgcmVzdWx0ID0gZmV0Y2godXJsLCBvcHRpb25zKVxuICAgIC50aGVuKGhhbmRsZUZldGNoRXJyb3JzKVxuICAgIC50aGVuKGdldFJlZGRpdERhdGEpXG4gICAgLmNhdGNoKGNvbnNvbGUubG9nKVxuICAgIGlmIChjb29raWVfcmVkZGl0U2Vzc2lvbikge1xuICAgICAgICBhd2FpdCBicm93c2VyLmNvb2tpZXMuc2V0KGNvb2tpZV9yZWRkaXRTZXNzaW9uKVxuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0XG59XG5cbmV4cG9ydCBjb25zdCBsb29rdXBJdGVtc0J5VXNlciA9ICh1c2VyLCBhZnRlciwgc29ydCwgdGltZVNwYW4sIG1vbml0b3JfcXVhcmFudGluZWQsIG1vbml0b3JfcXVhcmFudGluZWRfcmVtb3RlLCBhdXRoKSA9PiB7XG4gICAgY29uc3QgcGFyYW1zID0ge2xpbWl0OiAxMDAsIHNvcnQsIHJhd19qc29uOjF9XG4gICAgaWYgKGFmdGVyKSBwYXJhbXMuYWZ0ZXIgPSBhZnRlclxuICAgIGlmICh0aW1lU3BhbikgcGFyYW1zLnQgPSB0aW1lU3BhblxuICAgIGNvbnN0IHBhdGggPSBgdXNlci8ke3VzZXJ9L292ZXJ2aWV3Lmpzb25gXG4gICAgY29uc3Qgc2VhcmNoID0gJz8nK09iamVjdC5rZXlzKHBhcmFtcykubWFwKGsgPT4gYCR7a309JHtwYXJhbXNba119YCkuam9pbignJicpXG4gICAgcmV0dXJuIGZldGNoX2ZvclJlZGRpdCguLi5nZXRGZXRjaFBhcmFtcyhwYXRoLCBzZWFyY2gsIGF1dGgsIG1vbml0b3JfcXVhcmFudGluZWRfcmVtb3RlKSwgbW9uaXRvcl9xdWFyYW50aW5lZClcbn1cblxuZXhwb3J0IGNvbnN0IGhhbmRsZUZldGNoRXJyb3JzID0gKHJlc3BvbnNlKSA9PiB7XG4gICAgaWYgKCEgcmVzcG9uc2Uub2spIHtcbiAgICAgICAgdGhyb3cgRXJyb3IocmVzcG9uc2Uuc3RhdHVzVGV4dClcbiAgICB9XG4gICAgcmV0dXJuIHJlc3BvbnNlLmpzb24oKVxufVxuXG5jb25zdCBnZXRSZWRkaXREYXRhID0gKGRhdGEpID0+IHtcbiAgICBpZiAoZGF0YSAmJiBkYXRhLnVzZXIgJiYgZGF0YS51c2VyLml0ZW1zKSB7IC8vIGZvcm1hdCBmcm9tIGNyZWQyLnJldmVkZGl0LmNvbVxuICAgICAgICByZXR1cm4gZGF0YVxuICAgIH1cbiAgICBpZiAoISBkYXRhIHx8ICEgZGF0YS5kYXRhIHx8ICEgZGF0YS5kYXRhLmNoaWxkcmVuKSB7XG4gICAgICAgIHRocm93IEVycm9yKCdyZWRkaXQgZGF0YSBpcyBub3QgZGVmaW5lZCcpXG4gICAgfVxuICAgIHJldHVybiBkYXRhLmRhdGEuY2hpbGRyZW5cbn1cblxuZXhwb3J0IGNvbnN0IGdldFJlZGRpdFRva2VuID0gKGRhdGEpID0+IHtcbiAgICBpZiAoISBkYXRhIHx8ICEgZGF0YS5hY2Nlc3NfdG9rZW4pIHtcbiAgICAgICAgdGhyb3cgRXJyb3IoJ2FjY2VzcyB0b2tlbiBpcyBub3QgZGVmaW5lZCcpXG4gICAgfVxuICAgIHJldHVybiBkYXRhLmFjY2Vzc190b2tlblxufVxuXG5leHBvcnQgY29uc3QgZ2V0QXV0aCA9IChtb25pdG9yX3F1YXJhbnRpbmVkX3JlbW90ZSA9IGZhbHNlKSA9PiB7XG4gICAgcmV0dXJuIGdldE9wdGlvbnMoKHVzZXJzLCBvdGhlcnMsIG9wdGlvbnMpID0+IHtcbiAgICAgICAgdmFyIHVzZV90aGlzX2NsaWVudElEID0gY2xpZW50SURcbiAgICAgICAgaWYgKG9wdGlvbnMuY3VzdG9tX2NsaWVudGlkKSB7XG4gICAgICAgICAgICB1c2VfdGhpc19jbGllbnRJRCA9IG9wdGlvbnMuY3VzdG9tX2NsaWVudGlkXG4gICAgICAgICAgICBpZiAodXNlX3RoaXNfY2xpZW50SUQgPT09ICd0ZXN0aW5nJykge1xuICAgICAgICAgICAgICAgIHJldHVybiBOT19BVVRIXG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAoISBtb25pdG9yX3F1YXJhbnRpbmVkX3JlbW90ZSkge1xuICAgICAgICAgICAgcmV0dXJuIE5PX0FVVEhcbiAgICAgICAgfVxuICAgICAgICBjb25zdCB0b2tlbkluaXQgPSB7XG4gICAgICAgICAgICBoZWFkZXJzOiB7XG4gICAgICAgICAgICAgICAgQXV0aG9yaXphdGlvbjogYEJhc2ljICR7YnRvYShgJHt1c2VfdGhpc19jbGllbnRJRH06YCl9YCxcbiAgICAgICAgICAgICAgICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZDsgY2hhcnNldD11dGYtOCdcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBtZXRob2Q6ICdQT1NUJyxcbiAgICAgICAgICAgIGJvZHk6IGBncmFudF90eXBlPSR7ZW5jb2RlVVJJQ29tcG9uZW50KCdodHRwczovL29hdXRoLnJlZGRpdC5jb20vZ3JhbnRzL2luc3RhbGxlZF9jbGllbnQnKX0mZGV2aWNlX2lkPURPX05PVF9UUkFDS19USElTX0RFVklDRWBcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBmZXRjaCgnaHR0cHM6Ly93d3cucmVkZGl0LmNvbS9hcGkvdjEvYWNjZXNzX3Rva2VuJywgdG9rZW5Jbml0KVxuICAgICAgICAudGhlbihoYW5kbGVGZXRjaEVycm9ycylcbiAgICAgICAgLnRoZW4oZ2V0UmVkZGl0VG9rZW4pXG4gICAgICAgIC50aGVuKHRva2VuID0+ICh7XG4gICAgICAgICAgICBoZWFkZXJzOiB7XG4gICAgICAgICAgICAgICAgQXV0aG9yaXphdGlvbjogYGJlYXJlciAke3Rva2VufWAsXG4gICAgICAgICAgICAgICAgJ0FjY2VwdC1MYW5ndWFnZSc6ICdlbicsXG4gICAgICAgICAgICB9XG4gICAgICAgIH0pKVxuICAgICAgICAuY2F0Y2goY29uc29sZS5sb2cpXG4gICAgfSlcblxufVxuXG4vLyBjb2RlOiBodHRwczovL2dpdGh1Yi5jb20vdG9vbGJveC10ZWFtL3JlZGRpdC1tb2RlcmF0b3ItdG9vbGJveC9ibG9iLzQzNGVjMGJiNzFlYmJhMmZjZjBjYjVlNGNhZDUyOTAzNWExYWU3NDIvZXh0ZW5zaW9uL2RhdGEvYmFja2dyb3VuZC9oYW5kbGVycy93ZWJyZXF1ZXN0LmpzI0wzNFxuLy8gZGlzY3Vzc2lvbjogaHR0cHM6Ly93d3cucmVkZGl0LmNvbS9yL3JlZGRpdGRldi9jb21tZW50cy81amY0eWcvYXBpX25ld19tb2RtYWlsL2RiZm53OTgvXG5leHBvcnQgY29uc3QgZ2V0TG9jYWxBdXRoID0gKCkgPT4ge1xuICAgIHJldHVybiBmZXRjaCgnaHR0cHM6Ly9tb2QucmVkZGl0LmNvbS9tYWlsL2FsbCcpXG4gICAgLnRoZW4ocmVzdWx0ID0+IHtcbiAgICAgICAgZ2V0Q29va2llKHt1cmw6ICdodHRwczovL21vZC5yZWRkaXQuY29tJywgbmFtZTogJ3Rva2VuJ30pXG4gICAgICAgIC50aGVuKGNvb2tpZSA9PiB7XG4gICAgICAgICAgICBpZiAoY29va2llKSB7XG4gICAgICAgICAgICAgICAgLy8gcmVtb3ZlIGludmFsaWQgY2hhcnMgYXQgdGhlIGVuZCBwZXIgZGlzY3Vzc2lvblxuICAgICAgICAgICAgICAgIGNvbnN0IGludmFsaWRDaGFyID0gbmV3IFJlZ0V4cCgnW15BLVphLXowLTkrL10uKj8kJylcbiAgICAgICAgICAgICAgICBjb25zdCBiYXNlNjRDb29raWUgPSBjb29raWUudmFsdWUucmVwbGFjZShpbnZhbGlkQ2hhciwgJycpXG4gICAgICAgICAgICAgICAgY29uc3QgdG9rZW5EYXRhID0gYXRvYihiYXNlNjRDb29raWUpXG4gICAgICAgICAgICAgICAgY29uc3QgdG9rZW5zID0gSlNPTi5wYXJzZSh0b2tlbkRhdGEpXG4gICAgICAgICAgICAgICAgaWYgKCdhY2Nlc3NUb2tlbicgaW4gdG9rZW5zICYmIHRva2Vucy5hY2Nlc3NUb2tlbikge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBhdXRoID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgaGVhZGVyczoge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIEF1dGhvcml6YXRpb246IGBiZWFyZXIgJHt0b2tlbnMuYWNjZXNzVG9rZW59YCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnQWNjZXB0LUxhbmd1YWdlJzogJ2VuJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gYXV0aFxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBudWxsXG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiBudWxsXG4gICAgICAgICAgICB9XG4gICAgICAgIH0pXG4gICAgfSlcbn1cblxuZXhwb3J0IGNvbnN0IGdldENvb2tpZSA9ICh7dXJsLCBuYW1lfSkgPT4ge1xuICAgIGlmIChsb2NhdGlvbi5wcm90b2NvbC5tYXRjaCgvXmh0dHAvKSkge1xuICAgICAgICByZXR1cm4gYnJvd3Nlci5ydW50aW1lLnNlbmRNZXNzYWdlKHtcbiAgICAgICAgICAgIGFjdGlvbjogJ2dldC1jb29raWUnLFxuICAgICAgICAgICAgb3B0aW9uczoge3VybCwgbmFtZX1cbiAgICAgICAgfSlcbiAgICAgICAgLnRoZW4ocmVzcG9uc2UgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIHJlc3BvbnNlLmNvb2tpZVxuICAgICAgICB9KVxuICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBicm93c2VyLmNvb2tpZXMuZ2V0KHt1cmwsIG5hbWV9KVxuICAgIH1cbn1cblxuY29uc3QgZ2V0RmV0Y2hQYXJhbXMgPSAocGF0aCwgc2VhcmNoLCBhdXRoLCBtb25pdG9yX3F1YXJhbnRpbmVkX3JlbW90ZSkgPT4ge1xuICAgIGlmICghIGF1dGggfHwgYXV0aCA9PT0gTk9fQVVUSCkge1xuICAgICAgICBsZXQgdXJsID0gKG1vbml0b3JfcXVhcmFudGluZWRfcmVtb3RlID8gV1dXX1JFVkVERElUIDogd3d3X3JlZGRpdCkrcGF0aFxuICAgICAgICBpZiAocGF0aCA9PT0gJ2FwaS9pbmZvJykge1xuICAgICAgICAgICAgdXJsICs9ICcuanNvbidcbiAgICAgICAgfVxuICAgICAgICB1cmwgKz0gc2VhcmNoXG4gICAgICAgIHJldHVybiBbdXJsXVxuICAgIH0gZWxzZSB7XG4gICAgICAgIGxldCBob3N0ID0gb2F1dGhfcmVkZGl0XG4gICAgICAgIGxldCBwYXRoX2FuZF9zZWFyY2ggPSBwYXRoK3NlYXJjaFxuICAgICAgICBpZiAobW9uaXRvcl9xdWFyYW50aW5lZF9yZW1vdGUpIHtcbiAgICAgICAgICAgIGhvc3QgPSBPQVVUSF9SRVZFRERJVFxuICAgICAgICAgICAgcGF0aF9hbmRfc2VhcmNoICs9ICcmZ2l2ZV9pdF90b19tZT0xJ1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHVybCA9IGhvc3QrcGF0aF9hbmRfc2VhcmNoXG4gICAgICAgIHJldHVybiBbdXJsLCBhdXRoXVxuICAgIH1cbn1cblxuZXhwb3J0IGNvbnN0IGdldExvY2FsT3JBcHBBdXRoID0gKCkgPT4ge1xuICAgIHJldHVybiBnZXRMb2NhbEF1dGgoKVxuICAgIC50aGVuKGF1dGggPT4ge1xuICAgICAgICBpZiAoYXV0aCkgcmV0dXJuIGF1dGhcbiAgICAgICAgcmV0dXJuIGdldEF1dGgoKVxuICAgIH0pXG4gICAgLmNhdGNoKGNvbnNvbGUubG9nKVxufVxuXG5leHBvcnQgY29uc3QgZ2V0TG9nZ2VkaW5Vc2VyID0gKCkgPT4ge1xuICAgIHJldHVybiBmZXRjaCgnaHR0cHM6Ly93d3cucmVkZGl0LmNvbS9hcGkvbWUuanNvbicpXG4gICAgLnRoZW4oaGFuZGxlRmV0Y2hFcnJvcnMpXG4gICAgLnRoZW4oZ2V0UmVkZGl0VXNlcm5hbWUpXG4gICAgLmNhdGNoKGNvbnNvbGUubG9nKVxufVxuXG5jb25zdCBnZXRSZWRkaXRVc2VybmFtZSA9IChkYXRhKSA9PiB7XG4gICAgaWYgKCEgZGF0YSB8fCAhIGRhdGEuZGF0YSB8fCAhIGRhdGEuZGF0YS5uYW1lKSB7XG4gICAgICAgIHRocm93IEVycm9yKCdyZWRkaXQgdXNlcm5hbWUgaXMgbm90IGRlZmluZWQnKVxuICAgIH1cbiAgICByZXR1cm4gZGF0YS5kYXRhLm5hbWVcbn1cbiIsImltcG9ydCB7YWxwaGFMb3dlclNvcnQsIEl0ZW1Gb3JTdG9yYWdlLCBMb2NhbFN0b3JhZ2VJdGVtLCB0cmltRGljdF9ieV9udW1iZXJWYWx1ZWRBdHRyaWJ1dGV9IGZyb20gJy4vY29tbW9uLmpzJ1xuaW1wb3J0IGJyb3dzZXIgZnJvbSAnd2ViZXh0ZW5zaW9uLXBvbHlmaWxsJ1xuXG5leHBvcnQgY29uc3QgSU5URVJWQUxfREVGQVVMVCA9IDE7XG5leHBvcnQgY29uc3QgU0VFTl9DT1VOVF9ERUZBVUxUID0gMlxuXG4vLyBUaGVzZSBsaW1pdHMgYXJlIHNldCB3aXRoIGNvbnNpZGVyYXRpb24gZm9yIENocm9tZSdzIHN5bmMgJiBsb2NhbCBzdG9yYWdlIGxpbWl0cyxcbi8vIGFuZCBmb3IgdGhlIG9iamVjdHMgc3RvcmVkIGJ5IHRoZSBleHRlbnNpb25cbmV4cG9ydCBjb25zdCBNQVhfU1VCU0NSSVBUSU9OUyA9IDU7XG5jb25zdCBNQVhfTE9DQUxfU1RPUkFHRV9JVEVNU19QRVJfT0JKRUNUID0gNTAwXG5leHBvcnQgY29uc3QgTUFYX1NZTkNfU1RPUkFHRV9JVEVNU19QRVJfT0JKRUNUID0gMTMwXG5leHBvcnQgY29uc3QgTUFYX1NZTkNfU1RPUkFHRV9DSEFOR0VTID0gMTAwXG5leHBvcnQgY29uc3QgTUFYX09USEVSX1NVQlNDUklQVElPTlMgPSAxMDBcblxuZXhwb3J0IGNvbnN0IFJFTU9WRUQgPSAxXG5leHBvcnQgY29uc3QgQVBQUk9WRUQgPSAyXG5leHBvcnQgY29uc3QgTE9DS0VEID0gM1xuZXhwb3J0IGNvbnN0IFVOTE9DS0VEID0gNFxuZXhwb3J0IGNvbnN0IEVESVRFRCA9IDVcbmV4cG9ydCBjb25zdCBERUxFVEVEID0gNlxuXG5jb25zdCB0cmFja1R5cGVzID0geydjaGFuZ2VzJzogW10sICdyZW1vdmVkJzoge30sICdhcHByb3ZlZCc6IHt9LCAnbG9ja2VkJzoge30sICd1bmxvY2tlZCc6IHt9fTtcblxuY29uc3QgZ2V0T2JqZWN0TmFtZSA9ICh0eXBlLCB0aGluZywgaXNVc2VyKSA9PiB7XG4gICAgaWYgKGlzVXNlcikge1xuICAgICAgICByZXR1cm4gdHlwZSsnX3VfJyt0aGluZ1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiB0eXBlKydfJyt0aGluZ1xuICAgIH1cbn1cblxuY29uc3QgYWRkVHJhY2tUeXBlcyA9IChvYmplY3QsIHRoaW5nLCBpc1VzZXI9dHJ1ZSkgPT4ge1xuICAgIE9iamVjdC5rZXlzKHRyYWNrVHlwZXMpLmZvckVhY2godHlwZSA9PiB7XG4gICAgICAgIG9iamVjdFtnZXRPYmplY3ROYW1lKHR5cGUsIHRoaW5nLCBpc1VzZXIpXSA9IHRyYWNrVHlwZXNbdHlwZV1cbiAgICB9KVxufVxuXG5leHBvcnQgY29uc3QgZ2V0T2JqZWN0TmFtZXNGb3JUaGluZyA9ICh0aGluZywgaXNVc2VyPXRydWUpID0+IHtcbiAgICBjb25zdCBuYW1lcyA9IHt9XG4gICAgT2JqZWN0LmtleXModHJhY2tUeXBlcykuZm9yRWFjaCh0eXBlID0+IHtcbiAgICAgICAgbmFtZXNbdHlwZV0gPSBnZXRPYmplY3ROYW1lKHR5cGUsIHRoaW5nLCBpc1VzZXIpXG4gICAgfSlcbiAgICByZXR1cm4gbmFtZXNcbn1cblxuY29uc3QgZ2V0VXNlckluaXQgPSAodXNlcikgPT4ge1xuICAgIGNvbnN0IHJlc3VsdCA9IHt9XG4gICAgYWRkVHJhY2tUeXBlcyhyZXN1bHQsIHVzZXIsIHRydWUpXG4gICAgcmV0dXJuIHJlc3VsdFxufVxuXG5jb25zdCBnZXRTdG9yYWdlSW5pdCA9ICgpID0+IHtcbiAgICBjb25zdCByZXN1bHQgPSB7XG4gICAgICAgIHVzZXJfc3Vic2NyaXB0aW9uczoge30sXG4gICAgICAgIHVzZXJfdW5zdWJzY3JpcHRpb25zOiB7fSwgLy8gdHJhY2tzIGlmIHVzZXJuYW1lIGhhcyBldmVyIGJlZW4gbWFudWFsbHkgdW5zdWJzY3JpYmVkLCBzbyBpdCBkb2Vzbid0IGF1dG8tc3Vic2NyaWJlIGFnYWluXG4gICAgICAgIG90aGVyX3N1YnNjcmlwdGlvbnM6IHt9LFxuICAgICAgICBvcHRpb25zOiB7aW50ZXJ2YWw6IElOVEVSVkFMX0RFRkFVTFQsXG4gICAgICAgICAgICAgICAgICBzZWVuX2NvdW50OiBTRUVOX0NPVU5UX0RFRkFVTFQsXG4gICAgICAgICAgICAgICAgICBjdXN0b21fY2xpZW50aWQ6ICcnLFxuICAgICAgICAgICAgICAgICAgcmVtb3ZhbF9zdGF0dXM6IHt0cmFjazogdHJ1ZSwgbm90aWZ5OiB0cnVlfSxcbiAgICAgICAgICAgICAgICAgIGxvY2tfc3RhdHVzOiB7dHJhY2s6IHRydWUsIG5vdGlmeTogdHJ1ZX0sXG4gICAgICAgICAgICAgICAgICBtb25pdG9yX3F1YXJhbnRpbmVkOiBmYWxzZSxcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgbGFzdF9jaGVjazogbnVsbCxcbiAgICAgICAgbGFzdF9jaGVja19xdWFyYW50aW5lZDogbnVsbCxcbiAgICB9XG4gICAgYWRkVHJhY2tUeXBlcyhyZXN1bHQsICdvdGhlcicsIGZhbHNlKVxuICAgIHJldHVybiByZXN1bHQ7XG59XG5cbmV4cG9ydCBjb25zdCBtYXJrRXZlcnl0aGluZ0FzU2VlbiA9ICgpID0+IHtcbiAgICByZXR1cm4gYnJvd3Nlci5zdG9yYWdlLnN5bmMuZ2V0KG51bGwpXG4gICAgLnRoZW4oc3RvcmFnZSA9PiB7XG4gICAgICAgIGNvbnN0IHVzZXJzID0gT2JqZWN0LmtleXMoc3RvcmFnZS51c2VyX3N1YnNjcmlwdGlvbnMpO1xuICAgICAgICBjb25zdCBhbGxLZXlzID0gW11cbiAgICAgICAgdXNlcnMuZm9yRWFjaCh1c2VyID0+IHtcbiAgICAgICAgICAgIG1hcmtUaGluZ0FzU2VlbihzdG9yYWdlLCB1c2VyLCB0cnVlKVxuICAgICAgICB9KVxuICAgICAgICBtYXJrVGhpbmdBc1NlZW4oc3RvcmFnZSwgJ290aGVyJywgZmFsc2UpXG4gICAgICAgIHJldHVybiBzZXRTdG9yYWdlVXBkYXRlQmFkZ2Uoc3RvcmFnZSlcbiAgICB9KVxufVxuXG5leHBvcnQgY29uc3QgbWFya1RoaW5nQXNTZWVuID0gKHN0b3JhZ2UsIHRoaW5nLCBpc1VzZXIpID0+IHtcbiAgICBjb25zdCBrZXlzID0gZ2V0T2JqZWN0TmFtZXNGb3JUaGluZyh0aGluZywgaXNVc2VyKVxuICAgIGRlbGV0ZSBrZXlzWydjaGFuZ2VzJ11cbiAgICBjb25zdCBmdWxsS2V5bmFtZXMgPSBbXVxuICAgIE9iamVjdC52YWx1ZXMoa2V5cykuZm9yRWFjaChmdWxsS2V5bmFtZSA9PiB7XG4gICAgICAgIGZ1bGxLZXluYW1lcy5wdXNoKGZ1bGxLZXluYW1lKVxuICAgIH0pXG4gICAgZnVsbEtleW5hbWVzLmZvckVhY2goZnVsbEtleW5hbWUgPT4ge1xuICAgICAgICBPYmplY3QudmFsdWVzKHN0b3JhZ2VbZnVsbEtleW5hbWVdKS5mb3JFYWNoKGl0ZW0gPT4ge1xuICAgICAgICAgICAgaXRlbS51ID0gZmFsc2VcbiAgICAgICAgfSlcbiAgICB9KVxufVxuXG5leHBvcnQgY29uc3Qgc2V0U3RvcmFnZVVwZGF0ZUJhZGdlID0gKHN0b3JhZ2UpID0+IHtcbiAgICByZXR1cm4gYnJvd3Nlci5zdG9yYWdlLnN5bmMuc2V0KHN0b3JhZ2UpXG4gICAgLnRoZW4ocmVzID0+IHtcbiAgICAgICAgcmV0dXJuIGJyb3dzZXIucnVudGltZS5zZW5kTWVzc2FnZSh7YWN0aW9uOiAndXBkYXRlLWJhZGdlJ30pXG4gICAgfSlcbn1cblxuY29uc3QgbWFya1NlZW5Gb3JTdG9yYWdlS2V5ID0gKHN0b3JhZ2UsIHN0b3JhZ2Vfa2V5cywga2V5LCBpZHMsIGlzX3VzZXIpID0+IHtcbiAgICBjb25zdCBzdG9yYWdlX2l0ZW0gPSBzdG9yYWdlW3N0b3JhZ2Vfa2V5c1trZXldXVxuICAgIE9iamVjdC5rZXlzKGlkcykuZm9yRWFjaChpZCA9PiB7XG4gICAgICAgIGlmIChpZCBpbiBzdG9yYWdlX2l0ZW0pIHtcbiAgICAgICAgICAgIHN0b3JhZ2VfaXRlbVtpZF0udSA9IGZhbHNlXG4gICAgICAgIH0gZWxzZSBpZiAoaXNfdXNlcikge1xuICAgICAgICAgICAgc3RvcmFnZV9pdGVtW2lkXSA9IG5ldyBJdGVtRm9yU3RvcmFnZShpZHNbaWRdLCBmYWxzZSlcbiAgICAgICAgfVxuICAgIH0pXG59XG5cbmV4cG9ydCBjb25zdCBtYXJrSURzQXNTZWVuSWZTdWJzY3JpYmVkID0gKHN0b3JhZ2UsIHVzZXIsIGlzX3VzZXIsIHJlbW92ZWRfaWRzLCBhcHByb3ZlZF9pZHMsIGxvY2tlZF9pZHMsIHVubG9ja2VkX2lkcywgY2FsbGJhY2sgPSAoKSA9PiB7fSkgPT4ge1xuICAgIGNvbnN0IHN0b3JhZ2Vfa2V5cyA9IGdldE9iamVjdE5hbWVzRm9yVGhpbmcodXNlciwgaXNfdXNlcilcbiAgICBkZWxldGUgc3RvcmFnZV9rZXlzWydjaGFuZ2VzJ11cbiAgICBjb25zdCB1c2VyX3N1YnNjcmliZWQgPSBzdG9yYWdlLnVzZXJfc3Vic2NyaXB0aW9uc1t1c2VyXVxuICAgIGlmICh1c2VyX3N1YnNjcmliZWQgfHwgISBpc191c2VyKSB7XG4gICAgICAgIG1hcmtTZWVuRm9yU3RvcmFnZUtleShzdG9yYWdlLCBzdG9yYWdlX2tleXMsICdyZW1vdmVkJywgcmVtb3ZlZF9pZHMsIGlzX3VzZXIpXG4gICAgICAgIG1hcmtTZWVuRm9yU3RvcmFnZUtleShzdG9yYWdlLCBzdG9yYWdlX2tleXMsICdhcHByb3ZlZCcsIGFwcHJvdmVkX2lkcywgaXNfdXNlcilcbiAgICAgICAgbWFya1NlZW5Gb3JTdG9yYWdlS2V5KHN0b3JhZ2UsIHN0b3JhZ2Vfa2V5cywgJ2xvY2tlZCcsIGxvY2tlZF9pZHMsIGlzX3VzZXIpXG4gICAgICAgIG1hcmtTZWVuRm9yU3RvcmFnZUtleShzdG9yYWdlLCBzdG9yYWdlX2tleXMsICd1bmxvY2tlZCcsIHVubG9ja2VkX2lkcywgaXNfdXNlcilcbiAgICAgICAgY2hyb21lLnN0b3JhZ2Uuc3luYy5zZXQoc3RvcmFnZSwgY2FsbGJhY2spXG4gICAgfVxuXG59XG5cbmV4cG9ydCBjb25zdCBzdWJzY3JpYmVJZCA9IChpZCwgY2FsbGJhY2sgPSAoKSA9PiB7fSkgPT4ge1xuICAgIGNvbnN0IGtleSA9ICdvdGhlcl9zdWJzY3JpcHRpb25zJ1xuICAgIGNocm9tZS5zdG9yYWdlLnN5bmMuZ2V0KGtleSwgKHJlc3VsdCkgPT4ge1xuICAgICAgICByZXN1bHRba2V5XVtpZF0gPSB7dDogTWF0aC5mbG9vcihuZXcgRGF0ZSgpLmdldFRpbWUoKS8xMDAwKX1cbiAgICAgICAgY29uc3QgaXRlbXNUb1NhdmUgPSB0cmltRGljdF9ieV9udW1iZXJWYWx1ZWRBdHRyaWJ1dGUocmVzdWx0W2tleV0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIE1BWF9PVEhFUl9TVUJTQ1JJUFRJT05TLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAndCcpXG4gICAgICAgIGNocm9tZS5zdG9yYWdlLnN5bmMuc2V0KHtba2V5XTogaXRlbXNUb1NhdmV9LCBjYWxsYmFjaylcbiAgICB9KVxufVxuZXhwb3J0IGNvbnN0IHVuc3Vic2NyaWJlSWQgPSAoaWQsIGNhbGxiYWNrID0gKCkgPT4ge30pID0+IHtcbiAgICBjb25zdCBtYWluS2V5ID0gJ290aGVyX3N1YnNjcmlwdGlvbnMnXG4gICAgY29uc3Qgb3RoZXJLZXlzID0gZ2V0T2JqZWN0TmFtZXNGb3JUaGluZygnb3RoZXInLCBmYWxzZSlcbiAgICBkZWxldGUgb3RoZXJLZXlzWydjaGFuZ2VzJ11cbiAgICBjaHJvbWUuc3RvcmFnZS5zeW5jLmdldChPYmplY3QudmFsdWVzKG90aGVyS2V5cykuY29uY2F0KG1haW5LZXkpLCAocmVzdWx0KSA9PiB7XG4gICAgICAgIGRlbGV0ZSByZXN1bHRbbWFpbktleV1baWRdXG4gICAgICAgIE9iamVjdC52YWx1ZXMob3RoZXJLZXlzKS5mb3JFYWNoKGZ1bGxLZXluYW1lID0+IHtcbiAgICAgICAgICAgIGlmIChpZCBpbiByZXN1bHRbZnVsbEtleW5hbWVdKSB7XG4gICAgICAgICAgICAgICAgZGVsZXRlIHJlc3VsdFtmdWxsS2V5bmFtZV1baWRdXG4gICAgICAgICAgICB9XG4gICAgICAgIH0pXG4gICAgICAgIGNocm9tZS5zdG9yYWdlLnN5bmMuc2V0KHJlc3VsdCwgKCkgPT4ge1xuICAgICAgICAgICAgY2hyb21lLnJ1bnRpbWUuc2VuZE1lc3NhZ2Uoe2FjdGlvbjogJ3VwZGF0ZS1iYWRnZSd9LCBjYWxsYmFjaylcbiAgICAgICAgfSlcbiAgICB9KVxufVxuZXhwb3J0IGNvbnN0IGdldFN1YnNjcmliZWRJZHMgPSAoY2FsbGJhY2sgPSAoKSA9PiB7fSkgPT4ge1xuICAgIGNvbnN0IGtleSA9ICdvdGhlcl9zdWJzY3JpcHRpb25zJ1xuICAgIGNocm9tZS5zdG9yYWdlLnN5bmMuZ2V0KGtleSwgKHJlc3VsdCkgPT4ge1xuICAgICAgICBjYWxsYmFjayhPYmplY3Qua2V5cyhyZXN1bHRba2V5XSkpXG4gICAgfSlcbn1cblxuZXhwb3J0IGNvbnN0IHN1YnNjcmliZVVzZXIgPSAodXNlciwgY2FsbGJhY2tTdWNjZXNzID0gKCkgPT4ge30sIGNhbGxiYWNrRXJyb3IgPSAoKSA9PiB7fSkgPT4ge1xuICAgIGNvbnN0IHVzZXJJbml0ID0gZ2V0VXNlckluaXQodXNlcilcbiAgICBjaHJvbWUuc3RvcmFnZS5zeW5jLmdldCgndXNlcl9zdWJzY3JpcHRpb25zJywgKHJlc3VsdCkgPT4ge1xuICAgICAgICBjb25zdCB1c2VyX3N1YnNjcmlwdGlvbnMgPSByZXN1bHQudXNlcl9zdWJzY3JpcHRpb25zXG4gICAgICAgIGlmICghICh1c2VyIGluIHVzZXJfc3Vic2NyaXB0aW9ucykpIHtcbiAgICAgICAgICAgIGlmIChPYmplY3Qua2V5cyh1c2VyX3N1YnNjcmlwdGlvbnMpLmxlbmd0aCA8IE1BWF9TVUJTQ1JJUFRJT05TKSB7XG4gICAgICAgICAgICAgICAgdXNlcl9zdWJzY3JpcHRpb25zW3VzZXJdID0gdHJ1ZVxuICAgICAgICAgICAgICAgIGNocm9tZS5zdG9yYWdlLnN5bmMuc2V0KHt1c2VyX3N1YnNjcmlwdGlvbnMsIC4uLnVzZXJJbml0fSwgY2FsbGJhY2tTdWNjZXNzKVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBjYWxsYmFja0Vycm9yKCdtYXhpbXVtIG51bWJlciBvZiBzdWJzY3JpcHRpb25zIHJlYWNoZWQnKVxuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY2FsbGJhY2tFcnJvcignYWxyZWFkeSBzdWJzY3JpYmVkIHRvIHRoaXMgdXNlcicpXG4gICAgICAgIH1cbiAgICB9KVxufVxuXG5leHBvcnQgY29uc3QgdW5zdWJzY3JpYmVVc2VyID0gKHVzZXIsIGNhbGxiYWNrKSA9PiB7XG4gICAgY29uc3QgdXNlcktleXMgPSBPYmplY3Qua2V5cyhnZXRVc2VySW5pdCh1c2VyKSlcbiAgICBjaHJvbWUuc3RvcmFnZS5zeW5jLmdldChbJ3VzZXJfc3Vic2NyaXB0aW9ucycsICd1c2VyX3Vuc3Vic2NyaXB0aW9ucyddLCAocmVzdWx0KSA9PiB7XG4gICAgICAgIGNvbnN0IHt1c2VyX3N1YnNjcmlwdGlvbnMsIHVzZXJfdW5zdWJzY3JpcHRpb25zID0ge319ID0gcmVzdWx0XG4gICAgICAgIGRlbGV0ZSB1c2VyX3N1YnNjcmlwdGlvbnNbdXNlcl1cbiAgICAgICAgdXNlcl91bnN1YnNjcmlwdGlvbnNbdXNlcl0gPSBNYXRoLmZsb29yKERhdGUubm93KCkvMTAwMClcbiAgICAgICAgY2hyb21lLnN0b3JhZ2Uuc3luYy5zZXQoe3VzZXJfc3Vic2NyaXB0aW9ucywgdXNlcl91bnN1YnNjcmlwdGlvbnN9LCAoKSA9PiB7XG4gICAgICAgICAgICBjaHJvbWUuc3RvcmFnZS5zeW5jLnJlbW92ZSh1c2VyS2V5cywgKCkgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IHVzZXJLZXlfbG9jYWxTdG9yYWdlID0gZ2V0T2JqZWN0TmFtZSgnaXRlbXMnLCB1c2VyLCB0cnVlKVxuICAgICAgICAgICAgICAgIGNocm9tZS5ydW50aW1lLnNlbmRNZXNzYWdlKHthY3Rpb246ICd1cGRhdGUtYmFkZ2UnfSlcbiAgICAgICAgICAgICAgICBjaHJvbWUuc3RvcmFnZS5sb2NhbC5yZW1vdmUodXNlcktleV9sb2NhbFN0b3JhZ2UsIGNhbGxiYWNrKVxuICAgICAgICAgICAgfSlcbiAgICAgICAgfSlcbiAgICB9KVxufVxuXG5leHBvcnQgY29uc3QgaW5pdFN0b3JhZ2UgPSAoY2FsbGJhY2spID0+IHtcbiAgICBjaHJvbWUuc3RvcmFnZS5zeW5jLmdldChudWxsLCAoc3RvcmFnZSkgPT4ge1xuICAgICAgICBpZiAoT2JqZWN0LmtleXMoc3RvcmFnZSkubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICBjaHJvbWUuc3RvcmFnZS5zeW5jLnNldChnZXRTdG9yYWdlSW5pdCgpLCBjYWxsYmFjaylcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNhbGxiYWNrKClcbiAgICAgICAgfVxuICAgIH0pXG59XG5cbmV4cG9ydCBjb25zdCBnZXRTdWJzY3JpYmVkVXNlcnNfd2l0aFNlZW5BbmRVbnNlZW5JRHMgPSAoY2FsbGJhY2spID0+IHtcbiAgICBjaHJvbWUuc3RvcmFnZS5zeW5jLmdldChudWxsLCAoc3RvcmFnZSkgPT4ge1xuICAgICAgICBjb25zdCB1c2VycyA9IE9iamVjdC5rZXlzKHN0b3JhZ2UudXNlcl9zdWJzY3JpcHRpb25zKTtcbiAgICAgICAgY29uc3QgdXNlcnNfd2l0aElEcyA9IHt9XG4gICAgICAgIHVzZXJzLmZvckVhY2godXNlciA9PiB7XG4gICAgICAgICAgICB1c2Vyc193aXRoSURzW3VzZXJdID0gZ2V0SURzX3RoaW5nKHVzZXIsIHRydWUsIHN0b3JhZ2UpXG4gICAgICAgIH0pXG4gICAgICAgIHVzZXJzX3dpdGhJRHNbJ290aGVyJ10gPSBnZXRJRHNfdGhpbmcoJ290aGVyJywgZmFsc2UsIHN0b3JhZ2UpXG4gICAgICAgIGNhbGxiYWNrKHVzZXJzX3dpdGhJRHMsIHN0b3JhZ2UpXG4gICAgfSlcbn1cblxuZXhwb3J0IGNvbnN0IGdldFN1YnNjcmliZWRVc2Vyc193aXRoVW5zZWVuSURzID0gKGNhbGxiYWNrKSA9PiB7XG4gICAgY2hyb21lLnN0b3JhZ2Uuc3luYy5nZXQobnVsbCwgKHN0b3JhZ2UpID0+IHtcbiAgICAgICAgY29uc3QgdXNlcnMgPSBPYmplY3Qua2V5cyhzdG9yYWdlLnVzZXJfc3Vic2NyaXB0aW9ucyk7XG4gICAgICAgIGNvbnN0IHVzZXJzX3dpdGhJRHMgPSB7fVxuICAgICAgICB1c2Vycy5mb3JFYWNoKHVzZXIgPT4ge1xuICAgICAgICAgICAgdXNlcnNfd2l0aElEc1t1c2VyXSA9IGdldFVuc2VlbklEc190aGluZyh1c2VyLCB0cnVlLCBzdG9yYWdlKVxuICAgICAgICB9KVxuICAgICAgICB1c2Vyc193aXRoSURzWydvdGhlciddID0gZ2V0VW5zZWVuSURzX3RoaW5nKCdvdGhlcicsIGZhbHNlLCBzdG9yYWdlKVxuICAgICAgICBjYWxsYmFjayh1c2Vyc193aXRoSURzKVxuICAgIH0pXG59XG5cbmV4cG9ydCBjb25zdCBnZXRVbnNlZW5JRHNfdGhpbmcgPSAodGhpbmcsIGlzVXNlciwgc3RvcmFnZSkgPT4ge1xuICAgIHJldHVybiBnZXRJRHNfdGhpbmcodGhpbmcsIGlzVXNlciwgc3RvcmFnZSlbJ3Vuc2VlbiddXG59XG5cbi8vIEdldCBJRHMgb2YgaXRlbXMgd2hvc2Ugc3RhdHVzIGhhcyBjaGFuZ2VkXG5leHBvcnQgY29uc3QgZ2V0SURzX3RoaW5nID0gKHRoaW5nLCBpc1VzZXIsIHN0b3JhZ2UpID0+IHtcbiAgICBjb25zdCB0cmFja19yZW1vdmFsID0gc3RvcmFnZS5vcHRpb25zLnJlbW92YWxfc3RhdHVzLnRyYWNrXG4gICAgY29uc3QgdHJhY2tfbG9jayA9IHN0b3JhZ2Uub3B0aW9ucy5sb2NrX3N0YXR1cy50cmFja1xuICAgIGNvbnN0IHVuc2VlbklEcyA9IHt9XG4gICAgY29uc3Qgc2VlbklEcyA9IHt9XG4gICAgbGV0IHR5cGVzID0gW11cbiAgICBjb25zdCBrZXlzID0gZ2V0T2JqZWN0TmFtZXNGb3JUaGluZyh0aGluZywgaXNVc2VyKVxuICAgIGlmICh0cmFja19yZW1vdmFsKSB0eXBlcy5wdXNoKGtleXNbJ3JlbW92ZWQnXSwga2V5c1snYXBwcm92ZWQnXSlcbiAgICBpZiAodHJhY2tfbG9jaykgdHlwZXMucHVzaChrZXlzWydsb2NrZWQnXSwga2V5c1sndW5sb2NrZWQnXSlcblxuICAgIHR5cGVzLmZvckVhY2godHlwZSA9PiB7XG4gICAgICAgIE9iamVjdC5rZXlzKHN0b3JhZ2VbdHlwZV0pLmZvckVhY2goaWQgPT4ge1xuICAgICAgICAgICAgY29uc3QgaXRlbSA9IHN0b3JhZ2VbdHlwZV1baWRdXG4gICAgICAgICAgICBpZiAoaXRlbS51KSB1bnNlZW5JRHNbaWRdID0gdHJ1ZVxuICAgICAgICAgICAgZWxzZSBzZWVuSURzW2lkXSA9IHRydWVcbiAgICAgICAgfSlcbiAgICB9KVxuICAgIHJldHVybiB7dW5zZWVuOiBPYmplY3Qua2V5cyh1bnNlZW5JRHMpLCBzZWVuOiBPYmplY3Qua2V5cyhzZWVuSURzKX1cbn1cblxuZXhwb3J0IGNvbnN0IGdldExvY2FsU3RvcmFnZUl0ZW1zID0gKHRoaW5nLCBpc1VzZXIpID0+IHtcbiAgICBjb25zdCBrZXlfbG9jYWxTdG9yYWdlID0gZ2V0T2JqZWN0TmFtZSgnaXRlbXMnLCB0aGluZywgaXNVc2VyKVxuICAgIHJldHVybiBicm93c2VyLnN0b3JhZ2UubG9jYWwuZ2V0KHtba2V5X2xvY2FsU3RvcmFnZV06IHt9fSlcbiAgICAudGhlbihsb2NhbFN0b3JhZ2VJdGVtcyA9PiB7XG4gICAgICAgIHJldHVybiBsb2NhbFN0b3JhZ2VJdGVtc1trZXlfbG9jYWxTdG9yYWdlXVxuICAgIH0pXG59XG5cbmV4cG9ydCBjb25zdCBzYXZlTG9jYWxTdG9yYWdlSXRlbXMgPSAodGhpbmcsIGlzVXNlciwgaXRlbXNUb1NhdmUpID0+IHtcbiAgICBjb25zdCBrZXlfbG9jYWxTdG9yYWdlID0gZ2V0T2JqZWN0TmFtZSgnaXRlbXMnLCB0aGluZywgaXNVc2VyKVxuICAgIHJldHVybiBicm93c2VyLnN0b3JhZ2UubG9jYWwuc2V0KHtba2V5X2xvY2FsU3RvcmFnZV06IGl0ZW1zVG9TYXZlfSlcbn1cblxuZXhwb3J0IGNvbnN0IGFkZExvY2FsU3RvcmFnZUl0ZW1zID0gKGl0ZW1zLCB0aGluZywgaXNVc2VyKSA9PiB7XG4gICAgY29uc3Qga2V5X2xvY2FsU3RvcmFnZSA9IGdldE9iamVjdE5hbWUoJ2l0ZW1zJywgdGhpbmcsIGlzVXNlcilcbiAgICByZXR1cm4gY2hyb21lLnN0b3JhZ2UubG9jYWwuZ2V0KHtba2V5X2xvY2FsU3RvcmFnZV06IHt9fSwgKGxvY2FsU3RvcmFnZUl0ZW1zKSA9PiB7XG4gICAgICAgIGNvbnN0IHN0b3JlZEl0ZW1zID0gbG9jYWxTdG9yYWdlSXRlbXNba2V5X2xvY2FsU3RvcmFnZV1cbiAgICAgICAgT2JqZWN0LmtleXMoaXRlbXMpLmZvckVhY2goaWQgPT4ge1xuICAgICAgICAgICAgc3RvcmVkSXRlbXNbaWRdID0gaXRlbXNbaWRdXG4gICAgICAgIH0pXG4gICAgICAgIGxldCBpdGVtc1RvU2F2ZSA9IHN0b3JlZEl0ZW1zXG4gICAgICAgIGlmIChPYmplY3Qua2V5cyhzdG9yZWRJdGVtcykubGVuZ3RoID4gTUFYX0xPQ0FMX1NUT1JBR0VfSVRFTVNfUEVSX09CSkVDVCkge1xuICAgICAgICAgICAgaXRlbXNUb1NhdmUgPSB0cmltRGljdF9ieV9udW1iZXJWYWx1ZWRBdHRyaWJ1dGUoc3RvcmVkSXRlbXMsIE1BWF9MT0NBTF9TVE9SQUdFX0lURU1TX1BFUl9PQkpFQ1QsICdvJylcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gYnJvd3Nlci5zdG9yYWdlLmxvY2FsLnNldCh7W2tleV9sb2NhbFN0b3JhZ2VdOiBpdGVtc1RvU2F2ZX0pXG4gICAgfSlcbn1cblxuZXhwb3J0IGNvbnN0IGdldEl0ZW1Gcm9tTG9jYWxTdG9yYWdlID0gKHRoaW5nLCBpc1VzZXIsIGlkLCBsb2NhbFN0b3JhZ2UpID0+IHtcbiAgICBjb25zdCBrZXkgPSBnZXRPYmplY3ROYW1lKCdpdGVtcycsIHRoaW5nLCBpc1VzZXIpXG4gICAgaWYgKGtleSBpbiBsb2NhbFN0b3JhZ2UpIHtcbiAgICAgICAgaWYgKGlkIGluIGxvY2FsU3RvcmFnZVtrZXldKSB7XG4gICAgICAgICAgICByZXR1cm4gbmV3IExvY2FsU3RvcmFnZUl0ZW0oe29iamVjdDogbG9jYWxTdG9yYWdlW2tleV1baWRdfSlcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gJydcbn1cblxuZXhwb3J0IGNvbnN0IGdldEFsbENoYW5nZXMgPSAoY2FsbGJhY2spID0+IHtcbiAgICBjaHJvbWUuc3RvcmFnZS5zeW5jLmdldCgndXNlcl9zdWJzY3JpcHRpb25zJywgKHJlc3VsdCkgPT4ge1xuICAgICAgICBjb25zdCBrZXlzID0gW2dldE9iamVjdE5hbWUoJ2NoYW5nZXMnLCAnb3RoZXInLCBmYWxzZSldXG4gICAgICAgIGNvbnN0IGtleVRvVXNlcl9sb29rdXAgPSB7Y2hhbmdlc19vdGhlcjogJ290aGVyJ31cblxuICAgICAgICBPYmplY3Qua2V5cyhyZXN1bHQudXNlcl9zdWJzY3JpcHRpb25zKS5mb3JFYWNoKHVzZXIgPT4ge1xuICAgICAgICAgICAgY29uc3Qga2V5ID0gZ2V0T2JqZWN0TmFtZSgnY2hhbmdlcycsIHVzZXIsIHRydWUpXG4gICAgICAgICAgICBrZXlzLnB1c2goa2V5KVxuICAgICAgICAgICAga2V5VG9Vc2VyX2xvb2t1cFtrZXldID0gdXNlclxuICAgICAgICB9KVxuICAgICAgICBjaHJvbWUuc3RvcmFnZS5zeW5jLmdldChrZXlzLCAocmVzMikgPT4ge1xuICAgICAgICAgICAgY29uc3QgY2hhbmdlc0J5VXNlciA9IHt9XG4gICAgICAgICAgICBrZXlzLmZvckVhY2goa2V5ID0+IHtcbiAgICAgICAgICAgICAgICBpZiAoKGtleSBpbiByZXMyKSAmJiByZXMyW2tleV0ubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgICAgIGNoYW5nZXNCeVVzZXJba2V5VG9Vc2VyX2xvb2t1cFtrZXldXSA9IHJlczJba2V5XVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICBjYWxsYmFjayhjaGFuZ2VzQnlVc2VyKVxuICAgICAgICB9KVxuICAgIH0pXG59XG5cbmV4cG9ydCBjb25zdCBnZXRPcHRpb25zID0gKGNhbGxiYWNrKSA9PiB7XG4gICAgcmV0dXJuIGJyb3dzZXIuc3RvcmFnZS5zeW5jLmdldChbJ3VzZXJfc3Vic2NyaXB0aW9ucycsICdvdGhlcl9zdWJzY3JpcHRpb25zJywgJ29wdGlvbnMnXSlcbiAgICAudGhlbihyZXN1bHQgPT4ge1xuICAgICAgICBjb25zdCB1c2VycyA9IE9iamVjdC5rZXlzKHJlc3VsdC51c2VyX3N1YnNjcmlwdGlvbnMpXG4gICAgICAgIGNvbnN0IG90aGVycyA9IE9iamVjdC5rZXlzKHJlc3VsdC5vdGhlcl9zdWJzY3JpcHRpb25zKVxuICAgICAgICBjb25zdCBvcHRpb25zID0gcmVzdWx0Lm9wdGlvbnNcbiAgICAgICAgcmV0dXJuIGNhbGxiYWNrKHVzZXJzLCBvdGhlcnMsIG9wdGlvbnMpXG4gICAgfSlcbiAgICAuY2F0Y2goY29uc29sZS5sb2cpXG59XG5leHBvcnQgY29uc3Qgc2F2ZU9wdGlvbnMgPSAoc2Vlbl9jb3VudCwgaW50ZXJ2YWwsIGN1c3RvbV9jbGllbnRpZCwgcmVtb3ZlZF90cmFjaywgcmVtb3ZlZF9ub3RpZnksIGxvY2tlZF90cmFjaywgbG9ja2VkX25vdGlmeSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBoaWRlX3N1YnNjcmliZSwgbW9uaXRvcl9xdWFyYW50aW5lZCwgY2FsbGJhY2spID0+IHtcbiAgICBjaHJvbWUuc3RvcmFnZS5zeW5jLnNldCh7b3B0aW9uczoge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWVuX2NvdW50LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbnRlcnZhbCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY3VzdG9tX2NsaWVudGlkLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZW1vdmFsX3N0YXR1czoge3RyYWNrOiByZW1vdmVkX3RyYWNrLCBub3RpZnk6IHJlbW92ZWRfbm90aWZ5fSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbG9ja19zdGF0dXM6ICAgIHt0cmFjazogbG9ja2VkX3RyYWNrLCAgbm90aWZ5OiBsb2NrZWRfbm90aWZ5fSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaGlkZV9zdWJzY3JpYmUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1vbml0b3JfcXVhcmFudGluZWQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfX0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2spXG59XG4iLCIvLyBUaGUgbW9kdWxlIGNhY2hlXG52YXIgX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fID0ge307XG5cbi8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG5mdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuXHR2YXIgY2FjaGVkTW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXTtcblx0aWYgKGNhY2hlZE1vZHVsZSAhPT0gdW5kZWZpbmVkKSB7XG5cdFx0cmV0dXJuIGNhY2hlZE1vZHVsZS5leHBvcnRzO1xuXHR9XG5cdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG5cdHZhciBtb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdID0ge1xuXHRcdC8vIG5vIG1vZHVsZS5pZCBuZWVkZWRcblx0XHQvLyBubyBtb2R1bGUubG9hZGVkIG5lZWRlZFxuXHRcdGV4cG9ydHM6IHt9XG5cdH07XG5cblx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG5cdF9fd2VicGFja19tb2R1bGVzX19bbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG5cdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG5cdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbn1cblxuIiwiLy8gZGVmaW5lIGdldHRlciBmdW5jdGlvbnMgZm9yIGhhcm1vbnkgZXhwb3J0c1xuX193ZWJwYWNrX3JlcXVpcmVfXy5kID0gKGV4cG9ydHMsIGRlZmluaXRpb24pID0+IHtcblx0Zm9yKHZhciBrZXkgaW4gZGVmaW5pdGlvbikge1xuXHRcdGlmKF9fd2VicGFja19yZXF1aXJlX18ubyhkZWZpbml0aW9uLCBrZXkpICYmICFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywga2V5KSkge1xuXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIGtleSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGRlZmluaXRpb25ba2V5XSB9KTtcblx0XHR9XG5cdH1cbn07IiwiX193ZWJwYWNrX3JlcXVpcmVfXy5vID0gKG9iaiwgcHJvcCkgPT4gKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIHByb3ApKSIsIlwidXNlIHN0cmljdFwiO1xuXG5yZXF1aXJlKFwiLi9ub0NvbmZsaWN0XCIpO1xuXG52YXIgX2dsb2JhbCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcImNvcmUtanMvbGlicmFyeS9mbi9nbG9iYWxcIikpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBcImRlZmF1bHRcIjogb2JqIH07IH1cblxuaWYgKF9nbG9iYWxbXCJkZWZhdWx0XCJdLl9iYWJlbFBvbHlmaWxsICYmIHR5cGVvZiBjb25zb2xlICE9PSBcInVuZGVmaW5lZFwiICYmIGNvbnNvbGUud2Fybikge1xuICBjb25zb2xlLndhcm4oXCJAYmFiZWwvcG9seWZpbGwgaXMgbG9hZGVkIG1vcmUgdGhhbiBvbmNlIG9uIHRoaXMgcGFnZS4gVGhpcyBpcyBwcm9iYWJseSBub3QgZGVzaXJhYmxlL2ludGVuZGVkIFwiICsgXCJhbmQgbWF5IGhhdmUgY29uc2VxdWVuY2VzIGlmIGRpZmZlcmVudCB2ZXJzaW9ucyBvZiB0aGUgcG9seWZpbGxzIGFyZSBhcHBsaWVkIHNlcXVlbnRpYWxseS4gXCIgKyBcIklmIHlvdSBkbyBuZWVkIHRvIGxvYWQgdGhlIHBvbHlmaWxsIG1vcmUgdGhhbiBvbmNlLCB1c2UgQGJhYmVsL3BvbHlmaWxsL25vQ29uZmxpY3QgXCIgKyBcImluc3RlYWQgdG8gYnlwYXNzIHRoZSB3YXJuaW5nLlwiKTtcbn1cblxuX2dsb2JhbFtcImRlZmF1bHRcIl0uX2JhYmVsUG9seWZpbGwgPSB0cnVlOyIsImltcG9ydCB7Z2V0U3Vic2NyaWJlZFVzZXJzX3dpdGhTZWVuQW5kVW5zZWVuSURzLCBzdWJzY3JpYmVVc2VyfSBmcm9tICcuL3N0b3JhZ2UuanMnXG5pbXBvcnQge3JlZGRpdE1vZGlmaWNhdGlvbnN9IGZyb20gJy4vY29udGVudC1yZWRkaXQuanMnXG5pbXBvcnQge3JldmRkaXRNb2RpZmljYXRpb25zfSBmcm9tICcuL2NvbnRlbnQtcmV2ZGRpdC5qcydcbmltcG9ydCB7Z2V0TG9nZ2VkaW5Vc2VyfSBmcm9tICcuL3JlcXVlc3RzLmpzJ1xuaW1wb3J0IGJyb3dzZXIgZnJvbSAnd2ViZXh0ZW5zaW9uLXBvbHlmaWxsJ1xuXG4oZnVuY3Rpb24gKCkge1xuICAgIGNvbnN0IG1hdGNoZXMgPSB3aW5kb3cubG9jYXRpb24uaHJlZi5tYXRjaCgvXmh0dHBzPzpcXC9cXC9bXi9dKihyZWRkaXRcXC5jb218cmV2ZWRkaXRcXC5jb218bG9jYWxob3N0KS8pXG5cbiAgICBmdW5jdGlvbiBxdWVyeVVzZXIgKG1lc3NhZ2UsIHNlbmRlciwgcmVzcG9uc2UpIHtcbiAgICAgICAgaWYgKG1lc3NhZ2UuYWN0aW9uID09PSAncXVlcnktdXNlcicpIHtcbiAgICAgICAgICAgIHJldHVybiBnZXRMb2dnZWRpblVzZXIoKVxuICAgICAgICAgICAgLnRoZW4oKHVzZXIpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAodXNlcikge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gc3Vic2NyaWJlVXNlcih1c2VyLCAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICB3aW5kb3cubG9jYXRpb24uaHJlZj1gaHR0cHM6Ly93d3cucmV2ZWRkaXQuY29tL3VzZXIvJHt1c2VyfT9hbGw9dHJ1ZWBcbiAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCdmYWlsZWQnKVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pXG4gICAgICAgIH1cbiAgICB9XG4gICAgJC5leHRlbmQoJC5leHByW1wiOlwiXSwge1xuICAgICAgICBcImVxdWFsc2lcIjogKGVsZW0sIGksIG1hdGNoLCBhcnJheSkgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIChlbGVtLnRleHRDb250ZW50IHx8IGVsZW0uaW5uZXJUZXh0IHx8IFwiXCIpLnRvTG93ZXJDYXNlKCkudHJpbSgpID09PSBtYXRjaFszXS50b0xvd2VyQ2FzZSgpLnRyaW0oKVxuICAgICAgICB9XG4gICAgfSk7XG4gICAgd2luZG93LmxvY2FsU3RvcmFnZS5zZXRJdGVtKCdoYXNTZWVuTGFuZ3VhZ2VNb2RhbCcsIHRydWUpXG4gICAgd2luZG93LmxvY2FsU3RvcmFnZS5zZXRJdGVtKCdoYXNOb3RpZmllckV4dGVuc2lvbicsIHRydWUpXG4gICAgYnJvd3Nlci5ydW50aW1lLm9uTWVzc2FnZS5hZGRMaXN0ZW5lcihxdWVyeVVzZXIpXG5cbiAgICBjb25zdCBleHRlbnNpb25TYXlzTm9TdWJzY3JpcHRpb25zID0gJ2V4dGVuc2lvblNheXNOb1N1YnNjcmlwdGlvbnMnXG4gICAgbGV0IHVzZXIgPSAnb3RoZXInXG4gICAgbGV0IGlzVXNlclBhZ2UgPSBmYWxzZVxuICAgIGxldCBpc0luZm9QYWdlID0gZmFsc2VcbiAgICBsZXQgaXNSZWRkaXQgPSBmYWxzZVxuICAgIGpRdWVyeShkb2N1bWVudCkucmVhZHkoKCkgPT4ge1xuICAgICAgICBpZiAobWF0Y2hlcykge1xuICAgICAgICAgICAgaXNSZWRkaXQgPSBtYXRjaGVzWzFdID09PSAncmVkZGl0LmNvbSdcbiAgICAgICAgICAgIGNvbnN0IHBhdGhQYXJ0cyA9IHdpbmRvdy5sb2NhdGlvbi5wYXRobmFtZS5zcGxpdCgnLycpXG4gICAgICAgICAgICBpZiAocGF0aFBhcnRzWzFdID09PSAndXNlcicgJiYgcGF0aFBhcnRzLmxlbmd0aCA+PSAzICYmIHBhdGhQYXJ0c1syXSkge1xuICAgICAgICAgICAgICAgIHVzZXIgPSB3aW5kb3cubG9jYXRpb24ucGF0aG5hbWUuc3BsaXQoJy8nKVsyXTtcbiAgICAgICAgICAgICAgICBpc1VzZXJQYWdlID0gdHJ1ZVxuICAgICAgICAgICAgfSBlbHNlIGlmIChwYXRoUGFydHNbMV0gPT09ICdpbmZvJykge1xuICAgICAgICAgICAgICAgIGlzSW5mb1BhZ2UgPSB0cnVlXG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZ2V0U3Vic2NyaWJlZFVzZXJzX3dpdGhTZWVuQW5kVW5zZWVuSURzKCh1c2Vycywgc3RvcmFnZSkgPT4ge1xuICAgICAgICAgICAgY29uc3Qgc3Vic2NyaWJlZF91c2Vyc19sb3dlcmNhc2UgPSBPYmplY3Qua2V5cyh1c2VycykuZmlsdGVyKHggPT4geCAhPT0gJ290aGVyJykubWFwKHggPT4geC50b0xvd2VyQ2FzZSgpKVxuICAgICAgICAgICAgaWYgKHN1YnNjcmliZWRfdXNlcnNfbG93ZXJjYXNlLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgICAgIHdpbmRvdy5sb2NhbFN0b3JhZ2Uuc2V0SXRlbShleHRlbnNpb25TYXlzTm9TdWJzY3JpcHRpb25zLCB0cnVlKVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB3aW5kb3cubG9jYWxTdG9yYWdlLnJlbW92ZUl0ZW0oZXh0ZW5zaW9uU2F5c05vU3Vic2NyaXB0aW9ucylcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChpc1JlZGRpdCkge1xuICAgICAgICAgICAgICAgIHJlZGRpdE1vZGlmaWNhdGlvbnMoc3RvcmFnZS5vdGhlcl9zdWJzY3JpcHRpb25zLCBzdG9yYWdlLm9wdGlvbnMuaGlkZV9zdWJzY3JpYmUsIHN0b3JhZ2Uub3B0aW9ucy5tb25pdG9yX3F1YXJhbnRpbmVkLCBzdWJzY3JpYmVkX3VzZXJzX2xvd2VyY2FzZSwgT2JqZWN0LmtleXMoKHN0b3JhZ2UudXNlcl91bnN1YnNjcmlwdGlvbnMgfHwge30pKS5tYXAoeCA9PiB4LnRvTG93ZXJDYXNlKCkpKVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXZkZGl0TW9kaWZpY2F0aW9ucyhzdG9yYWdlLCB1c2VyLCBpc1VzZXJQYWdlLCBpc0luZm9QYWdlKVxuICAgICAgICAgICAgfVxuICAgICAgICB9KVxuICAgIH0pO1xufSkoKTtcbiJdLCJuYW1lcyI6WyJtb2R1bGUiLCJleHBvcnRzIiwiaXQiLCJUeXBlRXJyb3IiLCJpc09iamVjdCIsImNvcmUiLCJ2ZXJzaW9uIiwiX19lIiwiYUZ1bmN0aW9uIiwiZm4iLCJ0aGF0IiwibGVuZ3RoIiwidW5kZWZpbmVkIiwiYSIsImNhbGwiLCJiIiwiYyIsImFwcGx5IiwiYXJndW1lbnRzIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJnZXQiLCJkb2N1bWVudCIsImlzIiwiY3JlYXRlRWxlbWVudCIsImdsb2JhbCIsImN0eCIsImhpZGUiLCJoYXMiLCJQUk9UT1RZUEUiLCIkZXhwb3J0IiwidHlwZSIsIm5hbWUiLCJzb3VyY2UiLCJrZXkiLCJvd24iLCJvdXQiLCJJU19GT1JDRUQiLCJGIiwiSVNfR0xPQkFMIiwiRyIsIklTX1NUQVRJQyIsIlMiLCJJU19QUk9UTyIsIlAiLCJJU19CSU5EIiwiQiIsIklTX1dSQVAiLCJXIiwiZXhwUHJvdG8iLCJ0YXJnZXQiLCJDIiwidGhpcyIsIkZ1bmN0aW9uIiwidmlydHVhbCIsIlIiLCJVIiwiZXhlYyIsImUiLCJ3aW5kb3ciLCJNYXRoIiwic2VsZiIsIl9fZyIsImhhc093blByb3BlcnR5IiwiZFAiLCJjcmVhdGVEZXNjIiwib2JqZWN0IiwidmFsdWUiLCJmIiwiYW5PYmplY3QiLCJJRThfRE9NX0RFRklORSIsInRvUHJpbWl0aXZlIiwiTyIsIkF0dHJpYnV0ZXMiLCJiaXRtYXAiLCJlbnVtZXJhYmxlIiwiY29uZmlndXJhYmxlIiwid3JpdGFibGUiLCJ2YWwiLCJ0b1N0cmluZyIsInZhbHVlT2YiLCJjb2YiLCJtc2ciLCJVTlNDT1BBQkxFUyIsIkFycmF5UHJvdG8iLCJBcnJheSIsInByb3RvdHlwZSIsImF0IiwiaW5kZXgiLCJ1bmljb2RlIiwiQ29uc3RydWN0b3IiLCJmb3JiaWRkZW5GaWVsZCIsInRvT2JqZWN0IiwidG9BYnNvbHV0ZUluZGV4IiwidG9MZW5ndGgiLCJjb3B5V2l0aGluIiwic3RhcnQiLCJsZW4iLCJ0byIsImZyb20iLCJlbmQiLCJjb3VudCIsIm1pbiIsImluYyIsImFMZW4iLCJlbmRQb3MiLCJ0b0lPYmplY3QiLCJJU19JTkNMVURFUyIsIiR0aGlzIiwiZWwiLCJmcm9tSW5kZXgiLCJJT2JqZWN0IiwiYXNjIiwiVFlQRSIsIiRjcmVhdGUiLCJJU19NQVAiLCJJU19GSUxURVIiLCJJU19TT01FIiwiSVNfRVZFUlkiLCJJU19GSU5EX0lOREVYIiwiTk9fSE9MRVMiLCJjcmVhdGUiLCJjYWxsYmFja2ZuIiwicmVzIiwicmVzdWx0IiwicHVzaCIsIm1lbW8iLCJpc1JpZ2h0IiwiaSIsImlzQXJyYXkiLCJTUEVDSUVTIiwib3JpZ2luYWwiLCJjb25zdHJ1Y3RvciIsInNwZWNpZXNDb25zdHJ1Y3RvciIsImludm9rZSIsImFycmF5U2xpY2UiLCJzbGljZSIsImZhY3RvcmllcyIsImJpbmQiLCJwYXJ0QXJncyIsImJvdW5kIiwiYXJncyIsImNvbmNhdCIsIm4iLCJqb2luIiwiY29uc3RydWN0IiwiVEFHIiwiQVJHIiwiVCIsInRyeUdldCIsImNhbGxlZSIsInJlZGVmaW5lQWxsIiwiYW5JbnN0YW5jZSIsImZvck9mIiwiJGl0ZXJEZWZpbmUiLCJzdGVwIiwic2V0U3BlY2llcyIsIkRFU0NSSVBUT1JTIiwiZmFzdEtleSIsInZhbGlkYXRlIiwiU0laRSIsImdldEVudHJ5IiwiZW50cnkiLCJfaSIsIl9mIiwiayIsImdldENvbnN0cnVjdG9yIiwid3JhcHBlciIsIk5BTUUiLCJBRERFUiIsIml0ZXJhYmxlIiwiX3QiLCJfbCIsImNsZWFyIiwiZGF0YSIsInIiLCJwIiwibmV4dCIsInByZXYiLCJmb3JFYWNoIiwidiIsImRlZiIsInNldFN0cm9uZyIsIml0ZXJhdGVkIiwia2luZCIsIl9rIiwiZ2V0V2VhayIsImNyZWF0ZUFycmF5TWV0aG9kIiwiJGhhcyIsImFycmF5RmluZCIsImFycmF5RmluZEluZGV4IiwiaWQiLCJ1bmNhdWdodEZyb3plblN0b3JlIiwiVW5jYXVnaHRGcm96ZW5TdG9yZSIsImZpbmRVbmNhdWdodEZyb3plbiIsInN0b3JlIiwic2V0Iiwic3BsaWNlIiwidWZzdG9yZSIsInJlZGVmaW5lIiwibWV0YSIsImZhaWxzIiwiJGl0ZXJEZXRlY3QiLCJzZXRUb1N0cmluZ1RhZyIsImluaGVyaXRJZlJlcXVpcmVkIiwibWV0aG9kcyIsImNvbW1vbiIsIklTX1dFQUsiLCJCYXNlIiwicHJvdG8iLCJmaXhNZXRob2QiLCJLRVkiLCJlbnRyaWVzIiwiaW5zdGFuY2UiLCJIQVNOVF9DSEFJTklORyIsIlRIUk9XU19PTl9QUklNSVRJVkVTIiwiQUNDRVBUX0lURVJBQkxFUyIsIml0ZXIiLCJCVUdHWV9aRVJPIiwiJGluc3RhbmNlIiwiTkVFRCIsIiRkZWZpbmVQcm9wZXJ0eSIsImdldFRpbWUiLCJEYXRlIiwiJHRvSVNPU3RyaW5nIiwidG9JU09TdHJpbmciLCJseiIsIm51bSIsIk5hTiIsImlzRmluaXRlIiwiUmFuZ2VFcnJvciIsImQiLCJ5IiwiZ2V0VVRDRnVsbFllYXIiLCJtIiwiZ2V0VVRDTWlsbGlzZWNvbmRzIiwicyIsImFicyIsImdldFVUQ01vbnRoIiwiZ2V0VVRDRGF0ZSIsImdldFVUQ0hvdXJzIiwiZ2V0VVRDTWludXRlcyIsImdldFVUQ1NlY29uZHMiLCJOVU1CRVIiLCJoaW50Iiwic3BsaXQiLCJnZXRLZXlzIiwiZ09QUyIsInBJRSIsImdldFN5bWJvbHMiLCJzeW1ib2xzIiwiaXNFbnVtIiwiZXhwIiwiTUFUQ0giLCJyZSIsImRlZmluZWQiLCJ3a3MiLCJyZWdleHBFeGVjIiwiUkVQTEFDRV9TVVBQT1JUU19OQU1FRF9HUk9VUFMiLCJncm91cHMiLCJyZXBsYWNlIiwiU1BMSVRfV09SS1NfV0lUSF9PVkVSV1JJVFRFTl9FWEVDIiwib3JpZ2luYWxFeGVjIiwiU1lNQk9MIiwiREVMRUdBVEVTX1RPX1NZTUJPTCIsIkRFTEVHQVRFU19UT19FWEVDIiwiZXhlY0NhbGxlZCIsIm5hdGl2ZVJlZ0V4cE1ldGhvZCIsImZucyIsIm5hdGl2ZU1ldGhvZCIsInJlZ2V4cCIsInN0ciIsImFyZzIiLCJmb3JjZVN0cmluZ01ldGhvZCIsImRvbmUiLCJzdHJmbiIsInJ4Zm4iLCJTdHJpbmciLCJSZWdFeHAiLCJzdHJpbmciLCJhcmciLCJpZ25vcmVDYXNlIiwibXVsdGlsaW5lIiwic3RpY2t5IiwiSVNfQ09OQ0FUX1NQUkVBREFCTEUiLCJmbGF0dGVuSW50b0FycmF5Iiwic291cmNlTGVuIiwiZGVwdGgiLCJtYXBwZXIiLCJ0aGlzQXJnIiwiZWxlbWVudCIsInNwcmVhZGFibGUiLCJ0YXJnZXRJbmRleCIsInNvdXJjZUluZGV4IiwibWFwRm4iLCJpc0FycmF5SXRlciIsImdldEl0ZXJGbiIsIkJSRUFLIiwiUkVUVVJOIiwiSVRFUkFUT1IiLCJpdGVyYXRvciIsIml0ZXJGbiIsImRvY3VtZW50RWxlbWVudCIsInNldFByb3RvdHlwZU9mIiwidW4iLCJwcm9wZXJ0eUlzRW51bWVyYWJsZSIsIkl0ZXJhdG9ycyIsImZsb29yIiwiaXNSZWdFeHAiLCJyZXQiLCJkZXNjcmlwdG9yIiwiSXRlcmF0b3JQcm90b3R5cGUiLCJMSUJSQVJZIiwiJGl0ZXJDcmVhdGUiLCJnZXRQcm90b3R5cGVPZiIsIkJVR0dZIiwia2V5cyIsIktFWVMiLCJWQUxVRVMiLCJyZXR1cm5UaGlzIiwiREVGQVVMVCIsIklTX1NFVCIsIkZPUkNFRCIsImdldE1ldGhvZCIsIkRFRl9WQUxVRVMiLCJWQUxVRVNfQlVHIiwiJG5hdGl2ZSIsIiRkZWZhdWx0IiwiJGVudHJpZXMiLCIkYW55TmF0aXZlIiwidmFsdWVzIiwiU0FGRV9DTE9TSU5HIiwicml0ZXIiLCJza2lwQ2xvc2luZyIsInNhZmUiLCJhcnIiLCIkZXhwbTEiLCJleHBtMSIsIngiLCJzaWduIiwicG93IiwiRVBTSUxPTiIsIkVQU0lMT04zMiIsIk1BWDMyIiwiTUlOMzIiLCJmcm91bmQiLCIkYWJzIiwiJHNpZ24iLCJJbmZpbml0eSIsImxvZzFwIiwibG9nIiwiTUVUQSIsInNldERlc2MiLCJpc0V4dGVuc2libGUiLCJGUkVFWkUiLCJwcmV2ZW50RXh0ZW5zaW9ucyIsInNldE1ldGEiLCJ3Iiwib25GcmVlemUiLCJtYWNyb3Rhc2siLCJPYnNlcnZlciIsIk11dGF0aW9uT2JzZXJ2ZXIiLCJXZWJLaXRNdXRhdGlvbk9ic2VydmVyIiwicHJvY2VzcyIsIlByb21pc2UiLCJpc05vZGUiLCJoZWFkIiwibGFzdCIsIm5vdGlmeSIsImZsdXNoIiwicGFyZW50IiwiZG9tYWluIiwiZXhpdCIsImVudGVyIiwibmV4dFRpY2siLCJuYXZpZ2F0b3IiLCJzdGFuZGFsb25lIiwicmVzb2x2ZSIsInByb21pc2UiLCJ0aGVuIiwidG9nZ2xlIiwibm9kZSIsImNyZWF0ZVRleHROb2RlIiwib2JzZXJ2ZSIsImNoYXJhY3RlckRhdGEiLCJ0YXNrIiwiUHJvbWlzZUNhcGFiaWxpdHkiLCJyZWplY3QiLCIkJHJlc29sdmUiLCIkJHJlamVjdCIsIiRhc3NpZ24iLCJhc3NpZ24iLCJBIiwiU3ltYm9sIiwiSyIsImoiLCJkUHMiLCJlbnVtQnVnS2V5cyIsIklFX1BST1RPIiwiRW1wdHkiLCJjcmVhdGVEaWN0IiwiaWZyYW1lRG9jdW1lbnQiLCJpZnJhbWUiLCJzdHlsZSIsImRpc3BsYXkiLCJzcmMiLCJjb250ZW50V2luZG93Iiwib3BlbiIsIndyaXRlIiwibHQiLCJjbG9zZSIsIlByb3BlcnRpZXMiLCJkZWZpbmVQcm9wZXJ0aWVzIiwiZ09QRCIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsImdPUE4iLCJ3aW5kb3dOYW1lcyIsImdldE93blByb3BlcnR5TmFtZXMiLCJnZXRXaW5kb3dOYW1lcyIsIiRrZXlzIiwiaGlkZGVuS2V5cyIsImdldE93blByb3BlcnR5U3ltYm9scyIsIk9iamVjdFByb3RvIiwiYXJyYXlJbmRleE9mIiwibmFtZXMiLCJpc0VudHJpZXMiLCJSZWZsZWN0Iiwib3duS2V5cyIsIiRwYXJzZUZsb2F0IiwiJHRyaW0iLCJjaGFyQXQiLCIkcGFyc2VJbnQiLCJ3cyIsImhleCIsInJhZGl4IiwidGVzdCIsIm5ld1Byb21pc2VDYXBhYmlsaXR5IiwicHJvbWlzZUNhcGFiaWxpdHkiLCJTUkMiLCIkdG9TdHJpbmciLCJUT19TVFJJTkciLCJUUEwiLCJpc0Z1bmN0aW9uIiwiY2xhc3NvZiIsImJ1aWx0aW5FeGVjIiwicmUxIiwicmUyIiwicmVnZXhwRmxhZ3MiLCJuYXRpdmVFeGVjIiwibmF0aXZlUmVwbGFjZSIsInBhdGNoZWRFeGVjIiwiTEFTVF9JTkRFWCIsIlVQREFURVNfTEFTVF9JTkRFWF9XUk9ORyIsIk5QQ0dfSU5DTFVERUQiLCJsYXN0SW5kZXgiLCJyZUNvcHkiLCJtYXRjaCIsImNoZWNrIiwiYnVnZ3kiLCJfX3Byb3RvX18iLCJ0YWciLCJzdGF0Iiwic2hhcmVkIiwidWlkIiwiU0hBUkVEIiwibW9kZSIsImNvcHlyaWdodCIsIkQiLCJtZXRob2QiLCJ0b0ludGVnZXIiLCJwb3MiLCJsIiwiY2hhckNvZGVBdCIsInNlYXJjaFN0cmluZyIsInF1b3QiLCJjcmVhdGVIVE1MIiwiYXR0cmlidXRlIiwicDEiLCJ0b0xvd2VyQ2FzZSIsInJlcGVhdCIsIm1heExlbmd0aCIsImZpbGxTdHJpbmciLCJsZWZ0Iiwic3RyaW5nTGVuZ3RoIiwiZmlsbFN0ciIsImludE1heExlbmd0aCIsImZpbGxMZW4iLCJzdHJpbmdGaWxsZXIiLCJjZWlsIiwic3BhY2VzIiwic3BhY2UiLCJsdHJpbSIsInJ0cmltIiwiZXhwb3J0ZXIiLCJBTElBUyIsIkZPUkNFIiwidHJpbSIsImRlZmVyIiwiY2hhbm5lbCIsInBvcnQiLCJodG1sIiwiY2VsIiwic2V0VGFzayIsInNldEltbWVkaWF0ZSIsImNsZWFyVGFzayIsImNsZWFySW1tZWRpYXRlIiwiTWVzc2FnZUNoYW5uZWwiLCJEaXNwYXRjaCIsImNvdW50ZXIiLCJxdWV1ZSIsIk9OUkVBRFlTVEFURUNIQU5HRSIsInJ1biIsImxpc3RlbmVyIiwiZXZlbnQiLCJub3ciLCJwb3J0MiIsInBvcnQxIiwib25tZXNzYWdlIiwicG9zdE1lc3NhZ2UiLCJhZGRFdmVudExpc3RlbmVyIiwiaW1wb3J0U2NyaXB0cyIsImFwcGVuZENoaWxkIiwicmVtb3ZlQ2hpbGQiLCJzZXRUaW1lb3V0IiwibWF4IiwibnVtYmVyIiwiaXNOYU4iLCIkdHlwZWQiLCIkYnVmZmVyIiwicHJvcGVydHlEZXNjIiwidG9JbmRleCIsImNyZWF0ZUFycmF5SW5jbHVkZXMiLCJBcnJheUl0ZXJhdG9ycyIsImFycmF5RmlsbCIsImFycmF5Q29weVdpdGhpbiIsIiREUCIsIiRHT1BEIiwiVWludDhBcnJheSIsIkFSUkFZX0JVRkZFUiIsIlNIQVJFRF9CVUZGRVIiLCJCWVRFU19QRVJfRUxFTUVOVCIsIiRBcnJheUJ1ZmZlciIsIkFycmF5QnVmZmVyIiwiJERhdGFWaWV3IiwiRGF0YVZpZXciLCJhcnJheUZvckVhY2giLCJhcnJheUZpbHRlciIsImFycmF5U29tZSIsImFycmF5RXZlcnkiLCJhcnJheUluY2x1ZGVzIiwiYXJyYXlWYWx1ZXMiLCJhcnJheUtleXMiLCJhcnJheUVudHJpZXMiLCJhcnJheUxhc3RJbmRleE9mIiwibGFzdEluZGV4T2YiLCJhcnJheVJlZHVjZSIsInJlZHVjZSIsImFycmF5UmVkdWNlUmlnaHQiLCJyZWR1Y2VSaWdodCIsImFycmF5Sm9pbiIsImFycmF5U29ydCIsInNvcnQiLCJhcnJheVRvU3RyaW5nIiwiYXJyYXlUb0xvY2FsZVN0cmluZyIsInRvTG9jYWxlU3RyaW5nIiwiVFlQRURfQ09OU1RSVUNUT1IiLCJERUZfQ09OU1RSVUNUT1IiLCJBTExfQ09OU1RSVUNUT1JTIiwiQ09OU1RSIiwiVFlQRURfQVJSQVkiLCJUWVBFRCIsIlZJRVciLCJXUk9OR19MRU5HVEgiLCIkbWFwIiwiYWxsb2NhdGUiLCJMSVRUTEVfRU5ESUFOIiwiVWludDE2QXJyYXkiLCJidWZmZXIiLCJGT1JDRURfU0VUIiwidG9PZmZzZXQiLCJCWVRFUyIsIm9mZnNldCIsInNwZWNpZXNGcm9tTGlzdCIsImxpc3QiLCJmcm9tTGlzdCIsImFkZEdldHRlciIsImludGVybmFsIiwiX2QiLCIkZnJvbSIsIm1hcGZuIiwibWFwcGluZyIsIiRvZiIsIlRPX0xPQ0FMRV9CVUciLCIkdG9Mb2NhbGVTdHJpbmciLCJldmVyeSIsImZpbGwiLCJmaWx0ZXIiLCJmaW5kIiwicHJlZGljYXRlIiwiZmluZEluZGV4IiwiaW5kZXhPZiIsInNlYXJjaEVsZW1lbnQiLCJpbmNsdWRlcyIsInNlcGFyYXRvciIsIm1hcCIsInJldmVyc2UiLCJtaWRkbGUiLCJzb21lIiwiY29tcGFyZWZuIiwic3ViYXJyYXkiLCJiZWdpbiIsIiRiZWdpbiIsImJ5dGVPZmZzZXQiLCIkc2xpY2UiLCIkc2V0IiwiYXJyYXlMaWtlIiwiJGl0ZXJhdG9ycyIsImlzVEFJbmRleCIsIiRnZXREZXNjIiwiJHNldERlc2MiLCJkZXNjIiwiJFR5cGVkQXJyYXlQcm90b3R5cGUkIiwiQ0xBTVBFRCIsIkdFVFRFUiIsIlNFVFRFUiIsIlR5cGVkQXJyYXkiLCJUQUMiLCJBQlYiLCJUeXBlZEFycmF5UHJvdG90eXBlIiwiYWRkRWxlbWVudCIsIm8iLCJnZXR0ZXIiLCJyb3VuZCIsInNldHRlciIsIiRvZmZzZXQiLCIkbGVuZ3RoIiwiYnl0ZUxlbmd0aCIsImtsYXNzIiwiJGxlbiIsIiRuYXRpdmVJdGVyYXRvciIsIkNPUlJFQ1RfSVRFUl9OQU1FIiwiJGl0ZXJhdG9yIiwib2YiLCJEQVRBX1ZJRVciLCJXUk9OR19JTkRFWCIsIkJhc2VCdWZmZXIiLCJMTjIiLCJCVUZGRVIiLCJCWVRFX0xFTkdUSCIsIkJZVEVfT0ZGU0VUIiwiJEJVRkZFUiIsIiRMRU5HVEgiLCIkT0ZGU0VUIiwicGFja0lFRUU3NTQiLCJtTGVuIiwibkJ5dGVzIiwiZUxlbiIsImVNYXgiLCJlQmlhcyIsInJ0IiwidW5wYWNrSUVFRTc1NCIsIm5CaXRzIiwidW5wYWNrSTMyIiwiYnl0ZXMiLCJwYWNrSTgiLCJwYWNrSTE2IiwicGFja0kzMiIsInBhY2tGNjQiLCJwYWNrRjMyIiwidmlldyIsImlzTGl0dGxlRW5kaWFuIiwiaW50SW5kZXgiLCJfYiIsInBhY2siLCJjb252ZXJzaW9uIiwiQXJyYXlCdWZmZXJQcm90byIsIiRzZXRJbnQ4Iiwic2V0SW50OCIsImdldEludDgiLCJzZXRVaW50OCIsImJ1ZmZlckxlbmd0aCIsImdldFVpbnQ4IiwiZ2V0SW50MTYiLCJnZXRVaW50MTYiLCJnZXRJbnQzMiIsImdldFVpbnQzMiIsImdldEZsb2F0MzIiLCJnZXRGbG9hdDY0Iiwic2V0SW50MTYiLCJzZXRVaW50MTYiLCJzZXRJbnQzMiIsInNldFVpbnQzMiIsInNldEZsb2F0MzIiLCJzZXRGbG9hdDY0IiwiVHlwZWQiLCJUeXBlZEFycmF5Q29uc3RydWN0b3JzIiwicHgiLCJyYW5kb20iLCJ1c2VyQWdlbnQiLCJ3a3NFeHQiLCIkU3ltYm9sIiwiVVNFX1NZTUJPTCIsIiRldmVyeSIsIiRmaWx0ZXIiLCIkZmluZCIsImZvcmNlZCIsIiRmb3JFYWNoIiwiU1RSSUNUIiwiY3JlYXRlUHJvcGVydHkiLCIkaW5kZXhPZiIsIk5FR0FUSVZFX1pFUk8iLCJhZGRUb1Vuc2NvcGFibGVzIiwiQXJndW1lbnRzIiwiJHJlZHVjZSIsInVwVG8iLCJzaXplIiwiY2xvbmVkIiwiJHNvbWUiLCIkc29ydCIsInRvSlNPTiIsInB2IiwiVE9fUFJJTUlUSVZFIiwiRGF0ZVByb3RvIiwiSU5WQUxJRF9EQVRFIiwiSEFTX0lOU1RBTkNFIiwiRnVuY3Rpb25Qcm90byIsIkZQcm90byIsIm5hbWVSRSIsInN0cm9uZyIsIk1BUCIsInNxcnQiLCIkYWNvc2giLCJhY29zaCIsIk51bWJlciIsIk1BWF9WQUxVRSIsIiRhc2luaCIsImFzaW5oIiwiJGF0YW5oIiwiYXRhbmgiLCJjYnJ0IiwiY2x6MzIiLCJMT0cyRSIsImNvc2giLCJoeXBvdCIsInZhbHVlMSIsInZhbHVlMiIsImRpdiIsInN1bSIsImxhcmciLCIkaW11bCIsImltdWwiLCJVSU5UMTYiLCJ4biIsInluIiwieGwiLCJ5bCIsImxvZzEwIiwiTE9HMTBFIiwibG9nMiIsInNpbmgiLCJFIiwidGFuaCIsInRydW5jIiwiJE51bWJlciIsIkJST0tFTl9DT0YiLCJUUklNIiwidG9OdW1iZXIiLCJhcmd1bWVudCIsInRoaXJkIiwibWF4Q29kZSIsImZpcnN0IiwiY29kZSIsImRpZ2l0cyIsInBhcnNlSW50IiwiX2lzRmluaXRlIiwiaXNJbnRlZ2VyIiwiaXNTYWZlSW50ZWdlciIsIk1BWF9TQUZFX0lOVEVHRVIiLCJNSU5fU0FGRV9JTlRFR0VSIiwicGFyc2VGbG9hdCIsImFOdW1iZXJWYWx1ZSIsIiR0b0ZpeGVkIiwidG9GaXhlZCIsIkVSUk9SIiwiWkVSTyIsIm11bHRpcGx5IiwiYzIiLCJkaXZpZGUiLCJudW1Ub1N0cmluZyIsInQiLCJhY2MiLCJmcmFjdGlvbkRpZ2l0cyIsInoiLCJ4MiIsIiRmYWlscyIsIiR0b1ByZWNpc2lvbiIsInRvUHJlY2lzaW9uIiwicHJlY2lzaW9uIiwiJGZyZWV6ZSIsIiRnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCIkZ2V0UHJvdG90eXBlT2YiLCIkaXNFeHRlbnNpYmxlIiwiJGlzRnJvemVuIiwiJGlzU2VhbGVkIiwiJHByZXZlbnRFeHRlbnNpb25zIiwiJHNlYWwiLCJJbnRlcm5hbCIsIm5ld0dlbmVyaWNQcm9taXNlQ2FwYWJpbGl0eSIsIk93blByb21pc2VDYXBhYmlsaXR5IiwiV3JhcHBlciIsIm1pY3JvdGFzayIsIm5ld1Byb21pc2VDYXBhYmlsaXR5TW9kdWxlIiwicGVyZm9ybSIsInByb21pc2VSZXNvbHZlIiwiUFJPTUlTRSIsInZlcnNpb25zIiwidjgiLCIkUHJvbWlzZSIsImVtcHR5IiwiVVNFX05BVElWRSIsIkZha2VQcm9taXNlIiwiUHJvbWlzZVJlamVjdGlvbkV2ZW50IiwiaXNUaGVuYWJsZSIsImlzUmVqZWN0IiwiX24iLCJjaGFpbiIsIl9jIiwiX3YiLCJvayIsIl9zIiwicmVhY3Rpb24iLCJleGl0ZWQiLCJoYW5kbGVyIiwiZmFpbCIsIl9oIiwib25IYW5kbGVVbmhhbmRsZWQiLCJvblVuaGFuZGxlZCIsImNvbnNvbGUiLCJ1bmhhbmRsZWQiLCJpc1VuaGFuZGxlZCIsImVtaXQiLCJvbnVuaGFuZGxlZHJlamVjdGlvbiIsInJlYXNvbiIsImVycm9yIiwiX2EiLCJvbnJlamVjdGlvbmhhbmRsZWQiLCIkcmVqZWN0IiwiX3ciLCIkcmVzb2x2ZSIsImV4ZWN1dG9yIiwiZXJyIiwib25GdWxmaWxsZWQiLCJvblJlamVjdGVkIiwiY2FwYWJpbGl0eSIsImFsbCIsInJlbWFpbmluZyIsIiRpbmRleCIsImFscmVhZHlDYWxsZWQiLCJyYWNlIiwickFwcGx5IiwiZkFwcGx5IiwidGhpc0FyZ3VtZW50IiwiYXJndW1lbnRzTGlzdCIsIkwiLCJyQ29uc3RydWN0IiwiTkVXX1RBUkdFVF9CVUciLCJBUkdTX0JVRyIsIlRhcmdldCIsIm5ld1RhcmdldCIsIiRhcmdzIiwicHJvcGVydHlLZXkiLCJhdHRyaWJ1dGVzIiwiZGVsZXRlUHJvcGVydHkiLCJFbnVtZXJhdGUiLCJlbnVtZXJhdGUiLCJnZXRQcm90byIsInJlY2VpdmVyIiwic2V0UHJvdG8iLCJWIiwiZXhpc3RpbmdEZXNjcmlwdG9yIiwib3duRGVzYyIsIiRmbGFncyIsIiRSZWdFeHAiLCJDT1JSRUNUX05FVyIsInRpUkUiLCJwaVJFIiwiZmlVIiwicHJveHkiLCJmbGFncyIsImFkdmFuY2VTdHJpbmdJbmRleCIsInJlZ0V4cEV4ZWMiLCIkbWF0Y2giLCJtYXliZUNhbGxOYXRpdmUiLCJyeCIsImZ1bGxVbmljb2RlIiwibWF0Y2hTdHIiLCJTVUJTVElUVVRJT05fU1lNQk9MUyIsIlNVQlNUSVRVVElPTl9TWU1CT0xTX05PX05BTUVEIiwiUkVQTEFDRSIsIiRyZXBsYWNlIiwic2VhcmNoVmFsdWUiLCJyZXBsYWNlVmFsdWUiLCJmdW5jdGlvbmFsUmVwbGFjZSIsInJlc3VsdHMiLCJhY2N1bXVsYXRlZFJlc3VsdCIsIm5leHRTb3VyY2VQb3NpdGlvbiIsIm1hdGNoZWQiLCJwb3NpdGlvbiIsImNhcHR1cmVzIiwibmFtZWRDYXB0dXJlcyIsInJlcGxhY2VyQXJncyIsInJlcGxhY2VtZW50IiwiZ2V0U3Vic3RpdHV0aW9uIiwidGFpbFBvcyIsImNoIiwiY2FwdHVyZSIsInNhbWVWYWx1ZSIsIlNFQVJDSCIsIiRzZWFyY2giLCJwcmV2aW91c0xhc3RJbmRleCIsImNhbGxSZWdFeHBFeGVjIiwiJG1pbiIsIiRwdXNoIiwiJFNQTElUIiwiTEVOR1RIIiwiTUFYX1VJTlQzMiIsIlNVUFBPUlRTX1kiLCJTUExJVCIsIiRzcGxpdCIsImludGVybmFsU3BsaXQiLCJsaW1pdCIsImxhc3RMZW5ndGgiLCJvdXRwdXQiLCJsYXN0TGFzdEluZGV4Iiwic3BsaXRMaW1pdCIsInNlcGFyYXRvckNvcHkiLCJzcGxpdHRlciIsInVuaWNvZGVNYXRjaGluZyIsImxpbSIsInEiLCJkZWZpbmUiLCJhZGQiLCIkYXQiLCJjb2RlUG9pbnRBdCIsImNvbnRleHQiLCJFTkRTX1dJVEgiLCIkZW5kc1dpdGgiLCJlbmRzV2l0aCIsImVuZFBvc2l0aW9uIiwic2VhcmNoIiwiY29sb3IiLCJmcm9tQ2hhckNvZGUiLCIkZnJvbUNvZGVQb2ludCIsImZyb21Db2RlUG9pbnQiLCJJTkNMVURFUyIsInBvaW50IiwidXJsIiwicmF3IiwiY2FsbFNpdGUiLCJ0cGwiLCJTVEFSVFNfV0lUSCIsIiRzdGFydHNXaXRoIiwic3RhcnRzV2l0aCIsIndrc0RlZmluZSIsImVudW1LZXlzIiwiX2NyZWF0ZSIsImdPUE5FeHQiLCIkR09QUyIsIiRKU09OIiwiSlNPTiIsIl9zdHJpbmdpZnkiLCJzdHJpbmdpZnkiLCJISURERU4iLCJTeW1ib2xSZWdpc3RyeSIsIkFsbFN5bWJvbHMiLCJPUFN5bWJvbHMiLCJRT2JqZWN0IiwiZmluZENoaWxkIiwic2V0U3ltYm9sRGVzYyIsInByb3RvRGVzYyIsIndyYXAiLCJzeW0iLCJpc1N5bWJvbCIsIiRkZWZpbmVQcm9wZXJ0aWVzIiwiJHByb3BlcnR5SXNFbnVtZXJhYmxlIiwiJGdldE93blByb3BlcnR5TmFtZXMiLCIkZ2V0T3duUHJvcGVydHlTeW1ib2xzIiwiSVNfT1AiLCJlczZTeW1ib2xzIiwid2VsbEtub3duU3ltYm9scyIsImtleUZvciIsInVzZVNldHRlciIsInVzZVNpbXBsZSIsIkZBSUxTX09OX1BSSU1JVElWRVMiLCJyZXBsYWNlciIsIiRyZXBsYWNlciIsIiRpc1ZpZXciLCJpc1ZpZXciLCJmaW4iLCJ2aWV3UyIsInZpZXdUIiwiaW5pdCIsIkludGVybmFsTWFwIiwiZWFjaCIsIndlYWsiLCJOQVRJVkVfV0VBS19NQVAiLCJJU19JRTExIiwiQWN0aXZlWE9iamVjdCIsIldFQUtfTUFQIiwiJFdlYWtNYXAiLCJXRUFLX1NFVCIsImFycmF5U3BlY2llc0NyZWF0ZSIsImZsYXRNYXAiLCIkaW5jbHVkZXMiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzIiwiZ2V0RGVzYyIsIiR2YWx1ZXMiLCJvbkZpbmFsbHkiLCIkcGFkIiwiV0VCS0lUX0JVRyIsInBhZEVuZCIsInBhZFN0YXJ0IiwiVE9fU1RSSU5HX1RBRyIsIkFycmF5VmFsdWVzIiwiRE9NSXRlcmFibGVzIiwiQ1NTUnVsZUxpc3QiLCJDU1NTdHlsZURlY2xhcmF0aW9uIiwiQ1NTVmFsdWVMaXN0IiwiQ2xpZW50UmVjdExpc3QiLCJET01SZWN0TGlzdCIsIkRPTVN0cmluZ0xpc3QiLCJET01Ub2tlbkxpc3QiLCJEYXRhVHJhbnNmZXJJdGVtTGlzdCIsIkZpbGVMaXN0IiwiSFRNTEFsbENvbGxlY3Rpb24iLCJIVE1MQ29sbGVjdGlvbiIsIkhUTUxGb3JtRWxlbWVudCIsIkhUTUxTZWxlY3RFbGVtZW50IiwiTWVkaWFMaXN0IiwiTWltZVR5cGVBcnJheSIsIk5hbWVkTm9kZU1hcCIsIk5vZGVMaXN0IiwiUGFpbnRSZXF1ZXN0TGlzdCIsIlBsdWdpbiIsIlBsdWdpbkFycmF5IiwiU1ZHTGVuZ3RoTGlzdCIsIlNWR051bWJlckxpc3QiLCJTVkdQYXRoU2VnTGlzdCIsIlNWR1BvaW50TGlzdCIsIlNWR1N0cmluZ0xpc3QiLCJTVkdUcmFuc2Zvcm1MaXN0IiwiU291cmNlQnVmZmVyTGlzdCIsIlN0eWxlU2hlZXRMaXN0IiwiVGV4dFRyYWNrQ3VlTGlzdCIsIlRleHRUcmFja0xpc3QiLCJUb3VjaExpc3QiLCJjb2xsZWN0aW9ucyIsImV4cGxpY2l0IiwiQ29sbGVjdGlvbiIsIiR0YXNrIiwiTVNJRSIsInRpbWUiLCJib3VuZEFyZ3MiLCJzZXRJbnRlcnZhbCIsInJ1bnRpbWUiLCJPcCIsImhhc093biIsIm9iaiIsIml0ZXJhdG9yU3ltYm9sIiwiYXN5bmNJdGVyYXRvclN5bWJvbCIsImFzeW5jSXRlcmF0b3IiLCJ0b1N0cmluZ1RhZ1N5bWJvbCIsInRvU3RyaW5nVGFnIiwiaW5uZXJGbiIsIm91dGVyRm4iLCJ0cnlMb2NzTGlzdCIsInByb3RvR2VuZXJhdG9yIiwiR2VuZXJhdG9yIiwiZ2VuZXJhdG9yIiwiQ29udGV4dCIsIm1ha2VJbnZva2VNZXRob2QiLCJ0cnlDYXRjaCIsIkdlblN0YXRlU3VzcGVuZGVkU3RhcnQiLCJHZW5TdGF0ZVN1c3BlbmRlZFlpZWxkIiwiR2VuU3RhdGVFeGVjdXRpbmciLCJHZW5TdGF0ZUNvbXBsZXRlZCIsIkNvbnRpbnVlU2VudGluZWwiLCJHZW5lcmF0b3JGdW5jdGlvbiIsIkdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlIiwiTmF0aXZlSXRlcmF0b3JQcm90b3R5cGUiLCJHcCIsImRlZmluZUl0ZXJhdG9yTWV0aG9kcyIsIl9pbnZva2UiLCJBc3luY0l0ZXJhdG9yIiwiUHJvbWlzZUltcGwiLCJyZWNvcmQiLCJfX2F3YWl0IiwidW53cmFwcGVkIiwicHJldmlvdXNQcm9taXNlIiwiY2FsbEludm9rZVdpdGhNZXRob2RBbmRBcmciLCJzdGF0ZSIsIkVycm9yIiwiZG9uZVJlc3VsdCIsImRlbGVnYXRlIiwiZGVsZWdhdGVSZXN1bHQiLCJtYXliZUludm9rZURlbGVnYXRlIiwic2VudCIsIl9zZW50IiwiZGlzcGF0Y2hFeGNlcHRpb24iLCJhYnJ1cHQiLCJtZXRob2ROYW1lIiwiaW5mbyIsInJlc3VsdE5hbWUiLCJuZXh0TG9jIiwicHVzaFRyeUVudHJ5IiwibG9jcyIsInRyeUxvYyIsImNhdGNoTG9jIiwiZmluYWxseUxvYyIsImFmdGVyTG9jIiwidHJ5RW50cmllcyIsInJlc2V0VHJ5RW50cnkiLCJjb21wbGV0aW9uIiwicmVzZXQiLCJpdGVyYXRvck1ldGhvZCIsImRpc3BsYXlOYW1lIiwiaXNHZW5lcmF0b3JGdW5jdGlvbiIsImdlbkZ1biIsImN0b3IiLCJtYXJrIiwiYXdyYXAiLCJhc3luYyIsInBvcCIsInNraXBUZW1wUmVzZXQiLCJzdG9wIiwicm9vdFJlY29yZCIsInJ2YWwiLCJleGNlcHRpb24iLCJoYW5kbGUiLCJsb2MiLCJjYXVnaHQiLCJoYXNDYXRjaCIsImhhc0ZpbmFsbHkiLCJmaW5hbGx5RW50cnkiLCJjb21wbGV0ZSIsImZpbmlzaCIsInRocm93biIsImRlbGVnYXRlWWllbGQiLCJyZWdlbmVyYXRvclJ1bnRpbWUiLCJhY2NpZGVudGFsU3RyaWN0TW9kZSIsImdsb2JhbFRoaXMiLCJjaHJvbWUiLCJicm93c2VyIiwiQ0hST01FX1NFTkRfTUVTU0FHRV9DQUxMQkFDS19OT19SRVNQT05TRV9NRVNTQUdFIiwid3JhcEFQSXMiLCJleHRlbnNpb25BUElzIiwiYXBpTWV0YWRhdGEiLCJEZWZhdWx0V2Vha01hcCIsIldlYWtNYXAiLCJjcmVhdGVJdGVtIiwiaXRlbXMiLCJzdXBlciIsIm1ha2VDYWxsYmFjayIsIm1ldGFkYXRhIiwiY2FsbGJhY2tBcmdzIiwibGFzdEVycm9yIiwibWVzc2FnZSIsInNpbmdsZUNhbGxiYWNrQXJnIiwicGx1cmFsaXplQXJndW1lbnRzIiwibnVtQXJncyIsIndyYXBBc3luY0Z1bmN0aW9uIiwibWluQXJncyIsIm1heEFyZ3MiLCJmYWxsYmFja1RvTm9DYWxsYmFjayIsImNiRXJyb3IiLCJ3YXJuIiwibm9DYWxsYmFjayIsIndyYXBNZXRob2QiLCJQcm94eSIsInRhcmdldE1ldGhvZCIsInRoaXNPYmoiLCJ3cmFwT2JqZWN0Iiwid3JhcHBlcnMiLCJjYWNoZSIsImhhbmRsZXJzIiwicHJveHlUYXJnZXQiLCJwcm9wIiwid3JhcEV2ZW50Iiwid3JhcHBlck1hcCIsImFkZExpc3RlbmVyIiwiaGFzTGlzdGVuZXIiLCJyZW1vdmVMaXN0ZW5lciIsIm9uUmVxdWVzdEZpbmlzaGVkV3JhcHBlcnMiLCJyZXEiLCJ3cmFwcGVkUmVxIiwiZ2V0Q29udGVudCIsIm9uTWVzc2FnZVdyYXBwZXJzIiwic2VuZGVyIiwic2VuZFJlc3BvbnNlIiwid3JhcHBlZFNlbmRSZXNwb25zZSIsImRpZENhbGxTZW5kUmVzcG9uc2UiLCJzZW5kUmVzcG9uc2VQcm9taXNlIiwicmVzcG9uc2UiLCJpc1Jlc3VsdFRoZW5hYmxlIiwic2VuZFByb21pc2VkUmVzdWx0IiwiX19tb3pXZWJFeHRlbnNpb25Qb2x5ZmlsbFJlamVjdF9fIiwiY2F0Y2giLCJ3cmFwcGVkU2VuZE1lc3NhZ2VDYWxsYmFjayIsInJlcGx5Iiwid3JhcHBlZFNlbmRNZXNzYWdlIiwiYXBpTmFtZXNwYWNlT2JqIiwid3JhcHBlZENiIiwic2VuZE1lc3NhZ2UiLCJzdGF0aWNXcmFwcGVycyIsImRldnRvb2xzIiwibmV0d29yayIsIm9uUmVxdWVzdEZpbmlzaGVkIiwib25NZXNzYWdlIiwib25NZXNzYWdlRXh0ZXJuYWwiLCJ0YWJzIiwic2V0dGluZ01ldGFkYXRhIiwicHJpdmFjeSIsInNlcnZpY2VzIiwid2Vic2l0ZXMiLCJBQ1RJT05fQVBJIiwicmVnZXhfcGMiLCJyZWdleF91c2VyIiwiZ2V0RnVsbElEc0Zyb21QYXRoIiwicGF0aCIsInBvc3RJRCIsImNvbW1lbnRJRCIsInVzZXIiLCJzdWJyZWRkaXQiLCJtYXRjaGVzX3BjIiwibWF0Y2hlc191c2VyIiwicmVmb3JtYXRSZWRkaXRUZXh0IiwiYm9keSIsInN1YnN0ciIsImlzUmVtb3ZlZEl0ZW0iLCJpdGVtIiwicmVtb3ZhbF9yZWFzb24iLCJpc0NvbW1lbnQiLCJpc1JlbW92ZWRDb21tZW50IiwiaXNSZW1vdmVkUG9zdCIsImF1dGhvciIsImlzVXNlckRlbGV0ZWRJdGVtIiwiaXNVc2VyRGVsZXRlZENvbW1lbnQiLCJpc19yb2JvdF9pbmRleGFibGUiLCJpc1VzZXJEZWxldGVkUG9zdCIsInRyaW1EaWN0X2J5X251bWJlclZhbHVlZEF0dHJpYnV0ZSIsImRpY3QiLCJtYXhOdW1JdGVtcyIsIm51bWJlclZhbHVlZEF0dHJpYnV0ZSIsInNob3J0ZW5lZEFycmF5Iiwic29ydERpY3RfYnlfbnVtYmVyVmFsdWVkQXR0cmlidXRlIiwibmV3RGljdCIsImFycmF5IiwiSXRlbUZvclN0b3JhZ2UiLCJjcmVhdGVkX3V0YyIsInVuc2VlbiIsIl9jbGFzc0NhbGxDaGVjayIsInUiLCJfY3JlYXRlQ2xhc3MiLCJDaGFuZ2VGb3JTdG9yYWdlIiwiX3JlZiIsIl9yZWYkaWQiLCJfcmVmJG9ic2VydmVkX3V0YyIsIm9ic2VydmVkX3V0YyIsIl9yZWYkY2hhbmdlX3R5cGUiLCJjaGFuZ2VfdHlwZSIsIl9yZWYkc2Vlbl9jb3VudCIsInNlZW5fY291bnQiLCJfcmVmJG9iamVjdCIsImciLCJSRU1PVkVEIiwiREVMRVRFRCIsIkFQUFJPVkVEIiwiTE9DS0VEIiwiVU5MT0NLRUQiLCJFRElURUQiLCJMb2NhbFN0b3JhZ2VJdGVtIiwiX3JlZjIiLCJfcmVmMiRpdGVtIiwiX3JlZjIkb2JzZXJ2ZWRfdXRjIiwiX3JlZjIkb2JqZWN0IiwidGV4dCIsInRpdGxlIiwiY3JlYXRlTm90aWZpY2F0aW9uIiwiX3JlZjMiLCJub3RpZmljYXRpb25JZCIsImxvY2F0aW9uIiwicHJvdG9jb2wiLCJhY3Rpb24iLCJvcHRpb25zIiwicmVnaXN0cmF0aW9uIiwic2hvd05vdGlmaWNhdGlvbiIsImljb24iLCJ1cGRhdGVCYWRnZVVuc2VlbkNvdW50IiwiZ2V0U3Vic2NyaWJlZFVzZXJzX3dpdGhVbnNlZW5JRHMiLCJ1c2Vyc1Vuc2VlbklEcyIsInRvdGFsIiwiaWRzIiwic2V0QmFkZ2VCYWNrZ3JvdW5kQ29sb3IiLCJzZXRCYWRnZVRleHQiLCJfcmVnZW5lcmF0b3JSdW50aW1lIiwiX3R5cGVvZiIsImFzeW5jR2VuZXJhdG9yU3RlcCIsImdlbiIsIl9uZXh0IiwiX3Rocm93IiwiX2FzeW5jVG9HZW5lcmF0b3IiLCJUQVJHRVRfU0VFTl9DT1VOVF9GT1JfUFJFVklPVVNMWV9SRUNPUkRFRF9DSEFOR0UiLCJzZXRDdXJyZW50U3RhdGVGb3JJZCIsInN1YnNjcmliZWRGcm9tVVJMIiwic3Vic2NyaWJlZEZyb20iLCJzdG9yYWdlIiwic3luYyIsImdldEF1dGgiLCJhdXRoIiwiY2hlY2tGb3JDaGFuZ2VzX3RoaW5nX2J5SWQiLCJfY2FsbGVlMiIsInRoaW5nIiwiaXNVc2VyIiwiaXRlbUxvb2t1cCIsInF1YXJhbnRpbmVkX3N1YnJlZGRpdHMiLCJtb25pdG9yX3F1YXJhbnRpbmVkIiwiX2FyZ3MyIiwiX2NvbnRleHQyIiwibG9va3VwSXRlbXNCeUlEIiwidGVtcFZhcl9tb25pdG9yX3F1YXJhbnRpbmVkIiwicmVtb3ZhbF9zdGF0dXMiLCJsb2NrX3N0YXR1cyIsInRhcmdldF9zZWVuX2NvdW50IiwiU0VFTl9DT1VOVF9ERUZBVUxUIiwiZ2V0T2JqZWN0TmFtZXNGb3JUaGluZyIsImtub3duX3JlbW92ZWQiLCJrbm93bl9hcHByb3ZlZCIsImtub3duX2xvY2tlZCIsImtub3duX3VubG9ja2VkIiwiY2hhbmdlcyIsInJlbW92ZWQiLCJhcHByb3ZlZCIsImxvY2tlZCIsInVubG9ja2VkIiwiaXRlbVdyYXAiLCJuZXdMb2NhbFN0b3JhZ2VJdGVtcyIsImNoYW5nZVR5cGVzIiwibnVtX2NoYW5nZXMiLCJnZXRMb2NhbFN0b3JhZ2VJdGVtcyIsImV4aXN0aW5nTG9jYWxTdG9yYWdlSXRlbXMiLCJfY2hyb21lJHN0b3JhZ2Ukc3luYyQiLCJ0cmFjayIsIm1hcmtDaGFuZ2VzIiwiX2RlZmluZVByb3BlcnR5IiwiTUFYX1NZTkNfU1RPUkFHRV9JVEVNU19QRVJfT0JKRUNUIiwiTUFYX1NZTkNfU1RPUkFHRV9DSEFOR0VTIiwiYWRkTG9jYWxTdG9yYWdlSXRlbXMiLCJfeDQiLCJfeDUiLCJfeDYiLCJfeDciLCJfeDgiLCJfeDkiLCJjaGFuZ2VJc1ByZXZpb3VzbHlSZWNvcmRlZCIsIl9zdGVwIiwiX2l0ZXJhdG9yIiwiX2NyZWF0ZUZvck9mSXRlcmF0b3JIZWxwZXIiLCJjaGFuZ2UiLCJjaGFuZ2Vfb2JqIiwiZ2V0SUQiLCJnZXRDaGFuZ2VUeXBlSW50ZXJuYWwiLCJhbGVydF9jdXJyZW50X2xpc3QiLCJhbGVydF90eXBlIiwiYWxlcnRfdGV4dCIsImFsZXJ0X2tub3duX2hhc2giLCJub3JtYWxfY3VycmVudF9saXN0Iiwibm9ybWFsX3R5cGUiLCJub3JtYWxfdGV4dCIsIm5vcm1hbF9rbm93bl9oYXNoIiwiYWxlcnRfdW5zZWVuX2lkcyIsIm5vcm1hbF91bnNlZW5faWRzIiwiYWxlcnRfdXNlckRlbGV0ZWRfdW5zZWVuX2lkcyIsImV4aXN0aW5nTG9jYWxTdG9yYWdlSXRlbSIsIm5ld0xvY2FsU3RvcmFnZUl0ZW0iLCJyZXNldFNlZW5Db3VudCIsIm1hcmtVbnNlZW4iLCJhbGVydF90eXBlX3ZhciIsInRoaXNfbG9jYWxTdG9yYWdlSXRlbSIsImluY3JlbWVudFNlZW5Db3VudCIsIlVOU1VCU0NSSUJFX1RFWFQiLCJTVUJTQ1JJQkVfVEVYVCIsImhvc3RuYW1lIiwic2V0VGV4dEFuZEZ1bmN0aW9uX3N1YnNjcmliZSIsImNvbW1lbnRCb2R5IiwiJCIsIm9mZiIsImNsaWNrIiwiZXZlbnRPYmoiLCJzdWJzY3JpYmVJZF9jaGFuZ2VUZXh0Iiwic2V0VGV4dEFuZEZ1bmN0aW9uX3Vuc3Vic2NyaWJlIiwidW5zdWJzY3JpYmVJZF9jaGFuZ2VUZXh0Iiwic3Vic2NyaWJlSWQiLCJfY2FsbGVlIiwiX2NvbnRleHQiLCJocmVmIiwic3RvcmVkSXRlbXMiLCJpdGVtT2JqIiwic2V0VGV4dCIsInNhdmVMb2NhbFN0b3JhZ2VJdGVtcyIsInVuc3Vic2NyaWJlSWQiLCJpZF9tYXRjaF9jb21tZW50IiwiaWRfbWF0Y2hfcG9zdCIsImRlZmF1bHROZXdSZWRkaXRUYXJnZXQiLCJyZWRkaXRNb2RpZmljYXRpb25zIiwib3RoZXJfc3Vic2NyaXB0aW9ucyIsImhpZGVfc3Vic2NyaWJlIiwic3Vic2NyaWJlZF91c2Vyc19sb3dlcmNhc2UiLCJ1bnN1YnNjcmliZWRfdXNlcnNfbG93ZXJjYXNlIiwiaXNOZXdSZWRkaXQiLCJCb29sZWFuIiwicXVlcnlTZWxlY3RvciIsImdldEF0dHJpYnV0ZSIsImlmVGhyZWFkUGFnZV9zaG93UmVtb3ZhbFN0YXR1cyIsInN1YnNjcmliZUlmTm90VW5zdWJzY3JpYmVkIiwidXNlcl9sYyIsIk1BWF9TVUJTQ1JJUFRJT05TIiwic3Vic2NyaWJlVXNlciIsInVzZXJuYW1lIiwidG9BcnJheSIsInRleHRDb250ZW50Iiwic2VsZWN0b3JfY29tbWVudHMiLCJhZGRTdWJzY3JpYmVMaW5rc19uZXdSZWRkaXRfY29tbWVudHMiLCJhcnJpdmUiLCJzZWxlY3Rvcl9wb3N0cyIsImFkZFN1YnNjcmliZUxpbmtzX25ld1JlZGRpdF9wb3N0cyIsImFkZERpcmVjdExpbmtzX25ld1JlZGRpdF9jb21tZW50cyIsInNob3dSZW1vdmFsU3RhdHVzRm9yVGhyZWFkT3ZlcmxheSIsIl8kJCIsInNlbGVjdG9yIiwiYWRkU3Vic2NyaWJlTGlua3Nfb2xkUmVkZGl0IiwicmVtb3ZlZEJ5TW9kZXJhdG9yVGV4dCIsImRpcmVjdExpbmtfY2xhc3MiLCJwcm9jZXNzTGlzdCIsImVsZW1lbnRzIiwiY2xvc2VzdF9kaXZfYW5jZXN0b3IiLCJjbG9zZXN0IiwicmVkZGl0TGluayIsImF0dHIiLCJVUkwiLCJzZWFyY2hQYXJhbXMiLCJob3N0IiwibmV3RWwiLCJjbG9uZSIsIm91dGVySFRNTCIsImluc2VydEFmdGVyIiwicHJvY2Vzc0NvbW1lbnRzT25QYWdlTG9hZCIsIm5ld1JlZGRpdFRhcmdldCIsInBvc3REYXRhIiwiX2dldEZ1bGxJRHNGcm9tUGF0aDIiLCJfc2xpY2VkVG9BcnJheSIsInBhdGhuYW1lIiwic3Vic3RyaW5nIiwic2hvd1JlbW92YWxTdGF0dXMiLCJfb2JqZWN0U3ByZWFkIiwiaXNfcmVtb3ZlZCIsIl9yZWYkbmV3UmVkZGl0VGFyZ2V0IiwiX3JlZiRwb3N0RGF0YSIsIl9nZXRGdWxsSURzRnJvbVBhdGg0IiwiY2xhc3NOYW1lIiwibWVzc2FnZV8xIiwicmVtb3ZlZF9ieV9jYXRlZ29yeSIsIm9wdGlvbnNJRCIsIm1lc3NhZ2VfMiIsInBvc3RfcGF0aCIsInJldmVkZGl0X2xpbmsiLCIkaHRtbF93cmFwIiwiJGh0bWxfY29udGVudCIsIiRodG1sX2Rlc2NyaXB0aW9uIiwiYXBwZW5kIiwiYWZ0ZXIiLCJwcmVwZW5kVG8iLCJfZ2V0RnVsbElEc0Zyb21QYXRoNiIsInBhcmVudE5vZGUiLCJnZXRJRF9uZXdSZWRkaXQiLCJpZF9tYXRjaCIsInN1YnNjcmlwdGlvbnMiLCJpZHgiLCJ0YXJnZXRlZEVsZW1lbnQiLCIkYnV0dG9uIiwiZ2V0QnV0dG9uIiwiYXBwZW5kQnV0dG9uVG8iLCIkYnV0dG9uX2Nsb25lIiwiYm9keUVsZW1lbnQiLCJhcHBlbmRUbyIsImJ1dHRvbl9zZWFyY2hfdGV4dCIsInJlbW92ZSIsIiRsYXN0X2J1dHRvbiIsImNoaWxkcmVuIiwiX2dldEZ1bGxJRHNGcm9tUGF0aDgiLCJidXR0b25zIiwiJG5ld0J1dHRvbiIsInJldmRkaXRNb2RpZmljYXRpb25zIiwiaXNVc2VyUGFnZSIsImlzSW5mb1BhZ2UiLCJtaW5BdHRyaWJ1dGVWYWx1ZSIsInNlZW5fcmVtb3ZlZF9pZHMiLCJnZXRJRHNIYXNoRnJvbVNlbGVjdG9yIiwic2Vlbl9hcHByb3ZlZF9pZHMiLCJzZWVuX2xvY2tlZF9pZHMiLCJzZWVuX3VubG9ja2VkX2lkcyIsIm1hcmtJRHNBc1NlZW5JZlN1YnNjcmliZWQiLCJmaW5kSURzRm9yVXNlckFuZE1hcmsiLCJtdXRhdGlvbnMiLCJnZXRFbGVtZW50QnlJZCIsImRpc2Nvbm5lY3QiLCJjaGlsZExpc3QiLCJzdWJ0cmVlIiwiYWRkU3Vic2NyaWJlTGlua3NfcmV2ZGRpdF9jb21tZW50cyIsImFkZFN1YnNjcmliZUxpbmtzX3JldmRkaXRfcG9zdHMiLCJjbGFzc0xpc3QiLCJjb250YWlucyIsImxpbmtzIiwiJG5ld0xpbmsiLCJoYXNoIiwiZW51bWVyYWJsZU9ubHkiLCJpbnB1dCIsInByaW0iLCJfdG9QcmltaXRpdmUiLCJfdG9Qcm9wZXJ0eUtleSIsIl90b0NvbnN1bWFibGVBcnJheSIsIl9hcnJheUxpa2VUb0FycmF5IiwiX2FycmF5V2l0aG91dEhvbGVzIiwiX2l0ZXJhYmxlVG9BcnJheSIsIm1pbkxlbiIsIl91bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheSIsIl9ub25JdGVyYWJsZVNwcmVhZCIsImFycjIiLCJOT19BVVRIIiwibW9uaXRvcl9xdWFyYW50aW5lZF9yZW1vdGUiLCJwYXJhbXMiLCJyYXdfanNvbiIsImZldGNoX2ZvclJlZGRpdCIsImdldEZldGNoUGFyYW1zIiwiY29va2llRGV0YWlsc19yZWRkaXRTZXNzaW9uIiwiYWNjZXB0YWJsZV9zZXRDb29raWVEZXRhaWxzIiwiZ2V0U2V0dGFibGVDb29raWUiLCJjb29raWUiLCJmaWx0ZXJlZCIsImNvb2tpZV9yZWRkaXRTZXNzaW9uIiwiX2FyZ3MiLCJ0MCIsInQxIiwiY3JlZGVudGlhbHMiLCJoZWFkZXJzIiwiZmV0Y2giLCJoYW5kbGVGZXRjaEVycm9ycyIsImdldFJlZGRpdERhdGEiLCJfeCIsIl94MiIsInN0YXR1c1RleHQiLCJqc29uIiwiZ2V0UmVkZGl0VG9rZW4iLCJhY2Nlc3NfdG9rZW4iLCJnZXRPcHRpb25zIiwidXNlcnMiLCJvdGhlcnMiLCJ1c2VfdGhpc19jbGllbnRJRCIsImN1c3RvbV9jbGllbnRpZCIsInRva2VuSW5pdCIsIkF1dGhvcml6YXRpb24iLCJidG9hIiwiZW5jb2RlVVJJQ29tcG9uZW50IiwidG9rZW4iLCJwYXRoX2FuZF9zZWFyY2giLCJnZXRMb2dnZWRpblVzZXIiLCJnZXRSZWRkaXRVc2VybmFtZSIsInRyYWNrVHlwZXMiLCJnZXRPYmplY3ROYW1lIiwiYWRkVHJhY2tUeXBlcyIsImdldFVzZXJJbml0IiwibWFya1NlZW5Gb3JTdG9yYWdlS2V5Iiwic3RvcmFnZV9rZXlzIiwiaXNfdXNlciIsInN0b3JhZ2VfaXRlbSIsInJlbW92ZWRfaWRzIiwiYXBwcm92ZWRfaWRzIiwibG9ja2VkX2lkcyIsInVubG9ja2VkX2lkcyIsImNhbGxiYWNrIiwidXNlcl9zdWJzY3JpcHRpb25zIiwiaXRlbXNUb1NhdmUiLCJtYWluS2V5Iiwib3RoZXJLZXlzIiwiZnVsbEtleW5hbWUiLCJjYWxsYmFja1N1Y2Nlc3MiLCJjYWxsYmFja0Vycm9yIiwidXNlckluaXQiLCJnZXRTdWJzY3JpYmVkVXNlcnNfd2l0aFNlZW5BbmRVbnNlZW5JRHMiLCJ1c2Vyc193aXRoSURzIiwiZ2V0SURzX3RoaW5nIiwiZ2V0VW5zZWVuSURzX3RoaW5nIiwidHJhY2tfcmVtb3ZhbCIsInRyYWNrX2xvY2siLCJ1bnNlZW5JRHMiLCJzZWVuSURzIiwidHlwZXMiLCJzZWVuIiwia2V5X2xvY2FsU3RvcmFnZSIsImxvY2FsIiwibG9jYWxTdG9yYWdlSXRlbXMiLCJfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18iLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJjYWNoZWRNb2R1bGUiLCJfX3dlYnBhY2tfbW9kdWxlc19fIiwiZGVmaW5pdGlvbiIsIl9nbG9iYWwiLCJfX2VzTW9kdWxlIiwiX2JhYmVsUG9seWZpbGwiLCJtYXRjaGVzIiwiZXh0ZW5kIiwiZXhwciIsImVsZW0iLCJpbm5lclRleHQiLCJsb2NhbFN0b3JhZ2UiLCJzZXRJdGVtIiwiZXh0ZW5zaW9uU2F5c05vU3Vic2NyaXB0aW9ucyIsImlzUmVkZGl0IiwialF1ZXJ5IiwicmVhZHkiLCJwYXRoUGFydHMiLCJyZW1vdmVJdGVtIiwidXNlcl91bnN1YnNjcmlwdGlvbnMiXSwic291cmNlUm9vdCI6IiJ9