!function(t){var n={};function e(r){if(n[r])return n[r].exports;var o=n[r]={i:r,l:!1,exports:{}};return t[r].call(o.exports,o,o.exports,e),o.l=!0,o.exports}e.m=t,e.c=n,e.d=function(t,n,r){e.o(t,n)||Object.defineProperty(t,n,{enumerable:!0,get:r})},e.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},e.t=function(t,n){if(1&n&&(t=e(t)),8&n)return t;if(4&n&&"object"==typeof t&&t&&t.__esModule)return t;var r=Object.create(null);if(e.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:t}),2&n&&"string"!=typeof t)for(var o in t)e.d(r,o,function(n){return t[n]}.bind(null,o));return r},e.n=function(t){var n=t&&t.__esModule?function(){return t.default}:function(){return t};return e.d(n,"a",n),n},e.o=function(t,n){return Object.prototype.hasOwnProperty.call(t,n)},e.p="",e(e.s=316)}([function(t,n,e){var r=e(4),o=e(10),i=e(17),u=e(14),c=e(20),a=function(t,n,e){var s,f,l,h,g=t&a.F,p=t&a.G,v=t&a.S,d=t&a.P,m=t&a.B,y=p?r:v?r[n]||(r[n]={}):(r[n]||{}).prototype,b=p?o:o[n]||(o[n]={}),A=b.prototype||(b.prototype={});for(s in p&&(e=n),e)l=((f=!g&&y&&void 0!==y[s])?y:e)[s],h=m&&f?c(l,r):d&&"function"==typeof l?c(Function.call,l):l,y&&u(y,s,l,t&a.U),b[s]!=l&&i(b,s,h),d&&A[s]!=l&&(A[s]=l)};r.core=o,a.F=1,a.G=2,a.S=4,a.P=8,a.B=16,a.W=32,a.U=64,a.R=128,t.exports=a},function(t,n,e){"use strict";e.r(n),e.d(n,"INTERVAL_DEFAULT",function(){return s}),e.d(n,"SEEN_COUNT_DEFAULT",function(){return f}),e.d(n,"MAX_SYNC_STORAGE_ITEMS_PER_OBJECT",function(){return l}),e.d(n,"MAX_SYNC_STORAGE_CHANGES",function(){return h}),e.d(n,"MAX_OTHER_SUBSCRIPTIONS",function(){return g}),e.d(n,"REMOVED",function(){return p}),e.d(n,"APPROVED",function(){return v}),e.d(n,"LOCKED",function(){return d}),e.d(n,"UNLOCKED",function(){return m}),e.d(n,"EDITED",function(){return y}),e.d(n,"DELETED",function(){return b}),e.d(n,"getObjectNamesForThing",function(){return _}),e.d(n,"markEverythingAsSeen",function(){return O}),e.d(n,"markThingAsSeen",function(){return E}),e.d(n,"setStorageUpdateBadge",function(){return j}),e.d(n,"markIDsAsSeenIfSubscribed",function(){return P}),e.d(n,"subscribeId",function(){return I}),e.d(n,"unsubscribeId",function(){return M}),e.d(n,"getSubscribedIds",function(){return T}),e.d(n,"subscribeUser",function(){return F}),e.d(n,"unsubscribeUser",function(){return L}),e.d(n,"initStorage",function(){return C}),e.d(n,"getSubscribedUsers_withSeenAndUnseenIDs",function(){return N}),e.d(n,"getSubscribedUsers_withUnseenIDs",function(){return R}),e.d(n,"getUnseenIDs_thing",function(){return D}),e.d(n,"getIDs_thing",function(){return U}),e.d(n,"getLocalStorageItems",function(){return B}),e.d(n,"saveLocalStorageItems",function(){return V}),e.d(n,"addLocalStorageItems",function(){return W}),e.d(n,"getItemFromLocalStorage",function(){return G}),e.d(n,"getAllChanges",function(){return q}),e.d(n,"getOptions",function(){return $}),e.d(n,"saveOptions",function(){return z});var r=e(2),o=e(3),i=e.n(o);function u(t,n){var e=Object.keys(t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);n&&(r=r.filter(function(n){return Object.getOwnPropertyDescriptor(t,n).enumerable})),e.push.apply(e,r)}return e}function c(t){for(var n=1;n<arguments.length;n++){var e=null!=arguments[n]?arguments[n]:{};n%2?u(e,!0).forEach(function(n){a(t,n,e[n])}):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(e)):u(e).forEach(function(n){Object.defineProperty(t,n,Object.getOwnPropertyDescriptor(e,n))})}return t}function a(t,n,e){return n in t?Object.defineProperty(t,n,{value:e,enumerable:!0,configurable:!0,writable:!0}):t[n]=e,t}var s=1,f=2,l=130,h=100,g=100,p=1,v=2,d=3,m=4,y=5,b=6,A={changes:[],removed:{},approved:{},locked:{},unlocked:{}},x=function(t,n,e){return e?t+"_u_"+n:t+"_"+n},w=function(t,n){var e=!(arguments.length>2&&void 0!==arguments[2])||arguments[2];Object.keys(A).forEach(function(r){t[x(r,n,e)]=A[r]})},_=function(t){var n=!(arguments.length>1&&void 0!==arguments[1])||arguments[1],e={};return Object.keys(A).forEach(function(r){e[r]=x(r,t,n)}),e},S=function(t){var n={};return w(n,t,!0),n},O=function(){return i.a.storage.sync.get(null).then(function(t){return Object.keys(t.user_subscriptions).forEach(function(n){E(t,n,!0)}),E(t,"other",!1),j(t)})},E=function(t,n,e){var r=_(n,e);delete r.changes;var o=[];Object.values(r).forEach(function(t){o.push(t)}),o.forEach(function(n){Object.values(t[n]).forEach(function(t){t.u=!1})})},j=function(t){return i.a.storage.sync.set(t).then(function(t){return i.a.runtime.sendMessage({action:"update-badge"})})},k=function(t,n,e,o,i){var u=t[n[e]];Object.keys(o).forEach(function(t){t in u?u[t].u=!1:i&&(u[t]=new r.ItemForStorage(o[t],!1))})},P=function(t,n,e,r,o,i,u){var c=arguments.length>7&&void 0!==arguments[7]?arguments[7]:function(){},a=_(n,e);delete a.changes;var s=t.user_subscriptions[n];!s&&e||(k(t,a,"removed",r,e),k(t,a,"approved",o,e),k(t,a,"locked",i,e),k(t,a,"unlocked",u,e),chrome.storage.sync.set(t,c))},I=function(t){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:function(){},e="other_subscriptions";chrome.storage.sync.get(e,function(o){o[e][t]={t:Math.floor((new Date).getTime()/1e3)};var i=Object(r.trimDict_by_numberValuedAttribute)(o[e],g,"t");chrome.storage.sync.set(a({},e,i),n)})},M=function(t){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:function(){},e="other_subscriptions",r=_("other",!1);delete r.changes,chrome.storage.sync.get(Object.values(r).concat(e),function(o){delete o[e][t],Object.values(r).forEach(function(n){t in o[n]&&delete o[n][t]}),chrome.storage.sync.set(o,function(){chrome.runtime.sendMessage({action:"update-badge"},n)})})},T=function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:function(){},n="other_subscriptions";chrome.storage.sync.get(n,function(e){t(Object.keys(e[n]))})},F=function(t){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:function(){},e=arguments.length>2&&void 0!==arguments[2]?arguments[2]:function(){},r=S(t);chrome.storage.sync.get("user_subscriptions",function(o){var i=o.user_subscriptions;t in i?e("already subscribed to this user"):Object.keys(i).length<5?(i[t]=!0,chrome.storage.sync.set(c({user_subscriptions:i},r),n)):e("maximum number of subscriptions reached")})},L=function(t,n){var e=Object.keys(S(t));chrome.storage.sync.get("user_subscriptions",function(r){var o=r.user_subscriptions;delete o[t],chrome.storage.sync.set({user_subscriptions:o},function(){chrome.storage.sync.remove(e,function(){var e=x("items",t,!0);chrome.runtime.sendMessage({action:"update-badge"}),chrome.storage.local.remove(e,n)})})})},C=function(t){chrome.storage.sync.get(null,function(n){var e;0===Object.keys(n).length?chrome.storage.sync.set((w(e={user_subscriptions:{},other_subscriptions:{},options:{interval:s,seen_count:f,custom_clientid:"",removal_status:{track:!0,notify:!0},lock_status:{track:!0,notify:!0},monitor_quarantined:!1},last_check:null,last_check_quarantined:null},"other",!1),e),t):t()})},N=function(t){chrome.storage.sync.get(null,function(n){var e=Object.keys(n.user_subscriptions),r={};e.forEach(function(t){r[t]=U(t,!0,n)}),r.other=U("other",!1,n),t(r,n)})},R=function(t){chrome.storage.sync.get(null,function(n){var e=Object.keys(n.user_subscriptions),r={};e.forEach(function(t){r[t]=D(t,!0,n)}),r.other=D("other",!1,n),t(r)})},D=function(t,n,e){return U(t,n,e).unseen},U=function(t,n,e){var r=e.options.removal_status.track,o=e.options.lock_status.track,i={},u={},c=[],a=_(t,n);return r&&c.push(a.removed,a.approved),o&&c.push(a.locked,a.unlocked),c.forEach(function(t){Object.keys(e[t]).forEach(function(n){e[t][n].u?i[n]=!0:u[n]=!0})}),{unseen:Object.keys(i),seen:Object.keys(u)}},B=function(t,n){var e=x("items",t,n);return i.a.storage.local.get(a({},e,{})).then(function(t){return t[e]})},V=function(t,n,e){var r=x("items",t,n);return i.a.storage.local.set(a({},r,e))},W=function(t,n,e){var o=x("items",n,e);return chrome.storage.local.get(a({},o,{}),function(n){var e=n[o];Object.keys(t).forEach(function(n){e[n]=t[n]});var u=e;return Object.keys(e).length>500&&(u=Object(r.trimDict_by_numberValuedAttribute)(e,500,"o")),i.a.storage.local.set(a({},o,u))})},G=function(t,n,e,o){var i=x("items",t,n);return i in o&&e in o[i]?new r.LocalStorageItem({object:o[i][e]}):""},q=function(t){chrome.storage.sync.get("user_subscriptions",function(n){var e=[x("changes","other",!1)],r={changes_other:"other"};Object.keys(n.user_subscriptions).forEach(function(t){var n=x("changes",t,!0);e.push(n),r[n]=t}),chrome.storage.sync.get(e,function(n){var o={};e.forEach(function(t){t in n&&n[t].length&&(o[r[t]]=n[t])}),t(o)})})},$=function(t){return i.a.storage.sync.get(["user_subscriptions","other_subscriptions","options"]).then(function(n){var e=Object.keys(n.user_subscriptions),r=Object.keys(n.other_subscriptions),o=n.options;return t(e,r,o)}).catch(console.log)},z=function(t,n,e,r,o,i,u,c,a,s){chrome.storage.sync.set({options:{seen_count:t,interval:n,custom_clientid:e,removal_status:{track:r,notify:o},lock_status:{track:i,notify:u},hide_subscribe:c,monitor_quarantined:a}},s)}},function(t,n,e){"use strict";e.r(n),e.d(n,"ALARM_NAME",function(){return c}),e.d(n,"createTab",function(){return a}),e.d(n,"getFullIDsFromURL",function(){return s}),e.d(n,"getFullIDsFromPath",function(){return h}),e.d(n,"reformatRedditText",function(){return g}),e.d(n,"isRemovedItem",function(){return p}),e.d(n,"isComment",function(){return v}),e.d(n,"isRemovedComment",function(){return d}),e.d(n,"isUserDeletedComment",function(){return m}),e.d(n,"isUserDeletedPost",function(){return y}),e.d(n,"isUserDeletedItem",function(){return b}),e.d(n,"isRemovedPost",function(){return A}),e.d(n,"trimDict_by_numberValuedAttribute",function(){return x}),e.d(n,"sortDict_by_numberValuedAttribute",function(){return w}),e.d(n,"ItemForStorage",function(){return _}),e.d(n,"ChangeForStorage",function(){return S}),e.d(n,"LocalStorageItem",function(){return O}),e.d(n,"setAlarm",function(){return E}),e.d(n,"alphaLowerSort",function(){return j}),e.d(n,"goToOptions",function(){return k}),e.d(n,"showError",function(){return P}),e.d(n,"pprint",function(){return I}),e.d(n,"getPrettyTimeLength",function(){return M}),e.d(n,"getPrettyDate",function(){return T}),e.d(n,"createNotification",function(){return F}),e.d(n,"updateBadgeUnseenCount",function(){return L});var r=e(1);e(3);function o(t,n){if(!(t instanceof n))throw new TypeError("Cannot call a class as a function")}function i(t,n){for(var e=0;e<n.length;e++){var r=n[e];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function u(t,n,e){return n&&i(t.prototype,n),e&&i(t,e),t}var c="notifyme",a=function(t){chrome.tabs.create({url:t},function(n){n?chrome.windows.update(n.windowId,{focused:!0}):chrome.windows.create({url:t},function(t){chrome.windows.update(t.id,{focused:!0})})})},s=function(t){var n=t.replace(/https:\/\/[^/]*re(ve)?ddit.com/,"");return h(n)},f=/^\/(v|r|user)\/([^/]+)\/comments\/([^/]+)\/[^/]*(?:\/([^/?&#]+))?/,l=/^\/(?:user|y|u)\/([^/?&#]+)\/?/,h=function(t){var n=void 0,e=void 0,r=void 0,o=void 0,i=t.match(f),u=t.match(l);i?("user"===i[1]?r=i[2]:o=i[2],i[3]&&(n="t3_"+i[3]),i[4]&&(e="t1_"+i[4])):u&&(r=u[1]);return[n,e,r,o]},g=function(t){return t.replace(/&amp;/g,"&").replace(/&gt;/g,">").replace(/&lt;/g,"<").replace(/\s+/g," ").substr(0,300)},p=function(t){return!!t.removal_reason||(v(t.name)?d(t):A(t))},v=function(t){return"t1"===t.substr(0,2)},d=function(t){return"["===t.author.replace(/\\/g,"")[0]&&"["===t.body.replace(/\\/g,"")[0]},m=function(t){return"[deleted]"===t.body.replace(/\\/g,"")&&"[deleted]"===t.author.replace(/\\/g,"")},y=function(t){return!t.is_robot_indexable&&"[deleted]"===t.author.replace(/\\/g,"")},b=function(t){return v(t.name)?m(t):y(t)},A=function(t){return!t.is_robot_indexable},x=function(t,n,e){var r=w(t,e).slice(0,n),o={};return r.forEach(function(t){o[t[0]]=t[1]}),o},w=function(t,n){var e=Object.keys(t).map(function(n){return[n,t[n]]});return e.sort(function(t,e){return e[1][n]-t[1][n]}),e},_=function(){function t(n,e){o(this,t),this.c=n,this.u=e}return u(t,[{key:"getCreatedUTC",value:function(){return this.c}},{key:"getUnseen",value:function(){return this.u}}]),t}(),S=function(){function t(n){var e=n.id,r=void 0===e?null:e,i=n.observed_utc,u=void 0===i?null:i,c=n.change_type,a=void 0===c?null:c,s=n.seen_count,f=void 0===s?null:s,l=n.object,h=void 0===l?null:l;o(this,t),h?(this.i=h.i,this.o=h.o,this.g=h.g,this.n=h.n):(this.i=r,this.o=u,this.g=a,this.n=f)}return u(t,[{key:"getID",value:function(){return this.i}},{key:"getObservedUTC",value:function(){return this.o}},{key:"getChangeTypeInternal",value:function(){return this.g}},{key:"getChangeType",value:function(){switch(this.g){case r.REMOVED:return"mod removed";case r.DELETED:return"user deleted";case r.APPROVED:return"approved";case r.LOCKED:return"locked";case r.UNLOCKED:return"unlocked";case r.EDITED:return"edited"}}},{key:"getSeenCount",value:function(){return this.n}}]),t}(),O=function(){function t(n){var e=n.item,r=void 0===e?null:e,i=n.observed_utc,u=void 0===i?null:i,c=n.object,a=void 0===c?null:c;if(o(this,t),a)this.t=a.t,this.o=a.o,this.c=a.c,this.n=a.n||0;else{var s="";s=v(r.name)?g(r.body):r.title,this.t=s,this.o=u,this.c=r.created_utc,this.n=0}}return u(t,[{key:"setText",value:function(t){this.t=g(t)}},{key:"getText",value:function(){return this.t}},{key:"getObservedUTC",value:function(){return this.o}},{key:"getCreatedUTC",value:function(){return this.c}},{key:"resetSeenCount",value:function(){this.n=0}},{key:"getSeenCount",value:function(){return this.n}},{key:"incrementSeenCount",value:function(){return void 0===this.n&&(this.n=0),this.n+=1,this.n}}]),t}();function E(t){chrome.alarms.clear(c),chrome.alarms.create(c,{delayInMinutes:1,periodInMinutes:t})}function j(t,n){var e=t.toLowerCase(),r=n.toLowerCase();return e<r?-1:e>r?1:0}function k(){chrome.runtime.openOptionsPage?(chrome.runtime.openOptionsPage(),window.close()):window.open(chrome.runtime.getURL("/src/options.html"))}function P(t,n){$('<div class="rr-error">'+t+"</div>").appendTo(n).delay(2400).fadeTo(400,0,function(){$(this).remove()})}function I(t){console.log(JSON.stringify(t,null,"\t"))}var M=function(t){var n=[[60,"second","seconds"],[60,"minute","minutes"],[24,"hour","hours"],[7,"day","days"],[365/12/7,"week","weeks"],[12,"month","months"],[10,"year","years"],[10,"decade","decades"],[10,"century","centuries"],[10,"millenium","millenia"]];if(t<60)return t+" seconds";for(var e=t,r=0;r<n.length;r++){var o=n[r][0],i=n[r][1],u=n[r][2];if(e<o){var c=e-Math.floor(e),a=Math.round(c*n[r-1][0]);if(n[r-1][0]===a&&(e+=1,a=0),(Math.floor(e)>1||0==Math.floor(e))&&(i=u),r>1&&a>0){var s=n[r-1][1];a>1&&(s=n[r-1][2]),i+=", "+String(a)+" "+s}return String(Math.floor(e))+" "+i}e/=o}},T=function(t){var n=Math.floor((new Date).getTime()/1e3)-t;return M(n)+" ago"},F=function(t){var n=t.notificationId,e=t.title,r=t.message;location.protocol.match(/^http/)?chrome.runtime.sendMessage({action:"create-notification",options:{notificationId:n,title:e,message:r}}):registration.showNotification(e,{body:r,data:n,icon:"/icons/128.png",message:r})},L=function(){location.protocol.match(/^http/)?chrome.runtime.sendMessage({action:"update-badge"}):Object(r.getSubscribedUsers_withUnseenIDs)(function(t){var n=0;Object.values(t).forEach(function(t){n+=t.length});var e=n.toString();0==n&&(e=""),chrome.action.setBadgeBackgroundColor({color:"red"}),chrome.action.setBadgeText({text:e})})}},function(t,n,e){var r,o,i;o=[t],void 0===(i="function"==typeof(r=function(t){"use strict";if("undefined"==typeof browser||Object.getPrototypeOf(browser)!==Object.prototype){const n="The message port closed before a response was received.",e="Returning a Promise is the preferred way to send a reply from an onMessage/onMessageExternal listener, as the sendResponse will be removed from the specs (See https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/runtime/onMessage)",r=t=>{const r={alarms:{clear:{minArgs:0,maxArgs:1},clearAll:{minArgs:0,maxArgs:0},get:{minArgs:0,maxArgs:1},getAll:{minArgs:0,maxArgs:0}},bookmarks:{create:{minArgs:1,maxArgs:1},get:{minArgs:1,maxArgs:1},getChildren:{minArgs:1,maxArgs:1},getRecent:{minArgs:1,maxArgs:1},getSubTree:{minArgs:1,maxArgs:1},getTree:{minArgs:0,maxArgs:0},move:{minArgs:2,maxArgs:2},remove:{minArgs:1,maxArgs:1},removeTree:{minArgs:1,maxArgs:1},search:{minArgs:1,maxArgs:1},update:{minArgs:2,maxArgs:2}},browserAction:{disable:{minArgs:0,maxArgs:1,fallbackToNoCallback:!0},enable:{minArgs:0,maxArgs:1,fallbackToNoCallback:!0},getBadgeBackgroundColor:{minArgs:1,maxArgs:1},getBadgeText:{minArgs:1,maxArgs:1},getPopup:{minArgs:1,maxArgs:1},getTitle:{minArgs:1,maxArgs:1},openPopup:{minArgs:0,maxArgs:0},setBadgeBackgroundColor:{minArgs:1,maxArgs:1,fallbackToNoCallback:!0},setBadgeText:{minArgs:1,maxArgs:1,fallbackToNoCallback:!0},setIcon:{minArgs:1,maxArgs:1},setPopup:{minArgs:1,maxArgs:1,fallbackToNoCallback:!0},setTitle:{minArgs:1,maxArgs:1,fallbackToNoCallback:!0}},browsingData:{remove:{minArgs:2,maxArgs:2},removeCache:{minArgs:1,maxArgs:1},removeCookies:{minArgs:1,maxArgs:1},removeDownloads:{minArgs:1,maxArgs:1},removeFormData:{minArgs:1,maxArgs:1},removeHistory:{minArgs:1,maxArgs:1},removeLocalStorage:{minArgs:1,maxArgs:1},removePasswords:{minArgs:1,maxArgs:1},removePluginData:{minArgs:1,maxArgs:1},settings:{minArgs:0,maxArgs:0}},commands:{getAll:{minArgs:0,maxArgs:0}},contextMenus:{remove:{minArgs:1,maxArgs:1},removeAll:{minArgs:0,maxArgs:0},update:{minArgs:2,maxArgs:2}},cookies:{get:{minArgs:1,maxArgs:1},getAll:{minArgs:1,maxArgs:1},getAllCookieStores:{minArgs:0,maxArgs:0},remove:{minArgs:1,maxArgs:1},set:{minArgs:1,maxArgs:1}},devtools:{inspectedWindow:{eval:{minArgs:1,maxArgs:2,singleCallbackArg:!1}},panels:{create:{minArgs:3,maxArgs:3,singleCallbackArg:!0}}},downloads:{cancel:{minArgs:1,maxArgs:1},download:{minArgs:1,maxArgs:1},erase:{minArgs:1,maxArgs:1},getFileIcon:{minArgs:1,maxArgs:2},open:{minArgs:1,maxArgs:1,fallbackToNoCallback:!0},pause:{minArgs:1,maxArgs:1},removeFile:{minArgs:1,maxArgs:1},resume:{minArgs:1,maxArgs:1},search:{minArgs:1,maxArgs:1},show:{minArgs:1,maxArgs:1,fallbackToNoCallback:!0}},extension:{isAllowedFileSchemeAccess:{minArgs:0,maxArgs:0},isAllowedIncognitoAccess:{minArgs:0,maxArgs:0}},history:{addUrl:{minArgs:1,maxArgs:1},deleteAll:{minArgs:0,maxArgs:0},deleteRange:{minArgs:1,maxArgs:1},deleteUrl:{minArgs:1,maxArgs:1},getVisits:{minArgs:1,maxArgs:1},search:{minArgs:1,maxArgs:1}},i18n:{detectLanguage:{minArgs:1,maxArgs:1},getAcceptLanguages:{minArgs:0,maxArgs:0}},identity:{launchWebAuthFlow:{minArgs:1,maxArgs:1}},idle:{queryState:{minArgs:1,maxArgs:1}},management:{get:{minArgs:1,maxArgs:1},getAll:{minArgs:0,maxArgs:0},getSelf:{minArgs:0,maxArgs:0},setEnabled:{minArgs:2,maxArgs:2},uninstallSelf:{minArgs:0,maxArgs:1}},notifications:{clear:{minArgs:1,maxArgs:1},create:{minArgs:1,maxArgs:2},getAll:{minArgs:0,maxArgs:0},getPermissionLevel:{minArgs:0,maxArgs:0},update:{minArgs:2,maxArgs:2}},pageAction:{getPopup:{minArgs:1,maxArgs:1},getTitle:{minArgs:1,maxArgs:1},hide:{minArgs:1,maxArgs:1,fallbackToNoCallback:!0},setIcon:{minArgs:1,maxArgs:1},setPopup:{minArgs:1,maxArgs:1,fallbackToNoCallback:!0},setTitle:{minArgs:1,maxArgs:1,fallbackToNoCallback:!0},show:{minArgs:1,maxArgs:1,fallbackToNoCallback:!0}},permissions:{contains:{minArgs:1,maxArgs:1},getAll:{minArgs:0,maxArgs:0},remove:{minArgs:1,maxArgs:1},request:{minArgs:1,maxArgs:1}},runtime:{getBackgroundPage:{minArgs:0,maxArgs:0},getPlatformInfo:{minArgs:0,maxArgs:0},openOptionsPage:{minArgs:0,maxArgs:0},requestUpdateCheck:{minArgs:0,maxArgs:0},sendMessage:{minArgs:1,maxArgs:3},sendNativeMessage:{minArgs:2,maxArgs:2},setUninstallURL:{minArgs:1,maxArgs:1}},sessions:{getDevices:{minArgs:0,maxArgs:1},getRecentlyClosed:{minArgs:0,maxArgs:1},restore:{minArgs:0,maxArgs:1}},storage:{local:{clear:{minArgs:0,maxArgs:0},get:{minArgs:0,maxArgs:1},getBytesInUse:{minArgs:0,maxArgs:1},remove:{minArgs:1,maxArgs:1},set:{minArgs:1,maxArgs:1}},managed:{get:{minArgs:0,maxArgs:1},getBytesInUse:{minArgs:0,maxArgs:1}},sync:{clear:{minArgs:0,maxArgs:0},get:{minArgs:0,maxArgs:1},getBytesInUse:{minArgs:0,maxArgs:1},remove:{minArgs:1,maxArgs:1},set:{minArgs:1,maxArgs:1}}},tabs:{captureVisibleTab:{minArgs:0,maxArgs:2},create:{minArgs:1,maxArgs:1},detectLanguage:{minArgs:0,maxArgs:1},discard:{minArgs:0,maxArgs:1},duplicate:{minArgs:1,maxArgs:1},executeScript:{minArgs:1,maxArgs:2},get:{minArgs:1,maxArgs:1},getCurrent:{minArgs:0,maxArgs:0},getZoom:{minArgs:0,maxArgs:1},getZoomSettings:{minArgs:0,maxArgs:1},highlight:{minArgs:1,maxArgs:1},insertCSS:{minArgs:1,maxArgs:2},move:{minArgs:2,maxArgs:2},query:{minArgs:1,maxArgs:1},reload:{minArgs:0,maxArgs:2},remove:{minArgs:1,maxArgs:1},removeCSS:{minArgs:1,maxArgs:2},sendMessage:{minArgs:2,maxArgs:3},setZoom:{minArgs:1,maxArgs:2},setZoomSettings:{minArgs:1,maxArgs:2},update:{minArgs:1,maxArgs:2}},topSites:{get:{minArgs:0,maxArgs:0}},webNavigation:{getAllFrames:{minArgs:1,maxArgs:1},getFrame:{minArgs:1,maxArgs:1}},webRequest:{handlerBehaviorChanged:{minArgs:0,maxArgs:0}},windows:{create:{minArgs:0,maxArgs:1},get:{minArgs:1,maxArgs:2},getAll:{minArgs:0,maxArgs:1},getCurrent:{minArgs:0,maxArgs:1},getLastFocused:{minArgs:0,maxArgs:1},remove:{minArgs:1,maxArgs:1},update:{minArgs:2,maxArgs:2}}};if(0===Object.keys(r).length)throw new Error("api-metadata.json has not been included in browser-polyfill");const o=(n,e)=>(...r)=>{t.runtime.lastError?n.reject(t.runtime.lastError):e.singleCallbackArg||r.length<=1&&!1!==e.singleCallbackArg?n.resolve(r[0]):n.resolve(r)},i=t=>1==t?"argument":"arguments",u=(t,n,e)=>new Proxy(n,{apply:(n,r,o)=>e.call(r,t,...o)});let c=Function.call.bind(Object.prototype.hasOwnProperty);const a=(t,n={},e={})=>{let r=Object.create(null),s={has:(n,e)=>e in t||e in r,get(s,f,l){if(f in r)return r[f];if(!(f in t))return;let h=t[f];if("function"==typeof h)if("function"==typeof n[f])h=u(t,t[f],n[f]);else if(c(e,f)){let n=((t,n)=>(function(e,...r){if(r.length<n.minArgs)throw new Error(`Expected at least ${n.minArgs} ${i(n.minArgs)} for ${t}(), got ${r.length}`);if(r.length>n.maxArgs)throw new Error(`Expected at most ${n.maxArgs} ${i(n.maxArgs)} for ${t}(), got ${r.length}`);return new Promise((i,u)=>{if(n.fallbackToNoCallback)try{e[t](...r,o({resolve:i,reject:u},n))}catch(o){console.warn(`${t} API method doesn't seem to support the callback parameter, `+"falling back to call it without a callback: ",o),e[t](...r),n.fallbackToNoCallback=!1,n.noCallback=!0,i()}else n.noCallback?(e[t](...r),i()):e[t](...r,o({resolve:i,reject:u},n))})}))(f,e[f]);h=u(t,t[f],n)}else h=h.bind(t);else{if("object"!=typeof h||null===h||!c(n,f)&&!c(e,f))return Object.defineProperty(r,f,{configurable:!0,enumerable:!0,get:()=>t[f],set(n){t[f]=n}}),h;h=a(h,n[f],e[f])}return r[f]=h,h},set:(n,e,o,i)=>(e in r?r[e]=o:t[e]=o,!0),defineProperty:(t,n,e)=>Reflect.defineProperty(r,n,e),deleteProperty:(t,n)=>Reflect.deleteProperty(r,n)},f=Object.create(t);return new Proxy(f,s)},s=t=>({addListener(n,e,...r){n.addListener(t.get(e),...r)},hasListener:(n,e)=>n.hasListener(t.get(e)),removeListener(n,e){n.removeListener(t.get(e))}});let f=!1;const l=new class extends WeakMap{constructor(t,n){super(n),this.createItem=t}get(t){return this.has(t)||this.set(t,this.createItem(t)),super.get(t)}}(t=>"function"!=typeof t?t:function(n,r,o){let i,u,c=!1,a=new Promise(t=>{i=function(n){f||(console.warn(e,(new Error).stack),f=!0),c=!0,t(n)}});try{u=t(n,r,i)}catch(t){u=Promise.reject(t)}const s=!0!==u&&(t=>t&&"object"==typeof t&&"function"==typeof t.then)(u);if(!0!==u&&!s&&!c)return!1;const l=t=>{t.then(t=>{o(t)},t=>{let n;n=t&&(t instanceof Error||"string"==typeof t.message)?t.message:"An unexpected error occurred",o({__mozWebExtensionPolyfillReject__:!0,message:n})}).catch(t=>{console.error("Failed to send onMessage rejected reply",t)})};return l(s?u:a),!0}),h=(e,r,o,...u)=>{if(u.length<r.minArgs)throw new Error(`Expected at least ${r.minArgs} ${i(r.minArgs)} for ${e}(), got ${u.length}`);if(u.length>r.maxArgs)throw new Error(`Expected at most ${r.maxArgs} ${i(r.maxArgs)} for ${e}(), got ${u.length}`);return new Promise((e,r)=>{const i=(({reject:e,resolve:r},o)=>{t.runtime.lastError?t.runtime.lastError.message===n?r():e(t.runtime.lastError):o&&o.__mozWebExtensionPolyfillReject__?e(new Error(o.message)):r(o)}).bind(null,{resolve:e,reject:r});u.push(i),o.sendMessage(...u)})},g={runtime:{onMessage:s(l),onMessageExternal:s(l),sendMessage:h.bind(null,"sendMessage",{minArgs:1,maxArgs:3})},tabs:{sendMessage:h.bind(null,"sendMessage",{minArgs:2,maxArgs:3})}},p={clear:{minArgs:1,maxArgs:1},get:{minArgs:1,maxArgs:1},set:{minArgs:1,maxArgs:1}};return r.privacy={network:{networkPredictionEnabled:p,webRTCIPHandlingPolicy:p},services:{passwordSavingEnabled:p},websites:{hyperlinkAuditingEnabled:p,referrersEnabled:p}},a(t,g,r)};if("object"!=typeof chrome||!chrome||!chrome.runtime||!chrome.runtime.id)throw new Error("This script should only be loaded in a browser extension.");t.exports=r(chrome)}else t.exports=browser})?r.apply(n,o):r)||(t.exports=i)},function(t,n){var e=t.exports="undefined"!=typeof window&&window.Math==Math?window:"undefined"!=typeof self&&self.Math==Math?self:Function("return this")();"number"==typeof __g&&(__g=e)},function(t,n){t.exports=function(t){try{return!!t()}catch(t){return!0}}},function(t,n,e){var r=e(7);t.exports=function(t){if(!r(t))throw TypeError(t+" is not an object!");return t}},function(t,n){t.exports=function(t){return"object"==typeof t?null!==t:"function"==typeof t}},function(t,n,e){var r=e(52)("wks"),o=e(33),i=e(4).Symbol,u="function"==typeof i;(t.exports=function(t){return r[t]||(r[t]=u&&i[t]||(u?i:o)("Symbol."+t))}).store=r},function(t,n,e){var r=e(22),o=Math.min;t.exports=function(t){return t>0?o(r(t),9007199254740991):0}},function(t,n){var e=t.exports={version:"2.6.11"};"number"==typeof __e&&(__e=e)},function(t,n,e){t.exports=!e(5)(function(){return 7!=Object.defineProperty({},"a",{get:function(){return 7}}).a})},function(t,n,e){var r=e(6),o=e(94),i=e(29),u=Object.defineProperty;n.f=e(11)?Object.defineProperty:function(t,n,e){if(r(t),n=i(n,!0),r(e),o)try{return u(t,n,e)}catch(t){}if("get"in e||"set"in e)throw TypeError("Accessors not supported!");return"value"in e&&(t[n]=e.value),t}},function(t,n,e){var r=e(27);t.exports=function(t){return Object(r(t))}},function(t,n,e){var r=e(4),o=e(17),i=e(16),u=e(33)("src"),c=e(131),a=(""+c).split("toString");e(10).inspectSource=function(t){return c.call(t)},(t.exports=function(t,n,e,c){var s="function"==typeof e;s&&(i(e,"name")||o(e,"name",n)),t[n]!==e&&(s&&(i(e,u)||o(e,u,t[n]?""+t[n]:a.join(String(n)))),t===r?t[n]=e:c?t[n]?t[n]=e:o(t,n,e):(delete t[n],o(t,n,e)))})(Function.prototype,"toString",function(){return"function"==typeof this&&this[u]||c.call(this)})},function(t,n,e){var r=e(0),o=e(5),i=e(27),u=/"/g,c=function(t,n,e,r){var o=String(i(t)),c="<"+n;return""!==e&&(c+=" "+e+'="'+String(r).replace(u,"&quot;")+'"'),c+">"+o+"</"+n+">"};t.exports=function(t,n){var e={};e[t]=n(c),r(r.P+r.F*o(function(){var n=""[t]('"');return n!==n.toLowerCase()||n.split('"').length>3}),"String",e)}},function(t,n){var e={}.hasOwnProperty;t.exports=function(t,n){return e.call(t,n)}},function(t,n,e){var r=e(12),o=e(32);t.exports=e(11)?function(t,n,e){return r.f(t,n,o(1,e))}:function(t,n,e){return t[n]=e,t}},function(t,n,e){var r=e(48),o=e(27);t.exports=function(t){return r(o(t))}},function(t,n,e){"use strict";var r=e(5);t.exports=function(t,n){return!!t&&r(function(){n?t.call(null,function(){},1):t.call(null)})}},function(t,n,e){var r=e(21);t.exports=function(t,n,e){if(r(t),void 0===n)return t;switch(e){case 1:return function(e){return t.call(n,e)};case 2:return function(e,r){return t.call(n,e,r)};case 3:return function(e,r,o){return t.call(n,e,r,o)}}return function(){return t.apply(n,arguments)}}},function(t,n){t.exports=function(t){if("function"!=typeof t)throw TypeError(t+" is not a function!");return t}},function(t,n){var e=Math.ceil,r=Math.floor;t.exports=function(t){return isNaN(t=+t)?0:(t>0?r:e)(t)}},function(t,n,e){var r=e(49),o=e(32),i=e(18),u=e(29),c=e(16),a=e(94),s=Object.getOwnPropertyDescriptor;n.f=e(11)?s:function(t,n){if(t=i(t),n=u(n,!0),a)try{return s(t,n)}catch(t){}if(c(t,n))return o(!r.f.call(t,n),t[n])}},function(t,n,e){var r=e(0),o=e(10),i=e(5);t.exports=function(t,n){var e=(o.Object||{})[t]||Object[t],u={};u[t]=n(e),r(r.S+r.F*i(function(){e(1)}),"Object",u)}},function(t,n,e){var r=e(20),o=e(48),i=e(13),u=e(9),c=e(110);t.exports=function(t,n){var e=1==t,a=2==t,s=3==t,f=4==t,l=6==t,h=5==t||l,g=n||c;return function(n,c,p){for(var v,d,m=i(n),y=o(m),b=r(c,p,3),A=u(y.length),x=0,w=e?g(n,A):a?g(n,0):void 0;A>x;x++)if((h||x in y)&&(d=b(v=y[x],x,m),t))if(e)w[x]=d;else if(d)switch(t){case 3:return!0;case 5:return v;case 6:return x;case 2:w.push(v)}else if(f)return!1;return l?-1:s||f?f:w}}},function(t,n){var e={}.toString;t.exports=function(t){return e.call(t).slice(8,-1)}},function(t,n){t.exports=function(t){if(null==t)throw TypeError("Can't call method on  "+t);return t}},function(t,n,e){"use strict";if(e(11)){var r=e(34),o=e(4),i=e(5),u=e(0),c=e(63),a=e(90),s=e(20),f=e(46),l=e(32),h=e(17),g=e(47),p=e(22),v=e(9),d=e(121),m=e(36),y=e(29),b=e(16),A=e(50),x=e(7),w=e(13),_=e(82),S=e(37),O=e(39),E=e(38).f,j=e(84),k=e(33),P=e(8),I=e(25),M=e(53),T=e(51),F=e(86),L=e(44),C=e(56),N=e(45),R=e(85),D=e(112),U=e(12),B=e(23),V=U.f,W=B.f,G=o.RangeError,q=o.TypeError,$=o.Uint8Array,z=Array.prototype,Y=a.ArrayBuffer,J=a.DataView,K=I(0),X=I(2),H=I(3),Z=I(4),Q=I(5),tt=I(6),nt=M(!0),et=M(!1),rt=F.values,ot=F.keys,it=F.entries,ut=z.lastIndexOf,ct=z.reduce,at=z.reduceRight,st=z.join,ft=z.sort,lt=z.slice,ht=z.toString,gt=z.toLocaleString,pt=P("iterator"),vt=P("toStringTag"),dt=k("typed_constructor"),mt=k("def_constructor"),yt=c.CONSTR,bt=c.TYPED,At=c.VIEW,xt=I(1,function(t,n){return Et(T(t,t[mt]),n)}),wt=i(function(){return 1===new $(new Uint16Array([1]).buffer)[0]}),_t=!!$&&!!$.prototype.set&&i(function(){new $(1).set({})}),St=function(t,n){var e=p(t);if(e<0||e%n)throw G("Wrong offset!");return e},Ot=function(t){if(x(t)&&bt in t)return t;throw q(t+" is not a typed array!")},Et=function(t,n){if(!(x(t)&&dt in t))throw q("It is not a typed array constructor!");return new t(n)},jt=function(t,n){return kt(T(t,t[mt]),n)},kt=function(t,n){for(var e=0,r=n.length,o=Et(t,r);r>e;)o[e]=n[e++];return o},Pt=function(t,n,e){V(t,n,{get:function(){return this._d[e]}})},It=function(t){var n,e,r,o,i,u,c=w(t),a=arguments.length,f=a>1?arguments[1]:void 0,l=void 0!==f,h=j(c);if(null!=h&&!_(h)){for(u=h.call(c),r=[],n=0;!(i=u.next()).done;n++)r.push(i.value);c=r}for(l&&a>2&&(f=s(f,arguments[2],2)),n=0,e=v(c.length),o=Et(this,e);e>n;n++)o[n]=l?f(c[n],n):c[n];return o},Mt=function(){for(var t=0,n=arguments.length,e=Et(this,n);n>t;)e[t]=arguments[t++];return e},Tt=!!$&&i(function(){gt.call(new $(1))}),Ft=function(){return gt.apply(Tt?lt.call(Ot(this)):Ot(this),arguments)},Lt={copyWithin:function(t,n){return D.call(Ot(this),t,n,arguments.length>2?arguments[2]:void 0)},every:function(t){return Z(Ot(this),t,arguments.length>1?arguments[1]:void 0)},fill:function(t){return R.apply(Ot(this),arguments)},filter:function(t){return jt(this,X(Ot(this),t,arguments.length>1?arguments[1]:void 0))},find:function(t){return Q(Ot(this),t,arguments.length>1?arguments[1]:void 0)},findIndex:function(t){return tt(Ot(this),t,arguments.length>1?arguments[1]:void 0)},forEach:function(t){K(Ot(this),t,arguments.length>1?arguments[1]:void 0)},indexOf:function(t){return et(Ot(this),t,arguments.length>1?arguments[1]:void 0)},includes:function(t){return nt(Ot(this),t,arguments.length>1?arguments[1]:void 0)},join:function(t){return st.apply(Ot(this),arguments)},lastIndexOf:function(t){return ut.apply(Ot(this),arguments)},map:function(t){return xt(Ot(this),t,arguments.length>1?arguments[1]:void 0)},reduce:function(t){return ct.apply(Ot(this),arguments)},reduceRight:function(t){return at.apply(Ot(this),arguments)},reverse:function(){for(var t,n=Ot(this).length,e=Math.floor(n/2),r=0;r<e;)t=this[r],this[r++]=this[--n],this[n]=t;return this},some:function(t){return H(Ot(this),t,arguments.length>1?arguments[1]:void 0)},sort:function(t){return ft.call(Ot(this),t)},subarray:function(t,n){var e=Ot(this),r=e.length,o=m(t,r);return new(T(e,e[mt]))(e.buffer,e.byteOffset+o*e.BYTES_PER_ELEMENT,v((void 0===n?r:m(n,r))-o))}},Ct=function(t,n){return jt(this,lt.call(Ot(this),t,n))},Nt=function(t){Ot(this);var n=St(arguments[1],1),e=this.length,r=w(t),o=v(r.length),i=0;if(o+n>e)throw G("Wrong length!");for(;i<o;)this[n+i]=r[i++]},Rt={entries:function(){return it.call(Ot(this))},keys:function(){return ot.call(Ot(this))},values:function(){return rt.call(Ot(this))}},Dt=function(t,n){return x(t)&&t[bt]&&"symbol"!=typeof n&&n in t&&String(+n)==String(n)},Ut=function(t,n){return Dt(t,n=y(n,!0))?l(2,t[n]):W(t,n)},Bt=function(t,n,e){return!(Dt(t,n=y(n,!0))&&x(e)&&b(e,"value"))||b(e,"get")||b(e,"set")||e.configurable||b(e,"writable")&&!e.writable||b(e,"enumerable")&&!e.enumerable?V(t,n,e):(t[n]=e.value,t)};yt||(B.f=Ut,U.f=Bt),u(u.S+u.F*!yt,"Object",{getOwnPropertyDescriptor:Ut,defineProperty:Bt}),i(function(){ht.call({})})&&(ht=gt=function(){return st.call(this)});var Vt=g({},Lt);g(Vt,Rt),h(Vt,pt,Rt.values),g(Vt,{slice:Ct,set:Nt,constructor:function(){},toString:ht,toLocaleString:Ft}),Pt(Vt,"buffer","b"),Pt(Vt,"byteOffset","o"),Pt(Vt,"byteLength","l"),Pt(Vt,"length","e"),V(Vt,vt,{get:function(){return this[bt]}}),t.exports=function(t,n,e,a){var s=t+((a=!!a)?"Clamped":"")+"Array",l="get"+t,g="set"+t,p=o[s],m=p||{},y=p&&O(p),b=!p||!c.ABV,w={},_=p&&p.prototype,j=function(t,e){V(t,e,{get:function(){return function(t,e){var r=t._d;return r.v[l](e*n+r.o,wt)}(this,e)},set:function(t){return function(t,e,r){var o=t._d;a&&(r=(r=Math.round(r))<0?0:r>255?255:255&r),o.v[g](e*n+o.o,r,wt)}(this,e,t)},enumerable:!0})};b?(p=e(function(t,e,r,o){f(t,p,s,"_d");var i,u,c,a,l=0,g=0;if(x(e)){if(!(e instanceof Y||"ArrayBuffer"==(a=A(e))||"SharedArrayBuffer"==a))return bt in e?kt(p,e):It.call(p,e);i=e,g=St(r,n);var m=e.byteLength;if(void 0===o){if(m%n)throw G("Wrong length!");if((u=m-g)<0)throw G("Wrong length!")}else if((u=v(o)*n)+g>m)throw G("Wrong length!");c=u/n}else c=d(e),i=new Y(u=c*n);for(h(t,"_d",{b:i,o:g,l:u,e:c,v:new J(i)});l<c;)j(t,l++)}),_=p.prototype=S(Vt),h(_,"constructor",p)):i(function(){p(1)})&&i(function(){new p(-1)})&&C(function(t){new p,new p(null),new p(1.5),new p(t)},!0)||(p=e(function(t,e,r,o){var i;return f(t,p,s),x(e)?e instanceof Y||"ArrayBuffer"==(i=A(e))||"SharedArrayBuffer"==i?void 0!==o?new m(e,St(r,n),o):void 0!==r?new m(e,St(r,n)):new m(e):bt in e?kt(p,e):It.call(p,e):new m(d(e))}),K(y!==Function.prototype?E(m).concat(E(y)):E(m),function(t){t in p||h(p,t,m[t])}),p.prototype=_,r||(_.constructor=p));var k=_[pt],P=!!k&&("values"==k.name||null==k.name),I=Rt.values;h(p,dt,!0),h(_,bt,s),h(_,At,!0),h(_,mt,p),(a?new p(1)[vt]==s:vt in _)||V(_,vt,{get:function(){return s}}),w[s]=p,u(u.G+u.W+u.F*(p!=m),w),u(u.S,s,{BYTES_PER_ELEMENT:n}),u(u.S+u.F*i(function(){m.of.call(p,1)}),s,{from:It,of:Mt}),"BYTES_PER_ELEMENT"in _||h(_,"BYTES_PER_ELEMENT",n),u(u.P,s,Lt),N(s),u(u.P+u.F*_t,s,{set:Nt}),u(u.P+u.F*!P,s,Rt),r||_.toString==ht||(_.toString=ht),u(u.P+u.F*i(function(){new p(1).slice()}),s,{slice:Ct}),u(u.P+u.F*(i(function(){return[1,2].toLocaleString()!=new p([1,2]).toLocaleString()})||!i(function(){_.toLocaleString.call([1,2])})),s,{toLocaleString:Ft}),L[s]=P?k:I,r||P||h(_,pt,I)}}else t.exports=function(){}},function(t,n,e){var r=e(7);t.exports=function(t,n){if(!r(t))return t;var e,o;if(n&&"function"==typeof(e=t.toString)&&!r(o=e.call(t)))return o;if("function"==typeof(e=t.valueOf)&&!r(o=e.call(t)))return o;if(!n&&"function"==typeof(e=t.toString)&&!r(o=e.call(t)))return o;throw TypeError("Can't convert object to primitive value")}},function(t,n,e){var r=e(33)("meta"),o=e(7),i=e(16),u=e(12).f,c=0,a=Object.isExtensible||function(){return!0},s=!e(5)(function(){return a(Object.preventExtensions({}))}),f=function(t){u(t,r,{value:{i:"O"+ ++c,w:{}}})},l=t.exports={KEY:r,NEED:!1,fastKey:function(t,n){if(!o(t))return"symbol"==typeof t?t:("string"==typeof t?"S":"P")+t;if(!i(t,r)){if(!a(t))return"F";if(!n)return"E";f(t)}return t[r].i},getWeak:function(t,n){if(!i(t,r)){if(!a(t))return!0;if(!n)return!1;f(t)}return t[r].w},onFreeze:function(t){return s&&l.NEED&&a(t)&&!i(t,r)&&f(t),t}}},function(t,n,e){"use strict";e.r(n),e.d(n,"lookupItemsByID",function(){return l}),e.d(n,"lookupItemsByUser",function(){return d}),e.d(n,"handleFetchErrors",function(){return m}),e.d(n,"getRedditToken",function(){return b}),e.d(n,"getAuth",function(){return A}),e.d(n,"getLocalAuth",function(){return x}),e.d(n,"getCookie",function(){return w}),e.d(n,"getLocalOrAppAuth",function(){return S}),e.d(n,"getLoggedinUser",function(){return O});var r=e(1),o=e(3),i=e.n(o);function u(t,n,e,r,o,i,u){try{var c=t[i](u),a=c.value}catch(t){return void e(t)}c.done?n(a):Promise.resolve(a).then(r,o)}function c(t,n){var e=Object.keys(t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);n&&(r=r.filter(function(n){return Object.getOwnPropertyDescriptor(t,n).enumerable})),e.push.apply(e,r)}return e}function a(t){for(var n=1;n<arguments.length;n++){var e=null!=arguments[n]?arguments[n]:{};n%2?c(e,!0).forEach(function(n){s(t,n,e[n])}):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(e)):c(e).forEach(function(n){Object.defineProperty(t,n,Object.getOwnPropertyDescriptor(e,n))})}return t}function s(t,n,e){return n in t?Object.defineProperty(t,n,{value:e,enumerable:!0,configurable:!0,writable:!0}):t[n]=e,t}function f(t){return function(t){if(Array.isArray(t)){for(var n=0,e=new Array(t.length);n<t.length;n++)e[n]=t[n];return e}}(t)||function(t){if(Symbol.iterator in Object(t)||"[object Arguments]"===Object.prototype.toString.call(t))return Array.from(t)}(t)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}var l=function(t,n){var e=arguments.length>2&&void 0!==arguments[2]&&arguments[2],r=arguments.length>3&&void 0!==arguments[3]&&arguments[3],o=arguments.length>4&&void 0!==arguments[4]?arguments[4]:[],i={id:t,raw_json:1};r&&(i.quarantined_subreddits=o.join(","));var u="?"+Object.keys(i).map(function(t){return"".concat(t,"=").concat(i[t])}).join("&");return v.apply(void 0,f(_("api/info",u,n,r)).concat([e]))},h={name:"reddit_session",url:"https://reddit.com"},g=["name","value","domain","path","secure","httpOnly","storeId"],p=function(t){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"https://reddit.com";if(!t)return t;var e=Object.keys(t).filter(function(t){return g.includes(t)}).reduce(function(n,e){return a({},n,s({},e,t[e]))},{});return e.url=n,e},v=function(){var t,n=(t=regeneratorRuntime.mark(function t(n,e){var r,o,u,c=arguments;return regeneratorRuntime.wrap(function(t){for(;;)switch(t.prev=t.next){case 0:return r=c.length>2&&void 0!==c[2]&&c[2],t.next=3,i.a.cookies.set({domain:"reddit.com",url:"https://reddit.com",name:"_options",value:"{%22pref_quarantine_optin%22:true}"});case 3:if(!r){t.next=12;break}return t.t0=p,t.next=7,i.a.cookies.get(h);case 7:if(t.t1=t.sent,!(o=(0,t.t0)(t.t1))){t.next=12;break}return t.next=12,i.a.cookies.remove(h);case 12:if(e||(e={}),e.cache="reload",e.headers||(e.headers={}),"en"!==e.headers["Accept-Language"]&&(e.headers["Accept-Language"]="en"),u=fetch(n,e).then(m).then(y).catch(console.log),!o){t.next=20;break}return t.next=20,i.a.cookies.set(o);case 20:return t.abrupt("return",u);case 21:case"end":return t.stop()}},t)}),function(){var n=this,e=arguments;return new Promise(function(r,o){var i=t.apply(n,e);function c(t){u(i,r,o,c,a,"next",t)}function a(t){u(i,r,o,c,a,"throw",t)}c(void 0)})});return function(t,e){return n.apply(this,arguments)}}(),d=function(t,n,e,r,o,i,u){var c={limit:100,sort:e,raw_json:1};n&&(c.after=n),r&&(c.t=r);var a="user/".concat(t,"/overview.json"),s="?"+Object.keys(c).map(function(t){return"".concat(t,"=").concat(c[t])}).join("&");return v.apply(void 0,f(_(a,s,u,i)).concat([o]))},m=function(t){if(!t.ok)throw Error(t.statusText);return t.json()},y=function(t){if(t&&t.user&&t.user.items)return t;if(!t||!t.data||!t.data.children)throw Error("reddit data is not defined");return t.data.children},b=function(t){if(!t||!t.access_token)throw Error("access token is not defined");return t.access_token},A=function(){return Object(r.getOptions)(function(t,n,e){var r="SEw1uvRd6kxFEw";if(e.custom_clientid&&"testing"===(r=e.custom_clientid))return"none";var o={headers:{Authorization:"Basic ".concat(btoa("".concat(r,":"))),"Content-Type":"application/x-www-form-urlencoded; charset=utf-8"},method:"POST",body:"grant_type=".concat(encodeURIComponent("https://oauth.reddit.com/grants/installed_client"),"&device_id=DO_NOT_TRACK_THIS_DEVICE")};return fetch("https://www.reddit.com/api/v1/access_token",o).then(m).then(b).then(function(t){return{headers:{Authorization:"bearer ".concat(t),"Accept-Language":"en"}}}).catch(console.log)})},x=function(){return fetch("https://mod.reddit.com/mail/all").then(function(t){w({url:"https://mod.reddit.com",name:"token"}).then(function(t){if(t){var n=new RegExp("[^A-Za-z0-9+/].*?$"),e=t.value.replace(n,""),r=atob(e),o=JSON.parse(r);return"accessToken"in o&&o.accessToken?{headers:{Authorization:"bearer ".concat(o.accessToken),"Accept-Language":"en"}}:null}return null})})},w=function(t){var n=t.url,e=t.name;return location.protocol.match(/^http/)?i.a.runtime.sendMessage({action:"get-cookie",options:{url:n,name:e}}).then(function(t){return t.cookie}):i.a.cookies.get({url:n,name:e})},_=function(t,n,e,r){if(e&&"none"!==e){var o="https://oauth.reddit.com/",i=t+n;return r&&(o="https://cred2.reveddit.com/",i+="&give_it_to_me=1"),[o+i,e]}var u=(r?"https://wred.reveddit.com/":"https://www.reddit.com/")+t;return"api/info"===t&&(u+=".json"),[u+=n]},S=function(){return x().then(function(t){return t||A()}).catch(console.log)},O=function(){return fetch("https://www.reddit.com/api/me.json").then(m).then(E).catch(console.log)},E=function(t){if(!t||!t.data||!t.data.name)throw Error("reddit username is not defined");return t.data.name}},function(t,n){t.exports=function(t,n){return{enumerable:!(1&t),configurable:!(2&t),writable:!(4&t),value:n}}},function(t,n){var e=0,r=Math.random();t.exports=function(t){return"Symbol(".concat(void 0===t?"":t,")_",(++e+r).toString(36))}},function(t,n){t.exports=!1},function(t,n,e){var r=e(96),o=e(69);t.exports=Object.keys||function(t){return r(t,o)}},function(t,n,e){var r=e(22),o=Math.max,i=Math.min;t.exports=function(t,n){return(t=r(t))<0?o(t+n,0):i(t,n)}},function(t,n,e){var r=e(6),o=e(97),i=e(69),u=e(68)("IE_PROTO"),c=function(){},a=function(){var t,n=e(66)("iframe"),r=i.length;for(n.style.display="none",e(70).appendChild(n),n.src="javascript:",(t=n.contentWindow.document).open(),t.write("<script>document.F=Object<\/script>"),t.close(),a=t.F;r--;)delete a.prototype[i[r]];return a()};t.exports=Object.create||function(t,n){var e;return null!==t?(c.prototype=r(t),e=new c,c.prototype=null,e[u]=t):e=a(),void 0===n?e:o(e,n)}},function(t,n,e){var r=e(96),o=e(69).concat("length","prototype");n.f=Object.getOwnPropertyNames||function(t){return r(t,o)}},function(t,n,e){var r=e(16),o=e(13),i=e(68)("IE_PROTO"),u=Object.prototype;t.exports=Object.getPrototypeOf||function(t){return t=o(t),r(t,i)?t[i]:"function"==typeof t.constructor&&t instanceof t.constructor?t.constructor.prototype:t instanceof Object?u:null}},function(t,n,e){var r=e(8)("unscopables"),o=Array.prototype;null==o[r]&&e(17)(o,r,{}),t.exports=function(t){o[r][t]=!0}},function(t,n,e){var r=e(7);t.exports=function(t,n){if(!r(t)||t._t!==n)throw TypeError("Incompatible receiver, "+n+" required!");return t}},function(t,n,e){var r=e(12).f,o=e(16),i=e(8)("toStringTag");t.exports=function(t,n,e){t&&!o(t=e?t:t.prototype,i)&&r(t,i,{configurable:!0,value:n})}},function(t,n,e){var r=e(0),o=e(27),i=e(5),u=e(72),c="["+u+"]",a=RegExp("^"+c+c+"*"),s=RegExp(c+c+"*$"),f=function(t,n,e){var o={},c=i(function(){return!!u[t]()||"​"!="​"[t]()}),a=o[t]=c?n(l):u[t];e&&(o[e]=a),r(r.P+r.F*c,"String",o)},l=f.trim=function(t,n){return t=String(o(t)),1&n&&(t=t.replace(a,"")),2&n&&(t=t.replace(s,"")),t};t.exports=f},function(t,n){t.exports={}},function(t,n,e){"use strict";var r=e(4),o=e(12),i=e(11),u=e(8)("species");t.exports=function(t){var n=r[t];i&&n&&!n[u]&&o.f(n,u,{configurable:!0,get:function(){return this}})}},function(t,n){t.exports=function(t,n,e,r){if(!(t instanceof n)||void 0!==r&&r in t)throw TypeError(e+": incorrect invocation!");return t}},function(t,n,e){var r=e(14);t.exports=function(t,n,e){for(var o in n)r(t,o,n[o],e);return t}},function(t,n,e){var r=e(26);t.exports=Object("z").propertyIsEnumerable(0)?Object:function(t){return"String"==r(t)?t.split(""):Object(t)}},function(t,n){n.f={}.propertyIsEnumerable},function(t,n,e){var r=e(26),o=e(8)("toStringTag"),i="Arguments"==r(function(){return arguments}());t.exports=function(t){var n,e,u;return void 0===t?"Undefined":null===t?"Null":"string"==typeof(e=function(t,n){try{return t[n]}catch(t){}}(n=Object(t),o))?e:i?r(n):"Object"==(u=r(n))&&"function"==typeof n.callee?"Arguments":u}},function(t,n,e){var r=e(6),o=e(21),i=e(8)("species");t.exports=function(t,n){var e,u=r(t).constructor;return void 0===u||null==(e=r(u)[i])?n:o(e)}},function(t,n,e){var r=e(10),o=e(4),i=o["__core-js_shared__"]||(o["__core-js_shared__"]={});(t.exports=function(t,n){return i[t]||(i[t]=void 0!==n?n:{})})("versions",[]).push({version:r.version,mode:e(34)?"pure":"global",copyright:"© 2019 Denis Pushkarev (zloirock.ru)"})},function(t,n,e){var r=e(18),o=e(9),i=e(36);t.exports=function(t){return function(n,e,u){var c,a=r(n),s=o(a.length),f=i(u,s);if(t&&e!=e){for(;s>f;)if((c=a[f++])!=c)return!0}else for(;s>f;f++)if((t||f in a)&&a[f]===e)return t||f||0;return!t&&-1}}},function(t,n){n.f=Object.getOwnPropertySymbols},function(t,n,e){var r=e(26);t.exports=Array.isArray||function(t){return"Array"==r(t)}},function(t,n,e){var r=e(8)("iterator"),o=!1;try{var i=[7][r]();i.return=function(){o=!0},Array.from(i,function(){throw 2})}catch(t){}t.exports=function(t,n){if(!n&&!o)return!1;var e=!1;try{var i=[7],u=i[r]();u.next=function(){return{done:e=!0}},i[r]=function(){return u},t(i)}catch(t){}return e}},function(t,n,e){"use strict";var r=e(6);t.exports=function(){var t=r(this),n="";return t.global&&(n+="g"),t.ignoreCase&&(n+="i"),t.multiline&&(n+="m"),t.unicode&&(n+="u"),t.sticky&&(n+="y"),n}},function(t,n,e){"use strict";var r=e(50),o=RegExp.prototype.exec;t.exports=function(t,n){var e=t.exec;if("function"==typeof e){var i=e.call(t,n);if("object"!=typeof i)throw new TypeError("RegExp exec method returned something other than an Object or null");return i}if("RegExp"!==r(t))throw new TypeError("RegExp#exec called on incompatible receiver");return o.call(t,n)}},function(t,n,e){"use strict";e(114);var r=e(14),o=e(17),i=e(5),u=e(27),c=e(8),a=e(87),s=c("species"),f=!i(function(){var t=/./;return t.exec=function(){var t=[];return t.groups={a:"7"},t},"7"!=="".replace(t,"$<a>")}),l=function(){var t=/(?:)/,n=t.exec;t.exec=function(){return n.apply(this,arguments)};var e="ab".split(t);return 2===e.length&&"a"===e[0]&&"b"===e[1]}();t.exports=function(t,n,e){var h=c(t),g=!i(function(){var n={};return n[h]=function(){return 7},7!=""[t](n)}),p=g?!i(function(){var n=!1,e=/a/;return e.exec=function(){return n=!0,null},"split"===t&&(e.constructor={},e.constructor[s]=function(){return e}),e[h](""),!n}):void 0;if(!g||!p||"replace"===t&&!f||"split"===t&&!l){var v=/./[h],d=e(u,h,""[t],function(t,n,e,r,o){return n.exec===a?g&&!o?{done:!0,value:v.call(n,e,r)}:{done:!0,value:t.call(e,n,r)}:{done:!1}}),m=d[0],y=d[1];r(String.prototype,t,m),o(RegExp.prototype,h,2==n?function(t,n){return y.call(t,this,n)}:function(t){return y.call(t,this)})}}},function(t,n,e){var r=e(20),o=e(109),i=e(82),u=e(6),c=e(9),a=e(84),s={},f={};(n=t.exports=function(t,n,e,l,h){var g,p,v,d,m=h?function(){return t}:a(t),y=r(e,l,n?2:1),b=0;if("function"!=typeof m)throw TypeError(t+" is not iterable!");if(i(m)){for(g=c(t.length);g>b;b++)if((d=n?y(u(p=t[b])[0],p[1]):y(t[b]))===s||d===f)return d}else for(v=m.call(t);!(p=v.next()).done;)if((d=o(v,y,p.value,n))===s||d===f)return d}).BREAK=s,n.RETURN=f},function(t,n,e){var r=e(4).navigator;t.exports=r&&r.userAgent||""},function(t,n,e){"use strict";var r=e(4),o=e(0),i=e(14),u=e(47),c=e(30),a=e(60),s=e(46),f=e(7),l=e(5),h=e(56),g=e(42),p=e(73);t.exports=function(t,n,e,v,d,m){var y=r[t],b=y,A=d?"set":"add",x=b&&b.prototype,w={},_=function(t){var n=x[t];i(x,t,"delete"==t?function(t){return!(m&&!f(t))&&n.call(this,0===t?0:t)}:"has"==t?function(t){return!(m&&!f(t))&&n.call(this,0===t?0:t)}:"get"==t?function(t){return m&&!f(t)?void 0:n.call(this,0===t?0:t)}:"add"==t?function(t){return n.call(this,0===t?0:t),this}:function(t,e){return n.call(this,0===t?0:t,e),this})};if("function"==typeof b&&(m||x.forEach&&!l(function(){(new b).entries().next()}))){var S=new b,O=S[A](m?{}:-0,1)!=S,E=l(function(){S.has(1)}),j=h(function(t){new b(t)}),k=!m&&l(function(){for(var t=new b,n=5;n--;)t[A](n,n);return!t.has(-0)});j||((b=n(function(n,e){s(n,b,t);var r=p(new y,n,b);return null!=e&&a(e,d,r[A],r),r})).prototype=x,x.constructor=b),(E||k)&&(_("delete"),_("has"),d&&_("get")),(k||O)&&_(A),m&&x.clear&&delete x.clear}else b=v.getConstructor(n,t,d,A),u(b.prototype,e),c.NEED=!0;return g(b,t),w[t]=b,o(o.G+o.W+o.F*(b!=y),w),m||v.setStrong(b,t,d),b}},function(t,n,e){for(var r,o=e(4),i=e(17),u=e(33),c=u("typed_array"),a=u("view"),s=!(!o.ArrayBuffer||!o.DataView),f=s,l=0,h="Int8Array,Uint8Array,Uint8ClampedArray,Int16Array,Uint16Array,Int32Array,Uint32Array,Float32Array,Float64Array".split(",");l<9;)(r=o[h[l++]])?(i(r.prototype,c,!0),i(r.prototype,a,!0)):f=!1;t.exports={ABV:s,CONSTR:f,TYPED:c,VIEW:a}},,function(t,n,e){"use strict";e.d(n,"b",function(){return v}),e.d(n,"a",function(){return d});var r=e(31),o=e(1),i=e(2),u=e(3),c=e.n(u);function a(t,n,e){return n in t?Object.defineProperty(t,n,{value:e,enumerable:!0,configurable:!0,writable:!0}):t[n]=e,t}function s(t,n,e,r,o,i,u){try{var c=t[i](u),a=c.value}catch(t){return void e(t)}c.done?n(a):Promise.resolve(a).then(r,o)}function f(t){return function(){var n=this,e=arguments;return new Promise(function(r,o){var i=t.apply(n,e);function u(t){s(i,r,o,u,c,"next",t)}function c(t){s(i,r,o,u,c,"throw",t)}u(void 0)})}}var l=0,h=1,g=2,p=Math.floor(60*Math.random())+60,v=function(t,n){var e=l;return n.match(/^https:\/\/www.reveddit.com/)&&(e=h),chrome.storage.sync.get(null,function(n){Object(r.getAuth)().then(function(r){return y([t],"other",!1,r,n,e,{})})})},d=function(){chrome.storage.sync.get(null,function(t){var n=Object.keys(t.user_subscriptions),e=Object.keys(t.other_subscriptions);if(n.length||e.length){var o=Math.floor(new Date/1e3);(!t.last_check_quarantined||o-t.last_check_quarantined>432e3)&&(t.tempVar_monitor_quarantined=!0),Object(r.getAuth)().then(function(e){return function(t,n){var e=Object.keys(n.other_subscriptions);e.length&&y(e,"other",!1,t,n,g)}(e,t),m(n,e,t)}).then(function(){var n={last_check:o};t.tempVar_monitor_quarantined&&(n.last_check_quarantined=o),t.tempVar_quarantined_content_found&&(n.options=t.options,n.options.monitor_quarantined=!0),chrome.storage.sync.set(n)})}})},m=function(){var t=f(regeneratorRuntime.mark(function t(n,e,o){var i;return regeneratorRuntime.wrap(function(t){for(;;)switch(t.prev=t.next){case 0:if(!n.length){t.next=3;break}return i=n[0],t.abrupt("return",Object(r.lookupItemsByUser)(i,"","new","",o.options.monitor_quarantined,o.tempVar_monitor_quarantined,e).then(function(t){if(t){var r=[],u=new Set,c={};return t.user&&t.user.items&&(t=t.user.items),t.forEach(function(t){t.data&&t.data.name&&(t=t.data),r.push(t.name),c[t.name]=t,t.quarantine&&(u.add(t.subreddit),o.tempVar_quarantined_content_found=!0)}),y(r,i,!0,e,o,g,c,Array.from(u)).then(function(){return m(n.slice(1),e,o)})}}));case 3:case"end":return t.stop()}},t)}));return function(n,e,r){return t.apply(this,arguments)}}();var y=function(){var t=f(regeneratorRuntime.mark(function t(n,e,u,s,f,l){var h,g,p,v,d=arguments;return regeneratorRuntime.wrap(function(t){for(;;)switch(t.prev=t.next){case 0:return h=d.length>6&&void 0!==d[6]?d[6]:{},g=d.length>7&&void 0!==d[7]?d[7]:[],v=f.options.monitor_quarantined,p=location.protocol.match(/^http/)?c.a.runtime.sendMessage({action:"get-reddit-items-by-id",ids:n,monitor_quarantined:v}):Object(r.lookupItemsByID)(n,s,v,f.tempVar_monitor_quarantined,g),t.abrupt("return",p.then(function(t){if(t){var n=Array.isArray(t)?t:t.items;if(n){var r=f.options.removal_status,c=f.options.lock_status,s=f.options.seen_count||o.SEEN_COUNT_DEFAULT,g=Object(o.getObjectNamesForThing)(e,u),p=f[g.removed]||{},v=f[g.approved]||{},d=f[g.locked]||{},m=f[g.unlocked]||{},y=f[g.changes]||[];u||(h={});var b=[],x=[],w=[],_=[];n.forEach(function(t){var n=t.data;u||(h[n.name]=n),Object(i.isRemovedItem)(n)?b.push(n.name):x.push(n.name),n.locked?w.push(n.name):_.push(n.name)});var S={},O=[],E=0;return Object(o.getLocalStorageItems)(e,u).then(function(t){var n;return r.track&&(E+=A(b,o.REMOVED,"mod removed",p,x,o.APPROVED,"approved",v,y,h,r.notify,S,O,u,l,t,s)),c.track&&(E+=A(w,o.LOCKED,"locked",d,_,o.UNLOCKED,"unlocked",m,y,h,c.notify,S,O,u,l,t,s)),E&&O.length&&Object(i.createNotification)({notificationId:e,title:e,message:"".concat(E," new [").concat(O.join(", "),"] actions, click to view")}),chrome.storage.sync.set((a(n={},g.removed,Object(i.trimDict_by_numberValuedAttribute)(p,o.MAX_SYNC_STORAGE_ITEMS_PER_OBJECT,"c")),a(n,g.approved,Object(i.trimDict_by_numberValuedAttribute)(v,o.MAX_SYNC_STORAGE_ITEMS_PER_OBJECT,"c")),a(n,g.locked,Object(i.trimDict_by_numberValuedAttribute)(d,o.MAX_SYNC_STORAGE_ITEMS_PER_OBJECT,"c")),a(n,g.unlocked,Object(i.trimDict_by_numberValuedAttribute)(m,o.MAX_SYNC_STORAGE_ITEMS_PER_OBJECT,"c")),a(n,g.changes,y.slice(-o.MAX_SYNC_STORAGE_CHANGES)),n),function(){return Object(i.updateBadgeUnseenCount)(),Object(o.addLocalStorageItems)(S,e,u)})})}}}));case 5:case"end":return t.stop()}},t)}));return function(n,e,r,o,i,u){return t.apply(this,arguments)}}(),b=function(t,n,e){var r=!0,o=!1,u=void 0;try{for(var c,a=e[Symbol.iterator]();!(r=(c=a.next()).done);r=!0){var s=c.value,f=s;if(f instanceof i.ChangeForStorage||(f=new i.ChangeForStorage({object:s})),f.getID()===t&&n===f.getChangeTypeInternal())return!0}}catch(t){o=!0,u=t}finally{try{r||null==a.return||a.return()}finally{if(o)throw u}}return!1};function A(t,n,e,r,u,c,a,s,f,g,v,d,m,y,A,x,w){var _=[],S=[],O=[],E=Math.floor(new Date/1e3);t.forEach(function(t){var e=g[t],u=x[t];if(y||u){if(u){var c=new i.LocalStorageItem({object:u});c.resetSeenCount(),d[t]=c}}else d[t]=new i.LocalStorageItem({item:e,observed_utc:E});if(!(t in r)){var a=!0;if((A===l&&n!==o.REMOVED||A===h)&&(a=!1),r[t]=new i.ItemForStorage(e.created_utc,a),delete s[t],a){var p=n;Object(i.isUserDeletedItem)(e)?(p=o.DELETED,O.push(t)):_.push(t),f.push(new i.ChangeForStorage({id:t,observed_utc:E,change_type:p}))}y&&(d[t]=new i.LocalStorageItem({item:e,observed_utc:E}))}}),u.forEach(function(t){var n=g[t];if(y||x[t]||(d[t]=new i.LocalStorageItem({item:n,observed_utc:E})),t in r){var e=new i.LocalStorageItem({object:x[t]}),o=e.incrementSeenCount();if(o>=w)!b(t,c,f)||o>=p?(s[t]=new i.ItemForStorage(n.created_utc,!0),delete r[t],f.push(new i.ChangeForStorage({id:t,observed_utc:E,change_type:c,seen_count:o})),S.push(t),d[t]=new i.LocalStorageItem({item:n,observed_utc:E})):d[t]=e;else d[t]=e}else s[t]=new i.ItemForStorage(n.created_utc,!1)});var j=_.length+S.length+O.length;return v&&j&&(_.length&&m.push(e),O.length&&m.push("user deleted"),S.length&&m.push(a)),j}},function(t,n,e){var r=e(7),o=e(4).document,i=r(o)&&r(o.createElement);t.exports=function(t){return i?o.createElement(t):{}}},function(t,n,e){n.f=e(8)},function(t,n,e){var r=e(52)("keys"),o=e(33);t.exports=function(t){return r[t]||(r[t]=o(t))}},function(t,n){t.exports="constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf".split(",")},function(t,n,e){var r=e(4).document;t.exports=r&&r.documentElement},function(t,n,e){var r=e(7),o=e(6),i=function(t,n){if(o(t),!r(n)&&null!==n)throw TypeError(n+": can't set as prototype!")};t.exports={set:Object.setPrototypeOf||("__proto__"in{}?function(t,n,r){try{(r=e(20)(Function.call,e(23).f(Object.prototype,"__proto__").set,2))(t,[]),n=!(t instanceof Array)}catch(t){n=!0}return function(t,e){return i(t,e),n?t.__proto__=e:r(t,e),t}}({},!1):void 0),check:i}},function(t,n){t.exports="\t\n\v\f\r   ᠎             　\u2028\u2029\ufeff"},function(t,n,e){var r=e(7),o=e(71).set;t.exports=function(t,n,e){var i,u=n.constructor;return u!==e&&"function"==typeof u&&(i=u.prototype)!==e.prototype&&r(i)&&o&&o(t,i),t}},function(t,n,e){"use strict";var r=e(22),o=e(27);t.exports=function(t){var n=String(o(this)),e="",i=r(t);if(i<0||i==1/0)throw RangeError("Count can't be negative");for(;i>0;(i>>>=1)&&(n+=n))1&i&&(e+=n);return e}},function(t,n){t.exports=Math.sign||function(t){return 0==(t=+t)||t!=t?t:t<0?-1:1}},function(t,n){var e=Math.expm1;t.exports=!e||e(10)>22025.465794806718||e(10)<22025.465794806718||-2e-17!=e(-2e-17)?function(t){return 0==(t=+t)?t:t>-1e-6&&t<1e-6?t+t*t/2:Math.exp(t)-1}:e},function(t,n,e){var r=e(22),o=e(27);t.exports=function(t){return function(n,e){var i,u,c=String(o(n)),a=r(e),s=c.length;return a<0||a>=s?t?"":void 0:(i=c.charCodeAt(a))<55296||i>56319||a+1===s||(u=c.charCodeAt(a+1))<56320||u>57343?t?c.charAt(a):i:t?c.slice(a,a+2):u-56320+(i-55296<<10)+65536}}},function(t,n,e){"use strict";var r=e(34),o=e(0),i=e(14),u=e(17),c=e(44),a=e(108),s=e(42),f=e(39),l=e(8)("iterator"),h=!([].keys&&"next"in[].keys()),g=function(){return this};t.exports=function(t,n,e,p,v,d,m){a(e,n,p);var y,b,A,x=function(t){if(!h&&t in O)return O[t];switch(t){case"keys":case"values":return function(){return new e(this,t)}}return function(){return new e(this,t)}},w=n+" Iterator",_="values"==v,S=!1,O=t.prototype,E=O[l]||O["@@iterator"]||v&&O[v],j=E||x(v),k=v?_?x("entries"):j:void 0,P="Array"==n&&O.entries||E;if(P&&(A=f(P.call(new t)))!==Object.prototype&&A.next&&(s(A,w,!0),r||"function"==typeof A[l]||u(A,l,g)),_&&E&&"values"!==E.name&&(S=!0,j=function(){return E.call(this)}),r&&!m||!h&&!S&&O[l]||u(O,l,j),c[n]=j,c[w]=g,v)if(y={values:_?j:x("values"),keys:d?j:x("keys"),entries:k},m)for(b in y)b in O||i(O,b,y[b]);else o(o.P+o.F*(h||S),n,y);return y}},function(t,n,e){var r=e(80),o=e(27);t.exports=function(t,n,e){if(r(n))throw TypeError("String#"+e+" doesn't accept regex!");return String(o(t))}},function(t,n,e){var r=e(7),o=e(26),i=e(8)("match");t.exports=function(t){var n;return r(t)&&(void 0!==(n=t[i])?!!n:"RegExp"==o(t))}},function(t,n,e){var r=e(8)("match");t.exports=function(t){var n=/./;try{"/./"[t](n)}catch(e){try{return n[r]=!1,!"/./"[t](n)}catch(t){}}return!0}},function(t,n,e){var r=e(44),o=e(8)("iterator"),i=Array.prototype;t.exports=function(t){return void 0!==t&&(r.Array===t||i[o]===t)}},function(t,n,e){"use strict";var r=e(12),o=e(32);t.exports=function(t,n,e){n in t?r.f(t,n,o(0,e)):t[n]=e}},function(t,n,e){var r=e(50),o=e(8)("iterator"),i=e(44);t.exports=e(10).getIteratorMethod=function(t){if(null!=t)return t[o]||t["@@iterator"]||i[r(t)]}},function(t,n,e){"use strict";var r=e(13),o=e(36),i=e(9);t.exports=function(t){for(var n=r(this),e=i(n.length),u=arguments.length,c=o(u>1?arguments[1]:void 0,e),a=u>2?arguments[2]:void 0,s=void 0===a?e:o(a,e);s>c;)n[c++]=t;return n}},function(t,n,e){"use strict";var r=e(40),o=e(113),i=e(44),u=e(18);t.exports=e(78)(Array,"Array",function(t,n){this._t=u(t),this._i=0,this._k=n},function(){var t=this._t,n=this._k,e=this._i++;return!t||e>=t.length?(this._t=void 0,o(1)):o(0,"keys"==n?e:"values"==n?t[e]:[e,t[e]])},"values"),i.Arguments=i.Array,r("keys"),r("values"),r("entries")},function(t,n,e){"use strict";var r,o,i=e(57),u=RegExp.prototype.exec,c=String.prototype.replace,a=u,s=(r=/a/,o=/b*/g,u.call(r,"a"),u.call(o,"a"),0!==r.lastIndex||0!==o.lastIndex),f=void 0!==/()??/.exec("")[1];(s||f)&&(a=function(t){var n,e,r,o,a=this;return f&&(e=new RegExp("^"+a.source+"$(?!\\s)",i.call(a))),s&&(n=a.lastIndex),r=u.call(a,t),s&&r&&(a.lastIndex=a.global?r.index+r[0].length:n),f&&r&&r.length>1&&c.call(r[0],e,function(){for(o=1;o<arguments.length-2;o++)void 0===arguments[o]&&(r[o]=void 0)}),r}),t.exports=a},function(t,n,e){"use strict";var r=e(77)(!0);t.exports=function(t,n,e){return n+(e?r(t,n).length:1)}},function(t,n,e){var r,o,i,u=e(20),c=e(102),a=e(70),s=e(66),f=e(4),l=f.process,h=f.setImmediate,g=f.clearImmediate,p=f.MessageChannel,v=f.Dispatch,d=0,m={},y=function(){var t=+this;if(m.hasOwnProperty(t)){var n=m[t];delete m[t],n()}},b=function(t){y.call(t.data)};h&&g||(h=function(t){for(var n=[],e=1;arguments.length>e;)n.push(arguments[e++]);return m[++d]=function(){c("function"==typeof t?t:Function(t),n)},r(d),d},g=function(t){delete m[t]},"process"==e(26)(l)?r=function(t){l.nextTick(u(y,t,1))}:v&&v.now?r=function(t){v.now(u(y,t,1))}:p?(i=(o=new p).port2,o.port1.onmessage=b,r=u(i.postMessage,i,1)):f.addEventListener&&"function"==typeof postMessage&&!f.importScripts?(r=function(t){f.postMessage(t+"","*")},f.addEventListener("message",b,!1)):r="onreadystatechange"in s("script")?function(t){a.appendChild(s("script")).onreadystatechange=function(){a.removeChild(this),y.call(t)}}:function(t){setTimeout(u(y,t,1),0)}),t.exports={set:h,clear:g}},function(t,n,e){"use strict";var r=e(4),o=e(11),i=e(34),u=e(63),c=e(17),a=e(47),s=e(5),f=e(46),l=e(22),h=e(9),g=e(121),p=e(38).f,v=e(12).f,d=e(85),m=e(42),y="prototype",b="Wrong index!",A=r.ArrayBuffer,x=r.DataView,w=r.Math,_=r.RangeError,S=r.Infinity,O=A,E=w.abs,j=w.pow,k=w.floor,P=w.log,I=w.LN2,M=o?"_b":"buffer",T=o?"_l":"byteLength",F=o?"_o":"byteOffset";function L(t,n,e){var r,o,i,u=new Array(e),c=8*e-n-1,a=(1<<c)-1,s=a>>1,f=23===n?j(2,-24)-j(2,-77):0,l=0,h=t<0||0===t&&1/t<0?1:0;for((t=E(t))!=t||t===S?(o=t!=t?1:0,r=a):(r=k(P(t)/I),t*(i=j(2,-r))<1&&(r--,i*=2),(t+=r+s>=1?f/i:f*j(2,1-s))*i>=2&&(r++,i/=2),r+s>=a?(o=0,r=a):r+s>=1?(o=(t*i-1)*j(2,n),r+=s):(o=t*j(2,s-1)*j(2,n),r=0));n>=8;u[l++]=255&o,o/=256,n-=8);for(r=r<<n|o,c+=n;c>0;u[l++]=255&r,r/=256,c-=8);return u[--l]|=128*h,u}function C(t,n,e){var r,o=8*e-n-1,i=(1<<o)-1,u=i>>1,c=o-7,a=e-1,s=t[a--],f=127&s;for(s>>=7;c>0;f=256*f+t[a],a--,c-=8);for(r=f&(1<<-c)-1,f>>=-c,c+=n;c>0;r=256*r+t[a],a--,c-=8);if(0===f)f=1-u;else{if(f===i)return r?NaN:s?-S:S;r+=j(2,n),f-=u}return(s?-1:1)*r*j(2,f-n)}function N(t){return t[3]<<24|t[2]<<16|t[1]<<8|t[0]}function R(t){return[255&t]}function D(t){return[255&t,t>>8&255]}function U(t){return[255&t,t>>8&255,t>>16&255,t>>24&255]}function B(t){return L(t,52,8)}function V(t){return L(t,23,4)}function W(t,n,e){v(t[y],n,{get:function(){return this[e]}})}function G(t,n,e,r){var o=g(+e);if(o+n>t[T])throw _(b);var i=t[M]._b,u=o+t[F],c=i.slice(u,u+n);return r?c:c.reverse()}function q(t,n,e,r,o,i){var u=g(+e);if(u+n>t[T])throw _(b);for(var c=t[M]._b,a=u+t[F],s=r(+o),f=0;f<n;f++)c[a+f]=s[i?f:n-f-1]}if(u.ABV){if(!s(function(){A(1)})||!s(function(){new A(-1)})||s(function(){return new A,new A(1.5),new A(NaN),"ArrayBuffer"!=A.name})){for(var $,z=(A=function(t){return f(this,A),new O(g(t))})[y]=O[y],Y=p(O),J=0;Y.length>J;)($=Y[J++])in A||c(A,$,O[$]);i||(z.constructor=A)}var K=new x(new A(2)),X=x[y].setInt8;K.setInt8(0,2147483648),K.setInt8(1,2147483649),!K.getInt8(0)&&K.getInt8(1)||a(x[y],{setInt8:function(t,n){X.call(this,t,n<<24>>24)},setUint8:function(t,n){X.call(this,t,n<<24>>24)}},!0)}else A=function(t){f(this,A,"ArrayBuffer");var n=g(t);this._b=d.call(new Array(n),0),this[T]=n},x=function(t,n,e){f(this,x,"DataView"),f(t,A,"DataView");var r=t[T],o=l(n);if(o<0||o>r)throw _("Wrong offset!");if(o+(e=void 0===e?r-o:h(e))>r)throw _("Wrong length!");this[M]=t,this[F]=o,this[T]=e},o&&(W(A,"byteLength","_l"),W(x,"buffer","_b"),W(x,"byteLength","_l"),W(x,"byteOffset","_o")),a(x[y],{getInt8:function(t){return G(this,1,t)[0]<<24>>24},getUint8:function(t){return G(this,1,t)[0]},getInt16:function(t){var n=G(this,2,t,arguments[1]);return(n[1]<<8|n[0])<<16>>16},getUint16:function(t){var n=G(this,2,t,arguments[1]);return n[1]<<8|n[0]},getInt32:function(t){return N(G(this,4,t,arguments[1]))},getUint32:function(t){return N(G(this,4,t,arguments[1]))>>>0},getFloat32:function(t){return C(G(this,4,t,arguments[1]),23,4)},getFloat64:function(t){return C(G(this,8,t,arguments[1]),52,8)},setInt8:function(t,n){q(this,1,t,R,n)},setUint8:function(t,n){q(this,1,t,R,n)},setInt16:function(t,n){q(this,2,t,D,n,arguments[2])},setUint16:function(t,n){q(this,2,t,D,n,arguments[2])},setInt32:function(t,n){q(this,4,t,U,n,arguments[2])},setUint32:function(t,n){q(this,4,t,U,n,arguments[2])},setFloat32:function(t,n){q(this,4,t,V,n,arguments[2])},setFloat64:function(t,n){q(this,8,t,B,n,arguments[2])}});m(A,"ArrayBuffer"),m(x,"DataView"),c(x[y],u.VIEW,!0),n.ArrayBuffer=A,n.DataView=x},function(t,n){var e=t.exports="undefined"!=typeof window&&window.Math==Math?window:"undefined"!=typeof self&&self.Math==Math?self:Function("return this")();"number"==typeof __g&&(__g=e)},function(t,n){t.exports=function(t){return"object"==typeof t?null!==t:"function"==typeof t}},function(t,n,e){t.exports=!e(126)(function(){return 7!=Object.defineProperty({},"a",{get:function(){return 7}}).a})},function(t,n,e){t.exports=!e(11)&&!e(5)(function(){return 7!=Object.defineProperty(e(66)("div"),"a",{get:function(){return 7}}).a})},function(t,n,e){var r=e(4),o=e(10),i=e(34),u=e(67),c=e(12).f;t.exports=function(t){var n=o.Symbol||(o.Symbol=i?{}:r.Symbol||{});"_"==t.charAt(0)||t in n||c(n,t,{value:u.f(t)})}},function(t,n,e){var r=e(16),o=e(18),i=e(53)(!1),u=e(68)("IE_PROTO");t.exports=function(t,n){var e,c=o(t),a=0,s=[];for(e in c)e!=u&&r(c,e)&&s.push(e);for(;n.length>a;)r(c,e=n[a++])&&(~i(s,e)||s.push(e));return s}},function(t,n,e){var r=e(12),o=e(6),i=e(35);t.exports=e(11)?Object.defineProperties:function(t,n){o(t);for(var e,u=i(n),c=u.length,a=0;c>a;)r.f(t,e=u[a++],n[e]);return t}},function(t,n,e){var r=e(18),o=e(38).f,i={}.toString,u="object"==typeof window&&window&&Object.getOwnPropertyNames?Object.getOwnPropertyNames(window):[];t.exports.f=function(t){return u&&"[object Window]"==i.call(t)?function(t){try{return o(t)}catch(t){return u.slice()}}(t):o(r(t))}},function(t,n,e){"use strict";var r=e(11),o=e(35),i=e(54),u=e(49),c=e(13),a=e(48),s=Object.assign;t.exports=!s||e(5)(function(){var t={},n={},e=Symbol(),r="abcdefghijklmnopqrst";return t[e]=7,r.split("").forEach(function(t){n[t]=t}),7!=s({},t)[e]||Object.keys(s({},n)).join("")!=r})?function(t,n){for(var e=c(t),s=arguments.length,f=1,l=i.f,h=u.f;s>f;)for(var g,p=a(arguments[f++]),v=l?o(p).concat(l(p)):o(p),d=v.length,m=0;d>m;)g=v[m++],r&&!h.call(p,g)||(e[g]=p[g]);return e}:s},function(t,n){t.exports=Object.is||function(t,n){return t===n?0!==t||1/t==1/n:t!=t&&n!=n}},function(t,n,e){"use strict";var r=e(21),o=e(7),i=e(102),u=[].slice,c={},a=function(t,n,e){if(!(n in c)){for(var r=[],o=0;o<n;o++)r[o]="a["+o+"]";c[n]=Function("F,a","return new F("+r.join(",")+")")}return c[n](t,e)};t.exports=Function.bind||function(t){var n=r(this),e=u.call(arguments,1),c=function(){var r=e.concat(u.call(arguments));return this instanceof c?a(n,r.length,r):i(n,r,t)};return o(n.prototype)&&(c.prototype=n.prototype),c}},function(t,n){t.exports=function(t,n,e){var r=void 0===e;switch(n.length){case 0:return r?t():t.call(e);case 1:return r?t(n[0]):t.call(e,n[0]);case 2:return r?t(n[0],n[1]):t.call(e,n[0],n[1]);case 3:return r?t(n[0],n[1],n[2]):t.call(e,n[0],n[1],n[2]);case 4:return r?t(n[0],n[1],n[2],n[3]):t.call(e,n[0],n[1],n[2],n[3])}return t.apply(e,n)}},function(t,n,e){var r=e(4).parseInt,o=e(43).trim,i=e(72),u=/^[-+]?0[xX]/;t.exports=8!==r(i+"08")||22!==r(i+"0x16")?function(t,n){var e=o(String(t),3);return r(e,n>>>0||(u.test(e)?16:10))}:r},function(t,n,e){var r=e(4).parseFloat,o=e(43).trim;t.exports=1/r(e(72)+"-0")!=-1/0?function(t){var n=o(String(t),3),e=r(n);return 0===e&&"-"==n.charAt(0)?-0:e}:r},function(t,n,e){var r=e(26);t.exports=function(t,n){if("number"!=typeof t&&"Number"!=r(t))throw TypeError(n);return+t}},function(t,n,e){var r=e(7),o=Math.floor;t.exports=function(t){return!r(t)&&isFinite(t)&&o(t)===t}},function(t,n){t.exports=Math.log1p||function(t){return(t=+t)>-1e-8&&t<1e-8?t-t*t/2:Math.log(1+t)}},function(t,n,e){"use strict";var r=e(37),o=e(32),i=e(42),u={};e(17)(u,e(8)("iterator"),function(){return this}),t.exports=function(t,n,e){t.prototype=r(u,{next:o(1,e)}),i(t,n+" Iterator")}},function(t,n,e){var r=e(6);t.exports=function(t,n,e,o){try{return o?n(r(e)[0],e[1]):n(e)}catch(n){var i=t.return;throw void 0!==i&&r(i.call(t)),n}}},function(t,n,e){var r=e(221);t.exports=function(t,n){return new(r(t))(n)}},function(t,n,e){var r=e(21),o=e(13),i=e(48),u=e(9);t.exports=function(t,n,e,c,a){r(n);var s=o(t),f=i(s),l=u(s.length),h=a?l-1:0,g=a?-1:1;if(e<2)for(;;){if(h in f){c=f[h],h+=g;break}if(h+=g,a?h<0:l<=h)throw TypeError("Reduce of empty array with no initial value")}for(;a?h>=0:l>h;h+=g)h in f&&(c=n(c,f[h],h,s));return c}},function(t,n,e){"use strict";var r=e(13),o=e(36),i=e(9);t.exports=[].copyWithin||function(t,n){var e=r(this),u=i(e.length),c=o(t,u),a=o(n,u),s=arguments.length>2?arguments[2]:void 0,f=Math.min((void 0===s?u:o(s,u))-a,u-c),l=1;for(a<c&&c<a+f&&(l=-1,a+=f-1,c+=f-1);f-- >0;)a in e?e[c]=e[a]:delete e[c],c+=l,a+=l;return e}},function(t,n){t.exports=function(t,n){return{value:n,done:!!t}}},function(t,n,e){"use strict";var r=e(87);e(0)({target:"RegExp",proto:!0,forced:r!==/./.exec},{exec:r})},function(t,n,e){e(11)&&"g"!=/./g.flags&&e(12).f(RegExp.prototype,"flags",{configurable:!0,get:e(57)})},function(t,n,e){"use strict";var r,o,i,u,c=e(34),a=e(4),s=e(20),f=e(50),l=e(0),h=e(7),g=e(21),p=e(46),v=e(60),d=e(51),m=e(89).set,y=e(241)(),b=e(117),A=e(242),x=e(61),w=e(118),_=a.TypeError,S=a.process,O=S&&S.versions,E=O&&O.v8||"",j=a.Promise,k="process"==f(S),P=function(){},I=o=b.f,M=!!function(){try{var t=j.resolve(1),n=(t.constructor={})[e(8)("species")]=function(t){t(P,P)};return(k||"function"==typeof PromiseRejectionEvent)&&t.then(P)instanceof n&&0!==E.indexOf("6.6")&&-1===x.indexOf("Chrome/66")}catch(t){}}(),T=function(t){var n;return!(!h(t)||"function"!=typeof(n=t.then))&&n},F=function(t,n){if(!t._n){t._n=!0;var e=t._c;y(function(){for(var r=t._v,o=1==t._s,i=0,u=function(n){var e,i,u,c=o?n.ok:n.fail,a=n.resolve,s=n.reject,f=n.domain;try{c?(o||(2==t._h&&N(t),t._h=1),!0===c?e=r:(f&&f.enter(),e=c(r),f&&(f.exit(),u=!0)),e===n.promise?s(_("Promise-chain cycle")):(i=T(e))?i.call(e,a,s):a(e)):s(r)}catch(t){f&&!u&&f.exit(),s(t)}};e.length>i;)u(e[i++]);t._c=[],t._n=!1,n&&!t._h&&L(t)})}},L=function(t){m.call(a,function(){var n,e,r,o=t._v,i=C(t);if(i&&(n=A(function(){k?S.emit("unhandledRejection",o,t):(e=a.onunhandledrejection)?e({promise:t,reason:o}):(r=a.console)&&r.error&&r.error("Unhandled promise rejection",o)}),t._h=k||C(t)?2:1),t._a=void 0,i&&n.e)throw n.v})},C=function(t){return 1!==t._h&&0===(t._a||t._c).length},N=function(t){m.call(a,function(){var n;k?S.emit("rejectionHandled",t):(n=a.onrejectionhandled)&&n({promise:t,reason:t._v})})},R=function(t){var n=this;n._d||(n._d=!0,(n=n._w||n)._v=t,n._s=2,n._a||(n._a=n._c.slice()),F(n,!0))},D=function(t){var n,e=this;if(!e._d){e._d=!0,e=e._w||e;try{if(e===t)throw _("Promise can't be resolved itself");(n=T(t))?y(function(){var r={_w:e,_d:!1};try{n.call(t,s(D,r,1),s(R,r,1))}catch(t){R.call(r,t)}}):(e._v=t,e._s=1,F(e,!1))}catch(t){R.call({_w:e,_d:!1},t)}}};M||(j=function(t){p(this,j,"Promise","_h"),g(t),r.call(this);try{t(s(D,this,1),s(R,this,1))}catch(t){R.call(this,t)}},(r=function(t){this._c=[],this._a=void 0,this._s=0,this._d=!1,this._v=void 0,this._h=0,this._n=!1}).prototype=e(47)(j.prototype,{then:function(t,n){var e=I(d(this,j));return e.ok="function"!=typeof t||t,e.fail="function"==typeof n&&n,e.domain=k?S.domain:void 0,this._c.push(e),this._a&&this._a.push(e),this._s&&F(this,!1),e.promise},catch:function(t){return this.then(void 0,t)}}),i=function(){var t=new r;this.promise=t,this.resolve=s(D,t,1),this.reject=s(R,t,1)},b.f=I=function(t){return t===j||t===u?new i(t):o(t)}),l(l.G+l.W+l.F*!M,{Promise:j}),e(42)(j,"Promise"),e(45)("Promise"),u=e(10).Promise,l(l.S+l.F*!M,"Promise",{reject:function(t){var n=I(this);return(0,n.reject)(t),n.promise}}),l(l.S+l.F*(c||!M),"Promise",{resolve:function(t){return w(c&&this===u?j:this,t)}}),l(l.S+l.F*!(M&&e(56)(function(t){j.all(t).catch(P)})),"Promise",{all:function(t){var n=this,e=I(n),r=e.resolve,o=e.reject,i=A(function(){var e=[],i=0,u=1;v(t,!1,function(t){var c=i++,a=!1;e.push(void 0),u++,n.resolve(t).then(function(t){a||(a=!0,e[c]=t,--u||r(e))},o)}),--u||r(e)});return i.e&&o(i.v),e.promise},race:function(t){var n=this,e=I(n),r=e.reject,o=A(function(){v(t,!1,function(t){n.resolve(t).then(e.resolve,r)})});return o.e&&r(o.v),e.promise}})},function(t,n,e){"use strict";var r=e(21);function o(t){var n,e;this.promise=new t(function(t,r){if(void 0!==n||void 0!==e)throw TypeError("Bad Promise constructor");n=t,e=r}),this.resolve=r(n),this.reject=r(e)}t.exports.f=function(t){return new o(t)}},function(t,n,e){var r=e(6),o=e(7),i=e(117);t.exports=function(t,n){if(r(t),o(n)&&n.constructor===t)return n;var e=i.f(t);return(0,e.resolve)(n),e.promise}},function(t,n,e){"use strict";var r=e(12).f,o=e(37),i=e(47),u=e(20),c=e(46),a=e(60),s=e(78),f=e(113),l=e(45),h=e(11),g=e(30).fastKey,p=e(41),v=h?"_s":"size",d=function(t,n){var e,r=g(n);if("F"!==r)return t._i[r];for(e=t._f;e;e=e.n)if(e.k==n)return e};t.exports={getConstructor:function(t,n,e,s){var f=t(function(t,r){c(t,f,n,"_i"),t._t=n,t._i=o(null),t._f=void 0,t._l=void 0,t[v]=0,null!=r&&a(r,e,t[s],t)});return i(f.prototype,{clear:function(){for(var t=p(this,n),e=t._i,r=t._f;r;r=r.n)r.r=!0,r.p&&(r.p=r.p.n=void 0),delete e[r.i];t._f=t._l=void 0,t[v]=0},delete:function(t){var e=p(this,n),r=d(e,t);if(r){var o=r.n,i=r.p;delete e._i[r.i],r.r=!0,i&&(i.n=o),o&&(o.p=i),e._f==r&&(e._f=o),e._l==r&&(e._l=i),e[v]--}return!!r},forEach:function(t){p(this,n);for(var e,r=u(t,arguments.length>1?arguments[1]:void 0,3);e=e?e.n:this._f;)for(r(e.v,e.k,this);e&&e.r;)e=e.p},has:function(t){return!!d(p(this,n),t)}}),h&&r(f.prototype,"size",{get:function(){return p(this,n)[v]}}),f},def:function(t,n,e){var r,o,i=d(t,n);return i?i.v=e:(t._l=i={i:o=g(n,!0),k:n,v:e,p:r=t._l,n:void 0,r:!1},t._f||(t._f=i),r&&(r.n=i),t[v]++,"F"!==o&&(t._i[o]=i)),t},getEntry:d,setStrong:function(t,n,e){s(t,n,function(t,e){this._t=p(t,n),this._k=e,this._l=void 0},function(){for(var t=this._k,n=this._l;n&&n.r;)n=n.p;return this._t&&(this._l=n=n?n.n:this._t._f)?f(0,"keys"==t?n.k:"values"==t?n.v:[n.k,n.v]):(this._t=void 0,f(1))},e?"entries":"values",!e,!0),l(n)}}},function(t,n,e){"use strict";var r=e(47),o=e(30).getWeak,i=e(6),u=e(7),c=e(46),a=e(60),s=e(25),f=e(16),l=e(41),h=s(5),g=s(6),p=0,v=function(t){return t._l||(t._l=new d)},d=function(){this.a=[]},m=function(t,n){return h(t.a,function(t){return t[0]===n})};d.prototype={get:function(t){var n=m(this,t);if(n)return n[1]},has:function(t){return!!m(this,t)},set:function(t,n){var e=m(this,t);e?e[1]=n:this.a.push([t,n])},delete:function(t){var n=g(this.a,function(n){return n[0]===t});return~n&&this.a.splice(n,1),!!~n}},t.exports={getConstructor:function(t,n,e,i){var s=t(function(t,r){c(t,s,n,"_i"),t._t=n,t._i=p++,t._l=void 0,null!=r&&a(r,e,t[i],t)});return r(s.prototype,{delete:function(t){if(!u(t))return!1;var e=o(t);return!0===e?v(l(this,n)).delete(t):e&&f(e,this._i)&&delete e[this._i]},has:function(t){if(!u(t))return!1;var e=o(t);return!0===e?v(l(this,n)).has(t):e&&f(e,this._i)}}),s},def:function(t,n,e){var r=o(i(n),!0);return!0===r?v(t).set(n,e):r[t._i]=e,t},ufstore:v}},function(t,n,e){var r=e(22),o=e(9);t.exports=function(t){if(void 0===t)return 0;var n=r(t),e=o(n);if(n!==e)throw RangeError("Wrong length!");return e}},function(t,n,e){var r=e(38),o=e(54),i=e(6),u=e(4).Reflect;t.exports=u&&u.ownKeys||function(t){var n=r.f(i(t)),e=o.f;return e?n.concat(e(t)):n}},function(t,n,e){var r=e(9),o=e(74),i=e(27);t.exports=function(t,n,e,u){var c=String(i(t)),a=c.length,s=void 0===e?" ":String(e),f=r(n);if(f<=a||""==s)return c;var l=f-a,h=o.call(s,Math.ceil(l/s.length));return h.length>l&&(h=h.slice(0,l)),u?h+c:c+h}},function(t,n,e){var r=e(11),o=e(35),i=e(18),u=e(49).f;t.exports=function(t){return function(n){for(var e,c=i(n),a=o(c),s=a.length,f=0,l=[];s>f;)e=a[f++],r&&!u.call(c,e)||l.push(t?[e,c[e]]:c[e]);return l}}},function(t,n){var e=t.exports={version:"2.6.11"};"number"==typeof __e&&(__e=e)},function(t,n){t.exports=function(t){try{return!!t()}catch(t){return!0}}},function(t,n,e){"use strict";e(128);var r,o=(r=e(300))&&r.__esModule?r:{default:r};o.default._babelPolyfill&&"undefined"!=typeof console&&console.warn&&console.warn("@babel/polyfill is loaded more than once on this page. This is probably not desirable/intended and may have consequences if different versions of the polyfills are applied sequentially. If you do need to load the polyfill more than once, use @babel/polyfill/noConflict instead to bypass the warning."),o.default._babelPolyfill=!0},function(t,n,e){"use strict";e(129),e(272),e(274),e(277),e(279),e(281),e(283),e(285),e(287),e(289),e(291),e(293),e(295),e(299)},function(t,n,e){e(130),e(133),e(134),e(135),e(136),e(137),e(138),e(139),e(140),e(141),e(142),e(143),e(144),e(145),e(146),e(147),e(148),e(149),e(150),e(151),e(152),e(153),e(154),e(155),e(156),e(157),e(158),e(159),e(160),e(161),e(162),e(163),e(164),e(165),e(166),e(167),e(168),e(169),e(170),e(171),e(172),e(173),e(174),e(176),e(177),e(178),e(179),e(180),e(181),e(182),e(183),e(184),e(185),e(186),e(187),e(188),e(189),e(190),e(191),e(192),e(193),e(194),e(195),e(196),e(197),e(198),e(199),e(200),e(201),e(202),e(203),e(204),e(205),e(206),e(207),e(208),e(209),e(211),e(212),e(214),e(215),e(216),e(217),e(218),e(219),e(220),e(222),e(223),e(224),e(225),e(226),e(227),e(228),e(229),e(230),e(231),e(232),e(233),e(234),e(86),e(235),e(114),e(236),e(115),e(237),e(238),e(239),e(240),e(116),e(243),e(244),e(245),e(246),e(247),e(248),e(249),e(250),e(251),e(252),e(253),e(254),e(255),e(256),e(257),e(258),e(259),e(260),e(261),e(262),e(263),e(264),e(265),e(266),e(267),e(268),e(269),e(270),e(271),t.exports=e(10)},function(t,n,e){"use strict";var r=e(4),o=e(16),i=e(11),u=e(0),c=e(14),a=e(30).KEY,s=e(5),f=e(52),l=e(42),h=e(33),g=e(8),p=e(67),v=e(95),d=e(132),m=e(55),y=e(6),b=e(7),A=e(13),x=e(18),w=e(29),_=e(32),S=e(37),O=e(98),E=e(23),j=e(54),k=e(12),P=e(35),I=E.f,M=k.f,T=O.f,F=r.Symbol,L=r.JSON,C=L&&L.stringify,N=g("_hidden"),R=g("toPrimitive"),D={}.propertyIsEnumerable,U=f("symbol-registry"),B=f("symbols"),V=f("op-symbols"),W=Object.prototype,G="function"==typeof F&&!!j.f,q=r.QObject,$=!q||!q.prototype||!q.prototype.findChild,z=i&&s(function(){return 7!=S(M({},"a",{get:function(){return M(this,"a",{value:7}).a}})).a})?function(t,n,e){var r=I(W,n);r&&delete W[n],M(t,n,e),r&&t!==W&&M(W,n,r)}:M,Y=function(t){var n=B[t]=S(F.prototype);return n._k=t,n},J=G&&"symbol"==typeof F.iterator?function(t){return"symbol"==typeof t}:function(t){return t instanceof F},K=function(t,n,e){return t===W&&K(V,n,e),y(t),n=w(n,!0),y(e),o(B,n)?(e.enumerable?(o(t,N)&&t[N][n]&&(t[N][n]=!1),e=S(e,{enumerable:_(0,!1)})):(o(t,N)||M(t,N,_(1,{})),t[N][n]=!0),z(t,n,e)):M(t,n,e)},X=function(t,n){y(t);for(var e,r=d(n=x(n)),o=0,i=r.length;i>o;)K(t,e=r[o++],n[e]);return t},H=function(t){var n=D.call(this,t=w(t,!0));return!(this===W&&o(B,t)&&!o(V,t))&&(!(n||!o(this,t)||!o(B,t)||o(this,N)&&this[N][t])||n)},Z=function(t,n){if(t=x(t),n=w(n,!0),t!==W||!o(B,n)||o(V,n)){var e=I(t,n);return!e||!o(B,n)||o(t,N)&&t[N][n]||(e.enumerable=!0),e}},Q=function(t){for(var n,e=T(x(t)),r=[],i=0;e.length>i;)o(B,n=e[i++])||n==N||n==a||r.push(n);return r},tt=function(t){for(var n,e=t===W,r=T(e?V:x(t)),i=[],u=0;r.length>u;)!o(B,n=r[u++])||e&&!o(W,n)||i.push(B[n]);return i};G||(c((F=function(){if(this instanceof F)throw TypeError("Symbol is not a constructor!");var t=h(arguments.length>0?arguments[0]:void 0),n=function(e){this===W&&n.call(V,e),o(this,N)&&o(this[N],t)&&(this[N][t]=!1),z(this,t,_(1,e))};return i&&$&&z(W,t,{configurable:!0,set:n}),Y(t)}).prototype,"toString",function(){return this._k}),E.f=Z,k.f=K,e(38).f=O.f=Q,e(49).f=H,j.f=tt,i&&!e(34)&&c(W,"propertyIsEnumerable",H,!0),p.f=function(t){return Y(g(t))}),u(u.G+u.W+u.F*!G,{Symbol:F});for(var nt="hasInstance,isConcatSpreadable,iterator,match,replace,search,species,split,toPrimitive,toStringTag,unscopables".split(","),et=0;nt.length>et;)g(nt[et++]);for(var rt=P(g.store),ot=0;rt.length>ot;)v(rt[ot++]);u(u.S+u.F*!G,"Symbol",{for:function(t){return o(U,t+="")?U[t]:U[t]=F(t)},keyFor:function(t){if(!J(t))throw TypeError(t+" is not a symbol!");for(var n in U)if(U[n]===t)return n},useSetter:function(){$=!0},useSimple:function(){$=!1}}),u(u.S+u.F*!G,"Object",{create:function(t,n){return void 0===n?S(t):X(S(t),n)},defineProperty:K,defineProperties:X,getOwnPropertyDescriptor:Z,getOwnPropertyNames:Q,getOwnPropertySymbols:tt});var it=s(function(){j.f(1)});u(u.S+u.F*it,"Object",{getOwnPropertySymbols:function(t){return j.f(A(t))}}),L&&u(u.S+u.F*(!G||s(function(){var t=F();return"[null]"!=C([t])||"{}"!=C({a:t})||"{}"!=C(Object(t))})),"JSON",{stringify:function(t){for(var n,e,r=[t],o=1;arguments.length>o;)r.push(arguments[o++]);if(e=n=r[1],(b(n)||void 0!==t)&&!J(t))return m(n)||(n=function(t,n){if("function"==typeof e&&(n=e.call(this,t,n)),!J(n))return n}),r[1]=n,C.apply(L,r)}}),F.prototype[R]||e(17)(F.prototype,R,F.prototype.valueOf),l(F,"Symbol"),l(Math,"Math",!0),l(r.JSON,"JSON",!0)},function(t,n,e){t.exports=e(52)("native-function-to-string",Function.toString)},function(t,n,e){var r=e(35),o=e(54),i=e(49);t.exports=function(t){var n=r(t),e=o.f;if(e)for(var u,c=e(t),a=i.f,s=0;c.length>s;)a.call(t,u=c[s++])&&n.push(u);return n}},function(t,n,e){var r=e(0);r(r.S,"Object",{create:e(37)})},function(t,n,e){var r=e(0);r(r.S+r.F*!e(11),"Object",{defineProperty:e(12).f})},function(t,n,e){var r=e(0);r(r.S+r.F*!e(11),"Object",{defineProperties:e(97)})},function(t,n,e){var r=e(18),o=e(23).f;e(24)("getOwnPropertyDescriptor",function(){return function(t,n){return o(r(t),n)}})},function(t,n,e){var r=e(13),o=e(39);e(24)("getPrototypeOf",function(){return function(t){return o(r(t))}})},function(t,n,e){var r=e(13),o=e(35);e(24)("keys",function(){return function(t){return o(r(t))}})},function(t,n,e){e(24)("getOwnPropertyNames",function(){return e(98).f})},function(t,n,e){var r=e(7),o=e(30).onFreeze;e(24)("freeze",function(t){return function(n){return t&&r(n)?t(o(n)):n}})},function(t,n,e){var r=e(7),o=e(30).onFreeze;e(24)("seal",function(t){return function(n){return t&&r(n)?t(o(n)):n}})},function(t,n,e){var r=e(7),o=e(30).onFreeze;e(24)("preventExtensions",function(t){return function(n){return t&&r(n)?t(o(n)):n}})},function(t,n,e){var r=e(7);e(24)("isFrozen",function(t){return function(n){return!r(n)||!!t&&t(n)}})},function(t,n,e){var r=e(7);e(24)("isSealed",function(t){return function(n){return!r(n)||!!t&&t(n)}})},function(t,n,e){var r=e(7);e(24)("isExtensible",function(t){return function(n){return!!r(n)&&(!t||t(n))}})},function(t,n,e){var r=e(0);r(r.S+r.F,"Object",{assign:e(99)})},function(t,n,e){var r=e(0);r(r.S,"Object",{is:e(100)})},function(t,n,e){var r=e(0);r(r.S,"Object",{setPrototypeOf:e(71).set})},function(t,n,e){"use strict";var r=e(50),o={};o[e(8)("toStringTag")]="z",o+""!="[object z]"&&e(14)(Object.prototype,"toString",function(){return"[object "+r(this)+"]"},!0)},function(t,n,e){var r=e(0);r(r.P,"Function",{bind:e(101)})},function(t,n,e){var r=e(12).f,o=Function.prototype,i=/^\s*function ([^ (]*)/;"name"in o||e(11)&&r(o,"name",{configurable:!0,get:function(){try{return(""+this).match(i)[1]}catch(t){return""}}})},function(t,n,e){"use strict";var r=e(7),o=e(39),i=e(8)("hasInstance"),u=Function.prototype;i in u||e(12).f(u,i,{value:function(t){if("function"!=typeof this||!r(t))return!1;if(!r(this.prototype))return t instanceof this;for(;t=o(t);)if(this.prototype===t)return!0;return!1}})},function(t,n,e){var r=e(0),o=e(103);r(r.G+r.F*(parseInt!=o),{parseInt:o})},function(t,n,e){var r=e(0),o=e(104);r(r.G+r.F*(parseFloat!=o),{parseFloat:o})},function(t,n,e){"use strict";var r=e(4),o=e(16),i=e(26),u=e(73),c=e(29),a=e(5),s=e(38).f,f=e(23).f,l=e(12).f,h=e(43).trim,g=r.Number,p=g,v=g.prototype,d="Number"==i(e(37)(v)),m="trim"in String.prototype,y=function(t){var n=c(t,!1);if("string"==typeof n&&n.length>2){var e,r,o,i=(n=m?n.trim():h(n,3)).charCodeAt(0);if(43===i||45===i){if(88===(e=n.charCodeAt(2))||120===e)return NaN}else if(48===i){switch(n.charCodeAt(1)){case 66:case 98:r=2,o=49;break;case 79:case 111:r=8,o=55;break;default:return+n}for(var u,a=n.slice(2),s=0,f=a.length;s<f;s++)if((u=a.charCodeAt(s))<48||u>o)return NaN;return parseInt(a,r)}}return+n};if(!g(" 0o1")||!g("0b1")||g("+0x1")){g=function(t){var n=arguments.length<1?0:t,e=this;return e instanceof g&&(d?a(function(){v.valueOf.call(e)}):"Number"!=i(e))?u(new p(y(n)),e,g):y(n)};for(var b,A=e(11)?s(p):"MAX_VALUE,MIN_VALUE,NaN,NEGATIVE_INFINITY,POSITIVE_INFINITY,EPSILON,isFinite,isInteger,isNaN,isSafeInteger,MAX_SAFE_INTEGER,MIN_SAFE_INTEGER,parseFloat,parseInt,isInteger".split(","),x=0;A.length>x;x++)o(p,b=A[x])&&!o(g,b)&&l(g,b,f(p,b));g.prototype=v,v.constructor=g,e(14)(r,"Number",g)}},function(t,n,e){"use strict";var r=e(0),o=e(22),i=e(105),u=e(74),c=1..toFixed,a=Math.floor,s=[0,0,0,0,0,0],f="Number.toFixed: incorrect invocation!",l=function(t,n){for(var e=-1,r=n;++e<6;)r+=t*s[e],s[e]=r%1e7,r=a(r/1e7)},h=function(t){for(var n=6,e=0;--n>=0;)e+=s[n],s[n]=a(e/t),e=e%t*1e7},g=function(){for(var t=6,n="";--t>=0;)if(""!==n||0===t||0!==s[t]){var e=String(s[t]);n=""===n?e:n+u.call("0",7-e.length)+e}return n},p=function(t,n,e){return 0===n?e:n%2==1?p(t,n-1,e*t):p(t*t,n/2,e)};r(r.P+r.F*(!!c&&("0.000"!==8e-5.toFixed(3)||"1"!==.9.toFixed(0)||"1.25"!==1.255.toFixed(2)||"1000000000000000128"!==(0xde0b6b3a7640080).toFixed(0))||!e(5)(function(){c.call({})})),"Number",{toFixed:function(t){var n,e,r,c,a=i(this,f),s=o(t),v="",d="0";if(s<0||s>20)throw RangeError(f);if(a!=a)return"NaN";if(a<=-1e21||a>=1e21)return String(a);if(a<0&&(v="-",a=-a),a>1e-21)if(e=(n=function(t){for(var n=0,e=t;e>=4096;)n+=12,e/=4096;for(;e>=2;)n+=1,e/=2;return n}(a*p(2,69,1))-69)<0?a*p(2,-n,1):a/p(2,n,1),e*=4503599627370496,(n=52-n)>0){for(l(0,e),r=s;r>=7;)l(1e7,0),r-=7;for(l(p(10,r,1),0),r=n-1;r>=23;)h(1<<23),r-=23;h(1<<r),l(1,1),h(2),d=g()}else l(0,e),l(1<<-n,0),d=g()+u.call("0",s);return d=s>0?v+((c=d.length)<=s?"0."+u.call("0",s-c)+d:d.slice(0,c-s)+"."+d.slice(c-s)):v+d}})},function(t,n,e){"use strict";var r=e(0),o=e(5),i=e(105),u=1..toPrecision;r(r.P+r.F*(o(function(){return"1"!==u.call(1,void 0)})||!o(function(){u.call({})})),"Number",{toPrecision:function(t){var n=i(this,"Number#toPrecision: incorrect invocation!");return void 0===t?u.call(n):u.call(n,t)}})},function(t,n,e){var r=e(0);r(r.S,"Number",{EPSILON:Math.pow(2,-52)})},function(t,n,e){var r=e(0),o=e(4).isFinite;r(r.S,"Number",{isFinite:function(t){return"number"==typeof t&&o(t)}})},function(t,n,e){var r=e(0);r(r.S,"Number",{isInteger:e(106)})},function(t,n,e){var r=e(0);r(r.S,"Number",{isNaN:function(t){return t!=t}})},function(t,n,e){var r=e(0),o=e(106),i=Math.abs;r(r.S,"Number",{isSafeInteger:function(t){return o(t)&&i(t)<=9007199254740991}})},function(t,n,e){var r=e(0);r(r.S,"Number",{MAX_SAFE_INTEGER:9007199254740991})},function(t,n,e){var r=e(0);r(r.S,"Number",{MIN_SAFE_INTEGER:-9007199254740991})},function(t,n,e){var r=e(0),o=e(104);r(r.S+r.F*(Number.parseFloat!=o),"Number",{parseFloat:o})},function(t,n,e){var r=e(0),o=e(103);r(r.S+r.F*(Number.parseInt!=o),"Number",{parseInt:o})},function(t,n,e){var r=e(0),o=e(107),i=Math.sqrt,u=Math.acosh;r(r.S+r.F*!(u&&710==Math.floor(u(Number.MAX_VALUE))&&u(1/0)==1/0),"Math",{acosh:function(t){return(t=+t)<1?NaN:t>94906265.62425156?Math.log(t)+Math.LN2:o(t-1+i(t-1)*i(t+1))}})},function(t,n,e){var r=e(0),o=Math.asinh;r(r.S+r.F*!(o&&1/o(0)>0),"Math",{asinh:function t(n){return isFinite(n=+n)&&0!=n?n<0?-t(-n):Math.log(n+Math.sqrt(n*n+1)):n}})},function(t,n,e){var r=e(0),o=Math.atanh;r(r.S+r.F*!(o&&1/o(-0)<0),"Math",{atanh:function(t){return 0==(t=+t)?t:Math.log((1+t)/(1-t))/2}})},function(t,n,e){var r=e(0),o=e(75);r(r.S,"Math",{cbrt:function(t){return o(t=+t)*Math.pow(Math.abs(t),1/3)}})},function(t,n,e){var r=e(0);r(r.S,"Math",{clz32:function(t){return(t>>>=0)?31-Math.floor(Math.log(t+.5)*Math.LOG2E):32}})},function(t,n,e){var r=e(0),o=Math.exp;r(r.S,"Math",{cosh:function(t){return(o(t=+t)+o(-t))/2}})},function(t,n,e){var r=e(0),o=e(76);r(r.S+r.F*(o!=Math.expm1),"Math",{expm1:o})},function(t,n,e){var r=e(0);r(r.S,"Math",{fround:e(175)})},function(t,n,e){var r=e(75),o=Math.pow,i=o(2,-52),u=o(2,-23),c=o(2,127)*(2-u),a=o(2,-126);t.exports=Math.fround||function(t){var n,e,o=Math.abs(t),s=r(t);return o<a?s*(o/a/u+1/i-1/i)*a*u:(e=(n=(1+u/i)*o)-(n-o))>c||e!=e?s*(1/0):s*e}},function(t,n,e){var r=e(0),o=Math.abs;r(r.S,"Math",{hypot:function(t,n){for(var e,r,i=0,u=0,c=arguments.length,a=0;u<c;)a<(e=o(arguments[u++]))?(i=i*(r=a/e)*r+1,a=e):i+=e>0?(r=e/a)*r:e;return a===1/0?1/0:a*Math.sqrt(i)}})},function(t,n,e){var r=e(0),o=Math.imul;r(r.S+r.F*e(5)(function(){return-5!=o(4294967295,5)||2!=o.length}),"Math",{imul:function(t,n){var e=+t,r=+n,o=65535&e,i=65535&r;return 0|o*i+((65535&e>>>16)*i+o*(65535&r>>>16)<<16>>>0)}})},function(t,n,e){var r=e(0);r(r.S,"Math",{log10:function(t){return Math.log(t)*Math.LOG10E}})},function(t,n,e){var r=e(0);r(r.S,"Math",{log1p:e(107)})},function(t,n,e){var r=e(0);r(r.S,"Math",{log2:function(t){return Math.log(t)/Math.LN2}})},function(t,n,e){var r=e(0);r(r.S,"Math",{sign:e(75)})},function(t,n,e){var r=e(0),o=e(76),i=Math.exp;r(r.S+r.F*e(5)(function(){return-2e-17!=!Math.sinh(-2e-17)}),"Math",{sinh:function(t){return Math.abs(t=+t)<1?(o(t)-o(-t))/2:(i(t-1)-i(-t-1))*(Math.E/2)}})},function(t,n,e){var r=e(0),o=e(76),i=Math.exp;r(r.S,"Math",{tanh:function(t){var n=o(t=+t),e=o(-t);return n==1/0?1:e==1/0?-1:(n-e)/(i(t)+i(-t))}})},function(t,n,e){var r=e(0);r(r.S,"Math",{trunc:function(t){return(t>0?Math.floor:Math.ceil)(t)}})},function(t,n,e){var r=e(0),o=e(36),i=String.fromCharCode,u=String.fromCodePoint;r(r.S+r.F*(!!u&&1!=u.length),"String",{fromCodePoint:function(t){for(var n,e=[],r=arguments.length,u=0;r>u;){if(n=+arguments[u++],o(n,1114111)!==n)throw RangeError(n+" is not a valid code point");e.push(n<65536?i(n):i(55296+((n-=65536)>>10),n%1024+56320))}return e.join("")}})},function(t,n,e){var r=e(0),o=e(18),i=e(9);r(r.S,"String",{raw:function(t){for(var n=o(t.raw),e=i(n.length),r=arguments.length,u=[],c=0;e>c;)u.push(String(n[c++])),c<r&&u.push(String(arguments[c]));return u.join("")}})},function(t,n,e){"use strict";e(43)("trim",function(t){return function(){return t(this,3)}})},function(t,n,e){"use strict";var r=e(77)(!0);e(78)(String,"String",function(t){this._t=String(t),this._i=0},function(){var t,n=this._t,e=this._i;return e>=n.length?{value:void 0,done:!0}:(t=r(n,e),this._i+=t.length,{value:t,done:!1})})},function(t,n,e){"use strict";var r=e(0),o=e(77)(!1);r(r.P,"String",{codePointAt:function(t){return o(this,t)}})},function(t,n,e){"use strict";var r=e(0),o=e(9),i=e(79),u="".endsWith;r(r.P+r.F*e(81)("endsWith"),"String",{endsWith:function(t){var n=i(this,t,"endsWith"),e=arguments.length>1?arguments[1]:void 0,r=o(n.length),c=void 0===e?r:Math.min(o(e),r),a=String(t);return u?u.call(n,a,c):n.slice(c-a.length,c)===a}})},function(t,n,e){"use strict";var r=e(0),o=e(79);r(r.P+r.F*e(81)("includes"),"String",{includes:function(t){return!!~o(this,t,"includes").indexOf(t,arguments.length>1?arguments[1]:void 0)}})},function(t,n,e){var r=e(0);r(r.P,"String",{repeat:e(74)})},function(t,n,e){"use strict";var r=e(0),o=e(9),i=e(79),u="".startsWith;r(r.P+r.F*e(81)("startsWith"),"String",{startsWith:function(t){var n=i(this,t,"startsWith"),e=o(Math.min(arguments.length>1?arguments[1]:void 0,n.length)),r=String(t);return u?u.call(n,r,e):n.slice(e,e+r.length)===r}})},function(t,n,e){"use strict";e(15)("anchor",function(t){return function(n){return t(this,"a","name",n)}})},function(t,n,e){"use strict";e(15)("big",function(t){return function(){return t(this,"big","","")}})},function(t,n,e){"use strict";e(15)("blink",function(t){return function(){return t(this,"blink","","")}})},function(t,n,e){"use strict";e(15)("bold",function(t){return function(){return t(this,"b","","")}})},function(t,n,e){"use strict";e(15)("fixed",function(t){return function(){return t(this,"tt","","")}})},function(t,n,e){"use strict";e(15)("fontcolor",function(t){return function(n){return t(this,"font","color",n)}})},function(t,n,e){"use strict";e(15)("fontsize",function(t){return function(n){return t(this,"font","size",n)}})},function(t,n,e){"use strict";e(15)("italics",function(t){return function(){return t(this,"i","","")}})},function(t,n,e){"use strict";e(15)("link",function(t){return function(n){return t(this,"a","href",n)}})},function(t,n,e){"use strict";e(15)("small",function(t){return function(){return t(this,"small","","")}})},function(t,n,e){"use strict";e(15)("strike",function(t){return function(){return t(this,"strike","","")}})},function(t,n,e){"use strict";e(15)("sub",function(t){return function(){return t(this,"sub","","")}})},function(t,n,e){"use strict";e(15)("sup",function(t){return function(){return t(this,"sup","","")}})},function(t,n,e){var r=e(0);r(r.S,"Date",{now:function(){return(new Date).getTime()}})},function(t,n,e){"use strict";var r=e(0),o=e(13),i=e(29);r(r.P+r.F*e(5)(function(){return null!==new Date(NaN).toJSON()||1!==Date.prototype.toJSON.call({toISOString:function(){return 1}})}),"Date",{toJSON:function(t){var n=o(this),e=i(n);return"number"!=typeof e||isFinite(e)?n.toISOString():null}})},function(t,n,e){var r=e(0),o=e(210);r(r.P+r.F*(Date.prototype.toISOString!==o),"Date",{toISOString:o})},function(t,n,e){"use strict";var r=e(5),o=Date.prototype.getTime,i=Date.prototype.toISOString,u=function(t){return t>9?t:"0"+t};t.exports=r(function(){return"0385-07-25T07:06:39.999Z"!=i.call(new Date(-5e13-1))})||!r(function(){i.call(new Date(NaN))})?function(){if(!isFinite(o.call(this)))throw RangeError("Invalid time value");var t=this,n=t.getUTCFullYear(),e=t.getUTCMilliseconds(),r=n<0?"-":n>9999?"+":"";return r+("00000"+Math.abs(n)).slice(r?-6:-4)+"-"+u(t.getUTCMonth()+1)+"-"+u(t.getUTCDate())+"T"+u(t.getUTCHours())+":"+u(t.getUTCMinutes())+":"+u(t.getUTCSeconds())+"."+(e>99?e:"0"+u(e))+"Z"}:i},function(t,n,e){var r=Date.prototype,o=r.toString,i=r.getTime;new Date(NaN)+""!="Invalid Date"&&e(14)(r,"toString",function(){var t=i.call(this);return t==t?o.call(this):"Invalid Date"})},function(t,n,e){var r=e(8)("toPrimitive"),o=Date.prototype;r in o||e(17)(o,r,e(213))},function(t,n,e){"use strict";var r=e(6),o=e(29);t.exports=function(t){if("string"!==t&&"number"!==t&&"default"!==t)throw TypeError("Incorrect hint");return o(r(this),"number"!=t)}},function(t,n,e){var r=e(0);r(r.S,"Array",{isArray:e(55)})},function(t,n,e){"use strict";var r=e(20),o=e(0),i=e(13),u=e(109),c=e(82),a=e(9),s=e(83),f=e(84);o(o.S+o.F*!e(56)(function(t){Array.from(t)}),"Array",{from:function(t){var n,e,o,l,h=i(t),g="function"==typeof this?this:Array,p=arguments.length,v=p>1?arguments[1]:void 0,d=void 0!==v,m=0,y=f(h);if(d&&(v=r(v,p>2?arguments[2]:void 0,2)),null==y||g==Array&&c(y))for(e=new g(n=a(h.length));n>m;m++)s(e,m,d?v(h[m],m):h[m]);else for(l=y.call(h),e=new g;!(o=l.next()).done;m++)s(e,m,d?u(l,v,[o.value,m],!0):o.value);return e.length=m,e}})},function(t,n,e){"use strict";var r=e(0),o=e(83);r(r.S+r.F*e(5)(function(){function t(){}return!(Array.of.call(t)instanceof t)}),"Array",{of:function(){for(var t=0,n=arguments.length,e=new("function"==typeof this?this:Array)(n);n>t;)o(e,t,arguments[t++]);return e.length=n,e}})},function(t,n,e){"use strict";var r=e(0),o=e(18),i=[].join;r(r.P+r.F*(e(48)!=Object||!e(19)(i)),"Array",{join:function(t){return i.call(o(this),void 0===t?",":t)}})},function(t,n,e){"use strict";var r=e(0),o=e(70),i=e(26),u=e(36),c=e(9),a=[].slice;r(r.P+r.F*e(5)(function(){o&&a.call(o)}),"Array",{slice:function(t,n){var e=c(this.length),r=i(this);if(n=void 0===n?e:n,"Array"==r)return a.call(this,t,n);for(var o=u(t,e),s=u(n,e),f=c(s-o),l=new Array(f),h=0;h<f;h++)l[h]="String"==r?this.charAt(o+h):this[o+h];return l}})},function(t,n,e){"use strict";var r=e(0),o=e(21),i=e(13),u=e(5),c=[].sort,a=[1,2,3];r(r.P+r.F*(u(function(){a.sort(void 0)})||!u(function(){a.sort(null)})||!e(19)(c)),"Array",{sort:function(t){return void 0===t?c.call(i(this)):c.call(i(this),o(t))}})},function(t,n,e){"use strict";var r=e(0),o=e(25)(0),i=e(19)([].forEach,!0);r(r.P+r.F*!i,"Array",{forEach:function(t){return o(this,t,arguments[1])}})},function(t,n,e){var r=e(7),o=e(55),i=e(8)("species");t.exports=function(t){var n;return o(t)&&("function"!=typeof(n=t.constructor)||n!==Array&&!o(n.prototype)||(n=void 0),r(n)&&null===(n=n[i])&&(n=void 0)),void 0===n?Array:n}},function(t,n,e){"use strict";var r=e(0),o=e(25)(1);r(r.P+r.F*!e(19)([].map,!0),"Array",{map:function(t){return o(this,t,arguments[1])}})},function(t,n,e){"use strict";var r=e(0),o=e(25)(2);r(r.P+r.F*!e(19)([].filter,!0),"Array",{filter:function(t){return o(this,t,arguments[1])}})},function(t,n,e){"use strict";var r=e(0),o=e(25)(3);r(r.P+r.F*!e(19)([].some,!0),"Array",{some:function(t){return o(this,t,arguments[1])}})},function(t,n,e){"use strict";var r=e(0),o=e(25)(4);r(r.P+r.F*!e(19)([].every,!0),"Array",{every:function(t){return o(this,t,arguments[1])}})},function(t,n,e){"use strict";var r=e(0),o=e(111);r(r.P+r.F*!e(19)([].reduce,!0),"Array",{reduce:function(t){return o(this,t,arguments.length,arguments[1],!1)}})},function(t,n,e){"use strict";var r=e(0),o=e(111);r(r.P+r.F*!e(19)([].reduceRight,!0),"Array",{reduceRight:function(t){return o(this,t,arguments.length,arguments[1],!0)}})},function(t,n,e){"use strict";var r=e(0),o=e(53)(!1),i=[].indexOf,u=!!i&&1/[1].indexOf(1,-0)<0;r(r.P+r.F*(u||!e(19)(i)),"Array",{indexOf:function(t){return u?i.apply(this,arguments)||0:o(this,t,arguments[1])}})},function(t,n,e){"use strict";var r=e(0),o=e(18),i=e(22),u=e(9),c=[].lastIndexOf,a=!!c&&1/[1].lastIndexOf(1,-0)<0;r(r.P+r.F*(a||!e(19)(c)),"Array",{lastIndexOf:function(t){if(a)return c.apply(this,arguments)||0;var n=o(this),e=u(n.length),r=e-1;for(arguments.length>1&&(r=Math.min(r,i(arguments[1]))),r<0&&(r=e+r);r>=0;r--)if(r in n&&n[r]===t)return r||0;return-1}})},function(t,n,e){var r=e(0);r(r.P,"Array",{copyWithin:e(112)}),e(40)("copyWithin")},function(t,n,e){var r=e(0);r(r.P,"Array",{fill:e(85)}),e(40)("fill")},function(t,n,e){"use strict";var r=e(0),o=e(25)(5),i=!0;"find"in[]&&Array(1).find(function(){i=!1}),r(r.P+r.F*i,"Array",{find:function(t){return o(this,t,arguments.length>1?arguments[1]:void 0)}}),e(40)("find")},function(t,n,e){"use strict";var r=e(0),o=e(25)(6),i="findIndex",u=!0;i in[]&&Array(1)[i](function(){u=!1}),r(r.P+r.F*u,"Array",{findIndex:function(t){return o(this,t,arguments.length>1?arguments[1]:void 0)}}),e(40)(i)},function(t,n,e){e(45)("Array")},function(t,n,e){var r=e(4),o=e(73),i=e(12).f,u=e(38).f,c=e(80),a=e(57),s=r.RegExp,f=s,l=s.prototype,h=/a/g,g=/a/g,p=new s(h)!==h;if(e(11)&&(!p||e(5)(function(){return g[e(8)("match")]=!1,s(h)!=h||s(g)==g||"/a/i"!=s(h,"i")}))){s=function(t,n){var e=this instanceof s,r=c(t),i=void 0===n;return!e&&r&&t.constructor===s&&i?t:o(p?new f(r&&!i?t.source:t,n):f((r=t instanceof s)?t.source:t,r&&i?a.call(t):n),e?this:l,s)};for(var v=function(t){t in s||i(s,t,{configurable:!0,get:function(){return f[t]},set:function(n){f[t]=n}})},d=u(f),m=0;d.length>m;)v(d[m++]);l.constructor=s,s.prototype=l,e(14)(r,"RegExp",s)}e(45)("RegExp")},function(t,n,e){"use strict";e(115);var r=e(6),o=e(57),i=e(11),u=/./.toString,c=function(t){e(14)(RegExp.prototype,"toString",t,!0)};e(5)(function(){return"/a/b"!=u.call({source:"a",flags:"b"})})?c(function(){var t=r(this);return"/".concat(t.source,"/","flags"in t?t.flags:!i&&t instanceof RegExp?o.call(t):void 0)}):"toString"!=u.name&&c(function(){return u.call(this)})},function(t,n,e){"use strict";var r=e(6),o=e(9),i=e(88),u=e(58);e(59)("match",1,function(t,n,e,c){return[function(e){var r=t(this),o=null==e?void 0:e[n];return void 0!==o?o.call(e,r):new RegExp(e)[n](String(r))},function(t){var n=c(e,t,this);if(n.done)return n.value;var a=r(t),s=String(this);if(!a.global)return u(a,s);var f=a.unicode;a.lastIndex=0;for(var l,h=[],g=0;null!==(l=u(a,s));){var p=String(l[0]);h[g]=p,""===p&&(a.lastIndex=i(s,o(a.lastIndex),f)),g++}return 0===g?null:h}]})},function(t,n,e){"use strict";var r=e(6),o=e(13),i=e(9),u=e(22),c=e(88),a=e(58),s=Math.max,f=Math.min,l=Math.floor,h=/\$([$&`']|\d\d?|<[^>]*>)/g,g=/\$([$&`']|\d\d?)/g;e(59)("replace",2,function(t,n,e,p){return[function(r,o){var i=t(this),u=null==r?void 0:r[n];return void 0!==u?u.call(r,i,o):e.call(String(i),r,o)},function(t,n){var o=p(e,t,this,n);if(o.done)return o.value;var l=r(t),h=String(this),g="function"==typeof n;g||(n=String(n));var d=l.global;if(d){var m=l.unicode;l.lastIndex=0}for(var y=[];;){var b=a(l,h);if(null===b)break;if(y.push(b),!d)break;""===String(b[0])&&(l.lastIndex=c(h,i(l.lastIndex),m))}for(var A,x="",w=0,_=0;_<y.length;_++){b=y[_];for(var S=String(b[0]),O=s(f(u(b.index),h.length),0),E=[],j=1;j<b.length;j++)E.push(void 0===(A=b[j])?A:String(A));var k=b.groups;if(g){var P=[S].concat(E,O,h);void 0!==k&&P.push(k);var I=String(n.apply(void 0,P))}else I=v(S,h,O,E,k,n);O>=w&&(x+=h.slice(w,O)+I,w=O+S.length)}return x+h.slice(w)}];function v(t,n,r,i,u,c){var a=r+t.length,s=i.length,f=g;return void 0!==u&&(u=o(u),f=h),e.call(c,f,function(e,o){var c;switch(o.charAt(0)){case"$":return"$";case"&":return t;case"`":return n.slice(0,r);case"'":return n.slice(a);case"<":c=u[o.slice(1,-1)];break;default:var f=+o;if(0===f)return e;if(f>s){var h=l(f/10);return 0===h?e:h<=s?void 0===i[h-1]?o.charAt(1):i[h-1]+o.charAt(1):e}c=i[f-1]}return void 0===c?"":c})}})},function(t,n,e){"use strict";var r=e(6),o=e(100),i=e(58);e(59)("search",1,function(t,n,e,u){return[function(e){var r=t(this),o=null==e?void 0:e[n];return void 0!==o?o.call(e,r):new RegExp(e)[n](String(r))},function(t){var n=u(e,t,this);if(n.done)return n.value;var c=r(t),a=String(this),s=c.lastIndex;o(s,0)||(c.lastIndex=0);var f=i(c,a);return o(c.lastIndex,s)||(c.lastIndex=s),null===f?-1:f.index}]})},function(t,n,e){"use strict";var r=e(80),o=e(6),i=e(51),u=e(88),c=e(9),a=e(58),s=e(87),f=e(5),l=Math.min,h=[].push,g=!f(function(){RegExp(4294967295,"y")});e(59)("split",2,function(t,n,e,f){var p;return p="c"=="abbc".split(/(b)*/)[1]||4!="test".split(/(?:)/,-1).length||2!="ab".split(/(?:ab)*/).length||4!=".".split(/(.?)(.?)/).length||".".split(/()()/).length>1||"".split(/.?/).length?function(t,n){var o=String(this);if(void 0===t&&0===n)return[];if(!r(t))return e.call(o,t,n);for(var i,u,c,a=[],f=(t.ignoreCase?"i":"")+(t.multiline?"m":"")+(t.unicode?"u":"")+(t.sticky?"y":""),l=0,g=void 0===n?4294967295:n>>>0,p=new RegExp(t.source,f+"g");(i=s.call(p,o))&&!((u=p.lastIndex)>l&&(a.push(o.slice(l,i.index)),i.length>1&&i.index<o.length&&h.apply(a,i.slice(1)),c=i[0].length,l=u,a.length>=g));)p.lastIndex===i.index&&p.lastIndex++;return l===o.length?!c&&p.test("")||a.push(""):a.push(o.slice(l)),a.length>g?a.slice(0,g):a}:"0".split(void 0,0).length?function(t,n){return void 0===t&&0===n?[]:e.call(this,t,n)}:e,[function(e,r){var o=t(this),i=null==e?void 0:e[n];return void 0!==i?i.call(e,o,r):p.call(String(o),e,r)},function(t,n){var r=f(p,t,this,n,p!==e);if(r.done)return r.value;var s=o(t),h=String(this),v=i(s,RegExp),d=s.unicode,m=(s.ignoreCase?"i":"")+(s.multiline?"m":"")+(s.unicode?"u":"")+(g?"y":"g"),y=new v(g?s:"^(?:"+s.source+")",m),b=void 0===n?4294967295:n>>>0;if(0===b)return[];if(0===h.length)return null===a(y,h)?[h]:[];for(var A=0,x=0,w=[];x<h.length;){y.lastIndex=g?x:0;var _,S=a(y,g?h:h.slice(x));if(null===S||(_=l(c(y.lastIndex+(g?0:x)),h.length))===A)x=u(h,x,d);else{if(w.push(h.slice(A,x)),w.length===b)return w;for(var O=1;O<=S.length-1;O++)if(w.push(S[O]),w.length===b)return w;x=A=_}}return w.push(h.slice(A)),w}]})},function(t,n,e){var r=e(4),o=e(89).set,i=r.MutationObserver||r.WebKitMutationObserver,u=r.process,c=r.Promise,a="process"==e(26)(u);t.exports=function(){var t,n,e,s=function(){var r,o;for(a&&(r=u.domain)&&r.exit();t;){o=t.fn,t=t.next;try{o()}catch(r){throw t?e():n=void 0,r}}n=void 0,r&&r.enter()};if(a)e=function(){u.nextTick(s)};else if(!i||r.navigator&&r.navigator.standalone)if(c&&c.resolve){var f=c.resolve(void 0);e=function(){f.then(s)}}else e=function(){o.call(r,s)};else{var l=!0,h=document.createTextNode("");new i(s).observe(h,{characterData:!0}),e=function(){h.data=l=!l}}return function(r){var o={fn:r,next:void 0};n&&(n.next=o),t||(t=o,e()),n=o}}},function(t,n){t.exports=function(t){try{return{e:!1,v:t()}}catch(t){return{e:!0,v:t}}}},function(t,n,e){"use strict";var r=e(119),o=e(41);t.exports=e(62)("Map",function(t){return function(){return t(this,arguments.length>0?arguments[0]:void 0)}},{get:function(t){var n=r.getEntry(o(this,"Map"),t);return n&&n.v},set:function(t,n){return r.def(o(this,"Map"),0===t?0:t,n)}},r,!0)},function(t,n,e){"use strict";var r=e(119),o=e(41);t.exports=e(62)("Set",function(t){return function(){return t(this,arguments.length>0?arguments[0]:void 0)}},{add:function(t){return r.def(o(this,"Set"),t=0===t?0:t,t)}},r)},function(t,n,e){"use strict";var r,o=e(4),i=e(25)(0),u=e(14),c=e(30),a=e(99),s=e(120),f=e(7),l=e(41),h=e(41),g=!o.ActiveXObject&&"ActiveXObject"in o,p=c.getWeak,v=Object.isExtensible,d=s.ufstore,m=function(t){return function(){return t(this,arguments.length>0?arguments[0]:void 0)}},y={get:function(t){if(f(t)){var n=p(t);return!0===n?d(l(this,"WeakMap")).get(t):n?n[this._i]:void 0}},set:function(t,n){return s.def(l(this,"WeakMap"),t,n)}},b=t.exports=e(62)("WeakMap",m,y,s,!0,!0);h&&g&&(a((r=s.getConstructor(m,"WeakMap")).prototype,y),c.NEED=!0,i(["delete","has","get","set"],function(t){var n=b.prototype,e=n[t];u(n,t,function(n,o){if(f(n)&&!v(n)){this._f||(this._f=new r);var i=this._f[t](n,o);return"set"==t?this:i}return e.call(this,n,o)})}))},function(t,n,e){"use strict";var r=e(120),o=e(41);e(62)("WeakSet",function(t){return function(){return t(this,arguments.length>0?arguments[0]:void 0)}},{add:function(t){return r.def(o(this,"WeakSet"),t,!0)}},r,!1,!0)},function(t,n,e){"use strict";var r=e(0),o=e(63),i=e(90),u=e(6),c=e(36),a=e(9),s=e(7),f=e(4).ArrayBuffer,l=e(51),h=i.ArrayBuffer,g=i.DataView,p=o.ABV&&f.isView,v=h.prototype.slice,d=o.VIEW;r(r.G+r.W+r.F*(f!==h),{ArrayBuffer:h}),r(r.S+r.F*!o.CONSTR,"ArrayBuffer",{isView:function(t){return p&&p(t)||s(t)&&d in t}}),r(r.P+r.U+r.F*e(5)(function(){return!new h(2).slice(1,void 0).byteLength}),"ArrayBuffer",{slice:function(t,n){if(void 0!==v&&void 0===n)return v.call(u(this),t);for(var e=u(this).byteLength,r=c(t,e),o=c(void 0===n?e:n,e),i=new(l(this,h))(a(o-r)),s=new g(this),f=new g(i),p=0;r<o;)f.setUint8(p++,s.getUint8(r++));return i}}),e(45)("ArrayBuffer")},function(t,n,e){var r=e(0);r(r.G+r.W+r.F*!e(63).ABV,{DataView:e(90).DataView})},function(t,n,e){e(28)("Int8",1,function(t){return function(n,e,r){return t(this,n,e,r)}})},function(t,n,e){e(28)("Uint8",1,function(t){return function(n,e,r){return t(this,n,e,r)}})},function(t,n,e){e(28)("Uint8",1,function(t){return function(n,e,r){return t(this,n,e,r)}},!0)},function(t,n,e){e(28)("Int16",2,function(t){return function(n,e,r){return t(this,n,e,r)}})},function(t,n,e){e(28)("Uint16",2,function(t){return function(n,e,r){return t(this,n,e,r)}})},function(t,n,e){e(28)("Int32",4,function(t){return function(n,e,r){return t(this,n,e,r)}})},function(t,n,e){e(28)("Uint32",4,function(t){return function(n,e,r){return t(this,n,e,r)}})},function(t,n,e){e(28)("Float32",4,function(t){return function(n,e,r){return t(this,n,e,r)}})},function(t,n,e){e(28)("Float64",8,function(t){return function(n,e,r){return t(this,n,e,r)}})},function(t,n,e){var r=e(0),o=e(21),i=e(6),u=(e(4).Reflect||{}).apply,c=Function.apply;r(r.S+r.F*!e(5)(function(){u(function(){})}),"Reflect",{apply:function(t,n,e){var r=o(t),a=i(e);return u?u(r,n,a):c.call(r,n,a)}})},function(t,n,e){var r=e(0),o=e(37),i=e(21),u=e(6),c=e(7),a=e(5),s=e(101),f=(e(4).Reflect||{}).construct,l=a(function(){function t(){}return!(f(function(){},[],t)instanceof t)}),h=!a(function(){f(function(){})});r(r.S+r.F*(l||h),"Reflect",{construct:function(t,n){i(t),u(n);var e=arguments.length<3?t:i(arguments[2]);if(h&&!l)return f(t,n,e);if(t==e){switch(n.length){case 0:return new t;case 1:return new t(n[0]);case 2:return new t(n[0],n[1]);case 3:return new t(n[0],n[1],n[2]);case 4:return new t(n[0],n[1],n[2],n[3])}var r=[null];return r.push.apply(r,n),new(s.apply(t,r))}var a=e.prototype,g=o(c(a)?a:Object.prototype),p=Function.apply.call(t,g,n);return c(p)?p:g}})},function(t,n,e){var r=e(12),o=e(0),i=e(6),u=e(29);o(o.S+o.F*e(5)(function(){Reflect.defineProperty(r.f({},1,{value:1}),1,{value:2})}),"Reflect",{defineProperty:function(t,n,e){i(t),n=u(n,!0),i(e);try{return r.f(t,n,e),!0}catch(t){return!1}}})},function(t,n,e){var r=e(0),o=e(23).f,i=e(6);r(r.S,"Reflect",{deleteProperty:function(t,n){var e=o(i(t),n);return!(e&&!e.configurable)&&delete t[n]}})},function(t,n,e){"use strict";var r=e(0),o=e(6),i=function(t){this._t=o(t),this._i=0;var n,e=this._k=[];for(n in t)e.push(n)};e(108)(i,"Object",function(){var t,n=this._k;do{if(this._i>=n.length)return{value:void 0,done:!0}}while(!((t=n[this._i++])in this._t));return{value:t,done:!1}}),r(r.S,"Reflect",{enumerate:function(t){return new i(t)}})},function(t,n,e){var r=e(23),o=e(39),i=e(16),u=e(0),c=e(7),a=e(6);u(u.S,"Reflect",{get:function t(n,e){var u,s,f=arguments.length<3?n:arguments[2];return a(n)===f?n[e]:(u=r.f(n,e))?i(u,"value")?u.value:void 0!==u.get?u.get.call(f):void 0:c(s=o(n))?t(s,e,f):void 0}})},function(t,n,e){var r=e(23),o=e(0),i=e(6);o(o.S,"Reflect",{getOwnPropertyDescriptor:function(t,n){return r.f(i(t),n)}})},function(t,n,e){var r=e(0),o=e(39),i=e(6);r(r.S,"Reflect",{getPrototypeOf:function(t){return o(i(t))}})},function(t,n,e){var r=e(0);r(r.S,"Reflect",{has:function(t,n){return n in t}})},function(t,n,e){var r=e(0),o=e(6),i=Object.isExtensible;r(r.S,"Reflect",{isExtensible:function(t){return o(t),!i||i(t)}})},function(t,n,e){var r=e(0);r(r.S,"Reflect",{ownKeys:e(122)})},function(t,n,e){var r=e(0),o=e(6),i=Object.preventExtensions;r(r.S,"Reflect",{preventExtensions:function(t){o(t);try{return i&&i(t),!0}catch(t){return!1}}})},function(t,n,e){var r=e(12),o=e(23),i=e(39),u=e(16),c=e(0),a=e(32),s=e(6),f=e(7);c(c.S,"Reflect",{set:function t(n,e,c){var l,h,g=arguments.length<4?n:arguments[3],p=o.f(s(n),e);if(!p){if(f(h=i(n)))return t(h,e,c,g);p=a(0)}if(u(p,"value")){if(!1===p.writable||!f(g))return!1;if(l=o.f(g,e)){if(l.get||l.set||!1===l.writable)return!1;l.value=c,r.f(g,e,l)}else r.f(g,e,a(0,c));return!0}return void 0!==p.set&&(p.set.call(g,c),!0)}})},function(t,n,e){var r=e(0),o=e(71);o&&r(r.S,"Reflect",{setPrototypeOf:function(t,n){o.check(t,n);try{return o.set(t,n),!0}catch(t){return!1}}})},function(t,n,e){e(273),t.exports=e(10).Array.includes},function(t,n,e){"use strict";var r=e(0),o=e(53)(!0);r(r.P,"Array",{includes:function(t){return o(this,t,arguments.length>1?arguments[1]:void 0)}}),e(40)("includes")},function(t,n,e){e(275),t.exports=e(10).Array.flatMap},function(t,n,e){"use strict";var r=e(0),o=e(276),i=e(13),u=e(9),c=e(21),a=e(110);r(r.P,"Array",{flatMap:function(t){var n,e,r=i(this);return c(t),n=u(r.length),e=a(r,0),o(e,r,r,n,0,1,t,arguments[1]),e}}),e(40)("flatMap")},function(t,n,e){"use strict";var r=e(55),o=e(7),i=e(9),u=e(20),c=e(8)("isConcatSpreadable");t.exports=function t(n,e,a,s,f,l,h,g){for(var p,v,d=f,m=0,y=!!h&&u(h,g,3);m<s;){if(m in a){if(p=y?y(a[m],m,e):a[m],v=!1,o(p)&&(v=void 0!==(v=p[c])?!!v:r(p)),v&&l>0)d=t(n,e,p,i(p.length),d,l-1)-1;else{if(d>=9007199254740991)throw TypeError();n[d]=p}d++}m++}return d}},function(t,n,e){e(278),t.exports=e(10).String.padStart},function(t,n,e){"use strict";var r=e(0),o=e(123),i=e(61),u=/Version\/10\.\d+(\.\d+)?( Mobile\/\w+)? Safari\//.test(i);r(r.P+r.F*u,"String",{padStart:function(t){return o(this,t,arguments.length>1?arguments[1]:void 0,!0)}})},function(t,n,e){e(280),t.exports=e(10).String.padEnd},function(t,n,e){"use strict";var r=e(0),o=e(123),i=e(61),u=/Version\/10\.\d+(\.\d+)?( Mobile\/\w+)? Safari\//.test(i);r(r.P+r.F*u,"String",{padEnd:function(t){return o(this,t,arguments.length>1?arguments[1]:void 0,!1)}})},function(t,n,e){e(282),t.exports=e(10).String.trimLeft},function(t,n,e){"use strict";e(43)("trimLeft",function(t){return function(){return t(this,1)}},"trimStart")},function(t,n,e){e(284),t.exports=e(10).String.trimRight},function(t,n,e){"use strict";e(43)("trimRight",function(t){return function(){return t(this,2)}},"trimEnd")},function(t,n,e){e(286),t.exports=e(67).f("asyncIterator")},function(t,n,e){e(95)("asyncIterator")},function(t,n,e){e(288),t.exports=e(10).Object.getOwnPropertyDescriptors},function(t,n,e){var r=e(0),o=e(122),i=e(18),u=e(23),c=e(83);r(r.S,"Object",{getOwnPropertyDescriptors:function(t){for(var n,e,r=i(t),a=u.f,s=o(r),f={},l=0;s.length>l;)void 0!==(e=a(r,n=s[l++]))&&c(f,n,e);return f}})},function(t,n,e){e(290),t.exports=e(10).Object.values},function(t,n,e){var r=e(0),o=e(124)(!1);r(r.S,"Object",{values:function(t){return o(t)}})},function(t,n,e){e(292),t.exports=e(10).Object.entries},function(t,n,e){var r=e(0),o=e(124)(!0);r(r.S,"Object",{entries:function(t){return o(t)}})},function(t,n,e){"use strict";e(116),e(294),t.exports=e(10).Promise.finally},function(t,n,e){"use strict";var r=e(0),o=e(10),i=e(4),u=e(51),c=e(118);r(r.P+r.R,"Promise",{finally:function(t){var n=u(this,o.Promise||i.Promise),e="function"==typeof t;return this.then(e?function(e){return c(n,t()).then(function(){return e})}:t,e?function(e){return c(n,t()).then(function(){throw e})}:t)}})},function(t,n,e){e(296),e(297),e(298),t.exports=e(10)},function(t,n,e){var r=e(4),o=e(0),i=e(61),u=[].slice,c=/MSIE .\./.test(i),a=function(t){return function(n,e){var r=arguments.length>2,o=!!r&&u.call(arguments,2);return t(r?function(){("function"==typeof n?n:Function(n)).apply(this,o)}:n,e)}};o(o.G+o.B+o.F*c,{setTimeout:a(r.setTimeout),setInterval:a(r.setInterval)})},function(t,n,e){var r=e(0),o=e(89);r(r.G+r.B,{setImmediate:o.set,clearImmediate:o.clear})},function(t,n,e){for(var r=e(86),o=e(35),i=e(14),u=e(4),c=e(17),a=e(44),s=e(8),f=s("iterator"),l=s("toStringTag"),h=a.Array,g={CSSRuleList:!0,CSSStyleDeclaration:!1,CSSValueList:!1,ClientRectList:!1,DOMRectList:!1,DOMStringList:!1,DOMTokenList:!0,DataTransferItemList:!1,FileList:!1,HTMLAllCollection:!1,HTMLCollection:!1,HTMLFormElement:!1,HTMLSelectElement:!1,MediaList:!0,MimeTypeArray:!1,NamedNodeMap:!1,NodeList:!0,PaintRequestList:!1,Plugin:!1,PluginArray:!1,SVGLengthList:!1,SVGNumberList:!1,SVGPathSegList:!1,SVGPointList:!1,SVGStringList:!1,SVGTransformList:!1,SourceBufferList:!1,StyleSheetList:!0,TextTrackCueList:!1,TextTrackList:!1,TouchList:!1},p=o(g),v=0;v<p.length;v++){var d,m=p[v],y=g[m],b=u[m],A=b&&b.prototype;if(A&&(A[f]||c(A,f,h),A[l]||c(A,l,m),a[m]=h,y))for(d in r)A[d]||i(A,d,r[d],!0)}},function(t,n,e){var r=function(t){"use strict";var n,e=Object.prototype,r=e.hasOwnProperty,o="function"==typeof Symbol?Symbol:{},i=o.iterator||"@@iterator",u=o.asyncIterator||"@@asyncIterator",c=o.toStringTag||"@@toStringTag";function a(t,n,e){return Object.defineProperty(t,n,{value:e,enumerable:!0,configurable:!0,writable:!0}),t[n]}try{a({},"")}catch(t){a=function(t,n,e){return t[n]=e}}function s(t,n,e,r){var o=n&&n.prototype instanceof d?n:d,i=Object.create(o.prototype),u=new k(r||[]);return i._invoke=function(t,n,e){var r=l;return function(o,i){if(r===g)throw new Error("Generator is already running");if(r===p){if("throw"===o)throw i;return I()}for(e.method=o,e.arg=i;;){var u=e.delegate;if(u){var c=O(u,e);if(c){if(c===v)continue;return c}}if("next"===e.method)e.sent=e._sent=e.arg;else if("throw"===e.method){if(r===l)throw r=p,e.arg;e.dispatchException(e.arg)}else"return"===e.method&&e.abrupt("return",e.arg);r=g;var a=f(t,n,e);if("normal"===a.type){if(r=e.done?p:h,a.arg===v)continue;return{value:a.arg,done:e.done}}"throw"===a.type&&(r=p,e.method="throw",e.arg=a.arg)}}}(t,e,u),i}function f(t,n,e){try{return{type:"normal",arg:t.call(n,e)}}catch(t){return{type:"throw",arg:t}}}t.wrap=s;var l="suspendedStart",h="suspendedYield",g="executing",p="completed",v={};function d(){}function m(){}function y(){}var b={};b[i]=function(){return this};var A=Object.getPrototypeOf,x=A&&A(A(P([])));x&&x!==e&&r.call(x,i)&&(b=x);var w=y.prototype=d.prototype=Object.create(b);function _(t){["next","throw","return"].forEach(function(n){a(t,n,function(t){return this._invoke(n,t)})})}function S(t,n){var e;this._invoke=function(o,i){function u(){return new n(function(e,u){!function e(o,i,u,c){var a=f(t[o],t,i);if("throw"!==a.type){var s=a.arg,l=s.value;return l&&"object"==typeof l&&r.call(l,"__await")?n.resolve(l.__await).then(function(t){e("next",t,u,c)},function(t){e("throw",t,u,c)}):n.resolve(l).then(function(t){s.value=t,u(s)},function(t){return e("throw",t,u,c)})}c(a.arg)}(o,i,e,u)})}return e=e?e.then(u,u):u()}}function O(t,e){var r=t.iterator[e.method];if(r===n){if(e.delegate=null,"throw"===e.method){if(t.iterator.return&&(e.method="return",e.arg=n,O(t,e),"throw"===e.method))return v;e.method="throw",e.arg=new TypeError("The iterator does not provide a 'throw' method")}return v}var o=f(r,t.iterator,e.arg);if("throw"===o.type)return e.method="throw",e.arg=o.arg,e.delegate=null,v;var i=o.arg;return i?i.done?(e[t.resultName]=i.value,e.next=t.nextLoc,"return"!==e.method&&(e.method="next",e.arg=n),e.delegate=null,v):i:(e.method="throw",e.arg=new TypeError("iterator result is not an object"),e.delegate=null,v)}function E(t){var n={tryLoc:t[0]};1 in t&&(n.catchLoc=t[1]),2 in t&&(n.finallyLoc=t[2],n.afterLoc=t[3]),this.tryEntries.push(n)}function j(t){var n=t.completion||{};n.type="normal",delete n.arg,t.completion=n}function k(t){this.tryEntries=[{tryLoc:"root"}],t.forEach(E,this),this.reset(!0)}function P(t){if(t){var e=t[i];if(e)return e.call(t);if("function"==typeof t.next)return t;if(!isNaN(t.length)){var o=-1,u=function e(){for(;++o<t.length;)if(r.call(t,o))return e.value=t[o],e.done=!1,e;return e.value=n,e.done=!0,e};return u.next=u}}return{next:I}}function I(){return{value:n,done:!0}}return m.prototype=w.constructor=y,y.constructor=m,m.displayName=a(y,c,"GeneratorFunction"),t.isGeneratorFunction=function(t){var n="function"==typeof t&&t.constructor;return!!n&&(n===m||"GeneratorFunction"===(n.displayName||n.name))},t.mark=function(t){return Object.setPrototypeOf?Object.setPrototypeOf(t,y):(t.__proto__=y,a(t,c,"GeneratorFunction")),t.prototype=Object.create(w),t},t.awrap=function(t){return{__await:t}},_(S.prototype),S.prototype[u]=function(){return this},t.AsyncIterator=S,t.async=function(n,e,r,o,i){void 0===i&&(i=Promise);var u=new S(s(n,e,r,o),i);return t.isGeneratorFunction(e)?u:u.next().then(function(t){return t.done?t.value:u.next()})},_(w),a(w,c,"Generator"),w[i]=function(){return this},w.toString=function(){return"[object Generator]"},t.keys=function(t){var n=[];for(var e in t)n.push(e);return n.reverse(),function e(){for(;n.length;){var r=n.pop();if(r in t)return e.value=r,e.done=!1,e}return e.done=!0,e}},t.values=P,k.prototype={constructor:k,reset:function(t){if(this.prev=0,this.next=0,this.sent=this._sent=n,this.done=!1,this.delegate=null,this.method="next",this.arg=n,this.tryEntries.forEach(j),!t)for(var e in this)"t"===e.charAt(0)&&r.call(this,e)&&!isNaN(+e.slice(1))&&(this[e]=n)},stop:function(){this.done=!0;var t=this.tryEntries[0].completion;if("throw"===t.type)throw t.arg;return this.rval},dispatchException:function(t){if(this.done)throw t;var e=this;function o(r,o){return c.type="throw",c.arg=t,e.next=r,o&&(e.method="next",e.arg=n),!!o}for(var i=this.tryEntries.length-1;i>=0;--i){var u=this.tryEntries[i],c=u.completion;if("root"===u.tryLoc)return o("end");if(u.tryLoc<=this.prev){var a=r.call(u,"catchLoc"),s=r.call(u,"finallyLoc");if(a&&s){if(this.prev<u.catchLoc)return o(u.catchLoc,!0);if(this.prev<u.finallyLoc)return o(u.finallyLoc)}else if(a){if(this.prev<u.catchLoc)return o(u.catchLoc,!0)}else{if(!s)throw new Error("try statement without catch or finally");if(this.prev<u.finallyLoc)return o(u.finallyLoc)}}}},abrupt:function(t,n){for(var e=this.tryEntries.length-1;e>=0;--e){var o=this.tryEntries[e];if(o.tryLoc<=this.prev&&r.call(o,"finallyLoc")&&this.prev<o.finallyLoc){var i=o;break}}i&&("break"===t||"continue"===t)&&i.tryLoc<=n&&n<=i.finallyLoc&&(i=null);var u=i?i.completion:{};return u.type=t,u.arg=n,i?(this.method="next",this.next=i.finallyLoc,v):this.complete(u)},complete:function(t,n){if("throw"===t.type)throw t.arg;return"break"===t.type||"continue"===t.type?this.next=t.arg:"return"===t.type?(this.rval=this.arg=t.arg,this.method="return",this.next="end"):"normal"===t.type&&n&&(this.next=n),v},finish:function(t){for(var n=this.tryEntries.length-1;n>=0;--n){var e=this.tryEntries[n];if(e.finallyLoc===t)return this.complete(e.completion,e.afterLoc),j(e),v}},catch:function(t){for(var n=this.tryEntries.length-1;n>=0;--n){var e=this.tryEntries[n];if(e.tryLoc===t){var r=e.completion;if("throw"===r.type){var o=r.arg;j(e)}return o}}throw new Error("illegal catch attempt")},delegateYield:function(t,e,r){return this.delegate={iterator:P(t),resultName:e,nextLoc:r},"next"===this.method&&(this.arg=n),v}},t}(t.exports);try{regeneratorRuntime=r}catch(t){Function("r","regeneratorRuntime = r")(r)}},function(t,n,e){e(301),t.exports=e(125).global},function(t,n,e){var r=e(302);r(r.G,{global:e(91)})},function(t,n,e){var r=e(91),o=e(125),i=e(303),u=e(305),c=e(312),a=function(t,n,e){var s,f,l,h=t&a.F,g=t&a.G,p=t&a.S,v=t&a.P,d=t&a.B,m=t&a.W,y=g?o:o[n]||(o[n]={}),b=y.prototype,A=g?r:p?r[n]:(r[n]||{}).prototype;for(s in g&&(e=n),e)(f=!h&&A&&void 0!==A[s])&&c(y,s)||(l=f?A[s]:e[s],y[s]=g&&"function"!=typeof A[s]?e[s]:d&&f?i(l,r):m&&A[s]==l?function(t){var n=function(n,e,r){if(this instanceof t){switch(arguments.length){case 0:return new t;case 1:return new t(n);case 2:return new t(n,e)}return new t(n,e,r)}return t.apply(this,arguments)};return n.prototype=t.prototype,n}(l):v&&"function"==typeof l?i(Function.call,l):l,v&&((y.virtual||(y.virtual={}))[s]=l,t&a.R&&b&&!b[s]&&u(b,s,l)))};a.F=1,a.G=2,a.S=4,a.P=8,a.B=16,a.W=32,a.U=64,a.R=128,t.exports=a},function(t,n,e){var r=e(304);t.exports=function(t,n,e){if(r(t),void 0===n)return t;switch(e){case 1:return function(e){return t.call(n,e)};case 2:return function(e,r){return t.call(n,e,r)};case 3:return function(e,r,o){return t.call(n,e,r,o)}}return function(){return t.apply(n,arguments)}}},function(t,n){t.exports=function(t){if("function"!=typeof t)throw TypeError(t+" is not a function!");return t}},function(t,n,e){var r=e(306),o=e(311);t.exports=e(93)?function(t,n,e){return r.f(t,n,o(1,e))}:function(t,n,e){return t[n]=e,t}},function(t,n,e){var r=e(307),o=e(308),i=e(310),u=Object.defineProperty;n.f=e(93)?Object.defineProperty:function(t,n,e){if(r(t),n=i(n,!0),r(e),o)try{return u(t,n,e)}catch(t){}if("get"in e||"set"in e)throw TypeError("Accessors not supported!");return"value"in e&&(t[n]=e.value),t}},function(t,n,e){var r=e(92);t.exports=function(t){if(!r(t))throw TypeError(t+" is not an object!");return t}},function(t,n,e){t.exports=!e(93)&&!e(126)(function(){return 7!=Object.defineProperty(e(309)("div"),"a",{get:function(){return 7}}).a})},function(t,n,e){var r=e(92),o=e(91).document,i=r(o)&&r(o.createElement);t.exports=function(t){return i?o.createElement(t):{}}},function(t,n,e){var r=e(92);t.exports=function(t,n){if(!r(t))return t;var e,o;if(n&&"function"==typeof(e=t.toString)&&!r(o=e.call(t)))return o;if("function"==typeof(e=t.valueOf)&&!r(o=e.call(t)))return o;if(!n&&"function"==typeof(e=t.toString)&&!r(o=e.call(t)))return o;throw TypeError("Can't convert object to primitive value")}},function(t,n){t.exports=function(t,n){return{enumerable:!(1&t),configurable:!(2&t),writable:!(4&t),value:n}}},function(t,n){var e={}.hasOwnProperty;t.exports=function(t,n){return e.call(t,n)}},function(t,n,e){"use strict";e.r(n),e.d(n,"setupContextualMenu",function(){return c});var r=e(1),o=e(2),i=e(65);e(3);function u(t,n){return function(t){if(Array.isArray(t))return t}(t)||function(t,n){var e=[],r=!0,o=!1,i=void 0;try{for(var u,c=t[Symbol.iterator]();!(r=(u=c.next()).done)&&(e.push(u.value),!n||e.length!==n);r=!0);}catch(t){o=!0,i=t}finally{try{r||null==c.return||c.return()}finally{if(o)throw i}}return e}(t,n)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}()}var c=function(){chrome.contextMenus.removeAll(function(){chrome.contextMenus.create({id:"reveddit-subscribe",title:"reveddit subscribe",contexts:["link"],targetUrlPatterns:["https://*.reddit.com/r/*/comments/*","https://www.reveddit.com/r/*/comments/*","https://*.reddit.com/user/*","https://www.reveddit.com/user/*"]})}),chrome.contextMenus.onClicked.addListener(function(t,n){if("reveddit-subscribe"==t.menuItemId){var e=t.linkUrl,c=u(Object(o.getFullIDsFromURL)(e),3),a=c[0],s=c[1],f=c[2];s?(Object(r.subscribeId)(s),Object(i.b)(s,e)):a?(Object(r.subscribeId)(a),Object(i.b)(a,e)):f?Object(r.subscribeUser)(f):alert("Unable to subscribe to this ".concat("link",", it is not a comment, post or user.\n\n").concat(e))}})}},,,function(t,n,e){e(127),t.exports=e(317)},function(t,n,e){"use strict";e.r(n);var r=e(2),o=e(65),i=e(31),u=e(1),c=e(313),a=e(3),s=e.n(a);function f(t,n,e,r,o,i,u){try{var c=t[i](u),a=c.value}catch(t){return void e(t)}c.done?n(a):Promise.resolve(a).then(r,o)}Object(c.setupContextualMenu)(),chrome.runtime.onMessage.addListener(function(t,n,e){return"open-options"==t.action?(Object(r.goToOptions)(),e({response:"done"}),!0):"update-badge"==t.action?(Object(r.updateBadgeUnseenCount)(),e({response:"done"}),!0):"create-notification"==t.action?(Object(r.createNotification)(t.options),!0):"get-cookie"===t.action?(Object(i.getCookie)(t.options).then(function(t){e({response:"done",cookie:t})}),!0):"get-reddit-items-by-id"==t.action?(Object(i.getAuth)().then(function(n){return Object(i.lookupItemsByID)(t.ids,n,t.monitor_quarantined)}).then(function(t){e({response:"done",items:t})}),!0):void 0}),chrome.runtime.onInstalled.addListener(function(t){if("install"==t.reason){Object(u.initStorage)(function(){Object(r.setAlarm)(u.INTERVAL_DEFAULT),Object(i.getLoggedinUser)().then(function(t){t?Object(u.subscribeUser)(t,function(){chrome.tabs.create({url:"https://www.reveddit.com/user/".concat(t,"?all=true")})}):s.a.tabs.create({url:"https://www.reveddit.com/user/"}).then(function(t){setTimeout(function(){s.a.tabs.sendMessage(t.id,{action:"query-user"})},2e3)})}),Object(r.updateBadgeUnseenCount)()});chrome.runtime.setUninstallURL&&chrome.runtime.setUninstallURL("https://docs.google.com/forms/d/e/1FAIpQLSejWHJAf8thfMdTnnEc5xZPlsdxA_dGUkbmnDq8PABVMkvARg/viewform")}else"update"==t.reason&&Object(r.updateBadgeUnseenCount)()});var l=function(t){var n="other"!==t;chrome.storage.sync.get(null,function(e){var o=Object(u.getUnseenIDs_thing)(t,n,e),i=null;n&&e.user_subscriptions[t]?(i="https://www.reveddit.com/user/".concat(t),o.length&&(i+="?show=".concat(o.join(","),"&removal_status=all"))):n||(i="/src/other.html",o.length&&(i="https://www.reveddit.com/info?id=".concat(o.join(","),"&removal_status=all"))),i&&(Object(u.markThingAsSeen)(e,t,n),s.a.storage.sync.set(e).then(function(t){Object(r.updateBadgeUnseenCount)(),Object(r.createTab)(i)}))})};chrome.notifications.onClicked.addListener(function(t){l(t),chrome.notifications.clear(t)}),self.addEventListener("notificationclick",function(t){l(t.notification.data),t.notification.close()});var h,g,p=0;chrome.extension.inIncognitoContext||((h=regeneratorRuntime.mark(function t(){var n,e,o;return regeneratorRuntime.wrap(function(t){for(;;)switch(t.prev=t.next){case 0:n=0;case 1:return t.next=4,new Promise(function(t){return setTimeout(t,65e3)});case 4:if(e=Date.now(),o=e-p,console.log("lostEventsWatchdog: last alarm ".concat(o/1e3,"s ago")),!(o<95e3)){t.next=11;break}n=0,t.next=17;break;case 11:if(!(++n>=3)){t.next=16;break}return console.error("lostEventsWatchdog: reloading!"),t.abrupt("return",chrome.runtime.reload());case 16:Object(r.setAlarm)(u.INTERVAL_DEFAULT);case 17:t.next=1;break;case 19:case"end":return t.stop()}},t)}),g=function(){var t=this,n=arguments;return new Promise(function(e,r){var o=h.apply(t,n);function i(t){f(o,e,r,i,u,"next",t)}function u(t){f(o,e,r,i,u,"throw",t)}i(void 0)})},function(){return g.apply(this,arguments)})(),chrome.alarms.onAlarm.addListener(function(t){t.name==r.ALARM_NAME&&(p=Date.now(),Object(o.a)())}))}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fZXhwb3J0LmpzIiwid2VicGFjazovLy8uL3NyYy9zcmMvc3RvcmFnZS5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvc3JjL2NvbW1vbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvd2ViZXh0ZW5zaW9uLXBvbHlmaWxsL2Rpc3QvYnJvd3Nlci1wb2x5ZmlsbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19nbG9iYWwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fZmFpbHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fYW4tb2JqZWN0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2lzLW9iamVjdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL193a3MuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fdG8tbGVuZ3RoLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2NvcmUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fZGVzY3JpcHRvcnMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fb2JqZWN0LWRwLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3RvLW9iamVjdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19yZWRlZmluZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19zdHJpbmctaHRtbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19oYXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faGlkZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL190by1pb2JqZWN0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3N0cmljdC1tZXRob2QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fY3R4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2EtZnVuY3Rpb24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fdG8taW50ZWdlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19vYmplY3QtZ29wZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19vYmplY3Qtc2FwLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2FycmF5LW1ldGhvZHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fY29mLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2RlZmluZWQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fdHlwZWQtYXJyYXkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fdG8tcHJpbWl0aXZlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX21ldGEuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3NyYy9yZXF1ZXN0cy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19wcm9wZXJ0eS1kZXNjLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3VpZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19saWJyYXJ5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX29iamVjdC1rZXlzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3RvLWFic29sdXRlLWluZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX29iamVjdC1jcmVhdGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fb2JqZWN0LWdvcG4uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fb2JqZWN0LWdwby5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19hZGQtdG8tdW5zY29wYWJsZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fdmFsaWRhdGUtY29sbGVjdGlvbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19zZXQtdG8tc3RyaW5nLXRhZy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19zdHJpbmctdHJpbS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19pdGVyYXRvcnMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fc2V0LXNwZWNpZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fYW4taW5zdGFuY2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fcmVkZWZpbmUtYWxsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2lvYmplY3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fb2JqZWN0LXBpZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19jbGFzc29mLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3NwZWNpZXMtY29uc3RydWN0b3IuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fc2hhcmVkLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2FycmF5LWluY2x1ZGVzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX29iamVjdC1nb3BzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2lzLWFycmF5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2l0ZXItZGV0ZWN0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2ZsYWdzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3JlZ2V4cC1leGVjLWFic3RyYWN0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2ZpeC1yZS13a3MuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fZm9yLW9mLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3VzZXItYWdlbnQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fY29sbGVjdGlvbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL190eXBlZC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvc3JjL21vbml0b3JpbmcuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fZG9tLWNyZWF0ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL193a3MtZXh0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3NoYXJlZC1rZXkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fZW51bS1idWcta2V5cy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19odG1sLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3NldC1wcm90by5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19zdHJpbmctd3MuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faW5oZXJpdC1pZi1yZXF1aXJlZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19zdHJpbmctcmVwZWF0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX21hdGgtc2lnbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19tYXRoLWV4cG0xLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3N0cmluZy1hdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19pdGVyLWRlZmluZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19zdHJpbmctY29udGV4dC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19pcy1yZWdleHAuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fZmFpbHMtaXMtcmVnZXhwLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2lzLWFycmF5LWl0ZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fY3JlYXRlLXByb3BlcnR5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvY29yZS5nZXQtaXRlcmF0b3ItbWV0aG9kLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2FycmF5LWZpbGwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkuaXRlcmF0b3IuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fcmVnZXhwLWV4ZWMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fYWR2YW5jZS1zdHJpbmctaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fdGFzay5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL190eXBlZC1idWZmZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19nbG9iYWwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19pcy1vYmplY3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19kZXNjcmlwdG9ycy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19pZTgtZG9tLWRlZmluZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL193a3MtZGVmaW5lLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX29iamVjdC1rZXlzLWludGVybmFsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX29iamVjdC1kcHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fb2JqZWN0LWdvcG4tZXh0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX29iamVjdC1hc3NpZ24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fc2FtZS12YWx1ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19iaW5kLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2ludm9rZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19wYXJzZS1pbnQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fcGFyc2UtZmxvYXQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fYS1udW1iZXItdmFsdWUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faXMtaW50ZWdlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19tYXRoLWxvZzFwLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2l0ZXItY3JlYXRlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2l0ZXItY2FsbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19hcnJheS1zcGVjaWVzLWNyZWF0ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19hcnJheS1yZWR1Y2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fYXJyYXktY29weS13aXRoaW4uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faXRlci1zdGVwLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnJlZ2V4cC5leGVjLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnJlZ2V4cC5mbGFncy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5wcm9taXNlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX25ldy1wcm9taXNlLWNhcGFiaWxpdHkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fcHJvbWlzZS1yZXNvbHZlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2NvbGxlY3Rpb24tc3Ryb25nLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2NvbGxlY3Rpb24td2Vhay5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL190by1pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19vd24ta2V5cy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19zdHJpbmctcGFkLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX29iamVjdC10by1hcnJheS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2NvcmUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19mYWlscy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGJhYmVsL3BvbHlmaWxsL2xpYi9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGJhYmVsL3BvbHlmaWxsL2xpYi9ub0NvbmZsaWN0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2VzNi9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5zeW1ib2wuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fZnVuY3Rpb24tdG8tc3RyaW5nLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2VudW0ta2V5cy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5vYmplY3QuY3JlYXRlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm9iamVjdC5kZWZpbmUtcHJvcGVydHkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYub2JqZWN0LmRlZmluZS1wcm9wZXJ0aWVzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm9iamVjdC5nZXQtb3duLXByb3BlcnR5LWRlc2NyaXB0b3IuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYub2JqZWN0LmdldC1wcm90b3R5cGUtb2YuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYub2JqZWN0LmtleXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYub2JqZWN0LmdldC1vd24tcHJvcGVydHktbmFtZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYub2JqZWN0LmZyZWV6ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5vYmplY3Quc2VhbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5vYmplY3QucHJldmVudC1leHRlbnNpb25zLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm9iamVjdC5pcy1mcm96ZW4uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYub2JqZWN0LmlzLXNlYWxlZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5vYmplY3QuaXMtZXh0ZW5zaWJsZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5vYmplY3QuYXNzaWduLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm9iamVjdC5pcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5vYmplY3Quc2V0LXByb3RvdHlwZS1vZi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5vYmplY3QudG8tc3RyaW5nLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmZ1bmN0aW9uLmJpbmQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuZnVuY3Rpb24ubmFtZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5mdW5jdGlvbi5oYXMtaW5zdGFuY2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucGFyc2UtaW50LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnBhcnNlLWZsb2F0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm51bWJlci5jb25zdHJ1Y3Rvci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5udW1iZXIudG8tZml4ZWQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubnVtYmVyLnRvLXByZWNpc2lvbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5udW1iZXIuZXBzaWxvbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5udW1iZXIuaXMtZmluaXRlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm51bWJlci5pcy1pbnRlZ2VyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm51bWJlci5pcy1uYW4uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubnVtYmVyLmlzLXNhZmUtaW50ZWdlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5udW1iZXIubWF4LXNhZmUtaW50ZWdlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5udW1iZXIubWluLXNhZmUtaW50ZWdlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5udW1iZXIucGFyc2UtZmxvYXQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubnVtYmVyLnBhcnNlLWludC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5tYXRoLmFjb3NoLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm1hdGguYXNpbmguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubWF0aC5hdGFuaC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5tYXRoLmNicnQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubWF0aC5jbHozMi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5tYXRoLmNvc2guanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubWF0aC5leHBtMS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5tYXRoLmZyb3VuZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19tYXRoLWZyb3VuZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5tYXRoLmh5cG90LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm1hdGguaW11bC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5tYXRoLmxvZzEwLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm1hdGgubG9nMXAuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubWF0aC5sb2cyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm1hdGguc2lnbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5tYXRoLnNpbmguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubWF0aC50YW5oLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm1hdGgudHJ1bmMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLmZyb20tY29kZS1wb2ludC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5zdHJpbmcucmF3LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy50cmltLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5pdGVyYXRvci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5zdHJpbmcuY29kZS1wb2ludC1hdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5zdHJpbmcuZW5kcy13aXRoLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5pbmNsdWRlcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5zdHJpbmcucmVwZWF0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5zdGFydHMtd2l0aC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5zdHJpbmcuYW5jaG9yLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5iaWcuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLmJsaW5rLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5ib2xkLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5maXhlZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5zdHJpbmcuZm9udGNvbG9yLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5mb250c2l6ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5zdHJpbmcuaXRhbGljcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5zdHJpbmcubGluay5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5zdHJpbmcuc21hbGwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLnN0cmlrZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5zdHJpbmcuc3ViLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5zdXAuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuZGF0ZS5ub3cuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuZGF0ZS50by1qc29uLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmRhdGUudG8taXNvLXN0cmluZy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19kYXRlLXRvLWlzby1zdHJpbmcuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuZGF0ZS50by1zdHJpbmcuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuZGF0ZS50by1wcmltaXRpdmUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fZGF0ZS10by1wcmltaXRpdmUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkuaXMtYXJyYXkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkuZnJvbS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5hcnJheS5vZi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5hcnJheS5qb2luLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmFycmF5LnNsaWNlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmFycmF5LnNvcnQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkuZm9yLWVhY2guanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fYXJyYXktc3BlY2llcy1jb25zdHJ1Y3Rvci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5hcnJheS5tYXAuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkuZmlsdGVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmFycmF5LnNvbWUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkuZXZlcnkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkucmVkdWNlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmFycmF5LnJlZHVjZS1yaWdodC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5hcnJheS5pbmRleC1vZi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5hcnJheS5sYXN0LWluZGV4LW9mLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmFycmF5LmNvcHktd2l0aGluLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmFycmF5LmZpbGwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkuZmluZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5hcnJheS5maW5kLWluZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmFycmF5LnNwZWNpZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVnZXhwLmNvbnN0cnVjdG9yLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnJlZ2V4cC50by1zdHJpbmcuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVnZXhwLm1hdGNoLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnJlZ2V4cC5yZXBsYWNlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnJlZ2V4cC5zZWFyY2guanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVnZXhwLnNwbGl0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX21pY3JvdGFzay5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19wZXJmb3JtLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm1hcC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5zZXQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYud2Vhay1tYXAuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYud2Vhay1zZXQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYudHlwZWQuYXJyYXktYnVmZmVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnR5cGVkLmRhdGEtdmlldy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi50eXBlZC5pbnQ4LWFycmF5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnR5cGVkLnVpbnQ4LWFycmF5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnR5cGVkLnVpbnQ4LWNsYW1wZWQtYXJyYXkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYudHlwZWQuaW50MTYtYXJyYXkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYudHlwZWQudWludDE2LWFycmF5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnR5cGVkLmludDMyLWFycmF5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnR5cGVkLnVpbnQzMi1hcnJheS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi50eXBlZC5mbG9hdDMyLWFycmF5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnR5cGVkLmZsb2F0NjQtYXJyYXkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVmbGVjdC5hcHBseS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5yZWZsZWN0LmNvbnN0cnVjdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5yZWZsZWN0LmRlZmluZS1wcm9wZXJ0eS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5yZWZsZWN0LmRlbGV0ZS1wcm9wZXJ0eS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5yZWZsZWN0LmVudW1lcmF0ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5yZWZsZWN0LmdldC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5yZWZsZWN0LmdldC1vd24tcHJvcGVydHktZGVzY3JpcHRvci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5yZWZsZWN0LmdldC1wcm90b3R5cGUtb2YuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVmbGVjdC5oYXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVmbGVjdC5pcy1leHRlbnNpYmxlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnJlZmxlY3Qub3duLWtleXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVmbGVjdC5wcmV2ZW50LWV4dGVuc2lvbnMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVmbGVjdC5zZXQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVmbGVjdC5zZXQtcHJvdG90eXBlLW9mLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ZuL2FycmF5L2luY2x1ZGVzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3LmFycmF5LmluY2x1ZGVzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ZuL2FycmF5L2ZsYXQtbWFwLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3LmFycmF5LmZsYXQtbWFwLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2ZsYXR0ZW4taW50by1hcnJheS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9mbi9zdHJpbmcvcGFkLXN0YXJ0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3LnN0cmluZy5wYWQtc3RhcnQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvZm4vc3RyaW5nL3BhZC1lbmQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcuc3RyaW5nLnBhZC1lbmQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvZm4vc3RyaW5nL3RyaW0tc3RhcnQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcuc3RyaW5nLnRyaW0tbGVmdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9mbi9zdHJpbmcvdHJpbS1lbmQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcuc3RyaW5nLnRyaW0tcmlnaHQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvZm4vc3ltYm9sL2FzeW5jLWl0ZXJhdG9yLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3LnN5bWJvbC5hc3luYy1pdGVyYXRvci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9mbi9vYmplY3QvZ2V0LW93bi1wcm9wZXJ0eS1kZXNjcmlwdG9ycy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5vYmplY3QuZ2V0LW93bi1wcm9wZXJ0eS1kZXNjcmlwdG9ycy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9mbi9vYmplY3QvdmFsdWVzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3Lm9iamVjdC52YWx1ZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvZm4vb2JqZWN0L2VudHJpZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcub2JqZWN0LmVudHJpZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvZm4vcHJvbWlzZS9maW5hbGx5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3LnByb21pc2UuZmluYWxseS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy93ZWIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy93ZWIudGltZXJzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvd2ViLmltbWVkaWF0ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL3dlYi5kb20uaXRlcmFibGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlZ2VuZXJhdG9yLXJ1bnRpbWUvcnVudGltZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L2ZuL2dsb2JhbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvZXM3Lmdsb2JhbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2V4cG9ydC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2N0eC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2EtZnVuY3Rpb24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19oaWRlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fb2JqZWN0LWRwLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fYW4tb2JqZWN0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9faWU4LWRvbS1kZWZpbmUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19kb20tY3JlYXRlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fdG8tcHJpbWl0aXZlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fcHJvcGVydHktZGVzYy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2hhcy5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvc3JjL2NvbnRleHRNZW51cy5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvYmFja2dyb3VuZC5qcyJdLCJuYW1lcyI6WyJpbnN0YWxsZWRNb2R1bGVzIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsIm1vZHVsZUlkIiwiZXhwb3J0cyIsIm1vZHVsZSIsImkiLCJsIiwibW9kdWxlcyIsImNhbGwiLCJtIiwiYyIsImQiLCJuYW1lIiwiZ2V0dGVyIiwibyIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZW51bWVyYWJsZSIsImdldCIsInIiLCJTeW1ib2wiLCJ0b1N0cmluZ1RhZyIsInZhbHVlIiwidCIsIm1vZGUiLCJfX2VzTW9kdWxlIiwibnMiLCJjcmVhdGUiLCJrZXkiLCJiaW5kIiwibiIsIm9iamVjdCIsInByb3BlcnR5IiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJwIiwicyIsImdsb2JhbCIsImNvcmUiLCJoaWRlIiwicmVkZWZpbmUiLCJjdHgiLCIkZXhwb3J0IiwidHlwZSIsInNvdXJjZSIsIm93biIsIm91dCIsImV4cCIsIklTX0ZPUkNFRCIsIkYiLCJJU19HTE9CQUwiLCJHIiwiSVNfU1RBVElDIiwiUyIsIklTX1BST1RPIiwiUCIsIklTX0JJTkQiLCJCIiwidGFyZ2V0IiwiZXhwUHJvdG8iLCJ1bmRlZmluZWQiLCJGdW5jdGlvbiIsIlUiLCJXIiwiUiIsIklOVEVSVkFMX0RFRkFVTFQiLCJTRUVOX0NPVU5UX0RFRkFVTFQiLCJNQVhfU1lOQ19TVE9SQUdFX0lURU1TX1BFUl9PQkpFQ1QiLCJNQVhfU1lOQ19TVE9SQUdFX0NIQU5HRVMiLCJNQVhfT1RIRVJfU1VCU0NSSVBUSU9OUyIsIlJFTU9WRUQiLCJBUFBST1ZFRCIsIkxPQ0tFRCIsIlVOTE9DS0VEIiwiRURJVEVEIiwiREVMRVRFRCIsInRyYWNrVHlwZXMiLCJjaGFuZ2VzIiwicmVtb3ZlZCIsImFwcHJvdmVkIiwibG9ja2VkIiwidW5sb2NrZWQiLCJnZXRPYmplY3ROYW1lIiwidGhpbmciLCJpc1VzZXIiLCJhZGRUcmFja1R5cGVzIiwiYXJndW1lbnRzIiwibGVuZ3RoIiwia2V5cyIsImZvckVhY2giLCJnZXRPYmplY3ROYW1lc0ZvclRoaW5nIiwibmFtZXMiLCJnZXRVc2VySW5pdCIsInVzZXIiLCJyZXN1bHQiLCJtYXJrRXZlcnl0aGluZ0FzU2VlbiIsImJyb3dzZXIiLCJzdG9yYWdlIiwic3luYyIsInRoZW4iLCJ1c2VyX3N1YnNjcmlwdGlvbnMiLCJtYXJrVGhpbmdBc1NlZW4iLCJzZXRTdG9yYWdlVXBkYXRlQmFkZ2UiLCJmdWxsS2V5bmFtZXMiLCJ2YWx1ZXMiLCJmdWxsS2V5bmFtZSIsInB1c2giLCJpdGVtIiwidSIsInNldCIsInJlcyIsInJ1bnRpbWUiLCJzZW5kTWVzc2FnZSIsImFjdGlvbiIsIm1hcmtTZWVuRm9yU3RvcmFnZUtleSIsInN0b3JhZ2Vfa2V5cyIsImlkcyIsImlzX3VzZXIiLCJzdG9yYWdlX2l0ZW0iLCJpZCIsIkl0ZW1Gb3JTdG9yYWdlIiwibWFya0lEc0FzU2VlbklmU3Vic2NyaWJlZCIsInJlbW92ZWRfaWRzIiwiYXBwcm92ZWRfaWRzIiwibG9ja2VkX2lkcyIsInVubG9ja2VkX2lkcyIsImNhbGxiYWNrIiwidXNlcl9zdWJzY3JpYmVkIiwiY2hyb21lIiwic3Vic2NyaWJlSWQiLCJNYXRoIiwiZmxvb3IiLCJEYXRlIiwiZ2V0VGltZSIsIml0ZW1zVG9TYXZlIiwidHJpbURpY3RfYnlfbnVtYmVyVmFsdWVkQXR0cmlidXRlIiwiX2RlZmluZVByb3BlcnR5IiwidW5zdWJzY3JpYmVJZCIsIm1haW5LZXkiLCJvdGhlcktleXMiLCJjb25jYXQiLCJnZXRTdWJzY3JpYmVkSWRzIiwic3Vic2NyaWJlVXNlciIsImNhbGxiYWNrU3VjY2VzcyIsImNhbGxiYWNrRXJyb3IiLCJ1c2VySW5pdCIsIl9vYmplY3RTcHJlYWQiLCJ1bnN1YnNjcmliZVVzZXIiLCJ1c2VyS2V5cyIsInJlbW92ZSIsInVzZXJLZXlfbG9jYWxTdG9yYWdlIiwibG9jYWwiLCJpbml0U3RvcmFnZSIsIm90aGVyX3N1YnNjcmlwdGlvbnMiLCJvcHRpb25zIiwiaW50ZXJ2YWwiLCJzZWVuX2NvdW50IiwiY3VzdG9tX2NsaWVudGlkIiwicmVtb3ZhbF9zdGF0dXMiLCJ0cmFjayIsIm5vdGlmeSIsImxvY2tfc3RhdHVzIiwibW9uaXRvcl9xdWFyYW50aW5lZCIsImxhc3RfY2hlY2siLCJsYXN0X2NoZWNrX3F1YXJhbnRpbmVkIiwiZ2V0U3Vic2NyaWJlZFVzZXJzX3dpdGhTZWVuQW5kVW5zZWVuSURzIiwidXNlcnMiLCJ1c2Vyc193aXRoSURzIiwiZ2V0SURzX3RoaW5nIiwiZ2V0U3Vic2NyaWJlZFVzZXJzX3dpdGhVbnNlZW5JRHMiLCJnZXRVbnNlZW5JRHNfdGhpbmciLCJ0cmFja19yZW1vdmFsIiwidHJhY2tfbG9jayIsInVuc2VlbklEcyIsInNlZW5JRHMiLCJ0eXBlcyIsInVuc2VlbiIsInNlZW4iLCJnZXRMb2NhbFN0b3JhZ2VJdGVtcyIsImtleV9sb2NhbFN0b3JhZ2UiLCJsb2NhbFN0b3JhZ2VJdGVtcyIsInNhdmVMb2NhbFN0b3JhZ2VJdGVtcyIsImFkZExvY2FsU3RvcmFnZUl0ZW1zIiwiaXRlbXMiLCJzdG9yZWRJdGVtcyIsImdldEl0ZW1Gcm9tTG9jYWxTdG9yYWdlIiwibG9jYWxTdG9yYWdlIiwiTG9jYWxTdG9yYWdlSXRlbSIsImdldEFsbENoYW5nZXMiLCJrZXlUb1VzZXJfbG9va3VwIiwiY2hhbmdlc19vdGhlciIsInJlczIiLCJjaGFuZ2VzQnlVc2VyIiwiZ2V0T3B0aW9ucyIsIm90aGVycyIsImNvbnNvbGUiLCJsb2ciLCJzYXZlT3B0aW9ucyIsInJlbW92ZWRfdHJhY2siLCJyZW1vdmVkX25vdGlmeSIsImxvY2tlZF90cmFjayIsImxvY2tlZF9ub3RpZnkiLCJoaWRlX3N1YnNjcmliZSIsIkFMQVJNX05BTUUiLCJjcmVhdGVUYWIiLCJ1cmwiLCJ0YWJzIiwidGFiIiwid2luZG93cyIsInVwZGF0ZSIsIndpbmRvd0lkIiwiZm9jdXNlZCIsIndpbiIsImdldEZ1bGxJRHNGcm9tVVJMIiwicGF0aCIsInJlcGxhY2UiLCJnZXRGdWxsSURzRnJvbVBhdGgiLCJyZWdleF9wYyIsInJlZ2V4X3VzZXIiLCJwb3N0SUQiLCJjb21tZW50SUQiLCJzdWJyZWRkaXQiLCJtYXRjaGVzX3BjIiwibWF0Y2giLCJtYXRjaGVzX3VzZXIiLCJyZWZvcm1hdFJlZGRpdFRleHQiLCJib2R5Iiwic3Vic3RyIiwiaXNSZW1vdmVkSXRlbSIsInJlbW92YWxfcmVhc29uIiwiaXNDb21tZW50IiwiaXNSZW1vdmVkQ29tbWVudCIsImlzUmVtb3ZlZFBvc3QiLCJhdXRob3IiLCJpc1VzZXJEZWxldGVkQ29tbWVudCIsImlzVXNlckRlbGV0ZWRQb3N0IiwiaXNfcm9ib3RfaW5kZXhhYmxlIiwiaXNVc2VyRGVsZXRlZEl0ZW0iLCJkaWN0IiwibWF4TnVtSXRlbXMiLCJudW1iZXJWYWx1ZWRBdHRyaWJ1dGUiLCJzaG9ydGVuZWRBcnJheSIsInNvcnREaWN0X2J5X251bWJlclZhbHVlZEF0dHJpYnV0ZSIsInNsaWNlIiwibmV3RGljdCIsImFycmF5IiwibWFwIiwic29ydCIsImEiLCJiIiwiY3JlYXRlZF91dGMiLCJfY2xhc3NDYWxsQ2hlY2siLCJ0aGlzIiwiX2NyZWF0ZUNsYXNzIiwiQ2hhbmdlRm9yU3RvcmFnZSIsIl9yZWYiLCJfcmVmJGlkIiwiX3JlZiRvYnNlcnZlZF91dGMiLCJvYnNlcnZlZF91dGMiLCJfcmVmJGNoYW5nZV90eXBlIiwiY2hhbmdlX3R5cGUiLCJfcmVmJHNlZW5fY291bnQiLCJfcmVmJG9iamVjdCIsImciLCJfcmVmMiIsIl9yZWYyJGl0ZW0iLCJfcmVmMiRvYnNlcnZlZF91dGMiLCJfcmVmMiRvYmplY3QiLCJ0ZXh0IiwidGl0bGUiLCJzZXRBbGFybSIsInBlcmlvZEluTWludXRlcyIsImFsYXJtcyIsImNsZWFyIiwiZGVsYXlJbk1pbnV0ZXMiLCJhbHBoYUxvd2VyU29ydCIsInRleHRBIiwidG9Mb3dlckNhc2UiLCJ0ZXh0QiIsImdvVG9PcHRpb25zIiwib3Blbk9wdGlvbnNQYWdlIiwid2luZG93IiwiY2xvc2UiLCJvcGVuIiwiZ2V0VVJMIiwic2hvd0Vycm9yIiwibWVzc2FnZSIsInNlbGVjdG9yIiwiJCIsImFwcGVuZFRvIiwiZGVsYXkiLCJmYWRlVG8iLCJwcHJpbnQiLCJvYmoiLCJKU09OIiwic3RyaW5naWZ5IiwiZ2V0UHJldHR5VGltZUxlbmd0aCIsInNlY29uZHMiLCJ0aHJlc2hvbGRzIiwidGltZSIsImRpdmlzb3IiLCJ0ZXh0UGx1cmFsIiwiZXh0cmEiLCJwcmV2VW5pdFRpbWUiLCJyb3VuZCIsInJlbWFpblRleHQiLCJTdHJpbmciLCJnZXRQcmV0dHlEYXRlIiwiY3JlYXRlZFVUQyIsImNyZWF0ZU5vdGlmaWNhdGlvbiIsIl9yZWYzIiwibm90aWZpY2F0aW9uSWQiLCJsb2NhdGlvbiIsInByb3RvY29sIiwicmVnaXN0cmF0aW9uIiwic2hvd05vdGlmaWNhdGlvbiIsImRhdGEiLCJpY29uIiwidXBkYXRlQmFkZ2VVbnNlZW5Db3VudCIsInVzZXJzVW5zZWVuSURzIiwidG90YWwiLCJ0b1N0cmluZyIsInNldEJhZGdlQmFja2dyb3VuZENvbG9yIiwiY29sb3IiLCJzZXRCYWRnZVRleHQiLCJfX1dFQlBBQ0tfQU1EX0RFRklORV9GQUNUT1JZX18iLCJfX1dFQlBBQ0tfQU1EX0RFRklORV9BUlJBWV9fIiwiX19XRUJQQUNLX0FNRF9ERUZJTkVfUkVTVUxUX18iLCJnZXRQcm90b3R5cGVPZiIsIkNIUk9NRV9TRU5EX01FU1NBR0VfQ0FMTEJBQ0tfTk9fUkVTUE9OU0VfTUVTU0FHRSIsIlNFTkRfUkVTUE9OU0VfREVQUkVDQVRJT05fV0FSTklORyIsIndyYXBBUElzIiwiZXh0ZW5zaW9uQVBJcyIsImFwaU1ldGFkYXRhIiwibWluQXJncyIsIm1heEFyZ3MiLCJjbGVhckFsbCIsImdldEFsbCIsImJvb2ttYXJrcyIsImdldENoaWxkcmVuIiwiZ2V0UmVjZW50IiwiZ2V0U3ViVHJlZSIsImdldFRyZWUiLCJtb3ZlIiwicmVtb3ZlVHJlZSIsInNlYXJjaCIsImJyb3dzZXJBY3Rpb24iLCJkaXNhYmxlIiwiZmFsbGJhY2tUb05vQ2FsbGJhY2siLCJlbmFibGUiLCJnZXRCYWRnZUJhY2tncm91bmRDb2xvciIsImdldEJhZGdlVGV4dCIsImdldFBvcHVwIiwiZ2V0VGl0bGUiLCJvcGVuUG9wdXAiLCJzZXRJY29uIiwic2V0UG9wdXAiLCJzZXRUaXRsZSIsImJyb3dzaW5nRGF0YSIsInJlbW92ZUNhY2hlIiwicmVtb3ZlQ29va2llcyIsInJlbW92ZURvd25sb2FkcyIsInJlbW92ZUZvcm1EYXRhIiwicmVtb3ZlSGlzdG9yeSIsInJlbW92ZUxvY2FsU3RvcmFnZSIsInJlbW92ZVBhc3N3b3JkcyIsInJlbW92ZVBsdWdpbkRhdGEiLCJzZXR0aW5ncyIsImNvbW1hbmRzIiwiY29udGV4dE1lbnVzIiwicmVtb3ZlQWxsIiwiY29va2llcyIsImdldEFsbENvb2tpZVN0b3JlcyIsImRldnRvb2xzIiwiaW5zcGVjdGVkV2luZG93IiwiZXZhbCIsInNpbmdsZUNhbGxiYWNrQXJnIiwicGFuZWxzIiwiZG93bmxvYWRzIiwiY2FuY2VsIiwiZG93bmxvYWQiLCJlcmFzZSIsImdldEZpbGVJY29uIiwicGF1c2UiLCJyZW1vdmVGaWxlIiwicmVzdW1lIiwic2hvdyIsImV4dGVuc2lvbiIsImlzQWxsb3dlZEZpbGVTY2hlbWVBY2Nlc3MiLCJpc0FsbG93ZWRJbmNvZ25pdG9BY2Nlc3MiLCJoaXN0b3J5IiwiYWRkVXJsIiwiZGVsZXRlQWxsIiwiZGVsZXRlUmFuZ2UiLCJkZWxldGVVcmwiLCJnZXRWaXNpdHMiLCJpMThuIiwiZGV0ZWN0TGFuZ3VhZ2UiLCJnZXRBY2NlcHRMYW5ndWFnZXMiLCJpZGVudGl0eSIsImxhdW5jaFdlYkF1dGhGbG93IiwiaWRsZSIsInF1ZXJ5U3RhdGUiLCJtYW5hZ2VtZW50IiwiZ2V0U2VsZiIsInNldEVuYWJsZWQiLCJ1bmluc3RhbGxTZWxmIiwibm90aWZpY2F0aW9ucyIsImdldFBlcm1pc3Npb25MZXZlbCIsInBhZ2VBY3Rpb24iLCJwZXJtaXNzaW9ucyIsImNvbnRhaW5zIiwicmVxdWVzdCIsImdldEJhY2tncm91bmRQYWdlIiwiZ2V0UGxhdGZvcm1JbmZvIiwicmVxdWVzdFVwZGF0ZUNoZWNrIiwic2VuZE5hdGl2ZU1lc3NhZ2UiLCJzZXRVbmluc3RhbGxVUkwiLCJzZXNzaW9ucyIsImdldERldmljZXMiLCJnZXRSZWNlbnRseUNsb3NlZCIsInJlc3RvcmUiLCJnZXRCeXRlc0luVXNlIiwibWFuYWdlZCIsImNhcHR1cmVWaXNpYmxlVGFiIiwiZGlzY2FyZCIsImR1cGxpY2F0ZSIsImV4ZWN1dGVTY3JpcHQiLCJnZXRDdXJyZW50IiwiZ2V0Wm9vbSIsImdldFpvb21TZXR0aW5ncyIsImhpZ2hsaWdodCIsImluc2VydENTUyIsInF1ZXJ5IiwicmVsb2FkIiwicmVtb3ZlQ1NTIiwic2V0Wm9vbSIsInNldFpvb21TZXR0aW5ncyIsInRvcFNpdGVzIiwid2ViTmF2aWdhdGlvbiIsImdldEFsbEZyYW1lcyIsImdldEZyYW1lIiwid2ViUmVxdWVzdCIsImhhbmRsZXJCZWhhdmlvckNoYW5nZWQiLCJnZXRMYXN0Rm9jdXNlZCIsIkVycm9yIiwibWFrZUNhbGxiYWNrIiwicHJvbWlzZSIsIm1ldGFkYXRhIiwiY2FsbGJhY2tBcmdzIiwibGFzdEVycm9yIiwicmVqZWN0IiwicmVzb2x2ZSIsInBsdXJhbGl6ZUFyZ3VtZW50cyIsIm51bUFyZ3MiLCJ3cmFwTWV0aG9kIiwibWV0aG9kIiwid3JhcHBlciIsIlByb3h5IiwiYXBwbHkiLCJ0YXJnZXRNZXRob2QiLCJ0aGlzT2JqIiwiYXJncyIsIndyYXBPYmplY3QiLCJ3cmFwcGVycyIsImNhY2hlIiwiaGFuZGxlcnMiLCJoYXMiLCJwcm94eVRhcmdldCIsInByb3AiLCJbb2JqZWN0IE9iamVjdF0iLCJyZWNlaXZlciIsIlByb21pc2UiLCJjYkVycm9yIiwid2FybiIsIm5vQ2FsbGJhY2siLCJ3cmFwQXN5bmNGdW5jdGlvbiIsImNvbmZpZ3VyYWJsZSIsImRlc2MiLCJSZWZsZWN0IiwiZGVsZXRlUHJvcGVydHkiLCJ3cmFwRXZlbnQiLCJ3cmFwcGVyTWFwIiwibGlzdGVuZXIiLCJhZGRMaXN0ZW5lciIsImhhc0xpc3RlbmVyIiwicmVtb3ZlTGlzdGVuZXIiLCJsb2dnZWRTZW5kUmVzcG9uc2VEZXByZWNhdGlvbldhcm5pbmciLCJvbk1lc3NhZ2VXcmFwcGVycyIsIldlYWtNYXAiLCJjcmVhdGVJdGVtIiwic3VwZXIiLCJzZW5kZXIiLCJzZW5kUmVzcG9uc2UiLCJ3cmFwcGVkU2VuZFJlc3BvbnNlIiwiZGlkQ2FsbFNlbmRSZXNwb25zZSIsInNlbmRSZXNwb25zZVByb21pc2UiLCJyZXNwb25zZSIsInN0YWNrIiwiZXJyIiwiaXNSZXN1bHRUaGVuYWJsZSIsImlzVGhlbmFibGUiLCJzZW5kUHJvbWlzZWRSZXN1bHQiLCJtc2ciLCJlcnJvciIsIl9fbW96V2ViRXh0ZW5zaW9uUG9seWZpbGxSZWplY3RfXyIsImNhdGNoIiwid3JhcHBlZFNlbmRNZXNzYWdlIiwiYXBpTmFtZXNwYWNlT2JqIiwid3JhcHBlZENiIiwicmVwbHkiLCJzdGF0aWNXcmFwcGVycyIsIm9uTWVzc2FnZSIsIm9uTWVzc2FnZUV4dGVybmFsIiwic2V0dGluZ01ldGFkYXRhIiwicHJpdmFjeSIsIm5ldHdvcmsiLCJuZXR3b3JrUHJlZGljdGlvbkVuYWJsZWQiLCJ3ZWJSVENJUEhhbmRsaW5nUG9saWN5Iiwic2VydmljZXMiLCJwYXNzd29yZFNhdmluZ0VuYWJsZWQiLCJ3ZWJzaXRlcyIsImh5cGVybGlua0F1ZGl0aW5nRW5hYmxlZCIsInJlZmVycmVyc0VuYWJsZWQiLCJzZWxmIiwiX19nIiwiZXhlYyIsImUiLCJpc09iamVjdCIsIml0IiwiVHlwZUVycm9yIiwic3RvcmUiLCJ1aWQiLCJVU0VfU1lNQk9MIiwidG9JbnRlZ2VyIiwibWluIiwidmVyc2lvbiIsIl9fZSIsImFuT2JqZWN0IiwiSUU4X0RPTV9ERUZJTkUiLCJ0b1ByaW1pdGl2ZSIsImRQIiwiZiIsIk8iLCJBdHRyaWJ1dGVzIiwiZGVmaW5lZCIsIlNSQyIsIiR0b1N0cmluZyIsIlRQTCIsInNwbGl0IiwiaW5zcGVjdFNvdXJjZSIsInZhbCIsInNhZmUiLCJpc0Z1bmN0aW9uIiwiam9pbiIsImZhaWxzIiwicXVvdCIsImNyZWF0ZUhUTUwiLCJzdHJpbmciLCJ0YWciLCJhdHRyaWJ1dGUiLCJwMSIsIk5BTUUiLCJ0ZXN0IiwiY3JlYXRlRGVzYyIsIklPYmplY3QiLCJhcmciLCJhRnVuY3Rpb24iLCJmbiIsInRoYXQiLCJjZWlsIiwiaXNOYU4iLCJwSUUiLCJ0b0lPYmplY3QiLCJnT1BEIiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwiS0VZIiwidG9PYmplY3QiLCJ0b0xlbmd0aCIsImFzYyIsIlRZUEUiLCIkY3JlYXRlIiwiSVNfTUFQIiwiSVNfRklMVEVSIiwiSVNfU09NRSIsIklTX0VWRVJZIiwiSVNfRklORF9JTkRFWCIsIk5PX0hPTEVTIiwiJHRoaXMiLCJjYWxsYmFja2ZuIiwiaW5kZXgiLCJMSUJSQVJZIiwiJHR5cGVkIiwiJGJ1ZmZlciIsImFuSW5zdGFuY2UiLCJwcm9wZXJ0eURlc2MiLCJyZWRlZmluZUFsbCIsInRvSW5kZXgiLCJ0b0Fic29sdXRlSW5kZXgiLCJjbGFzc29mIiwiaXNBcnJheUl0ZXIiLCJnT1BOIiwiZ2V0SXRlckZuIiwid2tzIiwiY3JlYXRlQXJyYXlNZXRob2QiLCJjcmVhdGVBcnJheUluY2x1ZGVzIiwic3BlY2llc0NvbnN0cnVjdG9yIiwiQXJyYXlJdGVyYXRvcnMiLCJJdGVyYXRvcnMiLCIkaXRlckRldGVjdCIsInNldFNwZWNpZXMiLCJhcnJheUZpbGwiLCJhcnJheUNvcHlXaXRoaW4iLCIkRFAiLCIkR09QRCIsIlJhbmdlRXJyb3IiLCJVaW50OEFycmF5IiwiQXJyYXlQcm90byIsIkFycmF5IiwiJEFycmF5QnVmZmVyIiwiQXJyYXlCdWZmZXIiLCIkRGF0YVZpZXciLCJEYXRhVmlldyIsImFycmF5Rm9yRWFjaCIsImFycmF5RmlsdGVyIiwiYXJyYXlTb21lIiwiYXJyYXlFdmVyeSIsImFycmF5RmluZCIsImFycmF5RmluZEluZGV4IiwiYXJyYXlJbmNsdWRlcyIsImFycmF5SW5kZXhPZiIsImFycmF5VmFsdWVzIiwiYXJyYXlLZXlzIiwiYXJyYXlFbnRyaWVzIiwiZW50cmllcyIsImFycmF5TGFzdEluZGV4T2YiLCJsYXN0SW5kZXhPZiIsImFycmF5UmVkdWNlIiwicmVkdWNlIiwiYXJyYXlSZWR1Y2VSaWdodCIsInJlZHVjZVJpZ2h0IiwiYXJyYXlKb2luIiwiYXJyYXlTb3J0IiwiYXJyYXlTbGljZSIsImFycmF5VG9TdHJpbmciLCJhcnJheVRvTG9jYWxlU3RyaW5nIiwidG9Mb2NhbGVTdHJpbmciLCJJVEVSQVRPUiIsIlRBRyIsIlRZUEVEX0NPTlNUUlVDVE9SIiwiREVGX0NPTlNUUlVDVE9SIiwiQUxMX0NPTlNUUlVDVE9SUyIsIkNPTlNUUiIsIlRZUEVEX0FSUkFZIiwiVFlQRUQiLCJWSUVXIiwiJG1hcCIsImFsbG9jYXRlIiwiTElUVExFX0VORElBTiIsIlVpbnQxNkFycmF5IiwiYnVmZmVyIiwiRk9SQ0VEX1NFVCIsInRvT2Zmc2V0IiwiQllURVMiLCJvZmZzZXQiLCJ2YWxpZGF0ZSIsIkMiLCJzcGVjaWVzRnJvbUxpc3QiLCJsaXN0IiwiZnJvbUxpc3QiLCJhZGRHZXR0ZXIiLCJpbnRlcm5hbCIsIl9kIiwiJGZyb20iLCJzdGVwIiwiaXRlcmF0b3IiLCJhTGVuIiwibWFwZm4iLCJtYXBwaW5nIiwiaXRlckZuIiwibmV4dCIsImRvbmUiLCIkb2YiLCJUT19MT0NBTEVfQlVHIiwiJHRvTG9jYWxlU3RyaW5nIiwicHJvdG8iLCJjb3B5V2l0aGluIiwic3RhcnQiLCJldmVyeSIsImZpbGwiLCJmaWx0ZXIiLCJmaW5kIiwicHJlZGljYXRlIiwiZmluZEluZGV4IiwiaW5kZXhPZiIsInNlYXJjaEVsZW1lbnQiLCJpbmNsdWRlcyIsInNlcGFyYXRvciIsInJldmVyc2UiLCJtaWRkbGUiLCJzb21lIiwiY29tcGFyZWZuIiwic3ViYXJyYXkiLCJiZWdpbiIsImVuZCIsIiRiZWdpbiIsImJ5dGVPZmZzZXQiLCJCWVRFU19QRVJfRUxFTUVOVCIsIiRzbGljZSIsIiRzZXQiLCJhcnJheUxpa2UiLCJzcmMiLCJsZW4iLCIkaXRlcmF0b3JzIiwiaXNUQUluZGV4IiwiJGdldERlc2MiLCIkc2V0RGVzYyIsIndyaXRhYmxlIiwiJFR5cGVkQXJyYXlQcm90b3R5cGUkIiwiY29uc3RydWN0b3IiLCJDTEFNUEVEIiwiR0VUVEVSIiwiU0VUVEVSIiwiVHlwZWRBcnJheSIsIkJhc2UiLCJUQUMiLCJGT1JDRUQiLCJBQlYiLCJUeXBlZEFycmF5UHJvdG90eXBlIiwiYWRkRWxlbWVudCIsInYiLCJzZXR0ZXIiLCIkb2Zmc2V0IiwiJGxlbmd0aCIsImJ5dGVMZW5ndGgiLCJrbGFzcyIsIiRsZW4iLCJpdGVyIiwiJG5hdGl2ZUl0ZXJhdG9yIiwiQ09SUkVDVF9JVEVSX05BTUUiLCIkaXRlcmF0b3IiLCJvZiIsImZyb20iLCJ2YWx1ZU9mIiwiTUVUQSIsInNldERlc2MiLCJpc0V4dGVuc2libGUiLCJGUkVFWkUiLCJwcmV2ZW50RXh0ZW5zaW9ucyIsInNldE1ldGEiLCJ3IiwibWV0YSIsIk5FRUQiLCJmYXN0S2V5IiwiZ2V0V2VhayIsIm9uRnJlZXplIiwibG9va3VwSXRlbXNCeUlEIiwiYXV0aCIsIm1vbml0b3JfcXVhcmFudGluZWRfcmVtb3RlIiwicXVhcmFudGluZWRfc3VicmVkZGl0cyIsInBhcmFtcyIsInJhd19qc29uIiwiayIsImZldGNoX2ZvclJlZGRpdCIsIl90b0NvbnN1bWFibGVBcnJheSIsImdldEZldGNoUGFyYW1zIiwiY29va2llRGV0YWlsc19yZWRkaXRTZXNzaW9uIiwiYWNjZXB0YWJsZV9zZXRDb29raWVEZXRhaWxzIiwiZ2V0U2V0dGFibGVDb29raWUiLCJjb29raWUiLCJmaWx0ZXJlZCIsInJlZ2VuZXJhdG9yUnVudGltZSIsIm1hcmsiLCJfY2FsbGVlIiwiY29va2llX3JlZGRpdFNlc3Npb24iLCJfYXJncyIsIndyYXAiLCJfY29udGV4dCIsInByZXYiLCJkb21haW4iLCJ0MCIsInQxIiwic2VudCIsImhlYWRlcnMiLCJmZXRjaCIsImhhbmRsZUZldGNoRXJyb3JzIiwiZ2V0UmVkZGl0RGF0YSIsImFicnVwdCIsInN0b3AiLCJfeCIsIl94MiIsImxvb2t1cEl0ZW1zQnlVc2VyIiwiYWZ0ZXIiLCJ0aW1lU3BhbiIsImxpbWl0Iiwib2siLCJzdGF0dXNUZXh0IiwianNvbiIsImNoaWxkcmVuIiwiZ2V0UmVkZGl0VG9rZW4iLCJhY2Nlc3NfdG9rZW4iLCJnZXRBdXRoIiwidXNlX3RoaXNfY2xpZW50SUQiLCJ0b2tlbkluaXQiLCJBdXRob3JpemF0aW9uIiwiYnRvYSIsIkNvbnRlbnQtVHlwZSIsImVuY29kZVVSSUNvbXBvbmVudCIsInRva2VuIiwiQWNjZXB0LUxhbmd1YWdlIiwiZ2V0TG9jYWxBdXRoIiwiZ2V0Q29va2llIiwiaW52YWxpZENoYXIiLCJSZWdFeHAiLCJiYXNlNjRDb29raWUiLCJ0b2tlbkRhdGEiLCJhdG9iIiwidG9rZW5zIiwicGFyc2UiLCJhY2Nlc3NUb2tlbiIsImhvc3QiLCJwYXRoX2FuZF9zZWFyY2giLCJnZXRMb2NhbE9yQXBwQXV0aCIsImdldExvZ2dlZGluVXNlciIsImdldFJlZGRpdFVzZXJuYW1lIiwiYml0bWFwIiwicHgiLCJyYW5kb20iLCIka2V5cyIsImVudW1CdWdLZXlzIiwibWF4IiwiZFBzIiwiSUVfUFJPVE8iLCJFbXB0eSIsImNyZWF0ZURpY3QiLCJpZnJhbWVEb2N1bWVudCIsImlmcmFtZSIsInN0eWxlIiwiZGlzcGxheSIsImFwcGVuZENoaWxkIiwiY29udGVudFdpbmRvdyIsImRvY3VtZW50Iiwid3JpdGUiLCJsdCIsIlByb3BlcnRpZXMiLCJoaWRkZW5LZXlzIiwiZ2V0T3duUHJvcGVydHlOYW1lcyIsIk9iamVjdFByb3RvIiwiVU5TQ09QQUJMRVMiLCJfdCIsImRlZiIsInN0YXQiLCJzcGFjZXMiLCJzcGFjZSIsImx0cmltIiwicnRyaW0iLCJleHBvcnRlciIsIkFMSUFTIiwiRk9SQ0UiLCJ0cmltIiwiREVTQ1JJUFRPUlMiLCJTUEVDSUVTIiwiQ29uc3RydWN0b3IiLCJmb3JiaWRkZW5GaWVsZCIsImNvZiIsInByb3BlcnR5SXNFbnVtZXJhYmxlIiwiQVJHIiwiVCIsInRyeUdldCIsImNhbGxlZSIsIkQiLCJjb3B5cmlnaHQiLCJJU19JTkNMVURFUyIsImVsIiwiZnJvbUluZGV4IiwiZ2V0T3duUHJvcGVydHlTeW1ib2xzIiwiaXNBcnJheSIsIlNBRkVfQ0xPU0lORyIsInJpdGVyIiwic2tpcENsb3NpbmciLCJhcnIiLCJpZ25vcmVDYXNlIiwibXVsdGlsaW5lIiwidW5pY29kZSIsInN0aWNreSIsImJ1aWx0aW5FeGVjIiwicmVnZXhwRXhlYyIsIlJFUExBQ0VfU1VQUE9SVFNfTkFNRURfR1JPVVBTIiwicmUiLCJncm91cHMiLCJTUExJVF9XT1JLU19XSVRIX09WRVJXUklUVEVOX0VYRUMiLCJvcmlnaW5hbEV4ZWMiLCJTWU1CT0wiLCJERUxFR0FURVNfVE9fU1lNQk9MIiwiREVMRUdBVEVTX1RPX0VYRUMiLCJleGVjQ2FsbGVkIiwibmF0aXZlUmVnRXhwTWV0aG9kIiwiZm5zIiwibmF0aXZlTWV0aG9kIiwicmVnZXhwIiwic3RyIiwiYXJnMiIsImZvcmNlU3RyaW5nTWV0aG9kIiwic3RyZm4iLCJyeGZuIiwiQlJFQUsiLCJSRVRVUk4iLCJpdGVyYWJsZSIsIm5hdmlnYXRvciIsInVzZXJBZ2VudCIsImZvck9mIiwic2V0VG9TdHJpbmdUYWciLCJpbmhlcml0SWZSZXF1aXJlZCIsIm1ldGhvZHMiLCJjb21tb24iLCJJU19XRUFLIiwiQURERVIiLCJmaXhNZXRob2QiLCJpbnN0YW5jZSIsIkhBU05UX0NIQUlOSU5HIiwiVEhST1dTX09OX1BSSU1JVElWRVMiLCJBQ0NFUFRfSVRFUkFCTEVTIiwiQlVHR1lfWkVSTyIsIiRpbnN0YW5jZSIsImdldENvbnN0cnVjdG9yIiwic2V0U3Ryb25nIiwiVHlwZWQiLCJUeXBlZEFycmF5Q29uc3RydWN0b3JzIiwiU1VCU0NSSUJFRF9GUk9NX1JFRERJVCIsIlNVQlNDUklCRURfRlJPTV9SRVZFRERJVCIsIlNVQlNDUklCRURfRlJPTV9OQSIsIlRBUkdFVF9TRUVOX0NPVU5UX0ZPUl9QUkVWSU9VU0xZX1JFQ09SREVEX0NIQU5HRSIsInNldEN1cnJlbnRTdGF0ZUZvcklkIiwic3Vic2NyaWJlZEZyb21VUkwiLCJzdWJzY3JpYmVkRnJvbSIsImNoZWNrRm9yQ2hhbmdlc190aGluZ19ieUlkIiwiY2hlY2tGb3JDaGFuZ2VzIiwib3RoZXIiLCJub3ciLCJ0ZW1wVmFyX21vbml0b3JfcXVhcmFudGluZWQiLCJjaGVja0ZvckNoYW5nZXNfb3RoZXIiLCJjaGVja0ZvckNoYW5nZXNfdXNlcnMiLCJuZXdTdG9yYWdlIiwidGVtcFZhcl9xdWFyYW50aW5lZF9jb250ZW50X2ZvdW5kIiwiX2FzeW5jVG9HZW5lcmF0b3IiLCJTZXQiLCJpdGVtTG9va3VwIiwicXVhcmFudGluZSIsImFkZCIsIl94MyIsIl9jYWxsZWUyIiwiX2FyZ3MyIiwiX2NvbnRleHQyIiwidGFyZ2V0X3NlZW5fY291bnQiLCJrbm93bl9yZW1vdmVkIiwia25vd25fYXBwcm92ZWQiLCJrbm93bl9sb2NrZWQiLCJrbm93bl91bmxvY2tlZCIsIml0ZW1XcmFwIiwibmV3TG9jYWxTdG9yYWdlSXRlbXMiLCJjaGFuZ2VUeXBlcyIsIm51bV9jaGFuZ2VzIiwiZXhpc3RpbmdMb2NhbFN0b3JhZ2VJdGVtcyIsIl9jaHJvbWUkc3RvcmFnZSRzeW5jJCIsIm1hcmtDaGFuZ2VzIiwiX3g0IiwiX3g1IiwiX3g2IiwiX3g3IiwiX3g4IiwiX3g5IiwiY2hhbmdlSXNQcmV2aW91c2x5UmVjb3JkZWQiLCJfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uIiwiX2RpZEl0ZXJhdG9yRXJyb3IiLCJfaXRlcmF0b3JFcnJvciIsIl9zdGVwIiwiX2l0ZXJhdG9yIiwiY2hhbmdlIiwiY2hhbmdlX29iaiIsImdldElEIiwiZ2V0Q2hhbmdlVHlwZUludGVybmFsIiwiYWxlcnRfY3VycmVudF9saXN0IiwiYWxlcnRfdHlwZSIsImFsZXJ0X3RleHQiLCJhbGVydF9rbm93bl9oYXNoIiwibm9ybWFsX2N1cnJlbnRfbGlzdCIsIm5vcm1hbF90eXBlIiwibm9ybWFsX3RleHQiLCJub3JtYWxfa25vd25faGFzaCIsImFsZXJ0X3Vuc2Vlbl9pZHMiLCJub3JtYWxfdW5zZWVuX2lkcyIsImFsZXJ0X3VzZXJEZWxldGVkX3Vuc2Vlbl9pZHMiLCJleGlzdGluZ0xvY2FsU3RvcmFnZUl0ZW0iLCJuZXdMb2NhbFN0b3JhZ2VJdGVtIiwicmVzZXRTZWVuQ291bnQiLCJtYXJrVW5zZWVuIiwiYWxlcnRfdHlwZV92YXIiLCJ0aGlzX2xvY2FsU3RvcmFnZUl0ZW0iLCJpbmNyZW1lbnRTZWVuQ291bnQiLCJpcyIsImNyZWF0ZUVsZW1lbnQiLCJzaGFyZWQiLCJkb2N1bWVudEVsZW1lbnQiLCJjaGVjayIsInNldFByb3RvdHlwZU9mIiwiYnVnZ3kiLCJfX3Byb3RvX18iLCJjb3VudCIsIkluZmluaXR5Iiwic2lnbiIsIngiLCIkZXhwbTEiLCJleHBtMSIsIlRPX1NUUklORyIsInBvcyIsImNoYXJDb2RlQXQiLCJjaGFyQXQiLCIkaXRlckNyZWF0ZSIsIkJVR0dZIiwicmV0dXJuVGhpcyIsIkRFRkFVTFQiLCJJU19TRVQiLCJJdGVyYXRvclByb3RvdHlwZSIsImdldE1ldGhvZCIsImtpbmQiLCJERUZfVkFMVUVTIiwiVkFMVUVTX0JVRyIsIiRuYXRpdmUiLCIkZGVmYXVsdCIsIiRlbnRyaWVzIiwiJGFueU5hdGl2ZSIsImlzUmVnRXhwIiwic2VhcmNoU3RyaW5nIiwiTUFUQ0giLCIkZGVmaW5lUHJvcGVydHkiLCJnZXRJdGVyYXRvck1ldGhvZCIsImVuZFBvcyIsImFkZFRvVW5zY29wYWJsZXMiLCJpdGVyYXRlZCIsIl9pIiwiX2siLCJBcmd1bWVudHMiLCJyZTEiLCJyZTIiLCJyZWdleHBGbGFncyIsIm5hdGl2ZUV4ZWMiLCJuYXRpdmVSZXBsYWNlIiwicGF0Y2hlZEV4ZWMiLCJVUERBVEVTX0xBU1RfSU5ERVhfV1JPTkciLCJOUENHX0lOQ0xVREVEIiwibGFzdEluZGV4IiwicmVDb3B5IiwiYXQiLCJkZWZlciIsImNoYW5uZWwiLCJwb3J0IiwiaW52b2tlIiwiaHRtbCIsImNlbCIsInByb2Nlc3MiLCJzZXRUYXNrIiwic2V0SW1tZWRpYXRlIiwiY2xlYXJUYXNrIiwiY2xlYXJJbW1lZGlhdGUiLCJNZXNzYWdlQ2hhbm5lbCIsIkRpc3BhdGNoIiwiY291bnRlciIsInF1ZXVlIiwicnVuIiwiZXZlbnQiLCJuZXh0VGljayIsInBvcnQyIiwicG9ydDEiLCJvbm1lc3NhZ2UiLCJwb3N0TWVzc2FnZSIsImFkZEV2ZW50TGlzdGVuZXIiLCJpbXBvcnRTY3JpcHRzIiwicmVtb3ZlQ2hpbGQiLCJzZXRUaW1lb3V0IiwiUFJPVE9UWVBFIiwiV1JPTkdfSU5ERVgiLCJCYXNlQnVmZmVyIiwiYWJzIiwicG93IiwiTE4yIiwiJEJVRkZFUiIsIiRMRU5HVEgiLCIkT0ZGU0VUIiwicGFja0lFRUU3NTQiLCJtTGVuIiwibkJ5dGVzIiwiZUxlbiIsImVNYXgiLCJlQmlhcyIsInJ0IiwidW5wYWNrSUVFRTc1NCIsIm5CaXRzIiwiTmFOIiwidW5wYWNrSTMyIiwiYnl0ZXMiLCJwYWNrSTgiLCJwYWNrSTE2IiwicGFja0kzMiIsInBhY2tGNjQiLCJwYWNrRjMyIiwidmlldyIsImlzTGl0dGxlRW5kaWFuIiwiaW50SW5kZXgiLCJfYiIsInBhY2siLCJjb252ZXJzaW9uIiwiQXJyYXlCdWZmZXJQcm90byIsImoiLCIkc2V0SW50OCIsInNldEludDgiLCJnZXRJbnQ4Iiwic2V0VWludDgiLCJidWZmZXJMZW5ndGgiLCJnZXRVaW50OCIsImdldEludDE2IiwiZ2V0VWludDE2IiwiZ2V0SW50MzIiLCJnZXRVaW50MzIiLCJnZXRGbG9hdDMyIiwiZ2V0RmxvYXQ2NCIsInNldEludDE2Iiwic2V0VWludDE2Iiwic2V0SW50MzIiLCJzZXRVaW50MzIiLCJzZXRGbG9hdDMyIiwic2V0RmxvYXQ2NCIsIndrc0V4dCIsIiRTeW1ib2wiLCJnZXRLZXlzIiwiZGVmaW5lUHJvcGVydGllcyIsIndpbmRvd05hbWVzIiwiZ2V0V2luZG93TmFtZXMiLCJnT1BTIiwiJGFzc2lnbiIsImFzc2lnbiIsIkEiLCJLIiwiZ2V0U3ltYm9scyIsImlzRW51bSIsInkiLCJmYWN0b3JpZXMiLCJjb25zdHJ1Y3QiLCJwYXJ0QXJncyIsImJvdW5kIiwidW4iLCIkcGFyc2VJbnQiLCJwYXJzZUludCIsIiR0cmltIiwid3MiLCJoZXgiLCJyYWRpeCIsIiRwYXJzZUZsb2F0IiwicGFyc2VGbG9hdCIsImlzRmluaXRlIiwibG9nMXAiLCJkZXNjcmlwdG9yIiwicmV0Iiwib3JpZ2luYWwiLCJtZW1vIiwiaXNSaWdodCIsInRvIiwiaW5jIiwiZm9yY2VkIiwiZmxhZ3MiLCJJbnRlcm5hbCIsIm5ld0dlbmVyaWNQcm9taXNlQ2FwYWJpbGl0eSIsIk93blByb21pc2VDYXBhYmlsaXR5IiwiV3JhcHBlciIsInRhc2siLCJtaWNyb3Rhc2siLCJuZXdQcm9taXNlQ2FwYWJpbGl0eU1vZHVsZSIsInBlcmZvcm0iLCJwcm9taXNlUmVzb2x2ZSIsInZlcnNpb25zIiwidjgiLCIkUHJvbWlzZSIsImlzTm9kZSIsImVtcHR5IiwibmV3UHJvbWlzZUNhcGFiaWxpdHkiLCJVU0VfTkFUSVZFIiwiRmFrZVByb21pc2UiLCJQcm9taXNlUmVqZWN0aW9uRXZlbnQiLCJpc1JlamVjdCIsIl9uIiwiY2hhaW4iLCJfYyIsIl92IiwiX3MiLCJyZWFjdGlvbiIsImV4aXRlZCIsImhhbmRsZXIiLCJmYWlsIiwiX2giLCJvbkhhbmRsZVVuaGFuZGxlZCIsImVudGVyIiwiZXhpdCIsIm9uVW5oYW5kbGVkIiwidW5oYW5kbGVkIiwiaXNVbmhhbmRsZWQiLCJlbWl0Iiwib251bmhhbmRsZWRyZWplY3Rpb24iLCJyZWFzb24iLCJfYSIsIm9ucmVqZWN0aW9uaGFuZGxlZCIsIiRyZWplY3QiLCJfdyIsIiRyZXNvbHZlIiwiZXhlY3V0b3IiLCJvbkZ1bGZpbGxlZCIsIm9uUmVqZWN0ZWQiLCJjYXBhYmlsaXR5IiwiJCRyZWplY3QiLCJhbGwiLCJyZW1haW5pbmciLCIkaW5kZXgiLCJhbHJlYWR5Q2FsbGVkIiwicmFjZSIsIlByb21pc2VDYXBhYmlsaXR5IiwiJCRyZXNvbHZlIiwicHJvbWlzZUNhcGFiaWxpdHkiLCIkaXRlckRlZmluZSIsIlNJWkUiLCJnZXRFbnRyeSIsImVudHJ5IiwiX2YiLCJfbCIsImRlbGV0ZSIsIiRoYXMiLCJ1bmNhdWdodEZyb3plblN0b3JlIiwiVW5jYXVnaHRGcm96ZW5TdG9yZSIsImZpbmRVbmNhdWdodEZyb3plbiIsInNwbGljZSIsInVmc3RvcmUiLCJudW1iZXIiLCJvd25LZXlzIiwicmVwZWF0IiwibWF4TGVuZ3RoIiwiZmlsbFN0cmluZyIsImxlZnQiLCJzdHJpbmdMZW5ndGgiLCJmaWxsU3RyIiwiaW50TWF4TGVuZ3RoIiwiZmlsbExlbiIsInN0cmluZ0ZpbGxlciIsImlzRW50cmllcyIsIl9nbG9iYWwiLCJkZWZhdWx0IiwiX2JhYmVsUG9seWZpbGwiLCIkZmFpbHMiLCJ3a3NEZWZpbmUiLCJlbnVtS2V5cyIsIl9jcmVhdGUiLCJnT1BORXh0IiwiJEdPUFMiLCIkSlNPTiIsIl9zdHJpbmdpZnkiLCJISURERU4iLCJUT19QUklNSVRJVkUiLCJTeW1ib2xSZWdpc3RyeSIsIkFsbFN5bWJvbHMiLCJPUFN5bWJvbHMiLCJRT2JqZWN0IiwiZmluZENoaWxkIiwic2V0U3ltYm9sRGVzYyIsInByb3RvRGVzYyIsInN5bSIsImlzU3ltYm9sIiwiJGRlZmluZVByb3BlcnRpZXMiLCIkcHJvcGVydHlJc0VudW1lcmFibGUiLCJFIiwiJGdldE93blByb3BlcnR5RGVzY3JpcHRvciIsIiRnZXRPd25Qcm9wZXJ0eU5hbWVzIiwiJGdldE93blByb3BlcnR5U3ltYm9scyIsIklTX09QIiwiZXM2U3ltYm9scyIsIndlbGxLbm93blN5bWJvbHMiLCJmb3IiLCJrZXlGb3IiLCJ1c2VTZXR0ZXIiLCJ1c2VTaW1wbGUiLCJGQUlMU19PTl9QUklNSVRJVkVTIiwicmVwbGFjZXIiLCIkcmVwbGFjZXIiLCJzeW1ib2xzIiwiJGdldFByb3RvdHlwZU9mIiwiJGZyZWV6ZSIsIiRzZWFsIiwiJHByZXZlbnRFeHRlbnNpb25zIiwiJGlzRnJvemVuIiwiJGlzU2VhbGVkIiwiJGlzRXh0ZW5zaWJsZSIsIkZQcm90byIsIm5hbWVSRSIsIkhBU19JTlNUQU5DRSIsIkZ1bmN0aW9uUHJvdG8iLCIkTnVtYmVyIiwiQlJPS0VOX0NPRiIsIlRSSU0iLCJ0b051bWJlciIsImFyZ3VtZW50IiwidGhpcmQiLCJtYXhDb2RlIiwiZmlyc3QiLCJjb2RlIiwiZGlnaXRzIiwiYU51bWJlclZhbHVlIiwiJHRvRml4ZWQiLCJ0b0ZpeGVkIiwiRVJST1IiLCJtdWx0aXBseSIsImMyIiwiZGl2aWRlIiwibnVtVG9TdHJpbmciLCJhY2MiLCJmcmFjdGlvbkRpZ2l0cyIsInoiLCJ4MiIsIiR0b1ByZWNpc2lvbiIsInRvUHJlY2lzaW9uIiwicHJlY2lzaW9uIiwiRVBTSUxPTiIsIl9pc0Zpbml0ZSIsImlzSW50ZWdlciIsImlzU2FmZUludGVnZXIiLCJNQVhfU0FGRV9JTlRFR0VSIiwiTUlOX1NBRkVfSU5URUdFUiIsIk51bWJlciIsInNxcnQiLCIkYWNvc2giLCJhY29zaCIsIk1BWF9WQUxVRSIsIiRhc2luaCIsImFzaW5oIiwiJGF0YW5oIiwiYXRhbmgiLCJjYnJ0IiwiY2x6MzIiLCJMT0cyRSIsImNvc2giLCJmcm91bmQiLCJFUFNJTE9OMzIiLCJNQVgzMiIsIk1JTjMyIiwiJGFicyIsIiRzaWduIiwiaHlwb3QiLCJ2YWx1ZTEiLCJ2YWx1ZTIiLCJkaXYiLCJzdW0iLCJsYXJnIiwiJGltdWwiLCJpbXVsIiwieG4iLCJ5biIsInhsIiwieWwiLCJsb2cxMCIsIkxPRzEwRSIsImxvZzIiLCJzaW5oIiwidGFuaCIsInRydW5jIiwiZnJvbUNoYXJDb2RlIiwiJGZyb21Db2RlUG9pbnQiLCJmcm9tQ29kZVBvaW50IiwicmF3IiwiY2FsbFNpdGUiLCJ0cGwiLCIkYXQiLCJwb2ludCIsImNvZGVQb2ludEF0IiwiY29udGV4dCIsIiRlbmRzV2l0aCIsImVuZHNXaXRoIiwiZW5kUG9zaXRpb24iLCIkc3RhcnRzV2l0aCIsInN0YXJ0c1dpdGgiLCJzaXplIiwidG9KU09OIiwidG9JU09TdHJpbmciLCJwdiIsIiR0b0lTT1N0cmluZyIsImx6IiwibnVtIiwiZ2V0VVRDRnVsbFllYXIiLCJnZXRVVENNaWxsaXNlY29uZHMiLCJnZXRVVENNb250aCIsImdldFVUQ0RhdGUiLCJnZXRVVENIb3VycyIsImdldFVUQ01pbnV0ZXMiLCJnZXRVVENTZWNvbmRzIiwiRGF0ZVByb3RvIiwiaGludCIsImNyZWF0ZVByb3BlcnR5IiwidXBUbyIsImNsb25lZCIsIiRzb3J0IiwiJGZvckVhY2giLCJTVFJJQ1QiLCIkZmlsdGVyIiwiJHNvbWUiLCIkZXZlcnkiLCIkcmVkdWNlIiwiJGluZGV4T2YiLCJORUdBVElWRV9aRVJPIiwiJGZpbmQiLCIkZmxhZ3MiLCIkUmVnRXhwIiwiQ09SUkVDVF9ORVciLCJ0aVJFIiwicGlSRSIsImZpVSIsInByb3h5IiwiZGVmaW5lIiwiYWR2YW5jZVN0cmluZ0luZGV4IiwicmVnRXhwRXhlYyIsIiRtYXRjaCIsIm1heWJlQ2FsbE5hdGl2ZSIsInJ4IiwiZnVsbFVuaWNvZGUiLCJtYXRjaFN0ciIsIlNVQlNUSVRVVElPTl9TWU1CT0xTIiwiU1VCU1RJVFVUSU9OX1NZTUJPTFNfTk9fTkFNRUQiLCJSRVBMQUNFIiwiJHJlcGxhY2UiLCJzZWFyY2hWYWx1ZSIsInJlcGxhY2VWYWx1ZSIsImZ1bmN0aW9uYWxSZXBsYWNlIiwicmVzdWx0cyIsImFjY3VtdWxhdGVkUmVzdWx0IiwibmV4dFNvdXJjZVBvc2l0aW9uIiwibWF0Y2hlZCIsInBvc2l0aW9uIiwiY2FwdHVyZXMiLCJuYW1lZENhcHR1cmVzIiwicmVwbGFjZXJBcmdzIiwicmVwbGFjZW1lbnQiLCJnZXRTdWJzdGl0dXRpb24iLCJ0YWlsUG9zIiwiY2giLCJjYXB0dXJlIiwic2FtZVZhbHVlIiwiU0VBUkNIIiwiJHNlYXJjaCIsInByZXZpb3VzTGFzdEluZGV4IiwiY2FsbFJlZ0V4cEV4ZWMiLCIkbWluIiwiJHB1c2giLCJTVVBQT1JUU19ZIiwiU1BMSVQiLCIkc3BsaXQiLCJpbnRlcm5hbFNwbGl0IiwibGFzdExlbmd0aCIsIm91dHB1dCIsImxhc3RMYXN0SW5kZXgiLCJzcGxpdExpbWl0Iiwic2VwYXJhdG9yQ29weSIsInNwbGl0dGVyIiwidW5pY29kZU1hdGNoaW5nIiwibGltIiwicSIsIm1hY3JvdGFzayIsIk9ic2VydmVyIiwiTXV0YXRpb25PYnNlcnZlciIsIldlYktpdE11dGF0aW9uT2JzZXJ2ZXIiLCJoZWFkIiwibGFzdCIsImZsdXNoIiwicGFyZW50Iiwic3RhbmRhbG9uZSIsInRvZ2dsZSIsIm5vZGUiLCJjcmVhdGVUZXh0Tm9kZSIsIm9ic2VydmUiLCJjaGFyYWN0ZXJEYXRhIiwic3Ryb25nIiwiSW50ZXJuYWxNYXAiLCJlYWNoIiwid2VhayIsIk5BVElWRV9XRUFLX01BUCIsIklTX0lFMTEiLCJBY3RpdmVYT2JqZWN0IiwiJFdlYWtNYXAiLCIkaXNWaWV3IiwiaXNWaWV3IiwiZmluIiwidmlld1MiLCJ2aWV3VCIsImluaXQiLCJyQXBwbHkiLCJmQXBwbHkiLCJ0aGlzQXJndW1lbnQiLCJhcmd1bWVudHNMaXN0IiwiTCIsInJDb25zdHJ1Y3QiLCJORVdfVEFSR0VUX0JVRyIsIkFSR1NfQlVHIiwiVGFyZ2V0IiwibmV3VGFyZ2V0IiwiJGFyZ3MiLCJwcm9wZXJ0eUtleSIsImF0dHJpYnV0ZXMiLCJFbnVtZXJhdGUiLCJlbnVtZXJhdGUiLCJnZXRQcm90byIsIlYiLCJleGlzdGluZ0Rlc2NyaXB0b3IiLCJvd25EZXNjIiwic2V0UHJvdG8iLCIkaW5jbHVkZXMiLCJmbGF0TWFwIiwiZmxhdHRlbkludG9BcnJheSIsImFycmF5U3BlY2llc0NyZWF0ZSIsInNvdXJjZUxlbiIsIklTX0NPTkNBVF9TUFJFQURBQkxFIiwiZGVwdGgiLCJtYXBwZXIiLCJ0aGlzQXJnIiwiZWxlbWVudCIsInNwcmVhZGFibGUiLCJ0YXJnZXRJbmRleCIsInNvdXJjZUluZGV4IiwibWFwRm4iLCJwYWRTdGFydCIsIiRwYWQiLCJXRUJLSVRfQlVHIiwicGFkRW5kIiwidHJpbUxlZnQiLCJ0cmltUmlnaHQiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzIiwiZ2V0RGVzYyIsIiR2YWx1ZXMiLCJmaW5hbGx5Iiwib25GaW5hbGx5IiwiTVNJRSIsImJvdW5kQXJncyIsInNldEludGVydmFsIiwiJHRhc2siLCJUT19TVFJJTkdfVEFHIiwiQXJyYXlWYWx1ZXMiLCJET01JdGVyYWJsZXMiLCJDU1NSdWxlTGlzdCIsIkNTU1N0eWxlRGVjbGFyYXRpb24iLCJDU1NWYWx1ZUxpc3QiLCJDbGllbnRSZWN0TGlzdCIsIkRPTVJlY3RMaXN0IiwiRE9NU3RyaW5nTGlzdCIsIkRPTVRva2VuTGlzdCIsIkRhdGFUcmFuc2Zlckl0ZW1MaXN0IiwiRmlsZUxpc3QiLCJIVE1MQWxsQ29sbGVjdGlvbiIsIkhUTUxDb2xsZWN0aW9uIiwiSFRNTEZvcm1FbGVtZW50IiwiSFRNTFNlbGVjdEVsZW1lbnQiLCJNZWRpYUxpc3QiLCJNaW1lVHlwZUFycmF5IiwiTmFtZWROb2RlTWFwIiwiTm9kZUxpc3QiLCJQYWludFJlcXVlc3RMaXN0IiwiUGx1Z2luIiwiUGx1Z2luQXJyYXkiLCJTVkdMZW5ndGhMaXN0IiwiU1ZHTnVtYmVyTGlzdCIsIlNWR1BhdGhTZWdMaXN0IiwiU1ZHUG9pbnRMaXN0IiwiU1ZHU3RyaW5nTGlzdCIsIlNWR1RyYW5zZm9ybUxpc3QiLCJTb3VyY2VCdWZmZXJMaXN0IiwiU3R5bGVTaGVldExpc3QiLCJUZXh0VHJhY2tDdWVMaXN0IiwiVGV4dFRyYWNrTGlzdCIsIlRvdWNoTGlzdCIsImNvbGxlY3Rpb25zIiwiZXhwbGljaXQiLCJDb2xsZWN0aW9uIiwiT3AiLCJoYXNPd24iLCJpdGVyYXRvclN5bWJvbCIsImFzeW5jSXRlcmF0b3JTeW1ib2wiLCJhc3luY0l0ZXJhdG9yIiwidG9TdHJpbmdUYWdTeW1ib2wiLCJpbm5lckZuIiwib3V0ZXJGbiIsInRyeUxvY3NMaXN0IiwicHJvdG9HZW5lcmF0b3IiLCJHZW5lcmF0b3IiLCJnZW5lcmF0b3IiLCJDb250ZXh0IiwiX2ludm9rZSIsInN0YXRlIiwiR2VuU3RhdGVTdXNwZW5kZWRTdGFydCIsIkdlblN0YXRlRXhlY3V0aW5nIiwiR2VuU3RhdGVDb21wbGV0ZWQiLCJkb25lUmVzdWx0IiwiZGVsZWdhdGUiLCJkZWxlZ2F0ZVJlc3VsdCIsIm1heWJlSW52b2tlRGVsZWdhdGUiLCJDb250aW51ZVNlbnRpbmVsIiwiX3NlbnQiLCJkaXNwYXRjaEV4Y2VwdGlvbiIsInJlY29yZCIsInRyeUNhdGNoIiwiR2VuU3RhdGVTdXNwZW5kZWRZaWVsZCIsIm1ha2VJbnZva2VNZXRob2QiLCJHZW5lcmF0b3JGdW5jdGlvbiIsIkdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlIiwiTmF0aXZlSXRlcmF0b3JQcm90b3R5cGUiLCJHcCIsImRlZmluZUl0ZXJhdG9yTWV0aG9kcyIsIkFzeW5jSXRlcmF0b3IiLCJQcm9taXNlSW1wbCIsInByZXZpb3VzUHJvbWlzZSIsImNhbGxJbnZva2VXaXRoTWV0aG9kQW5kQXJnIiwiX19hd2FpdCIsInVud3JhcHBlZCIsImluZm8iLCJyZXN1bHROYW1lIiwibmV4dExvYyIsInB1c2hUcnlFbnRyeSIsImxvY3MiLCJ0cnlMb2MiLCJjYXRjaExvYyIsImZpbmFsbHlMb2MiLCJhZnRlckxvYyIsInRyeUVudHJpZXMiLCJyZXNldFRyeUVudHJ5IiwiY29tcGxldGlvbiIsInJlc2V0IiwiaXRlcmF0b3JNZXRob2QiLCJkaXNwbGF5TmFtZSIsImlzR2VuZXJhdG9yRnVuY3Rpb24iLCJnZW5GdW4iLCJjdG9yIiwiYXdyYXAiLCJhc3luYyIsInBvcCIsInNraXBUZW1wUmVzZXQiLCJyb290UmVjb3JkIiwicnZhbCIsImV4Y2VwdGlvbiIsImhhbmRsZSIsImxvYyIsImNhdWdodCIsImhhc0NhdGNoIiwiaGFzRmluYWxseSIsImZpbmFsbHlFbnRyeSIsImNvbXBsZXRlIiwiZmluaXNoIiwidGhyb3duIiwiZGVsZWdhdGVZaWVsZCIsImFjY2lkZW50YWxTdHJpY3RNb2RlIiwiSVNfV1JBUCIsInZpcnR1YWwiLCJzZXR1cENvbnRleHR1YWxNZW51IiwiY29udGV4dHMiLCJ0YXJnZXRVcmxQYXR0ZXJucyIsIm9uQ2xpY2tlZCIsIm1lbnVJdGVtSWQiLCJsaW5rVXJsIiwiX2dldEZ1bGxJRHNGcm9tVVJMMiIsIl9zbGljZWRUb0FycmF5IiwiYWxlcnQiLCJvbkluc3RhbGxlZCIsImRldGFpbHMiLCJub3RpZmljYXRpb25DbGlja2VkIiwibm90aWZpY2F0aW9uIiwiX2xvc3RFdmVudHNXYXRjaGRvZyIsImxhc3RBbGFybSIsImluSW5jb2duaXRvQ29udGV4dCIsInF1aWV0Q291bnQiLCJhZ2UiLCJvbkFsYXJtIiwiYWxhcm0iXSwibWFwcGluZ3MiOiJhQUNFLElBQUlBLEVBQW1CLEdBR3ZCLFNBQVNDLEVBQW9CQyxHQUc1QixHQUFHRixFQUFpQkUsR0FDbkIsT0FBT0YsRUFBaUJFLEdBQVVDLFFBR25DLElBQUlDLEVBQVNKLEVBQWlCRSxHQUFZLENBQ3pDRyxFQUFHSCxFQUNISSxHQUFHLEVBQ0hILFFBQVMsSUFVVixPQU5BSSxFQUFRTCxHQUFVTSxLQUFLSixFQUFPRCxRQUFTQyxFQUFRQSxFQUFPRCxRQUFTRixHQUcvREcsRUFBT0UsR0FBSSxFQUdKRixFQUFPRCxRQUtmRixFQUFvQlEsRUFBSUYsRUFHeEJOLEVBQW9CUyxFQUFJVixFQUd4QkMsRUFBb0JVLEVBQUksU0FBU1IsRUFBU1MsRUFBTUMsR0FDM0NaLEVBQW9CYSxFQUFFWCxFQUFTUyxJQUNsQ0csT0FBT0MsZUFBZWIsRUFBU1MsRUFBTSxDQUFFSyxZQUFZLEVBQU1DLElBQUtMLEtBS2hFWixFQUFvQmtCLEVBQUksU0FBU2hCLEdBQ1gsb0JBQVhpQixRQUEwQkEsT0FBT0MsYUFDMUNOLE9BQU9DLGVBQWViLEVBQVNpQixPQUFPQyxZQUFhLENBQUVDLE1BQU8sV0FFN0RQLE9BQU9DLGVBQWViLEVBQVMsYUFBYyxDQUFFbUIsT0FBTyxLQVF2RHJCLEVBQW9Cc0IsRUFBSSxTQUFTRCxFQUFPRSxHQUV2QyxHQURVLEVBQVBBLElBQVVGLEVBQVFyQixFQUFvQnFCLElBQy9CLEVBQVBFLEVBQVUsT0FBT0YsRUFDcEIsR0FBVyxFQUFQRSxHQUE4QixpQkFBVkYsR0FBc0JBLEdBQVNBLEVBQU1HLFdBQVksT0FBT0gsRUFDaEYsSUFBSUksRUFBS1gsT0FBT1ksT0FBTyxNQUd2QixHQUZBMUIsRUFBb0JrQixF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LEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLElBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FD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QUEsRUFHUyxJQUFJaE4sUUFBUSxTQUFBcEIsR0FBTyxPQUFJa25CLFdBQVdsbkIsRUFBUyxRQUhwRCxVQUlTc2UsRUFBTXR5QixLQUFLc3lCLE1BQ1hrdUIsRUFBTWx1QixFQUFNK3RCLEVBQ2xCdDhDLFFBQVFDLElBQVIsa0NBQUF4RCxPQUE4Q2dnRCxFQUFJLElBQWxELFlBQ0lBLEVBQU0sTUFQYixDQUFBbjRCLEVBQUFqRyxLQUFBLFNBUUttK0IsRUFBYSxFQVJsQmw0QixFQUFBakcsS0FBQSx3QkFTZ0JtK0IsR0FBYyxHQVQ5QixDQUFBbDRCLEVBQUFqRyxLQUFBLGdCQVVLcmUsUUFBUXFULE1BQU0sa0NBVm5CaVIsRUFBQVUsT0FBQSxTQVdZbnBCLE9BQU9qQixRQUFRbVUsVUFYM0IsUUFhS3BLLG1CQUFTN00sb0JBYmQsUUFBQXdzQixFQUFBakcsS0FBQSxpQ0FBQWlHLEVBQUFXLFNBQUFmLEtBQURtNEIsRSw0S0FBQSxrQkFBQUEsRUFBQTdyQyxNQUFBL00sS0FBQXRLLGVBbUJBMEMsT0FBT2dKLE9BQU82M0MsUUFBUXpxQyxZQUFZLFNBQVMwcUMsR0FDbkNBLEVBQU1sb0QsTUFBUStMLGVBQ2Q4N0MsRUFBWXJnRCxLQUFLc3lCLE1BQ2pCRiIsImZpbGUiOiJiYWNrZ3JvdW5kLmpzIiwic291cmNlc0NvbnRlbnQiOlsiIFx0Ly8gVGhlIG1vZHVsZSBjYWNoZVxuIFx0dmFyIGluc3RhbGxlZE1vZHVsZXMgPSB7fTtcblxuIFx0Ly8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbiBcdGZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblxuIFx0XHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcbiBcdFx0aWYoaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0pIHtcbiBcdFx0XHRyZXR1cm4gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0uZXhwb3J0cztcbiBcdFx0fVxuIFx0XHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuIFx0XHR2YXIgbW9kdWxlID0gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0gPSB7XG4gXHRcdFx0aTogbW9kdWxlSWQsXG4gXHRcdFx0bDogZmFsc2UsXG4gXHRcdFx0ZXhwb3J0czoge31cbiBcdFx0fTtcblxuIFx0XHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cbiBcdFx0bW9kdWxlc1ttb2R1bGVJZF0uY2FsbChtb2R1bGUuZXhwb3J0cywgbW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cbiBcdFx0Ly8gRmxhZyB0aGUgbW9kdWxlIGFzIGxvYWRlZFxuIFx0XHRtb2R1bGUubCA9IHRydWU7XG5cbiBcdFx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcbiBcdFx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xuIFx0fVxuXG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlcyBvYmplY3QgKF9fd2VicGFja19tb2R1bGVzX18pXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm0gPSBtb2R1bGVzO1xuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZSBjYWNoZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5jID0gaW5zdGFsbGVkTW9kdWxlcztcblxuIFx0Ly8gZGVmaW5lIGdldHRlciBmdW5jdGlvbiBmb3IgaGFybW9ueSBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSBmdW5jdGlvbihleHBvcnRzLCBuYW1lLCBnZXR0ZXIpIHtcbiBcdFx0aWYoIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBuYW1lKSkge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBuYW1lLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZ2V0dGVyIH0pO1xuIFx0XHR9XG4gXHR9O1xuXG4gXHQvLyBkZWZpbmUgX19lc01vZHVsZSBvbiBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIgPSBmdW5jdGlvbihleHBvcnRzKSB7XG4gXHRcdGlmKHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnICYmIFN5bWJvbC50b1N0cmluZ1RhZykge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuIFx0XHR9XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG4gXHR9O1xuXG4gXHQvLyBjcmVhdGUgYSBmYWtlIG5hbWVzcGFjZSBvYmplY3RcbiBcdC8vIG1vZGUgJiAxOiB2YWx1ZSBpcyBhIG1vZHVsZSBpZCwgcmVxdWlyZSBpdFxuIFx0Ly8gbW9kZSAmIDI6IG1lcmdlIGFsbCBwcm9wZXJ0aWVzIG9mIHZhbHVlIGludG8gdGhlIG5zXG4gXHQvLyBtb2RlICYgNDogcmV0dXJuIHZhbHVlIHdoZW4gYWxyZWFkeSBucyBvYmplY3RcbiBcdC8vIG1vZGUgJiA4fDE6IGJlaGF2ZSBsaWtlIHJlcXVpcmVcbiBcdF9fd2VicGFja19yZXF1aXJlX18udCA9IGZ1bmN0aW9uKHZhbHVlLCBtb2RlKSB7XG4gXHRcdGlmKG1vZGUgJiAxKSB2YWx1ZSA9IF9fd2VicGFja19yZXF1aXJlX18odmFsdWUpO1xuIFx0XHRpZihtb2RlICYgOCkgcmV0dXJuIHZhbHVlO1xuIFx0XHRpZigobW9kZSAmIDQpICYmIHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcgJiYgdmFsdWUgJiYgdmFsdWUuX19lc01vZHVsZSkgcmV0dXJuIHZhbHVlO1xuIFx0XHR2YXIgbnMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIobnMpO1xuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobnMsICdkZWZhdWx0JywgeyBlbnVtZXJhYmxlOiB0cnVlLCB2YWx1ZTogdmFsdWUgfSk7XG4gXHRcdGlmKG1vZGUgJiAyICYmIHR5cGVvZiB2YWx1ZSAhPSAnc3RyaW5nJykgZm9yKHZhciBrZXkgaW4gdmFsdWUpIF9fd2VicGFja19yZXF1aXJlX18uZChucywga2V5LCBmdW5jdGlvbihrZXkpIHsgcmV0dXJuIHZhbHVlW2tleV07IH0uYmluZChudWxsLCBrZXkpKTtcbiBcdFx0cmV0dXJuIG5zO1xuIFx0fTtcblxuIFx0Ly8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXNcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubiA9IGZ1bmN0aW9uKG1vZHVsZSkge1xuIFx0XHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cbiBcdFx0XHRmdW5jdGlvbiBnZXREZWZhdWx0KCkgeyByZXR1cm4gbW9kdWxlWydkZWZhdWx0J107IH0gOlxuIFx0XHRcdGZ1bmN0aW9uIGdldE1vZHVsZUV4cG9ydHMoKSB7IHJldHVybiBtb2R1bGU7IH07XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsICdhJywgZ2V0dGVyKTtcbiBcdFx0cmV0dXJuIGdldHRlcjtcbiBcdH07XG5cbiBcdC8vIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbFxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5vID0gZnVuY3Rpb24ob2JqZWN0LCBwcm9wZXJ0eSkgeyByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwgcHJvcGVydHkpOyB9O1xuXG4gXHQvLyBfX3dlYnBhY2tfcHVibGljX3BhdGhfX1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5wID0gXCJcIjtcblxuXG4gXHQvLyBMb2FkIGVudHJ5IG1vZHVsZSBhbmQgcmV0dXJuIGV4cG9ydHNcbiBcdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fKF9fd2VicGFja19yZXF1aXJlX18ucyA9IDMxNik7XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi9fZ2xvYmFsJyk7XG52YXIgY29yZSA9IHJlcXVpcmUoJy4vX2NvcmUnKTtcbnZhciBoaWRlID0gcmVxdWlyZSgnLi9faGlkZScpO1xudmFyIHJlZGVmaW5lID0gcmVxdWlyZSgnLi9fcmVkZWZpbmUnKTtcbnZhciBjdHggPSByZXF1aXJlKCcuL19jdHgnKTtcbnZhciBQUk9UT1RZUEUgPSAncHJvdG90eXBlJztcblxudmFyICRleHBvcnQgPSBmdW5jdGlvbiAodHlwZSwgbmFtZSwgc291cmNlKSB7XG4gIHZhciBJU19GT1JDRUQgPSB0eXBlICYgJGV4cG9ydC5GO1xuICB2YXIgSVNfR0xPQkFMID0gdHlwZSAmICRleHBvcnQuRztcbiAgdmFyIElTX1NUQVRJQyA9IHR5cGUgJiAkZXhwb3J0LlM7XG4gIHZhciBJU19QUk9UTyA9IHR5cGUgJiAkZXhwb3J0LlA7XG4gIHZhciBJU19CSU5EID0gdHlwZSAmICRleHBvcnQuQjtcbiAgdmFyIHRhcmdldCA9IElTX0dMT0JBTCA/IGdsb2JhbCA6IElTX1NUQVRJQyA/IGdsb2JhbFtuYW1lXSB8fCAoZ2xvYmFsW25hbWVdID0ge30pIDogKGdsb2JhbFtuYW1lXSB8fCB7fSlbUFJPVE9UWVBFXTtcbiAgdmFyIGV4cG9ydHMgPSBJU19HTE9CQUwgPyBjb3JlIDogY29yZVtuYW1lXSB8fCAoY29yZVtuYW1lXSA9IHt9KTtcbiAgdmFyIGV4cFByb3RvID0gZXhwb3J0c1tQUk9UT1RZUEVdIHx8IChleHBvcnRzW1BST1RPVFlQRV0gPSB7fSk7XG4gIHZhciBrZXksIG93biwgb3V0LCBleHA7XG4gIGlmIChJU19HTE9CQUwpIHNvdXJjZSA9IG5hbWU7XG4gIGZvciAoa2V5IGluIHNvdXJjZSkge1xuICAgIC8vIGNvbnRhaW5zIGluIG5hdGl2ZVxuICAgIG93biA9ICFJU19GT1JDRUQgJiYgdGFyZ2V0ICYmIHRhcmdldFtrZXldICE9PSB1bmRlZmluZWQ7XG4gICAgLy8gZXhwb3J0IG5hdGl2ZSBvciBwYXNzZWRcbiAgICBvdXQgPSAob3duID8gdGFyZ2V0IDogc291cmNlKVtrZXldO1xuICAgIC8vIGJpbmQgdGltZXJzIHRvIGdsb2JhbCBmb3IgY2FsbCBmcm9tIGV4cG9ydCBjb250ZXh0XG4gICAgZXhwID0gSVNfQklORCAmJiBvd24gPyBjdHgob3V0LCBnbG9iYWwpIDogSVNfUFJPVE8gJiYgdHlwZW9mIG91dCA9PSAnZnVuY3Rpb24nID8gY3R4KEZ1bmN0aW9uLmNhbGwsIG91dCkgOiBvdXQ7XG4gICAgLy8gZXh0ZW5kIGdsb2JhbFxuICAgIGlmICh0YXJnZXQpIHJlZGVmaW5lKHRhcmdldCwga2V5LCBvdXQsIHR5cGUgJiAkZXhwb3J0LlUpO1xuICAgIC8vIGV4cG9ydFxuICAgIGlmIChleHBvcnRzW2tleV0gIT0gb3V0KSBoaWRlKGV4cG9ydHMsIGtleSwgZXhwKTtcbiAgICBpZiAoSVNfUFJPVE8gJiYgZXhwUHJvdG9ba2V5XSAhPSBvdXQpIGV4cFByb3RvW2tleV0gPSBvdXQ7XG4gIH1cbn07XG5nbG9iYWwuY29yZSA9IGNvcmU7XG4vLyB0eXBlIGJpdG1hcFxuJGV4cG9ydC5GID0gMTsgICAvLyBmb3JjZWRcbiRleHBvcnQuRyA9IDI7ICAgLy8gZ2xvYmFsXG4kZXhwb3J0LlMgPSA0OyAgIC8vIHN0YXRpY1xuJGV4cG9ydC5QID0gODsgICAvLyBwcm90b1xuJGV4cG9ydC5CID0gMTY7ICAvLyBiaW5kXG4kZXhwb3J0LlcgPSAzMjsgIC8vIHdyYXBcbiRleHBvcnQuVSA9IDY0OyAgLy8gc2FmZVxuJGV4cG9ydC5SID0gMTI4OyAvLyByZWFsIHByb3RvIG1ldGhvZCBmb3IgYGxpYnJhcnlgXG5tb2R1bGUuZXhwb3J0cyA9ICRleHBvcnQ7XG4iLCJpbXBvcnQge2FscGhhTG93ZXJTb3J0LCBJdGVtRm9yU3RvcmFnZSwgTG9jYWxTdG9yYWdlSXRlbSwgdHJpbURpY3RfYnlfbnVtYmVyVmFsdWVkQXR0cmlidXRlfSBmcm9tICcuL2NvbW1vbi5qcydcbmltcG9ydCBicm93c2VyIGZyb20gJ3dlYmV4dGVuc2lvbi1wb2x5ZmlsbCdcblxuZXhwb3J0IGNvbnN0IElOVEVSVkFMX0RFRkFVTFQgPSAxO1xuZXhwb3J0IGNvbnN0IFNFRU5fQ09VTlRfREVGQVVMVCA9IDJcblxuLy8gVGhlc2UgbGltaXRzIGFyZSBzZXQgd2l0aCBjb25zaWRlcmF0aW9uIGZvciBDaHJvbWUncyBzeW5jICYgbG9jYWwgc3RvcmFnZSBsaW1pdHMsXG4vLyBhbmQgZm9yIHRoZSBvYmplY3RzIHN0b3JlZCBieSB0aGUgZXh0ZW5zaW9uXG5jb25zdCBNQVhfU1VCU0NSSVBUSU9OUyA9IDU7XG5jb25zdCBNQVhfTE9DQUxfU1RPUkFHRV9JVEVNU19QRVJfT0JKRUNUID0gNTAwXG5leHBvcnQgY29uc3QgTUFYX1NZTkNfU1RPUkFHRV9JVEVNU19QRVJfT0JKRUNUID0gMTMwXG5leHBvcnQgY29uc3QgTUFYX1NZTkNfU1RPUkFHRV9DSEFOR0VTID0gMTAwXG5leHBvcnQgY29uc3QgTUFYX09USEVSX1NVQlNDUklQVElPTlMgPSAxMDBcblxuZXhwb3J0IGNvbnN0IFJFTU9WRUQgPSAxXG5leHBvcnQgY29uc3QgQVBQUk9WRUQgPSAyXG5leHBvcnQgY29uc3QgTE9DS0VEID0gM1xuZXhwb3J0IGNvbnN0IFVOTE9DS0VEID0gNFxuZXhwb3J0IGNvbnN0IEVESVRFRCA9IDVcbmV4cG9ydCBjb25zdCBERUxFVEVEID0gNlxuXG5jb25zdCB0cmFja1R5cGVzID0geydjaGFuZ2VzJzogW10sICdyZW1vdmVkJzoge30sICdhcHByb3ZlZCc6IHt9LCAnbG9ja2VkJzoge30sICd1bmxvY2tlZCc6IHt9fTtcblxuY29uc3QgZ2V0T2JqZWN0TmFtZSA9ICh0eXBlLCB0aGluZywgaXNVc2VyKSA9PiB7XG4gICAgaWYgKGlzVXNlcikge1xuICAgICAgICByZXR1cm4gdHlwZSsnX3VfJyt0aGluZ1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiB0eXBlKydfJyt0aGluZ1xuICAgIH1cbn1cblxuY29uc3QgYWRkVHJhY2tUeXBlcyA9IChvYmplY3QsIHRoaW5nLCBpc1VzZXI9dHJ1ZSkgPT4ge1xuICAgIE9iamVjdC5rZXlzKHRyYWNrVHlwZXMpLmZvckVhY2godHlwZSA9PiB7XG4gICAgICAgIG9iamVjdFtnZXRPYmplY3ROYW1lKHR5cGUsIHRoaW5nLCBpc1VzZXIpXSA9IHRyYWNrVHlwZXNbdHlwZV1cbiAgICB9KVxufVxuXG5leHBvcnQgY29uc3QgZ2V0T2JqZWN0TmFtZXNGb3JUaGluZyA9ICh0aGluZywgaXNVc2VyPXRydWUpID0+IHtcbiAgICBjb25zdCBuYW1lcyA9IHt9XG4gICAgT2JqZWN0LmtleXModHJhY2tUeXBlcykuZm9yRWFjaCh0eXBlID0+IHtcbiAgICAgICAgbmFtZXNbdHlwZV0gPSBnZXRPYmplY3ROYW1lKHR5cGUsIHRoaW5nLCBpc1VzZXIpXG4gICAgfSlcbiAgICByZXR1cm4gbmFtZXNcbn1cblxuY29uc3QgZ2V0VXNlckluaXQgPSAodXNlcikgPT4ge1xuICAgIGNvbnN0IHJlc3VsdCA9IHt9XG4gICAgYWRkVHJhY2tUeXBlcyhyZXN1bHQsIHVzZXIsIHRydWUpXG4gICAgcmV0dXJuIHJlc3VsdFxufVxuXG5jb25zdCBnZXRTdG9yYWdlSW5pdCA9ICgpID0+IHtcbiAgICBjb25zdCByZXN1bHQgPSB7XG4gICAgICAgIHVzZXJfc3Vic2NyaXB0aW9uczoge30sXG4gICAgICAgIG90aGVyX3N1YnNjcmlwdGlvbnM6IHt9LFxuICAgICAgICBvcHRpb25zOiB7aW50ZXJ2YWw6IElOVEVSVkFMX0RFRkFVTFQsXG4gICAgICAgICAgICAgICAgICBzZWVuX2NvdW50OiBTRUVOX0NPVU5UX0RFRkFVTFQsXG4gICAgICAgICAgICAgICAgICBjdXN0b21fY2xpZW50aWQ6ICcnLFxuICAgICAgICAgICAgICAgICAgcmVtb3ZhbF9zdGF0dXM6IHt0cmFjazogdHJ1ZSwgbm90aWZ5OiB0cnVlfSxcbiAgICAgICAgICAgICAgICAgIGxvY2tfc3RhdHVzOiB7dHJhY2s6IHRydWUsIG5vdGlmeTogdHJ1ZX0sXG4gICAgICAgICAgICAgICAgICBtb25pdG9yX3F1YXJhbnRpbmVkOiBmYWxzZSxcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgbGFzdF9jaGVjazogbnVsbCxcbiAgICAgICAgbGFzdF9jaGVja19xdWFyYW50aW5lZDogbnVsbCxcbiAgICB9XG4gICAgYWRkVHJhY2tUeXBlcyhyZXN1bHQsICdvdGhlcicsIGZhbHNlKVxuICAgIHJldHVybiByZXN1bHQ7XG59XG5cbmV4cG9ydCBjb25zdCBtYXJrRXZlcnl0aGluZ0FzU2VlbiA9ICgpID0+IHtcbiAgICByZXR1cm4gYnJvd3Nlci5zdG9yYWdlLnN5bmMuZ2V0KG51bGwpXG4gICAgLnRoZW4oc3RvcmFnZSA9PiB7XG4gICAgICAgIGNvbnN0IHVzZXJzID0gT2JqZWN0LmtleXMoc3RvcmFnZS51c2VyX3N1YnNjcmlwdGlvbnMpO1xuICAgICAgICBjb25zdCBhbGxLZXlzID0gW11cbiAgICAgICAgdXNlcnMuZm9yRWFjaCh1c2VyID0+IHtcbiAgICAgICAgICAgIG1hcmtUaGluZ0FzU2VlbihzdG9yYWdlLCB1c2VyLCB0cnVlKVxuICAgICAgICB9KVxuICAgICAgICBtYXJrVGhpbmdBc1NlZW4oc3RvcmFnZSwgJ290aGVyJywgZmFsc2UpXG4gICAgICAgIHJldHVybiBzZXRTdG9yYWdlVXBkYXRlQmFkZ2Uoc3RvcmFnZSlcbiAgICB9KVxufVxuXG5leHBvcnQgY29uc3QgbWFya1RoaW5nQXNTZWVuID0gKHN0b3JhZ2UsIHRoaW5nLCBpc1VzZXIpID0+IHtcbiAgICBjb25zdCBrZXlzID0gZ2V0T2JqZWN0TmFtZXNGb3JUaGluZyh0aGluZywgaXNVc2VyKVxuICAgIGRlbGV0ZSBrZXlzWydjaGFuZ2VzJ11cbiAgICBjb25zdCBmdWxsS2V5bmFtZXMgPSBbXVxuICAgIE9iamVjdC52YWx1ZXMoa2V5cykuZm9yRWFjaChmdWxsS2V5bmFtZSA9PiB7XG4gICAgICAgIGZ1bGxLZXluYW1lcy5wdXNoKGZ1bGxLZXluYW1lKVxuICAgIH0pXG4gICAgZnVsbEtleW5hbWVzLmZvckVhY2goZnVsbEtleW5hbWUgPT4ge1xuICAgICAgICBPYmplY3QudmFsdWVzKHN0b3JhZ2VbZnVsbEtleW5hbWVdKS5mb3JFYWNoKGl0ZW0gPT4ge1xuICAgICAgICAgICAgaXRlbS51ID0gZmFsc2VcbiAgICAgICAgfSlcbiAgICB9KVxufVxuXG5leHBvcnQgY29uc3Qgc2V0U3RvcmFnZVVwZGF0ZUJhZGdlID0gKHN0b3JhZ2UpID0+IHtcbiAgICByZXR1cm4gYnJvd3Nlci5zdG9yYWdlLnN5bmMuc2V0KHN0b3JhZ2UpXG4gICAgLnRoZW4ocmVzID0+IHtcbiAgICAgICAgcmV0dXJuIGJyb3dzZXIucnVudGltZS5zZW5kTWVzc2FnZSh7YWN0aW9uOiAndXBkYXRlLWJhZGdlJ30pXG4gICAgfSlcbn1cblxuY29uc3QgbWFya1NlZW5Gb3JTdG9yYWdlS2V5ID0gKHN0b3JhZ2UsIHN0b3JhZ2Vfa2V5cywga2V5LCBpZHMsIGlzX3VzZXIpID0+IHtcbiAgICBjb25zdCBzdG9yYWdlX2l0ZW0gPSBzdG9yYWdlW3N0b3JhZ2Vfa2V5c1trZXldXVxuICAgIE9iamVjdC5rZXlzKGlkcykuZm9yRWFjaChpZCA9PiB7XG4gICAgICAgIGlmIChpZCBpbiBzdG9yYWdlX2l0ZW0pIHtcbiAgICAgICAgICAgIHN0b3JhZ2VfaXRlbVtpZF0udSA9IGZhbHNlXG4gICAgICAgIH0gZWxzZSBpZiAoaXNfdXNlcikge1xuICAgICAgICAgICAgc3RvcmFnZV9pdGVtW2lkXSA9IG5ldyBJdGVtRm9yU3RvcmFnZShpZHNbaWRdLCBmYWxzZSlcbiAgICAgICAgfVxuICAgIH0pXG59XG5cbmV4cG9ydCBjb25zdCBtYXJrSURzQXNTZWVuSWZTdWJzY3JpYmVkID0gKHN0b3JhZ2UsIHVzZXIsIGlzX3VzZXIsIHJlbW92ZWRfaWRzLCBhcHByb3ZlZF9pZHMsIGxvY2tlZF9pZHMsIHVubG9ja2VkX2lkcywgY2FsbGJhY2sgPSAoKSA9PiB7fSkgPT4ge1xuICAgIGNvbnN0IHN0b3JhZ2Vfa2V5cyA9IGdldE9iamVjdE5hbWVzRm9yVGhpbmcodXNlciwgaXNfdXNlcilcbiAgICBkZWxldGUgc3RvcmFnZV9rZXlzWydjaGFuZ2VzJ11cbiAgICBjb25zdCB1c2VyX3N1YnNjcmliZWQgPSBzdG9yYWdlLnVzZXJfc3Vic2NyaXB0aW9uc1t1c2VyXVxuICAgIGlmICh1c2VyX3N1YnNjcmliZWQgfHwgISBpc191c2VyKSB7XG4gICAgICAgIG1hcmtTZWVuRm9yU3RvcmFnZUtleShzdG9yYWdlLCBzdG9yYWdlX2tleXMsICdyZW1vdmVkJywgcmVtb3ZlZF9pZHMsIGlzX3VzZXIpXG4gICAgICAgIG1hcmtTZWVuRm9yU3RvcmFnZUtleShzdG9yYWdlLCBzdG9yYWdlX2tleXMsICdhcHByb3ZlZCcsIGFwcHJvdmVkX2lkcywgaXNfdXNlcilcbiAgICAgICAgbWFya1NlZW5Gb3JTdG9yYWdlS2V5KHN0b3JhZ2UsIHN0b3JhZ2Vfa2V5cywgJ2xvY2tlZCcsIGxvY2tlZF9pZHMsIGlzX3VzZXIpXG4gICAgICAgIG1hcmtTZWVuRm9yU3RvcmFnZUtleShzdG9yYWdlLCBzdG9yYWdlX2tleXMsICd1bmxvY2tlZCcsIHVubG9ja2VkX2lkcywgaXNfdXNlcilcbiAgICAgICAgY2hyb21lLnN0b3JhZ2Uuc3luYy5zZXQoc3RvcmFnZSwgY2FsbGJhY2spXG4gICAgfVxuXG59XG5cbmV4cG9ydCBjb25zdCBzdWJzY3JpYmVJZCA9IChpZCwgY2FsbGJhY2sgPSAoKSA9PiB7fSkgPT4ge1xuICAgIGNvbnN0IGtleSA9ICdvdGhlcl9zdWJzY3JpcHRpb25zJ1xuICAgIGNocm9tZS5zdG9yYWdlLnN5bmMuZ2V0KGtleSwgKHJlc3VsdCkgPT4ge1xuICAgICAgICByZXN1bHRba2V5XVtpZF0gPSB7dDogTWF0aC5mbG9vcihuZXcgRGF0ZSgpLmdldFRpbWUoKS8xMDAwKX1cbiAgICAgICAgY29uc3QgaXRlbXNUb1NhdmUgPSB0cmltRGljdF9ieV9udW1iZXJWYWx1ZWRBdHRyaWJ1dGUocmVzdWx0W2tleV0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIE1BWF9PVEhFUl9TVUJTQ1JJUFRJT05TLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAndCcpXG4gICAgICAgIGNocm9tZS5zdG9yYWdlLnN5bmMuc2V0KHtba2V5XTogaXRlbXNUb1NhdmV9LCBjYWxsYmFjaylcbiAgICB9KVxufVxuZXhwb3J0IGNvbnN0IHVuc3Vic2NyaWJlSWQgPSAoaWQsIGNhbGxiYWNrID0gKCkgPT4ge30pID0+IHtcbiAgICBjb25zdCBtYWluS2V5ID0gJ290aGVyX3N1YnNjcmlwdGlvbnMnXG4gICAgY29uc3Qgb3RoZXJLZXlzID0gZ2V0T2JqZWN0TmFtZXNGb3JUaGluZygnb3RoZXInLCBmYWxzZSlcbiAgICBkZWxldGUgb3RoZXJLZXlzWydjaGFuZ2VzJ11cbiAgICBjaHJvbWUuc3RvcmFnZS5zeW5jLmdldChPYmplY3QudmFsdWVzKG90aGVyS2V5cykuY29uY2F0KG1haW5LZXkpLCAocmVzdWx0KSA9PiB7XG4gICAgICAgIGRlbGV0ZSByZXN1bHRbbWFpbktleV1baWRdXG4gICAgICAgIE9iamVjdC52YWx1ZXMob3RoZXJLZXlzKS5mb3JFYWNoKGZ1bGxLZXluYW1lID0+IHtcbiAgICAgICAgICAgIGlmIChpZCBpbiByZXN1bHRbZnVsbEtleW5hbWVdKSB7XG4gICAgICAgICAgICAgICAgZGVsZXRlIHJlc3VsdFtmdWxsS2V5bmFtZV1baWRdXG4gICAgICAgICAgICB9XG4gICAgICAgIH0pXG4gICAgICAgIGNocm9tZS5zdG9yYWdlLnN5bmMuc2V0KHJlc3VsdCwgKCkgPT4ge1xuICAgICAgICAgICAgY2hyb21lLnJ1bnRpbWUuc2VuZE1lc3NhZ2Uoe2FjdGlvbjogJ3VwZGF0ZS1iYWRnZSd9LCBjYWxsYmFjaylcbiAgICAgICAgfSlcbiAgICB9KVxufVxuZXhwb3J0IGNvbnN0IGdldFN1YnNjcmliZWRJZHMgPSAoY2FsbGJhY2sgPSAoKSA9PiB7fSkgPT4ge1xuICAgIGNvbnN0IGtleSA9ICdvdGhlcl9zdWJzY3JpcHRpb25zJ1xuICAgIGNocm9tZS5zdG9yYWdlLnN5bmMuZ2V0KGtleSwgKHJlc3VsdCkgPT4ge1xuICAgICAgICBjYWxsYmFjayhPYmplY3Qua2V5cyhyZXN1bHRba2V5XSkpXG4gICAgfSlcbn1cblxuZXhwb3J0IGNvbnN0IHN1YnNjcmliZVVzZXIgPSAodXNlciwgY2FsbGJhY2tTdWNjZXNzID0gKCkgPT4ge30sIGNhbGxiYWNrRXJyb3IgPSAoKSA9PiB7fSkgPT4ge1xuICAgIGNvbnN0IHVzZXJJbml0ID0gZ2V0VXNlckluaXQodXNlcilcbiAgICBjaHJvbWUuc3RvcmFnZS5zeW5jLmdldCgndXNlcl9zdWJzY3JpcHRpb25zJywgKHJlc3VsdCkgPT4ge1xuICAgICAgICBjb25zdCB1c2VyX3N1YnNjcmlwdGlvbnMgPSByZXN1bHQudXNlcl9zdWJzY3JpcHRpb25zXG4gICAgICAgIGlmICghICh1c2VyIGluIHVzZXJfc3Vic2NyaXB0aW9ucykpIHtcbiAgICAgICAgICAgIGlmIChPYmplY3Qua2V5cyh1c2VyX3N1YnNjcmlwdGlvbnMpLmxlbmd0aCA8IE1BWF9TVUJTQ1JJUFRJT05TKSB7XG4gICAgICAgICAgICAgICAgdXNlcl9zdWJzY3JpcHRpb25zW3VzZXJdID0gdHJ1ZVxuICAgICAgICAgICAgICAgIGNocm9tZS5zdG9yYWdlLnN5bmMuc2V0KHt1c2VyX3N1YnNjcmlwdGlvbnMsIC4uLnVzZXJJbml0fSwgY2FsbGJhY2tTdWNjZXNzKVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBjYWxsYmFja0Vycm9yKCdtYXhpbXVtIG51bWJlciBvZiBzdWJzY3JpcHRpb25zIHJlYWNoZWQnKVxuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY2FsbGJhY2tFcnJvcignYWxyZWFkeSBzdWJzY3JpYmVkIHRvIHRoaXMgdXNlcicpXG4gICAgICAgIH1cbiAgICB9KVxufVxuXG5leHBvcnQgY29uc3QgdW5zdWJzY3JpYmVVc2VyID0gKHVzZXIsIGNhbGxiYWNrKSA9PiB7XG4gICAgY29uc3QgdXNlcktleXMgPSBPYmplY3Qua2V5cyhnZXRVc2VySW5pdCh1c2VyKSlcbiAgICBjaHJvbWUuc3RvcmFnZS5zeW5jLmdldCgndXNlcl9zdWJzY3JpcHRpb25zJywgKHJlc3VsdCkgPT4ge1xuICAgICAgICBjb25zdCB1c2VyX3N1YnNjcmlwdGlvbnMgPSByZXN1bHQudXNlcl9zdWJzY3JpcHRpb25zXG4gICAgICAgIGRlbGV0ZSB1c2VyX3N1YnNjcmlwdGlvbnNbdXNlcl1cbiAgICAgICAgY2hyb21lLnN0b3JhZ2Uuc3luYy5zZXQoe3VzZXJfc3Vic2NyaXB0aW9uc30sICgpID0+IHtcbiAgICAgICAgICAgIGNocm9tZS5zdG9yYWdlLnN5bmMucmVtb3ZlKHVzZXJLZXlzLCAoKSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3QgdXNlcktleV9sb2NhbFN0b3JhZ2UgPSBnZXRPYmplY3ROYW1lKCdpdGVtcycsIHVzZXIsIHRydWUpXG4gICAgICAgICAgICAgICAgY2hyb21lLnJ1bnRpbWUuc2VuZE1lc3NhZ2Uoe2FjdGlvbjogJ3VwZGF0ZS1iYWRnZSd9KVxuICAgICAgICAgICAgICAgIGNocm9tZS5zdG9yYWdlLmxvY2FsLnJlbW92ZSh1c2VyS2V5X2xvY2FsU3RvcmFnZSwgY2FsbGJhY2spXG4gICAgICAgICAgICB9KVxuICAgICAgICB9KVxuICAgIH0pXG59XG5cbmV4cG9ydCBjb25zdCBpbml0U3RvcmFnZSA9IChjYWxsYmFjaykgPT4ge1xuICAgIGNocm9tZS5zdG9yYWdlLnN5bmMuZ2V0KG51bGwsIChzdG9yYWdlKSA9PiB7XG4gICAgICAgIGlmIChPYmplY3Qua2V5cyhzdG9yYWdlKS5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgIGNocm9tZS5zdG9yYWdlLnN5bmMuc2V0KGdldFN0b3JhZ2VJbml0KCksIGNhbGxiYWNrKVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY2FsbGJhY2soKVxuICAgICAgICB9XG4gICAgfSlcbn1cblxuZXhwb3J0IGNvbnN0IGdldFN1YnNjcmliZWRVc2Vyc193aXRoU2VlbkFuZFVuc2VlbklEcyA9IChjYWxsYmFjaykgPT4ge1xuICAgIGNocm9tZS5zdG9yYWdlLnN5bmMuZ2V0KG51bGwsIChzdG9yYWdlKSA9PiB7XG4gICAgICAgIGNvbnN0IHVzZXJzID0gT2JqZWN0LmtleXMoc3RvcmFnZS51c2VyX3N1YnNjcmlwdGlvbnMpO1xuICAgICAgICBjb25zdCB1c2Vyc193aXRoSURzID0ge31cbiAgICAgICAgdXNlcnMuZm9yRWFjaCh1c2VyID0+IHtcbiAgICAgICAgICAgIHVzZXJzX3dpdGhJRHNbdXNlcl0gPSBnZXRJRHNfdGhpbmcodXNlciwgdHJ1ZSwgc3RvcmFnZSlcbiAgICAgICAgfSlcbiAgICAgICAgdXNlcnNfd2l0aElEc1snb3RoZXInXSA9IGdldElEc190aGluZygnb3RoZXInLCBmYWxzZSwgc3RvcmFnZSlcbiAgICAgICAgY2FsbGJhY2sodXNlcnNfd2l0aElEcywgc3RvcmFnZSlcbiAgICB9KVxufVxuXG5leHBvcnQgY29uc3QgZ2V0U3Vic2NyaWJlZFVzZXJzX3dpdGhVbnNlZW5JRHMgPSAoY2FsbGJhY2spID0+IHtcbiAgICBjaHJvbWUuc3RvcmFnZS5zeW5jLmdldChudWxsLCAoc3RvcmFnZSkgPT4ge1xuICAgICAgICBjb25zdCB1c2VycyA9IE9iamVjdC5rZXlzKHN0b3JhZ2UudXNlcl9zdWJzY3JpcHRpb25zKTtcbiAgICAgICAgY29uc3QgdXNlcnNfd2l0aElEcyA9IHt9XG4gICAgICAgIHVzZXJzLmZvckVhY2godXNlciA9PiB7XG4gICAgICAgICAgICB1c2Vyc193aXRoSURzW3VzZXJdID0gZ2V0VW5zZWVuSURzX3RoaW5nKHVzZXIsIHRydWUsIHN0b3JhZ2UpXG4gICAgICAgIH0pXG4gICAgICAgIHVzZXJzX3dpdGhJRHNbJ290aGVyJ10gPSBnZXRVbnNlZW5JRHNfdGhpbmcoJ290aGVyJywgZmFsc2UsIHN0b3JhZ2UpXG4gICAgICAgIGNhbGxiYWNrKHVzZXJzX3dpdGhJRHMpXG4gICAgfSlcbn1cblxuZXhwb3J0IGNvbnN0IGdldFVuc2VlbklEc190aGluZyA9ICh0aGluZywgaXNVc2VyLCBzdG9yYWdlKSA9PiB7XG4gICAgcmV0dXJuIGdldElEc190aGluZyh0aGluZywgaXNVc2VyLCBzdG9yYWdlKVsndW5zZWVuJ11cbn1cblxuLy8gR2V0IElEcyBvZiBpdGVtcyB3aG9zZSBzdGF0dXMgaGFzIGNoYW5nZWRcbmV4cG9ydCBjb25zdCBnZXRJRHNfdGhpbmcgPSAodGhpbmcsIGlzVXNlciwgc3RvcmFnZSkgPT4ge1xuICAgIGNvbnN0IHRyYWNrX3JlbW92YWwgPSBzdG9yYWdlLm9wdGlvbnMucmVtb3ZhbF9zdGF0dXMudHJhY2tcbiAgICBjb25zdCB0cmFja19sb2NrID0gc3RvcmFnZS5vcHRpb25zLmxvY2tfc3RhdHVzLnRyYWNrXG4gICAgY29uc3QgdW5zZWVuSURzID0ge31cbiAgICBjb25zdCBzZWVuSURzID0ge31cbiAgICBsZXQgdHlwZXMgPSBbXVxuICAgIGNvbnN0IGtleXMgPSBnZXRPYmplY3ROYW1lc0ZvclRoaW5nKHRoaW5nLCBpc1VzZXIpXG4gICAgaWYgKHRyYWNrX3JlbW92YWwpIHR5cGVzLnB1c2goa2V5c1sncmVtb3ZlZCddLCBrZXlzWydhcHByb3ZlZCddKVxuICAgIGlmICh0cmFja19sb2NrKSB0eXBlcy5wdXNoKGtleXNbJ2xvY2tlZCddLCBrZXlzWyd1bmxvY2tlZCddKVxuXG4gICAgdHlwZXMuZm9yRWFjaCh0eXBlID0+IHtcbiAgICAgICAgT2JqZWN0LmtleXMoc3RvcmFnZVt0eXBlXSkuZm9yRWFjaChpZCA9PiB7XG4gICAgICAgICAgICBjb25zdCBpdGVtID0gc3RvcmFnZVt0eXBlXVtpZF1cbiAgICAgICAgICAgIGlmIChpdGVtLnUpIHVuc2VlbklEc1tpZF0gPSB0cnVlXG4gICAgICAgICAgICBlbHNlIHNlZW5JRHNbaWRdID0gdHJ1ZVxuICAgICAgICB9KVxuICAgIH0pXG4gICAgcmV0dXJuIHt1bnNlZW46IE9iamVjdC5rZXlzKHVuc2VlbklEcyksIHNlZW46IE9iamVjdC5rZXlzKHNlZW5JRHMpfVxufVxuXG5leHBvcnQgY29uc3QgZ2V0TG9jYWxTdG9yYWdlSXRlbXMgPSAodGhpbmcsIGlzVXNlcikgPT4ge1xuICAgIGNvbnN0IGtleV9sb2NhbFN0b3JhZ2UgPSBnZXRPYmplY3ROYW1lKCdpdGVtcycsIHRoaW5nLCBpc1VzZXIpXG4gICAgcmV0dXJuIGJyb3dzZXIuc3RvcmFnZS5sb2NhbC5nZXQoe1trZXlfbG9jYWxTdG9yYWdlXToge319KVxuICAgIC50aGVuKGxvY2FsU3RvcmFnZUl0ZW1zID0+IHtcbiAgICAgICAgcmV0dXJuIGxvY2FsU3RvcmFnZUl0ZW1zW2tleV9sb2NhbFN0b3JhZ2VdXG4gICAgfSlcbn1cblxuZXhwb3J0IGNvbnN0IHNhdmVMb2NhbFN0b3JhZ2VJdGVtcyA9ICh0aGluZywgaXNVc2VyLCBpdGVtc1RvU2F2ZSkgPT4ge1xuICAgIGNvbnN0IGtleV9sb2NhbFN0b3JhZ2UgPSBnZXRPYmplY3ROYW1lKCdpdGVtcycsIHRoaW5nLCBpc1VzZXIpXG4gICAgcmV0dXJuIGJyb3dzZXIuc3RvcmFnZS5sb2NhbC5zZXQoe1trZXlfbG9jYWxTdG9yYWdlXTogaXRlbXNUb1NhdmV9KVxufVxuXG5leHBvcnQgY29uc3QgYWRkTG9jYWxTdG9yYWdlSXRlbXMgPSAoaXRlbXMsIHRoaW5nLCBpc1VzZXIpID0+IHtcbiAgICBjb25zdCBrZXlfbG9jYWxTdG9yYWdlID0gZ2V0T2JqZWN0TmFtZSgnaXRlbXMnLCB0aGluZywgaXNVc2VyKVxuICAgIHJldHVybiBjaHJvbWUuc3RvcmFnZS5sb2NhbC5nZXQoe1trZXlfbG9jYWxTdG9yYWdlXToge319LCAobG9jYWxTdG9yYWdlSXRlbXMpID0+IHtcbiAgICAgICAgY29uc3Qgc3RvcmVkSXRlbXMgPSBsb2NhbFN0b3JhZ2VJdGVtc1trZXlfbG9jYWxTdG9yYWdlXVxuICAgICAgICBPYmplY3Qua2V5cyhpdGVtcykuZm9yRWFjaChpZCA9PiB7XG4gICAgICAgICAgICBzdG9yZWRJdGVtc1tpZF0gPSBpdGVtc1tpZF1cbiAgICAgICAgfSlcbiAgICAgICAgbGV0IGl0ZW1zVG9TYXZlID0gc3RvcmVkSXRlbXNcbiAgICAgICAgaWYgKE9iamVjdC5rZXlzKHN0b3JlZEl0ZW1zKS5sZW5ndGggPiBNQVhfTE9DQUxfU1RPUkFHRV9JVEVNU19QRVJfT0JKRUNUKSB7XG4gICAgICAgICAgICBpdGVtc1RvU2F2ZSA9IHRyaW1EaWN0X2J5X251bWJlclZhbHVlZEF0dHJpYnV0ZShzdG9yZWRJdGVtcywgTUFYX0xPQ0FMX1NUT1JBR0VfSVRFTVNfUEVSX09CSkVDVCwgJ28nKVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBicm93c2VyLnN0b3JhZ2UubG9jYWwuc2V0KHtba2V5X2xvY2FsU3RvcmFnZV06IGl0ZW1zVG9TYXZlfSlcbiAgICB9KVxufVxuXG5leHBvcnQgY29uc3QgZ2V0SXRlbUZyb21Mb2NhbFN0b3JhZ2UgPSAodGhpbmcsIGlzVXNlciwgaWQsIGxvY2FsU3RvcmFnZSkgPT4ge1xuICAgIGNvbnN0IGtleSA9IGdldE9iamVjdE5hbWUoJ2l0ZW1zJywgdGhpbmcsIGlzVXNlcilcbiAgICBpZiAoa2V5IGluIGxvY2FsU3RvcmFnZSkge1xuICAgICAgICBpZiAoaWQgaW4gbG9jYWxTdG9yYWdlW2tleV0pIHtcbiAgICAgICAgICAgIHJldHVybiBuZXcgTG9jYWxTdG9yYWdlSXRlbSh7b2JqZWN0OiBsb2NhbFN0b3JhZ2Vba2V5XVtpZF19KVxuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiAnJ1xufVxuXG5leHBvcnQgY29uc3QgZ2V0QWxsQ2hhbmdlcyA9IChjYWxsYmFjaykgPT4ge1xuICAgIGNocm9tZS5zdG9yYWdlLnN5bmMuZ2V0KCd1c2VyX3N1YnNjcmlwdGlvbnMnLCAocmVzdWx0KSA9PiB7XG4gICAgICAgIGNvbnN0IGtleXMgPSBbZ2V0T2JqZWN0TmFtZSgnY2hhbmdlcycsICdvdGhlcicsIGZhbHNlKV1cbiAgICAgICAgY29uc3Qga2V5VG9Vc2VyX2xvb2t1cCA9IHtjaGFuZ2VzX290aGVyOiAnb3RoZXInfVxuXG4gICAgICAgIE9iamVjdC5rZXlzKHJlc3VsdC51c2VyX3N1YnNjcmlwdGlvbnMpLmZvckVhY2godXNlciA9PiB7XG4gICAgICAgICAgICBjb25zdCBrZXkgPSBnZXRPYmplY3ROYW1lKCdjaGFuZ2VzJywgdXNlciwgdHJ1ZSlcbiAgICAgICAgICAgIGtleXMucHVzaChrZXkpXG4gICAgICAgICAgICBrZXlUb1VzZXJfbG9va3VwW2tleV0gPSB1c2VyXG4gICAgICAgIH0pXG4gICAgICAgIGNocm9tZS5zdG9yYWdlLnN5bmMuZ2V0KGtleXMsIChyZXMyKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBjaGFuZ2VzQnlVc2VyID0ge31cbiAgICAgICAgICAgIGtleXMuZm9yRWFjaChrZXkgPT4ge1xuICAgICAgICAgICAgICAgIGlmICgoa2V5IGluIHJlczIpICYmIHJlczJba2V5XS5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICAgICAgY2hhbmdlc0J5VXNlcltrZXlUb1VzZXJfbG9va3VwW2tleV1dID0gcmVzMltrZXldXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIGNhbGxiYWNrKGNoYW5nZXNCeVVzZXIpXG4gICAgICAgIH0pXG4gICAgfSlcbn1cblxuZXhwb3J0IGNvbnN0IGdldE9wdGlvbnMgPSAoY2FsbGJhY2spID0+IHtcbiAgICByZXR1cm4gYnJvd3Nlci5zdG9yYWdlLnN5bmMuZ2V0KFsndXNlcl9zdWJzY3JpcHRpb25zJywgJ290aGVyX3N1YnNjcmlwdGlvbnMnLCAnb3B0aW9ucyddKVxuICAgIC50aGVuKHJlc3VsdCA9PiB7XG4gICAgICAgIGNvbnN0IHVzZXJzID0gT2JqZWN0LmtleXMocmVzdWx0LnVzZXJfc3Vic2NyaXB0aW9ucylcbiAgICAgICAgY29uc3Qgb3RoZXJzID0gT2JqZWN0LmtleXMocmVzdWx0Lm90aGVyX3N1YnNjcmlwdGlvbnMpXG4gICAgICAgIGNvbnN0IG9wdGlvbnMgPSByZXN1bHQub3B0aW9uc1xuICAgICAgICByZXR1cm4gY2FsbGJhY2sodXNlcnMsIG90aGVycywgb3B0aW9ucylcbiAgICB9KVxuICAgIC5jYXRjaChjb25zb2xlLmxvZylcbn1cbmV4cG9ydCBjb25zdCBzYXZlT3B0aW9ucyA9IChzZWVuX2NvdW50LCBpbnRlcnZhbCwgY3VzdG9tX2NsaWVudGlkLCByZW1vdmVkX3RyYWNrLCByZW1vdmVkX25vdGlmeSwgbG9ja2VkX3RyYWNrLCBsb2NrZWRfbm90aWZ5LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhpZGVfc3Vic2NyaWJlLCBtb25pdG9yX3F1YXJhbnRpbmVkLCBjYWxsYmFjaykgPT4ge1xuICAgIGNocm9tZS5zdG9yYWdlLnN5bmMuc2V0KHtvcHRpb25zOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlZW5fY291bnQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGludGVydmFsLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdXN0b21fY2xpZW50aWQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlbW92YWxfc3RhdHVzOiB7dHJhY2s6IHJlbW92ZWRfdHJhY2ssIG5vdGlmeTogcmVtb3ZlZF9ub3RpZnl9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsb2NrX3N0YXR1czogICAge3RyYWNrOiBsb2NrZWRfdHJhY2ssICBub3RpZnk6IGxvY2tlZF9ub3RpZnl9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBoaWRlX3N1YnNjcmliZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbW9uaXRvcl9xdWFyYW50aW5lZCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9fSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYWxsYmFjaylcbn1cbiIsImltcG9ydCB7UkVNT1ZFRCwgREVMRVRFRCwgQVBQUk9WRUQsIExPQ0tFRCwgVU5MT0NLRUQsIEVESVRFRCxcbiAgICAgICAgZ2V0U3Vic2NyaWJlZFVzZXJzX3dpdGhVbnNlZW5JRHMgfSBmcm9tICcuL3N0b3JhZ2UuanMnXG5pbXBvcnQgYnJvd3NlciBmcm9tICd3ZWJleHRlbnNpb24tcG9seWZpbGwnXG5cbmV4cG9ydCBjb25zdCBBTEFSTV9OQU1FID0gJ25vdGlmeW1lJ1xuY29uc3QgbWF4UmVkZGl0Q29udGVudExlbmd0aCA9IDMwMFxuY29uc3QgQUNUSU9OX0FQSSA9IF9fQlVJTFRfRk9SX18gPT09ICdjaHJvbWUnID8gJ2FjdGlvbicgOiAnYnJvd3NlckFjdGlvbidcblxuLy8gaHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvMjU5MzM1NTYvY2hyb21lLWV4dGVuc2lvbi1vcGVuLW5ldy10YWItd2hlbi1icm93c2VyLW9wZW5lZC1pbi1iYWNrZ3JvdW5kLW1hYy8yNTkzMzk2NCMyNTkzMzk2NFxuZXhwb3J0IGNvbnN0IGNyZWF0ZVRhYiA9ICh1cmwpID0+IHtcbiAgICBjaHJvbWUudGFicy5jcmVhdGUoe3VybDp1cmx9LCAodGFiKSA9PiB7XG4gICAgICAgIGlmKCEgdGFiKSB7XG4gICAgICAgICAgICAvLyBwcm9iYWJseSBubyB3aW5kb3cgYXZhaWxhYmxlXG4gICAgICAgICAgICBjaHJvbWUud2luZG93cy5jcmVhdGUoe3VybDp1cmx9LCAod2luKSA9PiB7XG4gICAgICAgICAgICAgICAgLy8gYmV0dGVyIHRvIGZvY3VzIGFmdGVyIHdpbmRvdyBjcmVhdGlvbiBjYWxsYmFja1xuICAgICAgICAgICAgICAgIGNocm9tZS53aW5kb3dzLnVwZGF0ZSh3aW4uaWQsIHtmb2N1c2VkOiB0cnVlfSlcbiAgICAgICAgICAgIH0pXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyBiZXR0ZXIgdG8gZm9jdXMgYWZ0ZXIgdGFiIGNyZWF0aW9uIGNhbGxiYWNrXG4gICAgICAgICAgICBjaHJvbWUud2luZG93cy51cGRhdGUodGFiLndpbmRvd0lkLCB7Zm9jdXNlZDogdHJ1ZX0pXG4gICAgICAgIH1cbiAgICB9KVxufVxuXG5leHBvcnQgY29uc3QgZ2V0RnVsbElEc0Zyb21VUkwgPSAodXJsKSA9PiB7XG4gICAgY29uc3QgcGF0aCA9IHVybC5yZXBsYWNlKC9odHRwczpcXC9cXC9bXi9dKnJlKHZlKT9kZGl0LmNvbS8sICcnKVxuICAgIHJldHVybiBnZXRGdWxsSURzRnJvbVBhdGgocGF0aClcbn1cblxuY29uc3QgcmVnZXhfcGMgPSAvXlxcLyh2fHJ8dXNlcilcXC8oW14vXSspXFwvY29tbWVudHNcXC8oW14vXSspXFwvW14vXSooPzpcXC8oW14vPyYjXSspKT8vXG5jb25zdCByZWdleF91c2VyID0gL15cXC8oPzp1c2VyfHl8dSlcXC8oW14vPyYjXSspXFwvPy9cblxuZXhwb3J0IGNvbnN0IGdldEZ1bGxJRHNGcm9tUGF0aCA9IChwYXRoKSA9PiB7XG4gICAgbGV0IHBvc3RJRCA9IHVuZGVmaW5lZCwgY29tbWVudElEID0gdW5kZWZpbmVkLCB1c2VyID0gdW5kZWZpbmVkLCBzdWJyZWRkaXQgPSB1bmRlZmluZWRcbiAgICBjb25zdCBtYXRjaGVzX3BjID0gcGF0aC5tYXRjaChyZWdleF9wYylcbiAgICBjb25zdCBtYXRjaGVzX3VzZXIgPSBwYXRoLm1hdGNoKHJlZ2V4X3VzZXIpXG4gICAgaWYgKG1hdGNoZXNfcGMpIHtcbiAgICAgICAgY29uc3QgdHlwZSA9IG1hdGNoZXNfcGNbMV1cbiAgICAgICAgaWYgKHR5cGUgPT09ICd1c2VyJykge1xuICAgICAgICAgICAgdXNlciA9IG1hdGNoZXNfcGNbMl1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHN1YnJlZGRpdCA9IG1hdGNoZXNfcGNbMl1cbiAgICAgICAgfVxuICAgICAgICBpZiAobWF0Y2hlc19wY1szXSkgcG9zdElEID0gJ3QzXycrbWF0Y2hlc19wY1szXVxuICAgICAgICBpZiAobWF0Y2hlc19wY1s0XSkgY29tbWVudElEID0gJ3QxXycrbWF0Y2hlc19wY1s0XVxuICAgIH0gZWxzZSBpZiAobWF0Y2hlc191c2VyKSB7XG4gICAgICAgIHVzZXIgPSBtYXRjaGVzX3VzZXJbMV1cbiAgICB9XG4gICAgcmV0dXJuIFtwb3N0SUQsIGNvbW1lbnRJRCwgdXNlciwgc3VicmVkZGl0XVxufVxuXG5leHBvcnQgY29uc3QgcmVmb3JtYXRSZWRkaXRUZXh0ID0gKGJvZHkpID0+IHtcbiAgICByZXR1cm4gYm9keS5yZXBsYWNlKC8mYW1wOy9nLCAnJicpLnJlcGxhY2UoLyZndDsvZywgJz4nKS5yZXBsYWNlKC8mbHQ7L2csICc8JylcbiAgICAgICAgLnJlcGxhY2UoL1xccysvZywgJyAnKS5zdWJzdHIoMCwgbWF4UmVkZGl0Q29udGVudExlbmd0aClcbn1cblxuZXhwb3J0IGNvbnN0IGlzUmVtb3ZlZEl0ZW0gPSAoaXRlbSkgPT4ge1xuICAgIGlmIChpdGVtLnJlbW92YWxfcmVhc29uKSB7XG4gICAgICAgIHJldHVybiB0cnVlXG4gICAgfVxuICAgIGlmIChpc0NvbW1lbnQoaXRlbS5uYW1lKSkge1xuICAgICAgICByZXR1cm4gaXNSZW1vdmVkQ29tbWVudChpdGVtKVxuICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBpc1JlbW92ZWRQb3N0KGl0ZW0pXG4gICAgfVxufVxuXG5leHBvcnQgY29uc3QgaXNDb21tZW50ID0gKG5hbWUpID0+IHtcbiAgICByZXR1cm4gbmFtZS5zdWJzdHIoMCwyKSA9PT0gJ3QxJ1xufVxuLy8gQ2hlY2tpbmcgdGhhdCBhdXRob3Igc3RhcnRzIHdpdGggJ1snIGZvciB1c2VycGFnZS1kcml2ZW4gY29udGVudCBpcyBzdWZmaWNpZW50IHRvIHByb3ZlIGNvbW1lbnQgaXMgcmVtb3ZlZC5cbi8vIFRoaXMgd2F5LCB0aGUgY2hlY2sgaXMgaW5kaWZmZXJlbnQgdG8gbGFuZ3VhZ2UsIGluIGNhc2UgQWNjZXB0LUxhbmd1YWdlIGlzIG5vdCBzZXQgdG8gJ2VuJ1xuLy8gQWxzbyBjaGVjayBib2R5IGJlY2F1c2UgY29tbWVudHMgd2hvc2UgYXV0aG9yIGFjY291bnQgaXMgZGVsZXRlZCBtYXkgaGF2ZSB2YWxpZCB1bnJlbW92ZWQgYm9keVxuZXhwb3J0IGNvbnN0IGlzUmVtb3ZlZENvbW1lbnQgPSAoaXRlbSkgPT4ge1xuICAgIHJldHVybiAoaXRlbS5hdXRob3IucmVwbGFjZSgvXFxcXC9nLCAnJylbMF0gPT09ICdbJ1xuICAgICAgICAmJiAgICBpdGVtLmJvZHkucmVwbGFjZSgvXFxcXC9nLCAnJylbMF0gPT09ICdbJylcbn1cbmV4cG9ydCBjb25zdCBpc1VzZXJEZWxldGVkQ29tbWVudCA9IChpdGVtKSA9PiB7XG4gICAgcmV0dXJuIChpdGVtLmJvZHkucmVwbGFjZSgvXFxcXC9nLCAnJykgPT09ICdbZGVsZXRlZF0nICYmXG4gICAgICAgICAgICBpdGVtLmF1dGhvci5yZXBsYWNlKC9cXFxcL2csICcnKSA9PT0gJ1tkZWxldGVkXScpXG59XG5leHBvcnQgY29uc3QgaXNVc2VyRGVsZXRlZFBvc3QgPSAoaXRlbSkgPT4ge1xuICAgIHJldHVybiAoISBpdGVtLmlzX3JvYm90X2luZGV4YWJsZSkgJiYgaXRlbS5hdXRob3IucmVwbGFjZSgvXFxcXC9nLCAnJykgPT09ICdbZGVsZXRlZF0nXG59XG5leHBvcnQgY29uc3QgaXNVc2VyRGVsZXRlZEl0ZW0gPSAoaXRlbSkgPT4ge1xuICAgIGlmIChpc0NvbW1lbnQoaXRlbS5uYW1lKSkge1xuICAgICAgICByZXR1cm4gaXNVc2VyRGVsZXRlZENvbW1lbnQoaXRlbSlcbiAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gaXNVc2VyRGVsZXRlZFBvc3QoaXRlbSlcbiAgICB9XG59XG5leHBvcnQgY29uc3QgaXNSZW1vdmVkUG9zdCA9IChpdGVtKSA9PiB7XG4gICAgcmV0dXJuICEgaXRlbS5pc19yb2JvdF9pbmRleGFibGVcbn1cblxuZXhwb3J0IGNvbnN0IHRyaW1EaWN0X2J5X251bWJlclZhbHVlZEF0dHJpYnV0ZSA9IChkaWN0LCBtYXhOdW1JdGVtcywgbnVtYmVyVmFsdWVkQXR0cmlidXRlKSA9PiB7XG4gICAgY29uc3QgYXJyYXkgPSBzb3J0RGljdF9ieV9udW1iZXJWYWx1ZWRBdHRyaWJ1dGUoZGljdCwgbnVtYmVyVmFsdWVkQXR0cmlidXRlKVxuXG4gICAgY29uc3Qgc2hvcnRlbmVkQXJyYXkgPSBhcnJheS5zbGljZSgwLCBtYXhOdW1JdGVtcylcbiAgICBjb25zdCBuZXdEaWN0ID0ge31cbiAgICBzaG9ydGVuZWRBcnJheS5mb3JFYWNoKGl0ZW0gPT4ge1xuICAgICAgICBuZXdEaWN0W2l0ZW1bMF1dID0gaXRlbVsxXVxuICAgIH0pXG4gICAgcmV0dXJuIG5ld0RpY3Rcbn1cblxuZXhwb3J0IGNvbnN0IHNvcnREaWN0X2J5X251bWJlclZhbHVlZEF0dHJpYnV0ZSA9IChkaWN0LCBudW1iZXJWYWx1ZWRBdHRyaWJ1dGUpID0+IHtcbiAgICBsZXQgYXJyYXkgPSBPYmplY3Qua2V5cyhkaWN0KS5tYXAoa2V5ID0+IHtcbiAgICAgICAgcmV0dXJuIFtrZXksIGRpY3Rba2V5XV1cbiAgICB9KVxuICAgIGFycmF5LnNvcnQoKGEsIGIpID0+IHtcbiAgICAgICAgcmV0dXJuIGJbMV1bbnVtYmVyVmFsdWVkQXR0cmlidXRlXSAtIGFbMV1bbnVtYmVyVmFsdWVkQXR0cmlidXRlXVxuICAgIH0pXG4gICAgcmV0dXJuIGFycmF5XG59XG5cbmV4cG9ydCBjbGFzcyBJdGVtRm9yU3RvcmFnZSB7XG4gICAgY29uc3RydWN0b3IoY3JlYXRlZF91dGMsIHVuc2Vlbikge1xuICAgICAgICB0aGlzLmMgPSBjcmVhdGVkX3V0Y1xuICAgICAgICB0aGlzLnUgPSB1bnNlZW5cbiAgICB9XG4gICAgZ2V0Q3JlYXRlZFVUQygpIHsgcmV0dXJuIHRoaXMuYyB9XG4gICAgZ2V0VW5zZWVuKCkgeyByZXR1cm4gdGhpcy51IH1cbn1cblxuZXhwb3J0IGNsYXNzIENoYW5nZUZvclN0b3JhZ2Uge1xuICAgIGNvbnN0cnVjdG9yKHsgaWQgPSBudWxsLCBvYnNlcnZlZF91dGMgPSBudWxsLCBjaGFuZ2VfdHlwZSA9IG51bGwsIHNlZW5fY291bnQgPSBudWxsLCBvYmplY3QgPSBudWxsIH0pIHtcbiAgICAgICAgaWYgKG9iamVjdCkge1xuICAgICAgICAgICAgdGhpcy5pID0gb2JqZWN0LmlcbiAgICAgICAgICAgIHRoaXMubyA9IG9iamVjdC5vXG4gICAgICAgICAgICB0aGlzLmcgPSBvYmplY3QuZ1xuICAgICAgICAgICAgdGhpcy5uID0gb2JqZWN0Lm5cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuaSA9IGlkXG4gICAgICAgICAgICB0aGlzLm8gPSBvYnNlcnZlZF91dGNcbiAgICAgICAgICAgIHRoaXMuZyA9IGNoYW5nZV90eXBlXG4gICAgICAgICAgICB0aGlzLm4gPSBzZWVuX2NvdW50XG4gICAgICAgIH1cbiAgICB9XG4gICAgZ2V0SUQoKSB7IHJldHVybiB0aGlzLmkgfVxuICAgIGdldE9ic2VydmVkVVRDKCkgeyByZXR1cm4gdGhpcy5vIH1cbiAgICBnZXRDaGFuZ2VUeXBlSW50ZXJuYWwoKSB7IHJldHVybiB0aGlzLmcgfVxuICAgIGdldENoYW5nZVR5cGUoKSB7XG4gICAgICAgIHN3aXRjaCh0aGlzLmcpIHtcbiAgICAgICAgICAgIGNhc2UgUkVNT1ZFRDogcmV0dXJuICdtb2QgcmVtb3ZlZCdcbiAgICAgICAgICAgIGNhc2UgREVMRVRFRDogcmV0dXJuICd1c2VyIGRlbGV0ZWQnXG4gICAgICAgICAgICBjYXNlIEFQUFJPVkVEOiByZXR1cm4gJ2FwcHJvdmVkJ1xuICAgICAgICAgICAgY2FzZSBMT0NLRUQ6IHJldHVybiAnbG9ja2VkJ1xuICAgICAgICAgICAgY2FzZSBVTkxPQ0tFRDogcmV0dXJuICd1bmxvY2tlZCdcbiAgICAgICAgICAgIGNhc2UgRURJVEVEOiByZXR1cm4gJ2VkaXRlZCdcbiAgICAgICAgfVxuICAgIH1cbiAgICBnZXRTZWVuQ291bnQoKSB7IHJldHVybiB0aGlzLm4gfVxufVxuXG5leHBvcnQgY2xhc3MgTG9jYWxTdG9yYWdlSXRlbSB7XG4gICAgY29uc3RydWN0b3IoeyBpdGVtID0gbnVsbCwgb2JzZXJ2ZWRfdXRjID0gbnVsbCwgb2JqZWN0ID0gbnVsbCB9KSB7XG4gICAgICAgIGlmIChvYmplY3QpIHtcbiAgICAgICAgICAgIHRoaXMudCA9IG9iamVjdC50XG4gICAgICAgICAgICB0aGlzLm8gPSBvYmplY3Qub1xuICAgICAgICAgICAgdGhpcy5jID0gb2JqZWN0LmNcbiAgICAgICAgICAgIHRoaXMubiA9IG9iamVjdC5uIHx8IDAgLy8gc2Vlbl9jb3VudCwgd2hpY2ggaW5jcmVtZW50cyB3aGVuIHRoZSBzYW1lIHN0YXR1cyBpcyBvYnNlcnZlZFxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgbGV0IHRleHQgPSAnJ1xuICAgICAgICAgICAgaWYgKGlzQ29tbWVudChpdGVtLm5hbWUpKSB7XG4gICAgICAgICAgICAgICAgdGV4dCA9IHJlZm9ybWF0UmVkZGl0VGV4dChpdGVtLmJvZHkpXG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHRleHQgPSBpdGVtLnRpdGxlXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLnQgPSB0ZXh0XG4gICAgICAgICAgICB0aGlzLm8gPSBvYnNlcnZlZF91dGNcbiAgICAgICAgICAgIHRoaXMuYyA9IGl0ZW0uY3JlYXRlZF91dGNcbiAgICAgICAgICAgIHRoaXMubiA9IDBcbiAgICAgICAgfVxuICAgIH1cbiAgICBzZXRUZXh0KHRleHQpIHt0aGlzLnQgPSByZWZvcm1hdFJlZGRpdFRleHQodGV4dCl9XG4gICAgZ2V0VGV4dCgpIHsgcmV0dXJuIHRoaXMudCB9XG4gICAgZ2V0T2JzZXJ2ZWRVVEMoKSB7IHJldHVybiB0aGlzLm8gfVxuICAgIGdldENyZWF0ZWRVVEMoKSB7IHJldHVybiB0aGlzLmMgfVxuICAgIHJlc2V0U2VlbkNvdW50KCkgeyB0aGlzLm4gPSAwIH1cbiAgICBnZXRTZWVuQ291bnQoKSB7IHJldHVybiB0aGlzLm4gfVxuICAgIGluY3JlbWVudFNlZW5Db3VudCgpIHtcbiAgICAgICAgaWYgKHR5cGVvZiB0aGlzLm4gPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICB0aGlzLm4gPSAwXG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5uICs9IDFcbiAgICAgICAgcmV0dXJuIHRoaXMublxuICAgIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHNldEFsYXJtKHBlcmlvZEluTWludXRlcykge1xuICAgIGNocm9tZS5hbGFybXMuY2xlYXIoQUxBUk1fTkFNRSlcbiAgICBjaHJvbWUuYWxhcm1zLmNyZWF0ZShBTEFSTV9OQU1FLCB7ZGVsYXlJbk1pbnV0ZXM6IDEsIHBlcmlvZEluTWludXRlczogcGVyaW9kSW5NaW51dGVzfSlcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGFscGhhTG93ZXJTb3J0IChhLCBiKSB7XG4gICAgdmFyIHRleHRBID0gYS50b0xvd2VyQ2FzZSgpXG4gICAgdmFyIHRleHRCID0gYi50b0xvd2VyQ2FzZSgpXG5cbiAgICBpZiAodGV4dEEgPCB0ZXh0QikgcmV0dXJuIC0xXG4gICAgaWYgKHRleHRBID4gdGV4dEIpIHJldHVybiAxXG4gICAgcmV0dXJuIDBcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdvVG9PcHRpb25zICgpIHtcbiAgICBpZiAoY2hyb21lLnJ1bnRpbWUub3Blbk9wdGlvbnNQYWdlKSB7XG4gICAgICAgIGNocm9tZS5ydW50aW1lLm9wZW5PcHRpb25zUGFnZSgpXG4gICAgICAgIHdpbmRvdy5jbG9zZSgpIC8vY2xvc2VzIHRoZSBwb3B1cCB3aGljaCBwZXJzaXN0cyBpbiBGRlxuICAgIH0gZWxzZSB7XG4gICAgICAgIHdpbmRvdy5vcGVuKGNocm9tZS5ydW50aW1lLmdldFVSTCgnL3NyYy9vcHRpb25zLmh0bWwnKSlcbiAgICB9XG59XG5cblxuZXhwb3J0IGZ1bmN0aW9uIHNob3dFcnJvcihtZXNzYWdlLCBzZWxlY3Rvcikge1xuICAgICQoJzxkaXYgY2xhc3M9XCJyci1lcnJvclwiPicrbWVzc2FnZSsnPC9kaXY+JykuYXBwZW5kVG8oc2VsZWN0b3IpLmRlbGF5KDI0MDApLmZhZGVUbyg0MDAsIDAsIGZ1bmN0aW9uKCkgeyQodGhpcykucmVtb3ZlKCl9KVxufVxuXG4vL25vaW5zcGVjdGlvbiBKU1VudXNlZExvY2FsU3ltYm9sc1xuZXhwb3J0IGZ1bmN0aW9uIHBwcmludChvYmopIHtcbiAgICBjb25zb2xlLmxvZyhKU09OLnN0cmluZ2lmeShvYmosIG51bGwsICdcXHQnKSlcbn1cblxuXG5leHBvcnQgY29uc3QgZ2V0UHJldHR5VGltZUxlbmd0aCA9IChzZWNvbmRzKSA9PiB7XG4gICAgY29uc3QgdGhyZXNob2xkcyA9IFtbNjAsICdzZWNvbmQnLCAnc2Vjb25kcyddLCBbNjAsICdtaW51dGUnLCAnbWludXRlcyddLCBbMjQsICdob3VyJywgJ2hvdXJzJ10sIFs3LCAnZGF5JywgJ2RheXMnXSxcbiAgICBbMzY1LzEyLzcsICd3ZWVrJywgJ3dlZWtzJ10sIFsxMiwgJ21vbnRoJywgJ21vbnRocyddLCBbMTAsICd5ZWFyJywgJ3llYXJzJ10sXG4gICAgWzEwLCAnZGVjYWRlJywgJ2RlY2FkZXMnXSwgWzEwLCAnY2VudHVyeScsICdjZW50dXJpZXMnXSwgWzEwLCAnbWlsbGVuaXVtJywgJ21pbGxlbmlhJ11dXG4gICAgaWYgKHNlY29uZHMgPCA2MCkgcmV0dXJuIHNlY29uZHMgKyAnIHNlY29uZHMnXG4gICAgbGV0IHRpbWUgPSBzZWNvbmRzXG4gICAgZm9yICh2YXIgaT0wOyBpPHRocmVzaG9sZHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgbGV0IGRpdmlzb3IgPSB0aHJlc2hvbGRzW2ldWzBdXG4gICAgICAgIGxldCB0ZXh0ID0gdGhyZXNob2xkc1tpXVsxXVxuICAgICAgICBsZXQgdGV4dFBsdXJhbCA9IHRocmVzaG9sZHNbaV1bMl1cbiAgICAgICAgaWYgKHRpbWUgPCBkaXZpc29yKSB7XG4gICAgICAgICAgICBsZXQgZXh0cmEgPSAodGltZSAtIE1hdGguZmxvb3IodGltZSkpXG4gICAgICAgICAgICBsZXQgcHJldlVuaXRUaW1lID0gTWF0aC5yb3VuZChleHRyYSp0aHJlc2hvbGRzW2ktMV1bMF0pXG4gICAgICAgICAgICBpZiAodGhyZXNob2xkc1tpLTFdWzBdID09PSBwcmV2VW5pdFRpbWUpIHtcbiAgICAgICAgICAgICAgICB0aW1lICs9IDFcbiAgICAgICAgICAgICAgICBwcmV2VW5pdFRpbWUgPSAwXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoTWF0aC5mbG9vcih0aW1lKSA+IDEgfHwgTWF0aC5mbG9vcih0aW1lKSA9PSAwKSB7XG4gICAgICAgICAgICAgICAgdGV4dCA9IHRleHRQbHVyYWxcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChpID4gMSAmJiBwcmV2VW5pdFRpbWUgPiAwKSB7XG4gICAgICAgICAgICAgICAgbGV0IHJlbWFpblRleHQgPSB0aHJlc2hvbGRzW2ktMV1bMV1cbiAgICAgICAgICAgICAgICBpZiAocHJldlVuaXRUaW1lID4gMSkge1xuICAgICAgICAgICAgICAgICAgICByZW1haW5UZXh0ID0gdGhyZXNob2xkc1tpLTFdWzJdXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHRleHQgKz0gJywgJyArIFN0cmluZyhwcmV2VW5pdFRpbWUpICsgJyAnICsgcmVtYWluVGV4dFxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIFN0cmluZyhNYXRoLmZsb29yKHRpbWUpKSArICcgJyArIHRleHRcbiAgICAgICAgfVxuICAgICAgICB0aW1lID0gdGltZSAvIGRpdmlzb3JcbiAgICB9XG59XG5cbmV4cG9ydCBjb25zdCBnZXRQcmV0dHlEYXRlID0gKGNyZWF0ZWRVVEMpID0+IHtcbiAgICBjb25zdCBzZWNvbmRzID0gTWF0aC5mbG9vcigobmV3IERhdGUpLmdldFRpbWUoKS8xMDAwKS1jcmVhdGVkVVRDXG4gICAgcmV0dXJuIGdldFByZXR0eVRpbWVMZW5ndGgoc2Vjb25kcykgKyAnIGFnbydcbn1cblxuZXhwb3J0IGNvbnN0IGNyZWF0ZU5vdGlmaWNhdGlvbiA9ICh7bm90aWZpY2F0aW9uSWQsIHRpdGxlLCBtZXNzYWdlfSkgPT4ge1xuICAgIGlmIChsb2NhdGlvbi5wcm90b2NvbC5tYXRjaCgvXmh0dHAvKSkge1xuICAgICAgICBjaHJvbWUucnVudGltZS5zZW5kTWVzc2FnZSh7XG4gICAgICAgICAgICBhY3Rpb246ICdjcmVhdGUtbm90aWZpY2F0aW9uJyxcbiAgICAgICAgICAgIG9wdGlvbnM6IHtub3RpZmljYXRpb25JZCwgdGl0bGUsIG1lc3NhZ2V9XG4gICAgICAgIH0pXG4gICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKF9fQlVJTFRfRk9SX18gPT09ICdjaHJvbWUnKSB7XG4gICAgICAgICAgICByZWdpc3RyYXRpb24uc2hvd05vdGlmaWNhdGlvbih0aXRsZSwge1xuICAgICAgICAgICAgICAgIGJvZHk6IG1lc3NhZ2UsXG4gICAgICAgICAgICAgICAgZGF0YTogbm90aWZpY2F0aW9uSWQsXG4gICAgICAgICAgICAgICAgaWNvbjogJy9pY29ucy8xMjgucG5nJyxcbiAgICAgICAgICAgICAgICBtZXNzYWdlXG4gICAgICAgICAgICB9KVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgLy8gbm90aWZpY2F0aW9ucy5jcmVhdGUgZG9lcyBub3Qgd29yayBpbiBjaHJvbWUncyBtYW5pZmVzdCB2Mywgc29tZXRoaW5nIHdyb25nIHdpdGggcmVhZGluZyBpbWFnZSBkYXRhXG4gICAgICAgICAgICAvLyBodHRwczovL3N0YWNrb3ZlcmZsb3cuY29tL3F1ZXN0aW9ucy82NTU3MDMzMi9nb29nbGUtY2hyb21lLWV4dGVuc2lvbnMtdjMtZXJyb3ItaW4tZXZlbnQtaGFuZGxlci1yZWZlcmVuY2VlcnJvci1pbWFnZS1pcy1uXG4gICAgICAgICAgICAvLyBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvY2hyb21pdW0vaXNzdWVzL2RldGFpbD9pZD0xMTY4NDc3JnE9aW1hZ2UlMjBpcyUyMG5vdCUyMGRlZmluZWQlMjBub3RpZmljYXRpb24lMjBtYW5pZmVzdCUyMHYzJmNhbj0yXG4gICAgICAgICAgICBjaHJvbWUubm90aWZpY2F0aW9ucy5jcmVhdGUobm90aWZpY2F0aW9uSWQsXG4gICAgICAgICAgICAgICAge3R5cGU6ICdiYXNpYycsXG4gICAgICAgICAgICAgICAgIGljb25Vcmw6ICcvaWNvbnMvMTI4LnBuZycsXG4gICAgICAgICAgICAgICAgIHRpdGxlLCBtZXNzYWdlfSlcbiAgICAgICAgfVxuICAgIH1cbn1cblxuZXhwb3J0IGNvbnN0IHVwZGF0ZUJhZGdlVW5zZWVuQ291bnQgPSAoKSA9PiB7XG4gICAgaWYgKGxvY2F0aW9uLnByb3RvY29sLm1hdGNoKC9eaHR0cC8pKSB7XG4gICAgICAgIGNocm9tZS5ydW50aW1lLnNlbmRNZXNzYWdlKHtcbiAgICAgICAgICAgIGFjdGlvbjogJ3VwZGF0ZS1iYWRnZSdcbiAgICAgICAgfSlcbiAgICB9IGVsc2Uge1xuICAgICAgICBnZXRTdWJzY3JpYmVkVXNlcnNfd2l0aFVuc2VlbklEcyh1c2Vyc1Vuc2VlbklEcyA9PiB7XG4gICAgICAgICAgICBsZXQgdG90YWwgPSAwXG4gICAgICAgICAgICBPYmplY3QudmFsdWVzKHVzZXJzVW5zZWVuSURzKS5mb3JFYWNoKGlkcyA9PiB7XG4gICAgICAgICAgICAgICAgdG90YWwgKz0gaWRzLmxlbmd0aFxuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIGxldCB0ZXh0ID0gdG90YWwudG9TdHJpbmcoKVxuICAgICAgICAgICAgaWYgKHRvdGFsID09IDApIHRleHQgPSAnJ1xuICAgICAgICAgICAgY2hyb21lW0FDVElPTl9BUEldLnNldEJhZGdlQmFja2dyb3VuZENvbG9yKHtjb2xvcjogXCJyZWRcIn0pXG4gICAgICAgICAgICBjaHJvbWVbQUNUSU9OX0FQSV0uc2V0QmFkZ2VUZXh0KHt0ZXh0OiB0ZXh0fSlcbiAgICAgICAgfSlcbiAgICB9XG59XG4iLCIoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICBpZiAodHlwZW9mIGRlZmluZSA9PT0gXCJmdW5jdGlvblwiICYmIGRlZmluZS5hbWQpIHtcbiAgICBkZWZpbmUoXCJ3ZWJleHRlbnNpb24tcG9seWZpbGxcIiwgW1wibW9kdWxlXCJdLCBmYWN0b3J5KTtcbiAgfSBlbHNlIGlmICh0eXBlb2YgZXhwb3J0cyAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgIGZhY3RvcnkobW9kdWxlKTtcbiAgfSBlbHNlIHtcbiAgICB2YXIgbW9kID0ge1xuICAgICAgZXhwb3J0czoge31cbiAgICB9O1xuICAgIGZhY3RvcnkobW9kKTtcbiAgICBnbG9iYWwuYnJvd3NlciA9IG1vZC5leHBvcnRzO1xuICB9XG59KSh0aGlzLCBmdW5jdGlvbiAobW9kdWxlKSB7XG4gIC8qIHdlYmV4dGVuc2lvbi1wb2x5ZmlsbCAtIHYwLjUuMCAtIFRodSBTZXAgMjYgMjAxOSAyMjoyMjoyNiAqL1xuICAvKiAtKi0gTW9kZTogaW5kZW50LXRhYnMtbW9kZTogbmlsOyBqcy1pbmRlbnQtbGV2ZWw6IDIgLSotICovXG4gIC8qIHZpbTogc2V0IHN0cz0yIHN3PTIgZXQgdHc9ODA6ICovXG4gIC8qIFRoaXMgU291cmNlIENvZGUgRm9ybSBpcyBzdWJqZWN0IHRvIHRoZSB0ZXJtcyBvZiB0aGUgTW96aWxsYSBQdWJsaWNcbiAgICogTGljZW5zZSwgdi4gMi4wLiBJZiBhIGNvcHkgb2YgdGhlIE1QTCB3YXMgbm90IGRpc3RyaWJ1dGVkIHdpdGggdGhpc1xuICAgKiBmaWxlLCBZb3UgY2FuIG9idGFpbiBvbmUgYXQgaHR0cDovL21vemlsbGEub3JnL01QTC8yLjAvLiAqL1xuICBcInVzZSBzdHJpY3RcIjtcblxuICBpZiAodHlwZW9mIGJyb3dzZXIgPT09IFwidW5kZWZpbmVkXCIgfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKGJyb3dzZXIpICE9PSBPYmplY3QucHJvdG90eXBlKSB7XG4gICAgY29uc3QgQ0hST01FX1NFTkRfTUVTU0FHRV9DQUxMQkFDS19OT19SRVNQT05TRV9NRVNTQUdFID0gXCJUaGUgbWVzc2FnZSBwb3J0IGNsb3NlZCBiZWZvcmUgYSByZXNwb25zZSB3YXMgcmVjZWl2ZWQuXCI7XG4gICAgY29uc3QgU0VORF9SRVNQT05TRV9ERVBSRUNBVElPTl9XQVJOSU5HID0gXCJSZXR1cm5pbmcgYSBQcm9taXNlIGlzIHRoZSBwcmVmZXJyZWQgd2F5IHRvIHNlbmQgYSByZXBseSBmcm9tIGFuIG9uTWVzc2FnZS9vbk1lc3NhZ2VFeHRlcm5hbCBsaXN0ZW5lciwgYXMgdGhlIHNlbmRSZXNwb25zZSB3aWxsIGJlIHJlbW92ZWQgZnJvbSB0aGUgc3BlY3MgKFNlZSBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9kb2NzL01vemlsbGEvQWRkLW9ucy9XZWJFeHRlbnNpb25zL0FQSS9ydW50aW1lL29uTWVzc2FnZSlcIjtcblxuICAgIC8vIFdyYXBwaW5nIHRoZSBidWxrIG9mIHRoaXMgcG9seWZpbGwgaW4gYSBvbmUtdGltZS11c2UgZnVuY3Rpb24gaXMgYSBtaW5vclxuICAgIC8vIG9wdGltaXphdGlvbiBmb3IgRmlyZWZveC4gU2luY2UgU3BpZGVybW9ua2V5IGRvZXMgbm90IGZ1bGx5IHBhcnNlIHRoZVxuICAgIC8vIGNvbnRlbnRzIG9mIGEgZnVuY3Rpb24gdW50aWwgdGhlIGZpcnN0IHRpbWUgaXQncyBjYWxsZWQsIGFuZCBzaW5jZSBpdCB3aWxsXG4gICAgLy8gbmV2ZXIgYWN0dWFsbHkgbmVlZCB0byBiZSBjYWxsZWQsIHRoaXMgYWxsb3dzIHRoZSBwb2x5ZmlsbCB0byBiZSBpbmNsdWRlZFxuICAgIC8vIGluIEZpcmVmb3ggbmVhcmx5IGZvciBmcmVlLlxuICAgIGNvbnN0IHdyYXBBUElzID0gZXh0ZW5zaW9uQVBJcyA9PiB7XG4gICAgICAvLyBOT1RFOiBhcGlNZXRhZGF0YSBpcyBhc3NvY2lhdGVkIHRvIHRoZSBjb250ZW50IG9mIHRoZSBhcGktbWV0YWRhdGEuanNvbiBmaWxlXG4gICAgICAvLyBhdCBidWlsZCB0aW1lIGJ5IHJlcGxhY2luZyB0aGUgZm9sbG93aW5nIFwiaW5jbHVkZVwiIHdpdGggdGhlIGNvbnRlbnQgb2YgdGhlXG4gICAgICAvLyBKU09OIGZpbGUuXG4gICAgICBjb25zdCBhcGlNZXRhZGF0YSA9IHtcbiAgICAgICAgXCJhbGFybXNcIjoge1xuICAgICAgICAgIFwiY2xlYXJcIjoge1xuICAgICAgICAgICAgXCJtaW5BcmdzXCI6IDAsXG4gICAgICAgICAgICBcIm1heEFyZ3NcIjogMVxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJjbGVhckFsbFwiOiB7XG4gICAgICAgICAgICBcIm1pbkFyZ3NcIjogMCxcbiAgICAgICAgICAgIFwibWF4QXJnc1wiOiAwXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcImdldFwiOiB7XG4gICAgICAgICAgICBcIm1pbkFyZ3NcIjogMCxcbiAgICAgICAgICAgIFwibWF4QXJnc1wiOiAxXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcImdldEFsbFwiOiB7XG4gICAgICAgICAgICBcIm1pbkFyZ3NcIjogMCxcbiAgICAgICAgICAgIFwibWF4QXJnc1wiOiAwXG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBcImJvb2ttYXJrc1wiOiB7XG4gICAgICAgICAgXCJjcmVhdGVcIjoge1xuICAgICAgICAgICAgXCJtaW5BcmdzXCI6IDEsXG4gICAgICAgICAgICBcIm1heEFyZ3NcIjogMVxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJnZXRcIjoge1xuICAgICAgICAgICAgXCJtaW5BcmdzXCI6IDEsXG4gICAgICAgICAgICBcIm1heEFyZ3NcIjogMVxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJnZXRDaGlsZHJlblwiOiB7XG4gICAgICAgICAgICBcIm1pbkFyZ3NcIjogMSxcbiAgICAgICAgICAgIFwibWF4QXJnc1wiOiAxXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcImdldFJlY2VudFwiOiB7XG4gICAgICAgICAgICBcIm1pbkFyZ3NcIjogMSxcbiAgICAgICAgICAgIFwibWF4QXJnc1wiOiAxXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcImdldFN1YlRyZWVcIjoge1xuICAgICAgICAgICAgXCJtaW5BcmdzXCI6IDEsXG4gICAgICAgICAgICBcIm1heEFyZ3NcIjogMVxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJnZXRUcmVlXCI6IHtcbiAgICAgICAgICAgIFwibWluQXJnc1wiOiAwLFxuICAgICAgICAgICAgXCJtYXhBcmdzXCI6IDBcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwibW92ZVwiOiB7XG4gICAgICAgICAgICBcIm1pbkFyZ3NcIjogMixcbiAgICAgICAgICAgIFwibWF4QXJnc1wiOiAyXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcInJlbW92ZVwiOiB7XG4gICAgICAgICAgICBcIm1pbkFyZ3NcIjogMSxcbiAgICAgICAgICAgIFwibWF4QXJnc1wiOiAxXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcInJlbW92ZVRyZWVcIjoge1xuICAgICAgICAgICAgXCJtaW5BcmdzXCI6IDEsXG4gICAgICAgICAgICBcIm1heEFyZ3NcIjogMVxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJzZWFyY2hcIjoge1xuICAgICAgICAgICAgXCJtaW5BcmdzXCI6IDEsXG4gICAgICAgICAgICBcIm1heEFyZ3NcIjogMVxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJ1cGRhdGVcIjoge1xuICAgICAgICAgICAgXCJtaW5BcmdzXCI6IDIsXG4gICAgICAgICAgICBcIm1heEFyZ3NcIjogMlxuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgXCJicm93c2VyQWN0aW9uXCI6IHtcbiAgICAgICAgICBcImRpc2FibGVcIjoge1xuICAgICAgICAgICAgXCJtaW5BcmdzXCI6IDAsXG4gICAgICAgICAgICBcIm1heEFyZ3NcIjogMSxcbiAgICAgICAgICAgIFwiZmFsbGJhY2tUb05vQ2FsbGJhY2tcIjogdHJ1ZVxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJlbmFibGVcIjoge1xuICAgICAgICAgICAgXCJtaW5BcmdzXCI6IDAsXG4gICAgICAgICAgICBcIm1heEFyZ3NcIjogMSxcbiAgICAgICAgICAgIFwiZmFsbGJhY2tUb05vQ2FsbGJhY2tcIjogdHJ1ZVxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJnZXRCYWRnZUJhY2tncm91bmRDb2xvclwiOiB7XG4gICAgICAgICAgICBcIm1pbkFyZ3NcIjogMSxcbiAgICAgICAgICAgIFwibWF4QXJnc1wiOiAxXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcImdldEJhZGdlVGV4dFwiOiB7XG4gICAgICAgICAgICBcIm1pbkFyZ3NcIjogMSxcbiAgICAgICAgICAgIFwibWF4QXJnc1wiOiAxXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcImdldFBvcHVwXCI6IHtcbiAgICAgICAgICAgIFwibWluQXJnc1wiOiAxLFxuICAgICAgICAgICAgXCJtYXhBcmdzXCI6IDFcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwiZ2V0VGl0bGVcIjoge1xuICAgICAgICAgICAgXCJtaW5BcmdzXCI6IDEsXG4gICAgICAgICAgICBcIm1heEFyZ3NcIjogMVxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJvcGVuUG9wdXBcIjoge1xuICAgICAgICAgICAgXCJtaW5BcmdzXCI6IDAsXG4gICAgICAgICAgICBcIm1heEFyZ3NcIjogMFxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJzZXRCYWRnZUJhY2tncm91bmRDb2xvclwiOiB7XG4gICAgICAgICAgICBcIm1pbkFyZ3NcIjogMSxcbiAgICAgICAgICAgIFwibWF4QXJnc1wiOiAxLFxuICAgICAgICAgICAgXCJmYWxsYmFja1RvTm9DYWxsYmFja1wiOiB0cnVlXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcInNldEJhZGdlVGV4dFwiOiB7XG4gICAgICAgICAgICBcIm1pbkFyZ3NcIjogMSxcbiAgICAgICAgICAgIFwibWF4QXJnc1wiOiAxLFxuICAgICAgICAgICAgXCJmYWxsYmFja1RvTm9DYWxsYmFja1wiOiB0cnVlXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcInNldEljb25cIjoge1xuICAgICAgICAgICAgXCJtaW5BcmdzXCI6IDEsXG4gICAgICAgICAgICBcIm1heEFyZ3NcIjogMVxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJzZXRQb3B1cFwiOiB7XG4gICAgICAgICAgICBcIm1pbkFyZ3NcIjogMSxcbiAgICAgICAgICAgIFwibWF4QXJnc1wiOiAxLFxuICAgICAgICAgICAgXCJmYWxsYmFja1RvTm9DYWxsYmFja1wiOiB0cnVlXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcInNldFRpdGxlXCI6IHtcbiAgICAgICAgICAgIFwibWluQXJnc1wiOiAxLFxuICAgICAgICAgICAgXCJtYXhBcmdzXCI6IDEsXG4gICAgICAgICAgICBcImZhbGxiYWNrVG9Ob0NhbGxiYWNrXCI6IHRydWVcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIFwiYnJvd3NpbmdEYXRhXCI6IHtcbiAgICAgICAgICBcInJlbW92ZVwiOiB7XG4gICAgICAgICAgICBcIm1pbkFyZ3NcIjogMixcbiAgICAgICAgICAgIFwibWF4QXJnc1wiOiAyXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcInJlbW92ZUNhY2hlXCI6IHtcbiAgICAgICAgICAgIFwibWluQXJnc1wiOiAxLFxuICAgICAgICAgICAgXCJtYXhBcmdzXCI6IDFcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwicmVtb3ZlQ29va2llc1wiOiB7XG4gICAgICAgICAgICBcIm1pbkFyZ3NcIjogMSxcbiAgICAgICAgICAgIFwibWF4QXJnc1wiOiAxXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcInJlbW92ZURvd25sb2Fkc1wiOiB7XG4gICAgICAgICAgICBcIm1pbkFyZ3NcIjogMSxcbiAgICAgICAgICAgIFwibWF4QXJnc1wiOiAxXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcInJlbW92ZUZvcm1EYXRhXCI6IHtcbiAgICAgICAgICAgIFwibWluQXJnc1wiOiAxLFxuICAgICAgICAgICAgXCJtYXhBcmdzXCI6IDFcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwicmVtb3ZlSGlzdG9yeVwiOiB7XG4gICAgICAgICAgICBcIm1pbkFyZ3NcIjogMSxcbiAgICAgICAgICAgIFwibWF4QXJnc1wiOiAxXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcInJlbW92ZUxvY2FsU3RvcmFnZVwiOiB7XG4gICAgICAgICAgICBcIm1pbkFyZ3NcIjogMSxcbiAgICAgICAgICAgIFwibWF4QXJnc1wiOiAxXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcInJlbW92ZVBhc3N3b3Jkc1wiOiB7XG4gICAgICAgICAgICBcIm1pbkFyZ3NcIjogMSxcbiAgICAgICAgICAgIFwibWF4QXJnc1wiOiAxXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcInJlbW92ZVBsdWdpbkRhdGFcIjoge1xuICAgICAgICAgICAgXCJtaW5BcmdzXCI6IDEsXG4gICAgICAgICAgICBcIm1heEFyZ3NcIjogMVxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJzZXR0aW5nc1wiOiB7XG4gICAgICAgICAgICBcIm1pbkFyZ3NcIjogMCxcbiAgICAgICAgICAgIFwibWF4QXJnc1wiOiAwXG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBcImNvbW1hbmRzXCI6IHtcbiAgICAgICAgICBcImdldEFsbFwiOiB7XG4gICAgICAgICAgICBcIm1pbkFyZ3NcIjogMCxcbiAgICAgICAgICAgIFwibWF4QXJnc1wiOiAwXG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBcImNvbnRleHRNZW51c1wiOiB7XG4gICAgICAgICAgXCJyZW1vdmVcIjoge1xuICAgICAgICAgICAgXCJtaW5BcmdzXCI6IDEsXG4gICAgICAgICAgICBcIm1heEFyZ3NcIjogMVxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJyZW1vdmVBbGxcIjoge1xuICAgICAgICAgICAgXCJtaW5BcmdzXCI6IDAsXG4gICAgICAgICAgICBcIm1heEFyZ3NcIjogMFxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJ1cGRhdGVcIjoge1xuICAgICAgICAgICAgXCJtaW5BcmdzXCI6IDIsXG4gICAgICAgICAgICBcIm1heEFyZ3NcIjogMlxuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgXCJjb29raWVzXCI6IHtcbiAgICAgICAgICBcImdldFwiOiB7XG4gICAgICAgICAgICBcIm1pbkFyZ3NcIjogMSxcbiAgICAgICAgICAgIFwibWF4QXJnc1wiOiAxXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcImdldEFsbFwiOiB7XG4gICAgICAgICAgICBcIm1pbkFyZ3NcIjogMSxcbiAgICAgICAgICAgIFwibWF4QXJnc1wiOiAxXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcImdldEFsbENvb2tpZVN0b3Jlc1wiOiB7XG4gICAgICAgICAgICBcIm1pbkFyZ3NcIjogMCxcbiAgICAgICAgICAgIFwibWF4QXJnc1wiOiAwXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcInJlbW92ZVwiOiB7XG4gICAgICAgICAgICBcIm1pbkFyZ3NcIjogMSxcbiAgICAgICAgICAgIFwibWF4QXJnc1wiOiAxXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcInNldFwiOiB7XG4gICAgICAgICAgICBcIm1pbkFyZ3NcIjogMSxcbiAgICAgICAgICAgIFwibWF4QXJnc1wiOiAxXG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBcImRldnRvb2xzXCI6IHtcbiAgICAgICAgICBcImluc3BlY3RlZFdpbmRvd1wiOiB7XG4gICAgICAgICAgICBcImV2YWxcIjoge1xuICAgICAgICAgICAgICBcIm1pbkFyZ3NcIjogMSxcbiAgICAgICAgICAgICAgXCJtYXhBcmdzXCI6IDIsXG4gICAgICAgICAgICAgIFwic2luZ2xlQ2FsbGJhY2tBcmdcIjogZmFsc2VcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9LFxuICAgICAgICAgIFwicGFuZWxzXCI6IHtcbiAgICAgICAgICAgIFwiY3JlYXRlXCI6IHtcbiAgICAgICAgICAgICAgXCJtaW5BcmdzXCI6IDMsXG4gICAgICAgICAgICAgIFwibWF4QXJnc1wiOiAzLFxuICAgICAgICAgICAgICBcInNpbmdsZUNhbGxiYWNrQXJnXCI6IHRydWVcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIFwiZG93bmxvYWRzXCI6IHtcbiAgICAgICAgICBcImNhbmNlbFwiOiB7XG4gICAgICAgICAgICBcIm1pbkFyZ3NcIjogMSxcbiAgICAgICAgICAgIFwibWF4QXJnc1wiOiAxXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcImRvd25sb2FkXCI6IHtcbiAgICAgICAgICAgIFwibWluQXJnc1wiOiAxLFxuICAgICAgICAgICAgXCJtYXhBcmdzXCI6IDFcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwiZXJhc2VcIjoge1xuICAgICAgICAgICAgXCJtaW5BcmdzXCI6IDEsXG4gICAgICAgICAgICBcIm1heEFyZ3NcIjogMVxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJnZXRGaWxlSWNvblwiOiB7XG4gICAgICAgICAgICBcIm1pbkFyZ3NcIjogMSxcbiAgICAgICAgICAgIFwibWF4QXJnc1wiOiAyXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcIm9wZW5cIjoge1xuICAgICAgICAgICAgXCJtaW5BcmdzXCI6IDEsXG4gICAgICAgICAgICBcIm1heEFyZ3NcIjogMSxcbiAgICAgICAgICAgIFwiZmFsbGJhY2tUb05vQ2FsbGJhY2tcIjogdHJ1ZVxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJwYXVzZVwiOiB7XG4gICAgICAgICAgICBcIm1pbkFyZ3NcIjogMSxcbiAgICAgICAgICAgIFwibWF4QXJnc1wiOiAxXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcInJlbW92ZUZpbGVcIjoge1xuICAgICAgICAgICAgXCJtaW5BcmdzXCI6IDEsXG4gICAgICAgICAgICBcIm1heEFyZ3NcIjogMVxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJyZXN1bWVcIjoge1xuICAgICAgICAgICAgXCJtaW5BcmdzXCI6IDEsXG4gICAgICAgICAgICBcIm1heEFyZ3NcIjogMVxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJzZWFyY2hcIjoge1xuICAgICAgICAgICAgXCJtaW5BcmdzXCI6IDEsXG4gICAgICAgICAgICBcIm1heEFyZ3NcIjogMVxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJzaG93XCI6IHtcbiAgICAgICAgICAgIFwibWluQXJnc1wiOiAxLFxuICAgICAgICAgICAgXCJtYXhBcmdzXCI6IDEsXG4gICAgICAgICAgICBcImZhbGxiYWNrVG9Ob0NhbGxiYWNrXCI6IHRydWVcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIFwiZXh0ZW5zaW9uXCI6IHtcbiAgICAgICAgICBcImlzQWxsb3dlZEZpbGVTY2hlbWVBY2Nlc3NcIjoge1xuICAgICAgICAgICAgXCJtaW5BcmdzXCI6IDAsXG4gICAgICAgICAgICBcIm1heEFyZ3NcIjogMFxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJpc0FsbG93ZWRJbmNvZ25pdG9BY2Nlc3NcIjoge1xuICAgICAgICAgICAgXCJtaW5BcmdzXCI6IDAsXG4gICAgICAgICAgICBcIm1heEFyZ3NcIjogMFxuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgXCJoaXN0b3J5XCI6IHtcbiAgICAgICAgICBcImFkZFVybFwiOiB7XG4gICAgICAgICAgICBcIm1pbkFyZ3NcIjogMSxcbiAgICAgICAgICAgIFwibWF4QXJnc1wiOiAxXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcImRlbGV0ZUFsbFwiOiB7XG4gICAgICAgICAgICBcIm1pbkFyZ3NcIjogMCxcbiAgICAgICAgICAgIFwibWF4QXJnc1wiOiAwXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcImRlbGV0ZVJhbmdlXCI6IHtcbiAgICAgICAgICAgIFwibWluQXJnc1wiOiAxLFxuICAgICAgICAgICAgXCJtYXhBcmdzXCI6IDFcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwiZGVsZXRlVXJsXCI6IHtcbiAgICAgICAgICAgIFwibWluQXJnc1wiOiAxLFxuICAgICAgICAgICAgXCJtYXhBcmdzXCI6IDFcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwiZ2V0VmlzaXRzXCI6IHtcbiAgICAgICAgICAgIFwibWluQXJnc1wiOiAxLFxuICAgICAgICAgICAgXCJtYXhBcmdzXCI6IDFcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwic2VhcmNoXCI6IHtcbiAgICAgICAgICAgIFwibWluQXJnc1wiOiAxLFxuICAgICAgICAgICAgXCJtYXhBcmdzXCI6IDFcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIFwiaTE4blwiOiB7XG4gICAgICAgICAgXCJkZXRlY3RMYW5ndWFnZVwiOiB7XG4gICAgICAgICAgICBcIm1pbkFyZ3NcIjogMSxcbiAgICAgICAgICAgIFwibWF4QXJnc1wiOiAxXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcImdldEFjY2VwdExhbmd1YWdlc1wiOiB7XG4gICAgICAgICAgICBcIm1pbkFyZ3NcIjogMCxcbiAgICAgICAgICAgIFwibWF4QXJnc1wiOiAwXG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBcImlkZW50aXR5XCI6IHtcbiAgICAgICAgICBcImxhdW5jaFdlYkF1dGhGbG93XCI6IHtcbiAgICAgICAgICAgIFwibWluQXJnc1wiOiAxLFxuICAgICAgICAgICAgXCJtYXhBcmdzXCI6IDFcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIFwiaWRsZVwiOiB7XG4gICAgICAgICAgXCJxdWVyeVN0YXRlXCI6IHtcbiAgICAgICAgICAgIFwibWluQXJnc1wiOiAxLFxuICAgICAgICAgICAgXCJtYXhBcmdzXCI6IDFcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIFwibWFuYWdlbWVudFwiOiB7XG4gICAgICAgICAgXCJnZXRcIjoge1xuICAgICAgICAgICAgXCJtaW5BcmdzXCI6IDEsXG4gICAgICAgICAgICBcIm1heEFyZ3NcIjogMVxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJnZXRBbGxcIjoge1xuICAgICAgICAgICAgXCJtaW5BcmdzXCI6IDAsXG4gICAgICAgICAgICBcIm1heEFyZ3NcIjogMFxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJnZXRTZWxmXCI6IHtcbiAgICAgICAgICAgIFwibWluQXJnc1wiOiAwLFxuICAgICAgICAgICAgXCJtYXhBcmdzXCI6IDBcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwic2V0RW5hYmxlZFwiOiB7XG4gICAgICAgICAgICBcIm1pbkFyZ3NcIjogMixcbiAgICAgICAgICAgIFwibWF4QXJnc1wiOiAyXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcInVuaW5zdGFsbFNlbGZcIjoge1xuICAgICAgICAgICAgXCJtaW5BcmdzXCI6IDAsXG4gICAgICAgICAgICBcIm1heEFyZ3NcIjogMVxuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgXCJub3RpZmljYXRpb25zXCI6IHtcbiAgICAgICAgICBcImNsZWFyXCI6IHtcbiAgICAgICAgICAgIFwibWluQXJnc1wiOiAxLFxuICAgICAgICAgICAgXCJtYXhBcmdzXCI6IDFcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwiY3JlYXRlXCI6IHtcbiAgICAgICAgICAgIFwibWluQXJnc1wiOiAxLFxuICAgICAgICAgICAgXCJtYXhBcmdzXCI6IDJcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwiZ2V0QWxsXCI6IHtcbiAgICAgICAgICAgIFwibWluQXJnc1wiOiAwLFxuICAgICAgICAgICAgXCJtYXhBcmdzXCI6IDBcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwiZ2V0UGVybWlzc2lvbkxldmVsXCI6IHtcbiAgICAgICAgICAgIFwibWluQXJnc1wiOiAwLFxuICAgICAgICAgICAgXCJtYXhBcmdzXCI6IDBcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwidXBkYXRlXCI6IHtcbiAgICAgICAgICAgIFwibWluQXJnc1wiOiAyLFxuICAgICAgICAgICAgXCJtYXhBcmdzXCI6IDJcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIFwicGFnZUFjdGlvblwiOiB7XG4gICAgICAgICAgXCJnZXRQb3B1cFwiOiB7XG4gICAgICAgICAgICBcIm1pbkFyZ3NcIjogMSxcbiAgICAgICAgICAgIFwibWF4QXJnc1wiOiAxXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcImdldFRpdGxlXCI6IHtcbiAgICAgICAgICAgIFwibWluQXJnc1wiOiAxLFxuICAgICAgICAgICAgXCJtYXhBcmdzXCI6IDFcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwiaGlkZVwiOiB7XG4gICAgICAgICAgICBcIm1pbkFyZ3NcIjogMSxcbiAgICAgICAgICAgIFwibWF4QXJnc1wiOiAxLFxuICAgICAgICAgICAgXCJmYWxsYmFja1RvTm9DYWxsYmFja1wiOiB0cnVlXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcInNldEljb25cIjoge1xuICAgICAgICAgICAgXCJtaW5BcmdzXCI6IDEsXG4gICAgICAgICAgICBcIm1heEFyZ3NcIjogMVxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJzZXRQb3B1cFwiOiB7XG4gICAgICAgICAgICBcIm1pbkFyZ3NcIjogMSxcbiAgICAgICAgICAgIFwibWF4QXJnc1wiOiAxLFxuICAgICAgICAgICAgXCJmYWxsYmFja1RvTm9DYWxsYmFja1wiOiB0cnVlXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcInNldFRpdGxlXCI6IHtcbiAgICAgICAgICAgIFwibWluQXJnc1wiOiAxLFxuICAgICAgICAgICAgXCJtYXhBcmdzXCI6IDEsXG4gICAgICAgICAgICBcImZhbGxiYWNrVG9Ob0NhbGxiYWNrXCI6IHRydWVcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwic2hvd1wiOiB7XG4gICAgICAgICAgICBcIm1pbkFyZ3NcIjogMSxcbiAgICAgICAgICAgIFwibWF4QXJnc1wiOiAxLFxuICAgICAgICAgICAgXCJmYWxsYmFja1RvTm9DYWxsYmFja1wiOiB0cnVlXG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBcInBlcm1pc3Npb25zXCI6IHtcbiAgICAgICAgICBcImNvbnRhaW5zXCI6IHtcbiAgICAgICAgICAgIFwibWluQXJnc1wiOiAxLFxuICAgICAgICAgICAgXCJtYXhBcmdzXCI6IDFcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwiZ2V0QWxsXCI6IHtcbiAgICAgICAgICAgIFwibWluQXJnc1wiOiAwLFxuICAgICAgICAgICAgXCJtYXhBcmdzXCI6IDBcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwicmVtb3ZlXCI6IHtcbiAgICAgICAgICAgIFwibWluQXJnc1wiOiAxLFxuICAgICAgICAgICAgXCJtYXhBcmdzXCI6IDFcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwicmVxdWVzdFwiOiB7XG4gICAgICAgICAgICBcIm1pbkFyZ3NcIjogMSxcbiAgICAgICAgICAgIFwibWF4QXJnc1wiOiAxXG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBcInJ1bnRpbWVcIjoge1xuICAgICAgICAgIFwiZ2V0QmFja2dyb3VuZFBhZ2VcIjoge1xuICAgICAgICAgICAgXCJtaW5BcmdzXCI6IDAsXG4gICAgICAgICAgICBcIm1heEFyZ3NcIjogMFxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJnZXRQbGF0Zm9ybUluZm9cIjoge1xuICAgICAgICAgICAgXCJtaW5BcmdzXCI6IDAsXG4gICAgICAgICAgICBcIm1heEFyZ3NcIjogMFxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJvcGVuT3B0aW9uc1BhZ2VcIjoge1xuICAgICAgICAgICAgXCJtaW5BcmdzXCI6IDAsXG4gICAgICAgICAgICBcIm1heEFyZ3NcIjogMFxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJyZXF1ZXN0VXBkYXRlQ2hlY2tcIjoge1xuICAgICAgICAgICAgXCJtaW5BcmdzXCI6IDAsXG4gICAgICAgICAgICBcIm1heEFyZ3NcIjogMFxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJzZW5kTWVzc2FnZVwiOiB7XG4gICAgICAgICAgICBcIm1pbkFyZ3NcIjogMSxcbiAgICAgICAgICAgIFwibWF4QXJnc1wiOiAzXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcInNlbmROYXRpdmVNZXNzYWdlXCI6IHtcbiAgICAgICAgICAgIFwibWluQXJnc1wiOiAyLFxuICAgICAgICAgICAgXCJtYXhBcmdzXCI6IDJcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwic2V0VW5pbnN0YWxsVVJMXCI6IHtcbiAgICAgICAgICAgIFwibWluQXJnc1wiOiAxLFxuICAgICAgICAgICAgXCJtYXhBcmdzXCI6IDFcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIFwic2Vzc2lvbnNcIjoge1xuICAgICAgICAgIFwiZ2V0RGV2aWNlc1wiOiB7XG4gICAgICAgICAgICBcIm1pbkFyZ3NcIjogMCxcbiAgICAgICAgICAgIFwibWF4QXJnc1wiOiAxXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcImdldFJlY2VudGx5Q2xvc2VkXCI6IHtcbiAgICAgICAgICAgIFwibWluQXJnc1wiOiAwLFxuICAgICAgICAgICAgXCJtYXhBcmdzXCI6IDFcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwicmVzdG9yZVwiOiB7XG4gICAgICAgICAgICBcIm1pbkFyZ3NcIjogMCxcbiAgICAgICAgICAgIFwibWF4QXJnc1wiOiAxXG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBcInN0b3JhZ2VcIjoge1xuICAgICAgICAgIFwibG9jYWxcIjoge1xuICAgICAgICAgICAgXCJjbGVhclwiOiB7XG4gICAgICAgICAgICAgIFwibWluQXJnc1wiOiAwLFxuICAgICAgICAgICAgICBcIm1heEFyZ3NcIjogMFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIFwiZ2V0XCI6IHtcbiAgICAgICAgICAgICAgXCJtaW5BcmdzXCI6IDAsXG4gICAgICAgICAgICAgIFwibWF4QXJnc1wiOiAxXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgXCJnZXRCeXRlc0luVXNlXCI6IHtcbiAgICAgICAgICAgICAgXCJtaW5BcmdzXCI6IDAsXG4gICAgICAgICAgICAgIFwibWF4QXJnc1wiOiAxXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgXCJyZW1vdmVcIjoge1xuICAgICAgICAgICAgICBcIm1pbkFyZ3NcIjogMSxcbiAgICAgICAgICAgICAgXCJtYXhBcmdzXCI6IDFcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBcInNldFwiOiB7XG4gICAgICAgICAgICAgIFwibWluQXJnc1wiOiAxLFxuICAgICAgICAgICAgICBcIm1heEFyZ3NcIjogMVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJtYW5hZ2VkXCI6IHtcbiAgICAgICAgICAgIFwiZ2V0XCI6IHtcbiAgICAgICAgICAgICAgXCJtaW5BcmdzXCI6IDAsXG4gICAgICAgICAgICAgIFwibWF4QXJnc1wiOiAxXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgXCJnZXRCeXRlc0luVXNlXCI6IHtcbiAgICAgICAgICAgICAgXCJtaW5BcmdzXCI6IDAsXG4gICAgICAgICAgICAgIFwibWF4QXJnc1wiOiAxXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSxcbiAgICAgICAgICBcInN5bmNcIjoge1xuICAgICAgICAgICAgXCJjbGVhclwiOiB7XG4gICAgICAgICAgICAgIFwibWluQXJnc1wiOiAwLFxuICAgICAgICAgICAgICBcIm1heEFyZ3NcIjogMFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIFwiZ2V0XCI6IHtcbiAgICAgICAgICAgICAgXCJtaW5BcmdzXCI6IDAsXG4gICAgICAgICAgICAgIFwibWF4QXJnc1wiOiAxXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgXCJnZXRCeXRlc0luVXNlXCI6IHtcbiAgICAgICAgICAgICAgXCJtaW5BcmdzXCI6IDAsXG4gICAgICAgICAgICAgIFwibWF4QXJnc1wiOiAxXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgXCJyZW1vdmVcIjoge1xuICAgICAgICAgICAgICBcIm1pbkFyZ3NcIjogMSxcbiAgICAgICAgICAgICAgXCJtYXhBcmdzXCI6IDFcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBcInNldFwiOiB7XG4gICAgICAgICAgICAgIFwibWluQXJnc1wiOiAxLFxuICAgICAgICAgICAgICBcIm1heEFyZ3NcIjogMVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgXCJ0YWJzXCI6IHtcbiAgICAgICAgICBcImNhcHR1cmVWaXNpYmxlVGFiXCI6IHtcbiAgICAgICAgICAgIFwibWluQXJnc1wiOiAwLFxuICAgICAgICAgICAgXCJtYXhBcmdzXCI6IDJcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwiY3JlYXRlXCI6IHtcbiAgICAgICAgICAgIFwibWluQXJnc1wiOiAxLFxuICAgICAgICAgICAgXCJtYXhBcmdzXCI6IDFcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwiZGV0ZWN0TGFuZ3VhZ2VcIjoge1xuICAgICAgICAgICAgXCJtaW5BcmdzXCI6IDAsXG4gICAgICAgICAgICBcIm1heEFyZ3NcIjogMVxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJkaXNjYXJkXCI6IHtcbiAgICAgICAgICAgIFwibWluQXJnc1wiOiAwLFxuICAgICAgICAgICAgXCJtYXhBcmdzXCI6IDFcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwiZHVwbGljYXRlXCI6IHtcbiAgICAgICAgICAgIFwibWluQXJnc1wiOiAxLFxuICAgICAgICAgICAgXCJtYXhBcmdzXCI6IDFcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwiZXhlY3V0ZVNjcmlwdFwiOiB7XG4gICAgICAgICAgICBcIm1pbkFyZ3NcIjogMSxcbiAgICAgICAgICAgIFwibWF4QXJnc1wiOiAyXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcImdldFwiOiB7XG4gICAgICAgICAgICBcIm1pbkFyZ3NcIjogMSxcbiAgICAgICAgICAgIFwibWF4QXJnc1wiOiAxXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcImdldEN1cnJlbnRcIjoge1xuICAgICAgICAgICAgXCJtaW5BcmdzXCI6IDAsXG4gICAgICAgICAgICBcIm1heEFyZ3NcIjogMFxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJnZXRab29tXCI6IHtcbiAgICAgICAgICAgIFwibWluQXJnc1wiOiAwLFxuICAgICAgICAgICAgXCJtYXhBcmdzXCI6IDFcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwiZ2V0Wm9vbVNldHRpbmdzXCI6IHtcbiAgICAgICAgICAgIFwibWluQXJnc1wiOiAwLFxuICAgICAgICAgICAgXCJtYXhBcmdzXCI6IDFcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwiaGlnaGxpZ2h0XCI6IHtcbiAgICAgICAgICAgIFwibWluQXJnc1wiOiAxLFxuICAgICAgICAgICAgXCJtYXhBcmdzXCI6IDFcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwiaW5zZXJ0Q1NTXCI6IHtcbiAgICAgICAgICAgIFwibWluQXJnc1wiOiAxLFxuICAgICAgICAgICAgXCJtYXhBcmdzXCI6IDJcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwibW92ZVwiOiB7XG4gICAgICAgICAgICBcIm1pbkFyZ3NcIjogMixcbiAgICAgICAgICAgIFwibWF4QXJnc1wiOiAyXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcInF1ZXJ5XCI6IHtcbiAgICAgICAgICAgIFwibWluQXJnc1wiOiAxLFxuICAgICAgICAgICAgXCJtYXhBcmdzXCI6IDFcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwicmVsb2FkXCI6IHtcbiAgICAgICAgICAgIFwibWluQXJnc1wiOiAwLFxuICAgICAgICAgICAgXCJtYXhBcmdzXCI6IDJcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwicmVtb3ZlXCI6IHtcbiAgICAgICAgICAgIFwibWluQXJnc1wiOiAxLFxuICAgICAgICAgICAgXCJtYXhBcmdzXCI6IDFcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwicmVtb3ZlQ1NTXCI6IHtcbiAgICAgICAgICAgIFwibWluQXJnc1wiOiAxLFxuICAgICAgICAgICAgXCJtYXhBcmdzXCI6IDJcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwic2VuZE1lc3NhZ2VcIjoge1xuICAgICAgICAgICAgXCJtaW5BcmdzXCI6IDIsXG4gICAgICAgICAgICBcIm1heEFyZ3NcIjogM1xuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJzZXRab29tXCI6IHtcbiAgICAgICAgICAgIFwibWluQXJnc1wiOiAxLFxuICAgICAgICAgICAgXCJtYXhBcmdzXCI6IDJcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwic2V0Wm9vbVNldHRpbmdzXCI6IHtcbiAgICAgICAgICAgIFwibWluQXJnc1wiOiAxLFxuICAgICAgICAgICAgXCJtYXhBcmdzXCI6IDJcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwidXBkYXRlXCI6IHtcbiAgICAgICAgICAgIFwibWluQXJnc1wiOiAxLFxuICAgICAgICAgICAgXCJtYXhBcmdzXCI6IDJcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIFwidG9wU2l0ZXNcIjoge1xuICAgICAgICAgIFwiZ2V0XCI6IHtcbiAgICAgICAgICAgIFwibWluQXJnc1wiOiAwLFxuICAgICAgICAgICAgXCJtYXhBcmdzXCI6IDBcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIFwid2ViTmF2aWdhdGlvblwiOiB7XG4gICAgICAgICAgXCJnZXRBbGxGcmFtZXNcIjoge1xuICAgICAgICAgICAgXCJtaW5BcmdzXCI6IDEsXG4gICAgICAgICAgICBcIm1heEFyZ3NcIjogMVxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJnZXRGcmFtZVwiOiB7XG4gICAgICAgICAgICBcIm1pbkFyZ3NcIjogMSxcbiAgICAgICAgICAgIFwibWF4QXJnc1wiOiAxXG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBcIndlYlJlcXVlc3RcIjoge1xuICAgICAgICAgIFwiaGFuZGxlckJlaGF2aW9yQ2hhbmdlZFwiOiB7XG4gICAgICAgICAgICBcIm1pbkFyZ3NcIjogMCxcbiAgICAgICAgICAgIFwibWF4QXJnc1wiOiAwXG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBcIndpbmRvd3NcIjoge1xuICAgICAgICAgIFwiY3JlYXRlXCI6IHtcbiAgICAgICAgICAgIFwibWluQXJnc1wiOiAwLFxuICAgICAgICAgICAgXCJtYXhBcmdzXCI6IDFcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwiZ2V0XCI6IHtcbiAgICAgICAgICAgIFwibWluQXJnc1wiOiAxLFxuICAgICAgICAgICAgXCJtYXhBcmdzXCI6IDJcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwiZ2V0QWxsXCI6IHtcbiAgICAgICAgICAgIFwibWluQXJnc1wiOiAwLFxuICAgICAgICAgICAgXCJtYXhBcmdzXCI6IDFcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwiZ2V0Q3VycmVudFwiOiB7XG4gICAgICAgICAgICBcIm1pbkFyZ3NcIjogMCxcbiAgICAgICAgICAgIFwibWF4QXJnc1wiOiAxXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcImdldExhc3RGb2N1c2VkXCI6IHtcbiAgICAgICAgICAgIFwibWluQXJnc1wiOiAwLFxuICAgICAgICAgICAgXCJtYXhBcmdzXCI6IDFcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwicmVtb3ZlXCI6IHtcbiAgICAgICAgICAgIFwibWluQXJnc1wiOiAxLFxuICAgICAgICAgICAgXCJtYXhBcmdzXCI6IDFcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwidXBkYXRlXCI6IHtcbiAgICAgICAgICAgIFwibWluQXJnc1wiOiAyLFxuICAgICAgICAgICAgXCJtYXhBcmdzXCI6IDJcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH07XG5cbiAgICAgIGlmIChPYmplY3Qua2V5cyhhcGlNZXRhZGF0YSkubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcImFwaS1tZXRhZGF0YS5qc29uIGhhcyBub3QgYmVlbiBpbmNsdWRlZCBpbiBicm93c2VyLXBvbHlmaWxsXCIpO1xuICAgICAgfVxuXG4gICAgICAvKipcbiAgICAgICAqIEEgV2Vha01hcCBzdWJjbGFzcyB3aGljaCBjcmVhdGVzIGFuZCBzdG9yZXMgYSB2YWx1ZSBmb3IgYW55IGtleSB3aGljaCBkb2VzXG4gICAgICAgKiBub3QgZXhpc3Qgd2hlbiBhY2Nlc3NlZCwgYnV0IGJlaGF2ZXMgZXhhY3RseSBhcyBhbiBvcmRpbmFyeSBXZWFrTWFwXG4gICAgICAgKiBvdGhlcndpc2UuXG4gICAgICAgKlxuICAgICAgICogQHBhcmFtIHtmdW5jdGlvbn0gY3JlYXRlSXRlbVxuICAgICAgICogICAgICAgIEEgZnVuY3Rpb24gd2hpY2ggd2lsbCBiZSBjYWxsZWQgaW4gb3JkZXIgdG8gY3JlYXRlIHRoZSB2YWx1ZSBmb3IgYW55XG4gICAgICAgKiAgICAgICAga2V5IHdoaWNoIGRvZXMgbm90IGV4aXN0LCB0aGUgZmlyc3QgdGltZSBpdCBpcyBhY2Nlc3NlZC4gVGhlXG4gICAgICAgKiAgICAgICAgZnVuY3Rpb24gcmVjZWl2ZXMsIGFzIGl0cyBvbmx5IGFyZ3VtZW50LCB0aGUga2V5IGJlaW5nIGNyZWF0ZWQuXG4gICAgICAgKi9cbiAgICAgIGNsYXNzIERlZmF1bHRXZWFrTWFwIGV4dGVuZHMgV2Vha01hcCB7XG4gICAgICAgIGNvbnN0cnVjdG9yKGNyZWF0ZUl0ZW0sIGl0ZW1zID0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgc3VwZXIoaXRlbXMpO1xuICAgICAgICAgIHRoaXMuY3JlYXRlSXRlbSA9IGNyZWF0ZUl0ZW07XG4gICAgICAgIH1cblxuICAgICAgICBnZXQoa2V5KSB7XG4gICAgICAgICAgaWYgKCF0aGlzLmhhcyhrZXkpKSB7XG4gICAgICAgICAgICB0aGlzLnNldChrZXksIHRoaXMuY3JlYXRlSXRlbShrZXkpKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICByZXR1cm4gc3VwZXIuZ2V0KGtleSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLyoqXG4gICAgICAgKiBSZXR1cm5zIHRydWUgaWYgdGhlIGdpdmVuIG9iamVjdCBpcyBhbiBvYmplY3Qgd2l0aCBhIGB0aGVuYCBtZXRob2QsIGFuZCBjYW5cbiAgICAgICAqIHRoZXJlZm9yZSBiZSBhc3N1bWVkIHRvIGJlaGF2ZSBhcyBhIFByb21pc2UuXG4gICAgICAgKlxuICAgICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gdGVzdC5cbiAgICAgICAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHRoZSB2YWx1ZSBpcyB0aGVuYWJsZS5cbiAgICAgICAqL1xuICAgICAgY29uc3QgaXNUaGVuYWJsZSA9IHZhbHVlID0+IHtcbiAgICAgICAgcmV0dXJuIHZhbHVlICYmIHR5cGVvZiB2YWx1ZSA9PT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgdmFsdWUudGhlbiA9PT0gXCJmdW5jdGlvblwiO1xuICAgICAgfTtcblxuICAgICAgLyoqXG4gICAgICAgKiBDcmVhdGVzIGFuZCByZXR1cm5zIGEgZnVuY3Rpb24gd2hpY2gsIHdoZW4gY2FsbGVkLCB3aWxsIHJlc29sdmUgb3IgcmVqZWN0XG4gICAgICAgKiB0aGUgZ2l2ZW4gcHJvbWlzZSBiYXNlZCBvbiBob3cgaXQgaXMgY2FsbGVkOlxuICAgICAgICpcbiAgICAgICAqIC0gSWYsIHdoZW4gY2FsbGVkLCBgY2hyb21lLnJ1bnRpbWUubGFzdEVycm9yYCBjb250YWlucyBhIG5vbi1udWxsIG9iamVjdCxcbiAgICAgICAqICAgdGhlIHByb21pc2UgaXMgcmVqZWN0ZWQgd2l0aCB0aGF0IHZhbHVlLlxuICAgICAgICogLSBJZiB0aGUgZnVuY3Rpb24gaXMgY2FsbGVkIHdpdGggZXhhY3RseSBvbmUgYXJndW1lbnQsIHRoZSBwcm9taXNlIGlzXG4gICAgICAgKiAgIHJlc29sdmVkIHRvIHRoYXQgdmFsdWUuXG4gICAgICAgKiAtIE90aGVyd2lzZSwgdGhlIHByb21pc2UgaXMgcmVzb2x2ZWQgdG8gYW4gYXJyYXkgY29udGFpbmluZyBhbGwgb2YgdGhlXG4gICAgICAgKiAgIGZ1bmN0aW9uJ3MgYXJndW1lbnRzLlxuICAgICAgICpcbiAgICAgICAqIEBwYXJhbSB7b2JqZWN0fSBwcm9taXNlXG4gICAgICAgKiAgICAgICAgQW4gb2JqZWN0IGNvbnRhaW5pbmcgdGhlIHJlc29sdXRpb24gYW5kIHJlamVjdGlvbiBmdW5jdGlvbnMgb2YgYVxuICAgICAgICogICAgICAgIHByb21pc2UuXG4gICAgICAgKiBAcGFyYW0ge2Z1bmN0aW9ufSBwcm9taXNlLnJlc29sdmVcbiAgICAgICAqICAgICAgICBUaGUgcHJvbWlzZSdzIHJlc29sdXRpb24gZnVuY3Rpb24uXG4gICAgICAgKiBAcGFyYW0ge2Z1bmN0aW9ufSBwcm9taXNlLnJlamVjdGlvblxuICAgICAgICogICAgICAgIFRoZSBwcm9taXNlJ3MgcmVqZWN0aW9uIGZ1bmN0aW9uLlxuICAgICAgICogQHBhcmFtIHtvYmplY3R9IG1ldGFkYXRhXG4gICAgICAgKiAgICAgICAgTWV0YWRhdGEgYWJvdXQgdGhlIHdyYXBwZWQgbWV0aG9kIHdoaWNoIGhhcyBjcmVhdGVkIHRoZSBjYWxsYmFjay5cbiAgICAgICAqIEBwYXJhbSB7aW50ZWdlcn0gbWV0YWRhdGEubWF4UmVzb2x2ZWRBcmdzXG4gICAgICAgKiAgICAgICAgVGhlIG1heGltdW0gbnVtYmVyIG9mIGFyZ3VtZW50cyB3aGljaCBtYXkgYmUgcGFzc2VkIHRvIHRoZVxuICAgICAgICogICAgICAgIGNhbGxiYWNrIGNyZWF0ZWQgYnkgdGhlIHdyYXBwZWQgYXN5bmMgZnVuY3Rpb24uXG4gICAgICAgKlxuICAgICAgICogQHJldHVybnMge2Z1bmN0aW9ufVxuICAgICAgICogICAgICAgIFRoZSBnZW5lcmF0ZWQgY2FsbGJhY2sgZnVuY3Rpb24uXG4gICAgICAgKi9cbiAgICAgIGNvbnN0IG1ha2VDYWxsYmFjayA9IChwcm9taXNlLCBtZXRhZGF0YSkgPT4ge1xuICAgICAgICByZXR1cm4gKC4uLmNhbGxiYWNrQXJncykgPT4ge1xuICAgICAgICAgIGlmIChleHRlbnNpb25BUElzLnJ1bnRpbWUubGFzdEVycm9yKSB7XG4gICAgICAgICAgICBwcm9taXNlLnJlamVjdChleHRlbnNpb25BUElzLnJ1bnRpbWUubGFzdEVycm9yKTtcbiAgICAgICAgICB9IGVsc2UgaWYgKG1ldGFkYXRhLnNpbmdsZUNhbGxiYWNrQXJnIHx8IGNhbGxiYWNrQXJncy5sZW5ndGggPD0gMSAmJiBtZXRhZGF0YS5zaW5nbGVDYWxsYmFja0FyZyAhPT0gZmFsc2UpIHtcbiAgICAgICAgICAgIHByb21pc2UucmVzb2x2ZShjYWxsYmFja0FyZ3NbMF0pO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBwcm9taXNlLnJlc29sdmUoY2FsbGJhY2tBcmdzKTtcbiAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICB9O1xuXG4gICAgICBjb25zdCBwbHVyYWxpemVBcmd1bWVudHMgPSBudW1BcmdzID0+IG51bUFyZ3MgPT0gMSA/IFwiYXJndW1lbnRcIiA6IFwiYXJndW1lbnRzXCI7XG5cbiAgICAgIC8qKlxuICAgICAgICogQ3JlYXRlcyBhIHdyYXBwZXIgZnVuY3Rpb24gZm9yIGEgbWV0aG9kIHdpdGggdGhlIGdpdmVuIG5hbWUgYW5kIG1ldGFkYXRhLlxuICAgICAgICpcbiAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lXG4gICAgICAgKiAgICAgICAgVGhlIG5hbWUgb2YgdGhlIG1ldGhvZCB3aGljaCBpcyBiZWluZyB3cmFwcGVkLlxuICAgICAgICogQHBhcmFtIHtvYmplY3R9IG1ldGFkYXRhXG4gICAgICAgKiAgICAgICAgTWV0YWRhdGEgYWJvdXQgdGhlIG1ldGhvZCBiZWluZyB3cmFwcGVkLlxuICAgICAgICogQHBhcmFtIHtpbnRlZ2VyfSBtZXRhZGF0YS5taW5BcmdzXG4gICAgICAgKiAgICAgICAgVGhlIG1pbmltdW0gbnVtYmVyIG9mIGFyZ3VtZW50cyB3aGljaCBtdXN0IGJlIHBhc3NlZCB0byB0aGVcbiAgICAgICAqICAgICAgICBmdW5jdGlvbi4gSWYgY2FsbGVkIHdpdGggZmV3ZXIgdGhhbiB0aGlzIG51bWJlciBvZiBhcmd1bWVudHMsIHRoZVxuICAgICAgICogICAgICAgIHdyYXBwZXIgd2lsbCByYWlzZSBhbiBleGNlcHRpb24uXG4gICAgICAgKiBAcGFyYW0ge2ludGVnZXJ9IG1ldGFkYXRhLm1heEFyZ3NcbiAgICAgICAqICAgICAgICBUaGUgbWF4aW11bSBudW1iZXIgb2YgYXJndW1lbnRzIHdoaWNoIG1heSBiZSBwYXNzZWQgdG8gdGhlXG4gICAgICAgKiAgICAgICAgZnVuY3Rpb24uIElmIGNhbGxlZCB3aXRoIG1vcmUgdGhhbiB0aGlzIG51bWJlciBvZiBhcmd1bWVudHMsIHRoZVxuICAgICAgICogICAgICAgIHdyYXBwZXIgd2lsbCByYWlzZSBhbiBleGNlcHRpb24uXG4gICAgICAgKiBAcGFyYW0ge2ludGVnZXJ9IG1ldGFkYXRhLm1heFJlc29sdmVkQXJnc1xuICAgICAgICogICAgICAgIFRoZSBtYXhpbXVtIG51bWJlciBvZiBhcmd1bWVudHMgd2hpY2ggbWF5IGJlIHBhc3NlZCB0byB0aGVcbiAgICAgICAqICAgICAgICBjYWxsYmFjayBjcmVhdGVkIGJ5IHRoZSB3cmFwcGVkIGFzeW5jIGZ1bmN0aW9uLlxuICAgICAgICpcbiAgICAgICAqIEByZXR1cm5zIHtmdW5jdGlvbihvYmplY3QsIC4uLiopfVxuICAgICAgICogICAgICAgVGhlIGdlbmVyYXRlZCB3cmFwcGVyIGZ1bmN0aW9uLlxuICAgICAgICovXG4gICAgICBjb25zdCB3cmFwQXN5bmNGdW5jdGlvbiA9IChuYW1lLCBtZXRhZGF0YSkgPT4ge1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24gYXN5bmNGdW5jdGlvbldyYXBwZXIodGFyZ2V0LCAuLi5hcmdzKSB7XG4gICAgICAgICAgaWYgKGFyZ3MubGVuZ3RoIDwgbWV0YWRhdGEubWluQXJncykge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBFeHBlY3RlZCBhdCBsZWFzdCAke21ldGFkYXRhLm1pbkFyZ3N9ICR7cGx1cmFsaXplQXJndW1lbnRzKG1ldGFkYXRhLm1pbkFyZ3MpfSBmb3IgJHtuYW1lfSgpLCBnb3QgJHthcmdzLmxlbmd0aH1gKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAoYXJncy5sZW5ndGggPiBtZXRhZGF0YS5tYXhBcmdzKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYEV4cGVjdGVkIGF0IG1vc3QgJHttZXRhZGF0YS5tYXhBcmdzfSAke3BsdXJhbGl6ZUFyZ3VtZW50cyhtZXRhZGF0YS5tYXhBcmdzKX0gZm9yICR7bmFtZX0oKSwgZ290ICR7YXJncy5sZW5ndGh9YCk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgICAgICAgIGlmIChtZXRhZGF0YS5mYWxsYmFja1RvTm9DYWxsYmFjaykge1xuICAgICAgICAgICAgICAvLyBUaGlzIEFQSSBtZXRob2QgaGFzIGN1cnJlbnRseSBubyBjYWxsYmFjayBvbiBDaHJvbWUsIGJ1dCBpdCByZXR1cm4gYSBwcm9taXNlIG9uIEZpcmVmb3gsXG4gICAgICAgICAgICAgIC8vIGFuZCBzbyB0aGUgcG9seWZpbGwgd2lsbCB0cnkgdG8gY2FsbCBpdCB3aXRoIGEgY2FsbGJhY2sgZmlyc3QsIGFuZCBpdCB3aWxsIGZhbGxiYWNrXG4gICAgICAgICAgICAgIC8vIHRvIG5vdCBwYXNzaW5nIHRoZSBjYWxsYmFjayBpZiB0aGUgZmlyc3QgY2FsbCBmYWlscy5cbiAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICB0YXJnZXRbbmFtZV0oLi4uYXJncywgbWFrZUNhbGxiYWNrKHsgcmVzb2x2ZSwgcmVqZWN0IH0sIG1ldGFkYXRhKSk7XG4gICAgICAgICAgICAgIH0gY2F0Y2ggKGNiRXJyb3IpIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oYCR7bmFtZX0gQVBJIG1ldGhvZCBkb2Vzbid0IHNlZW0gdG8gc3VwcG9ydCB0aGUgY2FsbGJhY2sgcGFyYW1ldGVyLCBgICsgXCJmYWxsaW5nIGJhY2sgdG8gY2FsbCBpdCB3aXRob3V0IGEgY2FsbGJhY2s6IFwiLCBjYkVycm9yKTtcblxuICAgICAgICAgICAgICAgIHRhcmdldFtuYW1lXSguLi5hcmdzKTtcblxuICAgICAgICAgICAgICAgIC8vIFVwZGF0ZSB0aGUgQVBJIG1ldGhvZCBtZXRhZGF0YSwgc28gdGhhdCB0aGUgbmV4dCBBUEkgY2FsbHMgd2lsbCBub3QgdHJ5IHRvXG4gICAgICAgICAgICAgICAgLy8gdXNlIHRoZSB1bnN1cHBvcnRlZCBjYWxsYmFjayBhbnltb3JlLlxuICAgICAgICAgICAgICAgIG1ldGFkYXRhLmZhbGxiYWNrVG9Ob0NhbGxiYWNrID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgbWV0YWRhdGEubm9DYWxsYmFjayA9IHRydWU7XG5cbiAgICAgICAgICAgICAgICByZXNvbHZlKCk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSBpZiAobWV0YWRhdGEubm9DYWxsYmFjaykge1xuICAgICAgICAgICAgICB0YXJnZXRbbmFtZV0oLi4uYXJncyk7XG4gICAgICAgICAgICAgIHJlc29sdmUoKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHRhcmdldFtuYW1lXSguLi5hcmdzLCBtYWtlQ2FsbGJhY2soeyByZXNvbHZlLCByZWplY3QgfSwgbWV0YWRhdGEpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KTtcbiAgICAgICAgfTtcbiAgICAgIH07XG5cbiAgICAgIC8qKlxuICAgICAgICogV3JhcHMgYW4gZXhpc3RpbmcgbWV0aG9kIG9mIHRoZSB0YXJnZXQgb2JqZWN0LCBzbyB0aGF0IGNhbGxzIHRvIGl0IGFyZVxuICAgICAgICogaW50ZXJjZXB0ZWQgYnkgdGhlIGdpdmVuIHdyYXBwZXIgZnVuY3Rpb24uIFRoZSB3cmFwcGVyIGZ1bmN0aW9uIHJlY2VpdmVzLFxuICAgICAgICogYXMgaXRzIGZpcnN0IGFyZ3VtZW50LCB0aGUgb3JpZ2luYWwgYHRhcmdldGAgb2JqZWN0LCBmb2xsb3dlZCBieSBlYWNoIG9mXG4gICAgICAgKiB0aGUgYXJndW1lbnRzIHBhc3NlZCB0byB0aGUgb3JpZ2luYWwgbWV0aG9kLlxuICAgICAgICpcbiAgICAgICAqIEBwYXJhbSB7b2JqZWN0fSB0YXJnZXRcbiAgICAgICAqICAgICAgICBUaGUgb3JpZ2luYWwgdGFyZ2V0IG9iamVjdCB0aGF0IHRoZSB3cmFwcGVkIG1ldGhvZCBiZWxvbmdzIHRvLlxuICAgICAgICogQHBhcmFtIHtmdW5jdGlvbn0gbWV0aG9kXG4gICAgICAgKiAgICAgICAgVGhlIG1ldGhvZCBiZWluZyB3cmFwcGVkLiBUaGlzIGlzIHVzZWQgYXMgdGhlIHRhcmdldCBvZiB0aGUgUHJveHlcbiAgICAgICAqICAgICAgICBvYmplY3Qgd2hpY2ggaXMgY3JlYXRlZCB0byB3cmFwIHRoZSBtZXRob2QuXG4gICAgICAgKiBAcGFyYW0ge2Z1bmN0aW9ufSB3cmFwcGVyXG4gICAgICAgKiAgICAgICAgVGhlIHdyYXBwZXIgZnVuY3Rpb24gd2hpY2ggaXMgY2FsbGVkIGluIHBsYWNlIG9mIGEgZGlyZWN0IGludm9jYXRpb25cbiAgICAgICAqICAgICAgICBvZiB0aGUgd3JhcHBlZCBtZXRob2QuXG4gICAgICAgKlxuICAgICAgICogQHJldHVybnMge1Byb3h5PGZ1bmN0aW9uPn1cbiAgICAgICAqICAgICAgICBBIFByb3h5IG9iamVjdCBmb3IgdGhlIGdpdmVuIG1ldGhvZCwgd2hpY2ggaW52b2tlcyB0aGUgZ2l2ZW4gd3JhcHBlclxuICAgICAgICogICAgICAgIG1ldGhvZCBpbiBpdHMgcGxhY2UuXG4gICAgICAgKi9cbiAgICAgIGNvbnN0IHdyYXBNZXRob2QgPSAodGFyZ2V0LCBtZXRob2QsIHdyYXBwZXIpID0+IHtcbiAgICAgICAgcmV0dXJuIG5ldyBQcm94eShtZXRob2QsIHtcbiAgICAgICAgICBhcHBseSh0YXJnZXRNZXRob2QsIHRoaXNPYmosIGFyZ3MpIHtcbiAgICAgICAgICAgIHJldHVybiB3cmFwcGVyLmNhbGwodGhpc09iaiwgdGFyZ2V0LCAuLi5hcmdzKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfTtcblxuICAgICAgbGV0IGhhc093blByb3BlcnR5ID0gRnVuY3Rpb24uY2FsbC5iaW5kKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkpO1xuXG4gICAgICAvKipcbiAgICAgICAqIFdyYXBzIGFuIG9iamVjdCBpbiBhIFByb3h5IHdoaWNoIGludGVyY2VwdHMgYW5kIHdyYXBzIGNlcnRhaW4gbWV0aG9kc1xuICAgICAgICogYmFzZWQgb24gdGhlIGdpdmVuIGB3cmFwcGVyc2AgYW5kIGBtZXRhZGF0YWAgb2JqZWN0cy5cbiAgICAgICAqXG4gICAgICAgKiBAcGFyYW0ge29iamVjdH0gdGFyZ2V0XG4gICAgICAgKiAgICAgICAgVGhlIHRhcmdldCBvYmplY3QgdG8gd3JhcC5cbiAgICAgICAqXG4gICAgICAgKiBAcGFyYW0ge29iamVjdH0gW3dyYXBwZXJzID0ge31dXG4gICAgICAgKiAgICAgICAgQW4gb2JqZWN0IHRyZWUgY29udGFpbmluZyB3cmFwcGVyIGZ1bmN0aW9ucyBmb3Igc3BlY2lhbCBjYXNlcy4gQW55XG4gICAgICAgKiAgICAgICAgZnVuY3Rpb24gcHJlc2VudCBpbiB0aGlzIG9iamVjdCB0cmVlIGlzIGNhbGxlZCBpbiBwbGFjZSBvZiB0aGVcbiAgICAgICAqICAgICAgICBtZXRob2QgaW4gdGhlIHNhbWUgbG9jYXRpb24gaW4gdGhlIGB0YXJnZXRgIG9iamVjdCB0cmVlLiBUaGVzZVxuICAgICAgICogICAgICAgIHdyYXBwZXIgbWV0aG9kcyBhcmUgaW52b2tlZCBhcyBkZXNjcmliZWQgaW4ge0BzZWUgd3JhcE1ldGhvZH0uXG4gICAgICAgKlxuICAgICAgICogQHBhcmFtIHtvYmplY3R9IFttZXRhZGF0YSA9IHt9XVxuICAgICAgICogICAgICAgIEFuIG9iamVjdCB0cmVlIGNvbnRhaW5pbmcgbWV0YWRhdGEgdXNlZCB0byBhdXRvbWF0aWNhbGx5IGdlbmVyYXRlXG4gICAgICAgKiAgICAgICAgUHJvbWlzZS1iYXNlZCB3cmFwcGVyIGZ1bmN0aW9ucyBmb3IgYXN5bmNocm9ub3VzLiBBbnkgZnVuY3Rpb24gaW5cbiAgICAgICAqICAgICAgICB0aGUgYHRhcmdldGAgb2JqZWN0IHRyZWUgd2hpY2ggaGFzIGEgY29ycmVzcG9uZGluZyBtZXRhZGF0YSBvYmplY3RcbiAgICAgICAqICAgICAgICBpbiB0aGUgc2FtZSBsb2NhdGlvbiBpbiB0aGUgYG1ldGFkYXRhYCB0cmVlIGlzIHJlcGxhY2VkIHdpdGggYW5cbiAgICAgICAqICAgICAgICBhdXRvbWF0aWNhbGx5LWdlbmVyYXRlZCB3cmFwcGVyIGZ1bmN0aW9uLCBhcyBkZXNjcmliZWQgaW5cbiAgICAgICAqICAgICAgICB7QHNlZSB3cmFwQXN5bmNGdW5jdGlvbn1cbiAgICAgICAqXG4gICAgICAgKiBAcmV0dXJucyB7UHJveHk8b2JqZWN0Pn1cbiAgICAgICAqL1xuICAgICAgY29uc3Qgd3JhcE9iamVjdCA9ICh0YXJnZXQsIHdyYXBwZXJzID0ge30sIG1ldGFkYXRhID0ge30pID0+IHtcbiAgICAgICAgbGV0IGNhY2hlID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICAgICAgbGV0IGhhbmRsZXJzID0ge1xuICAgICAgICAgIGhhcyhwcm94eVRhcmdldCwgcHJvcCkge1xuICAgICAgICAgICAgcmV0dXJuIHByb3AgaW4gdGFyZ2V0IHx8IHByb3AgaW4gY2FjaGU7XG4gICAgICAgICAgfSxcblxuICAgICAgICAgIGdldChwcm94eVRhcmdldCwgcHJvcCwgcmVjZWl2ZXIpIHtcbiAgICAgICAgICAgIGlmIChwcm9wIGluIGNhY2hlKSB7XG4gICAgICAgICAgICAgIHJldHVybiBjYWNoZVtwcm9wXTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKCEocHJvcCBpbiB0YXJnZXQpKSB7XG4gICAgICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGxldCB2YWx1ZSA9IHRhcmdldFtwcm9wXTtcblxuICAgICAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgICAgICAgIC8vIFRoaXMgaXMgYSBtZXRob2Qgb24gdGhlIHVuZGVybHlpbmcgb2JqZWN0LiBDaGVjayBpZiB3ZSBuZWVkIHRvIGRvXG4gICAgICAgICAgICAgIC8vIGFueSB3cmFwcGluZy5cblxuICAgICAgICAgICAgICBpZiAodHlwZW9mIHdyYXBwZXJzW3Byb3BdID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgICAgICAgICAvLyBXZSBoYXZlIGEgc3BlY2lhbC1jYXNlIHdyYXBwZXIgZm9yIHRoaXMgbWV0aG9kLlxuICAgICAgICAgICAgICAgIHZhbHVlID0gd3JhcE1ldGhvZCh0YXJnZXQsIHRhcmdldFtwcm9wXSwgd3JhcHBlcnNbcHJvcF0pO1xuICAgICAgICAgICAgICB9IGVsc2UgaWYgKGhhc093blByb3BlcnR5KG1ldGFkYXRhLCBwcm9wKSkge1xuICAgICAgICAgICAgICAgIC8vIFRoaXMgaXMgYW4gYXN5bmMgbWV0aG9kIHRoYXQgd2UgaGF2ZSBtZXRhZGF0YSBmb3IuIENyZWF0ZSBhXG4gICAgICAgICAgICAgICAgLy8gUHJvbWlzZSB3cmFwcGVyIGZvciBpdC5cbiAgICAgICAgICAgICAgICBsZXQgd3JhcHBlciA9IHdyYXBBc3luY0Z1bmN0aW9uKHByb3AsIG1ldGFkYXRhW3Byb3BdKTtcbiAgICAgICAgICAgICAgICB2YWx1ZSA9IHdyYXBNZXRob2QodGFyZ2V0LCB0YXJnZXRbcHJvcF0sIHdyYXBwZXIpO1xuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIC8vIFRoaXMgaXMgYSBtZXRob2QgdGhhdCB3ZSBkb24ndCBrbm93IG9yIGNhcmUgYWJvdXQuIFJldHVybiB0aGVcbiAgICAgICAgICAgICAgICAvLyBvcmlnaW5hbCBtZXRob2QsIGJvdW5kIHRvIHRoZSB1bmRlcmx5aW5nIG9iamVjdC5cbiAgICAgICAgICAgICAgICB2YWx1ZSA9IHZhbHVlLmJpbmQodGFyZ2V0KTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIGlmICh0eXBlb2YgdmFsdWUgPT09IFwib2JqZWN0XCIgJiYgdmFsdWUgIT09IG51bGwgJiYgKGhhc093blByb3BlcnR5KHdyYXBwZXJzLCBwcm9wKSB8fCBoYXNPd25Qcm9wZXJ0eShtZXRhZGF0YSwgcHJvcCkpKSB7XG4gICAgICAgICAgICAgIC8vIFRoaXMgaXMgYW4gb2JqZWN0IHRoYXQgd2UgbmVlZCB0byBkbyBzb21lIHdyYXBwaW5nIGZvciB0aGUgY2hpbGRyZW5cbiAgICAgICAgICAgICAgLy8gb2YuIENyZWF0ZSBhIHN1Yi1vYmplY3Qgd3JhcHBlciBmb3IgaXQgd2l0aCB0aGUgYXBwcm9wcmlhdGUgY2hpbGRcbiAgICAgICAgICAgICAgLy8gbWV0YWRhdGEuXG4gICAgICAgICAgICAgIHZhbHVlID0gd3JhcE9iamVjdCh2YWx1ZSwgd3JhcHBlcnNbcHJvcF0sIG1ldGFkYXRhW3Byb3BdKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIC8vIFdlIGRvbid0IG5lZWQgdG8gZG8gYW55IHdyYXBwaW5nIGZvciB0aGlzIHByb3BlcnR5LFxuICAgICAgICAgICAgICAvLyBzbyBqdXN0IGZvcndhcmQgYWxsIGFjY2VzcyB0byB0aGUgdW5kZXJseWluZyBvYmplY3QuXG4gICAgICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShjYWNoZSwgcHJvcCwge1xuICAgICAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgICAgIGdldCgpIHtcbiAgICAgICAgICAgICAgICAgIHJldHVybiB0YXJnZXRbcHJvcF07XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBzZXQodmFsdWUpIHtcbiAgICAgICAgICAgICAgICAgIHRhcmdldFtwcm9wXSA9IHZhbHVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBjYWNoZVtwcm9wXSA9IHZhbHVlO1xuICAgICAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgICAgIH0sXG5cbiAgICAgICAgICBzZXQocHJveHlUYXJnZXQsIHByb3AsIHZhbHVlLCByZWNlaXZlcikge1xuICAgICAgICAgICAgaWYgKHByb3AgaW4gY2FjaGUpIHtcbiAgICAgICAgICAgICAgY2FjaGVbcHJvcF0gPSB2YWx1ZTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHRhcmdldFtwcm9wXSA9IHZhbHVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgfSxcblxuICAgICAgICAgIGRlZmluZVByb3BlcnR5KHByb3h5VGFyZ2V0LCBwcm9wLCBkZXNjKSB7XG4gICAgICAgICAgICByZXR1cm4gUmVmbGVjdC5kZWZpbmVQcm9wZXJ0eShjYWNoZSwgcHJvcCwgZGVzYyk7XG4gICAgICAgICAgfSxcblxuICAgICAgICAgIGRlbGV0ZVByb3BlcnR5KHByb3h5VGFyZ2V0LCBwcm9wKSB7XG4gICAgICAgICAgICByZXR1cm4gUmVmbGVjdC5kZWxldGVQcm9wZXJ0eShjYWNoZSwgcHJvcCk7XG4gICAgICAgICAgfVxuICAgICAgICB9O1xuXG4gICAgICAgIC8vIFBlciBjb250cmFjdCBvZiB0aGUgUHJveHkgQVBJLCB0aGUgXCJnZXRcIiBwcm94eSBoYW5kbGVyIG11c3QgcmV0dXJuIHRoZVxuICAgICAgICAvLyBvcmlnaW5hbCB2YWx1ZSBvZiB0aGUgdGFyZ2V0IGlmIHRoYXQgdmFsdWUgaXMgZGVjbGFyZWQgcmVhZC1vbmx5IGFuZFxuICAgICAgICAvLyBub24tY29uZmlndXJhYmxlLiBGb3IgdGhpcyByZWFzb24sIHdlIGNyZWF0ZSBhbiBvYmplY3Qgd2l0aCB0aGVcbiAgICAgICAgLy8gcHJvdG90eXBlIHNldCB0byBgdGFyZ2V0YCBpbnN0ZWFkIG9mIHVzaW5nIGB0YXJnZXRgIGRpcmVjdGx5LlxuICAgICAgICAvLyBPdGhlcndpc2Ugd2UgY2Fubm90IHJldHVybiBhIGN1c3RvbSBvYmplY3QgZm9yIEFQSXMgdGhhdFxuICAgICAgICAvLyBhcmUgZGVjbGFyZWQgcmVhZC1vbmx5IGFuZCBub24tY29uZmlndXJhYmxlLCBzdWNoIGFzIGBjaHJvbWUuZGV2dG9vbHNgLlxuICAgICAgICAvL1xuICAgICAgICAvLyBUaGUgcHJveHkgaGFuZGxlcnMgdGhlbXNlbHZlcyB3aWxsIHN0aWxsIHVzZSB0aGUgb3JpZ2luYWwgYHRhcmdldGBcbiAgICAgICAgLy8gaW5zdGVhZCBvZiB0aGUgYHByb3h5VGFyZ2V0YCwgc28gdGhhdCB0aGUgbWV0aG9kcyBhbmQgcHJvcGVydGllcyBhcmVcbiAgICAgICAgLy8gZGVyZWZlcmVuY2VkIHZpYSB0aGUgb3JpZ2luYWwgdGFyZ2V0cy5cbiAgICAgICAgbGV0IHByb3h5VGFyZ2V0ID0gT2JqZWN0LmNyZWF0ZSh0YXJnZXQpO1xuICAgICAgICByZXR1cm4gbmV3IFByb3h5KHByb3h5VGFyZ2V0LCBoYW5kbGVycyk7XG4gICAgICB9O1xuXG4gICAgICAvKipcbiAgICAgICAqIENyZWF0ZXMgYSBzZXQgb2Ygd3JhcHBlciBmdW5jdGlvbnMgZm9yIGFuIGV2ZW50IG9iamVjdCwgd2hpY2ggaGFuZGxlc1xuICAgICAgICogd3JhcHBpbmcgb2YgbGlzdGVuZXIgZnVuY3Rpb25zIHRoYXQgdGhvc2UgbWVzc2FnZXMgYXJlIHBhc3NlZC5cbiAgICAgICAqXG4gICAgICAgKiBBIHNpbmdsZSB3cmFwcGVyIGlzIGNyZWF0ZWQgZm9yIGVhY2ggbGlzdGVuZXIgZnVuY3Rpb24sIGFuZCBzdG9yZWQgaW4gYVxuICAgICAgICogbWFwLiBTdWJzZXF1ZW50IGNhbGxzIHRvIGBhZGRMaXN0ZW5lcmAsIGBoYXNMaXN0ZW5lcmAsIG9yIGByZW1vdmVMaXN0ZW5lcmBcbiAgICAgICAqIHJldHJpZXZlIHRoZSBvcmlnaW5hbCB3cmFwcGVyLCBzbyB0aGF0ICBhdHRlbXB0cyB0byByZW1vdmUgYVxuICAgICAgICogcHJldmlvdXNseS1hZGRlZCBsaXN0ZW5lciB3b3JrIGFzIGV4cGVjdGVkLlxuICAgICAgICpcbiAgICAgICAqIEBwYXJhbSB7RGVmYXVsdFdlYWtNYXA8ZnVuY3Rpb24sIGZ1bmN0aW9uPn0gd3JhcHBlck1hcFxuICAgICAgICogICAgICAgIEEgRGVmYXVsdFdlYWtNYXAgb2JqZWN0IHdoaWNoIHdpbGwgY3JlYXRlIHRoZSBhcHByb3ByaWF0ZSB3cmFwcGVyXG4gICAgICAgKiAgICAgICAgZm9yIGEgZ2l2ZW4gbGlzdGVuZXIgZnVuY3Rpb24gd2hlbiBvbmUgZG9lcyBub3QgZXhpc3QsIGFuZCByZXRyaWV2ZVxuICAgICAgICogICAgICAgIGFuIGV4aXN0aW5nIG9uZSB3aGVuIGl0IGRvZXMuXG4gICAgICAgKlxuICAgICAgICogQHJldHVybnMge29iamVjdH1cbiAgICAgICAqL1xuICAgICAgY29uc3Qgd3JhcEV2ZW50ID0gd3JhcHBlck1hcCA9PiAoe1xuICAgICAgICBhZGRMaXN0ZW5lcih0YXJnZXQsIGxpc3RlbmVyLCAuLi5hcmdzKSB7XG4gICAgICAgICAgdGFyZ2V0LmFkZExpc3RlbmVyKHdyYXBwZXJNYXAuZ2V0KGxpc3RlbmVyKSwgLi4uYXJncyk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgaGFzTGlzdGVuZXIodGFyZ2V0LCBsaXN0ZW5lcikge1xuICAgICAgICAgIHJldHVybiB0YXJnZXQuaGFzTGlzdGVuZXIod3JhcHBlck1hcC5nZXQobGlzdGVuZXIpKTtcbiAgICAgICAgfSxcblxuICAgICAgICByZW1vdmVMaXN0ZW5lcih0YXJnZXQsIGxpc3RlbmVyKSB7XG4gICAgICAgICAgdGFyZ2V0LnJlbW92ZUxpc3RlbmVyKHdyYXBwZXJNYXAuZ2V0KGxpc3RlbmVyKSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuXG4gICAgICAvLyBLZWVwIHRyYWNrIGlmIHRoZSBkZXByZWNhdGlvbiB3YXJuaW5nIGhhcyBiZWVuIGxvZ2dlZCBhdCBsZWFzdCBvbmNlLlxuICAgICAgbGV0IGxvZ2dlZFNlbmRSZXNwb25zZURlcHJlY2F0aW9uV2FybmluZyA9IGZhbHNlO1xuXG4gICAgICBjb25zdCBvbk1lc3NhZ2VXcmFwcGVycyA9IG5ldyBEZWZhdWx0V2Vha01hcChsaXN0ZW5lciA9PiB7XG4gICAgICAgIGlmICh0eXBlb2YgbGlzdGVuZXIgIT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICAgIHJldHVybiBsaXN0ZW5lcjtcbiAgICAgICAgfVxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBXcmFwcyBhIG1lc3NhZ2UgbGlzdGVuZXIgZnVuY3Rpb24gc28gdGhhdCBpdCBtYXkgc2VuZCByZXNwb25zZXMgYmFzZWQgb25cbiAgICAgICAgICogaXRzIHJldHVybiB2YWx1ZSwgcmF0aGVyIHRoYW4gYnkgcmV0dXJuaW5nIGEgc2VudGluZWwgdmFsdWUgYW5kIGNhbGxpbmcgYVxuICAgICAgICAgKiBjYWxsYmFjay4gSWYgdGhlIGxpc3RlbmVyIGZ1bmN0aW9uIHJldHVybnMgYSBQcm9taXNlLCB0aGUgcmVzcG9uc2UgaXNcbiAgICAgICAgICogc2VudCB3aGVuIHRoZSBwcm9taXNlIGVpdGhlciByZXNvbHZlcyBvciByZWplY3RzLlxuICAgICAgICAgKlxuICAgICAgICAgKiBAcGFyYW0geyp9IG1lc3NhZ2VcbiAgICAgICAgICogICAgICAgIFRoZSBtZXNzYWdlIHNlbnQgYnkgdGhlIG90aGVyIGVuZCBvZiB0aGUgY2hhbm5lbC5cbiAgICAgICAgICogQHBhcmFtIHtvYmplY3R9IHNlbmRlclxuICAgICAgICAgKiAgICAgICAgRGV0YWlscyBhYm91dCB0aGUgc2VuZGVyIG9mIHRoZSBtZXNzYWdlLlxuICAgICAgICAgKiBAcGFyYW0ge2Z1bmN0aW9uKCopfSBzZW5kUmVzcG9uc2VcbiAgICAgICAgICogICAgICAgIEEgY2FsbGJhY2sgd2hpY2gsIHdoZW4gY2FsbGVkIHdpdGggYW4gYXJiaXRyYXJ5IGFyZ3VtZW50LCBzZW5kc1xuICAgICAgICAgKiAgICAgICAgdGhhdCB2YWx1ZSBhcyBhIHJlc3BvbnNlLlxuICAgICAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn1cbiAgICAgICAgICogICAgICAgIFRydWUgaWYgdGhlIHdyYXBwZWQgbGlzdGVuZXIgcmV0dXJuZWQgYSBQcm9taXNlLCB3aGljaCB3aWxsIGxhdGVyXG4gICAgICAgICAqICAgICAgICB5aWVsZCBhIHJlc3BvbnNlLiBGYWxzZSBvdGhlcndpc2UuXG4gICAgICAgICAqL1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24gb25NZXNzYWdlKG1lc3NhZ2UsIHNlbmRlciwgc2VuZFJlc3BvbnNlKSB7XG4gICAgICAgICAgbGV0IGRpZENhbGxTZW5kUmVzcG9uc2UgPSBmYWxzZTtcblxuICAgICAgICAgIGxldCB3cmFwcGVkU2VuZFJlc3BvbnNlO1xuICAgICAgICAgIGxldCBzZW5kUmVzcG9uc2VQcm9taXNlID0gbmV3IFByb21pc2UocmVzb2x2ZSA9PiB7XG4gICAgICAgICAgICB3cmFwcGVkU2VuZFJlc3BvbnNlID0gZnVuY3Rpb24gKHJlc3BvbnNlKSB7XG4gICAgICAgICAgICAgIGlmICghbG9nZ2VkU2VuZFJlc3BvbnNlRGVwcmVjYXRpb25XYXJuaW5nKSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS53YXJuKFNFTkRfUkVTUE9OU0VfREVQUkVDQVRJT05fV0FSTklORywgbmV3IEVycm9yKCkuc3RhY2spO1xuICAgICAgICAgICAgICAgIGxvZ2dlZFNlbmRSZXNwb25zZURlcHJlY2F0aW9uV2FybmluZyA9IHRydWU7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgZGlkQ2FsbFNlbmRSZXNwb25zZSA9IHRydWU7XG4gICAgICAgICAgICAgIHJlc29sdmUocmVzcG9uc2UpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICB9KTtcblxuICAgICAgICAgIGxldCByZXN1bHQ7XG4gICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHJlc3VsdCA9IGxpc3RlbmVyKG1lc3NhZ2UsIHNlbmRlciwgd3JhcHBlZFNlbmRSZXNwb25zZSk7XG4gICAgICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICByZXN1bHQgPSBQcm9taXNlLnJlamVjdChlcnIpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGNvbnN0IGlzUmVzdWx0VGhlbmFibGUgPSByZXN1bHQgIT09IHRydWUgJiYgaXNUaGVuYWJsZShyZXN1bHQpO1xuXG4gICAgICAgICAgLy8gSWYgdGhlIGxpc3RlbmVyIGRpZG4ndCByZXR1cm5lZCB0cnVlIG9yIGEgUHJvbWlzZSwgb3IgY2FsbGVkXG4gICAgICAgICAgLy8gd3JhcHBlZFNlbmRSZXNwb25zZSBzeW5jaHJvbm91c2x5LCB3ZSBjYW4gZXhpdCBlYXJsaWVyXG4gICAgICAgICAgLy8gYmVjYXVzZSB0aGVyZSB3aWxsIGJlIG5vIHJlc3BvbnNlIHNlbnQgZnJvbSB0aGlzIGxpc3RlbmVyLlxuICAgICAgICAgIGlmIChyZXN1bHQgIT09IHRydWUgJiYgIWlzUmVzdWx0VGhlbmFibGUgJiYgIWRpZENhbGxTZW5kUmVzcG9uc2UpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICAvLyBBIHNtYWxsIGhlbHBlciB0byBzZW5kIHRoZSBtZXNzYWdlIGlmIHRoZSBwcm9taXNlIHJlc29sdmVzXG4gICAgICAgICAgLy8gYW5kIGFuIGVycm9yIGlmIHRoZSBwcm9taXNlIHJlamVjdHMgKGEgd3JhcHBlZCBzZW5kTWVzc2FnZSBoYXNcbiAgICAgICAgICAvLyB0byB0cmFuc2xhdGUgdGhlIG1lc3NhZ2UgaW50byBhIHJlc29sdmVkIHByb21pc2Ugb3IgYSByZWplY3RlZFxuICAgICAgICAgIC8vIHByb21pc2UpLlxuICAgICAgICAgIGNvbnN0IHNlbmRQcm9taXNlZFJlc3VsdCA9IHByb21pc2UgPT4ge1xuICAgICAgICAgICAgcHJvbWlzZS50aGVuKG1zZyA9PiB7XG4gICAgICAgICAgICAgIC8vIHNlbmQgdGhlIG1lc3NhZ2UgdmFsdWUuXG4gICAgICAgICAgICAgIHNlbmRSZXNwb25zZShtc2cpO1xuICAgICAgICAgICAgfSwgZXJyb3IgPT4ge1xuICAgICAgICAgICAgICAvLyBTZW5kIGEgSlNPTiByZXByZXNlbnRhdGlvbiBvZiB0aGUgZXJyb3IgaWYgdGhlIHJlamVjdGVkIHZhbHVlXG4gICAgICAgICAgICAgIC8vIGlzIGFuIGluc3RhbmNlIG9mIGVycm9yLCBvciB0aGUgb2JqZWN0IGl0c2VsZiBvdGhlcndpc2UuXG4gICAgICAgICAgICAgIGxldCBtZXNzYWdlO1xuICAgICAgICAgICAgICBpZiAoZXJyb3IgJiYgKGVycm9yIGluc3RhbmNlb2YgRXJyb3IgfHwgdHlwZW9mIGVycm9yLm1lc3NhZ2UgPT09IFwic3RyaW5nXCIpKSB7XG4gICAgICAgICAgICAgICAgbWVzc2FnZSA9IGVycm9yLm1lc3NhZ2U7XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgbWVzc2FnZSA9IFwiQW4gdW5leHBlY3RlZCBlcnJvciBvY2N1cnJlZFwiO1xuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgc2VuZFJlc3BvbnNlKHtcbiAgICAgICAgICAgICAgICBfX21veldlYkV4dGVuc2lvblBvbHlmaWxsUmVqZWN0X186IHRydWUsXG4gICAgICAgICAgICAgICAgbWVzc2FnZVxuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0pLmNhdGNoKGVyciA9PiB7XG4gICAgICAgICAgICAgIC8vIFByaW50IGFuIGVycm9yIG9uIHRoZSBjb25zb2xlIGlmIHVuYWJsZSB0byBzZW5kIHRoZSByZXNwb25zZS5cbiAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihcIkZhaWxlZCB0byBzZW5kIG9uTWVzc2FnZSByZWplY3RlZCByZXBseVwiLCBlcnIpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfTtcblxuICAgICAgICAgIC8vIElmIHRoZSBsaXN0ZW5lciByZXR1cm5lZCBhIFByb21pc2UsIHNlbmQgdGhlIHJlc29sdmVkIHZhbHVlIGFzIGFcbiAgICAgICAgICAvLyByZXN1bHQsIG90aGVyd2lzZSB3YWl0IHRoZSBwcm9taXNlIHJlbGF0ZWQgdG8gdGhlIHdyYXBwZWRTZW5kUmVzcG9uc2VcbiAgICAgICAgICAvLyBjYWxsYmFjayB0byByZXNvbHZlIGFuZCBzZW5kIGl0IGFzIGEgcmVzcG9uc2UuXG4gICAgICAgICAgaWYgKGlzUmVzdWx0VGhlbmFibGUpIHtcbiAgICAgICAgICAgIHNlbmRQcm9taXNlZFJlc3VsdChyZXN1bHQpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBzZW5kUHJvbWlzZWRSZXN1bHQoc2VuZFJlc3BvbnNlUHJvbWlzZSk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgLy8gTGV0IENocm9tZSBrbm93IHRoYXQgdGhlIGxpc3RlbmVyIGlzIHJlcGx5aW5nLlxuICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9O1xuICAgICAgfSk7XG5cbiAgICAgIGNvbnN0IHdyYXBwZWRTZW5kTWVzc2FnZUNhbGxiYWNrID0gKHsgcmVqZWN0LCByZXNvbHZlIH0sIHJlcGx5KSA9PiB7XG4gICAgICAgIGlmIChleHRlbnNpb25BUElzLnJ1bnRpbWUubGFzdEVycm9yKSB7XG4gICAgICAgICAgLy8gRGV0ZWN0IHdoZW4gbm9uZSBvZiB0aGUgbGlzdGVuZXJzIHJlcGxpZWQgdG8gdGhlIHNlbmRNZXNzYWdlIGNhbGwgYW5kIHJlc29sdmVcbiAgICAgICAgICAvLyB0aGUgcHJvbWlzZSB0byB1bmRlZmluZWQgYXMgaW4gRmlyZWZveC5cbiAgICAgICAgICAvLyBTZWUgaHR0cHM6Ly9naXRodWIuY29tL21vemlsbGEvd2ViZXh0ZW5zaW9uLXBvbHlmaWxsL2lzc3Vlcy8xMzBcbiAgICAgICAgICBpZiAoZXh0ZW5zaW9uQVBJcy5ydW50aW1lLmxhc3RFcnJvci5tZXNzYWdlID09PSBDSFJPTUVfU0VORF9NRVNTQUdFX0NBTExCQUNLX05PX1JFU1BPTlNFX01FU1NBR0UpIHtcbiAgICAgICAgICAgIHJlc29sdmUoKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmVqZWN0KGV4dGVuc2lvbkFQSXMucnVudGltZS5sYXN0RXJyb3IpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmIChyZXBseSAmJiByZXBseS5fX21veldlYkV4dGVuc2lvblBvbHlmaWxsUmVqZWN0X18pIHtcbiAgICAgICAgICAvLyBDb252ZXJ0IGJhY2sgdGhlIEpTT04gcmVwcmVzZW50YXRpb24gb2YgdGhlIGVycm9yIGludG9cbiAgICAgICAgICAvLyBhbiBFcnJvciBpbnN0YW5jZS5cbiAgICAgICAgICByZWplY3QobmV3IEVycm9yKHJlcGx5Lm1lc3NhZ2UpKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXNvbHZlKHJlcGx5KTtcbiAgICAgICAgfVxuICAgICAgfTtcblxuICAgICAgY29uc3Qgd3JhcHBlZFNlbmRNZXNzYWdlID0gKG5hbWUsIG1ldGFkYXRhLCBhcGlOYW1lc3BhY2VPYmosIC4uLmFyZ3MpID0+IHtcbiAgICAgICAgaWYgKGFyZ3MubGVuZ3RoIDwgbWV0YWRhdGEubWluQXJncykge1xuICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgRXhwZWN0ZWQgYXQgbGVhc3QgJHttZXRhZGF0YS5taW5BcmdzfSAke3BsdXJhbGl6ZUFyZ3VtZW50cyhtZXRhZGF0YS5taW5BcmdzKX0gZm9yICR7bmFtZX0oKSwgZ290ICR7YXJncy5sZW5ndGh9YCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoYXJncy5sZW5ndGggPiBtZXRhZGF0YS5tYXhBcmdzKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBFeHBlY3RlZCBhdCBtb3N0ICR7bWV0YWRhdGEubWF4QXJnc30gJHtwbHVyYWxpemVBcmd1bWVudHMobWV0YWRhdGEubWF4QXJncyl9IGZvciAke25hbWV9KCksIGdvdCAke2FyZ3MubGVuZ3RofWApO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgICAgICBjb25zdCB3cmFwcGVkQ2IgPSB3cmFwcGVkU2VuZE1lc3NhZ2VDYWxsYmFjay5iaW5kKG51bGwsIHsgcmVzb2x2ZSwgcmVqZWN0IH0pO1xuICAgICAgICAgIGFyZ3MucHVzaCh3cmFwcGVkQ2IpO1xuICAgICAgICAgIGFwaU5hbWVzcGFjZU9iai5zZW5kTWVzc2FnZSguLi5hcmdzKTtcbiAgICAgICAgfSk7XG4gICAgICB9O1xuXG4gICAgICBjb25zdCBzdGF0aWNXcmFwcGVycyA9IHtcbiAgICAgICAgcnVudGltZToge1xuICAgICAgICAgIG9uTWVzc2FnZTogd3JhcEV2ZW50KG9uTWVzc2FnZVdyYXBwZXJzKSxcbiAgICAgICAgICBvbk1lc3NhZ2VFeHRlcm5hbDogd3JhcEV2ZW50KG9uTWVzc2FnZVdyYXBwZXJzKSxcbiAgICAgICAgICBzZW5kTWVzc2FnZTogd3JhcHBlZFNlbmRNZXNzYWdlLmJpbmQobnVsbCwgXCJzZW5kTWVzc2FnZVwiLCB7IG1pbkFyZ3M6IDEsIG1heEFyZ3M6IDMgfSlcbiAgICAgICAgfSxcbiAgICAgICAgdGFiczoge1xuICAgICAgICAgIHNlbmRNZXNzYWdlOiB3cmFwcGVkU2VuZE1lc3NhZ2UuYmluZChudWxsLCBcInNlbmRNZXNzYWdlXCIsIHsgbWluQXJnczogMiwgbWF4QXJnczogMyB9KVxuICAgICAgICB9XG4gICAgICB9O1xuICAgICAgY29uc3Qgc2V0dGluZ01ldGFkYXRhID0ge1xuICAgICAgICBjbGVhcjogeyBtaW5BcmdzOiAxLCBtYXhBcmdzOiAxIH0sXG4gICAgICAgIGdldDogeyBtaW5BcmdzOiAxLCBtYXhBcmdzOiAxIH0sXG4gICAgICAgIHNldDogeyBtaW5BcmdzOiAxLCBtYXhBcmdzOiAxIH1cbiAgICAgIH07XG4gICAgICBhcGlNZXRhZGF0YS5wcml2YWN5ID0ge1xuICAgICAgICBuZXR3b3JrOiB7XG4gICAgICAgICAgbmV0d29ya1ByZWRpY3Rpb25FbmFibGVkOiBzZXR0aW5nTWV0YWRhdGEsXG4gICAgICAgICAgd2ViUlRDSVBIYW5kbGluZ1BvbGljeTogc2V0dGluZ01ldGFkYXRhXG4gICAgICAgIH0sXG4gICAgICAgIHNlcnZpY2VzOiB7XG4gICAgICAgICAgcGFzc3dvcmRTYXZpbmdFbmFibGVkOiBzZXR0aW5nTWV0YWRhdGFcbiAgICAgICAgfSxcbiAgICAgICAgd2Vic2l0ZXM6IHtcbiAgICAgICAgICBoeXBlcmxpbmtBdWRpdGluZ0VuYWJsZWQ6IHNldHRpbmdNZXRhZGF0YSxcbiAgICAgICAgICByZWZlcnJlcnNFbmFibGVkOiBzZXR0aW5nTWV0YWRhdGFcbiAgICAgICAgfVxuICAgICAgfTtcblxuICAgICAgcmV0dXJuIHdyYXBPYmplY3QoZXh0ZW5zaW9uQVBJcywgc3RhdGljV3JhcHBlcnMsIGFwaU1ldGFkYXRhKTtcbiAgICB9O1xuXG4gICAgaWYgKHR5cGVvZiBjaHJvbWUgIT0gXCJvYmplY3RcIiB8fCAhY2hyb21lIHx8ICFjaHJvbWUucnVudGltZSB8fCAhY2hyb21lLnJ1bnRpbWUuaWQpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIlRoaXMgc2NyaXB0IHNob3VsZCBvbmx5IGJlIGxvYWRlZCBpbiBhIGJyb3dzZXIgZXh0ZW5zaW9uLlwiKTtcbiAgICB9XG5cbiAgICAvLyBUaGUgYnVpbGQgcHJvY2VzcyBhZGRzIGEgVU1EIHdyYXBwZXIgYXJvdW5kIHRoaXMgZmlsZSwgd2hpY2ggbWFrZXMgdGhlXG4gICAgLy8gYG1vZHVsZWAgdmFyaWFibGUgYXZhaWxhYmxlLlxuICAgIG1vZHVsZS5leHBvcnRzID0gd3JhcEFQSXMoY2hyb21lKTtcbiAgfSBlbHNlIHtcbiAgICBtb2R1bGUuZXhwb3J0cyA9IGJyb3dzZXI7XG4gIH1cbn0pO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YnJvd3Nlci1wb2x5ZmlsbC5qcy5tYXBcbiIsIi8vIGh0dHBzOi8vZ2l0aHViLmNvbS96bG9pcm9jay9jb3JlLWpzL2lzc3Vlcy84NiNpc3N1ZWNvbW1lbnQtMTE1NzU5MDI4XG52YXIgZ2xvYmFsID0gbW9kdWxlLmV4cG9ydHMgPSB0eXBlb2Ygd2luZG93ICE9ICd1bmRlZmluZWQnICYmIHdpbmRvdy5NYXRoID09IE1hdGhcbiAgPyB3aW5kb3cgOiB0eXBlb2Ygc2VsZiAhPSAndW5kZWZpbmVkJyAmJiBzZWxmLk1hdGggPT0gTWF0aCA/IHNlbGZcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLW5ldy1mdW5jXG4gIDogRnVuY3Rpb24oJ3JldHVybiB0aGlzJykoKTtcbmlmICh0eXBlb2YgX19nID09ICdudW1iZXInKSBfX2cgPSBnbG9iYWw7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW5kZWZcbiIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGV4ZWMpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gISFleGVjKCk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxufTtcbiIsInZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgaWYgKCFpc09iamVjdChpdCkpIHRocm93IFR5cGVFcnJvcihpdCArICcgaXMgbm90IGFuIG9iamVjdCEnKTtcbiAgcmV0dXJuIGl0O1xufTtcbiIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiB0eXBlb2YgaXQgPT09ICdvYmplY3QnID8gaXQgIT09IG51bGwgOiB0eXBlb2YgaXQgPT09ICdmdW5jdGlvbic7XG59O1xuIiwidmFyIHN0b3JlID0gcmVxdWlyZSgnLi9fc2hhcmVkJykoJ3drcycpO1xudmFyIHVpZCA9IHJlcXVpcmUoJy4vX3VpZCcpO1xudmFyIFN5bWJvbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpLlN5bWJvbDtcbnZhciBVU0VfU1lNQk9MID0gdHlwZW9mIFN5bWJvbCA9PSAnZnVuY3Rpb24nO1xuXG52YXIgJGV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChuYW1lKSB7XG4gIHJldHVybiBzdG9yZVtuYW1lXSB8fCAoc3RvcmVbbmFtZV0gPVxuICAgIFVTRV9TWU1CT0wgJiYgU3ltYm9sW25hbWVdIHx8IChVU0VfU1lNQk9MID8gU3ltYm9sIDogdWlkKSgnU3ltYm9sLicgKyBuYW1lKSk7XG59O1xuXG4kZXhwb3J0cy5zdG9yZSA9IHN0b3JlO1xuIiwiLy8gNy4xLjE1IFRvTGVuZ3RoXG52YXIgdG9JbnRlZ2VyID0gcmVxdWlyZSgnLi9fdG8taW50ZWdlcicpO1xudmFyIG1pbiA9IE1hdGgubWluO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIGl0ID4gMCA/IG1pbih0b0ludGVnZXIoaXQpLCAweDFmZmZmZmZmZmZmZmZmKSA6IDA7IC8vIHBvdygyLCA1MykgLSAxID09IDkwMDcxOTkyNTQ3NDA5OTFcbn07XG4iLCJ2YXIgY29yZSA9IG1vZHVsZS5leHBvcnRzID0geyB2ZXJzaW9uOiAnMi42LjExJyB9O1xuaWYgKHR5cGVvZiBfX2UgPT0gJ251bWJlcicpIF9fZSA9IGNvcmU7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW5kZWZcbiIsIi8vIFRoYW5rJ3MgSUU4IGZvciBoaXMgZnVubnkgZGVmaW5lUHJvcGVydHlcbm1vZHVsZS5leHBvcnRzID0gIXJlcXVpcmUoJy4vX2ZhaWxzJykoZnVuY3Rpb24gKCkge1xuICByZXR1cm4gT2JqZWN0LmRlZmluZVByb3BlcnR5KHt9LCAnYScsIHsgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiA3OyB9IH0pLmEgIT0gNztcbn0pO1xuIiwidmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgSUU4X0RPTV9ERUZJTkUgPSByZXF1aXJlKCcuL19pZTgtZG9tLWRlZmluZScpO1xudmFyIHRvUHJpbWl0aXZlID0gcmVxdWlyZSgnLi9fdG8tcHJpbWl0aXZlJyk7XG52YXIgZFAgPSBPYmplY3QuZGVmaW5lUHJvcGVydHk7XG5cbmV4cG9ydHMuZiA9IHJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJykgPyBPYmplY3QuZGVmaW5lUHJvcGVydHkgOiBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0eShPLCBQLCBBdHRyaWJ1dGVzKSB7XG4gIGFuT2JqZWN0KE8pO1xuICBQID0gdG9QcmltaXRpdmUoUCwgdHJ1ZSk7XG4gIGFuT2JqZWN0KEF0dHJpYnV0ZXMpO1xuICBpZiAoSUU4X0RPTV9ERUZJTkUpIHRyeSB7XG4gICAgcmV0dXJuIGRQKE8sIFAsIEF0dHJpYnV0ZXMpO1xuICB9IGNhdGNoIChlKSB7IC8qIGVtcHR5ICovIH1cbiAgaWYgKCdnZXQnIGluIEF0dHJpYnV0ZXMgfHwgJ3NldCcgaW4gQXR0cmlidXRlcykgdGhyb3cgVHlwZUVycm9yKCdBY2Nlc3NvcnMgbm90IHN1cHBvcnRlZCEnKTtcbiAgaWYgKCd2YWx1ZScgaW4gQXR0cmlidXRlcykgT1tQXSA9IEF0dHJpYnV0ZXMudmFsdWU7XG4gIHJldHVybiBPO1xufTtcbiIsIi8vIDcuMS4xMyBUb09iamVjdChhcmd1bWVudClcbnZhciBkZWZpbmVkID0gcmVxdWlyZSgnLi9fZGVmaW5lZCcpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIE9iamVjdChkZWZpbmVkKGl0KSk7XG59O1xuIiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpO1xudmFyIGhpZGUgPSByZXF1aXJlKCcuL19oaWRlJyk7XG52YXIgaGFzID0gcmVxdWlyZSgnLi9faGFzJyk7XG52YXIgU1JDID0gcmVxdWlyZSgnLi9fdWlkJykoJ3NyYycpO1xudmFyICR0b1N0cmluZyA9IHJlcXVpcmUoJy4vX2Z1bmN0aW9uLXRvLXN0cmluZycpO1xudmFyIFRPX1NUUklORyA9ICd0b1N0cmluZyc7XG52YXIgVFBMID0gKCcnICsgJHRvU3RyaW5nKS5zcGxpdChUT19TVFJJTkcpO1xuXG5yZXF1aXJlKCcuL19jb3JlJykuaW5zcGVjdFNvdXJjZSA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gJHRvU3RyaW5nLmNhbGwoaXQpO1xufTtcblxuKG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKE8sIGtleSwgdmFsLCBzYWZlKSB7XG4gIHZhciBpc0Z1bmN0aW9uID0gdHlwZW9mIHZhbCA9PSAnZnVuY3Rpb24nO1xuICBpZiAoaXNGdW5jdGlvbikgaGFzKHZhbCwgJ25hbWUnKSB8fCBoaWRlKHZhbCwgJ25hbWUnLCBrZXkpO1xuICBpZiAoT1trZXldID09PSB2YWwpIHJldHVybjtcbiAgaWYgKGlzRnVuY3Rpb24pIGhhcyh2YWwsIFNSQykgfHwgaGlkZSh2YWwsIFNSQywgT1trZXldID8gJycgKyBPW2tleV0gOiBUUEwuam9pbihTdHJpbmcoa2V5KSkpO1xuICBpZiAoTyA9PT0gZ2xvYmFsKSB7XG4gICAgT1trZXldID0gdmFsO1xuICB9IGVsc2UgaWYgKCFzYWZlKSB7XG4gICAgZGVsZXRlIE9ba2V5XTtcbiAgICBoaWRlKE8sIGtleSwgdmFsKTtcbiAgfSBlbHNlIGlmIChPW2tleV0pIHtcbiAgICBPW2tleV0gPSB2YWw7XG4gIH0gZWxzZSB7XG4gICAgaGlkZShPLCBrZXksIHZhbCk7XG4gIH1cbi8vIGFkZCBmYWtlIEZ1bmN0aW9uI3RvU3RyaW5nIGZvciBjb3JyZWN0IHdvcmsgd3JhcHBlZCBtZXRob2RzIC8gY29uc3RydWN0b3JzIHdpdGggbWV0aG9kcyBsaWtlIExvRGFzaCBpc05hdGl2ZVxufSkoRnVuY3Rpb24ucHJvdG90eXBlLCBUT19TVFJJTkcsIGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICByZXR1cm4gdHlwZW9mIHRoaXMgPT0gJ2Z1bmN0aW9uJyAmJiB0aGlzW1NSQ10gfHwgJHRvU3RyaW5nLmNhbGwodGhpcyk7XG59KTtcbiIsInZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuL19mYWlscycpO1xudmFyIGRlZmluZWQgPSByZXF1aXJlKCcuL19kZWZpbmVkJyk7XG52YXIgcXVvdCA9IC9cIi9nO1xuLy8gQi4yLjMuMi4xIENyZWF0ZUhUTUwoc3RyaW5nLCB0YWcsIGF0dHJpYnV0ZSwgdmFsdWUpXG52YXIgY3JlYXRlSFRNTCA9IGZ1bmN0aW9uIChzdHJpbmcsIHRhZywgYXR0cmlidXRlLCB2YWx1ZSkge1xuICB2YXIgUyA9IFN0cmluZyhkZWZpbmVkKHN0cmluZykpO1xuICB2YXIgcDEgPSAnPCcgKyB0YWc7XG4gIGlmIChhdHRyaWJ1dGUgIT09ICcnKSBwMSArPSAnICcgKyBhdHRyaWJ1dGUgKyAnPVwiJyArIFN0cmluZyh2YWx1ZSkucmVwbGFjZShxdW90LCAnJnF1b3Q7JykgKyAnXCInO1xuICByZXR1cm4gcDEgKyAnPicgKyBTICsgJzwvJyArIHRhZyArICc+Jztcbn07XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChOQU1FLCBleGVjKSB7XG4gIHZhciBPID0ge307XG4gIE9bTkFNRV0gPSBleGVjKGNyZWF0ZUhUTUwpO1xuICAkZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqIGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgdGVzdCA9ICcnW05BTUVdKCdcIicpO1xuICAgIHJldHVybiB0ZXN0ICE9PSB0ZXN0LnRvTG93ZXJDYXNlKCkgfHwgdGVzdC5zcGxpdCgnXCInKS5sZW5ndGggPiAzO1xuICB9KSwgJ1N0cmluZycsIE8pO1xufTtcbiIsInZhciBoYXNPd25Qcm9wZXJ0eSA9IHt9Lmhhc093blByb3BlcnR5O1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQsIGtleSkge1xuICByZXR1cm4gaGFzT3duUHJvcGVydHkuY2FsbChpdCwga2V5KTtcbn07XG4iLCJ2YXIgZFAgPSByZXF1aXJlKCcuL19vYmplY3QtZHAnKTtcbnZhciBjcmVhdGVEZXNjID0gcmVxdWlyZSgnLi9fcHJvcGVydHktZGVzYycpO1xubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpID8gZnVuY3Rpb24gKG9iamVjdCwga2V5LCB2YWx1ZSkge1xuICByZXR1cm4gZFAuZihvYmplY3QsIGtleSwgY3JlYXRlRGVzYygxLCB2YWx1ZSkpO1xufSA6IGZ1bmN0aW9uIChvYmplY3QsIGtleSwgdmFsdWUpIHtcbiAgb2JqZWN0W2tleV0gPSB2YWx1ZTtcbiAgcmV0dXJuIG9iamVjdDtcbn07XG4iLCIvLyB0byBpbmRleGVkIG9iamVjdCwgdG9PYmplY3Qgd2l0aCBmYWxsYmFjayBmb3Igbm9uLWFycmF5LWxpa2UgRVMzIHN0cmluZ3NcbnZhciBJT2JqZWN0ID0gcmVxdWlyZSgnLi9faW9iamVjdCcpO1xudmFyIGRlZmluZWQgPSByZXF1aXJlKCcuL19kZWZpbmVkJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gSU9iamVjdChkZWZpbmVkKGl0KSk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi9fZmFpbHMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAobWV0aG9kLCBhcmcpIHtcbiAgcmV0dXJuICEhbWV0aG9kICYmIGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdXNlbGVzcy1jYWxsXG4gICAgYXJnID8gbWV0aG9kLmNhbGwobnVsbCwgZnVuY3Rpb24gKCkgeyAvKiBlbXB0eSAqLyB9LCAxKSA6IG1ldGhvZC5jYWxsKG51bGwpO1xuICB9KTtcbn07XG4iLCIvLyBvcHRpb25hbCAvIHNpbXBsZSBjb250ZXh0IGJpbmRpbmdcbnZhciBhRnVuY3Rpb24gPSByZXF1aXJlKCcuL19hLWZ1bmN0aW9uJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChmbiwgdGhhdCwgbGVuZ3RoKSB7XG4gIGFGdW5jdGlvbihmbik7XG4gIGlmICh0aGF0ID09PSB1bmRlZmluZWQpIHJldHVybiBmbjtcbiAgc3dpdGNoIChsZW5ndGgpIHtcbiAgICBjYXNlIDE6IHJldHVybiBmdW5jdGlvbiAoYSkge1xuICAgICAgcmV0dXJuIGZuLmNhbGwodGhhdCwgYSk7XG4gICAgfTtcbiAgICBjYXNlIDI6IHJldHVybiBmdW5jdGlvbiAoYSwgYikge1xuICAgICAgcmV0dXJuIGZuLmNhbGwodGhhdCwgYSwgYik7XG4gICAgfTtcbiAgICBjYXNlIDM6IHJldHVybiBmdW5jdGlvbiAoYSwgYiwgYykge1xuICAgICAgcmV0dXJuIGZuLmNhbGwodGhhdCwgYSwgYiwgYyk7XG4gICAgfTtcbiAgfVxuICByZXR1cm4gZnVuY3Rpb24gKC8qIC4uLmFyZ3MgKi8pIHtcbiAgICByZXR1cm4gZm4uYXBwbHkodGhhdCwgYXJndW1lbnRzKTtcbiAgfTtcbn07XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICBpZiAodHlwZW9mIGl0ICE9ICdmdW5jdGlvbicpIHRocm93IFR5cGVFcnJvcihpdCArICcgaXMgbm90IGEgZnVuY3Rpb24hJyk7XG4gIHJldHVybiBpdDtcbn07XG4iLCIvLyA3LjEuNCBUb0ludGVnZXJcbnZhciBjZWlsID0gTWF0aC5jZWlsO1xudmFyIGZsb29yID0gTWF0aC5mbG9vcjtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBpc05hTihpdCA9ICtpdCkgPyAwIDogKGl0ID4gMCA/IGZsb29yIDogY2VpbCkoaXQpO1xufTtcbiIsInZhciBwSUUgPSByZXF1aXJlKCcuL19vYmplY3QtcGllJyk7XG52YXIgY3JlYXRlRGVzYyA9IHJlcXVpcmUoJy4vX3Byb3BlcnR5LWRlc2MnKTtcbnZhciB0b0lPYmplY3QgPSByZXF1aXJlKCcuL190by1pb2JqZWN0Jyk7XG52YXIgdG9QcmltaXRpdmUgPSByZXF1aXJlKCcuL190by1wcmltaXRpdmUnKTtcbnZhciBoYXMgPSByZXF1aXJlKCcuL19oYXMnKTtcbnZhciBJRThfRE9NX0RFRklORSA9IHJlcXVpcmUoJy4vX2llOC1kb20tZGVmaW5lJyk7XG52YXIgZ09QRCA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7XG5cbmV4cG9ydHMuZiA9IHJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJykgPyBnT1BEIDogZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKE8sIFApIHtcbiAgTyA9IHRvSU9iamVjdChPKTtcbiAgUCA9IHRvUHJpbWl0aXZlKFAsIHRydWUpO1xuICBpZiAoSUU4X0RPTV9ERUZJTkUpIHRyeSB7XG4gICAgcmV0dXJuIGdPUEQoTywgUCk7XG4gIH0gY2F0Y2ggKGUpIHsgLyogZW1wdHkgKi8gfVxuICBpZiAoaGFzKE8sIFApKSByZXR1cm4gY3JlYXRlRGVzYyghcElFLmYuY2FsbChPLCBQKSwgT1tQXSk7XG59O1xuIiwiLy8gbW9zdCBPYmplY3QgbWV0aG9kcyBieSBFUzYgc2hvdWxkIGFjY2VwdCBwcmltaXRpdmVzXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIGNvcmUgPSByZXF1aXJlKCcuL19jb3JlJyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuL19mYWlscycpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoS0VZLCBleGVjKSB7XG4gIHZhciBmbiA9IChjb3JlLk9iamVjdCB8fCB7fSlbS0VZXSB8fCBPYmplY3RbS0VZXTtcbiAgdmFyIGV4cCA9IHt9O1xuICBleHBbS0VZXSA9IGV4ZWMoZm4pO1xuICAkZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqIGZhaWxzKGZ1bmN0aW9uICgpIHsgZm4oMSk7IH0pLCAnT2JqZWN0JywgZXhwKTtcbn07XG4iLCIvLyAwIC0+IEFycmF5I2ZvckVhY2hcbi8vIDEgLT4gQXJyYXkjbWFwXG4vLyAyIC0+IEFycmF5I2ZpbHRlclxuLy8gMyAtPiBBcnJheSNzb21lXG4vLyA0IC0+IEFycmF5I2V2ZXJ5XG4vLyA1IC0+IEFycmF5I2ZpbmRcbi8vIDYgLT4gQXJyYXkjZmluZEluZGV4XG52YXIgY3R4ID0gcmVxdWlyZSgnLi9fY3R4Jyk7XG52YXIgSU9iamVjdCA9IHJlcXVpcmUoJy4vX2lvYmplY3QnKTtcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4vX3RvLW9iamVjdCcpO1xudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi9fdG8tbGVuZ3RoJyk7XG52YXIgYXNjID0gcmVxdWlyZSgnLi9fYXJyYXktc3BlY2llcy1jcmVhdGUnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKFRZUEUsICRjcmVhdGUpIHtcbiAgdmFyIElTX01BUCA9IFRZUEUgPT0gMTtcbiAgdmFyIElTX0ZJTFRFUiA9IFRZUEUgPT0gMjtcbiAgdmFyIElTX1NPTUUgPSBUWVBFID09IDM7XG4gIHZhciBJU19FVkVSWSA9IFRZUEUgPT0gNDtcbiAgdmFyIElTX0ZJTkRfSU5ERVggPSBUWVBFID09IDY7XG4gIHZhciBOT19IT0xFUyA9IFRZUEUgPT0gNSB8fCBJU19GSU5EX0lOREVYO1xuICB2YXIgY3JlYXRlID0gJGNyZWF0ZSB8fCBhc2M7XG4gIHJldHVybiBmdW5jdGlvbiAoJHRoaXMsIGNhbGxiYWNrZm4sIHRoYXQpIHtcbiAgICB2YXIgTyA9IHRvT2JqZWN0KCR0aGlzKTtcbiAgICB2YXIgc2VsZiA9IElPYmplY3QoTyk7XG4gICAgdmFyIGYgPSBjdHgoY2FsbGJhY2tmbiwgdGhhdCwgMyk7XG4gICAgdmFyIGxlbmd0aCA9IHRvTGVuZ3RoKHNlbGYubGVuZ3RoKTtcbiAgICB2YXIgaW5kZXggPSAwO1xuICAgIHZhciByZXN1bHQgPSBJU19NQVAgPyBjcmVhdGUoJHRoaXMsIGxlbmd0aCkgOiBJU19GSUxURVIgPyBjcmVhdGUoJHRoaXMsIDApIDogdW5kZWZpbmVkO1xuICAgIHZhciB2YWwsIHJlcztcbiAgICBmb3IgKDtsZW5ndGggPiBpbmRleDsgaW5kZXgrKykgaWYgKE5PX0hPTEVTIHx8IGluZGV4IGluIHNlbGYpIHtcbiAgICAgIHZhbCA9IHNlbGZbaW5kZXhdO1xuICAgICAgcmVzID0gZih2YWwsIGluZGV4LCBPKTtcbiAgICAgIGlmIChUWVBFKSB7XG4gICAgICAgIGlmIChJU19NQVApIHJlc3VsdFtpbmRleF0gPSByZXM7ICAgLy8gbWFwXG4gICAgICAgIGVsc2UgaWYgKHJlcykgc3dpdGNoIChUWVBFKSB7XG4gICAgICAgICAgY2FzZSAzOiByZXR1cm4gdHJ1ZTsgICAgICAgICAgICAgLy8gc29tZVxuICAgICAgICAgIGNhc2UgNTogcmV0dXJuIHZhbDsgICAgICAgICAgICAgIC8vIGZpbmRcbiAgICAgICAgICBjYXNlIDY6IHJldHVybiBpbmRleDsgICAgICAgICAgICAvLyBmaW5kSW5kZXhcbiAgICAgICAgICBjYXNlIDI6IHJlc3VsdC5wdXNoKHZhbCk7ICAgICAgICAvLyBmaWx0ZXJcbiAgICAgICAgfSBlbHNlIGlmIChJU19FVkVSWSkgcmV0dXJuIGZhbHNlOyAvLyBldmVyeVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gSVNfRklORF9JTkRFWCA/IC0xIDogSVNfU09NRSB8fCBJU19FVkVSWSA/IElTX0VWRVJZIDogcmVzdWx0O1xuICB9O1xufTtcbiIsInZhciB0b1N0cmluZyA9IHt9LnRvU3RyaW5nO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gdG9TdHJpbmcuY2FsbChpdCkuc2xpY2UoOCwgLTEpO1xufTtcbiIsIi8vIDcuMi4xIFJlcXVpcmVPYmplY3RDb2VyY2libGUoYXJndW1lbnQpXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICBpZiAoaXQgPT0gdW5kZWZpbmVkKSB0aHJvdyBUeXBlRXJyb3IoXCJDYW4ndCBjYWxsIG1ldGhvZCBvbiAgXCIgKyBpdCk7XG4gIHJldHVybiBpdDtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5pZiAocmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKSkge1xuICB2YXIgTElCUkFSWSA9IHJlcXVpcmUoJy4vX2xpYnJhcnknKTtcbiAgdmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpO1xuICB2YXIgZmFpbHMgPSByZXF1aXJlKCcuL19mYWlscycpO1xuICB2YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuICB2YXIgJHR5cGVkID0gcmVxdWlyZSgnLi9fdHlwZWQnKTtcbiAgdmFyICRidWZmZXIgPSByZXF1aXJlKCcuL190eXBlZC1idWZmZXInKTtcbiAgdmFyIGN0eCA9IHJlcXVpcmUoJy4vX2N0eCcpO1xuICB2YXIgYW5JbnN0YW5jZSA9IHJlcXVpcmUoJy4vX2FuLWluc3RhbmNlJyk7XG4gIHZhciBwcm9wZXJ0eURlc2MgPSByZXF1aXJlKCcuL19wcm9wZXJ0eS1kZXNjJyk7XG4gIHZhciBoaWRlID0gcmVxdWlyZSgnLi9faGlkZScpO1xuICB2YXIgcmVkZWZpbmVBbGwgPSByZXF1aXJlKCcuL19yZWRlZmluZS1hbGwnKTtcbiAgdmFyIHRvSW50ZWdlciA9IHJlcXVpcmUoJy4vX3RvLWludGVnZXInKTtcbiAgdmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi9fdG8tbGVuZ3RoJyk7XG4gIHZhciB0b0luZGV4ID0gcmVxdWlyZSgnLi9fdG8taW5kZXgnKTtcbiAgdmFyIHRvQWJzb2x1dGVJbmRleCA9IHJlcXVpcmUoJy4vX3RvLWFic29sdXRlLWluZGV4Jyk7XG4gIHZhciB0b1ByaW1pdGl2ZSA9IHJlcXVpcmUoJy4vX3RvLXByaW1pdGl2ZScpO1xuICB2YXIgaGFzID0gcmVxdWlyZSgnLi9faGFzJyk7XG4gIHZhciBjbGFzc29mID0gcmVxdWlyZSgnLi9fY2xhc3NvZicpO1xuICB2YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbiAgdmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8tb2JqZWN0Jyk7XG4gIHZhciBpc0FycmF5SXRlciA9IHJlcXVpcmUoJy4vX2lzLWFycmF5LWl0ZXInKTtcbiAgdmFyIGNyZWF0ZSA9IHJlcXVpcmUoJy4vX29iamVjdC1jcmVhdGUnKTtcbiAgdmFyIGdldFByb3RvdHlwZU9mID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdwbycpO1xuICB2YXIgZ09QTiA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BuJykuZjtcbiAgdmFyIGdldEl0ZXJGbiA9IHJlcXVpcmUoJy4vY29yZS5nZXQtaXRlcmF0b3ItbWV0aG9kJyk7XG4gIHZhciB1aWQgPSByZXF1aXJlKCcuL191aWQnKTtcbiAgdmFyIHdrcyA9IHJlcXVpcmUoJy4vX3drcycpO1xuICB2YXIgY3JlYXRlQXJyYXlNZXRob2QgPSByZXF1aXJlKCcuL19hcnJheS1tZXRob2RzJyk7XG4gIHZhciBjcmVhdGVBcnJheUluY2x1ZGVzID0gcmVxdWlyZSgnLi9fYXJyYXktaW5jbHVkZXMnKTtcbiAgdmFyIHNwZWNpZXNDb25zdHJ1Y3RvciA9IHJlcXVpcmUoJy4vX3NwZWNpZXMtY29uc3RydWN0b3InKTtcbiAgdmFyIEFycmF5SXRlcmF0b3JzID0gcmVxdWlyZSgnLi9lczYuYXJyYXkuaXRlcmF0b3InKTtcbiAgdmFyIEl0ZXJhdG9ycyA9IHJlcXVpcmUoJy4vX2l0ZXJhdG9ycycpO1xuICB2YXIgJGl0ZXJEZXRlY3QgPSByZXF1aXJlKCcuL19pdGVyLWRldGVjdCcpO1xuICB2YXIgc2V0U3BlY2llcyA9IHJlcXVpcmUoJy4vX3NldC1zcGVjaWVzJyk7XG4gIHZhciBhcnJheUZpbGwgPSByZXF1aXJlKCcuL19hcnJheS1maWxsJyk7XG4gIHZhciBhcnJheUNvcHlXaXRoaW4gPSByZXF1aXJlKCcuL19hcnJheS1jb3B5LXdpdGhpbicpO1xuICB2YXIgJERQID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJyk7XG4gIHZhciAkR09QRCA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BkJyk7XG4gIHZhciBkUCA9ICREUC5mO1xuICB2YXIgZ09QRCA9ICRHT1BELmY7XG4gIHZhciBSYW5nZUVycm9yID0gZ2xvYmFsLlJhbmdlRXJyb3I7XG4gIHZhciBUeXBlRXJyb3IgPSBnbG9iYWwuVHlwZUVycm9yO1xuICB2YXIgVWludDhBcnJheSA9IGdsb2JhbC5VaW50OEFycmF5O1xuICB2YXIgQVJSQVlfQlVGRkVSID0gJ0FycmF5QnVmZmVyJztcbiAgdmFyIFNIQVJFRF9CVUZGRVIgPSAnU2hhcmVkJyArIEFSUkFZX0JVRkZFUjtcbiAgdmFyIEJZVEVTX1BFUl9FTEVNRU5UID0gJ0JZVEVTX1BFUl9FTEVNRU5UJztcbiAgdmFyIFBST1RPVFlQRSA9ICdwcm90b3R5cGUnO1xuICB2YXIgQXJyYXlQcm90byA9IEFycmF5W1BST1RPVFlQRV07XG4gIHZhciAkQXJyYXlCdWZmZXIgPSAkYnVmZmVyLkFycmF5QnVmZmVyO1xuICB2YXIgJERhdGFWaWV3ID0gJGJ1ZmZlci5EYXRhVmlldztcbiAgdmFyIGFycmF5Rm9yRWFjaCA9IGNyZWF0ZUFycmF5TWV0aG9kKDApO1xuICB2YXIgYXJyYXlGaWx0ZXIgPSBjcmVhdGVBcnJheU1ldGhvZCgyKTtcbiAgdmFyIGFycmF5U29tZSA9IGNyZWF0ZUFycmF5TWV0aG9kKDMpO1xuICB2YXIgYXJyYXlFdmVyeSA9IGNyZWF0ZUFycmF5TWV0aG9kKDQpO1xuICB2YXIgYXJyYXlGaW5kID0gY3JlYXRlQXJyYXlNZXRob2QoNSk7XG4gIHZhciBhcnJheUZpbmRJbmRleCA9IGNyZWF0ZUFycmF5TWV0aG9kKDYpO1xuICB2YXIgYXJyYXlJbmNsdWRlcyA9IGNyZWF0ZUFycmF5SW5jbHVkZXModHJ1ZSk7XG4gIHZhciBhcnJheUluZGV4T2YgPSBjcmVhdGVBcnJheUluY2x1ZGVzKGZhbHNlKTtcbiAgdmFyIGFycmF5VmFsdWVzID0gQXJyYXlJdGVyYXRvcnMudmFsdWVzO1xuICB2YXIgYXJyYXlLZXlzID0gQXJyYXlJdGVyYXRvcnMua2V5cztcbiAgdmFyIGFycmF5RW50cmllcyA9IEFycmF5SXRlcmF0b3JzLmVudHJpZXM7XG4gIHZhciBhcnJheUxhc3RJbmRleE9mID0gQXJyYXlQcm90by5sYXN0SW5kZXhPZjtcbiAgdmFyIGFycmF5UmVkdWNlID0gQXJyYXlQcm90by5yZWR1Y2U7XG4gIHZhciBhcnJheVJlZHVjZVJpZ2h0ID0gQXJyYXlQcm90by5yZWR1Y2VSaWdodDtcbiAgdmFyIGFycmF5Sm9pbiA9IEFycmF5UHJvdG8uam9pbjtcbiAgdmFyIGFycmF5U29ydCA9IEFycmF5UHJvdG8uc29ydDtcbiAgdmFyIGFycmF5U2xpY2UgPSBBcnJheVByb3RvLnNsaWNlO1xuICB2YXIgYXJyYXlUb1N0cmluZyA9IEFycmF5UHJvdG8udG9TdHJpbmc7XG4gIHZhciBhcnJheVRvTG9jYWxlU3RyaW5nID0gQXJyYXlQcm90by50b0xvY2FsZVN0cmluZztcbiAgdmFyIElURVJBVE9SID0gd2tzKCdpdGVyYXRvcicpO1xuICB2YXIgVEFHID0gd2tzKCd0b1N0cmluZ1RhZycpO1xuICB2YXIgVFlQRURfQ09OU1RSVUNUT1IgPSB1aWQoJ3R5cGVkX2NvbnN0cnVjdG9yJyk7XG4gIHZhciBERUZfQ09OU1RSVUNUT1IgPSB1aWQoJ2RlZl9jb25zdHJ1Y3RvcicpO1xuICB2YXIgQUxMX0NPTlNUUlVDVE9SUyA9ICR0eXBlZC5DT05TVFI7XG4gIHZhciBUWVBFRF9BUlJBWSA9ICR0eXBlZC5UWVBFRDtcbiAgdmFyIFZJRVcgPSAkdHlwZWQuVklFVztcbiAgdmFyIFdST05HX0xFTkdUSCA9ICdXcm9uZyBsZW5ndGghJztcblxuICB2YXIgJG1hcCA9IGNyZWF0ZUFycmF5TWV0aG9kKDEsIGZ1bmN0aW9uIChPLCBsZW5ndGgpIHtcbiAgICByZXR1cm4gYWxsb2NhdGUoc3BlY2llc0NvbnN0cnVjdG9yKE8sIE9bREVGX0NPTlNUUlVDVE9SXSksIGxlbmd0aCk7XG4gIH0pO1xuXG4gIHZhciBMSVRUTEVfRU5ESUFOID0gZmFpbHMoZnVuY3Rpb24gKCkge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bmRlZlxuICAgIHJldHVybiBuZXcgVWludDhBcnJheShuZXcgVWludDE2QXJyYXkoWzFdKS5idWZmZXIpWzBdID09PSAxO1xuICB9KTtcblxuICB2YXIgRk9SQ0VEX1NFVCA9ICEhVWludDhBcnJheSAmJiAhIVVpbnQ4QXJyYXlbUFJPVE9UWVBFXS5zZXQgJiYgZmFpbHMoZnVuY3Rpb24gKCkge1xuICAgIG5ldyBVaW50OEFycmF5KDEpLnNldCh7fSk7XG4gIH0pO1xuXG4gIHZhciB0b09mZnNldCA9IGZ1bmN0aW9uIChpdCwgQllURVMpIHtcbiAgICB2YXIgb2Zmc2V0ID0gdG9JbnRlZ2VyKGl0KTtcbiAgICBpZiAob2Zmc2V0IDwgMCB8fCBvZmZzZXQgJSBCWVRFUykgdGhyb3cgUmFuZ2VFcnJvcignV3Jvbmcgb2Zmc2V0IScpO1xuICAgIHJldHVybiBvZmZzZXQ7XG4gIH07XG5cbiAgdmFyIHZhbGlkYXRlID0gZnVuY3Rpb24gKGl0KSB7XG4gICAgaWYgKGlzT2JqZWN0KGl0KSAmJiBUWVBFRF9BUlJBWSBpbiBpdCkgcmV0dXJuIGl0O1xuICAgIHRocm93IFR5cGVFcnJvcihpdCArICcgaXMgbm90IGEgdHlwZWQgYXJyYXkhJyk7XG4gIH07XG5cbiAgdmFyIGFsbG9jYXRlID0gZnVuY3Rpb24gKEMsIGxlbmd0aCkge1xuICAgIGlmICghKGlzT2JqZWN0KEMpICYmIFRZUEVEX0NPTlNUUlVDVE9SIGluIEMpKSB7XG4gICAgICB0aHJvdyBUeXBlRXJyb3IoJ0l0IGlzIG5vdCBhIHR5cGVkIGFycmF5IGNvbnN0cnVjdG9yIScpO1xuICAgIH0gcmV0dXJuIG5ldyBDKGxlbmd0aCk7XG4gIH07XG5cbiAgdmFyIHNwZWNpZXNGcm9tTGlzdCA9IGZ1bmN0aW9uIChPLCBsaXN0KSB7XG4gICAgcmV0dXJuIGZyb21MaXN0KHNwZWNpZXNDb25zdHJ1Y3RvcihPLCBPW0RFRl9DT05TVFJVQ1RPUl0pLCBsaXN0KTtcbiAgfTtcblxuICB2YXIgZnJvbUxpc3QgPSBmdW5jdGlvbiAoQywgbGlzdCkge1xuICAgIHZhciBpbmRleCA9IDA7XG4gICAgdmFyIGxlbmd0aCA9IGxpc3QubGVuZ3RoO1xuICAgIHZhciByZXN1bHQgPSBhbGxvY2F0ZShDLCBsZW5ndGgpO1xuICAgIHdoaWxlIChsZW5ndGggPiBpbmRleCkgcmVzdWx0W2luZGV4XSA9IGxpc3RbaW5kZXgrK107XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfTtcblxuICB2YXIgYWRkR2V0dGVyID0gZnVuY3Rpb24gKGl0LCBrZXksIGludGVybmFsKSB7XG4gICAgZFAoaXQsIGtleSwgeyBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXMuX2RbaW50ZXJuYWxdOyB9IH0pO1xuICB9O1xuXG4gIHZhciAkZnJvbSA9IGZ1bmN0aW9uIGZyb20oc291cmNlIC8qICwgbWFwZm4sIHRoaXNBcmcgKi8pIHtcbiAgICB2YXIgTyA9IHRvT2JqZWN0KHNvdXJjZSk7XG4gICAgdmFyIGFMZW4gPSBhcmd1bWVudHMubGVuZ3RoO1xuICAgIHZhciBtYXBmbiA9IGFMZW4gPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkO1xuICAgIHZhciBtYXBwaW5nID0gbWFwZm4gIT09IHVuZGVmaW5lZDtcbiAgICB2YXIgaXRlckZuID0gZ2V0SXRlckZuKE8pO1xuICAgIHZhciBpLCBsZW5ndGgsIHZhbHVlcywgcmVzdWx0LCBzdGVwLCBpdGVyYXRvcjtcbiAgICBpZiAoaXRlckZuICE9IHVuZGVmaW5lZCAmJiAhaXNBcnJheUl0ZXIoaXRlckZuKSkge1xuICAgICAgZm9yIChpdGVyYXRvciA9IGl0ZXJGbi5jYWxsKE8pLCB2YWx1ZXMgPSBbXSwgaSA9IDA7ICEoc3RlcCA9IGl0ZXJhdG9yLm5leHQoKSkuZG9uZTsgaSsrKSB7XG4gICAgICAgIHZhbHVlcy5wdXNoKHN0ZXAudmFsdWUpO1xuICAgICAgfSBPID0gdmFsdWVzO1xuICAgIH1cbiAgICBpZiAobWFwcGluZyAmJiBhTGVuID4gMikgbWFwZm4gPSBjdHgobWFwZm4sIGFyZ3VtZW50c1syXSwgMik7XG4gICAgZm9yIChpID0gMCwgbGVuZ3RoID0gdG9MZW5ndGgoTy5sZW5ndGgpLCByZXN1bHQgPSBhbGxvY2F0ZSh0aGlzLCBsZW5ndGgpOyBsZW5ndGggPiBpOyBpKyspIHtcbiAgICAgIHJlc3VsdFtpXSA9IG1hcHBpbmcgPyBtYXBmbihPW2ldLCBpKSA6IE9baV07XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH07XG5cbiAgdmFyICRvZiA9IGZ1bmN0aW9uIG9mKC8qIC4uLml0ZW1zICovKSB7XG4gICAgdmFyIGluZGV4ID0gMDtcbiAgICB2YXIgbGVuZ3RoID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgICB2YXIgcmVzdWx0ID0gYWxsb2NhdGUodGhpcywgbGVuZ3RoKTtcbiAgICB3aGlsZSAobGVuZ3RoID4gaW5kZXgpIHJlc3VsdFtpbmRleF0gPSBhcmd1bWVudHNbaW5kZXgrK107XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfTtcblxuICAvLyBpT1MgU2FmYXJpIDYueCBmYWlscyBoZXJlXG4gIHZhciBUT19MT0NBTEVfQlVHID0gISFVaW50OEFycmF5ICYmIGZhaWxzKGZ1bmN0aW9uICgpIHsgYXJyYXlUb0xvY2FsZVN0cmluZy5jYWxsKG5ldyBVaW50OEFycmF5KDEpKTsgfSk7XG5cbiAgdmFyICR0b0xvY2FsZVN0cmluZyA9IGZ1bmN0aW9uIHRvTG9jYWxlU3RyaW5nKCkge1xuICAgIHJldHVybiBhcnJheVRvTG9jYWxlU3RyaW5nLmFwcGx5KFRPX0xPQ0FMRV9CVUcgPyBhcnJheVNsaWNlLmNhbGwodmFsaWRhdGUodGhpcykpIDogdmFsaWRhdGUodGhpcyksIGFyZ3VtZW50cyk7XG4gIH07XG5cbiAgdmFyIHByb3RvID0ge1xuICAgIGNvcHlXaXRoaW46IGZ1bmN0aW9uIGNvcHlXaXRoaW4odGFyZ2V0LCBzdGFydCAvKiAsIGVuZCAqLykge1xuICAgICAgcmV0dXJuIGFycmF5Q29weVdpdGhpbi5jYWxsKHZhbGlkYXRlKHRoaXMpLCB0YXJnZXQsIHN0YXJ0LCBhcmd1bWVudHMubGVuZ3RoID4gMiA/IGFyZ3VtZW50c1syXSA6IHVuZGVmaW5lZCk7XG4gICAgfSxcbiAgICBldmVyeTogZnVuY3Rpb24gZXZlcnkoY2FsbGJhY2tmbiAvKiAsIHRoaXNBcmcgKi8pIHtcbiAgICAgIHJldHVybiBhcnJheUV2ZXJ5KHZhbGlkYXRlKHRoaXMpLCBjYWxsYmFja2ZuLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCk7XG4gICAgfSxcbiAgICBmaWxsOiBmdW5jdGlvbiBmaWxsKHZhbHVlIC8qICwgc3RhcnQsIGVuZCAqLykgeyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVudXNlZC12YXJzXG4gICAgICByZXR1cm4gYXJyYXlGaWxsLmFwcGx5KHZhbGlkYXRlKHRoaXMpLCBhcmd1bWVudHMpO1xuICAgIH0sXG4gICAgZmlsdGVyOiBmdW5jdGlvbiBmaWx0ZXIoY2FsbGJhY2tmbiAvKiAsIHRoaXNBcmcgKi8pIHtcbiAgICAgIHJldHVybiBzcGVjaWVzRnJvbUxpc3QodGhpcywgYXJyYXlGaWx0ZXIodmFsaWRhdGUodGhpcyksIGNhbGxiYWNrZm4sXG4gICAgICAgIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKSk7XG4gICAgfSxcbiAgICBmaW5kOiBmdW5jdGlvbiBmaW5kKHByZWRpY2F0ZSAvKiAsIHRoaXNBcmcgKi8pIHtcbiAgICAgIHJldHVybiBhcnJheUZpbmQodmFsaWRhdGUodGhpcyksIHByZWRpY2F0ZSwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpO1xuICAgIH0sXG4gICAgZmluZEluZGV4OiBmdW5jdGlvbiBmaW5kSW5kZXgocHJlZGljYXRlIC8qICwgdGhpc0FyZyAqLykge1xuICAgICAgcmV0dXJuIGFycmF5RmluZEluZGV4KHZhbGlkYXRlKHRoaXMpLCBwcmVkaWNhdGUsIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKTtcbiAgICB9LFxuICAgIGZvckVhY2g6IGZ1bmN0aW9uIGZvckVhY2goY2FsbGJhY2tmbiAvKiAsIHRoaXNBcmcgKi8pIHtcbiAgICAgIGFycmF5Rm9yRWFjaCh2YWxpZGF0ZSh0aGlzKSwgY2FsbGJhY2tmbiwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpO1xuICAgIH0sXG4gICAgaW5kZXhPZjogZnVuY3Rpb24gaW5kZXhPZihzZWFyY2hFbGVtZW50IC8qICwgZnJvbUluZGV4ICovKSB7XG4gICAgICByZXR1cm4gYXJyYXlJbmRleE9mKHZhbGlkYXRlKHRoaXMpLCBzZWFyY2hFbGVtZW50LCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCk7XG4gICAgfSxcbiAgICBpbmNsdWRlczogZnVuY3Rpb24gaW5jbHVkZXMoc2VhcmNoRWxlbWVudCAvKiAsIGZyb21JbmRleCAqLykge1xuICAgICAgcmV0dXJuIGFycmF5SW5jbHVkZXModmFsaWRhdGUodGhpcyksIHNlYXJjaEVsZW1lbnQsIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKTtcbiAgICB9LFxuICAgIGpvaW46IGZ1bmN0aW9uIGpvaW4oc2VwYXJhdG9yKSB7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW51c2VkLXZhcnNcbiAgICAgIHJldHVybiBhcnJheUpvaW4uYXBwbHkodmFsaWRhdGUodGhpcyksIGFyZ3VtZW50cyk7XG4gICAgfSxcbiAgICBsYXN0SW5kZXhPZjogZnVuY3Rpb24gbGFzdEluZGV4T2Yoc2VhcmNoRWxlbWVudCAvKiAsIGZyb21JbmRleCAqLykgeyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVudXNlZC12YXJzXG4gICAgICByZXR1cm4gYXJyYXlMYXN0SW5kZXhPZi5hcHBseSh2YWxpZGF0ZSh0aGlzKSwgYXJndW1lbnRzKTtcbiAgICB9LFxuICAgIG1hcDogZnVuY3Rpb24gbWFwKG1hcGZuIC8qICwgdGhpc0FyZyAqLykge1xuICAgICAgcmV0dXJuICRtYXAodmFsaWRhdGUodGhpcyksIG1hcGZuLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCk7XG4gICAgfSxcbiAgICByZWR1Y2U6IGZ1bmN0aW9uIHJlZHVjZShjYWxsYmFja2ZuIC8qICwgaW5pdGlhbFZhbHVlICovKSB7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW51c2VkLXZhcnNcbiAgICAgIHJldHVybiBhcnJheVJlZHVjZS5hcHBseSh2YWxpZGF0ZSh0aGlzKSwgYXJndW1lbnRzKTtcbiAgICB9LFxuICAgIHJlZHVjZVJpZ2h0OiBmdW5jdGlvbiByZWR1Y2VSaWdodChjYWxsYmFja2ZuIC8qICwgaW5pdGlhbFZhbHVlICovKSB7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW51c2VkLXZhcnNcbiAgICAgIHJldHVybiBhcnJheVJlZHVjZVJpZ2h0LmFwcGx5KHZhbGlkYXRlKHRoaXMpLCBhcmd1bWVudHMpO1xuICAgIH0sXG4gICAgcmV2ZXJzZTogZnVuY3Rpb24gcmV2ZXJzZSgpIHtcbiAgICAgIHZhciB0aGF0ID0gdGhpcztcbiAgICAgIHZhciBsZW5ndGggPSB2YWxpZGF0ZSh0aGF0KS5sZW5ndGg7XG4gICAgICB2YXIgbWlkZGxlID0gTWF0aC5mbG9vcihsZW5ndGggLyAyKTtcbiAgICAgIHZhciBpbmRleCA9IDA7XG4gICAgICB2YXIgdmFsdWU7XG4gICAgICB3aGlsZSAoaW5kZXggPCBtaWRkbGUpIHtcbiAgICAgICAgdmFsdWUgPSB0aGF0W2luZGV4XTtcbiAgICAgICAgdGhhdFtpbmRleCsrXSA9IHRoYXRbLS1sZW5ndGhdO1xuICAgICAgICB0aGF0W2xlbmd0aF0gPSB2YWx1ZTtcbiAgICAgIH0gcmV0dXJuIHRoYXQ7XG4gICAgfSxcbiAgICBzb21lOiBmdW5jdGlvbiBzb21lKGNhbGxiYWNrZm4gLyogLCB0aGlzQXJnICovKSB7XG4gICAgICByZXR1cm4gYXJyYXlTb21lKHZhbGlkYXRlKHRoaXMpLCBjYWxsYmFja2ZuLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCk7XG4gICAgfSxcbiAgICBzb3J0OiBmdW5jdGlvbiBzb3J0KGNvbXBhcmVmbikge1xuICAgICAgcmV0dXJuIGFycmF5U29ydC5jYWxsKHZhbGlkYXRlKHRoaXMpLCBjb21wYXJlZm4pO1xuICAgIH0sXG4gICAgc3ViYXJyYXk6IGZ1bmN0aW9uIHN1YmFycmF5KGJlZ2luLCBlbmQpIHtcbiAgICAgIHZhciBPID0gdmFsaWRhdGUodGhpcyk7XG4gICAgICB2YXIgbGVuZ3RoID0gTy5sZW5ndGg7XG4gICAgICB2YXIgJGJlZ2luID0gdG9BYnNvbHV0ZUluZGV4KGJlZ2luLCBsZW5ndGgpO1xuICAgICAgcmV0dXJuIG5ldyAoc3BlY2llc0NvbnN0cnVjdG9yKE8sIE9bREVGX0NPTlNUUlVDVE9SXSkpKFxuICAgICAgICBPLmJ1ZmZlcixcbiAgICAgICAgTy5ieXRlT2Zmc2V0ICsgJGJlZ2luICogTy5CWVRFU19QRVJfRUxFTUVOVCxcbiAgICAgICAgdG9MZW5ndGgoKGVuZCA9PT0gdW5kZWZpbmVkID8gbGVuZ3RoIDogdG9BYnNvbHV0ZUluZGV4KGVuZCwgbGVuZ3RoKSkgLSAkYmVnaW4pXG4gICAgICApO1xuICAgIH1cbiAgfTtcblxuICB2YXIgJHNsaWNlID0gZnVuY3Rpb24gc2xpY2Uoc3RhcnQsIGVuZCkge1xuICAgIHJldHVybiBzcGVjaWVzRnJvbUxpc3QodGhpcywgYXJyYXlTbGljZS5jYWxsKHZhbGlkYXRlKHRoaXMpLCBzdGFydCwgZW5kKSk7XG4gIH07XG5cbiAgdmFyICRzZXQgPSBmdW5jdGlvbiBzZXQoYXJyYXlMaWtlIC8qICwgb2Zmc2V0ICovKSB7XG4gICAgdmFsaWRhdGUodGhpcyk7XG4gICAgdmFyIG9mZnNldCA9IHRvT2Zmc2V0KGFyZ3VtZW50c1sxXSwgMSk7XG4gICAgdmFyIGxlbmd0aCA9IHRoaXMubGVuZ3RoO1xuICAgIHZhciBzcmMgPSB0b09iamVjdChhcnJheUxpa2UpO1xuICAgIHZhciBsZW4gPSB0b0xlbmd0aChzcmMubGVuZ3RoKTtcbiAgICB2YXIgaW5kZXggPSAwO1xuICAgIGlmIChsZW4gKyBvZmZzZXQgPiBsZW5ndGgpIHRocm93IFJhbmdlRXJyb3IoV1JPTkdfTEVOR1RIKTtcbiAgICB3aGlsZSAoaW5kZXggPCBsZW4pIHRoaXNbb2Zmc2V0ICsgaW5kZXhdID0gc3JjW2luZGV4KytdO1xuICB9O1xuXG4gIHZhciAkaXRlcmF0b3JzID0ge1xuICAgIGVudHJpZXM6IGZ1bmN0aW9uIGVudHJpZXMoKSB7XG4gICAgICByZXR1cm4gYXJyYXlFbnRyaWVzLmNhbGwodmFsaWRhdGUodGhpcykpO1xuICAgIH0sXG4gICAga2V5czogZnVuY3Rpb24ga2V5cygpIHtcbiAgICAgIHJldHVybiBhcnJheUtleXMuY2FsbCh2YWxpZGF0ZSh0aGlzKSk7XG4gICAgfSxcbiAgICB2YWx1ZXM6IGZ1bmN0aW9uIHZhbHVlcygpIHtcbiAgICAgIHJldHVybiBhcnJheVZhbHVlcy5jYWxsKHZhbGlkYXRlKHRoaXMpKTtcbiAgICB9XG4gIH07XG5cbiAgdmFyIGlzVEFJbmRleCA9IGZ1bmN0aW9uICh0YXJnZXQsIGtleSkge1xuICAgIHJldHVybiBpc09iamVjdCh0YXJnZXQpXG4gICAgICAmJiB0YXJnZXRbVFlQRURfQVJSQVldXG4gICAgICAmJiB0eXBlb2Yga2V5ICE9ICdzeW1ib2wnXG4gICAgICAmJiBrZXkgaW4gdGFyZ2V0XG4gICAgICAmJiBTdHJpbmcoK2tleSkgPT0gU3RyaW5nKGtleSk7XG4gIH07XG4gIHZhciAkZ2V0RGVzYyA9IGZ1bmN0aW9uIGdldE93blByb3BlcnR5RGVzY3JpcHRvcih0YXJnZXQsIGtleSkge1xuICAgIHJldHVybiBpc1RBSW5kZXgodGFyZ2V0LCBrZXkgPSB0b1ByaW1pdGl2ZShrZXksIHRydWUpKVxuICAgICAgPyBwcm9wZXJ0eURlc2MoMiwgdGFyZ2V0W2tleV0pXG4gICAgICA6IGdPUEQodGFyZ2V0LCBrZXkpO1xuICB9O1xuICB2YXIgJHNldERlc2MgPSBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgZGVzYykge1xuICAgIGlmIChpc1RBSW5kZXgodGFyZ2V0LCBrZXkgPSB0b1ByaW1pdGl2ZShrZXksIHRydWUpKVxuICAgICAgJiYgaXNPYmplY3QoZGVzYylcbiAgICAgICYmIGhhcyhkZXNjLCAndmFsdWUnKVxuICAgICAgJiYgIWhhcyhkZXNjLCAnZ2V0JylcbiAgICAgICYmICFoYXMoZGVzYywgJ3NldCcpXG4gICAgICAvLyBUT0RPOiBhZGQgdmFsaWRhdGlvbiBkZXNjcmlwdG9yIHcvbyBjYWxsaW5nIGFjY2Vzc29yc1xuICAgICAgJiYgIWRlc2MuY29uZmlndXJhYmxlXG4gICAgICAmJiAoIWhhcyhkZXNjLCAnd3JpdGFibGUnKSB8fCBkZXNjLndyaXRhYmxlKVxuICAgICAgJiYgKCFoYXMoZGVzYywgJ2VudW1lcmFibGUnKSB8fCBkZXNjLmVudW1lcmFibGUpXG4gICAgKSB7XG4gICAgICB0YXJnZXRba2V5XSA9IGRlc2MudmFsdWU7XG4gICAgICByZXR1cm4gdGFyZ2V0O1xuICAgIH0gcmV0dXJuIGRQKHRhcmdldCwga2V5LCBkZXNjKTtcbiAgfTtcblxuICBpZiAoIUFMTF9DT05TVFJVQ1RPUlMpIHtcbiAgICAkR09QRC5mID0gJGdldERlc2M7XG4gICAgJERQLmYgPSAkc2V0RGVzYztcbiAgfVxuXG4gICRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogIUFMTF9DT05TVFJVQ1RPUlMsICdPYmplY3QnLCB7XG4gICAgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yOiAkZ2V0RGVzYyxcbiAgICBkZWZpbmVQcm9wZXJ0eTogJHNldERlc2NcbiAgfSk7XG5cbiAgaWYgKGZhaWxzKGZ1bmN0aW9uICgpIHsgYXJyYXlUb1N0cmluZy5jYWxsKHt9KTsgfSkpIHtcbiAgICBhcnJheVRvU3RyaW5nID0gYXJyYXlUb0xvY2FsZVN0cmluZyA9IGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICAgICAgcmV0dXJuIGFycmF5Sm9pbi5jYWxsKHRoaXMpO1xuICAgIH07XG4gIH1cblxuICB2YXIgJFR5cGVkQXJyYXlQcm90b3R5cGUkID0gcmVkZWZpbmVBbGwoe30sIHByb3RvKTtcbiAgcmVkZWZpbmVBbGwoJFR5cGVkQXJyYXlQcm90b3R5cGUkLCAkaXRlcmF0b3JzKTtcbiAgaGlkZSgkVHlwZWRBcnJheVByb3RvdHlwZSQsIElURVJBVE9SLCAkaXRlcmF0b3JzLnZhbHVlcyk7XG4gIHJlZGVmaW5lQWxsKCRUeXBlZEFycmF5UHJvdG90eXBlJCwge1xuICAgIHNsaWNlOiAkc2xpY2UsXG4gICAgc2V0OiAkc2V0LFxuICAgIGNvbnN0cnVjdG9yOiBmdW5jdGlvbiAoKSB7IC8qIG5vb3AgKi8gfSxcbiAgICB0b1N0cmluZzogYXJyYXlUb1N0cmluZyxcbiAgICB0b0xvY2FsZVN0cmluZzogJHRvTG9jYWxlU3RyaW5nXG4gIH0pO1xuICBhZGRHZXR0ZXIoJFR5cGVkQXJyYXlQcm90b3R5cGUkLCAnYnVmZmVyJywgJ2InKTtcbiAgYWRkR2V0dGVyKCRUeXBlZEFycmF5UHJvdG90eXBlJCwgJ2J5dGVPZmZzZXQnLCAnbycpO1xuICBhZGRHZXR0ZXIoJFR5cGVkQXJyYXlQcm90b3R5cGUkLCAnYnl0ZUxlbmd0aCcsICdsJyk7XG4gIGFkZEdldHRlcigkVHlwZWRBcnJheVByb3RvdHlwZSQsICdsZW5ndGgnLCAnZScpO1xuICBkUCgkVHlwZWRBcnJheVByb3RvdHlwZSQsIFRBRywge1xuICAgIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpc1tUWVBFRF9BUlJBWV07IH1cbiAgfSk7XG5cbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG1heC1zdGF0ZW1lbnRzXG4gIG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKEtFWSwgQllURVMsIHdyYXBwZXIsIENMQU1QRUQpIHtcbiAgICBDTEFNUEVEID0gISFDTEFNUEVEO1xuICAgIHZhciBOQU1FID0gS0VZICsgKENMQU1QRUQgPyAnQ2xhbXBlZCcgOiAnJykgKyAnQXJyYXknO1xuICAgIHZhciBHRVRURVIgPSAnZ2V0JyArIEtFWTtcbiAgICB2YXIgU0VUVEVSID0gJ3NldCcgKyBLRVk7XG4gICAgdmFyIFR5cGVkQXJyYXkgPSBnbG9iYWxbTkFNRV07XG4gICAgdmFyIEJhc2UgPSBUeXBlZEFycmF5IHx8IHt9O1xuICAgIHZhciBUQUMgPSBUeXBlZEFycmF5ICYmIGdldFByb3RvdHlwZU9mKFR5cGVkQXJyYXkpO1xuICAgIHZhciBGT1JDRUQgPSAhVHlwZWRBcnJheSB8fCAhJHR5cGVkLkFCVjtcbiAgICB2YXIgTyA9IHt9O1xuICAgIHZhciBUeXBlZEFycmF5UHJvdG90eXBlID0gVHlwZWRBcnJheSAmJiBUeXBlZEFycmF5W1BST1RPVFlQRV07XG4gICAgdmFyIGdldHRlciA9IGZ1bmN0aW9uICh0aGF0LCBpbmRleCkge1xuICAgICAgdmFyIGRhdGEgPSB0aGF0Ll9kO1xuICAgICAgcmV0dXJuIGRhdGEudltHRVRURVJdKGluZGV4ICogQllURVMgKyBkYXRhLm8sIExJVFRMRV9FTkRJQU4pO1xuICAgIH07XG4gICAgdmFyIHNldHRlciA9IGZ1bmN0aW9uICh0aGF0LCBpbmRleCwgdmFsdWUpIHtcbiAgICAgIHZhciBkYXRhID0gdGhhdC5fZDtcbiAgICAgIGlmIChDTEFNUEVEKSB2YWx1ZSA9ICh2YWx1ZSA9IE1hdGgucm91bmQodmFsdWUpKSA8IDAgPyAwIDogdmFsdWUgPiAweGZmID8gMHhmZiA6IHZhbHVlICYgMHhmZjtcbiAgICAgIGRhdGEudltTRVRURVJdKGluZGV4ICogQllURVMgKyBkYXRhLm8sIHZhbHVlLCBMSVRUTEVfRU5ESUFOKTtcbiAgICB9O1xuICAgIHZhciBhZGRFbGVtZW50ID0gZnVuY3Rpb24gKHRoYXQsIGluZGV4KSB7XG4gICAgICBkUCh0aGF0LCBpbmRleCwge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICByZXR1cm4gZ2V0dGVyKHRoaXMsIGluZGV4KTtcbiAgICAgICAgfSxcbiAgICAgICAgc2V0OiBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICByZXR1cm4gc2V0dGVyKHRoaXMsIGluZGV4LCB2YWx1ZSk7XG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcmFibGU6IHRydWVcbiAgICAgIH0pO1xuICAgIH07XG4gICAgaWYgKEZPUkNFRCkge1xuICAgICAgVHlwZWRBcnJheSA9IHdyYXBwZXIoZnVuY3Rpb24gKHRoYXQsIGRhdGEsICRvZmZzZXQsICRsZW5ndGgpIHtcbiAgICAgICAgYW5JbnN0YW5jZSh0aGF0LCBUeXBlZEFycmF5LCBOQU1FLCAnX2QnKTtcbiAgICAgICAgdmFyIGluZGV4ID0gMDtcbiAgICAgICAgdmFyIG9mZnNldCA9IDA7XG4gICAgICAgIHZhciBidWZmZXIsIGJ5dGVMZW5ndGgsIGxlbmd0aCwga2xhc3M7XG4gICAgICAgIGlmICghaXNPYmplY3QoZGF0YSkpIHtcbiAgICAgICAgICBsZW5ndGggPSB0b0luZGV4KGRhdGEpO1xuICAgICAgICAgIGJ5dGVMZW5ndGggPSBsZW5ndGggKiBCWVRFUztcbiAgICAgICAgICBidWZmZXIgPSBuZXcgJEFycmF5QnVmZmVyKGJ5dGVMZW5ndGgpO1xuICAgICAgICB9IGVsc2UgaWYgKGRhdGEgaW5zdGFuY2VvZiAkQXJyYXlCdWZmZXIgfHwgKGtsYXNzID0gY2xhc3NvZihkYXRhKSkgPT0gQVJSQVlfQlVGRkVSIHx8IGtsYXNzID09IFNIQVJFRF9CVUZGRVIpIHtcbiAgICAgICAgICBidWZmZXIgPSBkYXRhO1xuICAgICAgICAgIG9mZnNldCA9IHRvT2Zmc2V0KCRvZmZzZXQsIEJZVEVTKTtcbiAgICAgICAgICB2YXIgJGxlbiA9IGRhdGEuYnl0ZUxlbmd0aDtcbiAgICAgICAgICBpZiAoJGxlbmd0aCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBpZiAoJGxlbiAlIEJZVEVTKSB0aHJvdyBSYW5nZUVycm9yKFdST05HX0xFTkdUSCk7XG4gICAgICAgICAgICBieXRlTGVuZ3RoID0gJGxlbiAtIG9mZnNldDtcbiAgICAgICAgICAgIGlmIChieXRlTGVuZ3RoIDwgMCkgdGhyb3cgUmFuZ2VFcnJvcihXUk9OR19MRU5HVEgpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBieXRlTGVuZ3RoID0gdG9MZW5ndGgoJGxlbmd0aCkgKiBCWVRFUztcbiAgICAgICAgICAgIGlmIChieXRlTGVuZ3RoICsgb2Zmc2V0ID4gJGxlbikgdGhyb3cgUmFuZ2VFcnJvcihXUk9OR19MRU5HVEgpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBsZW5ndGggPSBieXRlTGVuZ3RoIC8gQllURVM7XG4gICAgICAgIH0gZWxzZSBpZiAoVFlQRURfQVJSQVkgaW4gZGF0YSkge1xuICAgICAgICAgIHJldHVybiBmcm9tTGlzdChUeXBlZEFycmF5LCBkYXRhKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXR1cm4gJGZyb20uY2FsbChUeXBlZEFycmF5LCBkYXRhKTtcbiAgICAgICAgfVxuICAgICAgICBoaWRlKHRoYXQsICdfZCcsIHtcbiAgICAgICAgICBiOiBidWZmZXIsXG4gICAgICAgICAgbzogb2Zmc2V0LFxuICAgICAgICAgIGw6IGJ5dGVMZW5ndGgsXG4gICAgICAgICAgZTogbGVuZ3RoLFxuICAgICAgICAgIHY6IG5ldyAkRGF0YVZpZXcoYnVmZmVyKVxuICAgICAgICB9KTtcbiAgICAgICAgd2hpbGUgKGluZGV4IDwgbGVuZ3RoKSBhZGRFbGVtZW50KHRoYXQsIGluZGV4KyspO1xuICAgICAgfSk7XG4gICAgICBUeXBlZEFycmF5UHJvdG90eXBlID0gVHlwZWRBcnJheVtQUk9UT1RZUEVdID0gY3JlYXRlKCRUeXBlZEFycmF5UHJvdG90eXBlJCk7XG4gICAgICBoaWRlKFR5cGVkQXJyYXlQcm90b3R5cGUsICdjb25zdHJ1Y3RvcicsIFR5cGVkQXJyYXkpO1xuICAgIH0gZWxzZSBpZiAoIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgICAgIFR5cGVkQXJyYXkoMSk7XG4gICAgfSkgfHwgIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgICAgIG5ldyBUeXBlZEFycmF5KC0xKTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1uZXdcbiAgICB9KSB8fCAhJGl0ZXJEZXRlY3QoZnVuY3Rpb24gKGl0ZXIpIHtcbiAgICAgIG5ldyBUeXBlZEFycmF5KCk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tbmV3XG4gICAgICBuZXcgVHlwZWRBcnJheShudWxsKTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1uZXdcbiAgICAgIG5ldyBUeXBlZEFycmF5KDEuNSk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tbmV3XG4gICAgICBuZXcgVHlwZWRBcnJheShpdGVyKTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1uZXdcbiAgICB9LCB0cnVlKSkge1xuICAgICAgVHlwZWRBcnJheSA9IHdyYXBwZXIoZnVuY3Rpb24gKHRoYXQsIGRhdGEsICRvZmZzZXQsICRsZW5ndGgpIHtcbiAgICAgICAgYW5JbnN0YW5jZSh0aGF0LCBUeXBlZEFycmF5LCBOQU1FKTtcbiAgICAgICAgdmFyIGtsYXNzO1xuICAgICAgICAvLyBgd3NgIG1vZHVsZSBidWcsIHRlbXBvcmFyaWx5IHJlbW92ZSB2YWxpZGF0aW9uIGxlbmd0aCBmb3IgVWludDhBcnJheVxuICAgICAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vd2Vic29ja2V0cy93cy9wdWxsLzY0NVxuICAgICAgICBpZiAoIWlzT2JqZWN0KGRhdGEpKSByZXR1cm4gbmV3IEJhc2UodG9JbmRleChkYXRhKSk7XG4gICAgICAgIGlmIChkYXRhIGluc3RhbmNlb2YgJEFycmF5QnVmZmVyIHx8IChrbGFzcyA9IGNsYXNzb2YoZGF0YSkpID09IEFSUkFZX0JVRkZFUiB8fCBrbGFzcyA9PSBTSEFSRURfQlVGRkVSKSB7XG4gICAgICAgICAgcmV0dXJuICRsZW5ndGggIT09IHVuZGVmaW5lZFxuICAgICAgICAgICAgPyBuZXcgQmFzZShkYXRhLCB0b09mZnNldCgkb2Zmc2V0LCBCWVRFUyksICRsZW5ndGgpXG4gICAgICAgICAgICA6ICRvZmZzZXQgIT09IHVuZGVmaW5lZFxuICAgICAgICAgICAgICA/IG5ldyBCYXNlKGRhdGEsIHRvT2Zmc2V0KCRvZmZzZXQsIEJZVEVTKSlcbiAgICAgICAgICAgICAgOiBuZXcgQmFzZShkYXRhKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoVFlQRURfQVJSQVkgaW4gZGF0YSkgcmV0dXJuIGZyb21MaXN0KFR5cGVkQXJyYXksIGRhdGEpO1xuICAgICAgICByZXR1cm4gJGZyb20uY2FsbChUeXBlZEFycmF5LCBkYXRhKTtcbiAgICAgIH0pO1xuICAgICAgYXJyYXlGb3JFYWNoKFRBQyAhPT0gRnVuY3Rpb24ucHJvdG90eXBlID8gZ09QTihCYXNlKS5jb25jYXQoZ09QTihUQUMpKSA6IGdPUE4oQmFzZSksIGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgaWYgKCEoa2V5IGluIFR5cGVkQXJyYXkpKSBoaWRlKFR5cGVkQXJyYXksIGtleSwgQmFzZVtrZXldKTtcbiAgICAgIH0pO1xuICAgICAgVHlwZWRBcnJheVtQUk9UT1RZUEVdID0gVHlwZWRBcnJheVByb3RvdHlwZTtcbiAgICAgIGlmICghTElCUkFSWSkgVHlwZWRBcnJheVByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IFR5cGVkQXJyYXk7XG4gICAgfVxuICAgIHZhciAkbmF0aXZlSXRlcmF0b3IgPSBUeXBlZEFycmF5UHJvdG90eXBlW0lURVJBVE9SXTtcbiAgICB2YXIgQ09SUkVDVF9JVEVSX05BTUUgPSAhISRuYXRpdmVJdGVyYXRvclxuICAgICAgJiYgKCRuYXRpdmVJdGVyYXRvci5uYW1lID09ICd2YWx1ZXMnIHx8ICRuYXRpdmVJdGVyYXRvci5uYW1lID09IHVuZGVmaW5lZCk7XG4gICAgdmFyICRpdGVyYXRvciA9ICRpdGVyYXRvcnMudmFsdWVzO1xuICAgIGhpZGUoVHlwZWRBcnJheSwgVFlQRURfQ09OU1RSVUNUT1IsIHRydWUpO1xuICAgIGhpZGUoVHlwZWRBcnJheVByb3RvdHlwZSwgVFlQRURfQVJSQVksIE5BTUUpO1xuICAgIGhpZGUoVHlwZWRBcnJheVByb3RvdHlwZSwgVklFVywgdHJ1ZSk7XG4gICAgaGlkZShUeXBlZEFycmF5UHJvdG90eXBlLCBERUZfQ09OU1RSVUNUT1IsIFR5cGVkQXJyYXkpO1xuXG4gICAgaWYgKENMQU1QRUQgPyBuZXcgVHlwZWRBcnJheSgxKVtUQUddICE9IE5BTUUgOiAhKFRBRyBpbiBUeXBlZEFycmF5UHJvdG90eXBlKSkge1xuICAgICAgZFAoVHlwZWRBcnJheVByb3RvdHlwZSwgVEFHLCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gTkFNRTsgfVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgT1tOQU1FXSA9IFR5cGVkQXJyYXk7XG5cbiAgICAkZXhwb3J0KCRleHBvcnQuRyArICRleHBvcnQuVyArICRleHBvcnQuRiAqIChUeXBlZEFycmF5ICE9IEJhc2UpLCBPKTtcblxuICAgICRleHBvcnQoJGV4cG9ydC5TLCBOQU1FLCB7XG4gICAgICBCWVRFU19QRVJfRUxFTUVOVDogQllURVNcbiAgICB9KTtcblxuICAgICRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogZmFpbHMoZnVuY3Rpb24gKCkgeyBCYXNlLm9mLmNhbGwoVHlwZWRBcnJheSwgMSk7IH0pLCBOQU1FLCB7XG4gICAgICBmcm9tOiAkZnJvbSxcbiAgICAgIG9mOiAkb2ZcbiAgICB9KTtcblxuICAgIGlmICghKEJZVEVTX1BFUl9FTEVNRU5UIGluIFR5cGVkQXJyYXlQcm90b3R5cGUpKSBoaWRlKFR5cGVkQXJyYXlQcm90b3R5cGUsIEJZVEVTX1BFUl9FTEVNRU5ULCBCWVRFUyk7XG5cbiAgICAkZXhwb3J0KCRleHBvcnQuUCwgTkFNRSwgcHJvdG8pO1xuXG4gICAgc2V0U3BlY2llcyhOQU1FKTtcblxuICAgICRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogRk9SQ0VEX1NFVCwgTkFNRSwgeyBzZXQ6ICRzZXQgfSk7XG5cbiAgICAkZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqICFDT1JSRUNUX0lURVJfTkFNRSwgTkFNRSwgJGl0ZXJhdG9ycyk7XG5cbiAgICBpZiAoIUxJQlJBUlkgJiYgVHlwZWRBcnJheVByb3RvdHlwZS50b1N0cmluZyAhPSBhcnJheVRvU3RyaW5nKSBUeXBlZEFycmF5UHJvdG90eXBlLnRvU3RyaW5nID0gYXJyYXlUb1N0cmluZztcblxuICAgICRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogZmFpbHMoZnVuY3Rpb24gKCkge1xuICAgICAgbmV3IFR5cGVkQXJyYXkoMSkuc2xpY2UoKTtcbiAgICB9KSwgTkFNRSwgeyBzbGljZTogJHNsaWNlIH0pO1xuXG4gICAgJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiAoZmFpbHMoZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIFsxLCAyXS50b0xvY2FsZVN0cmluZygpICE9IG5ldyBUeXBlZEFycmF5KFsxLCAyXSkudG9Mb2NhbGVTdHJpbmcoKTtcbiAgICB9KSB8fCAhZmFpbHMoZnVuY3Rpb24gKCkge1xuICAgICAgVHlwZWRBcnJheVByb3RvdHlwZS50b0xvY2FsZVN0cmluZy5jYWxsKFsxLCAyXSk7XG4gICAgfSkpLCBOQU1FLCB7IHRvTG9jYWxlU3RyaW5nOiAkdG9Mb2NhbGVTdHJpbmcgfSk7XG5cbiAgICBJdGVyYXRvcnNbTkFNRV0gPSBDT1JSRUNUX0lURVJfTkFNRSA/ICRuYXRpdmVJdGVyYXRvciA6ICRpdGVyYXRvcjtcbiAgICBpZiAoIUxJQlJBUlkgJiYgIUNPUlJFQ1RfSVRFUl9OQU1FKSBoaWRlKFR5cGVkQXJyYXlQcm90b3R5cGUsIElURVJBVE9SLCAkaXRlcmF0b3IpO1xuICB9O1xufSBlbHNlIG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKCkgeyAvKiBlbXB0eSAqLyB9O1xuIiwiLy8gNy4xLjEgVG9QcmltaXRpdmUoaW5wdXQgWywgUHJlZmVycmVkVHlwZV0pXG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbi8vIGluc3RlYWQgb2YgdGhlIEVTNiBzcGVjIHZlcnNpb24sIHdlIGRpZG4ndCBpbXBsZW1lbnQgQEB0b1ByaW1pdGl2ZSBjYXNlXG4vLyBhbmQgdGhlIHNlY29uZCBhcmd1bWVudCAtIGZsYWcgLSBwcmVmZXJyZWQgdHlwZSBpcyBhIHN0cmluZ1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQsIFMpIHtcbiAgaWYgKCFpc09iamVjdChpdCkpIHJldHVybiBpdDtcbiAgdmFyIGZuLCB2YWw7XG4gIGlmIChTICYmIHR5cGVvZiAoZm4gPSBpdC50b1N0cmluZykgPT0gJ2Z1bmN0aW9uJyAmJiAhaXNPYmplY3QodmFsID0gZm4uY2FsbChpdCkpKSByZXR1cm4gdmFsO1xuICBpZiAodHlwZW9mIChmbiA9IGl0LnZhbHVlT2YpID09ICdmdW5jdGlvbicgJiYgIWlzT2JqZWN0KHZhbCA9IGZuLmNhbGwoaXQpKSkgcmV0dXJuIHZhbDtcbiAgaWYgKCFTICYmIHR5cGVvZiAoZm4gPSBpdC50b1N0cmluZykgPT0gJ2Z1bmN0aW9uJyAmJiAhaXNPYmplY3QodmFsID0gZm4uY2FsbChpdCkpKSByZXR1cm4gdmFsO1xuICB0aHJvdyBUeXBlRXJyb3IoXCJDYW4ndCBjb252ZXJ0IG9iamVjdCB0byBwcmltaXRpdmUgdmFsdWVcIik7XG59O1xuIiwidmFyIE1FVEEgPSByZXF1aXJlKCcuL191aWQnKSgnbWV0YScpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG52YXIgaGFzID0gcmVxdWlyZSgnLi9faGFzJyk7XG52YXIgc2V0RGVzYyA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpLmY7XG52YXIgaWQgPSAwO1xudmFyIGlzRXh0ZW5zaWJsZSA9IE9iamVjdC5pc0V4dGVuc2libGUgfHwgZnVuY3Rpb24gKCkge1xuICByZXR1cm4gdHJ1ZTtcbn07XG52YXIgRlJFRVpFID0gIXJlcXVpcmUoJy4vX2ZhaWxzJykoZnVuY3Rpb24gKCkge1xuICByZXR1cm4gaXNFeHRlbnNpYmxlKE9iamVjdC5wcmV2ZW50RXh0ZW5zaW9ucyh7fSkpO1xufSk7XG52YXIgc2V0TWV0YSA9IGZ1bmN0aW9uIChpdCkge1xuICBzZXREZXNjKGl0LCBNRVRBLCB7IHZhbHVlOiB7XG4gICAgaTogJ08nICsgKytpZCwgLy8gb2JqZWN0IElEXG4gICAgdzoge30gICAgICAgICAgLy8gd2VhayBjb2xsZWN0aW9ucyBJRHNcbiAgfSB9KTtcbn07XG52YXIgZmFzdEtleSA9IGZ1bmN0aW9uIChpdCwgY3JlYXRlKSB7XG4gIC8vIHJldHVybiBwcmltaXRpdmUgd2l0aCBwcmVmaXhcbiAgaWYgKCFpc09iamVjdChpdCkpIHJldHVybiB0eXBlb2YgaXQgPT0gJ3N5bWJvbCcgPyBpdCA6ICh0eXBlb2YgaXQgPT0gJ3N0cmluZycgPyAnUycgOiAnUCcpICsgaXQ7XG4gIGlmICghaGFzKGl0LCBNRVRBKSkge1xuICAgIC8vIGNhbid0IHNldCBtZXRhZGF0YSB0byB1bmNhdWdodCBmcm96ZW4gb2JqZWN0XG4gICAgaWYgKCFpc0V4dGVuc2libGUoaXQpKSByZXR1cm4gJ0YnO1xuICAgIC8vIG5vdCBuZWNlc3NhcnkgdG8gYWRkIG1ldGFkYXRhXG4gICAgaWYgKCFjcmVhdGUpIHJldHVybiAnRSc7XG4gICAgLy8gYWRkIG1pc3NpbmcgbWV0YWRhdGFcbiAgICBzZXRNZXRhKGl0KTtcbiAgLy8gcmV0dXJuIG9iamVjdCBJRFxuICB9IHJldHVybiBpdFtNRVRBXS5pO1xufTtcbnZhciBnZXRXZWFrID0gZnVuY3Rpb24gKGl0LCBjcmVhdGUpIHtcbiAgaWYgKCFoYXMoaXQsIE1FVEEpKSB7XG4gICAgLy8gY2FuJ3Qgc2V0IG1ldGFkYXRhIHRvIHVuY2F1Z2h0IGZyb3plbiBvYmplY3RcbiAgICBpZiAoIWlzRXh0ZW5zaWJsZShpdCkpIHJldHVybiB0cnVlO1xuICAgIC8vIG5vdCBuZWNlc3NhcnkgdG8gYWRkIG1ldGFkYXRhXG4gICAgaWYgKCFjcmVhdGUpIHJldHVybiBmYWxzZTtcbiAgICAvLyBhZGQgbWlzc2luZyBtZXRhZGF0YVxuICAgIHNldE1ldGEoaXQpO1xuICAvLyByZXR1cm4gaGFzaCB3ZWFrIGNvbGxlY3Rpb25zIElEc1xuICB9IHJldHVybiBpdFtNRVRBXS53O1xufTtcbi8vIGFkZCBtZXRhZGF0YSBvbiBmcmVlemUtZmFtaWx5IG1ldGhvZHMgY2FsbGluZ1xudmFyIG9uRnJlZXplID0gZnVuY3Rpb24gKGl0KSB7XG4gIGlmIChGUkVFWkUgJiYgbWV0YS5ORUVEICYmIGlzRXh0ZW5zaWJsZShpdCkgJiYgIWhhcyhpdCwgTUVUQSkpIHNldE1ldGEoaXQpO1xuICByZXR1cm4gaXQ7XG59O1xudmFyIG1ldGEgPSBtb2R1bGUuZXhwb3J0cyA9IHtcbiAgS0VZOiBNRVRBLFxuICBORUVEOiBmYWxzZSxcbiAgZmFzdEtleTogZmFzdEtleSxcbiAgZ2V0V2VhazogZ2V0V2VhayxcbiAgb25GcmVlemU6IG9uRnJlZXplXG59O1xuIiwiaW1wb3J0IHtnZXRPcHRpb25zfSBmcm9tICcuL3N0b3JhZ2UuanMnXG5pbXBvcnQgYnJvd3NlciBmcm9tICd3ZWJleHRlbnNpb24tcG9seWZpbGwnXG5cbmNvbnN0IGNsaWVudElEID0gJ1NFdzF1dlJkNmt4RkV3J1xuY29uc3Qgb2F1dGhfcmVkZGl0ID0gJ2h0dHBzOi8vb2F1dGgucmVkZGl0LmNvbS8nXG5jb25zdCB3d3dfcmVkZGl0ID0gJ2h0dHBzOi8vd3d3LnJlZGRpdC5jb20vJ1xuY29uc3QgT0FVVEhfUkVWRURESVQgPSAnaHR0cHM6Ly9jcmVkMi5yZXZlZGRpdC5jb20vJ1xuY29uc3QgV1dXX1JFVkVERElUID0gJ2h0dHBzOi8vd3JlZC5yZXZlZGRpdC5jb20vJ1xuXG5jb25zdCBOT19BVVRIID0gJ25vbmUnXG5cbmV4cG9ydCBjb25zdCBsb29rdXBJdGVtc0J5SUQgPSAoaWRzLCBhdXRoLCBtb25pdG9yX3F1YXJhbnRpbmVkID0gZmFsc2UsIG1vbml0b3JfcXVhcmFudGluZWRfcmVtb3RlID0gZmFsc2UsIHF1YXJhbnRpbmVkX3N1YnJlZGRpdHMgPSBbXSkgPT4ge1xuICAgIGNvbnN0IHBhcmFtcyA9IHtpZDppZHMsIHJhd19qc29uOjF9XG4gICAgaWYgKG1vbml0b3JfcXVhcmFudGluZWRfcmVtb3RlKSB7XG4gICAgICAgIHBhcmFtcy5xdWFyYW50aW5lZF9zdWJyZWRkaXRzID0gcXVhcmFudGluZWRfc3VicmVkZGl0cy5qb2luKCcsJylcbiAgICB9XG4gICAgY29uc3Qgc2VhcmNoID0gJz8nK09iamVjdC5rZXlzKHBhcmFtcykubWFwKGsgPT4gYCR7a309JHtwYXJhbXNba119YCkuam9pbignJicpXG5cbiAgICByZXR1cm4gZmV0Y2hfZm9yUmVkZGl0KC4uLmdldEZldGNoUGFyYW1zKCdhcGkvaW5mbycsIHNlYXJjaCwgYXV0aCwgbW9uaXRvcl9xdWFyYW50aW5lZF9yZW1vdGUpLCBtb25pdG9yX3F1YXJhbnRpbmVkKVxufVxuXG5jb25zdCBjb29raWVEZXRhaWxzX3JlZGRpdFNlc3Npb24gPSB7bmFtZTogJ3JlZGRpdF9zZXNzaW9uJywgdXJsOiAnaHR0cHM6Ly9yZWRkaXQuY29tJ31cblxuY29uc3QgYWNjZXB0YWJsZV9zZXRDb29raWVEZXRhaWxzID0gWyduYW1lJywgJ3ZhbHVlJywgJ2RvbWFpbicsICdwYXRoJywgJ3NlY3VyZScsICdodHRwT25seScsICdzdG9yZUlkJ11cblxuY29uc3QgZ2V0U2V0dGFibGVDb29raWUgPSAoY29va2llLCB1cmwgPSAnaHR0cHM6Ly9yZWRkaXQuY29tJykgPT4ge1xuICAgIGlmICghIGNvb2tpZSkge1xuICAgICAgICByZXR1cm4gY29va2llXG4gICAgfVxuICAgIGNvbnN0IGZpbHRlcmVkID0gT2JqZWN0LmtleXMoY29va2llKVxuICAgICAgICAuZmlsdGVyKGtleSA9PiBhY2NlcHRhYmxlX3NldENvb2tpZURldGFpbHMuaW5jbHVkZXMoa2V5KSlcbiAgICAgICAgLnJlZHVjZSgob2JqLCBrZXkpID0+IHtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgLi4ub2JqLFxuICAgICAgICAgICAgICAgIFtrZXldOiBjb29raWVba2V5XVxuICAgICAgICAgICAgfTtcbiAgICAgICAgfSwge30pO1xuICAgIGZpbHRlcmVkLnVybCA9IHVybFxuICAgIHJldHVybiBmaWx0ZXJlZFxufVxuXG5cbi8vbW9uaXRvcl9xdWFyYW50aW5lZCAtPiB3aGVuIHRydWUsIGNsaWVudCBzZXRzIGNvb2tpZSAodXNlZCBmb3IgZXZlcnkgbG9vayB1cClcbi8vbW9uaXRvcl9xdWFyYW50aW5lZF9yZW1vdGUgLT4gd2hlbiB0cnVlLCByZW1vdGUgc2VydmVyIHNldHMgY29va2llICh1c2VkIG9uY2UgaW4gYXdoaWxlKVxuY29uc3QgZmV0Y2hfZm9yUmVkZGl0ID0gYXN5bmMgKHVybCwgb3B0aW9ucywgbW9uaXRvcl9xdWFyYW50aW5lZCA9IGZhbHNlKSA9PiB7XG4gICAgbGV0IGNvb2tpZV9yZWRkaXRTZXNzaW9uXG4gICAgYXdhaXQgYnJvd3Nlci5jb29raWVzLnNldCh7ZG9tYWluOiAncmVkZGl0LmNvbScsIHVybDogJ2h0dHBzOi8vcmVkZGl0LmNvbScsIG5hbWU6ICdfb3B0aW9ucycsIHZhbHVlOiAneyUyMnByZWZfcXVhcmFudGluZV9vcHRpbiUyMjp0cnVlfSd9KVxuICAgIGlmIChtb25pdG9yX3F1YXJhbnRpbmVkKSB7XG4gICAgICAgIGNvb2tpZV9yZWRkaXRTZXNzaW9uID0gZ2V0U2V0dGFibGVDb29raWUoYXdhaXQgYnJvd3Nlci5jb29raWVzLmdldChjb29raWVEZXRhaWxzX3JlZGRpdFNlc3Npb24pKVxuICAgICAgICBpZiAoY29va2llX3JlZGRpdFNlc3Npb24pIHtcbiAgICAgICAgICAgIGF3YWl0IGJyb3dzZXIuY29va2llcy5yZW1vdmUoY29va2llRGV0YWlsc19yZWRkaXRTZXNzaW9uKVxuICAgICAgICB9XG4gICAgfVxuICAgIGlmICghIG9wdGlvbnMpIHtcbiAgICAgICAgb3B0aW9ucyA9IHt9XG4gICAgfVxuICAgIG9wdGlvbnNbJ2NhY2hlJ10gPSAncmVsb2FkJ1xuICAgIGlmICghIG9wdGlvbnMuaGVhZGVycykge1xuICAgICAgICBvcHRpb25zLmhlYWRlcnMgPSB7fVxuICAgIH1cbiAgICBpZiAob3B0aW9ucy5oZWFkZXJzWydBY2NlcHQtTGFuZ3VhZ2UnXSAhPT0gJ2VuJykge1xuICAgICAgICBvcHRpb25zLmhlYWRlcnNbJ0FjY2VwdC1MYW5ndWFnZSddID0gJ2VuJ1xuICAgIH1cbiAgICBjb25zdCByZXN1bHQgPSBmZXRjaCh1cmwsIG9wdGlvbnMpXG4gICAgLnRoZW4oaGFuZGxlRmV0Y2hFcnJvcnMpXG4gICAgLnRoZW4oZ2V0UmVkZGl0RGF0YSlcbiAgICAuY2F0Y2goY29uc29sZS5sb2cpXG4gICAgaWYgKGNvb2tpZV9yZWRkaXRTZXNzaW9uKSB7XG4gICAgICAgIGF3YWl0IGJyb3dzZXIuY29va2llcy5zZXQoY29va2llX3JlZGRpdFNlc3Npb24pXG4gICAgfVxuICAgIHJldHVybiByZXN1bHRcbn1cblxuZXhwb3J0IGNvbnN0IGxvb2t1cEl0ZW1zQnlVc2VyID0gKHVzZXIsIGFmdGVyLCBzb3J0LCB0aW1lU3BhbiwgbW9uaXRvcl9xdWFyYW50aW5lZCwgbW9uaXRvcl9xdWFyYW50aW5lZF9yZW1vdGUsIGF1dGgpID0+IHtcbiAgICBjb25zdCBwYXJhbXMgPSB7bGltaXQ6IDEwMCwgc29ydCwgcmF3X2pzb246MX1cbiAgICBpZiAoYWZ0ZXIpIHBhcmFtcy5hZnRlciA9IGFmdGVyXG4gICAgaWYgKHRpbWVTcGFuKSBwYXJhbXMudCA9IHRpbWVTcGFuXG4gICAgY29uc3QgcGF0aCA9IGB1c2VyLyR7dXNlcn0vb3ZlcnZpZXcuanNvbmBcbiAgICBjb25zdCBzZWFyY2ggPSAnPycrT2JqZWN0LmtleXMocGFyYW1zKS5tYXAoayA9PiBgJHtrfT0ke3BhcmFtc1trXX1gKS5qb2luKCcmJylcbiAgICByZXR1cm4gZmV0Y2hfZm9yUmVkZGl0KC4uLmdldEZldGNoUGFyYW1zKHBhdGgsIHNlYXJjaCwgYXV0aCwgbW9uaXRvcl9xdWFyYW50aW5lZF9yZW1vdGUpLCBtb25pdG9yX3F1YXJhbnRpbmVkKVxufVxuXG5leHBvcnQgY29uc3QgaGFuZGxlRmV0Y2hFcnJvcnMgPSAocmVzcG9uc2UpID0+IHtcbiAgICBpZiAoISByZXNwb25zZS5vaykge1xuICAgICAgICB0aHJvdyBFcnJvcihyZXNwb25zZS5zdGF0dXNUZXh0KVxuICAgIH1cbiAgICByZXR1cm4gcmVzcG9uc2UuanNvbigpXG59XG5cbmNvbnN0IGdldFJlZGRpdERhdGEgPSAoZGF0YSkgPT4ge1xuICAgIGlmIChkYXRhICYmIGRhdGEudXNlciAmJiBkYXRhLnVzZXIuaXRlbXMpIHsgLy8gZm9ybWF0IGZyb20gY3JlZDIucmV2ZWRkaXQuY29tXG4gICAgICAgIHJldHVybiBkYXRhXG4gICAgfVxuICAgIGlmICghIGRhdGEgfHwgISBkYXRhLmRhdGEgfHwgISBkYXRhLmRhdGEuY2hpbGRyZW4pIHtcbiAgICAgICAgdGhyb3cgRXJyb3IoJ3JlZGRpdCBkYXRhIGlzIG5vdCBkZWZpbmVkJylcbiAgICB9XG4gICAgcmV0dXJuIGRhdGEuZGF0YS5jaGlsZHJlblxufVxuXG5leHBvcnQgY29uc3QgZ2V0UmVkZGl0VG9rZW4gPSAoZGF0YSkgPT4ge1xuICAgIGlmICghIGRhdGEgfHwgISBkYXRhLmFjY2Vzc190b2tlbikge1xuICAgICAgICB0aHJvdyBFcnJvcignYWNjZXNzIHRva2VuIGlzIG5vdCBkZWZpbmVkJylcbiAgICB9XG4gICAgcmV0dXJuIGRhdGEuYWNjZXNzX3Rva2VuXG59XG5cbmV4cG9ydCBjb25zdCBnZXRBdXRoID0gKCkgPT4ge1xuICAgIHJldHVybiBnZXRPcHRpb25zKCh1c2Vycywgb3RoZXJzLCBvcHRpb25zKSA9PiB7XG4gICAgICAgIHZhciB1c2VfdGhpc19jbGllbnRJRCA9IGNsaWVudElEXG4gICAgICAgIGlmIChvcHRpb25zLmN1c3RvbV9jbGllbnRpZCkge1xuICAgICAgICAgICAgdXNlX3RoaXNfY2xpZW50SUQgPSBvcHRpb25zLmN1c3RvbV9jbGllbnRpZFxuICAgICAgICAgICAgaWYgKHVzZV90aGlzX2NsaWVudElEID09PSAndGVzdGluZycpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gTk9fQVVUSFxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHRva2VuSW5pdCA9IHtcbiAgICAgICAgICAgIGhlYWRlcnM6IHtcbiAgICAgICAgICAgICAgICBBdXRob3JpemF0aW9uOiBgQmFzaWMgJHtidG9hKGAke3VzZV90aGlzX2NsaWVudElEfTpgKX1gLFxuICAgICAgICAgICAgICAgICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkOyBjaGFyc2V0PXV0Zi04J1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIG1ldGhvZDogJ1BPU1QnLFxuICAgICAgICAgICAgYm9keTogYGdyYW50X3R5cGU9JHtlbmNvZGVVUklDb21wb25lbnQoJ2h0dHBzOi8vb2F1dGgucmVkZGl0LmNvbS9ncmFudHMvaW5zdGFsbGVkX2NsaWVudCcpfSZkZXZpY2VfaWQ9RE9fTk9UX1RSQUNLX1RISVNfREVWSUNFYFxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGZldGNoKCdodHRwczovL3d3dy5yZWRkaXQuY29tL2FwaS92MS9hY2Nlc3NfdG9rZW4nLCB0b2tlbkluaXQpXG4gICAgICAgIC50aGVuKGhhbmRsZUZldGNoRXJyb3JzKVxuICAgICAgICAudGhlbihnZXRSZWRkaXRUb2tlbilcbiAgICAgICAgLnRoZW4odG9rZW4gPT4gKHtcbiAgICAgICAgICAgIGhlYWRlcnM6IHtcbiAgICAgICAgICAgICAgICBBdXRob3JpemF0aW9uOiBgYmVhcmVyICR7dG9rZW59YCxcbiAgICAgICAgICAgICAgICAnQWNjZXB0LUxhbmd1YWdlJzogJ2VuJyxcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSkpXG4gICAgICAgIC5jYXRjaChjb25zb2xlLmxvZylcbiAgICB9KVxuXG59XG5cbi8vIGNvZGU6IGh0dHBzOi8vZ2l0aHViLmNvbS90b29sYm94LXRlYW0vcmVkZGl0LW1vZGVyYXRvci10b29sYm94L2Jsb2IvNDM0ZWMwYmI3MWViYmEyZmNmMGNiNWU0Y2FkNTI5MDM1YTFhZTc0Mi9leHRlbnNpb24vZGF0YS9iYWNrZ3JvdW5kL2hhbmRsZXJzL3dlYnJlcXVlc3QuanMjTDM0XG4vLyBkaXNjdXNzaW9uOiBodHRwczovL3d3dy5yZWRkaXQuY29tL3IvcmVkZGl0ZGV2L2NvbW1lbnRzLzVqZjR5Zy9hcGlfbmV3X21vZG1haWwvZGJmbnc5OC9cbmV4cG9ydCBjb25zdCBnZXRMb2NhbEF1dGggPSAoKSA9PiB7XG4gICAgcmV0dXJuIGZldGNoKCdodHRwczovL21vZC5yZWRkaXQuY29tL21haWwvYWxsJylcbiAgICAudGhlbihyZXN1bHQgPT4ge1xuICAgICAgICBnZXRDb29raWUoe3VybDogJ2h0dHBzOi8vbW9kLnJlZGRpdC5jb20nLCBuYW1lOiAndG9rZW4nfSlcbiAgICAgICAgLnRoZW4oY29va2llID0+IHtcbiAgICAgICAgICAgIGlmIChjb29raWUpIHtcbiAgICAgICAgICAgICAgICAvLyByZW1vdmUgaW52YWxpZCBjaGFycyBhdCB0aGUgZW5kIHBlciBkaXNjdXNzaW9uXG4gICAgICAgICAgICAgICAgY29uc3QgaW52YWxpZENoYXIgPSBuZXcgUmVnRXhwKCdbXkEtWmEtejAtOSsvXS4qPyQnKVxuICAgICAgICAgICAgICAgIGNvbnN0IGJhc2U2NENvb2tpZSA9IGNvb2tpZS52YWx1ZS5yZXBsYWNlKGludmFsaWRDaGFyLCAnJylcbiAgICAgICAgICAgICAgICBjb25zdCB0b2tlbkRhdGEgPSBhdG9iKGJhc2U2NENvb2tpZSlcbiAgICAgICAgICAgICAgICBjb25zdCB0b2tlbnMgPSBKU09OLnBhcnNlKHRva2VuRGF0YSlcbiAgICAgICAgICAgICAgICBpZiAoJ2FjY2Vzc1Rva2VuJyBpbiB0b2tlbnMgJiYgdG9rZW5zLmFjY2Vzc1Rva2VuKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGF1dGggPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBoZWFkZXJzOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgQXV0aG9yaXphdGlvbjogYGJlYXJlciAke3Rva2Vucy5hY2Nlc3NUb2tlbn1gLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICdBY2NlcHQtTGFuZ3VhZ2UnOiAnZW4nLFxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBhdXRoXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bGxcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bGxcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSlcbiAgICB9KVxufVxuXG5leHBvcnQgY29uc3QgZ2V0Q29va2llID0gKHt1cmwsIG5hbWV9KSA9PiB7XG4gICAgaWYgKGxvY2F0aW9uLnByb3RvY29sLm1hdGNoKC9eaHR0cC8pKSB7XG4gICAgICAgIHJldHVybiBicm93c2VyLnJ1bnRpbWUuc2VuZE1lc3NhZ2Uoe1xuICAgICAgICAgICAgYWN0aW9uOiAnZ2V0LWNvb2tpZScsXG4gICAgICAgICAgICBvcHRpb25zOiB7dXJsLCBuYW1lfVxuICAgICAgICB9KVxuICAgICAgICAudGhlbihyZXNwb25zZSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gcmVzcG9uc2UuY29va2llXG4gICAgICAgIH0pXG4gICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIGJyb3dzZXIuY29va2llcy5nZXQoe3VybCwgbmFtZX0pXG4gICAgfVxufVxuXG5jb25zdCBnZXRGZXRjaFBhcmFtcyA9IChwYXRoLCBzZWFyY2gsIGF1dGgsIG1vbml0b3JfcXVhcmFudGluZWRfcmVtb3RlKSA9PiB7XG4gICAgaWYgKCEgYXV0aCB8fCBhdXRoID09PSBOT19BVVRIKSB7XG4gICAgICAgIGxldCB1cmwgPSAobW9uaXRvcl9xdWFyYW50aW5lZF9yZW1vdGUgPyBXV1dfUkVWRURESVQgOiB3d3dfcmVkZGl0KStwYXRoXG4gICAgICAgIGlmIChwYXRoID09PSAnYXBpL2luZm8nKSB7XG4gICAgICAgICAgICB1cmwgKz0gJy5qc29uJ1xuICAgICAgICB9XG4gICAgICAgIHVybCArPSBzZWFyY2hcbiAgICAgICAgcmV0dXJuIFt1cmxdXG4gICAgfSBlbHNlIHtcbiAgICAgICAgbGV0IGhvc3QgPSBvYXV0aF9yZWRkaXRcbiAgICAgICAgbGV0IHBhdGhfYW5kX3NlYXJjaCA9IHBhdGgrc2VhcmNoXG4gICAgICAgIGlmIChtb25pdG9yX3F1YXJhbnRpbmVkX3JlbW90ZSkge1xuICAgICAgICAgICAgaG9zdCA9IE9BVVRIX1JFVkVERElUXG4gICAgICAgICAgICBwYXRoX2FuZF9zZWFyY2ggKz0gJyZnaXZlX2l0X3RvX21lPTEnXG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgdXJsID0gaG9zdCtwYXRoX2FuZF9zZWFyY2hcbiAgICAgICAgcmV0dXJuIFt1cmwsIGF1dGhdXG4gICAgfVxufVxuXG5leHBvcnQgY29uc3QgZ2V0TG9jYWxPckFwcEF1dGggPSAoKSA9PiB7XG4gICAgcmV0dXJuIGdldExvY2FsQXV0aCgpXG4gICAgLnRoZW4oYXV0aCA9PiB7XG4gICAgICAgIGlmIChhdXRoKSByZXR1cm4gYXV0aFxuICAgICAgICByZXR1cm4gZ2V0QXV0aCgpXG4gICAgfSlcbiAgICAuY2F0Y2goY29uc29sZS5sb2cpXG59XG5cbmV4cG9ydCBjb25zdCBnZXRMb2dnZWRpblVzZXIgPSAoKSA9PiB7XG4gICAgcmV0dXJuIGZldGNoKCdodHRwczovL3d3dy5yZWRkaXQuY29tL2FwaS9tZS5qc29uJylcbiAgICAudGhlbihoYW5kbGVGZXRjaEVycm9ycylcbiAgICAudGhlbihnZXRSZWRkaXRVc2VybmFtZSlcbiAgICAuY2F0Y2goY29uc29sZS5sb2cpXG59XG5cbmNvbnN0IGdldFJlZGRpdFVzZXJuYW1lID0gKGRhdGEpID0+IHtcbiAgICBpZiAoISBkYXRhIHx8ICEgZGF0YS5kYXRhIHx8ICEgZGF0YS5kYXRhLm5hbWUpIHtcbiAgICAgICAgdGhyb3cgRXJyb3IoJ3JlZGRpdCB1c2VybmFtZSBpcyBub3QgZGVmaW5lZCcpXG4gICAgfVxuICAgIHJldHVybiBkYXRhLmRhdGEubmFtZVxufVxuIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoYml0bWFwLCB2YWx1ZSkge1xuICByZXR1cm4ge1xuICAgIGVudW1lcmFibGU6ICEoYml0bWFwICYgMSksXG4gICAgY29uZmlndXJhYmxlOiAhKGJpdG1hcCAmIDIpLFxuICAgIHdyaXRhYmxlOiAhKGJpdG1hcCAmIDQpLFxuICAgIHZhbHVlOiB2YWx1ZVxuICB9O1xufTtcbiIsInZhciBpZCA9IDA7XG52YXIgcHggPSBNYXRoLnJhbmRvbSgpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoa2V5KSB7XG4gIHJldHVybiAnU3ltYm9sKCcuY29uY2F0KGtleSA9PT0gdW5kZWZpbmVkID8gJycgOiBrZXksICcpXycsICgrK2lkICsgcHgpLnRvU3RyaW5nKDM2KSk7XG59O1xuIiwibW9kdWxlLmV4cG9ydHMgPSBmYWxzZTtcbiIsIi8vIDE5LjEuMi4xNCAvIDE1LjIuMy4xNCBPYmplY3Qua2V5cyhPKVxudmFyICRrZXlzID0gcmVxdWlyZSgnLi9fb2JqZWN0LWtleXMtaW50ZXJuYWwnKTtcbnZhciBlbnVtQnVnS2V5cyA9IHJlcXVpcmUoJy4vX2VudW0tYnVnLWtleXMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBPYmplY3Qua2V5cyB8fCBmdW5jdGlvbiBrZXlzKE8pIHtcbiAgcmV0dXJuICRrZXlzKE8sIGVudW1CdWdLZXlzKTtcbn07XG4iLCJ2YXIgdG9JbnRlZ2VyID0gcmVxdWlyZSgnLi9fdG8taW50ZWdlcicpO1xudmFyIG1heCA9IE1hdGgubWF4O1xudmFyIG1pbiA9IE1hdGgubWluO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaW5kZXgsIGxlbmd0aCkge1xuICBpbmRleCA9IHRvSW50ZWdlcihpbmRleCk7XG4gIHJldHVybiBpbmRleCA8IDAgPyBtYXgoaW5kZXggKyBsZW5ndGgsIDApIDogbWluKGluZGV4LCBsZW5ndGgpO1xufTtcbiIsIi8vIDE5LjEuMi4yIC8gMTUuMi4zLjUgT2JqZWN0LmNyZWF0ZShPIFssIFByb3BlcnRpZXNdKVxudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgZFBzID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwcycpO1xudmFyIGVudW1CdWdLZXlzID0gcmVxdWlyZSgnLi9fZW51bS1idWcta2V5cycpO1xudmFyIElFX1BST1RPID0gcmVxdWlyZSgnLi9fc2hhcmVkLWtleScpKCdJRV9QUk9UTycpO1xudmFyIEVtcHR5ID0gZnVuY3Rpb24gKCkgeyAvKiBlbXB0eSAqLyB9O1xudmFyIFBST1RPVFlQRSA9ICdwcm90b3R5cGUnO1xuXG4vLyBDcmVhdGUgb2JqZWN0IHdpdGggZmFrZSBgbnVsbGAgcHJvdG90eXBlOiB1c2UgaWZyYW1lIE9iamVjdCB3aXRoIGNsZWFyZWQgcHJvdG90eXBlXG52YXIgY3JlYXRlRGljdCA9IGZ1bmN0aW9uICgpIHtcbiAgLy8gVGhyYXNoLCB3YXN0ZSBhbmQgc29kb215OiBJRSBHQyBidWdcbiAgdmFyIGlmcmFtZSA9IHJlcXVpcmUoJy4vX2RvbS1jcmVhdGUnKSgnaWZyYW1lJyk7XG4gIHZhciBpID0gZW51bUJ1Z0tleXMubGVuZ3RoO1xuICB2YXIgbHQgPSAnPCc7XG4gIHZhciBndCA9ICc+JztcbiAgdmFyIGlmcmFtZURvY3VtZW50O1xuICBpZnJhbWUuc3R5bGUuZGlzcGxheSA9ICdub25lJztcbiAgcmVxdWlyZSgnLi9faHRtbCcpLmFwcGVuZENoaWxkKGlmcmFtZSk7XG4gIGlmcmFtZS5zcmMgPSAnamF2YXNjcmlwdDonOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXNjcmlwdC11cmxcbiAgLy8gY3JlYXRlRGljdCA9IGlmcmFtZS5jb250ZW50V2luZG93Lk9iamVjdDtcbiAgLy8gaHRtbC5yZW1vdmVDaGlsZChpZnJhbWUpO1xuICBpZnJhbWVEb2N1bWVudCA9IGlmcmFtZS5jb250ZW50V2luZG93LmRvY3VtZW50O1xuICBpZnJhbWVEb2N1bWVudC5vcGVuKCk7XG4gIGlmcmFtZURvY3VtZW50LndyaXRlKGx0ICsgJ3NjcmlwdCcgKyBndCArICdkb2N1bWVudC5GPU9iamVjdCcgKyBsdCArICcvc2NyaXB0JyArIGd0KTtcbiAgaWZyYW1lRG9jdW1lbnQuY2xvc2UoKTtcbiAgY3JlYXRlRGljdCA9IGlmcmFtZURvY3VtZW50LkY7XG4gIHdoaWxlIChpLS0pIGRlbGV0ZSBjcmVhdGVEaWN0W1BST1RPVFlQRV1bZW51bUJ1Z0tleXNbaV1dO1xuICByZXR1cm4gY3JlYXRlRGljdCgpO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBPYmplY3QuY3JlYXRlIHx8IGZ1bmN0aW9uIGNyZWF0ZShPLCBQcm9wZXJ0aWVzKSB7XG4gIHZhciByZXN1bHQ7XG4gIGlmIChPICE9PSBudWxsKSB7XG4gICAgRW1wdHlbUFJPVE9UWVBFXSA9IGFuT2JqZWN0KE8pO1xuICAgIHJlc3VsdCA9IG5ldyBFbXB0eSgpO1xuICAgIEVtcHR5W1BST1RPVFlQRV0gPSBudWxsO1xuICAgIC8vIGFkZCBcIl9fcHJvdG9fX1wiIGZvciBPYmplY3QuZ2V0UHJvdG90eXBlT2YgcG9seWZpbGxcbiAgICByZXN1bHRbSUVfUFJPVE9dID0gTztcbiAgfSBlbHNlIHJlc3VsdCA9IGNyZWF0ZURpY3QoKTtcbiAgcmV0dXJuIFByb3BlcnRpZXMgPT09IHVuZGVmaW5lZCA/IHJlc3VsdCA6IGRQcyhyZXN1bHQsIFByb3BlcnRpZXMpO1xufTtcbiIsIi8vIDE5LjEuMi43IC8gMTUuMi4zLjQgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMoTylcbnZhciAka2V5cyA9IHJlcXVpcmUoJy4vX29iamVjdC1rZXlzLWludGVybmFsJyk7XG52YXIgaGlkZGVuS2V5cyA9IHJlcXVpcmUoJy4vX2VudW0tYnVnLWtleXMnKS5jb25jYXQoJ2xlbmd0aCcsICdwcm90b3R5cGUnKTtcblxuZXhwb3J0cy5mID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMgfHwgZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlOYW1lcyhPKSB7XG4gIHJldHVybiAka2V5cyhPLCBoaWRkZW5LZXlzKTtcbn07XG4iLCIvLyAxOS4xLjIuOSAvIDE1LjIuMy4yIE9iamVjdC5nZXRQcm90b3R5cGVPZihPKVxudmFyIGhhcyA9IHJlcXVpcmUoJy4vX2hhcycpO1xudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8tb2JqZWN0Jyk7XG52YXIgSUVfUFJPVE8gPSByZXF1aXJlKCcuL19zaGFyZWQta2V5JykoJ0lFX1BST1RPJyk7XG52YXIgT2JqZWN0UHJvdG8gPSBPYmplY3QucHJvdG90eXBlO1xuXG5tb2R1bGUuZXhwb3J0cyA9IE9iamVjdC5nZXRQcm90b3R5cGVPZiB8fCBmdW5jdGlvbiAoTykge1xuICBPID0gdG9PYmplY3QoTyk7XG4gIGlmIChoYXMoTywgSUVfUFJPVE8pKSByZXR1cm4gT1tJRV9QUk9UT107XG4gIGlmICh0eXBlb2YgTy5jb25zdHJ1Y3RvciA9PSAnZnVuY3Rpb24nICYmIE8gaW5zdGFuY2VvZiBPLmNvbnN0cnVjdG9yKSB7XG4gICAgcmV0dXJuIE8uY29uc3RydWN0b3IucHJvdG90eXBlO1xuICB9IHJldHVybiBPIGluc3RhbmNlb2YgT2JqZWN0ID8gT2JqZWN0UHJvdG8gOiBudWxsO1xufTtcbiIsIi8vIDIyLjEuMy4zMSBBcnJheS5wcm90b3R5cGVbQEB1bnNjb3BhYmxlc11cbnZhciBVTlNDT1BBQkxFUyA9IHJlcXVpcmUoJy4vX3drcycpKCd1bnNjb3BhYmxlcycpO1xudmFyIEFycmF5UHJvdG8gPSBBcnJheS5wcm90b3R5cGU7XG5pZiAoQXJyYXlQcm90b1tVTlNDT1BBQkxFU10gPT0gdW5kZWZpbmVkKSByZXF1aXJlKCcuL19oaWRlJykoQXJyYXlQcm90bywgVU5TQ09QQUJMRVMsIHt9KTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGtleSkge1xuICBBcnJheVByb3RvW1VOU0NPUEFCTEVTXVtrZXldID0gdHJ1ZTtcbn07XG4iLCJ2YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0LCBUWVBFKSB7XG4gIGlmICghaXNPYmplY3QoaXQpIHx8IGl0Ll90ICE9PSBUWVBFKSB0aHJvdyBUeXBlRXJyb3IoJ0luY29tcGF0aWJsZSByZWNlaXZlciwgJyArIFRZUEUgKyAnIHJlcXVpcmVkIScpO1xuICByZXR1cm4gaXQ7XG59O1xuIiwidmFyIGRlZiA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpLmY7XG52YXIgaGFzID0gcmVxdWlyZSgnLi9faGFzJyk7XG52YXIgVEFHID0gcmVxdWlyZSgnLi9fd2tzJykoJ3RvU3RyaW5nVGFnJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0LCB0YWcsIHN0YXQpIHtcbiAgaWYgKGl0ICYmICFoYXMoaXQgPSBzdGF0ID8gaXQgOiBpdC5wcm90b3R5cGUsIFRBRykpIGRlZihpdCwgVEFHLCB7IGNvbmZpZ3VyYWJsZTogdHJ1ZSwgdmFsdWU6IHRhZyB9KTtcbn07XG4iLCJ2YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIGRlZmluZWQgPSByZXF1aXJlKCcuL19kZWZpbmVkJyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuL19mYWlscycpO1xudmFyIHNwYWNlcyA9IHJlcXVpcmUoJy4vX3N0cmluZy13cycpO1xudmFyIHNwYWNlID0gJ1snICsgc3BhY2VzICsgJ10nO1xudmFyIG5vbiA9ICdcXHUyMDBiXFx1MDA4NSc7XG52YXIgbHRyaW0gPSBSZWdFeHAoJ14nICsgc3BhY2UgKyBzcGFjZSArICcqJyk7XG52YXIgcnRyaW0gPSBSZWdFeHAoc3BhY2UgKyBzcGFjZSArICcqJCcpO1xuXG52YXIgZXhwb3J0ZXIgPSBmdW5jdGlvbiAoS0VZLCBleGVjLCBBTElBUykge1xuICB2YXIgZXhwID0ge307XG4gIHZhciBGT1JDRSA9IGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gISFzcGFjZXNbS0VZXSgpIHx8IG5vbltLRVldKCkgIT0gbm9uO1xuICB9KTtcbiAgdmFyIGZuID0gZXhwW0tFWV0gPSBGT1JDRSA/IGV4ZWModHJpbSkgOiBzcGFjZXNbS0VZXTtcbiAgaWYgKEFMSUFTKSBleHBbQUxJQVNdID0gZm47XG4gICRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogRk9SQ0UsICdTdHJpbmcnLCBleHApO1xufTtcblxuLy8gMSAtPiBTdHJpbmcjdHJpbUxlZnRcbi8vIDIgLT4gU3RyaW5nI3RyaW1SaWdodFxuLy8gMyAtPiBTdHJpbmcjdHJpbVxudmFyIHRyaW0gPSBleHBvcnRlci50cmltID0gZnVuY3Rpb24gKHN0cmluZywgVFlQRSkge1xuICBzdHJpbmcgPSBTdHJpbmcoZGVmaW5lZChzdHJpbmcpKTtcbiAgaWYgKFRZUEUgJiAxKSBzdHJpbmcgPSBzdHJpbmcucmVwbGFjZShsdHJpbSwgJycpO1xuICBpZiAoVFlQRSAmIDIpIHN0cmluZyA9IHN0cmluZy5yZXBsYWNlKHJ0cmltLCAnJyk7XG4gIHJldHVybiBzdHJpbmc7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydGVyO1xuIiwibW9kdWxlLmV4cG9ydHMgPSB7fTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuL19nbG9iYWwnKTtcbnZhciBkUCA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpO1xudmFyIERFU0NSSVBUT1JTID0gcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKTtcbnZhciBTUEVDSUVTID0gcmVxdWlyZSgnLi9fd2tzJykoJ3NwZWNpZXMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoS0VZKSB7XG4gIHZhciBDID0gZ2xvYmFsW0tFWV07XG4gIGlmIChERVNDUklQVE9SUyAmJiBDICYmICFDW1NQRUNJRVNdKSBkUC5mKEMsIFNQRUNJRVMsIHtcbiAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzOyB9XG4gIH0pO1xufTtcbiIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0LCBDb25zdHJ1Y3RvciwgbmFtZSwgZm9yYmlkZGVuRmllbGQpIHtcbiAgaWYgKCEoaXQgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikgfHwgKGZvcmJpZGRlbkZpZWxkICE9PSB1bmRlZmluZWQgJiYgZm9yYmlkZGVuRmllbGQgaW4gaXQpKSB7XG4gICAgdGhyb3cgVHlwZUVycm9yKG5hbWUgKyAnOiBpbmNvcnJlY3QgaW52b2NhdGlvbiEnKTtcbiAgfSByZXR1cm4gaXQ7XG59O1xuIiwidmFyIHJlZGVmaW5lID0gcmVxdWlyZSgnLi9fcmVkZWZpbmUnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKHRhcmdldCwgc3JjLCBzYWZlKSB7XG4gIGZvciAodmFyIGtleSBpbiBzcmMpIHJlZGVmaW5lKHRhcmdldCwga2V5LCBzcmNba2V5XSwgc2FmZSk7XG4gIHJldHVybiB0YXJnZXQ7XG59O1xuIiwiLy8gZmFsbGJhY2sgZm9yIG5vbi1hcnJheS1saWtlIEVTMyBhbmQgbm9uLWVudW1lcmFibGUgb2xkIFY4IHN0cmluZ3NcbnZhciBjb2YgPSByZXF1aXJlKCcuL19jb2YnKTtcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wcm90b3R5cGUtYnVpbHRpbnNcbm1vZHVsZS5leHBvcnRzID0gT2JqZWN0KCd6JykucHJvcGVydHlJc0VudW1lcmFibGUoMCkgPyBPYmplY3QgOiBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIGNvZihpdCkgPT0gJ1N0cmluZycgPyBpdC5zcGxpdCgnJykgOiBPYmplY3QoaXQpO1xufTtcbiIsImV4cG9ydHMuZiA9IHt9LnByb3BlcnR5SXNFbnVtZXJhYmxlO1xuIiwiLy8gZ2V0dGluZyB0YWcgZnJvbSAxOS4xLjMuNiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nKClcbnZhciBjb2YgPSByZXF1aXJlKCcuL19jb2YnKTtcbnZhciBUQUcgPSByZXF1aXJlKCcuL193a3MnKSgndG9TdHJpbmdUYWcnKTtcbi8vIEVTMyB3cm9uZyBoZXJlXG52YXIgQVJHID0gY29mKGZ1bmN0aW9uICgpIHsgcmV0dXJuIGFyZ3VtZW50czsgfSgpKSA9PSAnQXJndW1lbnRzJztcblxuLy8gZmFsbGJhY2sgZm9yIElFMTEgU2NyaXB0IEFjY2VzcyBEZW5pZWQgZXJyb3JcbnZhciB0cnlHZXQgPSBmdW5jdGlvbiAoaXQsIGtleSkge1xuICB0cnkge1xuICAgIHJldHVybiBpdFtrZXldO1xuICB9IGNhdGNoIChlKSB7IC8qIGVtcHR5ICovIH1cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHZhciBPLCBULCBCO1xuICByZXR1cm4gaXQgPT09IHVuZGVmaW5lZCA/ICdVbmRlZmluZWQnIDogaXQgPT09IG51bGwgPyAnTnVsbCdcbiAgICAvLyBAQHRvU3RyaW5nVGFnIGNhc2VcbiAgICA6IHR5cGVvZiAoVCA9IHRyeUdldChPID0gT2JqZWN0KGl0KSwgVEFHKSkgPT0gJ3N0cmluZycgPyBUXG4gICAgLy8gYnVpbHRpblRhZyBjYXNlXG4gICAgOiBBUkcgPyBjb2YoTylcbiAgICAvLyBFUzMgYXJndW1lbnRzIGZhbGxiYWNrXG4gICAgOiAoQiA9IGNvZihPKSkgPT0gJ09iamVjdCcgJiYgdHlwZW9mIE8uY2FsbGVlID09ICdmdW5jdGlvbicgPyAnQXJndW1lbnRzJyA6IEI7XG59O1xuIiwiLy8gNy4zLjIwIFNwZWNpZXNDb25zdHJ1Y3RvcihPLCBkZWZhdWx0Q29uc3RydWN0b3IpXG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciBhRnVuY3Rpb24gPSByZXF1aXJlKCcuL19hLWZ1bmN0aW9uJyk7XG52YXIgU1BFQ0lFUyA9IHJlcXVpcmUoJy4vX3drcycpKCdzcGVjaWVzJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChPLCBEKSB7XG4gIHZhciBDID0gYW5PYmplY3QoTykuY29uc3RydWN0b3I7XG4gIHZhciBTO1xuICByZXR1cm4gQyA9PT0gdW5kZWZpbmVkIHx8IChTID0gYW5PYmplY3QoQylbU1BFQ0lFU10pID09IHVuZGVmaW5lZCA/IEQgOiBhRnVuY3Rpb24oUyk7XG59O1xuIiwidmFyIGNvcmUgPSByZXF1aXJlKCcuL19jb3JlJyk7XG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi9fZ2xvYmFsJyk7XG52YXIgU0hBUkVEID0gJ19fY29yZS1qc19zaGFyZWRfXyc7XG52YXIgc3RvcmUgPSBnbG9iYWxbU0hBUkVEXSB8fCAoZ2xvYmFsW1NIQVJFRF0gPSB7fSk7XG5cbihtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChrZXksIHZhbHVlKSB7XG4gIHJldHVybiBzdG9yZVtrZXldIHx8IChzdG9yZVtrZXldID0gdmFsdWUgIT09IHVuZGVmaW5lZCA/IHZhbHVlIDoge30pO1xufSkoJ3ZlcnNpb25zJywgW10pLnB1c2goe1xuICB2ZXJzaW9uOiBjb3JlLnZlcnNpb24sXG4gIG1vZGU6IHJlcXVpcmUoJy4vX2xpYnJhcnknKSA/ICdwdXJlJyA6ICdnbG9iYWwnLFxuICBjb3B5cmlnaHQ6ICfCqSAyMDE5IERlbmlzIFB1c2hrYXJldiAoemxvaXJvY2sucnUpJ1xufSk7XG4iLCIvLyBmYWxzZSAtPiBBcnJheSNpbmRleE9mXG4vLyB0cnVlICAtPiBBcnJheSNpbmNsdWRlc1xudmFyIHRvSU9iamVjdCA9IHJlcXVpcmUoJy4vX3RvLWlvYmplY3QnKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpO1xudmFyIHRvQWJzb2x1dGVJbmRleCA9IHJlcXVpcmUoJy4vX3RvLWFic29sdXRlLWluZGV4Jyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChJU19JTkNMVURFUykge1xuICByZXR1cm4gZnVuY3Rpb24gKCR0aGlzLCBlbCwgZnJvbUluZGV4KSB7XG4gICAgdmFyIE8gPSB0b0lPYmplY3QoJHRoaXMpO1xuICAgIHZhciBsZW5ndGggPSB0b0xlbmd0aChPLmxlbmd0aCk7XG4gICAgdmFyIGluZGV4ID0gdG9BYnNvbHV0ZUluZGV4KGZyb21JbmRleCwgbGVuZ3RoKTtcbiAgICB2YXIgdmFsdWU7XG4gICAgLy8gQXJyYXkjaW5jbHVkZXMgdXNlcyBTYW1lVmFsdWVaZXJvIGVxdWFsaXR5IGFsZ29yaXRobVxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zZWxmLWNvbXBhcmVcbiAgICBpZiAoSVNfSU5DTFVERVMgJiYgZWwgIT0gZWwpIHdoaWxlIChsZW5ndGggPiBpbmRleCkge1xuICAgICAgdmFsdWUgPSBPW2luZGV4KytdO1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXNlbGYtY29tcGFyZVxuICAgICAgaWYgKHZhbHVlICE9IHZhbHVlKSByZXR1cm4gdHJ1ZTtcbiAgICAvLyBBcnJheSNpbmRleE9mIGlnbm9yZXMgaG9sZXMsIEFycmF5I2luY2x1ZGVzIC0gbm90XG4gICAgfSBlbHNlIGZvciAoO2xlbmd0aCA+IGluZGV4OyBpbmRleCsrKSBpZiAoSVNfSU5DTFVERVMgfHwgaW5kZXggaW4gTykge1xuICAgICAgaWYgKE9baW5kZXhdID09PSBlbCkgcmV0dXJuIElTX0lOQ0xVREVTIHx8IGluZGV4IHx8IDA7XG4gICAgfSByZXR1cm4gIUlTX0lOQ0xVREVTICYmIC0xO1xuICB9O1xufTtcbiIsImV4cG9ydHMuZiA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHM7XG4iLCIvLyA3LjIuMiBJc0FycmF5KGFyZ3VtZW50KVxudmFyIGNvZiA9IHJlcXVpcmUoJy4vX2NvZicpO1xubW9kdWxlLmV4cG9ydHMgPSBBcnJheS5pc0FycmF5IHx8IGZ1bmN0aW9uIGlzQXJyYXkoYXJnKSB7XG4gIHJldHVybiBjb2YoYXJnKSA9PSAnQXJyYXknO1xufTtcbiIsInZhciBJVEVSQVRPUiA9IHJlcXVpcmUoJy4vX3drcycpKCdpdGVyYXRvcicpO1xudmFyIFNBRkVfQ0xPU0lORyA9IGZhbHNlO1xuXG50cnkge1xuICB2YXIgcml0ZXIgPSBbN11bSVRFUkFUT1JdKCk7XG4gIHJpdGVyWydyZXR1cm4nXSA9IGZ1bmN0aW9uICgpIHsgU0FGRV9DTE9TSU5HID0gdHJ1ZTsgfTtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXRocm93LWxpdGVyYWxcbiAgQXJyYXkuZnJvbShyaXRlciwgZnVuY3Rpb24gKCkgeyB0aHJvdyAyOyB9KTtcbn0gY2F0Y2ggKGUpIHsgLyogZW1wdHkgKi8gfVxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChleGVjLCBza2lwQ2xvc2luZykge1xuICBpZiAoIXNraXBDbG9zaW5nICYmICFTQUZFX0NMT1NJTkcpIHJldHVybiBmYWxzZTtcbiAgdmFyIHNhZmUgPSBmYWxzZTtcbiAgdHJ5IHtcbiAgICB2YXIgYXJyID0gWzddO1xuICAgIHZhciBpdGVyID0gYXJyW0lURVJBVE9SXSgpO1xuICAgIGl0ZXIubmV4dCA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHsgZG9uZTogc2FmZSA9IHRydWUgfTsgfTtcbiAgICBhcnJbSVRFUkFUT1JdID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gaXRlcjsgfTtcbiAgICBleGVjKGFycik7XG4gIH0gY2F0Y2ggKGUpIHsgLyogZW1wdHkgKi8gfVxuICByZXR1cm4gc2FmZTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG4vLyAyMS4yLjUuMyBnZXQgUmVnRXhwLnByb3RvdHlwZS5mbGFnc1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIHRoYXQgPSBhbk9iamVjdCh0aGlzKTtcbiAgdmFyIHJlc3VsdCA9ICcnO1xuICBpZiAodGhhdC5nbG9iYWwpIHJlc3VsdCArPSAnZyc7XG4gIGlmICh0aGF0Lmlnbm9yZUNhc2UpIHJlc3VsdCArPSAnaSc7XG4gIGlmICh0aGF0Lm11bHRpbGluZSkgcmVzdWx0ICs9ICdtJztcbiAgaWYgKHRoYXQudW5pY29kZSkgcmVzdWx0ICs9ICd1JztcbiAgaWYgKHRoYXQuc3RpY2t5KSByZXN1bHQgKz0gJ3knO1xuICByZXR1cm4gcmVzdWx0O1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGNsYXNzb2YgPSByZXF1aXJlKCcuL19jbGFzc29mJyk7XG52YXIgYnVpbHRpbkV4ZWMgPSBSZWdFeHAucHJvdG90eXBlLmV4ZWM7XG5cbiAvLyBgUmVnRXhwRXhlY2AgYWJzdHJhY3Qgb3BlcmF0aW9uXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1yZWdleHBleGVjXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChSLCBTKSB7XG4gIHZhciBleGVjID0gUi5leGVjO1xuICBpZiAodHlwZW9mIGV4ZWMgPT09ICdmdW5jdGlvbicpIHtcbiAgICB2YXIgcmVzdWx0ID0gZXhlYy5jYWxsKFIsIFMpO1xuICAgIGlmICh0eXBlb2YgcmVzdWx0ICE9PSAnb2JqZWN0Jykge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignUmVnRXhwIGV4ZWMgbWV0aG9kIHJldHVybmVkIHNvbWV0aGluZyBvdGhlciB0aGFuIGFuIE9iamVjdCBvciBudWxsJyk7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cbiAgaWYgKGNsYXNzb2YoUikgIT09ICdSZWdFeHAnKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignUmVnRXhwI2V4ZWMgY2FsbGVkIG9uIGluY29tcGF0aWJsZSByZWNlaXZlcicpO1xuICB9XG4gIHJldHVybiBidWlsdGluRXhlYy5jYWxsKFIsIFMpO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnJlcXVpcmUoJy4vZXM2LnJlZ2V4cC5leGVjJyk7XG52YXIgcmVkZWZpbmUgPSByZXF1aXJlKCcuL19yZWRlZmluZScpO1xudmFyIGhpZGUgPSByZXF1aXJlKCcuL19oaWRlJyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuL19mYWlscycpO1xudmFyIGRlZmluZWQgPSByZXF1aXJlKCcuL19kZWZpbmVkJyk7XG52YXIgd2tzID0gcmVxdWlyZSgnLi9fd2tzJyk7XG52YXIgcmVnZXhwRXhlYyA9IHJlcXVpcmUoJy4vX3JlZ2V4cC1leGVjJyk7XG5cbnZhciBTUEVDSUVTID0gd2tzKCdzcGVjaWVzJyk7XG5cbnZhciBSRVBMQUNFX1NVUFBPUlRTX05BTUVEX0dST1VQUyA9ICFmYWlscyhmdW5jdGlvbiAoKSB7XG4gIC8vICNyZXBsYWNlIG5lZWRzIGJ1aWx0LWluIHN1cHBvcnQgZm9yIG5hbWVkIGdyb3Vwcy5cbiAgLy8gI21hdGNoIHdvcmtzIGZpbmUgYmVjYXVzZSBpdCBqdXN0IHJldHVybiB0aGUgZXhlYyByZXN1bHRzLCBldmVuIGlmIGl0IGhhc1xuICAvLyBhIFwiZ3JvcHNcIiBwcm9wZXJ0eS5cbiAgdmFyIHJlID0gLy4vO1xuICByZS5leGVjID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciByZXN1bHQgPSBbXTtcbiAgICByZXN1bHQuZ3JvdXBzID0geyBhOiAnNycgfTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9O1xuICByZXR1cm4gJycucmVwbGFjZShyZSwgJyQ8YT4nKSAhPT0gJzcnO1xufSk7XG5cbnZhciBTUExJVF9XT1JLU19XSVRIX09WRVJXUklUVEVOX0VYRUMgPSAoZnVuY3Rpb24gKCkge1xuICAvLyBDaHJvbWUgNTEgaGFzIGEgYnVnZ3kgXCJzcGxpdFwiIGltcGxlbWVudGF0aW9uIHdoZW4gUmVnRXhwI2V4ZWMgIT09IG5hdGl2ZUV4ZWNcbiAgdmFyIHJlID0gLyg/OikvO1xuICB2YXIgb3JpZ2luYWxFeGVjID0gcmUuZXhlYztcbiAgcmUuZXhlYyA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIG9yaWdpbmFsRXhlYy5hcHBseSh0aGlzLCBhcmd1bWVudHMpOyB9O1xuICB2YXIgcmVzdWx0ID0gJ2FiJy5zcGxpdChyZSk7XG4gIHJldHVybiByZXN1bHQubGVuZ3RoID09PSAyICYmIHJlc3VsdFswXSA9PT0gJ2EnICYmIHJlc3VsdFsxXSA9PT0gJ2InO1xufSkoKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoS0VZLCBsZW5ndGgsIGV4ZWMpIHtcbiAgdmFyIFNZTUJPTCA9IHdrcyhLRVkpO1xuXG4gIHZhciBERUxFR0FURVNfVE9fU1lNQk9MID0gIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgICAvLyBTdHJpbmcgbWV0aG9kcyBjYWxsIHN5bWJvbC1uYW1lZCBSZWdFcCBtZXRob2RzXG4gICAgdmFyIE8gPSB7fTtcbiAgICBPW1NZTUJPTF0gPSBmdW5jdGlvbiAoKSB7IHJldHVybiA3OyB9O1xuICAgIHJldHVybiAnJ1tLRVldKE8pICE9IDc7XG4gIH0pO1xuXG4gIHZhciBERUxFR0FURVNfVE9fRVhFQyA9IERFTEVHQVRFU19UT19TWU1CT0wgPyAhZmFpbHMoZnVuY3Rpb24gKCkge1xuICAgIC8vIFN5bWJvbC1uYW1lZCBSZWdFeHAgbWV0aG9kcyBjYWxsIC5leGVjXG4gICAgdmFyIGV4ZWNDYWxsZWQgPSBmYWxzZTtcbiAgICB2YXIgcmUgPSAvYS87XG4gICAgcmUuZXhlYyA9IGZ1bmN0aW9uICgpIHsgZXhlY0NhbGxlZCA9IHRydWU7IHJldHVybiBudWxsOyB9O1xuICAgIGlmIChLRVkgPT09ICdzcGxpdCcpIHtcbiAgICAgIC8vIFJlZ0V4cFtAQHNwbGl0XSBkb2Vzbid0IGNhbGwgdGhlIHJlZ2V4J3MgZXhlYyBtZXRob2QsIGJ1dCBmaXJzdCBjcmVhdGVzXG4gICAgICAvLyBhIG5ldyBvbmUuIFdlIG5lZWQgdG8gcmV0dXJuIHRoZSBwYXRjaGVkIHJlZ2V4IHdoZW4gY3JlYXRpbmcgdGhlIG5ldyBvbmUuXG4gICAgICByZS5jb25zdHJ1Y3RvciA9IHt9O1xuICAgICAgcmUuY29uc3RydWN0b3JbU1BFQ0lFU10gPSBmdW5jdGlvbiAoKSB7IHJldHVybiByZTsgfTtcbiAgICB9XG4gICAgcmVbU1lNQk9MXSgnJyk7XG4gICAgcmV0dXJuICFleGVjQ2FsbGVkO1xuICB9KSA6IHVuZGVmaW5lZDtcblxuICBpZiAoXG4gICAgIURFTEVHQVRFU19UT19TWU1CT0wgfHxcbiAgICAhREVMRUdBVEVTX1RPX0VYRUMgfHxcbiAgICAoS0VZID09PSAncmVwbGFjZScgJiYgIVJFUExBQ0VfU1VQUE9SVFNfTkFNRURfR1JPVVBTKSB8fFxuICAgIChLRVkgPT09ICdzcGxpdCcgJiYgIVNQTElUX1dPUktTX1dJVEhfT1ZFUldSSVRURU5fRVhFQylcbiAgKSB7XG4gICAgdmFyIG5hdGl2ZVJlZ0V4cE1ldGhvZCA9IC8uL1tTWU1CT0xdO1xuICAgIHZhciBmbnMgPSBleGVjKFxuICAgICAgZGVmaW5lZCxcbiAgICAgIFNZTUJPTCxcbiAgICAgICcnW0tFWV0sXG4gICAgICBmdW5jdGlvbiBtYXliZUNhbGxOYXRpdmUobmF0aXZlTWV0aG9kLCByZWdleHAsIHN0ciwgYXJnMiwgZm9yY2VTdHJpbmdNZXRob2QpIHtcbiAgICAgICAgaWYgKHJlZ2V4cC5leGVjID09PSByZWdleHBFeGVjKSB7XG4gICAgICAgICAgaWYgKERFTEVHQVRFU19UT19TWU1CT0wgJiYgIWZvcmNlU3RyaW5nTWV0aG9kKSB7XG4gICAgICAgICAgICAvLyBUaGUgbmF0aXZlIFN0cmluZyBtZXRob2QgYWxyZWFkeSBkZWxlZ2F0ZXMgdG8gQEBtZXRob2QgKHRoaXNcbiAgICAgICAgICAgIC8vIHBvbHlmaWxsZWQgZnVuY3Rpb24pLCBsZWFzaW5nIHRvIGluZmluaXRlIHJlY3Vyc2lvbi5cbiAgICAgICAgICAgIC8vIFdlIGF2b2lkIGl0IGJ5IGRpcmVjdGx5IGNhbGxpbmcgdGhlIG5hdGl2ZSBAQG1ldGhvZCBtZXRob2QuXG4gICAgICAgICAgICByZXR1cm4geyBkb25lOiB0cnVlLCB2YWx1ZTogbmF0aXZlUmVnRXhwTWV0aG9kLmNhbGwocmVnZXhwLCBzdHIsIGFyZzIpIH07XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiB7IGRvbmU6IHRydWUsIHZhbHVlOiBuYXRpdmVNZXRob2QuY2FsbChzdHIsIHJlZ2V4cCwgYXJnMikgfTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4geyBkb25lOiBmYWxzZSB9O1xuICAgICAgfVxuICAgICk7XG4gICAgdmFyIHN0cmZuID0gZm5zWzBdO1xuICAgIHZhciByeGZuID0gZm5zWzFdO1xuXG4gICAgcmVkZWZpbmUoU3RyaW5nLnByb3RvdHlwZSwgS0VZLCBzdHJmbik7XG4gICAgaGlkZShSZWdFeHAucHJvdG90eXBlLCBTWU1CT0wsIGxlbmd0aCA9PSAyXG4gICAgICAvLyAyMS4yLjUuOCBSZWdFeHAucHJvdG90eXBlW0BAcmVwbGFjZV0oc3RyaW5nLCByZXBsYWNlVmFsdWUpXG4gICAgICAvLyAyMS4yLjUuMTEgUmVnRXhwLnByb3RvdHlwZVtAQHNwbGl0XShzdHJpbmcsIGxpbWl0KVxuICAgICAgPyBmdW5jdGlvbiAoc3RyaW5nLCBhcmcpIHsgcmV0dXJuIHJ4Zm4uY2FsbChzdHJpbmcsIHRoaXMsIGFyZyk7IH1cbiAgICAgIC8vIDIxLjIuNS42IFJlZ0V4cC5wcm90b3R5cGVbQEBtYXRjaF0oc3RyaW5nKVxuICAgICAgLy8gMjEuMi41LjkgUmVnRXhwLnByb3RvdHlwZVtAQHNlYXJjaF0oc3RyaW5nKVxuICAgICAgOiBmdW5jdGlvbiAoc3RyaW5nKSB7IHJldHVybiByeGZuLmNhbGwoc3RyaW5nLCB0aGlzKTsgfVxuICAgICk7XG4gIH1cbn07XG4iLCJ2YXIgY3R4ID0gcmVxdWlyZSgnLi9fY3R4Jyk7XG52YXIgY2FsbCA9IHJlcXVpcmUoJy4vX2l0ZXItY2FsbCcpO1xudmFyIGlzQXJyYXlJdGVyID0gcmVxdWlyZSgnLi9faXMtYXJyYXktaXRlcicpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuL190by1sZW5ndGgnKTtcbnZhciBnZXRJdGVyRm4gPSByZXF1aXJlKCcuL2NvcmUuZ2V0LWl0ZXJhdG9yLW1ldGhvZCcpO1xudmFyIEJSRUFLID0ge307XG52YXIgUkVUVVJOID0ge307XG52YXIgZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0ZXJhYmxlLCBlbnRyaWVzLCBmbiwgdGhhdCwgSVRFUkFUT1IpIHtcbiAgdmFyIGl0ZXJGbiA9IElURVJBVE9SID8gZnVuY3Rpb24gKCkgeyByZXR1cm4gaXRlcmFibGU7IH0gOiBnZXRJdGVyRm4oaXRlcmFibGUpO1xuICB2YXIgZiA9IGN0eChmbiwgdGhhdCwgZW50cmllcyA/IDIgOiAxKTtcbiAgdmFyIGluZGV4ID0gMDtcbiAgdmFyIGxlbmd0aCwgc3RlcCwgaXRlcmF0b3IsIHJlc3VsdDtcbiAgaWYgKHR5cGVvZiBpdGVyRm4gIT0gJ2Z1bmN0aW9uJykgdGhyb3cgVHlwZUVycm9yKGl0ZXJhYmxlICsgJyBpcyBub3QgaXRlcmFibGUhJyk7XG4gIC8vIGZhc3QgY2FzZSBmb3IgYXJyYXlzIHdpdGggZGVmYXVsdCBpdGVyYXRvclxuICBpZiAoaXNBcnJheUl0ZXIoaXRlckZuKSkgZm9yIChsZW5ndGggPSB0b0xlbmd0aChpdGVyYWJsZS5sZW5ndGgpOyBsZW5ndGggPiBpbmRleDsgaW5kZXgrKykge1xuICAgIHJlc3VsdCA9IGVudHJpZXMgPyBmKGFuT2JqZWN0KHN0ZXAgPSBpdGVyYWJsZVtpbmRleF0pWzBdLCBzdGVwWzFdKSA6IGYoaXRlcmFibGVbaW5kZXhdKTtcbiAgICBpZiAocmVzdWx0ID09PSBCUkVBSyB8fCByZXN1bHQgPT09IFJFVFVSTikgcmV0dXJuIHJlc3VsdDtcbiAgfSBlbHNlIGZvciAoaXRlcmF0b3IgPSBpdGVyRm4uY2FsbChpdGVyYWJsZSk7ICEoc3RlcCA9IGl0ZXJhdG9yLm5leHQoKSkuZG9uZTspIHtcbiAgICByZXN1bHQgPSBjYWxsKGl0ZXJhdG9yLCBmLCBzdGVwLnZhbHVlLCBlbnRyaWVzKTtcbiAgICBpZiAocmVzdWx0ID09PSBCUkVBSyB8fCByZXN1bHQgPT09IFJFVFVSTikgcmV0dXJuIHJlc3VsdDtcbiAgfVxufTtcbmV4cG9ydHMuQlJFQUsgPSBCUkVBSztcbmV4cG9ydHMuUkVUVVJOID0gUkVUVVJOO1xuIiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpO1xudmFyIG5hdmlnYXRvciA9IGdsb2JhbC5uYXZpZ2F0b3I7XG5cbm1vZHVsZS5leHBvcnRzID0gbmF2aWdhdG9yICYmIG5hdmlnYXRvci51c2VyQWdlbnQgfHwgJyc7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi9fZ2xvYmFsJyk7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIHJlZGVmaW5lID0gcmVxdWlyZSgnLi9fcmVkZWZpbmUnKTtcbnZhciByZWRlZmluZUFsbCA9IHJlcXVpcmUoJy4vX3JlZGVmaW5lLWFsbCcpO1xudmFyIG1ldGEgPSByZXF1aXJlKCcuL19tZXRhJyk7XG52YXIgZm9yT2YgPSByZXF1aXJlKCcuL19mb3Itb2YnKTtcbnZhciBhbkluc3RhbmNlID0gcmVxdWlyZSgnLi9fYW4taW5zdGFuY2UnKTtcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi9fZmFpbHMnKTtcbnZhciAkaXRlckRldGVjdCA9IHJlcXVpcmUoJy4vX2l0ZXItZGV0ZWN0Jyk7XG52YXIgc2V0VG9TdHJpbmdUYWcgPSByZXF1aXJlKCcuL19zZXQtdG8tc3RyaW5nLXRhZycpO1xudmFyIGluaGVyaXRJZlJlcXVpcmVkID0gcmVxdWlyZSgnLi9faW5oZXJpdC1pZi1yZXF1aXJlZCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChOQU1FLCB3cmFwcGVyLCBtZXRob2RzLCBjb21tb24sIElTX01BUCwgSVNfV0VBSykge1xuICB2YXIgQmFzZSA9IGdsb2JhbFtOQU1FXTtcbiAgdmFyIEMgPSBCYXNlO1xuICB2YXIgQURERVIgPSBJU19NQVAgPyAnc2V0JyA6ICdhZGQnO1xuICB2YXIgcHJvdG8gPSBDICYmIEMucHJvdG90eXBlO1xuICB2YXIgTyA9IHt9O1xuICB2YXIgZml4TWV0aG9kID0gZnVuY3Rpb24gKEtFWSkge1xuICAgIHZhciBmbiA9IHByb3RvW0tFWV07XG4gICAgcmVkZWZpbmUocHJvdG8sIEtFWSxcbiAgICAgIEtFWSA9PSAnZGVsZXRlJyA/IGZ1bmN0aW9uIChhKSB7XG4gICAgICAgIHJldHVybiBJU19XRUFLICYmICFpc09iamVjdChhKSA/IGZhbHNlIDogZm4uY2FsbCh0aGlzLCBhID09PSAwID8gMCA6IGEpO1xuICAgICAgfSA6IEtFWSA9PSAnaGFzJyA/IGZ1bmN0aW9uIGhhcyhhKSB7XG4gICAgICAgIHJldHVybiBJU19XRUFLICYmICFpc09iamVjdChhKSA/IGZhbHNlIDogZm4uY2FsbCh0aGlzLCBhID09PSAwID8gMCA6IGEpO1xuICAgICAgfSA6IEtFWSA9PSAnZ2V0JyA/IGZ1bmN0aW9uIGdldChhKSB7XG4gICAgICAgIHJldHVybiBJU19XRUFLICYmICFpc09iamVjdChhKSA/IHVuZGVmaW5lZCA6IGZuLmNhbGwodGhpcywgYSA9PT0gMCA/IDAgOiBhKTtcbiAgICAgIH0gOiBLRVkgPT0gJ2FkZCcgPyBmdW5jdGlvbiBhZGQoYSkgeyBmbi5jYWxsKHRoaXMsIGEgPT09IDAgPyAwIDogYSk7IHJldHVybiB0aGlzOyB9XG4gICAgICAgIDogZnVuY3Rpb24gc2V0KGEsIGIpIHsgZm4uY2FsbCh0aGlzLCBhID09PSAwID8gMCA6IGEsIGIpOyByZXR1cm4gdGhpczsgfVxuICAgICk7XG4gIH07XG4gIGlmICh0eXBlb2YgQyAhPSAnZnVuY3Rpb24nIHx8ICEoSVNfV0VBSyB8fCBwcm90by5mb3JFYWNoICYmICFmYWlscyhmdW5jdGlvbiAoKSB7XG4gICAgbmV3IEMoKS5lbnRyaWVzKCkubmV4dCgpO1xuICB9KSkpIHtcbiAgICAvLyBjcmVhdGUgY29sbGVjdGlvbiBjb25zdHJ1Y3RvclxuICAgIEMgPSBjb21tb24uZ2V0Q29uc3RydWN0b3Iod3JhcHBlciwgTkFNRSwgSVNfTUFQLCBBRERFUik7XG4gICAgcmVkZWZpbmVBbGwoQy5wcm90b3R5cGUsIG1ldGhvZHMpO1xuICAgIG1ldGEuTkVFRCA9IHRydWU7XG4gIH0gZWxzZSB7XG4gICAgdmFyIGluc3RhbmNlID0gbmV3IEMoKTtcbiAgICAvLyBlYXJseSBpbXBsZW1lbnRhdGlvbnMgbm90IHN1cHBvcnRzIGNoYWluaW5nXG4gICAgdmFyIEhBU05UX0NIQUlOSU5HID0gaW5zdGFuY2VbQURERVJdKElTX1dFQUsgPyB7fSA6IC0wLCAxKSAhPSBpbnN0YW5jZTtcbiAgICAvLyBWOCB+ICBDaHJvbWl1bSA0MC0gd2Vhay1jb2xsZWN0aW9ucyB0aHJvd3Mgb24gcHJpbWl0aXZlcywgYnV0IHNob3VsZCByZXR1cm4gZmFsc2VcbiAgICB2YXIgVEhST1dTX09OX1BSSU1JVElWRVMgPSBmYWlscyhmdW5jdGlvbiAoKSB7IGluc3RhbmNlLmhhcygxKTsgfSk7XG4gICAgLy8gbW9zdCBlYXJseSBpbXBsZW1lbnRhdGlvbnMgZG9lc24ndCBzdXBwb3J0cyBpdGVyYWJsZXMsIG1vc3QgbW9kZXJuIC0gbm90IGNsb3NlIGl0IGNvcnJlY3RseVxuICAgIHZhciBBQ0NFUFRfSVRFUkFCTEVTID0gJGl0ZXJEZXRlY3QoZnVuY3Rpb24gKGl0ZXIpIHsgbmV3IEMoaXRlcik7IH0pOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLW5ld1xuICAgIC8vIGZvciBlYXJseSBpbXBsZW1lbnRhdGlvbnMgLTAgYW5kICswIG5vdCB0aGUgc2FtZVxuICAgIHZhciBCVUdHWV9aRVJPID0gIUlTX1dFQUsgJiYgZmFpbHMoZnVuY3Rpb24gKCkge1xuICAgICAgLy8gVjggfiBDaHJvbWl1bSA0Mi0gZmFpbHMgb25seSB3aXRoIDUrIGVsZW1lbnRzXG4gICAgICB2YXIgJGluc3RhbmNlID0gbmV3IEMoKTtcbiAgICAgIHZhciBpbmRleCA9IDU7XG4gICAgICB3aGlsZSAoaW5kZXgtLSkgJGluc3RhbmNlW0FEREVSXShpbmRleCwgaW5kZXgpO1xuICAgICAgcmV0dXJuICEkaW5zdGFuY2UuaGFzKC0wKTtcbiAgICB9KTtcbiAgICBpZiAoIUFDQ0VQVF9JVEVSQUJMRVMpIHtcbiAgICAgIEMgPSB3cmFwcGVyKGZ1bmN0aW9uICh0YXJnZXQsIGl0ZXJhYmxlKSB7XG4gICAgICAgIGFuSW5zdGFuY2UodGFyZ2V0LCBDLCBOQU1FKTtcbiAgICAgICAgdmFyIHRoYXQgPSBpbmhlcml0SWZSZXF1aXJlZChuZXcgQmFzZSgpLCB0YXJnZXQsIEMpO1xuICAgICAgICBpZiAoaXRlcmFibGUgIT0gdW5kZWZpbmVkKSBmb3JPZihpdGVyYWJsZSwgSVNfTUFQLCB0aGF0W0FEREVSXSwgdGhhdCk7XG4gICAgICAgIHJldHVybiB0aGF0O1xuICAgICAgfSk7XG4gICAgICBDLnByb3RvdHlwZSA9IHByb3RvO1xuICAgICAgcHJvdG8uY29uc3RydWN0b3IgPSBDO1xuICAgIH1cbiAgICBpZiAoVEhST1dTX09OX1BSSU1JVElWRVMgfHwgQlVHR1lfWkVSTykge1xuICAgICAgZml4TWV0aG9kKCdkZWxldGUnKTtcbiAgICAgIGZpeE1ldGhvZCgnaGFzJyk7XG4gICAgICBJU19NQVAgJiYgZml4TWV0aG9kKCdnZXQnKTtcbiAgICB9XG4gICAgaWYgKEJVR0dZX1pFUk8gfHwgSEFTTlRfQ0hBSU5JTkcpIGZpeE1ldGhvZChBRERFUik7XG4gICAgLy8gd2VhayBjb2xsZWN0aW9ucyBzaG91bGQgbm90IGNvbnRhaW5zIC5jbGVhciBtZXRob2RcbiAgICBpZiAoSVNfV0VBSyAmJiBwcm90by5jbGVhcikgZGVsZXRlIHByb3RvLmNsZWFyO1xuICB9XG5cbiAgc2V0VG9TdHJpbmdUYWcoQywgTkFNRSk7XG5cbiAgT1tOQU1FXSA9IEM7XG4gICRleHBvcnQoJGV4cG9ydC5HICsgJGV4cG9ydC5XICsgJGV4cG9ydC5GICogKEMgIT0gQmFzZSksIE8pO1xuXG4gIGlmICghSVNfV0VBSykgY29tbW9uLnNldFN0cm9uZyhDLCBOQU1FLCBJU19NQVApO1xuXG4gIHJldHVybiBDO1xufTtcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuL19nbG9iYWwnKTtcbnZhciBoaWRlID0gcmVxdWlyZSgnLi9faGlkZScpO1xudmFyIHVpZCA9IHJlcXVpcmUoJy4vX3VpZCcpO1xudmFyIFRZUEVEID0gdWlkKCd0eXBlZF9hcnJheScpO1xudmFyIFZJRVcgPSB1aWQoJ3ZpZXcnKTtcbnZhciBBQlYgPSAhIShnbG9iYWwuQXJyYXlCdWZmZXIgJiYgZ2xvYmFsLkRhdGFWaWV3KTtcbnZhciBDT05TVFIgPSBBQlY7XG52YXIgaSA9IDA7XG52YXIgbCA9IDk7XG52YXIgVHlwZWQ7XG5cbnZhciBUeXBlZEFycmF5Q29uc3RydWN0b3JzID0gKFxuICAnSW50OEFycmF5LFVpbnQ4QXJyYXksVWludDhDbGFtcGVkQXJyYXksSW50MTZBcnJheSxVaW50MTZBcnJheSxJbnQzMkFycmF5LFVpbnQzMkFycmF5LEZsb2F0MzJBcnJheSxGbG9hdDY0QXJyYXknXG4pLnNwbGl0KCcsJyk7XG5cbndoaWxlIChpIDwgbCkge1xuICBpZiAoVHlwZWQgPSBnbG9iYWxbVHlwZWRBcnJheUNvbnN0cnVjdG9yc1tpKytdXSkge1xuICAgIGhpZGUoVHlwZWQucHJvdG90eXBlLCBUWVBFRCwgdHJ1ZSk7XG4gICAgaGlkZShUeXBlZC5wcm90b3R5cGUsIFZJRVcsIHRydWUpO1xuICB9IGVsc2UgQ09OU1RSID0gZmFsc2U7XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBBQlY6IEFCVixcbiAgQ09OU1RSOiBDT05TVFIsXG4gIFRZUEVEOiBUWVBFRCxcbiAgVklFVzogVklFV1xufTtcbiIsImltcG9ydCB7bG9va3VwSXRlbXNCeUlELCBsb29rdXBJdGVtc0J5VXNlciwgZ2V0QXV0aH0gZnJvbSAnLi9yZXF1ZXN0cy5qcydcbmltcG9ydCB7UkVNT1ZFRCwgREVMRVRFRCwgQVBQUk9WRUQsIExPQ0tFRCwgVU5MT0NLRUQsIEVESVRFRCxcbiAgICAgICAgYWRkTG9jYWxTdG9yYWdlSXRlbXMsIGdldExvY2FsU3RvcmFnZUl0ZW1zLFxuICAgICAgICBNQVhfU1lOQ19TVE9SQUdFX0lURU1TX1BFUl9PQkpFQ1QsIE1BWF9TWU5DX1NUT1JBR0VfQ0hBTkdFUywgU0VFTl9DT1VOVF9ERUZBVUxULFxuICAgICAgICBnZXRPYmplY3ROYW1lc0ZvclRoaW5nIH0gZnJvbSAnLi9zdG9yYWdlLmpzJ1xuaW1wb3J0IHtjcmVhdGVOb3RpZmljYXRpb24sIHVwZGF0ZUJhZGdlVW5zZWVuQ291bnQsIHRyaW1EaWN0X2J5X251bWJlclZhbHVlZEF0dHJpYnV0ZSxcbiAgICAgICAgaXNVc2VyRGVsZXRlZEl0ZW0sIGlzUmVtb3ZlZEl0ZW0sXG4gICAgICAgIEl0ZW1Gb3JTdG9yYWdlLCBMb2NhbFN0b3JhZ2VJdGVtLCBDaGFuZ2VGb3JTdG9yYWdlfSBmcm9tICcuL2NvbW1vbi5qcydcbmltcG9ydCBicm93c2VyIGZyb20gJ3dlYmV4dGVuc2lvbi1wb2x5ZmlsbCdcblxuXG5jb25zdCBTVUJTQ1JJQkVEX0ZST01fUkVERElUID0gMFxuY29uc3QgU1VCU0NSSUJFRF9GUk9NX1JFVkVERElUID0gMVxuY29uc3QgU1VCU0NSSUJFRF9GUk9NX05BID0gMlxuXG5jb25zdCBUQVJHRVRfU0VFTl9DT1VOVF9GT1JfUFJFVklPVVNMWV9SRUNPUkRFRF9DSEFOR0UgPSBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiA2MCkrNjBcblxuZXhwb3J0IGNvbnN0IHNldEN1cnJlbnRTdGF0ZUZvcklkID0gKGlkLCBzdWJzY3JpYmVkRnJvbVVSTCkgPT4ge1xuICAgIGxldCBzdWJzY3JpYmVkRnJvbSA9IFNVQlNDUklCRURfRlJPTV9SRURESVRcbiAgICBpZiAoc3Vic2NyaWJlZEZyb21VUkwubWF0Y2goL15odHRwczpcXC9cXC93d3cucmV2ZWRkaXQuY29tLykpIHtcbiAgICAgICAgc3Vic2NyaWJlZEZyb20gPSBTVUJTQ1JJQkVEX0ZST01fUkVWRURESVRcbiAgICB9XG4gICAgcmV0dXJuIGNocm9tZS5zdG9yYWdlLnN5bmMuZ2V0KG51bGwsIGZ1bmN0aW9uIChzdG9yYWdlKSB7XG4gICAgICAgIGdldEF1dGgoKVxuICAgICAgICAudGhlbigoYXV0aCkgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIGNoZWNrRm9yQ2hhbmdlc190aGluZ19ieUlkKFtpZF0sICdvdGhlcicsIGZhbHNlLCBhdXRoLCBzdG9yYWdlLCBzdWJzY3JpYmVkRnJvbSwge30pXG4gICAgICAgIH0pXG4gICAgfSlcbn1cblxuY29uc3QgTUlOX1FVQVJBTlRJTkVEX0NIRUNLX0lOVEVSVkFMX0lOX1NFQ09ORFMgPSA1Kig2MCo2MCoyNClcblxuZXhwb3J0IGNvbnN0IGNoZWNrRm9yQ2hhbmdlcyA9ICgpID0+IHtcbiAgICBjaHJvbWUuc3RvcmFnZS5zeW5jLmdldChudWxsLCBmdW5jdGlvbiAoc3RvcmFnZSkge1xuICAgICAgICB2YXIgdXNlcnMgPSBPYmplY3Qua2V5cyhzdG9yYWdlLnVzZXJfc3Vic2NyaXB0aW9ucylcbiAgICAgICAgdmFyIG90aGVyID0gT2JqZWN0LmtleXMoc3RvcmFnZS5vdGhlcl9zdWJzY3JpcHRpb25zKVxuICAgICAgICBpZiAodXNlcnMubGVuZ3RoIHx8IG90aGVyLmxlbmd0aCkge1xuICAgICAgICAgICAgY29uc3Qgbm93ID0gTWF0aC5mbG9vcihuZXcgRGF0ZSgpLzEwMDApXG4gICAgICAgICAgICAvLyBjaGVjayBmb3IgcXVhcmFudGluZWQgY29udGVudCBvbmNlIGluIGF3aGlsZSBhbmQgZW5hYmxlIG1vbml0b3JfcXVhcmFudGluZWQgaWYgc29tZSBpcyBmb3VuZFxuICAgICAgICAgICAgLy8gYmVjYXVzZSB1c2VycyBtYXkgbm90IGtub3cgdG8gZW5hYmxlIHRoaXMgb3B0aW9uXG4gICAgICAgICAgICAvLyB0aGUgb3B0aW9uIGlzIG9mZiBieSBkZWZhdWx0IGJlY2F1c2UgaXQgY2FuIGFwcGVhciB0byBjYXVzZSBhbiBvY2Nhc2lvbmFsIGxvZ291dFxuICAgICAgICAgICAgaWYgKCEgc3RvcmFnZS5sYXN0X2NoZWNrX3F1YXJhbnRpbmVkXG4gICAgICAgICAgICAgICAgfHwgKG5vdyAtIHN0b3JhZ2UubGFzdF9jaGVja19xdWFyYW50aW5lZCkgPiBNSU5fUVVBUkFOVElORURfQ0hFQ0tfSU5URVJWQUxfSU5fU0VDT05EUyApIHtcbiAgICAgICAgICAgICAgICBzdG9yYWdlLnRlbXBWYXJfbW9uaXRvcl9xdWFyYW50aW5lZCA9IHRydWVcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGdldEF1dGgoKVxuICAgICAgICAgICAgLnRoZW4oKGF1dGgpID0+IHtcbiAgICAgICAgICAgICAgICBjaGVja0ZvckNoYW5nZXNfb3RoZXIoYXV0aCwgc3RvcmFnZSlcbiAgICAgICAgICAgICAgICByZXR1cm4gY2hlY2tGb3JDaGFuZ2VzX3VzZXJzKHVzZXJzLCBhdXRoLCBzdG9yYWdlKVxuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIC50aGVuKCgpID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCBuZXdTdG9yYWdlID0ge2xhc3RfY2hlY2s6IG5vd31cbiAgICAgICAgICAgICAgICBpZiAoc3RvcmFnZS50ZW1wVmFyX21vbml0b3JfcXVhcmFudGluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgbmV3U3RvcmFnZS5sYXN0X2NoZWNrX3F1YXJhbnRpbmVkID0gbm93XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChzdG9yYWdlLnRlbXBWYXJfcXVhcmFudGluZWRfY29udGVudF9mb3VuZCkge1xuICAgICAgICAgICAgICAgICAgICBuZXdTdG9yYWdlLm9wdGlvbnMgPSBzdG9yYWdlLm9wdGlvbnNcbiAgICAgICAgICAgICAgICAgICAgbmV3U3RvcmFnZS5vcHRpb25zLm1vbml0b3JfcXVhcmFudGluZWQgPSB0cnVlXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNocm9tZS5zdG9yYWdlLnN5bmMuc2V0KG5ld1N0b3JhZ2UpXG4gICAgICAgICAgICB9KVxuICAgICAgICB9XG4gICAgfSlcbn1cblxuY29uc3QgY2hlY2tGb3JDaGFuZ2VzX3VzZXJzID0gYXN5bmMgKHVzZXJzLCBhdXRoLCBzdG9yYWdlKSA9PiB7XG4gICAgaWYgKHVzZXJzLmxlbmd0aCkge1xuICAgICAgICBjb25zdCB1c2VyID0gdXNlcnNbMF1cbiAgICAgICAgcmV0dXJuIGxvb2t1cEl0ZW1zQnlVc2VyKHVzZXIsICcnLCAnbmV3JywgJycsIHN0b3JhZ2Uub3B0aW9ucy5tb25pdG9yX3F1YXJhbnRpbmVkLCBzdG9yYWdlLnRlbXBWYXJfbW9uaXRvcl9xdWFyYW50aW5lZCwgYXV0aClcbiAgICAgICAgLnRoZW4oaXRlbXMgPT4ge1xuICAgICAgICAgICAgaWYgKCEgaXRlbXMpIHJldHVybiAvLyBoYW5kbGUgZXhwZWN0ZWQgZXJyb3JzXG4gICAgICAgICAgICB2YXIgaWRzID0gW11cbiAgICAgICAgICAgIGxldCBxdWFyYW50aW5lZF9zdWJyZWRkaXRzID0gbmV3IFNldCgpXG4gICAgICAgICAgICBjb25zdCBpdGVtTG9va3VwID0ge31cbiAgICAgICAgICAgIGlmIChpdGVtcy51c2VyICYmIGl0ZW1zLnVzZXIuaXRlbXMpIHsgLy8gZm9ybWF0IGZyb20gY3JlZDIucmV2ZWRkaXQuY29tXG4gICAgICAgICAgICAgICAgaXRlbXMgPSBpdGVtcy51c2VyLml0ZW1zXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpdGVtcy5mb3JFYWNoKGl0ZW0gPT4ge1xuICAgICAgICAgICAgICAgIGlmIChpdGVtLmRhdGEgJiYgaXRlbS5kYXRhLm5hbWUpIHsgLy8gZm9ybWF0IGZyb20gcmVkZGl0XG4gICAgICAgICAgICAgICAgICAgIGl0ZW0gPSBpdGVtLmRhdGFcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWRzLnB1c2goaXRlbS5uYW1lKVxuICAgICAgICAgICAgICAgIGl0ZW1Mb29rdXBbaXRlbS5uYW1lXSA9IGl0ZW1cbiAgICAgICAgICAgICAgICBpZiAoaXRlbS5xdWFyYW50aW5lKSB7XG4gICAgICAgICAgICAgICAgICAgIHF1YXJhbnRpbmVkX3N1YnJlZGRpdHMuYWRkKGl0ZW0uc3VicmVkZGl0KVxuICAgICAgICAgICAgICAgICAgICBzdG9yYWdlLnRlbXBWYXJfcXVhcmFudGluZWRfY29udGVudF9mb3VuZCA9IHRydWVcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgcmV0dXJuIGNoZWNrRm9yQ2hhbmdlc190aGluZ19ieUlkKGlkcywgdXNlciwgdHJ1ZSwgYXV0aCwgc3RvcmFnZSwgU1VCU0NSSUJFRF9GUk9NX05BLCBpdGVtTG9va3VwLCBBcnJheS5mcm9tKHF1YXJhbnRpbmVkX3N1YnJlZGRpdHMpKVxuICAgICAgICAgICAgLnRoZW4oKCkgPT4gY2hlY2tGb3JDaGFuZ2VzX3VzZXJzKHVzZXJzLnNsaWNlKDEpLCBhdXRoLCBzdG9yYWdlKSlcbiAgICAgICAgfSlcbiAgICB9XG59XG5cbmZ1bmN0aW9uIGNoZWNrRm9yQ2hhbmdlc19vdGhlcihhdXRoLCBzdG9yYWdlKSB7XG4gICAgY29uc3QgaWRzID0gT2JqZWN0LmtleXMoc3RvcmFnZS5vdGhlcl9zdWJzY3JpcHRpb25zKVxuICAgIGlmIChpZHMubGVuZ3RoKSB7XG4gICAgICAgIGNoZWNrRm9yQ2hhbmdlc190aGluZ19ieUlkKGlkcywgJ290aGVyJywgZmFsc2UsIGF1dGgsIHN0b3JhZ2UsIFNVQlNDUklCRURfRlJPTV9OQSlcbiAgICB9XG59XG5cbmNvbnN0IGNoZWNrRm9yQ2hhbmdlc190aGluZ19ieUlkID0gYXN5bmMgKGlkcywgdGhpbmcsIGlzVXNlciwgYXV0aCwgc3RvcmFnZSwgc3Vic2NyaWJlZEZyb20sIGl0ZW1Mb29rdXAgPSB7fSwgcXVhcmFudGluZWRfc3VicmVkZGl0cyA9IFtdKSA9PiB7XG4gICAgbGV0IHByb21pc2VcbiAgICBjb25zdCBtb25pdG9yX3F1YXJhbnRpbmVkID0gc3RvcmFnZS5vcHRpb25zLm1vbml0b3JfcXVhcmFudGluZWRcbiAgICBpZiAobG9jYXRpb24ucHJvdG9jb2wubWF0Y2goL15odHRwLykpIHtcbiAgICAgICAgLy8gdGhpcyBjb25kaXRpb24gaXMgZm9yIHdoZW4gdGhlIGNvZGUgaXMgYWN0aXZhdGVkIHZpYSBhIGNvbnRlbnQgc2NyaXB0IChlLmcuIHRoZSBzdWJzY3JpYmUgYnV0dG9uKSBhbmQgYnJvd3Nlci5jb29raWVzIGlzIHVuYXZhaWxhYmxlXG4gICAgICAgIHByb21pc2UgPSBicm93c2VyLnJ1bnRpbWUuc2VuZE1lc3NhZ2Uoe2FjdGlvbjogJ2dldC1yZWRkaXQtaXRlbXMtYnktaWQnLCBpZHMsIG1vbml0b3JfcXVhcmFudGluZWR9KVxuICAgIH0gZWxzZSB7XG4gICAgICAgIHByb21pc2UgPSBsb29rdXBJdGVtc0J5SUQoaWRzLCBhdXRoLCBtb25pdG9yX3F1YXJhbnRpbmVkLCBzdG9yYWdlLnRlbXBWYXJfbW9uaXRvcl9xdWFyYW50aW5lZCwgcXVhcmFudGluZWRfc3VicmVkZGl0cylcbiAgICB9XG4gICAgcmV0dXJuIHByb21pc2VcbiAgICAudGhlbihyZXN1bHQgPT4ge1xuICAgICAgICBpZiAoISByZXN1bHQpIHJldHVybiAvLyBoYW5kbGUgZXhwZWN0ZWQgZXJyb3JzXG4gICAgICAgIGNvbnN0IGl0ZW1zID0gQXJyYXkuaXNBcnJheShyZXN1bHQpID8gcmVzdWx0IDogcmVzdWx0Lml0ZW1zXG4gICAgICAgIGlmICghIGl0ZW1zKSByZXR1cm4gLy8gaGFuZGxlIGV4cGVjdGVkIGVycm9ycyBmcm9tIG9ialxuICAgICAgICBjb25zdCByZW1vdmFsX3N0YXR1cyA9IHN0b3JhZ2Uub3B0aW9ucy5yZW1vdmFsX3N0YXR1c1xuICAgICAgICBjb25zdCBsb2NrX3N0YXR1cyA9IHN0b3JhZ2Uub3B0aW9ucy5sb2NrX3N0YXR1c1xuICAgICAgICBjb25zdCB0YXJnZXRfc2Vlbl9jb3VudCA9IHN0b3JhZ2Uub3B0aW9ucy5zZWVuX2NvdW50IHx8IFNFRU5fQ09VTlRfREVGQVVMVFxuICAgICAgICBjb25zdCBrZXlzID0gZ2V0T2JqZWN0TmFtZXNGb3JUaGluZyh0aGluZywgaXNVc2VyKVxuXG4gICAgICAgIGNvbnN0IGtub3duX3JlbW92ZWQgPSBzdG9yYWdlW2tleXNbJ3JlbW92ZWQnXV0gfHwge31cbiAgICAgICAgY29uc3Qga25vd25fYXBwcm92ZWQgPSBzdG9yYWdlW2tleXNbJ2FwcHJvdmVkJ11dIHx8IHt9XG4gICAgICAgIGNvbnN0IGtub3duX2xvY2tlZCA9IHN0b3JhZ2Vba2V5c1snbG9ja2VkJ11dIHx8IHt9XG4gICAgICAgIGNvbnN0IGtub3duX3VubG9ja2VkID0gc3RvcmFnZVtrZXlzWyd1bmxvY2tlZCddXSB8fCB7fVxuICAgICAgICBjb25zdCBjaGFuZ2VzID0gc3RvcmFnZVtrZXlzWydjaGFuZ2VzJ11dIHx8IFtdXG4gICAgICAgIGlmICghIGlzVXNlcikge1xuICAgICAgICAgICAgaXRlbUxvb2t1cCA9IHt9XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgcmVtb3ZlZCA9IFtdLCBhcHByb3ZlZCA9IFtdLCBsb2NrZWQgPSBbXSwgdW5sb2NrZWQgPSBbXVxuICAgICAgICBpdGVtcy5mb3JFYWNoKGl0ZW1XcmFwID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGl0ZW0gPSBpdGVtV3JhcC5kYXRhXG4gICAgICAgICAgICBpZiAoISBpc1VzZXIpIHtcbiAgICAgICAgICAgICAgICBpdGVtTG9va3VwW2l0ZW0ubmFtZV0gPSBpdGVtXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoaXNSZW1vdmVkSXRlbShpdGVtKSkge1xuICAgICAgICAgICAgICAgIHJlbW92ZWQucHVzaChpdGVtLm5hbWUpXG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGFwcHJvdmVkLnB1c2goaXRlbS5uYW1lKVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGl0ZW0ubG9ja2VkKSB7XG4gICAgICAgICAgICAgICAgbG9ja2VkLnB1c2goaXRlbS5uYW1lKVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB1bmxvY2tlZC5wdXNoKGl0ZW0ubmFtZSlcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSlcbiAgICAgICAgLy8gbWFyayBpdGVtcyB0aGF0IGRvIG5vdCBleGlzdCBpbiBhcnJheXNcbiAgICAgICAgLy8gY2hhbmdlIGhhcHBlbnMgaWY6XG4gICAgICAgIC8vICAgICAgdHJhY2tpbmcgcmVtb3ZhbHMgJiYgaXRlbSBpcyByZW1vdmVkXG4gICAgICAgIC8vICAgICAgdHJhY2tpbmcgcmVtb3ZhbHMgJiYgaXRlbSB3YXMgaW4gcmVtb3ZlZCwgbm93IGluIGFwcHJvdmVkXG4gICAgICAgIGNvbnN0IG5ld0xvY2FsU3RvcmFnZUl0ZW1zID0ge31cblxuICAgICAgICBjb25zdCBjaGFuZ2VUeXBlcyA9IFtdXG4gICAgICAgIGxldCBudW1fY2hhbmdlcyA9IDBcbiAgICAgICAgcmV0dXJuIGdldExvY2FsU3RvcmFnZUl0ZW1zKHRoaW5nLCBpc1VzZXIpXG4gICAgICAgIC50aGVuKGV4aXN0aW5nTG9jYWxTdG9yYWdlSXRlbXMgPT4ge1xuICAgICAgICAgICAgaWYgKHJlbW92YWxfc3RhdHVzLnRyYWNrKSB7XG4gICAgICAgICAgICAgICAgbnVtX2NoYW5nZXMgKz0gbWFya0NoYW5nZXMocmVtb3ZlZCwgUkVNT1ZFRCwgJ21vZCByZW1vdmVkJywga25vd25fcmVtb3ZlZCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhcHByb3ZlZCwgQVBQUk9WRUQsICdhcHByb3ZlZCcsIGtub3duX2FwcHJvdmVkLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoYW5nZXMsIGl0ZW1Mb29rdXAsIHJlbW92YWxfc3RhdHVzLm5vdGlmeSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXdMb2NhbFN0b3JhZ2VJdGVtcywgY2hhbmdlVHlwZXMsIGlzVXNlciwgc3Vic2NyaWJlZEZyb20sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXhpc3RpbmdMb2NhbFN0b3JhZ2VJdGVtcywgdGFyZ2V0X3NlZW5fY291bnQpXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAobG9ja19zdGF0dXMudHJhY2spIHtcbiAgICAgICAgICAgICAgICBudW1fY2hhbmdlcyArPSBtYXJrQ2hhbmdlcyhsb2NrZWQsIExPQ0tFRCwgJ2xvY2tlZCcsIGtub3duX2xvY2tlZCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1bmxvY2tlZCwgVU5MT0NLRUQsICd1bmxvY2tlZCcsIGtub3duX3VubG9ja2VkLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoYW5nZXMsIGl0ZW1Mb29rdXAsIGxvY2tfc3RhdHVzLm5vdGlmeSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXdMb2NhbFN0b3JhZ2VJdGVtcywgY2hhbmdlVHlwZXMsIGlzVXNlciwgc3Vic2NyaWJlZEZyb20sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXhpc3RpbmdMb2NhbFN0b3JhZ2VJdGVtcywgdGFyZ2V0X3NlZW5fY291bnQpXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAobnVtX2NoYW5nZXMgJiYgY2hhbmdlVHlwZXMubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgY3JlYXRlTm90aWZpY2F0aW9uKFxuICAgICAgICAgICAgICAgICAgICB7bm90aWZpY2F0aW9uSWQ6IHRoaW5nLFxuICAgICAgICAgICAgICAgICAgICAgdGl0bGU6IHRoaW5nLFxuICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZTogYCR7bnVtX2NoYW5nZXN9IG5ldyBbJHtjaGFuZ2VUeXBlcy5qb2luKCcsICcpfV0gYWN0aW9ucywgY2xpY2sgdG8gdmlld2B9KVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGNocm9tZS5zdG9yYWdlLnN5bmMuc2V0KHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBba2V5c1sncmVtb3ZlZCddXTogdHJpbURpY3RfYnlfbnVtYmVyVmFsdWVkQXR0cmlidXRlKGtub3duX3JlbW92ZWQsIE1BWF9TWU5DX1NUT1JBR0VfSVRFTVNfUEVSX09CSkVDVCwgJ2MnKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBba2V5c1snYXBwcm92ZWQnXV06IHRyaW1EaWN0X2J5X251bWJlclZhbHVlZEF0dHJpYnV0ZShrbm93bl9hcHByb3ZlZCwgTUFYX1NZTkNfU1RPUkFHRV9JVEVNU19QRVJfT0JKRUNULCAnYycpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFtrZXlzWydsb2NrZWQnXV06IHRyaW1EaWN0X2J5X251bWJlclZhbHVlZEF0dHJpYnV0ZShrbm93bl9sb2NrZWQsIE1BWF9TWU5DX1NUT1JBR0VfSVRFTVNfUEVSX09CSkVDVCwgJ2MnKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBba2V5c1sndW5sb2NrZWQnXV06IHRyaW1EaWN0X2J5X251bWJlclZhbHVlZEF0dHJpYnV0ZShrbm93bl91bmxvY2tlZCwgTUFYX1NZTkNfU1RPUkFHRV9JVEVNU19QRVJfT0JKRUNULCAnYycpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFtrZXlzWydjaGFuZ2VzJ11dOiBjaGFuZ2VzLnNsaWNlKC1NQVhfU1lOQ19TVE9SQUdFX0NIQU5HRVMpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LCAoKSA9PiB7XG4gICAgICAgICAgICAgICAgdXBkYXRlQmFkZ2VVbnNlZW5Db3VudCgpXG4gICAgICAgICAgICAgICAgcmV0dXJuIGFkZExvY2FsU3RvcmFnZUl0ZW1zKG5ld0xvY2FsU3RvcmFnZUl0ZW1zLCB0aGluZywgaXNVc2VyKVxuICAgICAgICAgICAgfSlcbiAgICAgICAgfSlcbiAgICB9KVxufVxuXG5jb25zdCBjaGFuZ2VJc1ByZXZpb3VzbHlSZWNvcmRlZCA9IChuYW1lLCBjaGFuZ2VfdHlwZSwgY2hhbmdlcykgPT4ge1xuICAgIGZvciAoY29uc3QgY2hhbmdlIG9mIGNoYW5nZXMpIHtcbiAgICAgICAgbGV0IGNoYW5nZV9vYmogPSBjaGFuZ2VcbiAgICAgICAgaWYgKCEgKGNoYW5nZV9vYmogaW5zdGFuY2VvZiBDaGFuZ2VGb3JTdG9yYWdlKSkge1xuICAgICAgICAgICAgY2hhbmdlX29iaiA9IG5ldyBDaGFuZ2VGb3JTdG9yYWdlKHtvYmplY3Q6IGNoYW5nZX0pXG4gICAgICAgIH1cbiAgICAgICAgaWYgKGNoYW5nZV9vYmouZ2V0SUQoKSA9PT0gbmFtZSAmJiBjaGFuZ2VfdHlwZSA9PT0gY2hhbmdlX29iai5nZXRDaGFuZ2VUeXBlSW50ZXJuYWwoKSkge1xuICAgICAgICAgICAgcmV0dXJuIHRydWVcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gZmFsc2Vcbn1cblxuXG4vLyBuZXdMb2NhbFN0b3JhZ2VJdGVtcyBvcGVyYXRlcyBhcyBhIHJldHVybiB2YWx1ZVxuZnVuY3Rpb24gbWFya0NoYW5nZXMgKGFsZXJ0X2N1cnJlbnRfbGlzdCwgYWxlcnRfdHlwZSwgYWxlcnRfdGV4dCwgYWxlcnRfa25vd25faGFzaCxcbiAgICAgICAgICAgICAgICAgICAgICBub3JtYWxfY3VycmVudF9saXN0LCBub3JtYWxfdHlwZSwgbm9ybWFsX3RleHQsIG5vcm1hbF9rbm93bl9oYXNoLFxuICAgICAgICAgICAgICAgICAgICAgIGNoYW5nZXMsIGl0ZW1Mb29rdXAsIG5vdGlmeSwgbmV3TG9jYWxTdG9yYWdlSXRlbXMsIGNoYW5nZVR5cGVzLFxuICAgICAgICAgICAgICAgICAgICAgIGlzVXNlciwgc3Vic2NyaWJlZEZyb20sIGV4aXN0aW5nTG9jYWxTdG9yYWdlSXRlbXMsIHRhcmdldF9zZWVuX2NvdW50KSB7XG4gICAgY29uc3QgYWxlcnRfdW5zZWVuX2lkcyA9IFtdLFxuICAgICAgICAgIG5vcm1hbF91bnNlZW5faWRzID0gW10sXG4gICAgICAgICAgYWxlcnRfdXNlckRlbGV0ZWRfdW5zZWVuX2lkcyA9IFtdLFxuICAgICAgICAgIG5vdyA9IE1hdGguZmxvb3IobmV3IERhdGUoKS8xMDAwKVxuXG4gICAgYWxlcnRfY3VycmVudF9saXN0LmZvckVhY2gobmFtZSA9PiB7XG4gICAgICAgIGNvbnN0IGl0ZW0gPSBpdGVtTG9va3VwW25hbWVdXG4gICAgICAgIC8vIDEuIGluIHRoZSBjYXNlIG9mIGEgbm9uLXVzZXJwYWdlLXRyYWNrZWQgKGlzVXNlcj1mYWxzZSkgcmVtb3ZlZCBjb21tZW50LCBkb24ndCBvdmVyd3JpdGUgbG9jYWwgc3RvcmFnZSBiL2NcbiAgICAgICAgLy8gaWYgaXQgd2VyZSBvdmVyd3JpdHRlbiwgYm9keSB3b3VsZCBhcHBlYXIgb24gaGlzdG9yeSBwYWdlIGFzIFtyZW1vdmVkXVxuICAgICAgICAvLyAyLiBpbiB0aGUgY2FzZSBvZiB1c2VycGFnZSB0cmFja2luZyAoaXNVc2VyPXRydWUpLCBvbmx5IG5lZWQgdG8gc2F2ZSB0aGUgdGV4dCBpbiBsb2NhbCBzdG9yYWdlXG4gICAgICAgIC8vIHdoZW4gdGhlcmUgaXMgYSBjaGFuZ2UuIHVzZXIgcGFnZSBsb29rdXAgKGl0ZW1Mb29rdXApIHdpbGwgaGF2ZSBvcmlnaW5hbCB0ZXh0XG4gICAgICAgIGNvbnN0IGV4aXN0aW5nTG9jYWxTdG9yYWdlSXRlbSA9IGV4aXN0aW5nTG9jYWxTdG9yYWdlSXRlbXNbbmFtZV1cbiAgICAgICAgaWYgKCEgaXNVc2VyICYmICEgZXhpc3RpbmdMb2NhbFN0b3JhZ2VJdGVtKSB7XG4gICAgICAgICAgICBuZXdMb2NhbFN0b3JhZ2VJdGVtc1tuYW1lXSA9IG5ldyBMb2NhbFN0b3JhZ2VJdGVtKHtpdGVtOiBpdGVtLCBvYnNlcnZlZF91dGM6IG5vd30pXG4gICAgICAgIH0gZWxzZSBpZiAoZXhpc3RpbmdMb2NhbFN0b3JhZ2VJdGVtKSB7XG4gICAgICAgICAgICAvLyByZXNldCBzZWVuX2NvdW50IHNvIHRoYXQgaXRlbXMgb2JzZXJ2ZWQgYXMgYXBwcm92ZWQvbm9ybWFsIG11c3QgYmUgY29uc2VjdXRpdmVseSBzZWVuIHcvdGhhdCBzdGF0ZVxuICAgICAgICAgICAgLy8gTm90ZTogVGhlIHZhciBzZWVuX2NvdW50IGlzIHJlYWxseSBhICdzZWVuIGFzIG5vcm1hbCcgY291bnQsIGJ1dCB3ZSBkb24ndCBuZWVkIGFuIGFsZXJ0X3NlZW5fY291bnRcbiAgICAgICAgICAgIGNvbnN0IG5ld0xvY2FsU3RvcmFnZUl0ZW0gPSBuZXcgTG9jYWxTdG9yYWdlSXRlbSh7b2JqZWN0OiBleGlzdGluZ0xvY2FsU3RvcmFnZUl0ZW19KVxuICAgICAgICAgICAgbmV3TG9jYWxTdG9yYWdlSXRlbS5yZXNldFNlZW5Db3VudCgpXG4gICAgICAgICAgICBuZXdMb2NhbFN0b3JhZ2VJdGVtc1tuYW1lXSA9IG5ld0xvY2FsU3RvcmFnZUl0ZW1cbiAgICAgICAgfVxuICAgICAgICBpZiAoISAobmFtZSBpbiBhbGVydF9rbm93bl9oYXNoKSkge1xuICAgICAgICAgICAgLy8gbWFya1Vuc2VlbiBpcyBhbHdheXMgdHJ1ZSBleGNlcHQgd2hlbiBzdWJzY3JpYmluZyB2aWEgYSByZWRkaXQgKG5vdCByZXZlZGRpdCkgcGFnZSB0byBhIG5ldyBJRCBmb3IgJ290aGVyJ1xuICAgICAgICAgICAgLy8gc3Vic2NyaXB0aW9ucy4gQXMgbG9uZyBhcyB0aGUgaXRlbSBpcyBub3QgJ3JlbW92ZWQnLCB0aGUgY3VycmVudCBzdGF0ZSBpcyBzdG9yZWQgYXMgJ3NlZW4nICh1bnNlZW49ZmFsc2UpLlxuICAgICAgICAgICAgLy8gSXQgaXMgYXNzdW1lZCB0aGF0IHVzZXJzIHN1YnNjcmliaW5nIGZyb20gcmV2ZWRkaXQgcGFnZXMgd2lsbCBhbHJlYWR5IGhhdmUgc2VlbiBhbGwgdGhlIGN1cnJlbnQgbW9kIGFjdGlvbnMsXG4gICAgICAgICAgICAvLyBhbmQgdXNlcnMgc3Vic2NyaWJpbmcgZnJvbSBhIHJlZGRpdCBwYWdlIHdpbGwgYWxyZWFkeSBrbm93IGFib3V0IGxvY2tlZCBpdGVtc1xuICAgICAgICAgICAgbGV0IG1hcmtVbnNlZW4gPSB0cnVlXG4gICAgICAgICAgICBpZiAoKHN1YnNjcmliZWRGcm9tID09PSBTVUJTQ1JJQkVEX0ZST01fUkVERElUICYmIGFsZXJ0X3R5cGUgIT09IFJFTU9WRUQpIHx8XG4gICAgICAgICAgICAgICAgIHN1YnNjcmliZWRGcm9tID09PSBTVUJTQ1JJQkVEX0ZST01fUkVWRURESVQpIHtcbiAgICAgICAgICAgICAgICBtYXJrVW5zZWVuID0gZmFsc2VcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGFsZXJ0X2tub3duX2hhc2hbbmFtZV0gPSBuZXcgSXRlbUZvclN0b3JhZ2UoaXRlbS5jcmVhdGVkX3V0YywgbWFya1Vuc2VlbilcbiAgICAgICAgICAgIGRlbGV0ZSBub3JtYWxfa25vd25faGFzaFtuYW1lXVxuICAgICAgICAgICAgaWYgKG1hcmtVbnNlZW4pIHtcbiAgICAgICAgICAgICAgICBsZXQgYWxlcnRfdHlwZV92YXIgPSBhbGVydF90eXBlXG4gICAgICAgICAgICAgICAgaWYgKGlzVXNlckRlbGV0ZWRJdGVtKGl0ZW0pKSB7XG4gICAgICAgICAgICAgICAgICAgIGFsZXJ0X3R5cGVfdmFyID0gREVMRVRFRFxuICAgICAgICAgICAgICAgICAgICBhbGVydF91c2VyRGVsZXRlZF91bnNlZW5faWRzLnB1c2gobmFtZSlcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBhbGVydF91bnNlZW5faWRzLnB1c2gobmFtZSlcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY2hhbmdlcy5wdXNoKG5ldyBDaGFuZ2VGb3JTdG9yYWdlKHtpZDogbmFtZSwgb2JzZXJ2ZWRfdXRjOiBub3csIGNoYW5nZV90eXBlOiBhbGVydF90eXBlX3Zhcn0pKVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGlzVXNlcikge1xuICAgICAgICAgICAgICAgIG5ld0xvY2FsU3RvcmFnZUl0ZW1zW25hbWVdID0gbmV3IExvY2FsU3RvcmFnZUl0ZW0oe2l0ZW06IGl0ZW0sIG9ic2VydmVkX3V0Yzogbm93fSlcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0pXG4gICAgbm9ybWFsX2N1cnJlbnRfbGlzdC5mb3JFYWNoKG5hbWUgPT4ge1xuICAgICAgICBjb25zdCBpdGVtID0gaXRlbUxvb2t1cFtuYW1lXVxuICAgICAgICAvLyBzYXZlIG9yaWdpbmFsIHRleHQgZm9yIGFsbCBub24tdXNlcnBhZ2UtdHJhY2tlZCBpdGVtcyBzaW5jZSBjb21tZW50IHRleHQgY2FuIGRpc2FwcGVhclxuICAgICAgICBpZiAoISBpc1VzZXIgJiYgISBleGlzdGluZ0xvY2FsU3RvcmFnZUl0ZW1zW25hbWVdKSB7XG4gICAgICAgICAgICBuZXdMb2NhbFN0b3JhZ2VJdGVtc1tuYW1lXSA9IG5ldyBMb2NhbFN0b3JhZ2VJdGVtKHtpdGVtOiBpdGVtLCBvYnNlcnZlZF91dGM6IG5vd30pXG4gICAgICAgIH1cbiAgICAgICAgaWYgKG5hbWUgaW4gYWxlcnRfa25vd25faGFzaCkge1xuICAgICAgICAgICAgY29uc3QgdGhpc19sb2NhbFN0b3JhZ2VJdGVtID0gbmV3IExvY2FsU3RvcmFnZUl0ZW0oe29iamVjdDogZXhpc3RpbmdMb2NhbFN0b3JhZ2VJdGVtc1tuYW1lXX0pXG4gICAgICAgICAgICAvLyBUcmFjayB0aGUgc2VlbiBjb3VudCwgYWthICdvYnNlcnZlZCBzYW1lIHN0YXR1cycgY291bnRcbiAgICAgICAgICAgIC8vIERvaW5nIHNvIGFsbG93cyBzZW5kaW5nIGFuIGFsZXJ0IG9ubHkgYWZ0ZXIgTiB0aW1lcyBhIG5ldyBzdGF0dXMgaGFzIGJlZW4gb2JzZXJ2ZWQuXG4gICAgICAgICAgICAvLyBTZWU6IGh0dHBzOi8vd3d3LnJlZGRpdC5jb20vci9yZXZlZGRpdC9jb21tZW50cy96Yzd0Y20vcmV2ZWRkaXRfc2VuZGluZ19yZXBldGl0aXZlX25vdGlmaWNhdGlvbnMvXG4gICAgICAgICAgICBjb25zdCBzZWVuX2NvdW50ID0gdGhpc19sb2NhbFN0b3JhZ2VJdGVtLmluY3JlbWVudFNlZW5Db3VudCgpXG4gICAgICAgICAgICBpZiAoc2Vlbl9jb3VudCA+PSB0YXJnZXRfc2Vlbl9jb3VudCkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGNoYW5nZV9pc19wcmV2aW91c2x5X3JlY29yZGVkID0gY2hhbmdlSXNQcmV2aW91c2x5UmVjb3JkZWQobmFtZSwgbm9ybWFsX3R5cGUsIGNoYW5nZXMpXG4gICAgICAgICAgICAgICAgLy8gVG8gcHJldmVudCByZXBlYXQgbm90aWZpY2F0aW9ucywgd2hvc2Ugbm9uLWRldGVybWluaXN0aWMgY2F1c2UgSSBoYXZlbid0IHlldCBmaWd1cmVkIG91dCxcbiAgICAgICAgICAgICAgICAvLyBvbmx5IG5vdGlmeSBhYm91dCB0aGUgc2Vjb25kIG9ic2VydmVkIGNoYW5nZSBpbiBzdGF0dXMgYmFjayB0byAnbm9ybWFsJyAoYXBwcm92ZWQvdW5sb2NrZWQpXG4gICAgICAgICAgICAgICAgLy8gaWYgYSBoaWdoZXIgdGhyZXNob2xkIG9mIGNvbnNlY3V0aXZlIG5vcm1hbCBzdGF0dXNlcyBoYXMgYmVlbiBvYnNlcnZlZFxuICAgICAgICAgICAgICAgIGlmICghIGNoYW5nZV9pc19wcmV2aW91c2x5X3JlY29yZGVkIHx8IHNlZW5fY291bnQgPj0gVEFSR0VUX1NFRU5fQ09VTlRfRk9SX1BSRVZJT1VTTFlfUkVDT1JERURfQ0hBTkdFKSB7XG4gICAgICAgICAgICAgICAgICAgIG5vcm1hbF9rbm93bl9oYXNoW25hbWVdID0gbmV3IEl0ZW1Gb3JTdG9yYWdlKGl0ZW0uY3JlYXRlZF91dGMsIHRydWUpXG4gICAgICAgICAgICAgICAgICAgIGRlbGV0ZSBhbGVydF9rbm93bl9oYXNoW25hbWVdXG5cbiAgICAgICAgICAgICAgICAgICAgY2hhbmdlcy5wdXNoKG5ldyBDaGFuZ2VGb3JTdG9yYWdlKHtpZDogbmFtZSwgb2JzZXJ2ZWRfdXRjOiBub3csIGNoYW5nZV90eXBlOiBub3JtYWxfdHlwZSwgc2Vlbl9jb3VudH0pKVxuICAgICAgICAgICAgICAgICAgICBub3JtYWxfdW5zZWVuX2lkcy5wdXNoKG5hbWUpXG5cbiAgICAgICAgICAgICAgICAgICAgbmV3TG9jYWxTdG9yYWdlSXRlbXNbbmFtZV0gPSBuZXcgTG9jYWxTdG9yYWdlSXRlbSh7aXRlbTogaXRlbSwgb2JzZXJ2ZWRfdXRjOiBub3d9KVxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIG5ld0xvY2FsU3RvcmFnZUl0ZW1zW25hbWVdID0gdGhpc19sb2NhbFN0b3JhZ2VJdGVtXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBuZXdMb2NhbFN0b3JhZ2VJdGVtc1tuYW1lXSA9IHRoaXNfbG9jYWxTdG9yYWdlSXRlbVxuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgbm9ybWFsX2tub3duX2hhc2hbbmFtZV0gPSBuZXcgSXRlbUZvclN0b3JhZ2UoaXRlbS5jcmVhdGVkX3V0YywgZmFsc2UpXG4gICAgICAgIH1cbiAgICB9KVxuICAgIGNvbnN0IG51bV9jaGFuZ2VzID0gYWxlcnRfdW5zZWVuX2lkcy5sZW5ndGggKyBub3JtYWxfdW5zZWVuX2lkcy5sZW5ndGggKyBhbGVydF91c2VyRGVsZXRlZF91bnNlZW5faWRzLmxlbmd0aFxuICAgIGlmIChub3RpZnkgJiYgbnVtX2NoYW5nZXMpIHtcbiAgICAgICAgaWYgKGFsZXJ0X3Vuc2Vlbl9pZHMubGVuZ3RoKSBjaGFuZ2VUeXBlcy5wdXNoKGFsZXJ0X3RleHQpXG4gICAgICAgIGlmIChhbGVydF91c2VyRGVsZXRlZF91bnNlZW5faWRzLmxlbmd0aCkgY2hhbmdlVHlwZXMucHVzaCgndXNlciBkZWxldGVkJylcbiAgICAgICAgaWYgKG5vcm1hbF91bnNlZW5faWRzLmxlbmd0aCkgY2hhbmdlVHlwZXMucHVzaChub3JtYWxfdGV4dClcbiAgICB9XG4gICAgcmV0dXJuIG51bV9jaGFuZ2VzXG59XG4iLCJ2YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbnZhciBkb2N1bWVudCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpLmRvY3VtZW50O1xuLy8gdHlwZW9mIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQgaXMgJ29iamVjdCcgaW4gb2xkIElFXG52YXIgaXMgPSBpc09iamVjdChkb2N1bWVudCkgJiYgaXNPYmplY3QoZG9jdW1lbnQuY3JlYXRlRWxlbWVudCk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gaXMgPyBkb2N1bWVudC5jcmVhdGVFbGVtZW50KGl0KSA6IHt9O1xufTtcbiIsImV4cG9ydHMuZiA9IHJlcXVpcmUoJy4vX3drcycpO1xuIiwidmFyIHNoYXJlZCA9IHJlcXVpcmUoJy4vX3NoYXJlZCcpKCdrZXlzJyk7XG52YXIgdWlkID0gcmVxdWlyZSgnLi9fdWlkJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChrZXkpIHtcbiAgcmV0dXJuIHNoYXJlZFtrZXldIHx8IChzaGFyZWRba2V5XSA9IHVpZChrZXkpKTtcbn07XG4iLCIvLyBJRSA4LSBkb24ndCBlbnVtIGJ1ZyBrZXlzXG5tb2R1bGUuZXhwb3J0cyA9IChcbiAgJ2NvbnN0cnVjdG9yLGhhc093blByb3BlcnR5LGlzUHJvdG90eXBlT2YscHJvcGVydHlJc0VudW1lcmFibGUsdG9Mb2NhbGVTdHJpbmcsdG9TdHJpbmcsdmFsdWVPZidcbikuc3BsaXQoJywnKTtcbiIsInZhciBkb2N1bWVudCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpLmRvY3VtZW50O1xubW9kdWxlLmV4cG9ydHMgPSBkb2N1bWVudCAmJiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7XG4iLCIvLyBXb3JrcyB3aXRoIF9fcHJvdG9fXyBvbmx5LiBPbGQgdjggY2FuJ3Qgd29yayB3aXRoIG51bGwgcHJvdG8gb2JqZWN0cy5cbi8qIGVzbGludC1kaXNhYmxlIG5vLXByb3RvICovXG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIGNoZWNrID0gZnVuY3Rpb24gKE8sIHByb3RvKSB7XG4gIGFuT2JqZWN0KE8pO1xuICBpZiAoIWlzT2JqZWN0KHByb3RvKSAmJiBwcm90byAhPT0gbnVsbCkgdGhyb3cgVHlwZUVycm9yKHByb3RvICsgXCI6IGNhbid0IHNldCBhcyBwcm90b3R5cGUhXCIpO1xufTtcbm1vZHVsZS5leHBvcnRzID0ge1xuICBzZXQ6IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fCAoJ19fcHJvdG9fXycgaW4ge30gPyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lXG4gICAgZnVuY3Rpb24gKHRlc3QsIGJ1Z2d5LCBzZXQpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIHNldCA9IHJlcXVpcmUoJy4vX2N0eCcpKEZ1bmN0aW9uLmNhbGwsIHJlcXVpcmUoJy4vX29iamVjdC1nb3BkJykuZihPYmplY3QucHJvdG90eXBlLCAnX19wcm90b19fJykuc2V0LCAyKTtcbiAgICAgICAgc2V0KHRlc3QsIFtdKTtcbiAgICAgICAgYnVnZ3kgPSAhKHRlc3QgaW5zdGFuY2VvZiBBcnJheSk7XG4gICAgICB9IGNhdGNoIChlKSB7IGJ1Z2d5ID0gdHJ1ZTsgfVxuICAgICAgcmV0dXJuIGZ1bmN0aW9uIHNldFByb3RvdHlwZU9mKE8sIHByb3RvKSB7XG4gICAgICAgIGNoZWNrKE8sIHByb3RvKTtcbiAgICAgICAgaWYgKGJ1Z2d5KSBPLl9fcHJvdG9fXyA9IHByb3RvO1xuICAgICAgICBlbHNlIHNldChPLCBwcm90byk7XG4gICAgICAgIHJldHVybiBPO1xuICAgICAgfTtcbiAgICB9KHt9LCBmYWxzZSkgOiB1bmRlZmluZWQpLFxuICBjaGVjazogY2hlY2tcbn07XG4iLCJtb2R1bGUuZXhwb3J0cyA9ICdcXHgwOVxceDBBXFx4MEJcXHgwQ1xceDBEXFx4MjBcXHhBMFxcdTE2ODBcXHUxODBFXFx1MjAwMFxcdTIwMDFcXHUyMDAyXFx1MjAwMycgK1xuICAnXFx1MjAwNFxcdTIwMDVcXHUyMDA2XFx1MjAwN1xcdTIwMDhcXHUyMDA5XFx1MjAwQVxcdTIwMkZcXHUyMDVGXFx1MzAwMFxcdTIwMjhcXHUyMDI5XFx1RkVGRic7XG4iLCJ2YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbnZhciBzZXRQcm90b3R5cGVPZiA9IHJlcXVpcmUoJy4vX3NldC1wcm90bycpLnNldDtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKHRoYXQsIHRhcmdldCwgQykge1xuICB2YXIgUyA9IHRhcmdldC5jb25zdHJ1Y3RvcjtcbiAgdmFyIFA7XG4gIGlmIChTICE9PSBDICYmIHR5cGVvZiBTID09ICdmdW5jdGlvbicgJiYgKFAgPSBTLnByb3RvdHlwZSkgIT09IEMucHJvdG90eXBlICYmIGlzT2JqZWN0KFApICYmIHNldFByb3RvdHlwZU9mKSB7XG4gICAgc2V0UHJvdG90eXBlT2YodGhhdCwgUCk7XG4gIH0gcmV0dXJuIHRoYXQ7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIHRvSW50ZWdlciA9IHJlcXVpcmUoJy4vX3RvLWludGVnZXInKTtcbnZhciBkZWZpbmVkID0gcmVxdWlyZSgnLi9fZGVmaW5lZCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHJlcGVhdChjb3VudCkge1xuICB2YXIgc3RyID0gU3RyaW5nKGRlZmluZWQodGhpcykpO1xuICB2YXIgcmVzID0gJyc7XG4gIHZhciBuID0gdG9JbnRlZ2VyKGNvdW50KTtcbiAgaWYgKG4gPCAwIHx8IG4gPT0gSW5maW5pdHkpIHRocm93IFJhbmdlRXJyb3IoXCJDb3VudCBjYW4ndCBiZSBuZWdhdGl2ZVwiKTtcbiAgZm9yICg7biA+IDA7IChuID4+Pj0gMSkgJiYgKHN0ciArPSBzdHIpKSBpZiAobiAmIDEpIHJlcyArPSBzdHI7XG4gIHJldHVybiByZXM7XG59O1xuIiwiLy8gMjAuMi4yLjI4IE1hdGguc2lnbih4KVxubW9kdWxlLmV4cG9ydHMgPSBNYXRoLnNpZ24gfHwgZnVuY3Rpb24gc2lnbih4KSB7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zZWxmLWNvbXBhcmVcbiAgcmV0dXJuICh4ID0gK3gpID09IDAgfHwgeCAhPSB4ID8geCA6IHggPCAwID8gLTEgOiAxO1xufTtcbiIsIi8vIDIwLjIuMi4xNCBNYXRoLmV4cG0xKHgpXG52YXIgJGV4cG0xID0gTWF0aC5leHBtMTtcbm1vZHVsZS5leHBvcnRzID0gKCEkZXhwbTFcbiAgLy8gT2xkIEZGIGJ1Z1xuICB8fCAkZXhwbTEoMTApID4gMjIwMjUuNDY1Nzk0ODA2NzE5IHx8ICRleHBtMSgxMCkgPCAyMjAyNS40NjU3OTQ4MDY3MTY1MTY4XG4gIC8vIFRvciBCcm93c2VyIGJ1Z1xuICB8fCAkZXhwbTEoLTJlLTE3KSAhPSAtMmUtMTdcbikgPyBmdW5jdGlvbiBleHBtMSh4KSB7XG4gIHJldHVybiAoeCA9ICt4KSA9PSAwID8geCA6IHggPiAtMWUtNiAmJiB4IDwgMWUtNiA/IHggKyB4ICogeCAvIDIgOiBNYXRoLmV4cCh4KSAtIDE7XG59IDogJGV4cG0xO1xuIiwidmFyIHRvSW50ZWdlciA9IHJlcXVpcmUoJy4vX3RvLWludGVnZXInKTtcbnZhciBkZWZpbmVkID0gcmVxdWlyZSgnLi9fZGVmaW5lZCcpO1xuLy8gdHJ1ZSAgLT4gU3RyaW5nI2F0XG4vLyBmYWxzZSAtPiBTdHJpbmcjY29kZVBvaW50QXRcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKFRPX1NUUklORykge1xuICByZXR1cm4gZnVuY3Rpb24gKHRoYXQsIHBvcykge1xuICAgIHZhciBzID0gU3RyaW5nKGRlZmluZWQodGhhdCkpO1xuICAgIHZhciBpID0gdG9JbnRlZ2VyKHBvcyk7XG4gICAgdmFyIGwgPSBzLmxlbmd0aDtcbiAgICB2YXIgYSwgYjtcbiAgICBpZiAoaSA8IDAgfHwgaSA+PSBsKSByZXR1cm4gVE9fU1RSSU5HID8gJycgOiB1bmRlZmluZWQ7XG4gICAgYSA9IHMuY2hhckNvZGVBdChpKTtcbiAgICByZXR1cm4gYSA8IDB4ZDgwMCB8fCBhID4gMHhkYmZmIHx8IGkgKyAxID09PSBsIHx8IChiID0gcy5jaGFyQ29kZUF0KGkgKyAxKSkgPCAweGRjMDAgfHwgYiA+IDB4ZGZmZlxuICAgICAgPyBUT19TVFJJTkcgPyBzLmNoYXJBdChpKSA6IGFcbiAgICAgIDogVE9fU1RSSU5HID8gcy5zbGljZShpLCBpICsgMikgOiAoYSAtIDB4ZDgwMCA8PCAxMCkgKyAoYiAtIDB4ZGMwMCkgKyAweDEwMDAwO1xuICB9O1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBMSUJSQVJZID0gcmVxdWlyZSgnLi9fbGlicmFyeScpO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciByZWRlZmluZSA9IHJlcXVpcmUoJy4vX3JlZGVmaW5lJyk7XG52YXIgaGlkZSA9IHJlcXVpcmUoJy4vX2hpZGUnKTtcbnZhciBJdGVyYXRvcnMgPSByZXF1aXJlKCcuL19pdGVyYXRvcnMnKTtcbnZhciAkaXRlckNyZWF0ZSA9IHJlcXVpcmUoJy4vX2l0ZXItY3JlYXRlJyk7XG52YXIgc2V0VG9TdHJpbmdUYWcgPSByZXF1aXJlKCcuL19zZXQtdG8tc3RyaW5nLXRhZycpO1xudmFyIGdldFByb3RvdHlwZU9mID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdwbycpO1xudmFyIElURVJBVE9SID0gcmVxdWlyZSgnLi9fd2tzJykoJ2l0ZXJhdG9yJyk7XG52YXIgQlVHR1kgPSAhKFtdLmtleXMgJiYgJ25leHQnIGluIFtdLmtleXMoKSk7IC8vIFNhZmFyaSBoYXMgYnVnZ3kgaXRlcmF0b3JzIHcvbyBgbmV4dGBcbnZhciBGRl9JVEVSQVRPUiA9ICdAQGl0ZXJhdG9yJztcbnZhciBLRVlTID0gJ2tleXMnO1xudmFyIFZBTFVFUyA9ICd2YWx1ZXMnO1xuXG52YXIgcmV0dXJuVGhpcyA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXM7IH07XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKEJhc2UsIE5BTUUsIENvbnN0cnVjdG9yLCBuZXh0LCBERUZBVUxULCBJU19TRVQsIEZPUkNFRCkge1xuICAkaXRlckNyZWF0ZShDb25zdHJ1Y3RvciwgTkFNRSwgbmV4dCk7XG4gIHZhciBnZXRNZXRob2QgPSBmdW5jdGlvbiAoa2luZCkge1xuICAgIGlmICghQlVHR1kgJiYga2luZCBpbiBwcm90bykgcmV0dXJuIHByb3RvW2tpbmRdO1xuICAgIHN3aXRjaCAoa2luZCkge1xuICAgICAgY2FzZSBLRVlTOiByZXR1cm4gZnVuY3Rpb24ga2V5cygpIHsgcmV0dXJuIG5ldyBDb25zdHJ1Y3Rvcih0aGlzLCBraW5kKTsgfTtcbiAgICAgIGNhc2UgVkFMVUVTOiByZXR1cm4gZnVuY3Rpb24gdmFsdWVzKCkgeyByZXR1cm4gbmV3IENvbnN0cnVjdG9yKHRoaXMsIGtpbmQpOyB9O1xuICAgIH0gcmV0dXJuIGZ1bmN0aW9uIGVudHJpZXMoKSB7IHJldHVybiBuZXcgQ29uc3RydWN0b3IodGhpcywga2luZCk7IH07XG4gIH07XG4gIHZhciBUQUcgPSBOQU1FICsgJyBJdGVyYXRvcic7XG4gIHZhciBERUZfVkFMVUVTID0gREVGQVVMVCA9PSBWQUxVRVM7XG4gIHZhciBWQUxVRVNfQlVHID0gZmFsc2U7XG4gIHZhciBwcm90byA9IEJhc2UucHJvdG90eXBlO1xuICB2YXIgJG5hdGl2ZSA9IHByb3RvW0lURVJBVE9SXSB8fCBwcm90b1tGRl9JVEVSQVRPUl0gfHwgREVGQVVMVCAmJiBwcm90b1tERUZBVUxUXTtcbiAgdmFyICRkZWZhdWx0ID0gJG5hdGl2ZSB8fCBnZXRNZXRob2QoREVGQVVMVCk7XG4gIHZhciAkZW50cmllcyA9IERFRkFVTFQgPyAhREVGX1ZBTFVFUyA/ICRkZWZhdWx0IDogZ2V0TWV0aG9kKCdlbnRyaWVzJykgOiB1bmRlZmluZWQ7XG4gIHZhciAkYW55TmF0aXZlID0gTkFNRSA9PSAnQXJyYXknID8gcHJvdG8uZW50cmllcyB8fCAkbmF0aXZlIDogJG5hdGl2ZTtcbiAgdmFyIG1ldGhvZHMsIGtleSwgSXRlcmF0b3JQcm90b3R5cGU7XG4gIC8vIEZpeCBuYXRpdmVcbiAgaWYgKCRhbnlOYXRpdmUpIHtcbiAgICBJdGVyYXRvclByb3RvdHlwZSA9IGdldFByb3RvdHlwZU9mKCRhbnlOYXRpdmUuY2FsbChuZXcgQmFzZSgpKSk7XG4gICAgaWYgKEl0ZXJhdG9yUHJvdG90eXBlICE9PSBPYmplY3QucHJvdG90eXBlICYmIEl0ZXJhdG9yUHJvdG90eXBlLm5leHQpIHtcbiAgICAgIC8vIFNldCBAQHRvU3RyaW5nVGFnIHRvIG5hdGl2ZSBpdGVyYXRvcnNcbiAgICAgIHNldFRvU3RyaW5nVGFnKEl0ZXJhdG9yUHJvdG90eXBlLCBUQUcsIHRydWUpO1xuICAgICAgLy8gZml4IGZvciBzb21lIG9sZCBlbmdpbmVzXG4gICAgICBpZiAoIUxJQlJBUlkgJiYgdHlwZW9mIEl0ZXJhdG9yUHJvdG90eXBlW0lURVJBVE9SXSAhPSAnZnVuY3Rpb24nKSBoaWRlKEl0ZXJhdG9yUHJvdG90eXBlLCBJVEVSQVRPUiwgcmV0dXJuVGhpcyk7XG4gICAgfVxuICB9XG4gIC8vIGZpeCBBcnJheSN7dmFsdWVzLCBAQGl0ZXJhdG9yfS5uYW1lIGluIFY4IC8gRkZcbiAgaWYgKERFRl9WQUxVRVMgJiYgJG5hdGl2ZSAmJiAkbmF0aXZlLm5hbWUgIT09IFZBTFVFUykge1xuICAgIFZBTFVFU19CVUcgPSB0cnVlO1xuICAgICRkZWZhdWx0ID0gZnVuY3Rpb24gdmFsdWVzKCkgeyByZXR1cm4gJG5hdGl2ZS5jYWxsKHRoaXMpOyB9O1xuICB9XG4gIC8vIERlZmluZSBpdGVyYXRvclxuICBpZiAoKCFMSUJSQVJZIHx8IEZPUkNFRCkgJiYgKEJVR0dZIHx8IFZBTFVFU19CVUcgfHwgIXByb3RvW0lURVJBVE9SXSkpIHtcbiAgICBoaWRlKHByb3RvLCBJVEVSQVRPUiwgJGRlZmF1bHQpO1xuICB9XG4gIC8vIFBsdWcgZm9yIGxpYnJhcnlcbiAgSXRlcmF0b3JzW05BTUVdID0gJGRlZmF1bHQ7XG4gIEl0ZXJhdG9yc1tUQUddID0gcmV0dXJuVGhpcztcbiAgaWYgKERFRkFVTFQpIHtcbiAgICBtZXRob2RzID0ge1xuICAgICAgdmFsdWVzOiBERUZfVkFMVUVTID8gJGRlZmF1bHQgOiBnZXRNZXRob2QoVkFMVUVTKSxcbiAgICAgIGtleXM6IElTX1NFVCA/ICRkZWZhdWx0IDogZ2V0TWV0aG9kKEtFWVMpLFxuICAgICAgZW50cmllczogJGVudHJpZXNcbiAgICB9O1xuICAgIGlmIChGT1JDRUQpIGZvciAoa2V5IGluIG1ldGhvZHMpIHtcbiAgICAgIGlmICghKGtleSBpbiBwcm90bykpIHJlZGVmaW5lKHByb3RvLCBrZXksIG1ldGhvZHNba2V5XSk7XG4gICAgfSBlbHNlICRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogKEJVR0dZIHx8IFZBTFVFU19CVUcpLCBOQU1FLCBtZXRob2RzKTtcbiAgfVxuICByZXR1cm4gbWV0aG9kcztcbn07XG4iLCIvLyBoZWxwZXIgZm9yIFN0cmluZyN7c3RhcnRzV2l0aCwgZW5kc1dpdGgsIGluY2x1ZGVzfVxudmFyIGlzUmVnRXhwID0gcmVxdWlyZSgnLi9faXMtcmVnZXhwJyk7XG52YXIgZGVmaW5lZCA9IHJlcXVpcmUoJy4vX2RlZmluZWQnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAodGhhdCwgc2VhcmNoU3RyaW5nLCBOQU1FKSB7XG4gIGlmIChpc1JlZ0V4cChzZWFyY2hTdHJpbmcpKSB0aHJvdyBUeXBlRXJyb3IoJ1N0cmluZyMnICsgTkFNRSArIFwiIGRvZXNuJ3QgYWNjZXB0IHJlZ2V4IVwiKTtcbiAgcmV0dXJuIFN0cmluZyhkZWZpbmVkKHRoYXQpKTtcbn07XG4iLCIvLyA3LjIuOCBJc1JlZ0V4cChhcmd1bWVudClcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xudmFyIGNvZiA9IHJlcXVpcmUoJy4vX2NvZicpO1xudmFyIE1BVENIID0gcmVxdWlyZSgnLi9fd2tzJykoJ21hdGNoJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICB2YXIgaXNSZWdFeHA7XG4gIHJldHVybiBpc09iamVjdChpdCkgJiYgKChpc1JlZ0V4cCA9IGl0W01BVENIXSkgIT09IHVuZGVmaW5lZCA/ICEhaXNSZWdFeHAgOiBjb2YoaXQpID09ICdSZWdFeHAnKTtcbn07XG4iLCJ2YXIgTUFUQ0ggPSByZXF1aXJlKCcuL193a3MnKSgnbWF0Y2gnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKEtFWSkge1xuICB2YXIgcmUgPSAvLi87XG4gIHRyeSB7XG4gICAgJy8uLydbS0VZXShyZSk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICB0cnkge1xuICAgICAgcmVbTUFUQ0hdID0gZmFsc2U7XG4gICAgICByZXR1cm4gIScvLi8nW0tFWV0ocmUpO1xuICAgIH0gY2F0Y2ggKGYpIHsgLyogZW1wdHkgKi8gfVxuICB9IHJldHVybiB0cnVlO1xufTtcbiIsIi8vIGNoZWNrIG9uIGRlZmF1bHQgQXJyYXkgaXRlcmF0b3JcbnZhciBJdGVyYXRvcnMgPSByZXF1aXJlKCcuL19pdGVyYXRvcnMnKTtcbnZhciBJVEVSQVRPUiA9IHJlcXVpcmUoJy4vX3drcycpKCdpdGVyYXRvcicpO1xudmFyIEFycmF5UHJvdG8gPSBBcnJheS5wcm90b3R5cGU7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBpdCAhPT0gdW5kZWZpbmVkICYmIChJdGVyYXRvcnMuQXJyYXkgPT09IGl0IHx8IEFycmF5UHJvdG9bSVRFUkFUT1JdID09PSBpdCk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICRkZWZpbmVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpO1xudmFyIGNyZWF0ZURlc2MgPSByZXF1aXJlKCcuL19wcm9wZXJ0eS1kZXNjJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKG9iamVjdCwgaW5kZXgsIHZhbHVlKSB7XG4gIGlmIChpbmRleCBpbiBvYmplY3QpICRkZWZpbmVQcm9wZXJ0eS5mKG9iamVjdCwgaW5kZXgsIGNyZWF0ZURlc2MoMCwgdmFsdWUpKTtcbiAgZWxzZSBvYmplY3RbaW5kZXhdID0gdmFsdWU7XG59O1xuIiwidmFyIGNsYXNzb2YgPSByZXF1aXJlKCcuL19jbGFzc29mJyk7XG52YXIgSVRFUkFUT1IgPSByZXF1aXJlKCcuL193a3MnKSgnaXRlcmF0b3InKTtcbnZhciBJdGVyYXRvcnMgPSByZXF1aXJlKCcuL19pdGVyYXRvcnMnKTtcbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9fY29yZScpLmdldEl0ZXJhdG9yTWV0aG9kID0gZnVuY3Rpb24gKGl0KSB7XG4gIGlmIChpdCAhPSB1bmRlZmluZWQpIHJldHVybiBpdFtJVEVSQVRPUl1cbiAgICB8fCBpdFsnQEBpdGVyYXRvciddXG4gICAgfHwgSXRlcmF0b3JzW2NsYXNzb2YoaXQpXTtcbn07XG4iLCIvLyAyMi4xLjMuNiBBcnJheS5wcm90b3R5cGUuZmlsbCh2YWx1ZSwgc3RhcnQgPSAwLCBlbmQgPSB0aGlzLmxlbmd0aClcbid1c2Ugc3RyaWN0JztcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4vX3RvLW9iamVjdCcpO1xudmFyIHRvQWJzb2x1dGVJbmRleCA9IHJlcXVpcmUoJy4vX3RvLWFic29sdXRlLWluZGV4Jyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuL190by1sZW5ndGgnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gZmlsbCh2YWx1ZSAvKiAsIHN0YXJ0ID0gMCwgZW5kID0gQGxlbmd0aCAqLykge1xuICB2YXIgTyA9IHRvT2JqZWN0KHRoaXMpO1xuICB2YXIgbGVuZ3RoID0gdG9MZW5ndGgoTy5sZW5ndGgpO1xuICB2YXIgYUxlbiA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gIHZhciBpbmRleCA9IHRvQWJzb2x1dGVJbmRleChhTGVuID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCwgbGVuZ3RoKTtcbiAgdmFyIGVuZCA9IGFMZW4gPiAyID8gYXJndW1lbnRzWzJdIDogdW5kZWZpbmVkO1xuICB2YXIgZW5kUG9zID0gZW5kID09PSB1bmRlZmluZWQgPyBsZW5ndGggOiB0b0Fic29sdXRlSW5kZXgoZW5kLCBsZW5ndGgpO1xuICB3aGlsZSAoZW5kUG9zID4gaW5kZXgpIE9baW5kZXgrK10gPSB2YWx1ZTtcbiAgcmV0dXJuIE87XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGFkZFRvVW5zY29wYWJsZXMgPSByZXF1aXJlKCcuL19hZGQtdG8tdW5zY29wYWJsZXMnKTtcbnZhciBzdGVwID0gcmVxdWlyZSgnLi9faXRlci1zdGVwJyk7XG52YXIgSXRlcmF0b3JzID0gcmVxdWlyZSgnLi9faXRlcmF0b3JzJyk7XG52YXIgdG9JT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8taW9iamVjdCcpO1xuXG4vLyAyMi4xLjMuNCBBcnJheS5wcm90b3R5cGUuZW50cmllcygpXG4vLyAyMi4xLjMuMTMgQXJyYXkucHJvdG90eXBlLmtleXMoKVxuLy8gMjIuMS4zLjI5IEFycmF5LnByb3RvdHlwZS52YWx1ZXMoKVxuLy8gMjIuMS4zLjMwIEFycmF5LnByb3RvdHlwZVtAQGl0ZXJhdG9yXSgpXG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vX2l0ZXItZGVmaW5lJykoQXJyYXksICdBcnJheScsIGZ1bmN0aW9uIChpdGVyYXRlZCwga2luZCkge1xuICB0aGlzLl90ID0gdG9JT2JqZWN0KGl0ZXJhdGVkKTsgLy8gdGFyZ2V0XG4gIHRoaXMuX2kgPSAwOyAgICAgICAgICAgICAgICAgICAvLyBuZXh0IGluZGV4XG4gIHRoaXMuX2sgPSBraW5kOyAgICAgICAgICAgICAgICAvLyBraW5kXG4vLyAyMi4xLjUuMi4xICVBcnJheUl0ZXJhdG9yUHJvdG90eXBlJS5uZXh0KClcbn0sIGZ1bmN0aW9uICgpIHtcbiAgdmFyIE8gPSB0aGlzLl90O1xuICB2YXIga2luZCA9IHRoaXMuX2s7XG4gIHZhciBpbmRleCA9IHRoaXMuX2krKztcbiAgaWYgKCFPIHx8IGluZGV4ID49IE8ubGVuZ3RoKSB7XG4gICAgdGhpcy5fdCA9IHVuZGVmaW5lZDtcbiAgICByZXR1cm4gc3RlcCgxKTtcbiAgfVxuICBpZiAoa2luZCA9PSAna2V5cycpIHJldHVybiBzdGVwKDAsIGluZGV4KTtcbiAgaWYgKGtpbmQgPT0gJ3ZhbHVlcycpIHJldHVybiBzdGVwKDAsIE9baW5kZXhdKTtcbiAgcmV0dXJuIHN0ZXAoMCwgW2luZGV4LCBPW2luZGV4XV0pO1xufSwgJ3ZhbHVlcycpO1xuXG4vLyBhcmd1bWVudHNMaXN0W0BAaXRlcmF0b3JdIGlzICVBcnJheVByb3RvX3ZhbHVlcyUgKDkuNC40LjYsIDkuNC40LjcpXG5JdGVyYXRvcnMuQXJndW1lbnRzID0gSXRlcmF0b3JzLkFycmF5O1xuXG5hZGRUb1Vuc2NvcGFibGVzKCdrZXlzJyk7XG5hZGRUb1Vuc2NvcGFibGVzKCd2YWx1ZXMnKTtcbmFkZFRvVW5zY29wYWJsZXMoJ2VudHJpZXMnKTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHJlZ2V4cEZsYWdzID0gcmVxdWlyZSgnLi9fZmxhZ3MnKTtcblxudmFyIG5hdGl2ZUV4ZWMgPSBSZWdFeHAucHJvdG90eXBlLmV4ZWM7XG4vLyBUaGlzIGFsd2F5cyByZWZlcnMgdG8gdGhlIG5hdGl2ZSBpbXBsZW1lbnRhdGlvbiwgYmVjYXVzZSB0aGVcbi8vIFN0cmluZyNyZXBsYWNlIHBvbHlmaWxsIHVzZXMgLi9maXgtcmVnZXhwLXdlbGwta25vd24tc3ltYm9sLWxvZ2ljLmpzLFxuLy8gd2hpY2ggbG9hZHMgdGhpcyBmaWxlIGJlZm9yZSBwYXRjaGluZyB0aGUgbWV0aG9kLlxudmFyIG5hdGl2ZVJlcGxhY2UgPSBTdHJpbmcucHJvdG90eXBlLnJlcGxhY2U7XG5cbnZhciBwYXRjaGVkRXhlYyA9IG5hdGl2ZUV4ZWM7XG5cbnZhciBMQVNUX0lOREVYID0gJ2xhc3RJbmRleCc7XG5cbnZhciBVUERBVEVTX0xBU1RfSU5ERVhfV1JPTkcgPSAoZnVuY3Rpb24gKCkge1xuICB2YXIgcmUxID0gL2EvLFxuICAgICAgcmUyID0gL2IqL2c7XG4gIG5hdGl2ZUV4ZWMuY2FsbChyZTEsICdhJyk7XG4gIG5hdGl2ZUV4ZWMuY2FsbChyZTIsICdhJyk7XG4gIHJldHVybiByZTFbTEFTVF9JTkRFWF0gIT09IDAgfHwgcmUyW0xBU1RfSU5ERVhdICE9PSAwO1xufSkoKTtcblxuLy8gbm9ucGFydGljaXBhdGluZyBjYXB0dXJpbmcgZ3JvdXAsIGNvcGllZCBmcm9tIGVzNS1zaGltJ3MgU3RyaW5nI3NwbGl0IHBhdGNoLlxudmFyIE5QQ0dfSU5DTFVERUQgPSAvKCk/Py8uZXhlYygnJylbMV0gIT09IHVuZGVmaW5lZDtcblxudmFyIFBBVENIID0gVVBEQVRFU19MQVNUX0lOREVYX1dST05HIHx8IE5QQ0dfSU5DTFVERUQ7XG5cbmlmIChQQVRDSCkge1xuICBwYXRjaGVkRXhlYyA9IGZ1bmN0aW9uIGV4ZWMoc3RyKSB7XG4gICAgdmFyIHJlID0gdGhpcztcbiAgICB2YXIgbGFzdEluZGV4LCByZUNvcHksIG1hdGNoLCBpO1xuXG4gICAgaWYgKE5QQ0dfSU5DTFVERUQpIHtcbiAgICAgIHJlQ29weSA9IG5ldyBSZWdFeHAoJ14nICsgcmUuc291cmNlICsgJyQoPyFcXFxccyknLCByZWdleHBGbGFncy5jYWxsKHJlKSk7XG4gICAgfVxuICAgIGlmIChVUERBVEVTX0xBU1RfSU5ERVhfV1JPTkcpIGxhc3RJbmRleCA9IHJlW0xBU1RfSU5ERVhdO1xuXG4gICAgbWF0Y2ggPSBuYXRpdmVFeGVjLmNhbGwocmUsIHN0cik7XG5cbiAgICBpZiAoVVBEQVRFU19MQVNUX0lOREVYX1dST05HICYmIG1hdGNoKSB7XG4gICAgICByZVtMQVNUX0lOREVYXSA9IHJlLmdsb2JhbCA/IG1hdGNoLmluZGV4ICsgbWF0Y2hbMF0ubGVuZ3RoIDogbGFzdEluZGV4O1xuICAgIH1cbiAgICBpZiAoTlBDR19JTkNMVURFRCAmJiBtYXRjaCAmJiBtYXRjaC5sZW5ndGggPiAxKSB7XG4gICAgICAvLyBGaXggYnJvd3NlcnMgd2hvc2UgYGV4ZWNgIG1ldGhvZHMgZG9uJ3QgY29uc2lzdGVudGx5IHJldHVybiBgdW5kZWZpbmVkYFxuICAgICAgLy8gZm9yIE5QQ0csIGxpa2UgSUU4LiBOT1RFOiBUaGlzIGRvZXNuJyB3b3JrIGZvciAvKC4/KT8vXG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tbG9vcC1mdW5jXG4gICAgICBuYXRpdmVSZXBsYWNlLmNhbGwobWF0Y2hbMF0sIHJlQ29weSwgZnVuY3Rpb24gKCkge1xuICAgICAgICBmb3IgKGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aCAtIDI7IGkrKykge1xuICAgICAgICAgIGlmIChhcmd1bWVudHNbaV0gPT09IHVuZGVmaW5lZCkgbWF0Y2hbaV0gPSB1bmRlZmluZWQ7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHJldHVybiBtYXRjaDtcbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBwYXRjaGVkRXhlYztcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBhdCA9IHJlcXVpcmUoJy4vX3N0cmluZy1hdCcpKHRydWUpO1xuXG4gLy8gYEFkdmFuY2VTdHJpbmdJbmRleGAgYWJzdHJhY3Qgb3BlcmF0aW9uXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1hZHZhbmNlc3RyaW5naW5kZXhcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKFMsIGluZGV4LCB1bmljb2RlKSB7XG4gIHJldHVybiBpbmRleCArICh1bmljb2RlID8gYXQoUywgaW5kZXgpLmxlbmd0aCA6IDEpO1xufTtcbiIsInZhciBjdHggPSByZXF1aXJlKCcuL19jdHgnKTtcbnZhciBpbnZva2UgPSByZXF1aXJlKCcuL19pbnZva2UnKTtcbnZhciBodG1sID0gcmVxdWlyZSgnLi9faHRtbCcpO1xudmFyIGNlbCA9IHJlcXVpcmUoJy4vX2RvbS1jcmVhdGUnKTtcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuL19nbG9iYWwnKTtcbnZhciBwcm9jZXNzID0gZ2xvYmFsLnByb2Nlc3M7XG52YXIgc2V0VGFzayA9IGdsb2JhbC5zZXRJbW1lZGlhdGU7XG52YXIgY2xlYXJUYXNrID0gZ2xvYmFsLmNsZWFySW1tZWRpYXRlO1xudmFyIE1lc3NhZ2VDaGFubmVsID0gZ2xvYmFsLk1lc3NhZ2VDaGFubmVsO1xudmFyIERpc3BhdGNoID0gZ2xvYmFsLkRpc3BhdGNoO1xudmFyIGNvdW50ZXIgPSAwO1xudmFyIHF1ZXVlID0ge307XG52YXIgT05SRUFEWVNUQVRFQ0hBTkdFID0gJ29ucmVhZHlzdGF0ZWNoYW5nZSc7XG52YXIgZGVmZXIsIGNoYW5uZWwsIHBvcnQ7XG52YXIgcnVuID0gZnVuY3Rpb24gKCkge1xuICB2YXIgaWQgPSArdGhpcztcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXByb3RvdHlwZS1idWlsdGluc1xuICBpZiAocXVldWUuaGFzT3duUHJvcGVydHkoaWQpKSB7XG4gICAgdmFyIGZuID0gcXVldWVbaWRdO1xuICAgIGRlbGV0ZSBxdWV1ZVtpZF07XG4gICAgZm4oKTtcbiAgfVxufTtcbnZhciBsaXN0ZW5lciA9IGZ1bmN0aW9uIChldmVudCkge1xuICBydW4uY2FsbChldmVudC5kYXRhKTtcbn07XG4vLyBOb2RlLmpzIDAuOSsgJiBJRTEwKyBoYXMgc2V0SW1tZWRpYXRlLCBvdGhlcndpc2U6XG5pZiAoIXNldFRhc2sgfHwgIWNsZWFyVGFzaykge1xuICBzZXRUYXNrID0gZnVuY3Rpb24gc2V0SW1tZWRpYXRlKGZuKSB7XG4gICAgdmFyIGFyZ3MgPSBbXTtcbiAgICB2YXIgaSA9IDE7XG4gICAgd2hpbGUgKGFyZ3VtZW50cy5sZW5ndGggPiBpKSBhcmdzLnB1c2goYXJndW1lbnRzW2krK10pO1xuICAgIHF1ZXVlWysrY291bnRlcl0gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tbmV3LWZ1bmNcbiAgICAgIGludm9rZSh0eXBlb2YgZm4gPT0gJ2Z1bmN0aW9uJyA/IGZuIDogRnVuY3Rpb24oZm4pLCBhcmdzKTtcbiAgICB9O1xuICAgIGRlZmVyKGNvdW50ZXIpO1xuICAgIHJldHVybiBjb3VudGVyO1xuICB9O1xuICBjbGVhclRhc2sgPSBmdW5jdGlvbiBjbGVhckltbWVkaWF0ZShpZCkge1xuICAgIGRlbGV0ZSBxdWV1ZVtpZF07XG4gIH07XG4gIC8vIE5vZGUuanMgMC44LVxuICBpZiAocmVxdWlyZSgnLi9fY29mJykocHJvY2VzcykgPT0gJ3Byb2Nlc3MnKSB7XG4gICAgZGVmZXIgPSBmdW5jdGlvbiAoaWQpIHtcbiAgICAgIHByb2Nlc3MubmV4dFRpY2soY3R4KHJ1biwgaWQsIDEpKTtcbiAgICB9O1xuICAvLyBTcGhlcmUgKEpTIGdhbWUgZW5naW5lKSBEaXNwYXRjaCBBUElcbiAgfSBlbHNlIGlmIChEaXNwYXRjaCAmJiBEaXNwYXRjaC5ub3cpIHtcbiAgICBkZWZlciA9IGZ1bmN0aW9uIChpZCkge1xuICAgICAgRGlzcGF0Y2gubm93KGN0eChydW4sIGlkLCAxKSk7XG4gICAgfTtcbiAgLy8gQnJvd3NlcnMgd2l0aCBNZXNzYWdlQ2hhbm5lbCwgaW5jbHVkZXMgV2ViV29ya2Vyc1xuICB9IGVsc2UgaWYgKE1lc3NhZ2VDaGFubmVsKSB7XG4gICAgY2hhbm5lbCA9IG5ldyBNZXNzYWdlQ2hhbm5lbCgpO1xuICAgIHBvcnQgPSBjaGFubmVsLnBvcnQyO1xuICAgIGNoYW5uZWwucG9ydDEub25tZXNzYWdlID0gbGlzdGVuZXI7XG4gICAgZGVmZXIgPSBjdHgocG9ydC5wb3N0TWVzc2FnZSwgcG9ydCwgMSk7XG4gIC8vIEJyb3dzZXJzIHdpdGggcG9zdE1lc3NhZ2UsIHNraXAgV2ViV29ya2Vyc1xuICAvLyBJRTggaGFzIHBvc3RNZXNzYWdlLCBidXQgaXQncyBzeW5jICYgdHlwZW9mIGl0cyBwb3N0TWVzc2FnZSBpcyAnb2JqZWN0J1xuICB9IGVsc2UgaWYgKGdsb2JhbC5hZGRFdmVudExpc3RlbmVyICYmIHR5cGVvZiBwb3N0TWVzc2FnZSA9PSAnZnVuY3Rpb24nICYmICFnbG9iYWwuaW1wb3J0U2NyaXB0cykge1xuICAgIGRlZmVyID0gZnVuY3Rpb24gKGlkKSB7XG4gICAgICBnbG9iYWwucG9zdE1lc3NhZ2UoaWQgKyAnJywgJyonKTtcbiAgICB9O1xuICAgIGdsb2JhbC5hZGRFdmVudExpc3RlbmVyKCdtZXNzYWdlJywgbGlzdGVuZXIsIGZhbHNlKTtcbiAgLy8gSUU4LVxuICB9IGVsc2UgaWYgKE9OUkVBRFlTVEFURUNIQU5HRSBpbiBjZWwoJ3NjcmlwdCcpKSB7XG4gICAgZGVmZXIgPSBmdW5jdGlvbiAoaWQpIHtcbiAgICAgIGh0bWwuYXBwZW5kQ2hpbGQoY2VsKCdzY3JpcHQnKSlbT05SRUFEWVNUQVRFQ0hBTkdFXSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaHRtbC5yZW1vdmVDaGlsZCh0aGlzKTtcbiAgICAgICAgcnVuLmNhbGwoaWQpO1xuICAgICAgfTtcbiAgICB9O1xuICAvLyBSZXN0IG9sZCBicm93c2Vyc1xuICB9IGVsc2Uge1xuICAgIGRlZmVyID0gZnVuY3Rpb24gKGlkKSB7XG4gICAgICBzZXRUaW1lb3V0KGN0eChydW4sIGlkLCAxKSwgMCk7XG4gICAgfTtcbiAgfVxufVxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIHNldDogc2V0VGFzayxcbiAgY2xlYXI6IGNsZWFyVGFza1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuL19nbG9iYWwnKTtcbnZhciBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJyk7XG52YXIgTElCUkFSWSA9IHJlcXVpcmUoJy4vX2xpYnJhcnknKTtcbnZhciAkdHlwZWQgPSByZXF1aXJlKCcuL190eXBlZCcpO1xudmFyIGhpZGUgPSByZXF1aXJlKCcuL19oaWRlJyk7XG52YXIgcmVkZWZpbmVBbGwgPSByZXF1aXJlKCcuL19yZWRlZmluZS1hbGwnKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4vX2ZhaWxzJyk7XG52YXIgYW5JbnN0YW5jZSA9IHJlcXVpcmUoJy4vX2FuLWluc3RhbmNlJyk7XG52YXIgdG9JbnRlZ2VyID0gcmVxdWlyZSgnLi9fdG8taW50ZWdlcicpO1xudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi9fdG8tbGVuZ3RoJyk7XG52YXIgdG9JbmRleCA9IHJlcXVpcmUoJy4vX3RvLWluZGV4Jyk7XG52YXIgZ09QTiA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BuJykuZjtcbnZhciBkUCA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpLmY7XG52YXIgYXJyYXlGaWxsID0gcmVxdWlyZSgnLi9fYXJyYXktZmlsbCcpO1xudmFyIHNldFRvU3RyaW5nVGFnID0gcmVxdWlyZSgnLi9fc2V0LXRvLXN0cmluZy10YWcnKTtcbnZhciBBUlJBWV9CVUZGRVIgPSAnQXJyYXlCdWZmZXInO1xudmFyIERBVEFfVklFVyA9ICdEYXRhVmlldyc7XG52YXIgUFJPVE9UWVBFID0gJ3Byb3RvdHlwZSc7XG52YXIgV1JPTkdfTEVOR1RIID0gJ1dyb25nIGxlbmd0aCEnO1xudmFyIFdST05HX0lOREVYID0gJ1dyb25nIGluZGV4ISc7XG52YXIgJEFycmF5QnVmZmVyID0gZ2xvYmFsW0FSUkFZX0JVRkZFUl07XG52YXIgJERhdGFWaWV3ID0gZ2xvYmFsW0RBVEFfVklFV107XG52YXIgTWF0aCA9IGdsb2JhbC5NYXRoO1xudmFyIFJhbmdlRXJyb3IgPSBnbG9iYWwuUmFuZ2VFcnJvcjtcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zaGFkb3ctcmVzdHJpY3RlZC1uYW1lc1xudmFyIEluZmluaXR5ID0gZ2xvYmFsLkluZmluaXR5O1xudmFyIEJhc2VCdWZmZXIgPSAkQXJyYXlCdWZmZXI7XG52YXIgYWJzID0gTWF0aC5hYnM7XG52YXIgcG93ID0gTWF0aC5wb3c7XG52YXIgZmxvb3IgPSBNYXRoLmZsb29yO1xudmFyIGxvZyA9IE1hdGgubG9nO1xudmFyIExOMiA9IE1hdGguTE4yO1xudmFyIEJVRkZFUiA9ICdidWZmZXInO1xudmFyIEJZVEVfTEVOR1RIID0gJ2J5dGVMZW5ndGgnO1xudmFyIEJZVEVfT0ZGU0VUID0gJ2J5dGVPZmZzZXQnO1xudmFyICRCVUZGRVIgPSBERVNDUklQVE9SUyA/ICdfYicgOiBCVUZGRVI7XG52YXIgJExFTkdUSCA9IERFU0NSSVBUT1JTID8gJ19sJyA6IEJZVEVfTEVOR1RIO1xudmFyICRPRkZTRVQgPSBERVNDUklQVE9SUyA/ICdfbycgOiBCWVRFX09GRlNFVDtcblxuLy8gSUVFRTc1NCBjb252ZXJzaW9ucyBiYXNlZCBvbiBodHRwczovL2dpdGh1Yi5jb20vZmVyb3NzL2llZWU3NTRcbmZ1bmN0aW9uIHBhY2tJRUVFNzU0KHZhbHVlLCBtTGVuLCBuQnl0ZXMpIHtcbiAgdmFyIGJ1ZmZlciA9IG5ldyBBcnJheShuQnl0ZXMpO1xuICB2YXIgZUxlbiA9IG5CeXRlcyAqIDggLSBtTGVuIC0gMTtcbiAgdmFyIGVNYXggPSAoMSA8PCBlTGVuKSAtIDE7XG4gIHZhciBlQmlhcyA9IGVNYXggPj4gMTtcbiAgdmFyIHJ0ID0gbUxlbiA9PT0gMjMgPyBwb3coMiwgLTI0KSAtIHBvdygyLCAtNzcpIDogMDtcbiAgdmFyIGkgPSAwO1xuICB2YXIgcyA9IHZhbHVlIDwgMCB8fCB2YWx1ZSA9PT0gMCAmJiAxIC8gdmFsdWUgPCAwID8gMSA6IDA7XG4gIHZhciBlLCBtLCBjO1xuICB2YWx1ZSA9IGFicyh2YWx1ZSk7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zZWxmLWNvbXBhcmVcbiAgaWYgKHZhbHVlICE9IHZhbHVlIHx8IHZhbHVlID09PSBJbmZpbml0eSkge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zZWxmLWNvbXBhcmVcbiAgICBtID0gdmFsdWUgIT0gdmFsdWUgPyAxIDogMDtcbiAgICBlID0gZU1heDtcbiAgfSBlbHNlIHtcbiAgICBlID0gZmxvb3IobG9nKHZhbHVlKSAvIExOMik7XG4gICAgaWYgKHZhbHVlICogKGMgPSBwb3coMiwgLWUpKSA8IDEpIHtcbiAgICAgIGUtLTtcbiAgICAgIGMgKj0gMjtcbiAgICB9XG4gICAgaWYgKGUgKyBlQmlhcyA+PSAxKSB7XG4gICAgICB2YWx1ZSArPSBydCAvIGM7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhbHVlICs9IHJ0ICogcG93KDIsIDEgLSBlQmlhcyk7XG4gICAgfVxuICAgIGlmICh2YWx1ZSAqIGMgPj0gMikge1xuICAgICAgZSsrO1xuICAgICAgYyAvPSAyO1xuICAgIH1cbiAgICBpZiAoZSArIGVCaWFzID49IGVNYXgpIHtcbiAgICAgIG0gPSAwO1xuICAgICAgZSA9IGVNYXg7XG4gICAgfSBlbHNlIGlmIChlICsgZUJpYXMgPj0gMSkge1xuICAgICAgbSA9ICh2YWx1ZSAqIGMgLSAxKSAqIHBvdygyLCBtTGVuKTtcbiAgICAgIGUgPSBlICsgZUJpYXM7XG4gICAgfSBlbHNlIHtcbiAgICAgIG0gPSB2YWx1ZSAqIHBvdygyLCBlQmlhcyAtIDEpICogcG93KDIsIG1MZW4pO1xuICAgICAgZSA9IDA7XG4gICAgfVxuICB9XG4gIGZvciAoOyBtTGVuID49IDg7IGJ1ZmZlcltpKytdID0gbSAmIDI1NSwgbSAvPSAyNTYsIG1MZW4gLT0gOCk7XG4gIGUgPSBlIDw8IG1MZW4gfCBtO1xuICBlTGVuICs9IG1MZW47XG4gIGZvciAoOyBlTGVuID4gMDsgYnVmZmVyW2krK10gPSBlICYgMjU1LCBlIC89IDI1NiwgZUxlbiAtPSA4KTtcbiAgYnVmZmVyWy0taV0gfD0gcyAqIDEyODtcbiAgcmV0dXJuIGJ1ZmZlcjtcbn1cbmZ1bmN0aW9uIHVucGFja0lFRUU3NTQoYnVmZmVyLCBtTGVuLCBuQnl0ZXMpIHtcbiAgdmFyIGVMZW4gPSBuQnl0ZXMgKiA4IC0gbUxlbiAtIDE7XG4gIHZhciBlTWF4ID0gKDEgPDwgZUxlbikgLSAxO1xuICB2YXIgZUJpYXMgPSBlTWF4ID4+IDE7XG4gIHZhciBuQml0cyA9IGVMZW4gLSA3O1xuICB2YXIgaSA9IG5CeXRlcyAtIDE7XG4gIHZhciBzID0gYnVmZmVyW2ktLV07XG4gIHZhciBlID0gcyAmIDEyNztcbiAgdmFyIG07XG4gIHMgPj49IDc7XG4gIGZvciAoOyBuQml0cyA+IDA7IGUgPSBlICogMjU2ICsgYnVmZmVyW2ldLCBpLS0sIG5CaXRzIC09IDgpO1xuICBtID0gZSAmICgxIDw8IC1uQml0cykgLSAxO1xuICBlID4+PSAtbkJpdHM7XG4gIG5CaXRzICs9IG1MZW47XG4gIGZvciAoOyBuQml0cyA+IDA7IG0gPSBtICogMjU2ICsgYnVmZmVyW2ldLCBpLS0sIG5CaXRzIC09IDgpO1xuICBpZiAoZSA9PT0gMCkge1xuICAgIGUgPSAxIC0gZUJpYXM7XG4gIH0gZWxzZSBpZiAoZSA9PT0gZU1heCkge1xuICAgIHJldHVybiBtID8gTmFOIDogcyA/IC1JbmZpbml0eSA6IEluZmluaXR5O1xuICB9IGVsc2Uge1xuICAgIG0gPSBtICsgcG93KDIsIG1MZW4pO1xuICAgIGUgPSBlIC0gZUJpYXM7XG4gIH0gcmV0dXJuIChzID8gLTEgOiAxKSAqIG0gKiBwb3coMiwgZSAtIG1MZW4pO1xufVxuXG5mdW5jdGlvbiB1bnBhY2tJMzIoYnl0ZXMpIHtcbiAgcmV0dXJuIGJ5dGVzWzNdIDw8IDI0IHwgYnl0ZXNbMl0gPDwgMTYgfCBieXRlc1sxXSA8PCA4IHwgYnl0ZXNbMF07XG59XG5mdW5jdGlvbiBwYWNrSTgoaXQpIHtcbiAgcmV0dXJuIFtpdCAmIDB4ZmZdO1xufVxuZnVuY3Rpb24gcGFja0kxNihpdCkge1xuICByZXR1cm4gW2l0ICYgMHhmZiwgaXQgPj4gOCAmIDB4ZmZdO1xufVxuZnVuY3Rpb24gcGFja0kzMihpdCkge1xuICByZXR1cm4gW2l0ICYgMHhmZiwgaXQgPj4gOCAmIDB4ZmYsIGl0ID4+IDE2ICYgMHhmZiwgaXQgPj4gMjQgJiAweGZmXTtcbn1cbmZ1bmN0aW9uIHBhY2tGNjQoaXQpIHtcbiAgcmV0dXJuIHBhY2tJRUVFNzU0KGl0LCA1MiwgOCk7XG59XG5mdW5jdGlvbiBwYWNrRjMyKGl0KSB7XG4gIHJldHVybiBwYWNrSUVFRTc1NChpdCwgMjMsIDQpO1xufVxuXG5mdW5jdGlvbiBhZGRHZXR0ZXIoQywga2V5LCBpbnRlcm5hbCkge1xuICBkUChDW1BST1RPVFlQRV0sIGtleSwgeyBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXNbaW50ZXJuYWxdOyB9IH0pO1xufVxuXG5mdW5jdGlvbiBnZXQodmlldywgYnl0ZXMsIGluZGV4LCBpc0xpdHRsZUVuZGlhbikge1xuICB2YXIgbnVtSW5kZXggPSAraW5kZXg7XG4gIHZhciBpbnRJbmRleCA9IHRvSW5kZXgobnVtSW5kZXgpO1xuICBpZiAoaW50SW5kZXggKyBieXRlcyA+IHZpZXdbJExFTkdUSF0pIHRocm93IFJhbmdlRXJyb3IoV1JPTkdfSU5ERVgpO1xuICB2YXIgc3RvcmUgPSB2aWV3WyRCVUZGRVJdLl9iO1xuICB2YXIgc3RhcnQgPSBpbnRJbmRleCArIHZpZXdbJE9GRlNFVF07XG4gIHZhciBwYWNrID0gc3RvcmUuc2xpY2Uoc3RhcnQsIHN0YXJ0ICsgYnl0ZXMpO1xuICByZXR1cm4gaXNMaXR0bGVFbmRpYW4gPyBwYWNrIDogcGFjay5yZXZlcnNlKCk7XG59XG5mdW5jdGlvbiBzZXQodmlldywgYnl0ZXMsIGluZGV4LCBjb252ZXJzaW9uLCB2YWx1ZSwgaXNMaXR0bGVFbmRpYW4pIHtcbiAgdmFyIG51bUluZGV4ID0gK2luZGV4O1xuICB2YXIgaW50SW5kZXggPSB0b0luZGV4KG51bUluZGV4KTtcbiAgaWYgKGludEluZGV4ICsgYnl0ZXMgPiB2aWV3WyRMRU5HVEhdKSB0aHJvdyBSYW5nZUVycm9yKFdST05HX0lOREVYKTtcbiAgdmFyIHN0b3JlID0gdmlld1skQlVGRkVSXS5fYjtcbiAgdmFyIHN0YXJ0ID0gaW50SW5kZXggKyB2aWV3WyRPRkZTRVRdO1xuICB2YXIgcGFjayA9IGNvbnZlcnNpb24oK3ZhbHVlKTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBieXRlczsgaSsrKSBzdG9yZVtzdGFydCArIGldID0gcGFja1tpc0xpdHRsZUVuZGlhbiA/IGkgOiBieXRlcyAtIGkgLSAxXTtcbn1cblxuaWYgKCEkdHlwZWQuQUJWKSB7XG4gICRBcnJheUJ1ZmZlciA9IGZ1bmN0aW9uIEFycmF5QnVmZmVyKGxlbmd0aCkge1xuICAgIGFuSW5zdGFuY2UodGhpcywgJEFycmF5QnVmZmVyLCBBUlJBWV9CVUZGRVIpO1xuICAgIHZhciBieXRlTGVuZ3RoID0gdG9JbmRleChsZW5ndGgpO1xuICAgIHRoaXMuX2IgPSBhcnJheUZpbGwuY2FsbChuZXcgQXJyYXkoYnl0ZUxlbmd0aCksIDApO1xuICAgIHRoaXNbJExFTkdUSF0gPSBieXRlTGVuZ3RoO1xuICB9O1xuXG4gICREYXRhVmlldyA9IGZ1bmN0aW9uIERhdGFWaWV3KGJ1ZmZlciwgYnl0ZU9mZnNldCwgYnl0ZUxlbmd0aCkge1xuICAgIGFuSW5zdGFuY2UodGhpcywgJERhdGFWaWV3LCBEQVRBX1ZJRVcpO1xuICAgIGFuSW5zdGFuY2UoYnVmZmVyLCAkQXJyYXlCdWZmZXIsIERBVEFfVklFVyk7XG4gICAgdmFyIGJ1ZmZlckxlbmd0aCA9IGJ1ZmZlclskTEVOR1RIXTtcbiAgICB2YXIgb2Zmc2V0ID0gdG9JbnRlZ2VyKGJ5dGVPZmZzZXQpO1xuICAgIGlmIChvZmZzZXQgPCAwIHx8IG9mZnNldCA+IGJ1ZmZlckxlbmd0aCkgdGhyb3cgUmFuZ2VFcnJvcignV3Jvbmcgb2Zmc2V0IScpO1xuICAgIGJ5dGVMZW5ndGggPSBieXRlTGVuZ3RoID09PSB1bmRlZmluZWQgPyBidWZmZXJMZW5ndGggLSBvZmZzZXQgOiB0b0xlbmd0aChieXRlTGVuZ3RoKTtcbiAgICBpZiAob2Zmc2V0ICsgYnl0ZUxlbmd0aCA+IGJ1ZmZlckxlbmd0aCkgdGhyb3cgUmFuZ2VFcnJvcihXUk9OR19MRU5HVEgpO1xuICAgIHRoaXNbJEJVRkZFUl0gPSBidWZmZXI7XG4gICAgdGhpc1skT0ZGU0VUXSA9IG9mZnNldDtcbiAgICB0aGlzWyRMRU5HVEhdID0gYnl0ZUxlbmd0aDtcbiAgfTtcblxuICBpZiAoREVTQ1JJUFRPUlMpIHtcbiAgICBhZGRHZXR0ZXIoJEFycmF5QnVmZmVyLCBCWVRFX0xFTkdUSCwgJ19sJyk7XG4gICAgYWRkR2V0dGVyKCREYXRhVmlldywgQlVGRkVSLCAnX2InKTtcbiAgICBhZGRHZXR0ZXIoJERhdGFWaWV3LCBCWVRFX0xFTkdUSCwgJ19sJyk7XG4gICAgYWRkR2V0dGVyKCREYXRhVmlldywgQllURV9PRkZTRVQsICdfbycpO1xuICB9XG5cbiAgcmVkZWZpbmVBbGwoJERhdGFWaWV3W1BST1RPVFlQRV0sIHtcbiAgICBnZXRJbnQ4OiBmdW5jdGlvbiBnZXRJbnQ4KGJ5dGVPZmZzZXQpIHtcbiAgICAgIHJldHVybiBnZXQodGhpcywgMSwgYnl0ZU9mZnNldClbMF0gPDwgMjQgPj4gMjQ7XG4gICAgfSxcbiAgICBnZXRVaW50ODogZnVuY3Rpb24gZ2V0VWludDgoYnl0ZU9mZnNldCkge1xuICAgICAgcmV0dXJuIGdldCh0aGlzLCAxLCBieXRlT2Zmc2V0KVswXTtcbiAgICB9LFxuICAgIGdldEludDE2OiBmdW5jdGlvbiBnZXRJbnQxNihieXRlT2Zmc2V0IC8qICwgbGl0dGxlRW5kaWFuICovKSB7XG4gICAgICB2YXIgYnl0ZXMgPSBnZXQodGhpcywgMiwgYnl0ZU9mZnNldCwgYXJndW1lbnRzWzFdKTtcbiAgICAgIHJldHVybiAoYnl0ZXNbMV0gPDwgOCB8IGJ5dGVzWzBdKSA8PCAxNiA+PiAxNjtcbiAgICB9LFxuICAgIGdldFVpbnQxNjogZnVuY3Rpb24gZ2V0VWludDE2KGJ5dGVPZmZzZXQgLyogLCBsaXR0bGVFbmRpYW4gKi8pIHtcbiAgICAgIHZhciBieXRlcyA9IGdldCh0aGlzLCAyLCBieXRlT2Zmc2V0LCBhcmd1bWVudHNbMV0pO1xuICAgICAgcmV0dXJuIGJ5dGVzWzFdIDw8IDggfCBieXRlc1swXTtcbiAgICB9LFxuICAgIGdldEludDMyOiBmdW5jdGlvbiBnZXRJbnQzMihieXRlT2Zmc2V0IC8qICwgbGl0dGxlRW5kaWFuICovKSB7XG4gICAgICByZXR1cm4gdW5wYWNrSTMyKGdldCh0aGlzLCA0LCBieXRlT2Zmc2V0LCBhcmd1bWVudHNbMV0pKTtcbiAgICB9LFxuICAgIGdldFVpbnQzMjogZnVuY3Rpb24gZ2V0VWludDMyKGJ5dGVPZmZzZXQgLyogLCBsaXR0bGVFbmRpYW4gKi8pIHtcbiAgICAgIHJldHVybiB1bnBhY2tJMzIoZ2V0KHRoaXMsIDQsIGJ5dGVPZmZzZXQsIGFyZ3VtZW50c1sxXSkpID4+PiAwO1xuICAgIH0sXG4gICAgZ2V0RmxvYXQzMjogZnVuY3Rpb24gZ2V0RmxvYXQzMihieXRlT2Zmc2V0IC8qICwgbGl0dGxlRW5kaWFuICovKSB7XG4gICAgICByZXR1cm4gdW5wYWNrSUVFRTc1NChnZXQodGhpcywgNCwgYnl0ZU9mZnNldCwgYXJndW1lbnRzWzFdKSwgMjMsIDQpO1xuICAgIH0sXG4gICAgZ2V0RmxvYXQ2NDogZnVuY3Rpb24gZ2V0RmxvYXQ2NChieXRlT2Zmc2V0IC8qICwgbGl0dGxlRW5kaWFuICovKSB7XG4gICAgICByZXR1cm4gdW5wYWNrSUVFRTc1NChnZXQodGhpcywgOCwgYnl0ZU9mZnNldCwgYXJndW1lbnRzWzFdKSwgNTIsIDgpO1xuICAgIH0sXG4gICAgc2V0SW50ODogZnVuY3Rpb24gc2V0SW50OChieXRlT2Zmc2V0LCB2YWx1ZSkge1xuICAgICAgc2V0KHRoaXMsIDEsIGJ5dGVPZmZzZXQsIHBhY2tJOCwgdmFsdWUpO1xuICAgIH0sXG4gICAgc2V0VWludDg6IGZ1bmN0aW9uIHNldFVpbnQ4KGJ5dGVPZmZzZXQsIHZhbHVlKSB7XG4gICAgICBzZXQodGhpcywgMSwgYnl0ZU9mZnNldCwgcGFja0k4LCB2YWx1ZSk7XG4gICAgfSxcbiAgICBzZXRJbnQxNjogZnVuY3Rpb24gc2V0SW50MTYoYnl0ZU9mZnNldCwgdmFsdWUgLyogLCBsaXR0bGVFbmRpYW4gKi8pIHtcbiAgICAgIHNldCh0aGlzLCAyLCBieXRlT2Zmc2V0LCBwYWNrSTE2LCB2YWx1ZSwgYXJndW1lbnRzWzJdKTtcbiAgICB9LFxuICAgIHNldFVpbnQxNjogZnVuY3Rpb24gc2V0VWludDE2KGJ5dGVPZmZzZXQsIHZhbHVlIC8qICwgbGl0dGxlRW5kaWFuICovKSB7XG4gICAgICBzZXQodGhpcywgMiwgYnl0ZU9mZnNldCwgcGFja0kxNiwgdmFsdWUsIGFyZ3VtZW50c1syXSk7XG4gICAgfSxcbiAgICBzZXRJbnQzMjogZnVuY3Rpb24gc2V0SW50MzIoYnl0ZU9mZnNldCwgdmFsdWUgLyogLCBsaXR0bGVFbmRpYW4gKi8pIHtcbiAgICAgIHNldCh0aGlzLCA0LCBieXRlT2Zmc2V0LCBwYWNrSTMyLCB2YWx1ZSwgYXJndW1lbnRzWzJdKTtcbiAgICB9LFxuICAgIHNldFVpbnQzMjogZnVuY3Rpb24gc2V0VWludDMyKGJ5dGVPZmZzZXQsIHZhbHVlIC8qICwgbGl0dGxlRW5kaWFuICovKSB7XG4gICAgICBzZXQodGhpcywgNCwgYnl0ZU9mZnNldCwgcGFja0kzMiwgdmFsdWUsIGFyZ3VtZW50c1syXSk7XG4gICAgfSxcbiAgICBzZXRGbG9hdDMyOiBmdW5jdGlvbiBzZXRGbG9hdDMyKGJ5dGVPZmZzZXQsIHZhbHVlIC8qICwgbGl0dGxlRW5kaWFuICovKSB7XG4gICAgICBzZXQodGhpcywgNCwgYnl0ZU9mZnNldCwgcGFja0YzMiwgdmFsdWUsIGFyZ3VtZW50c1syXSk7XG4gICAgfSxcbiAgICBzZXRGbG9hdDY0OiBmdW5jdGlvbiBzZXRGbG9hdDY0KGJ5dGVPZmZzZXQsIHZhbHVlIC8qICwgbGl0dGxlRW5kaWFuICovKSB7XG4gICAgICBzZXQodGhpcywgOCwgYnl0ZU9mZnNldCwgcGFja0Y2NCwgdmFsdWUsIGFyZ3VtZW50c1syXSk7XG4gICAgfVxuICB9KTtcbn0gZWxzZSB7XG4gIGlmICghZmFpbHMoZnVuY3Rpb24gKCkge1xuICAgICRBcnJheUJ1ZmZlcigxKTtcbiAgfSkgfHwgIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgICBuZXcgJEFycmF5QnVmZmVyKC0xKTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1uZXdcbiAgfSkgfHwgZmFpbHMoZnVuY3Rpb24gKCkge1xuICAgIG5ldyAkQXJyYXlCdWZmZXIoKTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1uZXdcbiAgICBuZXcgJEFycmF5QnVmZmVyKDEuNSk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tbmV3XG4gICAgbmV3ICRBcnJheUJ1ZmZlcihOYU4pOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLW5ld1xuICAgIHJldHVybiAkQXJyYXlCdWZmZXIubmFtZSAhPSBBUlJBWV9CVUZGRVI7XG4gIH0pKSB7XG4gICAgJEFycmF5QnVmZmVyID0gZnVuY3Rpb24gQXJyYXlCdWZmZXIobGVuZ3RoKSB7XG4gICAgICBhbkluc3RhbmNlKHRoaXMsICRBcnJheUJ1ZmZlcik7XG4gICAgICByZXR1cm4gbmV3IEJhc2VCdWZmZXIodG9JbmRleChsZW5ndGgpKTtcbiAgICB9O1xuICAgIHZhciBBcnJheUJ1ZmZlclByb3RvID0gJEFycmF5QnVmZmVyW1BST1RPVFlQRV0gPSBCYXNlQnVmZmVyW1BST1RPVFlQRV07XG4gICAgZm9yICh2YXIga2V5cyA9IGdPUE4oQmFzZUJ1ZmZlciksIGogPSAwLCBrZXk7IGtleXMubGVuZ3RoID4gajspIHtcbiAgICAgIGlmICghKChrZXkgPSBrZXlzW2orK10pIGluICRBcnJheUJ1ZmZlcikpIGhpZGUoJEFycmF5QnVmZmVyLCBrZXksIEJhc2VCdWZmZXJba2V5XSk7XG4gICAgfVxuICAgIGlmICghTElCUkFSWSkgQXJyYXlCdWZmZXJQcm90by5jb25zdHJ1Y3RvciA9ICRBcnJheUJ1ZmZlcjtcbiAgfVxuICAvLyBpT1MgU2FmYXJpIDcueCBidWdcbiAgdmFyIHZpZXcgPSBuZXcgJERhdGFWaWV3KG5ldyAkQXJyYXlCdWZmZXIoMikpO1xuICB2YXIgJHNldEludDggPSAkRGF0YVZpZXdbUFJPVE9UWVBFXS5zZXRJbnQ4O1xuICB2aWV3LnNldEludDgoMCwgMjE0NzQ4MzY0OCk7XG4gIHZpZXcuc2V0SW50OCgxLCAyMTQ3NDgzNjQ5KTtcbiAgaWYgKHZpZXcuZ2V0SW50OCgwKSB8fCAhdmlldy5nZXRJbnQ4KDEpKSByZWRlZmluZUFsbCgkRGF0YVZpZXdbUFJPVE9UWVBFXSwge1xuICAgIHNldEludDg6IGZ1bmN0aW9uIHNldEludDgoYnl0ZU9mZnNldCwgdmFsdWUpIHtcbiAgICAgICRzZXRJbnQ4LmNhbGwodGhpcywgYnl0ZU9mZnNldCwgdmFsdWUgPDwgMjQgPj4gMjQpO1xuICAgIH0sXG4gICAgc2V0VWludDg6IGZ1bmN0aW9uIHNldFVpbnQ4KGJ5dGVPZmZzZXQsIHZhbHVlKSB7XG4gICAgICAkc2V0SW50OC5jYWxsKHRoaXMsIGJ5dGVPZmZzZXQsIHZhbHVlIDw8IDI0ID4+IDI0KTtcbiAgICB9XG4gIH0sIHRydWUpO1xufVxuc2V0VG9TdHJpbmdUYWcoJEFycmF5QnVmZmVyLCBBUlJBWV9CVUZGRVIpO1xuc2V0VG9TdHJpbmdUYWcoJERhdGFWaWV3LCBEQVRBX1ZJRVcpO1xuaGlkZSgkRGF0YVZpZXdbUFJPVE9UWVBFXSwgJHR5cGVkLlZJRVcsIHRydWUpO1xuZXhwb3J0c1tBUlJBWV9CVUZGRVJdID0gJEFycmF5QnVmZmVyO1xuZXhwb3J0c1tEQVRBX1ZJRVddID0gJERhdGFWaWV3O1xuIiwiLy8gaHR0cHM6Ly9naXRodWIuY29tL3psb2lyb2NrL2NvcmUtanMvaXNzdWVzLzg2I2lzc3VlY29tbWVudC0xMTU3NTkwMjhcbnZhciBnbG9iYWwgPSBtb2R1bGUuZXhwb3J0cyA9IHR5cGVvZiB3aW5kb3cgIT0gJ3VuZGVmaW5lZCcgJiYgd2luZG93Lk1hdGggPT0gTWF0aFxuICA/IHdpbmRvdyA6IHR5cGVvZiBzZWxmICE9ICd1bmRlZmluZWQnICYmIHNlbGYuTWF0aCA9PSBNYXRoID8gc2VsZlxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tbmV3LWZ1bmNcbiAgOiBGdW5jdGlvbigncmV0dXJuIHRoaXMnKSgpO1xuaWYgKHR5cGVvZiBfX2cgPT0gJ251bWJlcicpIF9fZyA9IGdsb2JhbDsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bmRlZlxuIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIHR5cGVvZiBpdCA9PT0gJ29iamVjdCcgPyBpdCAhPT0gbnVsbCA6IHR5cGVvZiBpdCA9PT0gJ2Z1bmN0aW9uJztcbn07XG4iLCIvLyBUaGFuaydzIElFOCBmb3IgaGlzIGZ1bm55IGRlZmluZVByb3BlcnR5XG5tb2R1bGUuZXhwb3J0cyA9ICFyZXF1aXJlKCcuL19mYWlscycpKGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh7fSwgJ2EnLCB7IGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gNzsgfSB9KS5hICE9IDc7XG59KTtcbiIsIm1vZHVsZS5leHBvcnRzID0gIXJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJykgJiYgIXJlcXVpcmUoJy4vX2ZhaWxzJykoZnVuY3Rpb24gKCkge1xuICByZXR1cm4gT2JqZWN0LmRlZmluZVByb3BlcnR5KHJlcXVpcmUoJy4vX2RvbS1jcmVhdGUnKSgnZGl2JyksICdhJywgeyBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIDc7IH0gfSkuYSAhPSA3O1xufSk7XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi9fZ2xvYmFsJyk7XG52YXIgY29yZSA9IHJlcXVpcmUoJy4vX2NvcmUnKTtcbnZhciBMSUJSQVJZID0gcmVxdWlyZSgnLi9fbGlicmFyeScpO1xudmFyIHdrc0V4dCA9IHJlcXVpcmUoJy4vX3drcy1leHQnKTtcbnZhciBkZWZpbmVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpLmY7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChuYW1lKSB7XG4gIHZhciAkU3ltYm9sID0gY29yZS5TeW1ib2wgfHwgKGNvcmUuU3ltYm9sID0gTElCUkFSWSA/IHt9IDogZ2xvYmFsLlN5bWJvbCB8fCB7fSk7XG4gIGlmIChuYW1lLmNoYXJBdCgwKSAhPSAnXycgJiYgIShuYW1lIGluICRTeW1ib2wpKSBkZWZpbmVQcm9wZXJ0eSgkU3ltYm9sLCBuYW1lLCB7IHZhbHVlOiB3a3NFeHQuZihuYW1lKSB9KTtcbn07XG4iLCJ2YXIgaGFzID0gcmVxdWlyZSgnLi9faGFzJyk7XG52YXIgdG9JT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8taW9iamVjdCcpO1xudmFyIGFycmF5SW5kZXhPZiA9IHJlcXVpcmUoJy4vX2FycmF5LWluY2x1ZGVzJykoZmFsc2UpO1xudmFyIElFX1BST1RPID0gcmVxdWlyZSgnLi9fc2hhcmVkLWtleScpKCdJRV9QUk9UTycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChvYmplY3QsIG5hbWVzKSB7XG4gIHZhciBPID0gdG9JT2JqZWN0KG9iamVjdCk7XG4gIHZhciBpID0gMDtcbiAgdmFyIHJlc3VsdCA9IFtdO1xuICB2YXIga2V5O1xuICBmb3IgKGtleSBpbiBPKSBpZiAoa2V5ICE9IElFX1BST1RPKSBoYXMoTywga2V5KSAmJiByZXN1bHQucHVzaChrZXkpO1xuICAvLyBEb24ndCBlbnVtIGJ1ZyAmIGhpZGRlbiBrZXlzXG4gIHdoaWxlIChuYW1lcy5sZW5ndGggPiBpKSBpZiAoaGFzKE8sIGtleSA9IG5hbWVzW2krK10pKSB7XG4gICAgfmFycmF5SW5kZXhPZihyZXN1bHQsIGtleSkgfHwgcmVzdWx0LnB1c2goa2V5KTtcbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufTtcbiIsInZhciBkUCA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgZ2V0S2V5cyA9IHJlcXVpcmUoJy4vX29iamVjdC1rZXlzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKSA/IE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzIDogZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyhPLCBQcm9wZXJ0aWVzKSB7XG4gIGFuT2JqZWN0KE8pO1xuICB2YXIga2V5cyA9IGdldEtleXMoUHJvcGVydGllcyk7XG4gIHZhciBsZW5ndGggPSBrZXlzLmxlbmd0aDtcbiAgdmFyIGkgPSAwO1xuICB2YXIgUDtcbiAgd2hpbGUgKGxlbmd0aCA+IGkpIGRQLmYoTywgUCA9IGtleXNbaSsrXSwgUHJvcGVydGllc1tQXSk7XG4gIHJldHVybiBPO1xufTtcbiIsIi8vIGZhbGxiYWNrIGZvciBJRTExIGJ1Z2d5IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzIHdpdGggaWZyYW1lIGFuZCB3aW5kb3dcbnZhciB0b0lPYmplY3QgPSByZXF1aXJlKCcuL190by1pb2JqZWN0Jyk7XG52YXIgZ09QTiA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BuJykuZjtcbnZhciB0b1N0cmluZyA9IHt9LnRvU3RyaW5nO1xuXG52YXIgd2luZG93TmFtZXMgPSB0eXBlb2Ygd2luZG93ID09ICdvYmplY3QnICYmIHdpbmRvdyAmJiBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lc1xuICA/IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKHdpbmRvdykgOiBbXTtcblxudmFyIGdldFdpbmRvd05hbWVzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuIGdPUE4oaXQpO1xuICB9IGNhdGNoIChlKSB7XG4gICAgcmV0dXJuIHdpbmRvd05hbWVzLnNsaWNlKCk7XG4gIH1cbn07XG5cbm1vZHVsZS5leHBvcnRzLmYgPSBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eU5hbWVzKGl0KSB7XG4gIHJldHVybiB3aW5kb3dOYW1lcyAmJiB0b1N0cmluZy5jYWxsKGl0KSA9PSAnW29iamVjdCBXaW5kb3ddJyA/IGdldFdpbmRvd05hbWVzKGl0KSA6IGdPUE4odG9JT2JqZWN0KGl0KSk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gMTkuMS4yLjEgT2JqZWN0LmFzc2lnbih0YXJnZXQsIHNvdXJjZSwgLi4uKVxudmFyIERFU0NSSVBUT1JTID0gcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKTtcbnZhciBnZXRLZXlzID0gcmVxdWlyZSgnLi9fb2JqZWN0LWtleXMnKTtcbnZhciBnT1BTID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcHMnKTtcbnZhciBwSUUgPSByZXF1aXJlKCcuL19vYmplY3QtcGllJyk7XG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuL190by1vYmplY3QnKTtcbnZhciBJT2JqZWN0ID0gcmVxdWlyZSgnLi9faW9iamVjdCcpO1xudmFyICRhc3NpZ24gPSBPYmplY3QuYXNzaWduO1xuXG4vLyBzaG91bGQgd29yayB3aXRoIHN5bWJvbHMgYW5kIHNob3VsZCBoYXZlIGRldGVybWluaXN0aWMgcHJvcGVydHkgb3JkZXIgKFY4IGJ1Zylcbm1vZHVsZS5leHBvcnRzID0gISRhc3NpZ24gfHwgcmVxdWlyZSgnLi9fZmFpbHMnKShmdW5jdGlvbiAoKSB7XG4gIHZhciBBID0ge307XG4gIHZhciBCID0ge307XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bmRlZlxuICB2YXIgUyA9IFN5bWJvbCgpO1xuICB2YXIgSyA9ICdhYmNkZWZnaGlqa2xtbm9wcXJzdCc7XG4gIEFbU10gPSA3O1xuICBLLnNwbGl0KCcnKS5mb3JFYWNoKGZ1bmN0aW9uIChrKSB7IEJba10gPSBrOyB9KTtcbiAgcmV0dXJuICRhc3NpZ24oe30sIEEpW1NdICE9IDcgfHwgT2JqZWN0LmtleXMoJGFzc2lnbih7fSwgQikpLmpvaW4oJycpICE9IEs7XG59KSA/IGZ1bmN0aW9uIGFzc2lnbih0YXJnZXQsIHNvdXJjZSkgeyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVudXNlZC12YXJzXG4gIHZhciBUID0gdG9PYmplY3QodGFyZ2V0KTtcbiAgdmFyIGFMZW4gPSBhcmd1bWVudHMubGVuZ3RoO1xuICB2YXIgaW5kZXggPSAxO1xuICB2YXIgZ2V0U3ltYm9scyA9IGdPUFMuZjtcbiAgdmFyIGlzRW51bSA9IHBJRS5mO1xuICB3aGlsZSAoYUxlbiA+IGluZGV4KSB7XG4gICAgdmFyIFMgPSBJT2JqZWN0KGFyZ3VtZW50c1tpbmRleCsrXSk7XG4gICAgdmFyIGtleXMgPSBnZXRTeW1ib2xzID8gZ2V0S2V5cyhTKS5jb25jYXQoZ2V0U3ltYm9scyhTKSkgOiBnZXRLZXlzKFMpO1xuICAgIHZhciBsZW5ndGggPSBrZXlzLmxlbmd0aDtcbiAgICB2YXIgaiA9IDA7XG4gICAgdmFyIGtleTtcbiAgICB3aGlsZSAobGVuZ3RoID4gaikge1xuICAgICAga2V5ID0ga2V5c1tqKytdO1xuICAgICAgaWYgKCFERVNDUklQVE9SUyB8fCBpc0VudW0uY2FsbChTLCBrZXkpKSBUW2tleV0gPSBTW2tleV07XG4gICAgfVxuICB9IHJldHVybiBUO1xufSA6ICRhc3NpZ247XG4iLCIvLyA3LjIuOSBTYW1lVmFsdWUoeCwgeSlcbm1vZHVsZS5leHBvcnRzID0gT2JqZWN0LmlzIHx8IGZ1bmN0aW9uIGlzKHgsIHkpIHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXNlbGYtY29tcGFyZVxuICByZXR1cm4geCA9PT0geSA/IHggIT09IDAgfHwgMSAvIHggPT09IDEgLyB5IDogeCAhPSB4ICYmIHkgIT0geTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgYUZ1bmN0aW9uID0gcmVxdWlyZSgnLi9fYS1mdW5jdGlvbicpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG52YXIgaW52b2tlID0gcmVxdWlyZSgnLi9faW52b2tlJyk7XG52YXIgYXJyYXlTbGljZSA9IFtdLnNsaWNlO1xudmFyIGZhY3RvcmllcyA9IHt9O1xuXG52YXIgY29uc3RydWN0ID0gZnVuY3Rpb24gKEYsIGxlbiwgYXJncykge1xuICBpZiAoIShsZW4gaW4gZmFjdG9yaWVzKSkge1xuICAgIGZvciAodmFyIG4gPSBbXSwgaSA9IDA7IGkgPCBsZW47IGkrKykgbltpXSA9ICdhWycgKyBpICsgJ10nO1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1uZXctZnVuY1xuICAgIGZhY3Rvcmllc1tsZW5dID0gRnVuY3Rpb24oJ0YsYScsICdyZXR1cm4gbmV3IEYoJyArIG4uam9pbignLCcpICsgJyknKTtcbiAgfSByZXR1cm4gZmFjdG9yaWVzW2xlbl0oRiwgYXJncyk7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IEZ1bmN0aW9uLmJpbmQgfHwgZnVuY3Rpb24gYmluZCh0aGF0IC8qICwgLi4uYXJncyAqLykge1xuICB2YXIgZm4gPSBhRnVuY3Rpb24odGhpcyk7XG4gIHZhciBwYXJ0QXJncyA9IGFycmF5U2xpY2UuY2FsbChhcmd1bWVudHMsIDEpO1xuICB2YXIgYm91bmQgPSBmdW5jdGlvbiAoLyogYXJncy4uLiAqLykge1xuICAgIHZhciBhcmdzID0gcGFydEFyZ3MuY29uY2F0KGFycmF5U2xpY2UuY2FsbChhcmd1bWVudHMpKTtcbiAgICByZXR1cm4gdGhpcyBpbnN0YW5jZW9mIGJvdW5kID8gY29uc3RydWN0KGZuLCBhcmdzLmxlbmd0aCwgYXJncykgOiBpbnZva2UoZm4sIGFyZ3MsIHRoYXQpO1xuICB9O1xuICBpZiAoaXNPYmplY3QoZm4ucHJvdG90eXBlKSkgYm91bmQucHJvdG90eXBlID0gZm4ucHJvdG90eXBlO1xuICByZXR1cm4gYm91bmQ7XG59O1xuIiwiLy8gZmFzdCBhcHBseSwgaHR0cDovL2pzcGVyZi5sbmtpdC5jb20vZmFzdC1hcHBseS81XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChmbiwgYXJncywgdGhhdCkge1xuICB2YXIgdW4gPSB0aGF0ID09PSB1bmRlZmluZWQ7XG4gIHN3aXRjaCAoYXJncy5sZW5ndGgpIHtcbiAgICBjYXNlIDA6IHJldHVybiB1biA/IGZuKClcbiAgICAgICAgICAgICAgICAgICAgICA6IGZuLmNhbGwodGhhdCk7XG4gICAgY2FzZSAxOiByZXR1cm4gdW4gPyBmbihhcmdzWzBdKVxuICAgICAgICAgICAgICAgICAgICAgIDogZm4uY2FsbCh0aGF0LCBhcmdzWzBdKTtcbiAgICBjYXNlIDI6IHJldHVybiB1biA/IGZuKGFyZ3NbMF0sIGFyZ3NbMV0pXG4gICAgICAgICAgICAgICAgICAgICAgOiBmbi5jYWxsKHRoYXQsIGFyZ3NbMF0sIGFyZ3NbMV0pO1xuICAgIGNhc2UgMzogcmV0dXJuIHVuID8gZm4oYXJnc1swXSwgYXJnc1sxXSwgYXJnc1syXSlcbiAgICAgICAgICAgICAgICAgICAgICA6IGZuLmNhbGwodGhhdCwgYXJnc1swXSwgYXJnc1sxXSwgYXJnc1syXSk7XG4gICAgY2FzZSA0OiByZXR1cm4gdW4gPyBmbihhcmdzWzBdLCBhcmdzWzFdLCBhcmdzWzJdLCBhcmdzWzNdKVxuICAgICAgICAgICAgICAgICAgICAgIDogZm4uY2FsbCh0aGF0LCBhcmdzWzBdLCBhcmdzWzFdLCBhcmdzWzJdLCBhcmdzWzNdKTtcbiAgfSByZXR1cm4gZm4uYXBwbHkodGhhdCwgYXJncyk7XG59O1xuIiwidmFyICRwYXJzZUludCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpLnBhcnNlSW50O1xudmFyICR0cmltID0gcmVxdWlyZSgnLi9fc3RyaW5nLXRyaW0nKS50cmltO1xudmFyIHdzID0gcmVxdWlyZSgnLi9fc3RyaW5nLXdzJyk7XG52YXIgaGV4ID0gL15bLStdPzBbeFhdLztcblxubW9kdWxlLmV4cG9ydHMgPSAkcGFyc2VJbnQod3MgKyAnMDgnKSAhPT0gOCB8fCAkcGFyc2VJbnQod3MgKyAnMHgxNicpICE9PSAyMiA/IGZ1bmN0aW9uIHBhcnNlSW50KHN0ciwgcmFkaXgpIHtcbiAgdmFyIHN0cmluZyA9ICR0cmltKFN0cmluZyhzdHIpLCAzKTtcbiAgcmV0dXJuICRwYXJzZUludChzdHJpbmcsIChyYWRpeCA+Pj4gMCkgfHwgKGhleC50ZXN0KHN0cmluZykgPyAxNiA6IDEwKSk7XG59IDogJHBhcnNlSW50O1xuIiwidmFyICRwYXJzZUZsb2F0ID0gcmVxdWlyZSgnLi9fZ2xvYmFsJykucGFyc2VGbG9hdDtcbnZhciAkdHJpbSA9IHJlcXVpcmUoJy4vX3N0cmluZy10cmltJykudHJpbTtcblxubW9kdWxlLmV4cG9ydHMgPSAxIC8gJHBhcnNlRmxvYXQocmVxdWlyZSgnLi9fc3RyaW5nLXdzJykgKyAnLTAnKSAhPT0gLUluZmluaXR5ID8gZnVuY3Rpb24gcGFyc2VGbG9hdChzdHIpIHtcbiAgdmFyIHN0cmluZyA9ICR0cmltKFN0cmluZyhzdHIpLCAzKTtcbiAgdmFyIHJlc3VsdCA9ICRwYXJzZUZsb2F0KHN0cmluZyk7XG4gIHJldHVybiByZXN1bHQgPT09IDAgJiYgc3RyaW5nLmNoYXJBdCgwKSA9PSAnLScgPyAtMCA6IHJlc3VsdDtcbn0gOiAkcGFyc2VGbG9hdDtcbiIsInZhciBjb2YgPSByZXF1aXJlKCcuL19jb2YnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0LCBtc2cpIHtcbiAgaWYgKHR5cGVvZiBpdCAhPSAnbnVtYmVyJyAmJiBjb2YoaXQpICE9ICdOdW1iZXInKSB0aHJvdyBUeXBlRXJyb3IobXNnKTtcbiAgcmV0dXJuICtpdDtcbn07XG4iLCIvLyAyMC4xLjIuMyBOdW1iZXIuaXNJbnRlZ2VyKG51bWJlcilcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xudmFyIGZsb29yID0gTWF0aC5mbG9vcjtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gaXNJbnRlZ2VyKGl0KSB7XG4gIHJldHVybiAhaXNPYmplY3QoaXQpICYmIGlzRmluaXRlKGl0KSAmJiBmbG9vcihpdCkgPT09IGl0O1xufTtcbiIsIi8vIDIwLjIuMi4yMCBNYXRoLmxvZzFwKHgpXG5tb2R1bGUuZXhwb3J0cyA9IE1hdGgubG9nMXAgfHwgZnVuY3Rpb24gbG9nMXAoeCkge1xuICByZXR1cm4gKHggPSAreCkgPiAtMWUtOCAmJiB4IDwgMWUtOCA/IHggLSB4ICogeCAvIDIgOiBNYXRoLmxvZygxICsgeCk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGNyZWF0ZSA9IHJlcXVpcmUoJy4vX29iamVjdC1jcmVhdGUnKTtcbnZhciBkZXNjcmlwdG9yID0gcmVxdWlyZSgnLi9fcHJvcGVydHktZGVzYycpO1xudmFyIHNldFRvU3RyaW5nVGFnID0gcmVxdWlyZSgnLi9fc2V0LXRvLXN0cmluZy10YWcnKTtcbnZhciBJdGVyYXRvclByb3RvdHlwZSA9IHt9O1xuXG4vLyAyNS4xLjIuMS4xICVJdGVyYXRvclByb3RvdHlwZSVbQEBpdGVyYXRvcl0oKVxucmVxdWlyZSgnLi9faGlkZScpKEl0ZXJhdG9yUHJvdG90eXBlLCByZXF1aXJlKCcuL193a3MnKSgnaXRlcmF0b3InKSwgZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpczsgfSk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBOQU1FLCBuZXh0KSB7XG4gIENvbnN0cnVjdG9yLnByb3RvdHlwZSA9IGNyZWF0ZShJdGVyYXRvclByb3RvdHlwZSwgeyBuZXh0OiBkZXNjcmlwdG9yKDEsIG5leHQpIH0pO1xuICBzZXRUb1N0cmluZ1RhZyhDb25zdHJ1Y3RvciwgTkFNRSArICcgSXRlcmF0b3InKTtcbn07XG4iLCIvLyBjYWxsIHNvbWV0aGluZyBvbiBpdGVyYXRvciBzdGVwIHdpdGggc2FmZSBjbG9zaW5nIG9uIGVycm9yXG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0ZXJhdG9yLCBmbiwgdmFsdWUsIGVudHJpZXMpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gZW50cmllcyA/IGZuKGFuT2JqZWN0KHZhbHVlKVswXSwgdmFsdWVbMV0pIDogZm4odmFsdWUpO1xuICAvLyA3LjQuNiBJdGVyYXRvckNsb3NlKGl0ZXJhdG9yLCBjb21wbGV0aW9uKVxuICB9IGNhdGNoIChlKSB7XG4gICAgdmFyIHJldCA9IGl0ZXJhdG9yWydyZXR1cm4nXTtcbiAgICBpZiAocmV0ICE9PSB1bmRlZmluZWQpIGFuT2JqZWN0KHJldC5jYWxsKGl0ZXJhdG9yKSk7XG4gICAgdGhyb3cgZTtcbiAgfVxufTtcbiIsIi8vIDkuNC4yLjMgQXJyYXlTcGVjaWVzQ3JlYXRlKG9yaWdpbmFsQXJyYXksIGxlbmd0aClcbnZhciBzcGVjaWVzQ29uc3RydWN0b3IgPSByZXF1aXJlKCcuL19hcnJheS1zcGVjaWVzLWNvbnN0cnVjdG9yJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKG9yaWdpbmFsLCBsZW5ndGgpIHtcbiAgcmV0dXJuIG5ldyAoc3BlY2llc0NvbnN0cnVjdG9yKG9yaWdpbmFsKSkobGVuZ3RoKTtcbn07XG4iLCJ2YXIgYUZ1bmN0aW9uID0gcmVxdWlyZSgnLi9fYS1mdW5jdGlvbicpO1xudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8tb2JqZWN0Jyk7XG52YXIgSU9iamVjdCA9IHJlcXVpcmUoJy4vX2lvYmplY3QnKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICh0aGF0LCBjYWxsYmFja2ZuLCBhTGVuLCBtZW1vLCBpc1JpZ2h0KSB7XG4gIGFGdW5jdGlvbihjYWxsYmFja2ZuKTtcbiAgdmFyIE8gPSB0b09iamVjdCh0aGF0KTtcbiAgdmFyIHNlbGYgPSBJT2JqZWN0KE8pO1xuICB2YXIgbGVuZ3RoID0gdG9MZW5ndGgoTy5sZW5ndGgpO1xuICB2YXIgaW5kZXggPSBpc1JpZ2h0ID8gbGVuZ3RoIC0gMSA6IDA7XG4gIHZhciBpID0gaXNSaWdodCA/IC0xIDogMTtcbiAgaWYgKGFMZW4gPCAyKSBmb3IgKDs7KSB7XG4gICAgaWYgKGluZGV4IGluIHNlbGYpIHtcbiAgICAgIG1lbW8gPSBzZWxmW2luZGV4XTtcbiAgICAgIGluZGV4ICs9IGk7XG4gICAgICBicmVhaztcbiAgICB9XG4gICAgaW5kZXggKz0gaTtcbiAgICBpZiAoaXNSaWdodCA/IGluZGV4IDwgMCA6IGxlbmd0aCA8PSBpbmRleCkge1xuICAgICAgdGhyb3cgVHlwZUVycm9yKCdSZWR1Y2Ugb2YgZW1wdHkgYXJyYXkgd2l0aCBubyBpbml0aWFsIHZhbHVlJyk7XG4gICAgfVxuICB9XG4gIGZvciAoO2lzUmlnaHQgPyBpbmRleCA+PSAwIDogbGVuZ3RoID4gaW5kZXg7IGluZGV4ICs9IGkpIGlmIChpbmRleCBpbiBzZWxmKSB7XG4gICAgbWVtbyA9IGNhbGxiYWNrZm4obWVtbywgc2VsZltpbmRleF0sIGluZGV4LCBPKTtcbiAgfVxuICByZXR1cm4gbWVtbztcbn07XG4iLCIvLyAyMi4xLjMuMyBBcnJheS5wcm90b3R5cGUuY29weVdpdGhpbih0YXJnZXQsIHN0YXJ0LCBlbmQgPSB0aGlzLmxlbmd0aClcbid1c2Ugc3RyaWN0JztcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4vX3RvLW9iamVjdCcpO1xudmFyIHRvQWJzb2x1dGVJbmRleCA9IHJlcXVpcmUoJy4vX3RvLWFic29sdXRlLWluZGV4Jyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuL190by1sZW5ndGgnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBbXS5jb3B5V2l0aGluIHx8IGZ1bmN0aW9uIGNvcHlXaXRoaW4odGFyZ2V0IC8qID0gMCAqLywgc3RhcnQgLyogPSAwLCBlbmQgPSBAbGVuZ3RoICovKSB7XG4gIHZhciBPID0gdG9PYmplY3QodGhpcyk7XG4gIHZhciBsZW4gPSB0b0xlbmd0aChPLmxlbmd0aCk7XG4gIHZhciB0byA9IHRvQWJzb2x1dGVJbmRleCh0YXJnZXQsIGxlbik7XG4gIHZhciBmcm9tID0gdG9BYnNvbHV0ZUluZGV4KHN0YXJ0LCBsZW4pO1xuICB2YXIgZW5kID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgPyBhcmd1bWVudHNbMl0gOiB1bmRlZmluZWQ7XG4gIHZhciBjb3VudCA9IE1hdGgubWluKChlbmQgPT09IHVuZGVmaW5lZCA/IGxlbiA6IHRvQWJzb2x1dGVJbmRleChlbmQsIGxlbikpIC0gZnJvbSwgbGVuIC0gdG8pO1xuICB2YXIgaW5jID0gMTtcbiAgaWYgKGZyb20gPCB0byAmJiB0byA8IGZyb20gKyBjb3VudCkge1xuICAgIGluYyA9IC0xO1xuICAgIGZyb20gKz0gY291bnQgLSAxO1xuICAgIHRvICs9IGNvdW50IC0gMTtcbiAgfVxuICB3aGlsZSAoY291bnQtLSA+IDApIHtcbiAgICBpZiAoZnJvbSBpbiBPKSBPW3RvXSA9IE9bZnJvbV07XG4gICAgZWxzZSBkZWxldGUgT1t0b107XG4gICAgdG8gKz0gaW5jO1xuICAgIGZyb20gKz0gaW5jO1xuICB9IHJldHVybiBPO1xufTtcbiIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGRvbmUsIHZhbHVlKSB7XG4gIHJldHVybiB7IHZhbHVlOiB2YWx1ZSwgZG9uZTogISFkb25lIH07XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIHJlZ2V4cEV4ZWMgPSByZXF1aXJlKCcuL19yZWdleHAtZXhlYycpO1xucmVxdWlyZSgnLi9fZXhwb3J0Jykoe1xuICB0YXJnZXQ6ICdSZWdFeHAnLFxuICBwcm90bzogdHJ1ZSxcbiAgZm9yY2VkOiByZWdleHBFeGVjICE9PSAvLi8uZXhlY1xufSwge1xuICBleGVjOiByZWdleHBFeGVjXG59KTtcbiIsIi8vIDIxLjIuNS4zIGdldCBSZWdFeHAucHJvdG90eXBlLmZsYWdzKClcbmlmIChyZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpICYmIC8uL2cuZmxhZ3MgIT0gJ2cnKSByZXF1aXJlKCcuL19vYmplY3QtZHAnKS5mKFJlZ0V4cC5wcm90b3R5cGUsICdmbGFncycsIHtcbiAgY29uZmlndXJhYmxlOiB0cnVlLFxuICBnZXQ6IHJlcXVpcmUoJy4vX2ZsYWdzJylcbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIExJQlJBUlkgPSByZXF1aXJlKCcuL19saWJyYXJ5Jyk7XG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi9fZ2xvYmFsJyk7XG52YXIgY3R4ID0gcmVxdWlyZSgnLi9fY3R4Jyk7XG52YXIgY2xhc3NvZiA9IHJlcXVpcmUoJy4vX2NsYXNzb2YnKTtcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbnZhciBhRnVuY3Rpb24gPSByZXF1aXJlKCcuL19hLWZ1bmN0aW9uJyk7XG52YXIgYW5JbnN0YW5jZSA9IHJlcXVpcmUoJy4vX2FuLWluc3RhbmNlJyk7XG52YXIgZm9yT2YgPSByZXF1aXJlKCcuL19mb3Itb2YnKTtcbnZhciBzcGVjaWVzQ29uc3RydWN0b3IgPSByZXF1aXJlKCcuL19zcGVjaWVzLWNvbnN0cnVjdG9yJyk7XG52YXIgdGFzayA9IHJlcXVpcmUoJy4vX3Rhc2snKS5zZXQ7XG52YXIgbWljcm90YXNrID0gcmVxdWlyZSgnLi9fbWljcm90YXNrJykoKTtcbnZhciBuZXdQcm9taXNlQ2FwYWJpbGl0eU1vZHVsZSA9IHJlcXVpcmUoJy4vX25ldy1wcm9taXNlLWNhcGFiaWxpdHknKTtcbnZhciBwZXJmb3JtID0gcmVxdWlyZSgnLi9fcGVyZm9ybScpO1xudmFyIHVzZXJBZ2VudCA9IHJlcXVpcmUoJy4vX3VzZXItYWdlbnQnKTtcbnZhciBwcm9taXNlUmVzb2x2ZSA9IHJlcXVpcmUoJy4vX3Byb21pc2UtcmVzb2x2ZScpO1xudmFyIFBST01JU0UgPSAnUHJvbWlzZSc7XG52YXIgVHlwZUVycm9yID0gZ2xvYmFsLlR5cGVFcnJvcjtcbnZhciBwcm9jZXNzID0gZ2xvYmFsLnByb2Nlc3M7XG52YXIgdmVyc2lvbnMgPSBwcm9jZXNzICYmIHByb2Nlc3MudmVyc2lvbnM7XG52YXIgdjggPSB2ZXJzaW9ucyAmJiB2ZXJzaW9ucy52OCB8fCAnJztcbnZhciAkUHJvbWlzZSA9IGdsb2JhbFtQUk9NSVNFXTtcbnZhciBpc05vZGUgPSBjbGFzc29mKHByb2Nlc3MpID09ICdwcm9jZXNzJztcbnZhciBlbXB0eSA9IGZ1bmN0aW9uICgpIHsgLyogZW1wdHkgKi8gfTtcbnZhciBJbnRlcm5hbCwgbmV3R2VuZXJpY1Byb21pc2VDYXBhYmlsaXR5LCBPd25Qcm9taXNlQ2FwYWJpbGl0eSwgV3JhcHBlcjtcbnZhciBuZXdQcm9taXNlQ2FwYWJpbGl0eSA9IG5ld0dlbmVyaWNQcm9taXNlQ2FwYWJpbGl0eSA9IG5ld1Byb21pc2VDYXBhYmlsaXR5TW9kdWxlLmY7XG5cbnZhciBVU0VfTkFUSVZFID0gISFmdW5jdGlvbiAoKSB7XG4gIHRyeSB7XG4gICAgLy8gY29ycmVjdCBzdWJjbGFzc2luZyB3aXRoIEBAc3BlY2llcyBzdXBwb3J0XG4gICAgdmFyIHByb21pc2UgPSAkUHJvbWlzZS5yZXNvbHZlKDEpO1xuICAgIHZhciBGYWtlUHJvbWlzZSA9IChwcm9taXNlLmNvbnN0cnVjdG9yID0ge30pW3JlcXVpcmUoJy4vX3drcycpKCdzcGVjaWVzJyldID0gZnVuY3Rpb24gKGV4ZWMpIHtcbiAgICAgIGV4ZWMoZW1wdHksIGVtcHR5KTtcbiAgICB9O1xuICAgIC8vIHVuaGFuZGxlZCByZWplY3Rpb25zIHRyYWNraW5nIHN1cHBvcnQsIE5vZGVKUyBQcm9taXNlIHdpdGhvdXQgaXQgZmFpbHMgQEBzcGVjaWVzIHRlc3RcbiAgICByZXR1cm4gKGlzTm9kZSB8fCB0eXBlb2YgUHJvbWlzZVJlamVjdGlvbkV2ZW50ID09ICdmdW5jdGlvbicpXG4gICAgICAmJiBwcm9taXNlLnRoZW4oZW1wdHkpIGluc3RhbmNlb2YgRmFrZVByb21pc2VcbiAgICAgIC8vIHY4IDYuNiAoTm9kZSAxMCBhbmQgQ2hyb21lIDY2KSBoYXZlIGEgYnVnIHdpdGggcmVzb2x2aW5nIGN1c3RvbSB0aGVuYWJsZXNcbiAgICAgIC8vIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC9jaHJvbWl1bS9pc3N1ZXMvZGV0YWlsP2lkPTgzMDU2NVxuICAgICAgLy8gd2UgY2FuJ3QgZGV0ZWN0IGl0IHN5bmNocm9ub3VzbHksIHNvIGp1c3QgY2hlY2sgdmVyc2lvbnNcbiAgICAgICYmIHY4LmluZGV4T2YoJzYuNicpICE9PSAwXG4gICAgICAmJiB1c2VyQWdlbnQuaW5kZXhPZignQ2hyb21lLzY2JykgPT09IC0xO1xuICB9IGNhdGNoIChlKSB7IC8qIGVtcHR5ICovIH1cbn0oKTtcblxuLy8gaGVscGVyc1xudmFyIGlzVGhlbmFibGUgPSBmdW5jdGlvbiAoaXQpIHtcbiAgdmFyIHRoZW47XG4gIHJldHVybiBpc09iamVjdChpdCkgJiYgdHlwZW9mICh0aGVuID0gaXQudGhlbikgPT0gJ2Z1bmN0aW9uJyA/IHRoZW4gOiBmYWxzZTtcbn07XG52YXIgbm90aWZ5ID0gZnVuY3Rpb24gKHByb21pc2UsIGlzUmVqZWN0KSB7XG4gIGlmIChwcm9taXNlLl9uKSByZXR1cm47XG4gIHByb21pc2UuX24gPSB0cnVlO1xuICB2YXIgY2hhaW4gPSBwcm9taXNlLl9jO1xuICBtaWNyb3Rhc2soZnVuY3Rpb24gKCkge1xuICAgIHZhciB2YWx1ZSA9IHByb21pc2UuX3Y7XG4gICAgdmFyIG9rID0gcHJvbWlzZS5fcyA9PSAxO1xuICAgIHZhciBpID0gMDtcbiAgICB2YXIgcnVuID0gZnVuY3Rpb24gKHJlYWN0aW9uKSB7XG4gICAgICB2YXIgaGFuZGxlciA9IG9rID8gcmVhY3Rpb24ub2sgOiByZWFjdGlvbi5mYWlsO1xuICAgICAgdmFyIHJlc29sdmUgPSByZWFjdGlvbi5yZXNvbHZlO1xuICAgICAgdmFyIHJlamVjdCA9IHJlYWN0aW9uLnJlamVjdDtcbiAgICAgIHZhciBkb21haW4gPSByZWFjdGlvbi5kb21haW47XG4gICAgICB2YXIgcmVzdWx0LCB0aGVuLCBleGl0ZWQ7XG4gICAgICB0cnkge1xuICAgICAgICBpZiAoaGFuZGxlcikge1xuICAgICAgICAgIGlmICghb2spIHtcbiAgICAgICAgICAgIGlmIChwcm9taXNlLl9oID09IDIpIG9uSGFuZGxlVW5oYW5kbGVkKHByb21pc2UpO1xuICAgICAgICAgICAgcHJvbWlzZS5faCA9IDE7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChoYW5kbGVyID09PSB0cnVlKSByZXN1bHQgPSB2YWx1ZTtcbiAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGlmIChkb21haW4pIGRvbWFpbi5lbnRlcigpO1xuICAgICAgICAgICAgcmVzdWx0ID0gaGFuZGxlcih2YWx1ZSk7IC8vIG1heSB0aHJvd1xuICAgICAgICAgICAgaWYgKGRvbWFpbikge1xuICAgICAgICAgICAgICBkb21haW4uZXhpdCgpO1xuICAgICAgICAgICAgICBleGl0ZWQgPSB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAocmVzdWx0ID09PSByZWFjdGlvbi5wcm9taXNlKSB7XG4gICAgICAgICAgICByZWplY3QoVHlwZUVycm9yKCdQcm9taXNlLWNoYWluIGN5Y2xlJykpO1xuICAgICAgICAgIH0gZWxzZSBpZiAodGhlbiA9IGlzVGhlbmFibGUocmVzdWx0KSkge1xuICAgICAgICAgICAgdGhlbi5jYWxsKHJlc3VsdCwgcmVzb2x2ZSwgcmVqZWN0KTtcbiAgICAgICAgICB9IGVsc2UgcmVzb2x2ZShyZXN1bHQpO1xuICAgICAgICB9IGVsc2UgcmVqZWN0KHZhbHVlKTtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgaWYgKGRvbWFpbiAmJiAhZXhpdGVkKSBkb21haW4uZXhpdCgpO1xuICAgICAgICByZWplY3QoZSk7XG4gICAgICB9XG4gICAgfTtcbiAgICB3aGlsZSAoY2hhaW4ubGVuZ3RoID4gaSkgcnVuKGNoYWluW2krK10pOyAvLyB2YXJpYWJsZSBsZW5ndGggLSBjYW4ndCB1c2UgZm9yRWFjaFxuICAgIHByb21pc2UuX2MgPSBbXTtcbiAgICBwcm9taXNlLl9uID0gZmFsc2U7XG4gICAgaWYgKGlzUmVqZWN0ICYmICFwcm9taXNlLl9oKSBvblVuaGFuZGxlZChwcm9taXNlKTtcbiAgfSk7XG59O1xudmFyIG9uVW5oYW5kbGVkID0gZnVuY3Rpb24gKHByb21pc2UpIHtcbiAgdGFzay5jYWxsKGdsb2JhbCwgZnVuY3Rpb24gKCkge1xuICAgIHZhciB2YWx1ZSA9IHByb21pc2UuX3Y7XG4gICAgdmFyIHVuaGFuZGxlZCA9IGlzVW5oYW5kbGVkKHByb21pc2UpO1xuICAgIHZhciByZXN1bHQsIGhhbmRsZXIsIGNvbnNvbGU7XG4gICAgaWYgKHVuaGFuZGxlZCkge1xuICAgICAgcmVzdWx0ID0gcGVyZm9ybShmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmIChpc05vZGUpIHtcbiAgICAgICAgICBwcm9jZXNzLmVtaXQoJ3VuaGFuZGxlZFJlamVjdGlvbicsIHZhbHVlLCBwcm9taXNlKTtcbiAgICAgICAgfSBlbHNlIGlmIChoYW5kbGVyID0gZ2xvYmFsLm9udW5oYW5kbGVkcmVqZWN0aW9uKSB7XG4gICAgICAgICAgaGFuZGxlcih7IHByb21pc2U6IHByb21pc2UsIHJlYXNvbjogdmFsdWUgfSk7XG4gICAgICAgIH0gZWxzZSBpZiAoKGNvbnNvbGUgPSBnbG9iYWwuY29uc29sZSkgJiYgY29uc29sZS5lcnJvcikge1xuICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ1VuaGFuZGxlZCBwcm9taXNlIHJlamVjdGlvbicsIHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICAvLyBCcm93c2VycyBzaG91bGQgbm90IHRyaWdnZXIgYHJlamVjdGlvbkhhbmRsZWRgIGV2ZW50IGlmIGl0IHdhcyBoYW5kbGVkIGhlcmUsIE5vZGVKUyAtIHNob3VsZFxuICAgICAgcHJvbWlzZS5faCA9IGlzTm9kZSB8fCBpc1VuaGFuZGxlZChwcm9taXNlKSA/IDIgOiAxO1xuICAgIH0gcHJvbWlzZS5fYSA9IHVuZGVmaW5lZDtcbiAgICBpZiAodW5oYW5kbGVkICYmIHJlc3VsdC5lKSB0aHJvdyByZXN1bHQudjtcbiAgfSk7XG59O1xudmFyIGlzVW5oYW5kbGVkID0gZnVuY3Rpb24gKHByb21pc2UpIHtcbiAgcmV0dXJuIHByb21pc2UuX2ggIT09IDEgJiYgKHByb21pc2UuX2EgfHwgcHJvbWlzZS5fYykubGVuZ3RoID09PSAwO1xufTtcbnZhciBvbkhhbmRsZVVuaGFuZGxlZCA9IGZ1bmN0aW9uIChwcm9taXNlKSB7XG4gIHRhc2suY2FsbChnbG9iYWwsIGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgaGFuZGxlcjtcbiAgICBpZiAoaXNOb2RlKSB7XG4gICAgICBwcm9jZXNzLmVtaXQoJ3JlamVjdGlvbkhhbmRsZWQnLCBwcm9taXNlKTtcbiAgICB9IGVsc2UgaWYgKGhhbmRsZXIgPSBnbG9iYWwub25yZWplY3Rpb25oYW5kbGVkKSB7XG4gICAgICBoYW5kbGVyKHsgcHJvbWlzZTogcHJvbWlzZSwgcmVhc29uOiBwcm9taXNlLl92IH0pO1xuICAgIH1cbiAgfSk7XG59O1xudmFyICRyZWplY3QgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgdmFyIHByb21pc2UgPSB0aGlzO1xuICBpZiAocHJvbWlzZS5fZCkgcmV0dXJuO1xuICBwcm9taXNlLl9kID0gdHJ1ZTtcbiAgcHJvbWlzZSA9IHByb21pc2UuX3cgfHwgcHJvbWlzZTsgLy8gdW53cmFwXG4gIHByb21pc2UuX3YgPSB2YWx1ZTtcbiAgcHJvbWlzZS5fcyA9IDI7XG4gIGlmICghcHJvbWlzZS5fYSkgcHJvbWlzZS5fYSA9IHByb21pc2UuX2Muc2xpY2UoKTtcbiAgbm90aWZ5KHByb21pc2UsIHRydWUpO1xufTtcbnZhciAkcmVzb2x2ZSA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICB2YXIgcHJvbWlzZSA9IHRoaXM7XG4gIHZhciB0aGVuO1xuICBpZiAocHJvbWlzZS5fZCkgcmV0dXJuO1xuICBwcm9taXNlLl9kID0gdHJ1ZTtcbiAgcHJvbWlzZSA9IHByb21pc2UuX3cgfHwgcHJvbWlzZTsgLy8gdW53cmFwXG4gIHRyeSB7XG4gICAgaWYgKHByb21pc2UgPT09IHZhbHVlKSB0aHJvdyBUeXBlRXJyb3IoXCJQcm9taXNlIGNhbid0IGJlIHJlc29sdmVkIGl0c2VsZlwiKTtcbiAgICBpZiAodGhlbiA9IGlzVGhlbmFibGUodmFsdWUpKSB7XG4gICAgICBtaWNyb3Rhc2soZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgd3JhcHBlciA9IHsgX3c6IHByb21pc2UsIF9kOiBmYWxzZSB9OyAvLyB3cmFwXG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgdGhlbi5jYWxsKHZhbHVlLCBjdHgoJHJlc29sdmUsIHdyYXBwZXIsIDEpLCBjdHgoJHJlamVjdCwgd3JhcHBlciwgMSkpO1xuICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgJHJlamVjdC5jYWxsKHdyYXBwZXIsIGUpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgcHJvbWlzZS5fdiA9IHZhbHVlO1xuICAgICAgcHJvbWlzZS5fcyA9IDE7XG4gICAgICBub3RpZnkocHJvbWlzZSwgZmFsc2UpO1xuICAgIH1cbiAgfSBjYXRjaCAoZSkge1xuICAgICRyZWplY3QuY2FsbCh7IF93OiBwcm9taXNlLCBfZDogZmFsc2UgfSwgZSk7IC8vIHdyYXBcbiAgfVxufTtcblxuLy8gY29uc3RydWN0b3IgcG9seWZpbGxcbmlmICghVVNFX05BVElWRSkge1xuICAvLyAyNS40LjMuMSBQcm9taXNlKGV4ZWN1dG9yKVxuICAkUHJvbWlzZSA9IGZ1bmN0aW9uIFByb21pc2UoZXhlY3V0b3IpIHtcbiAgICBhbkluc3RhbmNlKHRoaXMsICRQcm9taXNlLCBQUk9NSVNFLCAnX2gnKTtcbiAgICBhRnVuY3Rpb24oZXhlY3V0b3IpO1xuICAgIEludGVybmFsLmNhbGwodGhpcyk7XG4gICAgdHJ5IHtcbiAgICAgIGV4ZWN1dG9yKGN0eCgkcmVzb2x2ZSwgdGhpcywgMSksIGN0eCgkcmVqZWN0LCB0aGlzLCAxKSk7XG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAkcmVqZWN0LmNhbGwodGhpcywgZXJyKTtcbiAgICB9XG4gIH07XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bnVzZWQtdmFyc1xuICBJbnRlcm5hbCA9IGZ1bmN0aW9uIFByb21pc2UoZXhlY3V0b3IpIHtcbiAgICB0aGlzLl9jID0gW107ICAgICAgICAgICAgIC8vIDwtIGF3YWl0aW5nIHJlYWN0aW9uc1xuICAgIHRoaXMuX2EgPSB1bmRlZmluZWQ7ICAgICAgLy8gPC0gY2hlY2tlZCBpbiBpc1VuaGFuZGxlZCByZWFjdGlvbnNcbiAgICB0aGlzLl9zID0gMDsgICAgICAgICAgICAgIC8vIDwtIHN0YXRlXG4gICAgdGhpcy5fZCA9IGZhbHNlOyAgICAgICAgICAvLyA8LSBkb25lXG4gICAgdGhpcy5fdiA9IHVuZGVmaW5lZDsgICAgICAvLyA8LSB2YWx1ZVxuICAgIHRoaXMuX2ggPSAwOyAgICAgICAgICAgICAgLy8gPC0gcmVqZWN0aW9uIHN0YXRlLCAwIC0gZGVmYXVsdCwgMSAtIGhhbmRsZWQsIDIgLSB1bmhhbmRsZWRcbiAgICB0aGlzLl9uID0gZmFsc2U7ICAgICAgICAgIC8vIDwtIG5vdGlmeVxuICB9O1xuICBJbnRlcm5hbC5wcm90b3R5cGUgPSByZXF1aXJlKCcuL19yZWRlZmluZS1hbGwnKSgkUHJvbWlzZS5wcm90b3R5cGUsIHtcbiAgICAvLyAyNS40LjUuMyBQcm9taXNlLnByb3RvdHlwZS50aGVuKG9uRnVsZmlsbGVkLCBvblJlamVjdGVkKVxuICAgIHRoZW46IGZ1bmN0aW9uIHRoZW4ob25GdWxmaWxsZWQsIG9uUmVqZWN0ZWQpIHtcbiAgICAgIHZhciByZWFjdGlvbiA9IG5ld1Byb21pc2VDYXBhYmlsaXR5KHNwZWNpZXNDb25zdHJ1Y3Rvcih0aGlzLCAkUHJvbWlzZSkpO1xuICAgICAgcmVhY3Rpb24ub2sgPSB0eXBlb2Ygb25GdWxmaWxsZWQgPT0gJ2Z1bmN0aW9uJyA/IG9uRnVsZmlsbGVkIDogdHJ1ZTtcbiAgICAgIHJlYWN0aW9uLmZhaWwgPSB0eXBlb2Ygb25SZWplY3RlZCA9PSAnZnVuY3Rpb24nICYmIG9uUmVqZWN0ZWQ7XG4gICAgICByZWFjdGlvbi5kb21haW4gPSBpc05vZGUgPyBwcm9jZXNzLmRvbWFpbiA6IHVuZGVmaW5lZDtcbiAgICAgIHRoaXMuX2MucHVzaChyZWFjdGlvbik7XG4gICAgICBpZiAodGhpcy5fYSkgdGhpcy5fYS5wdXNoKHJlYWN0aW9uKTtcbiAgICAgIGlmICh0aGlzLl9zKSBub3RpZnkodGhpcywgZmFsc2UpO1xuICAgICAgcmV0dXJuIHJlYWN0aW9uLnByb21pc2U7XG4gICAgfSxcbiAgICAvLyAyNS40LjUuMSBQcm9taXNlLnByb3RvdHlwZS5jYXRjaChvblJlamVjdGVkKVxuICAgICdjYXRjaCc6IGZ1bmN0aW9uIChvblJlamVjdGVkKSB7XG4gICAgICByZXR1cm4gdGhpcy50aGVuKHVuZGVmaW5lZCwgb25SZWplY3RlZCk7XG4gICAgfVxuICB9KTtcbiAgT3duUHJvbWlzZUNhcGFiaWxpdHkgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHByb21pc2UgPSBuZXcgSW50ZXJuYWwoKTtcbiAgICB0aGlzLnByb21pc2UgPSBwcm9taXNlO1xuICAgIHRoaXMucmVzb2x2ZSA9IGN0eCgkcmVzb2x2ZSwgcHJvbWlzZSwgMSk7XG4gICAgdGhpcy5yZWplY3QgPSBjdHgoJHJlamVjdCwgcHJvbWlzZSwgMSk7XG4gIH07XG4gIG5ld1Byb21pc2VDYXBhYmlsaXR5TW9kdWxlLmYgPSBuZXdQcm9taXNlQ2FwYWJpbGl0eSA9IGZ1bmN0aW9uIChDKSB7XG4gICAgcmV0dXJuIEMgPT09ICRQcm9taXNlIHx8IEMgPT09IFdyYXBwZXJcbiAgICAgID8gbmV3IE93blByb21pc2VDYXBhYmlsaXR5KEMpXG4gICAgICA6IG5ld0dlbmVyaWNQcm9taXNlQ2FwYWJpbGl0eShDKTtcbiAgfTtcbn1cblxuJGV4cG9ydCgkZXhwb3J0LkcgKyAkZXhwb3J0LlcgKyAkZXhwb3J0LkYgKiAhVVNFX05BVElWRSwgeyBQcm9taXNlOiAkUHJvbWlzZSB9KTtcbnJlcXVpcmUoJy4vX3NldC10by1zdHJpbmctdGFnJykoJFByb21pc2UsIFBST01JU0UpO1xucmVxdWlyZSgnLi9fc2V0LXNwZWNpZXMnKShQUk9NSVNFKTtcbldyYXBwZXIgPSByZXF1aXJlKCcuL19jb3JlJylbUFJPTUlTRV07XG5cbi8vIHN0YXRpY3NcbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogIVVTRV9OQVRJVkUsIFBST01JU0UsIHtcbiAgLy8gMjUuNC40LjUgUHJvbWlzZS5yZWplY3QocilcbiAgcmVqZWN0OiBmdW5jdGlvbiByZWplY3Qocikge1xuICAgIHZhciBjYXBhYmlsaXR5ID0gbmV3UHJvbWlzZUNhcGFiaWxpdHkodGhpcyk7XG4gICAgdmFyICQkcmVqZWN0ID0gY2FwYWJpbGl0eS5yZWplY3Q7XG4gICAgJCRyZWplY3Qocik7XG4gICAgcmV0dXJuIGNhcGFiaWxpdHkucHJvbWlzZTtcbiAgfVxufSk7XG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqIChMSUJSQVJZIHx8ICFVU0VfTkFUSVZFKSwgUFJPTUlTRSwge1xuICAvLyAyNS40LjQuNiBQcm9taXNlLnJlc29sdmUoeClcbiAgcmVzb2x2ZTogZnVuY3Rpb24gcmVzb2x2ZSh4KSB7XG4gICAgcmV0dXJuIHByb21pc2VSZXNvbHZlKExJQlJBUlkgJiYgdGhpcyA9PT0gV3JhcHBlciA/ICRQcm9taXNlIDogdGhpcywgeCk7XG4gIH1cbn0pO1xuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAhKFVTRV9OQVRJVkUgJiYgcmVxdWlyZSgnLi9faXRlci1kZXRlY3QnKShmdW5jdGlvbiAoaXRlcikge1xuICAkUHJvbWlzZS5hbGwoaXRlcilbJ2NhdGNoJ10oZW1wdHkpO1xufSkpLCBQUk9NSVNFLCB7XG4gIC8vIDI1LjQuNC4xIFByb21pc2UuYWxsKGl0ZXJhYmxlKVxuICBhbGw6IGZ1bmN0aW9uIGFsbChpdGVyYWJsZSkge1xuICAgIHZhciBDID0gdGhpcztcbiAgICB2YXIgY2FwYWJpbGl0eSA9IG5ld1Byb21pc2VDYXBhYmlsaXR5KEMpO1xuICAgIHZhciByZXNvbHZlID0gY2FwYWJpbGl0eS5yZXNvbHZlO1xuICAgIHZhciByZWplY3QgPSBjYXBhYmlsaXR5LnJlamVjdDtcbiAgICB2YXIgcmVzdWx0ID0gcGVyZm9ybShmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgdmFsdWVzID0gW107XG4gICAgICB2YXIgaW5kZXggPSAwO1xuICAgICAgdmFyIHJlbWFpbmluZyA9IDE7XG4gICAgICBmb3JPZihpdGVyYWJsZSwgZmFsc2UsIGZ1bmN0aW9uIChwcm9taXNlKSB7XG4gICAgICAgIHZhciAkaW5kZXggPSBpbmRleCsrO1xuICAgICAgICB2YXIgYWxyZWFkeUNhbGxlZCA9IGZhbHNlO1xuICAgICAgICB2YWx1ZXMucHVzaCh1bmRlZmluZWQpO1xuICAgICAgICByZW1haW5pbmcrKztcbiAgICAgICAgQy5yZXNvbHZlKHByb21pc2UpLnRoZW4oZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgaWYgKGFscmVhZHlDYWxsZWQpIHJldHVybjtcbiAgICAgICAgICBhbHJlYWR5Q2FsbGVkID0gdHJ1ZTtcbiAgICAgICAgICB2YWx1ZXNbJGluZGV4XSA9IHZhbHVlO1xuICAgICAgICAgIC0tcmVtYWluaW5nIHx8IHJlc29sdmUodmFsdWVzKTtcbiAgICAgICAgfSwgcmVqZWN0KTtcbiAgICAgIH0pO1xuICAgICAgLS1yZW1haW5pbmcgfHwgcmVzb2x2ZSh2YWx1ZXMpO1xuICAgIH0pO1xuICAgIGlmIChyZXN1bHQuZSkgcmVqZWN0KHJlc3VsdC52KTtcbiAgICByZXR1cm4gY2FwYWJpbGl0eS5wcm9taXNlO1xuICB9LFxuICAvLyAyNS40LjQuNCBQcm9taXNlLnJhY2UoaXRlcmFibGUpXG4gIHJhY2U6IGZ1bmN0aW9uIHJhY2UoaXRlcmFibGUpIHtcbiAgICB2YXIgQyA9IHRoaXM7XG4gICAgdmFyIGNhcGFiaWxpdHkgPSBuZXdQcm9taXNlQ2FwYWJpbGl0eShDKTtcbiAgICB2YXIgcmVqZWN0ID0gY2FwYWJpbGl0eS5yZWplY3Q7XG4gICAgdmFyIHJlc3VsdCA9IHBlcmZvcm0oZnVuY3Rpb24gKCkge1xuICAgICAgZm9yT2YoaXRlcmFibGUsIGZhbHNlLCBmdW5jdGlvbiAocHJvbWlzZSkge1xuICAgICAgICBDLnJlc29sdmUocHJvbWlzZSkudGhlbihjYXBhYmlsaXR5LnJlc29sdmUsIHJlamVjdCk7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgICBpZiAocmVzdWx0LmUpIHJlamVjdChyZXN1bHQudik7XG4gICAgcmV0dXJuIGNhcGFiaWxpdHkucHJvbWlzZTtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG4vLyAyNS40LjEuNSBOZXdQcm9taXNlQ2FwYWJpbGl0eShDKVxudmFyIGFGdW5jdGlvbiA9IHJlcXVpcmUoJy4vX2EtZnVuY3Rpb24nKTtcblxuZnVuY3Rpb24gUHJvbWlzZUNhcGFiaWxpdHkoQykge1xuICB2YXIgcmVzb2x2ZSwgcmVqZWN0O1xuICB0aGlzLnByb21pc2UgPSBuZXcgQyhmdW5jdGlvbiAoJCRyZXNvbHZlLCAkJHJlamVjdCkge1xuICAgIGlmIChyZXNvbHZlICE9PSB1bmRlZmluZWQgfHwgcmVqZWN0ICE9PSB1bmRlZmluZWQpIHRocm93IFR5cGVFcnJvcignQmFkIFByb21pc2UgY29uc3RydWN0b3InKTtcbiAgICByZXNvbHZlID0gJCRyZXNvbHZlO1xuICAgIHJlamVjdCA9ICQkcmVqZWN0O1xuICB9KTtcbiAgdGhpcy5yZXNvbHZlID0gYUZ1bmN0aW9uKHJlc29sdmUpO1xuICB0aGlzLnJlamVjdCA9IGFGdW5jdGlvbihyZWplY3QpO1xufVxuXG5tb2R1bGUuZXhwb3J0cy5mID0gZnVuY3Rpb24gKEMpIHtcbiAgcmV0dXJuIG5ldyBQcm9taXNlQ2FwYWJpbGl0eShDKTtcbn07XG4iLCJ2YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xudmFyIG5ld1Byb21pc2VDYXBhYmlsaXR5ID0gcmVxdWlyZSgnLi9fbmV3LXByb21pc2UtY2FwYWJpbGl0eScpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChDLCB4KSB7XG4gIGFuT2JqZWN0KEMpO1xuICBpZiAoaXNPYmplY3QoeCkgJiYgeC5jb25zdHJ1Y3RvciA9PT0gQykgcmV0dXJuIHg7XG4gIHZhciBwcm9taXNlQ2FwYWJpbGl0eSA9IG5ld1Byb21pc2VDYXBhYmlsaXR5LmYoQyk7XG4gIHZhciByZXNvbHZlID0gcHJvbWlzZUNhcGFiaWxpdHkucmVzb2x2ZTtcbiAgcmVzb2x2ZSh4KTtcbiAgcmV0dXJuIHByb21pc2VDYXBhYmlsaXR5LnByb21pc2U7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGRQID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJykuZjtcbnZhciBjcmVhdGUgPSByZXF1aXJlKCcuL19vYmplY3QtY3JlYXRlJyk7XG52YXIgcmVkZWZpbmVBbGwgPSByZXF1aXJlKCcuL19yZWRlZmluZS1hbGwnKTtcbnZhciBjdHggPSByZXF1aXJlKCcuL19jdHgnKTtcbnZhciBhbkluc3RhbmNlID0gcmVxdWlyZSgnLi9fYW4taW5zdGFuY2UnKTtcbnZhciBmb3JPZiA9IHJlcXVpcmUoJy4vX2Zvci1vZicpO1xudmFyICRpdGVyRGVmaW5lID0gcmVxdWlyZSgnLi9faXRlci1kZWZpbmUnKTtcbnZhciBzdGVwID0gcmVxdWlyZSgnLi9faXRlci1zdGVwJyk7XG52YXIgc2V0U3BlY2llcyA9IHJlcXVpcmUoJy4vX3NldC1zcGVjaWVzJyk7XG52YXIgREVTQ1JJUFRPUlMgPSByZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpO1xudmFyIGZhc3RLZXkgPSByZXF1aXJlKCcuL19tZXRhJykuZmFzdEtleTtcbnZhciB2YWxpZGF0ZSA9IHJlcXVpcmUoJy4vX3ZhbGlkYXRlLWNvbGxlY3Rpb24nKTtcbnZhciBTSVpFID0gREVTQ1JJUFRPUlMgPyAnX3MnIDogJ3NpemUnO1xuXG52YXIgZ2V0RW50cnkgPSBmdW5jdGlvbiAodGhhdCwga2V5KSB7XG4gIC8vIGZhc3QgY2FzZVxuICB2YXIgaW5kZXggPSBmYXN0S2V5KGtleSk7XG4gIHZhciBlbnRyeTtcbiAgaWYgKGluZGV4ICE9PSAnRicpIHJldHVybiB0aGF0Ll9pW2luZGV4XTtcbiAgLy8gZnJvemVuIG9iamVjdCBjYXNlXG4gIGZvciAoZW50cnkgPSB0aGF0Ll9mOyBlbnRyeTsgZW50cnkgPSBlbnRyeS5uKSB7XG4gICAgaWYgKGVudHJ5LmsgPT0ga2V5KSByZXR1cm4gZW50cnk7XG4gIH1cbn07XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBnZXRDb25zdHJ1Y3RvcjogZnVuY3Rpb24gKHdyYXBwZXIsIE5BTUUsIElTX01BUCwgQURERVIpIHtcbiAgICB2YXIgQyA9IHdyYXBwZXIoZnVuY3Rpb24gKHRoYXQsIGl0ZXJhYmxlKSB7XG4gICAgICBhbkluc3RhbmNlKHRoYXQsIEMsIE5BTUUsICdfaScpO1xuICAgICAgdGhhdC5fdCA9IE5BTUU7ICAgICAgICAgLy8gY29sbGVjdGlvbiB0eXBlXG4gICAgICB0aGF0Ll9pID0gY3JlYXRlKG51bGwpOyAvLyBpbmRleFxuICAgICAgdGhhdC5fZiA9IHVuZGVmaW5lZDsgICAgLy8gZmlyc3QgZW50cnlcbiAgICAgIHRoYXQuX2wgPSB1bmRlZmluZWQ7ICAgIC8vIGxhc3QgZW50cnlcbiAgICAgIHRoYXRbU0laRV0gPSAwOyAgICAgICAgIC8vIHNpemVcbiAgICAgIGlmIChpdGVyYWJsZSAhPSB1bmRlZmluZWQpIGZvck9mKGl0ZXJhYmxlLCBJU19NQVAsIHRoYXRbQURERVJdLCB0aGF0KTtcbiAgICB9KTtcbiAgICByZWRlZmluZUFsbChDLnByb3RvdHlwZSwge1xuICAgICAgLy8gMjMuMS4zLjEgTWFwLnByb3RvdHlwZS5jbGVhcigpXG4gICAgICAvLyAyMy4yLjMuMiBTZXQucHJvdG90eXBlLmNsZWFyKClcbiAgICAgIGNsZWFyOiBmdW5jdGlvbiBjbGVhcigpIHtcbiAgICAgICAgZm9yICh2YXIgdGhhdCA9IHZhbGlkYXRlKHRoaXMsIE5BTUUpLCBkYXRhID0gdGhhdC5faSwgZW50cnkgPSB0aGF0Ll9mOyBlbnRyeTsgZW50cnkgPSBlbnRyeS5uKSB7XG4gICAgICAgICAgZW50cnkuciA9IHRydWU7XG4gICAgICAgICAgaWYgKGVudHJ5LnApIGVudHJ5LnAgPSBlbnRyeS5wLm4gPSB1bmRlZmluZWQ7XG4gICAgICAgICAgZGVsZXRlIGRhdGFbZW50cnkuaV07XG4gICAgICAgIH1cbiAgICAgICAgdGhhdC5fZiA9IHRoYXQuX2wgPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoYXRbU0laRV0gPSAwO1xuICAgICAgfSxcbiAgICAgIC8vIDIzLjEuMy4zIE1hcC5wcm90b3R5cGUuZGVsZXRlKGtleSlcbiAgICAgIC8vIDIzLjIuMy40IFNldC5wcm90b3R5cGUuZGVsZXRlKHZhbHVlKVxuICAgICAgJ2RlbGV0ZSc6IGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgdmFyIHRoYXQgPSB2YWxpZGF0ZSh0aGlzLCBOQU1FKTtcbiAgICAgICAgdmFyIGVudHJ5ID0gZ2V0RW50cnkodGhhdCwga2V5KTtcbiAgICAgICAgaWYgKGVudHJ5KSB7XG4gICAgICAgICAgdmFyIG5leHQgPSBlbnRyeS5uO1xuICAgICAgICAgIHZhciBwcmV2ID0gZW50cnkucDtcbiAgICAgICAgICBkZWxldGUgdGhhdC5faVtlbnRyeS5pXTtcbiAgICAgICAgICBlbnRyeS5yID0gdHJ1ZTtcbiAgICAgICAgICBpZiAocHJldikgcHJldi5uID0gbmV4dDtcbiAgICAgICAgICBpZiAobmV4dCkgbmV4dC5wID0gcHJldjtcbiAgICAgICAgICBpZiAodGhhdC5fZiA9PSBlbnRyeSkgdGhhdC5fZiA9IG5leHQ7XG4gICAgICAgICAgaWYgKHRoYXQuX2wgPT0gZW50cnkpIHRoYXQuX2wgPSBwcmV2O1xuICAgICAgICAgIHRoYXRbU0laRV0tLTtcbiAgICAgICAgfSByZXR1cm4gISFlbnRyeTtcbiAgICAgIH0sXG4gICAgICAvLyAyMy4yLjMuNiBTZXQucHJvdG90eXBlLmZvckVhY2goY2FsbGJhY2tmbiwgdGhpc0FyZyA9IHVuZGVmaW5lZClcbiAgICAgIC8vIDIzLjEuMy41IE1hcC5wcm90b3R5cGUuZm9yRWFjaChjYWxsYmFja2ZuLCB0aGlzQXJnID0gdW5kZWZpbmVkKVxuICAgICAgZm9yRWFjaDogZnVuY3Rpb24gZm9yRWFjaChjYWxsYmFja2ZuIC8qICwgdGhhdCA9IHVuZGVmaW5lZCAqLykge1xuICAgICAgICB2YWxpZGF0ZSh0aGlzLCBOQU1FKTtcbiAgICAgICAgdmFyIGYgPSBjdHgoY2FsbGJhY2tmbiwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQsIDMpO1xuICAgICAgICB2YXIgZW50cnk7XG4gICAgICAgIHdoaWxlIChlbnRyeSA9IGVudHJ5ID8gZW50cnkubiA6IHRoaXMuX2YpIHtcbiAgICAgICAgICBmKGVudHJ5LnYsIGVudHJ5LmssIHRoaXMpO1xuICAgICAgICAgIC8vIHJldmVydCB0byB0aGUgbGFzdCBleGlzdGluZyBlbnRyeVxuICAgICAgICAgIHdoaWxlIChlbnRyeSAmJiBlbnRyeS5yKSBlbnRyeSA9IGVudHJ5LnA7XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICAvLyAyMy4xLjMuNyBNYXAucHJvdG90eXBlLmhhcyhrZXkpXG4gICAgICAvLyAyMy4yLjMuNyBTZXQucHJvdG90eXBlLmhhcyh2YWx1ZSlcbiAgICAgIGhhczogZnVuY3Rpb24gaGFzKGtleSkge1xuICAgICAgICByZXR1cm4gISFnZXRFbnRyeSh2YWxpZGF0ZSh0aGlzLCBOQU1FKSwga2V5KTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICBpZiAoREVTQ1JJUFRPUlMpIGRQKEMucHJvdG90eXBlLCAnc2l6ZScsIHtcbiAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdmFsaWRhdGUodGhpcywgTkFNRSlbU0laRV07XG4gICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIEM7XG4gIH0sXG4gIGRlZjogZnVuY3Rpb24gKHRoYXQsIGtleSwgdmFsdWUpIHtcbiAgICB2YXIgZW50cnkgPSBnZXRFbnRyeSh0aGF0LCBrZXkpO1xuICAgIHZhciBwcmV2LCBpbmRleDtcbiAgICAvLyBjaGFuZ2UgZXhpc3RpbmcgZW50cnlcbiAgICBpZiAoZW50cnkpIHtcbiAgICAgIGVudHJ5LnYgPSB2YWx1ZTtcbiAgICAvLyBjcmVhdGUgbmV3IGVudHJ5XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoYXQuX2wgPSBlbnRyeSA9IHtcbiAgICAgICAgaTogaW5kZXggPSBmYXN0S2V5KGtleSwgdHJ1ZSksIC8vIDwtIGluZGV4XG4gICAgICAgIGs6IGtleSwgICAgICAgICAgICAgICAgICAgICAgICAvLyA8LSBrZXlcbiAgICAgICAgdjogdmFsdWUsICAgICAgICAgICAgICAgICAgICAgIC8vIDwtIHZhbHVlXG4gICAgICAgIHA6IHByZXYgPSB0aGF0Ll9sLCAgICAgICAgICAgICAvLyA8LSBwcmV2aW91cyBlbnRyeVxuICAgICAgICBuOiB1bmRlZmluZWQsICAgICAgICAgICAgICAgICAgLy8gPC0gbmV4dCBlbnRyeVxuICAgICAgICByOiBmYWxzZSAgICAgICAgICAgICAgICAgICAgICAgLy8gPC0gcmVtb3ZlZFxuICAgICAgfTtcbiAgICAgIGlmICghdGhhdC5fZikgdGhhdC5fZiA9IGVudHJ5O1xuICAgICAgaWYgKHByZXYpIHByZXYubiA9IGVudHJ5O1xuICAgICAgdGhhdFtTSVpFXSsrO1xuICAgICAgLy8gYWRkIHRvIGluZGV4XG4gICAgICBpZiAoaW5kZXggIT09ICdGJykgdGhhdC5faVtpbmRleF0gPSBlbnRyeTtcbiAgICB9IHJldHVybiB0aGF0O1xuICB9LFxuICBnZXRFbnRyeTogZ2V0RW50cnksXG4gIHNldFN0cm9uZzogZnVuY3Rpb24gKEMsIE5BTUUsIElTX01BUCkge1xuICAgIC8vIGFkZCAua2V5cywgLnZhbHVlcywgLmVudHJpZXMsIFtAQGl0ZXJhdG9yXVxuICAgIC8vIDIzLjEuMy40LCAyMy4xLjMuOCwgMjMuMS4zLjExLCAyMy4xLjMuMTIsIDIzLjIuMy41LCAyMy4yLjMuOCwgMjMuMi4zLjEwLCAyMy4yLjMuMTFcbiAgICAkaXRlckRlZmluZShDLCBOQU1FLCBmdW5jdGlvbiAoaXRlcmF0ZWQsIGtpbmQpIHtcbiAgICAgIHRoaXMuX3QgPSB2YWxpZGF0ZShpdGVyYXRlZCwgTkFNRSk7IC8vIHRhcmdldFxuICAgICAgdGhpcy5fayA9IGtpbmQ7ICAgICAgICAgICAgICAgICAgICAgLy8ga2luZFxuICAgICAgdGhpcy5fbCA9IHVuZGVmaW5lZDsgICAgICAgICAgICAgICAgLy8gcHJldmlvdXNcbiAgICB9LCBmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgdGhhdCA9IHRoaXM7XG4gICAgICB2YXIga2luZCA9IHRoYXQuX2s7XG4gICAgICB2YXIgZW50cnkgPSB0aGF0Ll9sO1xuICAgICAgLy8gcmV2ZXJ0IHRvIHRoZSBsYXN0IGV4aXN0aW5nIGVudHJ5XG4gICAgICB3aGlsZSAoZW50cnkgJiYgZW50cnkucikgZW50cnkgPSBlbnRyeS5wO1xuICAgICAgLy8gZ2V0IG5leHQgZW50cnlcbiAgICAgIGlmICghdGhhdC5fdCB8fCAhKHRoYXQuX2wgPSBlbnRyeSA9IGVudHJ5ID8gZW50cnkubiA6IHRoYXQuX3QuX2YpKSB7XG4gICAgICAgIC8vIG9yIGZpbmlzaCB0aGUgaXRlcmF0aW9uXG4gICAgICAgIHRoYXQuX3QgPSB1bmRlZmluZWQ7XG4gICAgICAgIHJldHVybiBzdGVwKDEpO1xuICAgICAgfVxuICAgICAgLy8gcmV0dXJuIHN0ZXAgYnkga2luZFxuICAgICAgaWYgKGtpbmQgPT0gJ2tleXMnKSByZXR1cm4gc3RlcCgwLCBlbnRyeS5rKTtcbiAgICAgIGlmIChraW5kID09ICd2YWx1ZXMnKSByZXR1cm4gc3RlcCgwLCBlbnRyeS52KTtcbiAgICAgIHJldHVybiBzdGVwKDAsIFtlbnRyeS5rLCBlbnRyeS52XSk7XG4gICAgfSwgSVNfTUFQID8gJ2VudHJpZXMnIDogJ3ZhbHVlcycsICFJU19NQVAsIHRydWUpO1xuXG4gICAgLy8gYWRkIFtAQHNwZWNpZXNdLCAyMy4xLjIuMiwgMjMuMi4yLjJcbiAgICBzZXRTcGVjaWVzKE5BTUUpO1xuICB9XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIHJlZGVmaW5lQWxsID0gcmVxdWlyZSgnLi9fcmVkZWZpbmUtYWxsJyk7XG52YXIgZ2V0V2VhayA9IHJlcXVpcmUoJy4vX21ldGEnKS5nZXRXZWFrO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbnZhciBhbkluc3RhbmNlID0gcmVxdWlyZSgnLi9fYW4taW5zdGFuY2UnKTtcbnZhciBmb3JPZiA9IHJlcXVpcmUoJy4vX2Zvci1vZicpO1xudmFyIGNyZWF0ZUFycmF5TWV0aG9kID0gcmVxdWlyZSgnLi9fYXJyYXktbWV0aG9kcycpO1xudmFyICRoYXMgPSByZXF1aXJlKCcuL19oYXMnKTtcbnZhciB2YWxpZGF0ZSA9IHJlcXVpcmUoJy4vX3ZhbGlkYXRlLWNvbGxlY3Rpb24nKTtcbnZhciBhcnJheUZpbmQgPSBjcmVhdGVBcnJheU1ldGhvZCg1KTtcbnZhciBhcnJheUZpbmRJbmRleCA9IGNyZWF0ZUFycmF5TWV0aG9kKDYpO1xudmFyIGlkID0gMDtcblxuLy8gZmFsbGJhY2sgZm9yIHVuY2F1Z2h0IGZyb3plbiBrZXlzXG52YXIgdW5jYXVnaHRGcm96ZW5TdG9yZSA9IGZ1bmN0aW9uICh0aGF0KSB7XG4gIHJldHVybiB0aGF0Ll9sIHx8ICh0aGF0Ll9sID0gbmV3IFVuY2F1Z2h0RnJvemVuU3RvcmUoKSk7XG59O1xudmFyIFVuY2F1Z2h0RnJvemVuU3RvcmUgPSBmdW5jdGlvbiAoKSB7XG4gIHRoaXMuYSA9IFtdO1xufTtcbnZhciBmaW5kVW5jYXVnaHRGcm96ZW4gPSBmdW5jdGlvbiAoc3RvcmUsIGtleSkge1xuICByZXR1cm4gYXJyYXlGaW5kKHN0b3JlLmEsIGZ1bmN0aW9uIChpdCkge1xuICAgIHJldHVybiBpdFswXSA9PT0ga2V5O1xuICB9KTtcbn07XG5VbmNhdWdodEZyb3plblN0b3JlLnByb3RvdHlwZSA9IHtcbiAgZ2V0OiBmdW5jdGlvbiAoa2V5KSB7XG4gICAgdmFyIGVudHJ5ID0gZmluZFVuY2F1Z2h0RnJvemVuKHRoaXMsIGtleSk7XG4gICAgaWYgKGVudHJ5KSByZXR1cm4gZW50cnlbMV07XG4gIH0sXG4gIGhhczogZnVuY3Rpb24gKGtleSkge1xuICAgIHJldHVybiAhIWZpbmRVbmNhdWdodEZyb3plbih0aGlzLCBrZXkpO1xuICB9LFxuICBzZXQ6IGZ1bmN0aW9uIChrZXksIHZhbHVlKSB7XG4gICAgdmFyIGVudHJ5ID0gZmluZFVuY2F1Z2h0RnJvemVuKHRoaXMsIGtleSk7XG4gICAgaWYgKGVudHJ5KSBlbnRyeVsxXSA9IHZhbHVlO1xuICAgIGVsc2UgdGhpcy5hLnB1c2goW2tleSwgdmFsdWVdKTtcbiAgfSxcbiAgJ2RlbGV0ZSc6IGZ1bmN0aW9uIChrZXkpIHtcbiAgICB2YXIgaW5kZXggPSBhcnJheUZpbmRJbmRleCh0aGlzLmEsIGZ1bmN0aW9uIChpdCkge1xuICAgICAgcmV0dXJuIGl0WzBdID09PSBrZXk7XG4gICAgfSk7XG4gICAgaWYgKH5pbmRleCkgdGhpcy5hLnNwbGljZShpbmRleCwgMSk7XG4gICAgcmV0dXJuICEhfmluZGV4O1xuICB9XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgZ2V0Q29uc3RydWN0b3I6IGZ1bmN0aW9uICh3cmFwcGVyLCBOQU1FLCBJU19NQVAsIEFEREVSKSB7XG4gICAgdmFyIEMgPSB3cmFwcGVyKGZ1bmN0aW9uICh0aGF0LCBpdGVyYWJsZSkge1xuICAgICAgYW5JbnN0YW5jZSh0aGF0LCBDLCBOQU1FLCAnX2knKTtcbiAgICAgIHRoYXQuX3QgPSBOQU1FOyAgICAgIC8vIGNvbGxlY3Rpb24gdHlwZVxuICAgICAgdGhhdC5faSA9IGlkKys7ICAgICAgLy8gY29sbGVjdGlvbiBpZFxuICAgICAgdGhhdC5fbCA9IHVuZGVmaW5lZDsgLy8gbGVhayBzdG9yZSBmb3IgdW5jYXVnaHQgZnJvemVuIG9iamVjdHNcbiAgICAgIGlmIChpdGVyYWJsZSAhPSB1bmRlZmluZWQpIGZvck9mKGl0ZXJhYmxlLCBJU19NQVAsIHRoYXRbQURERVJdLCB0aGF0KTtcbiAgICB9KTtcbiAgICByZWRlZmluZUFsbChDLnByb3RvdHlwZSwge1xuICAgICAgLy8gMjMuMy4zLjIgV2Vha01hcC5wcm90b3R5cGUuZGVsZXRlKGtleSlcbiAgICAgIC8vIDIzLjQuMy4zIFdlYWtTZXQucHJvdG90eXBlLmRlbGV0ZSh2YWx1ZSlcbiAgICAgICdkZWxldGUnOiBmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgIGlmICghaXNPYmplY3Qoa2V5KSkgcmV0dXJuIGZhbHNlO1xuICAgICAgICB2YXIgZGF0YSA9IGdldFdlYWsoa2V5KTtcbiAgICAgICAgaWYgKGRhdGEgPT09IHRydWUpIHJldHVybiB1bmNhdWdodEZyb3plblN0b3JlKHZhbGlkYXRlKHRoaXMsIE5BTUUpKVsnZGVsZXRlJ10oa2V5KTtcbiAgICAgICAgcmV0dXJuIGRhdGEgJiYgJGhhcyhkYXRhLCB0aGlzLl9pKSAmJiBkZWxldGUgZGF0YVt0aGlzLl9pXTtcbiAgICAgIH0sXG4gICAgICAvLyAyMy4zLjMuNCBXZWFrTWFwLnByb3RvdHlwZS5oYXMoa2V5KVxuICAgICAgLy8gMjMuNC4zLjQgV2Vha1NldC5wcm90b3R5cGUuaGFzKHZhbHVlKVxuICAgICAgaGFzOiBmdW5jdGlvbiBoYXMoa2V5KSB7XG4gICAgICAgIGlmICghaXNPYmplY3Qoa2V5KSkgcmV0dXJuIGZhbHNlO1xuICAgICAgICB2YXIgZGF0YSA9IGdldFdlYWsoa2V5KTtcbiAgICAgICAgaWYgKGRhdGEgPT09IHRydWUpIHJldHVybiB1bmNhdWdodEZyb3plblN0b3JlKHZhbGlkYXRlKHRoaXMsIE5BTUUpKS5oYXMoa2V5KTtcbiAgICAgICAgcmV0dXJuIGRhdGEgJiYgJGhhcyhkYXRhLCB0aGlzLl9pKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gQztcbiAgfSxcbiAgZGVmOiBmdW5jdGlvbiAodGhhdCwga2V5LCB2YWx1ZSkge1xuICAgIHZhciBkYXRhID0gZ2V0V2Vhayhhbk9iamVjdChrZXkpLCB0cnVlKTtcbiAgICBpZiAoZGF0YSA9PT0gdHJ1ZSkgdW5jYXVnaHRGcm96ZW5TdG9yZSh0aGF0KS5zZXQoa2V5LCB2YWx1ZSk7XG4gICAgZWxzZSBkYXRhW3RoYXQuX2ldID0gdmFsdWU7XG4gICAgcmV0dXJuIHRoYXQ7XG4gIH0sXG4gIHVmc3RvcmU6IHVuY2F1Z2h0RnJvemVuU3RvcmVcbn07XG4iLCIvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy10b2luZGV4XG52YXIgdG9JbnRlZ2VyID0gcmVxdWlyZSgnLi9fdG8taW50ZWdlcicpO1xudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi9fdG8tbGVuZ3RoJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICBpZiAoaXQgPT09IHVuZGVmaW5lZCkgcmV0dXJuIDA7XG4gIHZhciBudW1iZXIgPSB0b0ludGVnZXIoaXQpO1xuICB2YXIgbGVuZ3RoID0gdG9MZW5ndGgobnVtYmVyKTtcbiAgaWYgKG51bWJlciAhPT0gbGVuZ3RoKSB0aHJvdyBSYW5nZUVycm9yKCdXcm9uZyBsZW5ndGghJyk7XG4gIHJldHVybiBsZW5ndGg7XG59O1xuIiwiLy8gYWxsIG9iamVjdCBrZXlzLCBpbmNsdWRlcyBub24tZW51bWVyYWJsZSBhbmQgc3ltYm9sc1xudmFyIGdPUE4gPSByZXF1aXJlKCcuL19vYmplY3QtZ29wbicpO1xudmFyIGdPUFMgPSByZXF1aXJlKCcuL19vYmplY3QtZ29wcycpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgUmVmbGVjdCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpLlJlZmxlY3Q7XG5tb2R1bGUuZXhwb3J0cyA9IFJlZmxlY3QgJiYgUmVmbGVjdC5vd25LZXlzIHx8IGZ1bmN0aW9uIG93bktleXMoaXQpIHtcbiAgdmFyIGtleXMgPSBnT1BOLmYoYW5PYmplY3QoaXQpKTtcbiAgdmFyIGdldFN5bWJvbHMgPSBnT1BTLmY7XG4gIHJldHVybiBnZXRTeW1ib2xzID8ga2V5cy5jb25jYXQoZ2V0U3ltYm9scyhpdCkpIDoga2V5cztcbn07XG4iLCIvLyBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9wcm9wb3NhbC1zdHJpbmctcGFkLXN0YXJ0LWVuZFxudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi9fdG8tbGVuZ3RoJyk7XG52YXIgcmVwZWF0ID0gcmVxdWlyZSgnLi9fc3RyaW5nLXJlcGVhdCcpO1xudmFyIGRlZmluZWQgPSByZXF1aXJlKCcuL19kZWZpbmVkJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKHRoYXQsIG1heExlbmd0aCwgZmlsbFN0cmluZywgbGVmdCkge1xuICB2YXIgUyA9IFN0cmluZyhkZWZpbmVkKHRoYXQpKTtcbiAgdmFyIHN0cmluZ0xlbmd0aCA9IFMubGVuZ3RoO1xuICB2YXIgZmlsbFN0ciA9IGZpbGxTdHJpbmcgPT09IHVuZGVmaW5lZCA/ICcgJyA6IFN0cmluZyhmaWxsU3RyaW5nKTtcbiAgdmFyIGludE1heExlbmd0aCA9IHRvTGVuZ3RoKG1heExlbmd0aCk7XG4gIGlmIChpbnRNYXhMZW5ndGggPD0gc3RyaW5nTGVuZ3RoIHx8IGZpbGxTdHIgPT0gJycpIHJldHVybiBTO1xuICB2YXIgZmlsbExlbiA9IGludE1heExlbmd0aCAtIHN0cmluZ0xlbmd0aDtcbiAgdmFyIHN0cmluZ0ZpbGxlciA9IHJlcGVhdC5jYWxsKGZpbGxTdHIsIE1hdGguY2VpbChmaWxsTGVuIC8gZmlsbFN0ci5sZW5ndGgpKTtcbiAgaWYgKHN0cmluZ0ZpbGxlci5sZW5ndGggPiBmaWxsTGVuKSBzdHJpbmdGaWxsZXIgPSBzdHJpbmdGaWxsZXIuc2xpY2UoMCwgZmlsbExlbik7XG4gIHJldHVybiBsZWZ0ID8gc3RyaW5nRmlsbGVyICsgUyA6IFMgKyBzdHJpbmdGaWxsZXI7XG59O1xuIiwidmFyIERFU0NSSVBUT1JTID0gcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKTtcbnZhciBnZXRLZXlzID0gcmVxdWlyZSgnLi9fb2JqZWN0LWtleXMnKTtcbnZhciB0b0lPYmplY3QgPSByZXF1aXJlKCcuL190by1pb2JqZWN0Jyk7XG52YXIgaXNFbnVtID0gcmVxdWlyZSgnLi9fb2JqZWN0LXBpZScpLmY7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpc0VudHJpZXMpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIChpdCkge1xuICAgIHZhciBPID0gdG9JT2JqZWN0KGl0KTtcbiAgICB2YXIga2V5cyA9IGdldEtleXMoTyk7XG4gICAgdmFyIGxlbmd0aCA9IGtleXMubGVuZ3RoO1xuICAgIHZhciBpID0gMDtcbiAgICB2YXIgcmVzdWx0ID0gW107XG4gICAgdmFyIGtleTtcbiAgICB3aGlsZSAobGVuZ3RoID4gaSkge1xuICAgICAga2V5ID0ga2V5c1tpKytdO1xuICAgICAgaWYgKCFERVNDUklQVE9SUyB8fCBpc0VudW0uY2FsbChPLCBrZXkpKSB7XG4gICAgICAgIHJlc3VsdC5wdXNoKGlzRW50cmllcyA/IFtrZXksIE9ba2V5XV0gOiBPW2tleV0pO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9O1xufTtcbiIsInZhciBjb3JlID0gbW9kdWxlLmV4cG9ydHMgPSB7IHZlcnNpb246ICcyLjYuMTEnIH07XG5pZiAodHlwZW9mIF9fZSA9PSAnbnVtYmVyJykgX19lID0gY29yZTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bmRlZlxuIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoZXhlYykge1xuICB0cnkge1xuICAgIHJldHVybiAhIWV4ZWMoKTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG59O1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnJlcXVpcmUoXCIuL25vQ29uZmxpY3RcIik7XG5cbnZhciBfZ2xvYmFsID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiY29yZS1qcy9saWJyYXJ5L2ZuL2dsb2JhbFwiKSk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IFwiZGVmYXVsdFwiOiBvYmogfTsgfVxuXG5pZiAoX2dsb2JhbFtcImRlZmF1bHRcIl0uX2JhYmVsUG9seWZpbGwgJiYgdHlwZW9mIGNvbnNvbGUgIT09IFwidW5kZWZpbmVkXCIgJiYgY29uc29sZS53YXJuKSB7XG4gIGNvbnNvbGUud2FybihcIkBiYWJlbC9wb2x5ZmlsbCBpcyBsb2FkZWQgbW9yZSB0aGFuIG9uY2Ugb24gdGhpcyBwYWdlLiBUaGlzIGlzIHByb2JhYmx5IG5vdCBkZXNpcmFibGUvaW50ZW5kZWQgXCIgKyBcImFuZCBtYXkgaGF2ZSBjb25zZXF1ZW5jZXMgaWYgZGlmZmVyZW50IHZlcnNpb25zIG9mIHRoZSBwb2x5ZmlsbHMgYXJlIGFwcGxpZWQgc2VxdWVudGlhbGx5LiBcIiArIFwiSWYgeW91IGRvIG5lZWQgdG8gbG9hZCB0aGUgcG9seWZpbGwgbW9yZSB0aGFuIG9uY2UsIHVzZSBAYmFiZWwvcG9seWZpbGwvbm9Db25mbGljdCBcIiArIFwiaW5zdGVhZCB0byBieXBhc3MgdGhlIHdhcm5pbmcuXCIpO1xufVxuXG5fZ2xvYmFsW1wiZGVmYXVsdFwiXS5fYmFiZWxQb2x5ZmlsbCA9IHRydWU7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnJlcXVpcmUoXCJjb3JlLWpzL2VzNlwiKTtcblxucmVxdWlyZShcImNvcmUtanMvZm4vYXJyYXkvaW5jbHVkZXNcIik7XG5cbnJlcXVpcmUoXCJjb3JlLWpzL2ZuL2FycmF5L2ZsYXQtbWFwXCIpO1xuXG5yZXF1aXJlKFwiY29yZS1qcy9mbi9zdHJpbmcvcGFkLXN0YXJ0XCIpO1xuXG5yZXF1aXJlKFwiY29yZS1qcy9mbi9zdHJpbmcvcGFkLWVuZFwiKTtcblxucmVxdWlyZShcImNvcmUtanMvZm4vc3RyaW5nL3RyaW0tc3RhcnRcIik7XG5cbnJlcXVpcmUoXCJjb3JlLWpzL2ZuL3N0cmluZy90cmltLWVuZFwiKTtcblxucmVxdWlyZShcImNvcmUtanMvZm4vc3ltYm9sL2FzeW5jLWl0ZXJhdG9yXCIpO1xuXG5yZXF1aXJlKFwiY29yZS1qcy9mbi9vYmplY3QvZ2V0LW93bi1wcm9wZXJ0eS1kZXNjcmlwdG9yc1wiKTtcblxucmVxdWlyZShcImNvcmUtanMvZm4vb2JqZWN0L3ZhbHVlc1wiKTtcblxucmVxdWlyZShcImNvcmUtanMvZm4vb2JqZWN0L2VudHJpZXNcIik7XG5cbnJlcXVpcmUoXCJjb3JlLWpzL2ZuL3Byb21pc2UvZmluYWxseVwiKTtcblxucmVxdWlyZShcImNvcmUtanMvd2ViXCIpO1xuXG5yZXF1aXJlKFwicmVnZW5lcmF0b3ItcnVudGltZS9ydW50aW1lXCIpOyIsInJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LnN5bWJvbCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYub2JqZWN0LmNyZWF0ZScpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYub2JqZWN0LmRlZmluZS1wcm9wZXJ0eScpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYub2JqZWN0LmRlZmluZS1wcm9wZXJ0aWVzJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5vYmplY3QuZ2V0LW93bi1wcm9wZXJ0eS1kZXNjcmlwdG9yJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5vYmplY3QuZ2V0LXByb3RvdHlwZS1vZicpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYub2JqZWN0LmtleXMnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2Lm9iamVjdC5nZXQtb3duLXByb3BlcnR5LW5hbWVzJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5vYmplY3QuZnJlZXplJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5vYmplY3Quc2VhbCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYub2JqZWN0LnByZXZlbnQtZXh0ZW5zaW9ucycpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYub2JqZWN0LmlzLWZyb3plbicpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYub2JqZWN0LmlzLXNlYWxlZCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYub2JqZWN0LmlzLWV4dGVuc2libGUnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2Lm9iamVjdC5hc3NpZ24nKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2Lm9iamVjdC5pcycpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYub2JqZWN0LnNldC1wcm90b3R5cGUtb2YnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2Lm9iamVjdC50by1zdHJpbmcnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LmZ1bmN0aW9uLmJpbmQnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LmZ1bmN0aW9uLm5hbWUnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LmZ1bmN0aW9uLmhhcy1pbnN0YW5jZScpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYucGFyc2UtaW50Jyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5wYXJzZS1mbG9hdCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYubnVtYmVyLmNvbnN0cnVjdG9yJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5udW1iZXIudG8tZml4ZWQnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2Lm51bWJlci50by1wcmVjaXNpb24nKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2Lm51bWJlci5lcHNpbG9uJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5udW1iZXIuaXMtZmluaXRlJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5udW1iZXIuaXMtaW50ZWdlcicpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYubnVtYmVyLmlzLW5hbicpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYubnVtYmVyLmlzLXNhZmUtaW50ZWdlcicpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYubnVtYmVyLm1heC1zYWZlLWludGVnZXInKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2Lm51bWJlci5taW4tc2FmZS1pbnRlZ2VyJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5udW1iZXIucGFyc2UtZmxvYXQnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2Lm51bWJlci5wYXJzZS1pbnQnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2Lm1hdGguYWNvc2gnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2Lm1hdGguYXNpbmgnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2Lm1hdGguYXRhbmgnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2Lm1hdGguY2JydCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYubWF0aC5jbHozMicpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYubWF0aC5jb3NoJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5tYXRoLmV4cG0xJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5tYXRoLmZyb3VuZCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYubWF0aC5oeXBvdCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYubWF0aC5pbXVsJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5tYXRoLmxvZzEwJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5tYXRoLmxvZzFwJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5tYXRoLmxvZzInKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2Lm1hdGguc2lnbicpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYubWF0aC5zaW5oJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5tYXRoLnRhbmgnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2Lm1hdGgudHJ1bmMnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LnN0cmluZy5mcm9tLWNvZGUtcG9pbnQnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LnN0cmluZy5yYXcnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LnN0cmluZy50cmltJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5zdHJpbmcuaXRlcmF0b3InKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LnN0cmluZy5jb2RlLXBvaW50LWF0Jyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5zdHJpbmcuZW5kcy13aXRoJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5zdHJpbmcuaW5jbHVkZXMnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LnN0cmluZy5yZXBlYXQnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LnN0cmluZy5zdGFydHMtd2l0aCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYuc3RyaW5nLmFuY2hvcicpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYuc3RyaW5nLmJpZycpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYuc3RyaW5nLmJsaW5rJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5zdHJpbmcuYm9sZCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYuc3RyaW5nLmZpeGVkJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5zdHJpbmcuZm9udGNvbG9yJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5zdHJpbmcuZm9udHNpemUnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LnN0cmluZy5pdGFsaWNzJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5zdHJpbmcubGluaycpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYuc3RyaW5nLnNtYWxsJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5zdHJpbmcuc3RyaWtlJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5zdHJpbmcuc3ViJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5zdHJpbmcuc3VwJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5kYXRlLm5vdycpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYuZGF0ZS50by1qc29uJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5kYXRlLnRvLWlzby1zdHJpbmcnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LmRhdGUudG8tc3RyaW5nJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5kYXRlLnRvLXByaW1pdGl2ZScpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYuYXJyYXkuaXMtYXJyYXknKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LmFycmF5LmZyb20nKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LmFycmF5Lm9mJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5hcnJheS5qb2luJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5hcnJheS5zbGljZScpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYuYXJyYXkuc29ydCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYuYXJyYXkuZm9yLWVhY2gnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LmFycmF5Lm1hcCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYuYXJyYXkuZmlsdGVyJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5hcnJheS5zb21lJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5hcnJheS5ldmVyeScpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYuYXJyYXkucmVkdWNlJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5hcnJheS5yZWR1Y2UtcmlnaHQnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LmFycmF5LmluZGV4LW9mJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5hcnJheS5sYXN0LWluZGV4LW9mJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5hcnJheS5jb3B5LXdpdGhpbicpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYuYXJyYXkuZmlsbCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYuYXJyYXkuZmluZCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYuYXJyYXkuZmluZC1pbmRleCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYuYXJyYXkuc3BlY2llcycpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYuYXJyYXkuaXRlcmF0b3InKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LnJlZ2V4cC5jb25zdHJ1Y3RvcicpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYucmVnZXhwLmV4ZWMnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LnJlZ2V4cC50by1zdHJpbmcnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LnJlZ2V4cC5mbGFncycpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYucmVnZXhwLm1hdGNoJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5yZWdleHAucmVwbGFjZScpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYucmVnZXhwLnNlYXJjaCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYucmVnZXhwLnNwbGl0Jyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5wcm9taXNlJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5tYXAnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LnNldCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYud2Vhay1tYXAnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LndlYWstc2V0Jyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi50eXBlZC5hcnJheS1idWZmZXInKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LnR5cGVkLmRhdGEtdmlldycpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYudHlwZWQuaW50OC1hcnJheScpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYudHlwZWQudWludDgtYXJyYXknKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LnR5cGVkLnVpbnQ4LWNsYW1wZWQtYXJyYXknKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LnR5cGVkLmludDE2LWFycmF5Jyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi50eXBlZC51aW50MTYtYXJyYXknKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LnR5cGVkLmludDMyLWFycmF5Jyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi50eXBlZC51aW50MzItYXJyYXknKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LnR5cGVkLmZsb2F0MzItYXJyYXknKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LnR5cGVkLmZsb2F0NjQtYXJyYXknKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LnJlZmxlY3QuYXBwbHknKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LnJlZmxlY3QuY29uc3RydWN0Jyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5yZWZsZWN0LmRlZmluZS1wcm9wZXJ0eScpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYucmVmbGVjdC5kZWxldGUtcHJvcGVydHknKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LnJlZmxlY3QuZW51bWVyYXRlJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5yZWZsZWN0LmdldCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYucmVmbGVjdC5nZXQtb3duLXByb3BlcnR5LWRlc2NyaXB0b3InKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LnJlZmxlY3QuZ2V0LXByb3RvdHlwZS1vZicpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYucmVmbGVjdC5oYXMnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LnJlZmxlY3QuaXMtZXh0ZW5zaWJsZScpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYucmVmbGVjdC5vd24ta2V5cycpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYucmVmbGVjdC5wcmV2ZW50LWV4dGVuc2lvbnMnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LnJlZmxlY3Quc2V0Jyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5yZWZsZWN0LnNldC1wcm90b3R5cGUtb2YnKTtcbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi4vbW9kdWxlcy9fY29yZScpO1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gRUNNQVNjcmlwdCA2IHN5bWJvbHMgc2hpbVxudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpO1xudmFyIGhhcyA9IHJlcXVpcmUoJy4vX2hhcycpO1xudmFyIERFU0NSSVBUT1JTID0gcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKTtcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgcmVkZWZpbmUgPSByZXF1aXJlKCcuL19yZWRlZmluZScpO1xudmFyIE1FVEEgPSByZXF1aXJlKCcuL19tZXRhJykuS0VZO1xudmFyICRmYWlscyA9IHJlcXVpcmUoJy4vX2ZhaWxzJyk7XG52YXIgc2hhcmVkID0gcmVxdWlyZSgnLi9fc2hhcmVkJyk7XG52YXIgc2V0VG9TdHJpbmdUYWcgPSByZXF1aXJlKCcuL19zZXQtdG8tc3RyaW5nLXRhZycpO1xudmFyIHVpZCA9IHJlcXVpcmUoJy4vX3VpZCcpO1xudmFyIHdrcyA9IHJlcXVpcmUoJy4vX3drcycpO1xudmFyIHdrc0V4dCA9IHJlcXVpcmUoJy4vX3drcy1leHQnKTtcbnZhciB3a3NEZWZpbmUgPSByZXF1aXJlKCcuL193a3MtZGVmaW5lJyk7XG52YXIgZW51bUtleXMgPSByZXF1aXJlKCcuL19lbnVtLWtleXMnKTtcbnZhciBpc0FycmF5ID0gcmVxdWlyZSgnLi9faXMtYXJyYXknKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuL190by1vYmplY3QnKTtcbnZhciB0b0lPYmplY3QgPSByZXF1aXJlKCcuL190by1pb2JqZWN0Jyk7XG52YXIgdG9QcmltaXRpdmUgPSByZXF1aXJlKCcuL190by1wcmltaXRpdmUnKTtcbnZhciBjcmVhdGVEZXNjID0gcmVxdWlyZSgnLi9fcHJvcGVydHktZGVzYycpO1xudmFyIF9jcmVhdGUgPSByZXF1aXJlKCcuL19vYmplY3QtY3JlYXRlJyk7XG52YXIgZ09QTkV4dCA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BuLWV4dCcpO1xudmFyICRHT1BEID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcGQnKTtcbnZhciAkR09QUyA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BzJyk7XG52YXIgJERQID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJyk7XG52YXIgJGtleXMgPSByZXF1aXJlKCcuL19vYmplY3Qta2V5cycpO1xudmFyIGdPUEQgPSAkR09QRC5mO1xudmFyIGRQID0gJERQLmY7XG52YXIgZ09QTiA9IGdPUE5FeHQuZjtcbnZhciAkU3ltYm9sID0gZ2xvYmFsLlN5bWJvbDtcbnZhciAkSlNPTiA9IGdsb2JhbC5KU09OO1xudmFyIF9zdHJpbmdpZnkgPSAkSlNPTiAmJiAkSlNPTi5zdHJpbmdpZnk7XG52YXIgUFJPVE9UWVBFID0gJ3Byb3RvdHlwZSc7XG52YXIgSElEREVOID0gd2tzKCdfaGlkZGVuJyk7XG52YXIgVE9fUFJJTUlUSVZFID0gd2tzKCd0b1ByaW1pdGl2ZScpO1xudmFyIGlzRW51bSA9IHt9LnByb3BlcnR5SXNFbnVtZXJhYmxlO1xudmFyIFN5bWJvbFJlZ2lzdHJ5ID0gc2hhcmVkKCdzeW1ib2wtcmVnaXN0cnknKTtcbnZhciBBbGxTeW1ib2xzID0gc2hhcmVkKCdzeW1ib2xzJyk7XG52YXIgT1BTeW1ib2xzID0gc2hhcmVkKCdvcC1zeW1ib2xzJyk7XG52YXIgT2JqZWN0UHJvdG8gPSBPYmplY3RbUFJPVE9UWVBFXTtcbnZhciBVU0VfTkFUSVZFID0gdHlwZW9mICRTeW1ib2wgPT0gJ2Z1bmN0aW9uJyAmJiAhISRHT1BTLmY7XG52YXIgUU9iamVjdCA9IGdsb2JhbC5RT2JqZWN0O1xuLy8gRG9uJ3QgdXNlIHNldHRlcnMgaW4gUXQgU2NyaXB0LCBodHRwczovL2dpdGh1Yi5jb20vemxvaXJvY2svY29yZS1qcy9pc3N1ZXMvMTczXG52YXIgc2V0dGVyID0gIVFPYmplY3QgfHwgIVFPYmplY3RbUFJPVE9UWVBFXSB8fCAhUU9iamVjdFtQUk9UT1RZUEVdLmZpbmRDaGlsZDtcblxuLy8gZmFsbGJhY2sgZm9yIG9sZCBBbmRyb2lkLCBodHRwczovL2NvZGUuZ29vZ2xlLmNvbS9wL3Y4L2lzc3Vlcy9kZXRhaWw/aWQ9Njg3XG52YXIgc2V0U3ltYm9sRGVzYyA9IERFU0NSSVBUT1JTICYmICRmYWlscyhmdW5jdGlvbiAoKSB7XG4gIHJldHVybiBfY3JlYXRlKGRQKHt9LCAnYScsIHtcbiAgICBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGRQKHRoaXMsICdhJywgeyB2YWx1ZTogNyB9KS5hOyB9XG4gIH0pKS5hICE9IDc7XG59KSA/IGZ1bmN0aW9uIChpdCwga2V5LCBEKSB7XG4gIHZhciBwcm90b0Rlc2MgPSBnT1BEKE9iamVjdFByb3RvLCBrZXkpO1xuICBpZiAocHJvdG9EZXNjKSBkZWxldGUgT2JqZWN0UHJvdG9ba2V5XTtcbiAgZFAoaXQsIGtleSwgRCk7XG4gIGlmIChwcm90b0Rlc2MgJiYgaXQgIT09IE9iamVjdFByb3RvKSBkUChPYmplY3RQcm90bywga2V5LCBwcm90b0Rlc2MpO1xufSA6IGRQO1xuXG52YXIgd3JhcCA9IGZ1bmN0aW9uICh0YWcpIHtcbiAgdmFyIHN5bSA9IEFsbFN5bWJvbHNbdGFnXSA9IF9jcmVhdGUoJFN5bWJvbFtQUk9UT1RZUEVdKTtcbiAgc3ltLl9rID0gdGFnO1xuICByZXR1cm4gc3ltO1xufTtcblxudmFyIGlzU3ltYm9sID0gVVNFX05BVElWRSAmJiB0eXBlb2YgJFN5bWJvbC5pdGVyYXRvciA9PSAnc3ltYm9sJyA/IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gdHlwZW9mIGl0ID09ICdzeW1ib2wnO1xufSA6IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gaXQgaW5zdGFuY2VvZiAkU3ltYm9sO1xufTtcblxudmFyICRkZWZpbmVQcm9wZXJ0eSA9IGZ1bmN0aW9uIGRlZmluZVByb3BlcnR5KGl0LCBrZXksIEQpIHtcbiAgaWYgKGl0ID09PSBPYmplY3RQcm90bykgJGRlZmluZVByb3BlcnR5KE9QU3ltYm9scywga2V5LCBEKTtcbiAgYW5PYmplY3QoaXQpO1xuICBrZXkgPSB0b1ByaW1pdGl2ZShrZXksIHRydWUpO1xuICBhbk9iamVjdChEKTtcbiAgaWYgKGhhcyhBbGxTeW1ib2xzLCBrZXkpKSB7XG4gICAgaWYgKCFELmVudW1lcmFibGUpIHtcbiAgICAgIGlmICghaGFzKGl0LCBISURERU4pKSBkUChpdCwgSElEREVOLCBjcmVhdGVEZXNjKDEsIHt9KSk7XG4gICAgICBpdFtISURERU5dW2tleV0gPSB0cnVlO1xuICAgIH0gZWxzZSB7XG4gICAgICBpZiAoaGFzKGl0LCBISURERU4pICYmIGl0W0hJRERFTl1ba2V5XSkgaXRbSElEREVOXVtrZXldID0gZmFsc2U7XG4gICAgICBEID0gX2NyZWF0ZShELCB7IGVudW1lcmFibGU6IGNyZWF0ZURlc2MoMCwgZmFsc2UpIH0pO1xuICAgIH0gcmV0dXJuIHNldFN5bWJvbERlc2MoaXQsIGtleSwgRCk7XG4gIH0gcmV0dXJuIGRQKGl0LCBrZXksIEQpO1xufTtcbnZhciAkZGVmaW5lUHJvcGVydGllcyA9IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXMoaXQsIFApIHtcbiAgYW5PYmplY3QoaXQpO1xuICB2YXIga2V5cyA9IGVudW1LZXlzKFAgPSB0b0lPYmplY3QoUCkpO1xuICB2YXIgaSA9IDA7XG4gIHZhciBsID0ga2V5cy5sZW5ndGg7XG4gIHZhciBrZXk7XG4gIHdoaWxlIChsID4gaSkgJGRlZmluZVByb3BlcnR5KGl0LCBrZXkgPSBrZXlzW2krK10sIFBba2V5XSk7XG4gIHJldHVybiBpdDtcbn07XG52YXIgJGNyZWF0ZSA9IGZ1bmN0aW9uIGNyZWF0ZShpdCwgUCkge1xuICByZXR1cm4gUCA9PT0gdW5kZWZpbmVkID8gX2NyZWF0ZShpdCkgOiAkZGVmaW5lUHJvcGVydGllcyhfY3JlYXRlKGl0KSwgUCk7XG59O1xudmFyICRwcm9wZXJ0eUlzRW51bWVyYWJsZSA9IGZ1bmN0aW9uIHByb3BlcnR5SXNFbnVtZXJhYmxlKGtleSkge1xuICB2YXIgRSA9IGlzRW51bS5jYWxsKHRoaXMsIGtleSA9IHRvUHJpbWl0aXZlKGtleSwgdHJ1ZSkpO1xuICBpZiAodGhpcyA9PT0gT2JqZWN0UHJvdG8gJiYgaGFzKEFsbFN5bWJvbHMsIGtleSkgJiYgIWhhcyhPUFN5bWJvbHMsIGtleSkpIHJldHVybiBmYWxzZTtcbiAgcmV0dXJuIEUgfHwgIWhhcyh0aGlzLCBrZXkpIHx8ICFoYXMoQWxsU3ltYm9scywga2V5KSB8fCBoYXModGhpcywgSElEREVOKSAmJiB0aGlzW0hJRERFTl1ba2V5XSA/IEUgOiB0cnVlO1xufTtcbnZhciAkZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID0gZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGl0LCBrZXkpIHtcbiAgaXQgPSB0b0lPYmplY3QoaXQpO1xuICBrZXkgPSB0b1ByaW1pdGl2ZShrZXksIHRydWUpO1xuICBpZiAoaXQgPT09IE9iamVjdFByb3RvICYmIGhhcyhBbGxTeW1ib2xzLCBrZXkpICYmICFoYXMoT1BTeW1ib2xzLCBrZXkpKSByZXR1cm47XG4gIHZhciBEID0gZ09QRChpdCwga2V5KTtcbiAgaWYgKEQgJiYgaGFzKEFsbFN5bWJvbHMsIGtleSkgJiYgIShoYXMoaXQsIEhJRERFTikgJiYgaXRbSElEREVOXVtrZXldKSkgRC5lbnVtZXJhYmxlID0gdHJ1ZTtcbiAgcmV0dXJuIEQ7XG59O1xudmFyICRnZXRPd25Qcm9wZXJ0eU5hbWVzID0gZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlOYW1lcyhpdCkge1xuICB2YXIgbmFtZXMgPSBnT1BOKHRvSU9iamVjdChpdCkpO1xuICB2YXIgcmVzdWx0ID0gW107XG4gIHZhciBpID0gMDtcbiAgdmFyIGtleTtcbiAgd2hpbGUgKG5hbWVzLmxlbmd0aCA+IGkpIHtcbiAgICBpZiAoIWhhcyhBbGxTeW1ib2xzLCBrZXkgPSBuYW1lc1tpKytdKSAmJiBrZXkgIT0gSElEREVOICYmIGtleSAhPSBNRVRBKSByZXN1bHQucHVzaChrZXkpO1xuICB9IHJldHVybiByZXN1bHQ7XG59O1xudmFyICRnZXRPd25Qcm9wZXJ0eVN5bWJvbHMgPSBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eVN5bWJvbHMoaXQpIHtcbiAgdmFyIElTX09QID0gaXQgPT09IE9iamVjdFByb3RvO1xuICB2YXIgbmFtZXMgPSBnT1BOKElTX09QID8gT1BTeW1ib2xzIDogdG9JT2JqZWN0KGl0KSk7XG4gIHZhciByZXN1bHQgPSBbXTtcbiAgdmFyIGkgPSAwO1xuICB2YXIga2V5O1xuICB3aGlsZSAobmFtZXMubGVuZ3RoID4gaSkge1xuICAgIGlmIChoYXMoQWxsU3ltYm9scywga2V5ID0gbmFtZXNbaSsrXSkgJiYgKElTX09QID8gaGFzKE9iamVjdFByb3RvLCBrZXkpIDogdHJ1ZSkpIHJlc3VsdC5wdXNoKEFsbFN5bWJvbHNba2V5XSk7XG4gIH0gcmV0dXJuIHJlc3VsdDtcbn07XG5cbi8vIDE5LjQuMS4xIFN5bWJvbChbZGVzY3JpcHRpb25dKVxuaWYgKCFVU0VfTkFUSVZFKSB7XG4gICRTeW1ib2wgPSBmdW5jdGlvbiBTeW1ib2woKSB7XG4gICAgaWYgKHRoaXMgaW5zdGFuY2VvZiAkU3ltYm9sKSB0aHJvdyBUeXBlRXJyb3IoJ1N5bWJvbCBpcyBub3QgYSBjb25zdHJ1Y3RvciEnKTtcbiAgICB2YXIgdGFnID0gdWlkKGFyZ3VtZW50cy5sZW5ndGggPiAwID8gYXJndW1lbnRzWzBdIDogdW5kZWZpbmVkKTtcbiAgICB2YXIgJHNldCA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgaWYgKHRoaXMgPT09IE9iamVjdFByb3RvKSAkc2V0LmNhbGwoT1BTeW1ib2xzLCB2YWx1ZSk7XG4gICAgICBpZiAoaGFzKHRoaXMsIEhJRERFTikgJiYgaGFzKHRoaXNbSElEREVOXSwgdGFnKSkgdGhpc1tISURERU5dW3RhZ10gPSBmYWxzZTtcbiAgICAgIHNldFN5bWJvbERlc2ModGhpcywgdGFnLCBjcmVhdGVEZXNjKDEsIHZhbHVlKSk7XG4gICAgfTtcbiAgICBpZiAoREVTQ1JJUFRPUlMgJiYgc2V0dGVyKSBzZXRTeW1ib2xEZXNjKE9iamVjdFByb3RvLCB0YWcsIHsgY29uZmlndXJhYmxlOiB0cnVlLCBzZXQ6ICRzZXQgfSk7XG4gICAgcmV0dXJuIHdyYXAodGFnKTtcbiAgfTtcbiAgcmVkZWZpbmUoJFN5bWJvbFtQUk9UT1RZUEVdLCAndG9TdHJpbmcnLCBmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgICByZXR1cm4gdGhpcy5faztcbiAgfSk7XG5cbiAgJEdPUEQuZiA9ICRnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7XG4gICREUC5mID0gJGRlZmluZVByb3BlcnR5O1xuICByZXF1aXJlKCcuL19vYmplY3QtZ29wbicpLmYgPSBnT1BORXh0LmYgPSAkZ2V0T3duUHJvcGVydHlOYW1lcztcbiAgcmVxdWlyZSgnLi9fb2JqZWN0LXBpZScpLmYgPSAkcHJvcGVydHlJc0VudW1lcmFibGU7XG4gICRHT1BTLmYgPSAkZ2V0T3duUHJvcGVydHlTeW1ib2xzO1xuXG4gIGlmIChERVNDUklQVE9SUyAmJiAhcmVxdWlyZSgnLi9fbGlicmFyeScpKSB7XG4gICAgcmVkZWZpbmUoT2JqZWN0UHJvdG8sICdwcm9wZXJ0eUlzRW51bWVyYWJsZScsICRwcm9wZXJ0eUlzRW51bWVyYWJsZSwgdHJ1ZSk7XG4gIH1cblxuICB3a3NFeHQuZiA9IGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgcmV0dXJuIHdyYXAod2tzKG5hbWUpKTtcbiAgfTtcbn1cblxuJGV4cG9ydCgkZXhwb3J0LkcgKyAkZXhwb3J0LlcgKyAkZXhwb3J0LkYgKiAhVVNFX05BVElWRSwgeyBTeW1ib2w6ICRTeW1ib2wgfSk7XG5cbmZvciAodmFyIGVzNlN5bWJvbHMgPSAoXG4gIC8vIDE5LjQuMi4yLCAxOS40LjIuMywgMTkuNC4yLjQsIDE5LjQuMi42LCAxOS40LjIuOCwgMTkuNC4yLjksIDE5LjQuMi4xMCwgMTkuNC4yLjExLCAxOS40LjIuMTIsIDE5LjQuMi4xMywgMTkuNC4yLjE0XG4gICdoYXNJbnN0YW5jZSxpc0NvbmNhdFNwcmVhZGFibGUsaXRlcmF0b3IsbWF0Y2gscmVwbGFjZSxzZWFyY2gsc3BlY2llcyxzcGxpdCx0b1ByaW1pdGl2ZSx0b1N0cmluZ1RhZyx1bnNjb3BhYmxlcydcbikuc3BsaXQoJywnKSwgaiA9IDA7IGVzNlN5bWJvbHMubGVuZ3RoID4gajspd2tzKGVzNlN5bWJvbHNbaisrXSk7XG5cbmZvciAodmFyIHdlbGxLbm93blN5bWJvbHMgPSAka2V5cyh3a3Muc3RvcmUpLCBrID0gMDsgd2VsbEtub3duU3ltYm9scy5sZW5ndGggPiBrOykgd2tzRGVmaW5lKHdlbGxLbm93blN5bWJvbHNbaysrXSk7XG5cbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogIVVTRV9OQVRJVkUsICdTeW1ib2wnLCB7XG4gIC8vIDE5LjQuMi4xIFN5bWJvbC5mb3Ioa2V5KVxuICAnZm9yJzogZnVuY3Rpb24gKGtleSkge1xuICAgIHJldHVybiBoYXMoU3ltYm9sUmVnaXN0cnksIGtleSArPSAnJylcbiAgICAgID8gU3ltYm9sUmVnaXN0cnlba2V5XVxuICAgICAgOiBTeW1ib2xSZWdpc3RyeVtrZXldID0gJFN5bWJvbChrZXkpO1xuICB9LFxuICAvLyAxOS40LjIuNSBTeW1ib2wua2V5Rm9yKHN5bSlcbiAga2V5Rm9yOiBmdW5jdGlvbiBrZXlGb3Ioc3ltKSB7XG4gICAgaWYgKCFpc1N5bWJvbChzeW0pKSB0aHJvdyBUeXBlRXJyb3Ioc3ltICsgJyBpcyBub3QgYSBzeW1ib2whJyk7XG4gICAgZm9yICh2YXIga2V5IGluIFN5bWJvbFJlZ2lzdHJ5KSBpZiAoU3ltYm9sUmVnaXN0cnlba2V5XSA9PT0gc3ltKSByZXR1cm4ga2V5O1xuICB9LFxuICB1c2VTZXR0ZXI6IGZ1bmN0aW9uICgpIHsgc2V0dGVyID0gdHJ1ZTsgfSxcbiAgdXNlU2ltcGxlOiBmdW5jdGlvbiAoKSB7IHNldHRlciA9IGZhbHNlOyB9XG59KTtcblxuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAhVVNFX05BVElWRSwgJ09iamVjdCcsIHtcbiAgLy8gMTkuMS4yLjIgT2JqZWN0LmNyZWF0ZShPIFssIFByb3BlcnRpZXNdKVxuICBjcmVhdGU6ICRjcmVhdGUsXG4gIC8vIDE5LjEuMi40IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShPLCBQLCBBdHRyaWJ1dGVzKVxuICBkZWZpbmVQcm9wZXJ0eTogJGRlZmluZVByb3BlcnR5LFxuICAvLyAxOS4xLjIuMyBPYmplY3QuZGVmaW5lUHJvcGVydGllcyhPLCBQcm9wZXJ0aWVzKVxuICBkZWZpbmVQcm9wZXJ0aWVzOiAkZGVmaW5lUHJvcGVydGllcyxcbiAgLy8gMTkuMS4yLjYgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihPLCBQKVxuICBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I6ICRnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IsXG4gIC8vIDE5LjEuMi43IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKE8pXG4gIGdldE93blByb3BlcnR5TmFtZXM6ICRnZXRPd25Qcm9wZXJ0eU5hbWVzLFxuICAvLyAxOS4xLjIuOCBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKE8pXG4gIGdldE93blByb3BlcnR5U3ltYm9sczogJGdldE93blByb3BlcnR5U3ltYm9sc1xufSk7XG5cbi8vIENocm9tZSAzOCBhbmQgMzkgYE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHNgIGZhaWxzIG9uIHByaW1pdGl2ZXNcbi8vIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC92OC9pc3N1ZXMvZGV0YWlsP2lkPTM0NDNcbnZhciBGQUlMU19PTl9QUklNSVRJVkVTID0gJGZhaWxzKGZ1bmN0aW9uICgpIHsgJEdPUFMuZigxKTsgfSk7XG5cbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogRkFJTFNfT05fUFJJTUlUSVZFUywgJ09iamVjdCcsIHtcbiAgZ2V0T3duUHJvcGVydHlTeW1ib2xzOiBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eVN5bWJvbHMoaXQpIHtcbiAgICByZXR1cm4gJEdPUFMuZih0b09iamVjdChpdCkpO1xuICB9XG59KTtcblxuLy8gMjQuMy4yIEpTT04uc3RyaW5naWZ5KHZhbHVlIFssIHJlcGxhY2VyIFssIHNwYWNlXV0pXG4kSlNPTiAmJiAkZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqICghVVNFX05BVElWRSB8fCAkZmFpbHMoZnVuY3Rpb24gKCkge1xuICB2YXIgUyA9ICRTeW1ib2woKTtcbiAgLy8gTVMgRWRnZSBjb252ZXJ0cyBzeW1ib2wgdmFsdWVzIHRvIEpTT04gYXMge31cbiAgLy8gV2ViS2l0IGNvbnZlcnRzIHN5bWJvbCB2YWx1ZXMgdG8gSlNPTiBhcyBudWxsXG4gIC8vIFY4IHRocm93cyBvbiBib3hlZCBzeW1ib2xzXG4gIHJldHVybiBfc3RyaW5naWZ5KFtTXSkgIT0gJ1tudWxsXScgfHwgX3N0cmluZ2lmeSh7IGE6IFMgfSkgIT0gJ3t9JyB8fCBfc3RyaW5naWZ5KE9iamVjdChTKSkgIT0gJ3t9Jztcbn0pKSwgJ0pTT04nLCB7XG4gIHN0cmluZ2lmeTogZnVuY3Rpb24gc3RyaW5naWZ5KGl0KSB7XG4gICAgdmFyIGFyZ3MgPSBbaXRdO1xuICAgIHZhciBpID0gMTtcbiAgICB2YXIgcmVwbGFjZXIsICRyZXBsYWNlcjtcbiAgICB3aGlsZSAoYXJndW1lbnRzLmxlbmd0aCA+IGkpIGFyZ3MucHVzaChhcmd1bWVudHNbaSsrXSk7XG4gICAgJHJlcGxhY2VyID0gcmVwbGFjZXIgPSBhcmdzWzFdO1xuICAgIGlmICghaXNPYmplY3QocmVwbGFjZXIpICYmIGl0ID09PSB1bmRlZmluZWQgfHwgaXNTeW1ib2woaXQpKSByZXR1cm47IC8vIElFOCByZXR1cm5zIHN0cmluZyBvbiB1bmRlZmluZWRcbiAgICBpZiAoIWlzQXJyYXkocmVwbGFjZXIpKSByZXBsYWNlciA9IGZ1bmN0aW9uIChrZXksIHZhbHVlKSB7XG4gICAgICBpZiAodHlwZW9mICRyZXBsYWNlciA9PSAnZnVuY3Rpb24nKSB2YWx1ZSA9ICRyZXBsYWNlci5jYWxsKHRoaXMsIGtleSwgdmFsdWUpO1xuICAgICAgaWYgKCFpc1N5bWJvbCh2YWx1ZSkpIHJldHVybiB2YWx1ZTtcbiAgICB9O1xuICAgIGFyZ3NbMV0gPSByZXBsYWNlcjtcbiAgICByZXR1cm4gX3N0cmluZ2lmeS5hcHBseSgkSlNPTiwgYXJncyk7XG4gIH1cbn0pO1xuXG4vLyAxOS40LjMuNCBTeW1ib2wucHJvdG90eXBlW0BAdG9QcmltaXRpdmVdKGhpbnQpXG4kU3ltYm9sW1BST1RPVFlQRV1bVE9fUFJJTUlUSVZFXSB8fCByZXF1aXJlKCcuL19oaWRlJykoJFN5bWJvbFtQUk9UT1RZUEVdLCBUT19QUklNSVRJVkUsICRTeW1ib2xbUFJPVE9UWVBFXS52YWx1ZU9mKTtcbi8vIDE5LjQuMy41IFN5bWJvbC5wcm90b3R5cGVbQEB0b1N0cmluZ1RhZ11cbnNldFRvU3RyaW5nVGFnKCRTeW1ib2wsICdTeW1ib2wnKTtcbi8vIDIwLjIuMS45IE1hdGhbQEB0b1N0cmluZ1RhZ11cbnNldFRvU3RyaW5nVGFnKE1hdGgsICdNYXRoJywgdHJ1ZSk7XG4vLyAyNC4zLjMgSlNPTltAQHRvU3RyaW5nVGFnXVxuc2V0VG9TdHJpbmdUYWcoZ2xvYmFsLkpTT04sICdKU09OJywgdHJ1ZSk7XG4iLCJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vX3NoYXJlZCcpKCduYXRpdmUtZnVuY3Rpb24tdG8tc3RyaW5nJywgRnVuY3Rpb24udG9TdHJpbmcpO1xuIiwiLy8gYWxsIGVudW1lcmFibGUgb2JqZWN0IGtleXMsIGluY2x1ZGVzIHN5bWJvbHNcbnZhciBnZXRLZXlzID0gcmVxdWlyZSgnLi9fb2JqZWN0LWtleXMnKTtcbnZhciBnT1BTID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcHMnKTtcbnZhciBwSUUgPSByZXF1aXJlKCcuL19vYmplY3QtcGllJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICB2YXIgcmVzdWx0ID0gZ2V0S2V5cyhpdCk7XG4gIHZhciBnZXRTeW1ib2xzID0gZ09QUy5mO1xuICBpZiAoZ2V0U3ltYm9scykge1xuICAgIHZhciBzeW1ib2xzID0gZ2V0U3ltYm9scyhpdCk7XG4gICAgdmFyIGlzRW51bSA9IHBJRS5mO1xuICAgIHZhciBpID0gMDtcbiAgICB2YXIga2V5O1xuICAgIHdoaWxlIChzeW1ib2xzLmxlbmd0aCA+IGkpIGlmIChpc0VudW0uY2FsbChpdCwga2V5ID0gc3ltYm9sc1tpKytdKSkgcmVzdWx0LnB1c2goa2V5KTtcbiAgfSByZXR1cm4gcmVzdWx0O1xufTtcbiIsInZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG4vLyAxOS4xLjIuMiAvIDE1LjIuMy41IE9iamVjdC5jcmVhdGUoTyBbLCBQcm9wZXJ0aWVzXSlcbiRleHBvcnQoJGV4cG9ydC5TLCAnT2JqZWN0JywgeyBjcmVhdGU6IHJlcXVpcmUoJy4vX29iamVjdC1jcmVhdGUnKSB9KTtcbiIsInZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG4vLyAxOS4xLjIuNCAvIDE1LjIuMy42IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShPLCBQLCBBdHRyaWJ1dGVzKVxuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAhcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKSwgJ09iamVjdCcsIHsgZGVmaW5lUHJvcGVydHk6IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpLmYgfSk7XG4iLCJ2YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuLy8gMTkuMS4yLjMgLyAxNS4yLjMuNyBPYmplY3QuZGVmaW5lUHJvcGVydGllcyhPLCBQcm9wZXJ0aWVzKVxuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAhcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKSwgJ09iamVjdCcsIHsgZGVmaW5lUHJvcGVydGllczogcmVxdWlyZSgnLi9fb2JqZWN0LWRwcycpIH0pO1xuIiwiLy8gMTkuMS4yLjYgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihPLCBQKVxudmFyIHRvSU9iamVjdCA9IHJlcXVpcmUoJy4vX3RvLWlvYmplY3QnKTtcbnZhciAkZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcGQnKS5mO1xuXG5yZXF1aXJlKCcuL19vYmplY3Qtc2FwJykoJ2dldE93blByb3BlcnR5RGVzY3JpcHRvcicsIGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIGdldE93blByb3BlcnR5RGVzY3JpcHRvcihpdCwga2V5KSB7XG4gICAgcmV0dXJuICRnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodG9JT2JqZWN0KGl0KSwga2V5KTtcbiAgfTtcbn0pO1xuIiwiLy8gMTkuMS4yLjkgT2JqZWN0LmdldFByb3RvdHlwZU9mKE8pXG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuL190by1vYmplY3QnKTtcbnZhciAkZ2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKCcuL19vYmplY3QtZ3BvJyk7XG5cbnJlcXVpcmUoJy4vX29iamVjdC1zYXAnKSgnZ2V0UHJvdG90eXBlT2YnLCBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiBmdW5jdGlvbiBnZXRQcm90b3R5cGVPZihpdCkge1xuICAgIHJldHVybiAkZ2V0UHJvdG90eXBlT2YodG9PYmplY3QoaXQpKTtcbiAgfTtcbn0pO1xuIiwiLy8gMTkuMS4yLjE0IE9iamVjdC5rZXlzKE8pXG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuL190by1vYmplY3QnKTtcbnZhciAka2V5cyA9IHJlcXVpcmUoJy4vX29iamVjdC1rZXlzJyk7XG5cbnJlcXVpcmUoJy4vX29iamVjdC1zYXAnKSgna2V5cycsIGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIGtleXMoaXQpIHtcbiAgICByZXR1cm4gJGtleXModG9PYmplY3QoaXQpKTtcbiAgfTtcbn0pO1xuIiwiLy8gMTkuMS4yLjcgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMoTylcbnJlcXVpcmUoJy4vX29iamVjdC1zYXAnKSgnZ2V0T3duUHJvcGVydHlOYW1lcycsIGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIHJlcXVpcmUoJy4vX29iamVjdC1nb3BuLWV4dCcpLmY7XG59KTtcbiIsIi8vIDE5LjEuMi41IE9iamVjdC5mcmVlemUoTylcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xudmFyIG1ldGEgPSByZXF1aXJlKCcuL19tZXRhJykub25GcmVlemU7XG5cbnJlcXVpcmUoJy4vX29iamVjdC1zYXAnKSgnZnJlZXplJywgZnVuY3Rpb24gKCRmcmVlemUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIGZyZWV6ZShpdCkge1xuICAgIHJldHVybiAkZnJlZXplICYmIGlzT2JqZWN0KGl0KSA/ICRmcmVlemUobWV0YShpdCkpIDogaXQ7XG4gIH07XG59KTtcbiIsIi8vIDE5LjEuMi4xNyBPYmplY3Quc2VhbChPKVxudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG52YXIgbWV0YSA9IHJlcXVpcmUoJy4vX21ldGEnKS5vbkZyZWV6ZTtcblxucmVxdWlyZSgnLi9fb2JqZWN0LXNhcCcpKCdzZWFsJywgZnVuY3Rpb24gKCRzZWFsKSB7XG4gIHJldHVybiBmdW5jdGlvbiBzZWFsKGl0KSB7XG4gICAgcmV0dXJuICRzZWFsICYmIGlzT2JqZWN0KGl0KSA/ICRzZWFsKG1ldGEoaXQpKSA6IGl0O1xuICB9O1xufSk7XG4iLCIvLyAxOS4xLjIuMTUgT2JqZWN0LnByZXZlbnRFeHRlbnNpb25zKE8pXG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbnZhciBtZXRhID0gcmVxdWlyZSgnLi9fbWV0YScpLm9uRnJlZXplO1xuXG5yZXF1aXJlKCcuL19vYmplY3Qtc2FwJykoJ3ByZXZlbnRFeHRlbnNpb25zJywgZnVuY3Rpb24gKCRwcmV2ZW50RXh0ZW5zaW9ucykge1xuICByZXR1cm4gZnVuY3Rpb24gcHJldmVudEV4dGVuc2lvbnMoaXQpIHtcbiAgICByZXR1cm4gJHByZXZlbnRFeHRlbnNpb25zICYmIGlzT2JqZWN0KGl0KSA/ICRwcmV2ZW50RXh0ZW5zaW9ucyhtZXRhKGl0KSkgOiBpdDtcbiAgfTtcbn0pO1xuIiwiLy8gMTkuMS4yLjEyIE9iamVjdC5pc0Zyb3plbihPKVxudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG5cbnJlcXVpcmUoJy4vX29iamVjdC1zYXAnKSgnaXNGcm96ZW4nLCBmdW5jdGlvbiAoJGlzRnJvemVuKSB7XG4gIHJldHVybiBmdW5jdGlvbiBpc0Zyb3plbihpdCkge1xuICAgIHJldHVybiBpc09iamVjdChpdCkgPyAkaXNGcm96ZW4gPyAkaXNGcm96ZW4oaXQpIDogZmFsc2UgOiB0cnVlO1xuICB9O1xufSk7XG4iLCIvLyAxOS4xLjIuMTMgT2JqZWN0LmlzU2VhbGVkKE8pXG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcblxucmVxdWlyZSgnLi9fb2JqZWN0LXNhcCcpKCdpc1NlYWxlZCcsIGZ1bmN0aW9uICgkaXNTZWFsZWQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIGlzU2VhbGVkKGl0KSB7XG4gICAgcmV0dXJuIGlzT2JqZWN0KGl0KSA/ICRpc1NlYWxlZCA/ICRpc1NlYWxlZChpdCkgOiBmYWxzZSA6IHRydWU7XG4gIH07XG59KTtcbiIsIi8vIDE5LjEuMi4xMSBPYmplY3QuaXNFeHRlbnNpYmxlKE8pXG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcblxucmVxdWlyZSgnLi9fb2JqZWN0LXNhcCcpKCdpc0V4dGVuc2libGUnLCBmdW5jdGlvbiAoJGlzRXh0ZW5zaWJsZSkge1xuICByZXR1cm4gZnVuY3Rpb24gaXNFeHRlbnNpYmxlKGl0KSB7XG4gICAgcmV0dXJuIGlzT2JqZWN0KGl0KSA/ICRpc0V4dGVuc2libGUgPyAkaXNFeHRlbnNpYmxlKGl0KSA6IHRydWUgOiBmYWxzZTtcbiAgfTtcbn0pO1xuIiwiLy8gMTkuMS4zLjEgT2JqZWN0LmFzc2lnbih0YXJnZXQsIHNvdXJjZSlcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GLCAnT2JqZWN0JywgeyBhc3NpZ246IHJlcXVpcmUoJy4vX29iamVjdC1hc3NpZ24nKSB9KTtcbiIsIi8vIDE5LjEuMy4xMCBPYmplY3QuaXModmFsdWUxLCB2YWx1ZTIpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuJGV4cG9ydCgkZXhwb3J0LlMsICdPYmplY3QnLCB7IGlzOiByZXF1aXJlKCcuL19zYW1lLXZhbHVlJykgfSk7XG4iLCIvLyAxOS4xLjMuMTkgT2JqZWN0LnNldFByb3RvdHlwZU9mKE8sIHByb3RvKVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbiRleHBvcnQoJGV4cG9ydC5TLCAnT2JqZWN0JywgeyBzZXRQcm90b3R5cGVPZjogcmVxdWlyZSgnLi9fc2V0LXByb3RvJykuc2V0IH0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gMTkuMS4zLjYgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZygpXG52YXIgY2xhc3NvZiA9IHJlcXVpcmUoJy4vX2NsYXNzb2YnKTtcbnZhciB0ZXN0ID0ge307XG50ZXN0W3JlcXVpcmUoJy4vX3drcycpKCd0b1N0cmluZ1RhZycpXSA9ICd6JztcbmlmICh0ZXN0ICsgJycgIT0gJ1tvYmplY3Qgel0nKSB7XG4gIHJlcXVpcmUoJy4vX3JlZGVmaW5lJykoT2JqZWN0LnByb3RvdHlwZSwgJ3RvU3RyaW5nJywgZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gICAgcmV0dXJuICdbb2JqZWN0ICcgKyBjbGFzc29mKHRoaXMpICsgJ10nO1xuICB9LCB0cnVlKTtcbn1cbiIsIi8vIDE5LjIuMy4yIC8gMTUuMy40LjUgRnVuY3Rpb24ucHJvdG90eXBlLmJpbmQodGhpc0FyZywgYXJncy4uLilcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5QLCAnRnVuY3Rpb24nLCB7IGJpbmQ6IHJlcXVpcmUoJy4vX2JpbmQnKSB9KTtcbiIsInZhciBkUCA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpLmY7XG52YXIgRlByb3RvID0gRnVuY3Rpb24ucHJvdG90eXBlO1xudmFyIG5hbWVSRSA9IC9eXFxzKmZ1bmN0aW9uIChbXiAoXSopLztcbnZhciBOQU1FID0gJ25hbWUnO1xuXG4vLyAxOS4yLjQuMiBuYW1lXG5OQU1FIGluIEZQcm90byB8fCByZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpICYmIGRQKEZQcm90bywgTkFNRSwge1xuICBjb25maWd1cmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gKCkge1xuICAgIHRyeSB7XG4gICAgICByZXR1cm4gKCcnICsgdGhpcykubWF0Y2gobmFtZVJFKVsxXTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICByZXR1cm4gJyc7XG4gICAgfVxuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xudmFyIGdldFByb3RvdHlwZU9mID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdwbycpO1xudmFyIEhBU19JTlNUQU5DRSA9IHJlcXVpcmUoJy4vX3drcycpKCdoYXNJbnN0YW5jZScpO1xudmFyIEZ1bmN0aW9uUHJvdG8gPSBGdW5jdGlvbi5wcm90b3R5cGU7XG4vLyAxOS4yLjMuNiBGdW5jdGlvbi5wcm90b3R5cGVbQEBoYXNJbnN0YW5jZV0oVilcbmlmICghKEhBU19JTlNUQU5DRSBpbiBGdW5jdGlvblByb3RvKSkgcmVxdWlyZSgnLi9fb2JqZWN0LWRwJykuZihGdW5jdGlvblByb3RvLCBIQVNfSU5TVEFOQ0UsIHsgdmFsdWU6IGZ1bmN0aW9uIChPKSB7XG4gIGlmICh0eXBlb2YgdGhpcyAhPSAnZnVuY3Rpb24nIHx8ICFpc09iamVjdChPKSkgcmV0dXJuIGZhbHNlO1xuICBpZiAoIWlzT2JqZWN0KHRoaXMucHJvdG90eXBlKSkgcmV0dXJuIE8gaW5zdGFuY2VvZiB0aGlzO1xuICAvLyBmb3IgZW52aXJvbm1lbnQgdy9vIG5hdGl2ZSBgQEBoYXNJbnN0YW5jZWAgbG9naWMgZW5vdWdoIGBpbnN0YW5jZW9mYCwgYnV0IGFkZCB0aGlzOlxuICB3aGlsZSAoTyA9IGdldFByb3RvdHlwZU9mKE8pKSBpZiAodGhpcy5wcm90b3R5cGUgPT09IE8pIHJldHVybiB0cnVlO1xuICByZXR1cm4gZmFsc2U7XG59IH0pO1xuIiwidmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciAkcGFyc2VJbnQgPSByZXF1aXJlKCcuL19wYXJzZS1pbnQnKTtcbi8vIDE4LjIuNSBwYXJzZUludChzdHJpbmcsIHJhZGl4KVxuJGV4cG9ydCgkZXhwb3J0LkcgKyAkZXhwb3J0LkYgKiAocGFyc2VJbnQgIT0gJHBhcnNlSW50KSwgeyBwYXJzZUludDogJHBhcnNlSW50IH0pO1xuIiwidmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciAkcGFyc2VGbG9hdCA9IHJlcXVpcmUoJy4vX3BhcnNlLWZsb2F0Jyk7XG4vLyAxOC4yLjQgcGFyc2VGbG9hdChzdHJpbmcpXG4kZXhwb3J0KCRleHBvcnQuRyArICRleHBvcnQuRiAqIChwYXJzZUZsb2F0ICE9ICRwYXJzZUZsb2F0KSwgeyBwYXJzZUZsb2F0OiAkcGFyc2VGbG9hdCB9KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuL19nbG9iYWwnKTtcbnZhciBoYXMgPSByZXF1aXJlKCcuL19oYXMnKTtcbnZhciBjb2YgPSByZXF1aXJlKCcuL19jb2YnKTtcbnZhciBpbmhlcml0SWZSZXF1aXJlZCA9IHJlcXVpcmUoJy4vX2luaGVyaXQtaWYtcmVxdWlyZWQnKTtcbnZhciB0b1ByaW1pdGl2ZSA9IHJlcXVpcmUoJy4vX3RvLXByaW1pdGl2ZScpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi9fZmFpbHMnKTtcbnZhciBnT1BOID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcG4nKS5mO1xudmFyIGdPUEQgPSByZXF1aXJlKCcuL19vYmplY3QtZ29wZCcpLmY7XG52YXIgZFAgPSByZXF1aXJlKCcuL19vYmplY3QtZHAnKS5mO1xudmFyICR0cmltID0gcmVxdWlyZSgnLi9fc3RyaW5nLXRyaW0nKS50cmltO1xudmFyIE5VTUJFUiA9ICdOdW1iZXInO1xudmFyICROdW1iZXIgPSBnbG9iYWxbTlVNQkVSXTtcbnZhciBCYXNlID0gJE51bWJlcjtcbnZhciBwcm90byA9ICROdW1iZXIucHJvdG90eXBlO1xuLy8gT3BlcmEgfjEyIGhhcyBicm9rZW4gT2JqZWN0I3RvU3RyaW5nXG52YXIgQlJPS0VOX0NPRiA9IGNvZihyZXF1aXJlKCcuL19vYmplY3QtY3JlYXRlJykocHJvdG8pKSA9PSBOVU1CRVI7XG52YXIgVFJJTSA9ICd0cmltJyBpbiBTdHJpbmcucHJvdG90eXBlO1xuXG4vLyA3LjEuMyBUb051bWJlcihhcmd1bWVudClcbnZhciB0b051bWJlciA9IGZ1bmN0aW9uIChhcmd1bWVudCkge1xuICB2YXIgaXQgPSB0b1ByaW1pdGl2ZShhcmd1bWVudCwgZmFsc2UpO1xuICBpZiAodHlwZW9mIGl0ID09ICdzdHJpbmcnICYmIGl0Lmxlbmd0aCA+IDIpIHtcbiAgICBpdCA9IFRSSU0gPyBpdC50cmltKCkgOiAkdHJpbShpdCwgMyk7XG4gICAgdmFyIGZpcnN0ID0gaXQuY2hhckNvZGVBdCgwKTtcbiAgICB2YXIgdGhpcmQsIHJhZGl4LCBtYXhDb2RlO1xuICAgIGlmIChmaXJzdCA9PT0gNDMgfHwgZmlyc3QgPT09IDQ1KSB7XG4gICAgICB0aGlyZCA9IGl0LmNoYXJDb2RlQXQoMik7XG4gICAgICBpZiAodGhpcmQgPT09IDg4IHx8IHRoaXJkID09PSAxMjApIHJldHVybiBOYU47IC8vIE51bWJlcignKzB4MScpIHNob3VsZCBiZSBOYU4sIG9sZCBWOCBmaXhcbiAgICB9IGVsc2UgaWYgKGZpcnN0ID09PSA0OCkge1xuICAgICAgc3dpdGNoIChpdC5jaGFyQ29kZUF0KDEpKSB7XG4gICAgICAgIGNhc2UgNjY6IGNhc2UgOTg6IHJhZGl4ID0gMjsgbWF4Q29kZSA9IDQ5OyBicmVhazsgLy8gZmFzdCBlcXVhbCAvXjBiWzAxXSskL2lcbiAgICAgICAgY2FzZSA3OTogY2FzZSAxMTE6IHJhZGl4ID0gODsgbWF4Q29kZSA9IDU1OyBicmVhazsgLy8gZmFzdCBlcXVhbCAvXjBvWzAtN10rJC9pXG4gICAgICAgIGRlZmF1bHQ6IHJldHVybiAraXQ7XG4gICAgICB9XG4gICAgICBmb3IgKHZhciBkaWdpdHMgPSBpdC5zbGljZSgyKSwgaSA9IDAsIGwgPSBkaWdpdHMubGVuZ3RoLCBjb2RlOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgIGNvZGUgPSBkaWdpdHMuY2hhckNvZGVBdChpKTtcbiAgICAgICAgLy8gcGFyc2VJbnQgcGFyc2VzIGEgc3RyaW5nIHRvIGEgZmlyc3QgdW5hdmFpbGFibGUgc3ltYm9sXG4gICAgICAgIC8vIGJ1dCBUb051bWJlciBzaG91bGQgcmV0dXJuIE5hTiBpZiBhIHN0cmluZyBjb250YWlucyB1bmF2YWlsYWJsZSBzeW1ib2xzXG4gICAgICAgIGlmIChjb2RlIDwgNDggfHwgY29kZSA+IG1heENvZGUpIHJldHVybiBOYU47XG4gICAgICB9IHJldHVybiBwYXJzZUludChkaWdpdHMsIHJhZGl4KTtcbiAgICB9XG4gIH0gcmV0dXJuICtpdDtcbn07XG5cbmlmICghJE51bWJlcignIDBvMScpIHx8ICEkTnVtYmVyKCcwYjEnKSB8fCAkTnVtYmVyKCcrMHgxJykpIHtcbiAgJE51bWJlciA9IGZ1bmN0aW9uIE51bWJlcih2YWx1ZSkge1xuICAgIHZhciBpdCA9IGFyZ3VtZW50cy5sZW5ndGggPCAxID8gMCA6IHZhbHVlO1xuICAgIHZhciB0aGF0ID0gdGhpcztcbiAgICByZXR1cm4gdGhhdCBpbnN0YW5jZW9mICROdW1iZXJcbiAgICAgIC8vIGNoZWNrIG9uIDEuLmNvbnN0cnVjdG9yKGZvbykgY2FzZVxuICAgICAgJiYgKEJST0tFTl9DT0YgPyBmYWlscyhmdW5jdGlvbiAoKSB7IHByb3RvLnZhbHVlT2YuY2FsbCh0aGF0KTsgfSkgOiBjb2YodGhhdCkgIT0gTlVNQkVSKVxuICAgICAgICA/IGluaGVyaXRJZlJlcXVpcmVkKG5ldyBCYXNlKHRvTnVtYmVyKGl0KSksIHRoYXQsICROdW1iZXIpIDogdG9OdW1iZXIoaXQpO1xuICB9O1xuICBmb3IgKHZhciBrZXlzID0gcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKSA/IGdPUE4oQmFzZSkgOiAoXG4gICAgLy8gRVMzOlxuICAgICdNQVhfVkFMVUUsTUlOX1ZBTFVFLE5hTixORUdBVElWRV9JTkZJTklUWSxQT1NJVElWRV9JTkZJTklUWSwnICtcbiAgICAvLyBFUzYgKGluIGNhc2UsIGlmIG1vZHVsZXMgd2l0aCBFUzYgTnVtYmVyIHN0YXRpY3MgcmVxdWlyZWQgYmVmb3JlKTpcbiAgICAnRVBTSUxPTixpc0Zpbml0ZSxpc0ludGVnZXIsaXNOYU4saXNTYWZlSW50ZWdlcixNQVhfU0FGRV9JTlRFR0VSLCcgK1xuICAgICdNSU5fU0FGRV9JTlRFR0VSLHBhcnNlRmxvYXQscGFyc2VJbnQsaXNJbnRlZ2VyJ1xuICApLnNwbGl0KCcsJyksIGogPSAwLCBrZXk7IGtleXMubGVuZ3RoID4gajsgaisrKSB7XG4gICAgaWYgKGhhcyhCYXNlLCBrZXkgPSBrZXlzW2pdKSAmJiAhaGFzKCROdW1iZXIsIGtleSkpIHtcbiAgICAgIGRQKCROdW1iZXIsIGtleSwgZ09QRChCYXNlLCBrZXkpKTtcbiAgICB9XG4gIH1cbiAgJE51bWJlci5wcm90b3R5cGUgPSBwcm90bztcbiAgcHJvdG8uY29uc3RydWN0b3IgPSAkTnVtYmVyO1xuICByZXF1aXJlKCcuL19yZWRlZmluZScpKGdsb2JhbCwgTlVNQkVSLCAkTnVtYmVyKTtcbn1cbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgdG9JbnRlZ2VyID0gcmVxdWlyZSgnLi9fdG8taW50ZWdlcicpO1xudmFyIGFOdW1iZXJWYWx1ZSA9IHJlcXVpcmUoJy4vX2EtbnVtYmVyLXZhbHVlJyk7XG52YXIgcmVwZWF0ID0gcmVxdWlyZSgnLi9fc3RyaW5nLXJlcGVhdCcpO1xudmFyICR0b0ZpeGVkID0gMS4wLnRvRml4ZWQ7XG52YXIgZmxvb3IgPSBNYXRoLmZsb29yO1xudmFyIGRhdGEgPSBbMCwgMCwgMCwgMCwgMCwgMF07XG52YXIgRVJST1IgPSAnTnVtYmVyLnRvRml4ZWQ6IGluY29ycmVjdCBpbnZvY2F0aW9uISc7XG52YXIgWkVSTyA9ICcwJztcblxudmFyIG11bHRpcGx5ID0gZnVuY3Rpb24gKG4sIGMpIHtcbiAgdmFyIGkgPSAtMTtcbiAgdmFyIGMyID0gYztcbiAgd2hpbGUgKCsraSA8IDYpIHtcbiAgICBjMiArPSBuICogZGF0YVtpXTtcbiAgICBkYXRhW2ldID0gYzIgJSAxZTc7XG4gICAgYzIgPSBmbG9vcihjMiAvIDFlNyk7XG4gIH1cbn07XG52YXIgZGl2aWRlID0gZnVuY3Rpb24gKG4pIHtcbiAgdmFyIGkgPSA2O1xuICB2YXIgYyA9IDA7XG4gIHdoaWxlICgtLWkgPj0gMCkge1xuICAgIGMgKz0gZGF0YVtpXTtcbiAgICBkYXRhW2ldID0gZmxvb3IoYyAvIG4pO1xuICAgIGMgPSAoYyAlIG4pICogMWU3O1xuICB9XG59O1xudmFyIG51bVRvU3RyaW5nID0gZnVuY3Rpb24gKCkge1xuICB2YXIgaSA9IDY7XG4gIHZhciBzID0gJyc7XG4gIHdoaWxlICgtLWkgPj0gMCkge1xuICAgIGlmIChzICE9PSAnJyB8fCBpID09PSAwIHx8IGRhdGFbaV0gIT09IDApIHtcbiAgICAgIHZhciB0ID0gU3RyaW5nKGRhdGFbaV0pO1xuICAgICAgcyA9IHMgPT09ICcnID8gdCA6IHMgKyByZXBlYXQuY2FsbChaRVJPLCA3IC0gdC5sZW5ndGgpICsgdDtcbiAgICB9XG4gIH0gcmV0dXJuIHM7XG59O1xudmFyIHBvdyA9IGZ1bmN0aW9uICh4LCBuLCBhY2MpIHtcbiAgcmV0dXJuIG4gPT09IDAgPyBhY2MgOiBuICUgMiA9PT0gMSA/IHBvdyh4LCBuIC0gMSwgYWNjICogeCkgOiBwb3coeCAqIHgsIG4gLyAyLCBhY2MpO1xufTtcbnZhciBsb2cgPSBmdW5jdGlvbiAoeCkge1xuICB2YXIgbiA9IDA7XG4gIHZhciB4MiA9IHg7XG4gIHdoaWxlICh4MiA+PSA0MDk2KSB7XG4gICAgbiArPSAxMjtcbiAgICB4MiAvPSA0MDk2O1xuICB9XG4gIHdoaWxlICh4MiA+PSAyKSB7XG4gICAgbiArPSAxO1xuICAgIHgyIC89IDI7XG4gIH0gcmV0dXJuIG47XG59O1xuXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqICghISR0b0ZpeGVkICYmIChcbiAgMC4wMDAwOC50b0ZpeGVkKDMpICE9PSAnMC4wMDAnIHx8XG4gIDAuOS50b0ZpeGVkKDApICE9PSAnMScgfHxcbiAgMS4yNTUudG9GaXhlZCgyKSAhPT0gJzEuMjUnIHx8XG4gIDEwMDAwMDAwMDAwMDAwMDAxMjguMC50b0ZpeGVkKDApICE9PSAnMTAwMDAwMDAwMDAwMDAwMDEyOCdcbikgfHwgIXJlcXVpcmUoJy4vX2ZhaWxzJykoZnVuY3Rpb24gKCkge1xuICAvLyBWOCB+IEFuZHJvaWQgNC4zLVxuICAkdG9GaXhlZC5jYWxsKHt9KTtcbn0pKSwgJ051bWJlcicsIHtcbiAgdG9GaXhlZDogZnVuY3Rpb24gdG9GaXhlZChmcmFjdGlvbkRpZ2l0cykge1xuICAgIHZhciB4ID0gYU51bWJlclZhbHVlKHRoaXMsIEVSUk9SKTtcbiAgICB2YXIgZiA9IHRvSW50ZWdlcihmcmFjdGlvbkRpZ2l0cyk7XG4gICAgdmFyIHMgPSAnJztcbiAgICB2YXIgbSA9IFpFUk87XG4gICAgdmFyIGUsIHosIGosIGs7XG4gICAgaWYgKGYgPCAwIHx8IGYgPiAyMCkgdGhyb3cgUmFuZ2VFcnJvcihFUlJPUik7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXNlbGYtY29tcGFyZVxuICAgIGlmICh4ICE9IHgpIHJldHVybiAnTmFOJztcbiAgICBpZiAoeCA8PSAtMWUyMSB8fCB4ID49IDFlMjEpIHJldHVybiBTdHJpbmcoeCk7XG4gICAgaWYgKHggPCAwKSB7XG4gICAgICBzID0gJy0nO1xuICAgICAgeCA9IC14O1xuICAgIH1cbiAgICBpZiAoeCA+IDFlLTIxKSB7XG4gICAgICBlID0gbG9nKHggKiBwb3coMiwgNjksIDEpKSAtIDY5O1xuICAgICAgeiA9IGUgPCAwID8geCAqIHBvdygyLCAtZSwgMSkgOiB4IC8gcG93KDIsIGUsIDEpO1xuICAgICAgeiAqPSAweDEwMDAwMDAwMDAwMDAwO1xuICAgICAgZSA9IDUyIC0gZTtcbiAgICAgIGlmIChlID4gMCkge1xuICAgICAgICBtdWx0aXBseSgwLCB6KTtcbiAgICAgICAgaiA9IGY7XG4gICAgICAgIHdoaWxlIChqID49IDcpIHtcbiAgICAgICAgICBtdWx0aXBseSgxZTcsIDApO1xuICAgICAgICAgIGogLT0gNztcbiAgICAgICAgfVxuICAgICAgICBtdWx0aXBseShwb3coMTAsIGosIDEpLCAwKTtcbiAgICAgICAgaiA9IGUgLSAxO1xuICAgICAgICB3aGlsZSAoaiA+PSAyMykge1xuICAgICAgICAgIGRpdmlkZSgxIDw8IDIzKTtcbiAgICAgICAgICBqIC09IDIzO1xuICAgICAgICB9XG4gICAgICAgIGRpdmlkZSgxIDw8IGopO1xuICAgICAgICBtdWx0aXBseSgxLCAxKTtcbiAgICAgICAgZGl2aWRlKDIpO1xuICAgICAgICBtID0gbnVtVG9TdHJpbmcoKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG11bHRpcGx5KDAsIHopO1xuICAgICAgICBtdWx0aXBseSgxIDw8IC1lLCAwKTtcbiAgICAgICAgbSA9IG51bVRvU3RyaW5nKCkgKyByZXBlYXQuY2FsbChaRVJPLCBmKTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKGYgPiAwKSB7XG4gICAgICBrID0gbS5sZW5ndGg7XG4gICAgICBtID0gcyArIChrIDw9IGYgPyAnMC4nICsgcmVwZWF0LmNhbGwoWkVSTywgZiAtIGspICsgbSA6IG0uc2xpY2UoMCwgayAtIGYpICsgJy4nICsgbS5zbGljZShrIC0gZikpO1xuICAgIH0gZWxzZSB7XG4gICAgICBtID0gcyArIG07XG4gICAgfSByZXR1cm4gbTtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyICRmYWlscyA9IHJlcXVpcmUoJy4vX2ZhaWxzJyk7XG52YXIgYU51bWJlclZhbHVlID0gcmVxdWlyZSgnLi9fYS1udW1iZXItdmFsdWUnKTtcbnZhciAkdG9QcmVjaXNpb24gPSAxLjAudG9QcmVjaXNpb247XG5cbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogKCRmYWlscyhmdW5jdGlvbiAoKSB7XG4gIC8vIElFNy1cbiAgcmV0dXJuICR0b1ByZWNpc2lvbi5jYWxsKDEsIHVuZGVmaW5lZCkgIT09ICcxJztcbn0pIHx8ICEkZmFpbHMoZnVuY3Rpb24gKCkge1xuICAvLyBWOCB+IEFuZHJvaWQgNC4zLVxuICAkdG9QcmVjaXNpb24uY2FsbCh7fSk7XG59KSksICdOdW1iZXInLCB7XG4gIHRvUHJlY2lzaW9uOiBmdW5jdGlvbiB0b1ByZWNpc2lvbihwcmVjaXNpb24pIHtcbiAgICB2YXIgdGhhdCA9IGFOdW1iZXJWYWx1ZSh0aGlzLCAnTnVtYmVyI3RvUHJlY2lzaW9uOiBpbmNvcnJlY3QgaW52b2NhdGlvbiEnKTtcbiAgICByZXR1cm4gcHJlY2lzaW9uID09PSB1bmRlZmluZWQgPyAkdG9QcmVjaXNpb24uY2FsbCh0aGF0KSA6ICR0b1ByZWNpc2lvbi5jYWxsKHRoYXQsIHByZWNpc2lvbik7XG4gIH1cbn0pO1xuIiwiLy8gMjAuMS4yLjEgTnVtYmVyLkVQU0lMT05cbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnTnVtYmVyJywgeyBFUFNJTE9OOiBNYXRoLnBvdygyLCAtNTIpIH0pO1xuIiwiLy8gMjAuMS4yLjIgTnVtYmVyLmlzRmluaXRlKG51bWJlcilcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgX2lzRmluaXRlID0gcmVxdWlyZSgnLi9fZ2xvYmFsJykuaXNGaW5pdGU7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnTnVtYmVyJywge1xuICBpc0Zpbml0ZTogZnVuY3Rpb24gaXNGaW5pdGUoaXQpIHtcbiAgICByZXR1cm4gdHlwZW9mIGl0ID09ICdudW1iZXInICYmIF9pc0Zpbml0ZShpdCk7XG4gIH1cbn0pO1xuIiwiLy8gMjAuMS4yLjMgTnVtYmVyLmlzSW50ZWdlcihudW1iZXIpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ051bWJlcicsIHsgaXNJbnRlZ2VyOiByZXF1aXJlKCcuL19pcy1pbnRlZ2VyJykgfSk7XG4iLCIvLyAyMC4xLjIuNCBOdW1iZXIuaXNOYU4obnVtYmVyKVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdOdW1iZXInLCB7XG4gIGlzTmFOOiBmdW5jdGlvbiBpc05hTihudW1iZXIpIHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tc2VsZi1jb21wYXJlXG4gICAgcmV0dXJuIG51bWJlciAhPSBudW1iZXI7XG4gIH1cbn0pO1xuIiwiLy8gMjAuMS4yLjUgTnVtYmVyLmlzU2FmZUludGVnZXIobnVtYmVyKVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBpc0ludGVnZXIgPSByZXF1aXJlKCcuL19pcy1pbnRlZ2VyJyk7XG52YXIgYWJzID0gTWF0aC5hYnM7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnTnVtYmVyJywge1xuICBpc1NhZmVJbnRlZ2VyOiBmdW5jdGlvbiBpc1NhZmVJbnRlZ2VyKG51bWJlcikge1xuICAgIHJldHVybiBpc0ludGVnZXIobnVtYmVyKSAmJiBhYnMobnVtYmVyKSA8PSAweDFmZmZmZmZmZmZmZmZmO1xuICB9XG59KTtcbiIsIi8vIDIwLjEuMi42IE51bWJlci5NQVhfU0FGRV9JTlRFR0VSXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ051bWJlcicsIHsgTUFYX1NBRkVfSU5URUdFUjogMHgxZmZmZmZmZmZmZmZmZiB9KTtcbiIsIi8vIDIwLjEuMi4xMCBOdW1iZXIuTUlOX1NBRkVfSU5URUdFUlxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdOdW1iZXInLCB7IE1JTl9TQUZFX0lOVEVHRVI6IC0weDFmZmZmZmZmZmZmZmZmIH0pO1xuIiwidmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciAkcGFyc2VGbG9hdCA9IHJlcXVpcmUoJy4vX3BhcnNlLWZsb2F0Jyk7XG4vLyAyMC4xLjIuMTIgTnVtYmVyLnBhcnNlRmxvYXQoc3RyaW5nKVxuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAoTnVtYmVyLnBhcnNlRmxvYXQgIT0gJHBhcnNlRmxvYXQpLCAnTnVtYmVyJywgeyBwYXJzZUZsb2F0OiAkcGFyc2VGbG9hdCB9KTtcbiIsInZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgJHBhcnNlSW50ID0gcmVxdWlyZSgnLi9fcGFyc2UtaW50Jyk7XG4vLyAyMC4xLjIuMTMgTnVtYmVyLnBhcnNlSW50KHN0cmluZywgcmFkaXgpXG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqIChOdW1iZXIucGFyc2VJbnQgIT0gJHBhcnNlSW50KSwgJ051bWJlcicsIHsgcGFyc2VJbnQ6ICRwYXJzZUludCB9KTtcbiIsIi8vIDIwLjIuMi4zIE1hdGguYWNvc2goeClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgbG9nMXAgPSByZXF1aXJlKCcuL19tYXRoLWxvZzFwJyk7XG52YXIgc3FydCA9IE1hdGguc3FydDtcbnZhciAkYWNvc2ggPSBNYXRoLmFjb3NoO1xuXG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqICEoJGFjb3NoXG4gIC8vIFY4IGJ1ZzogaHR0cHM6Ly9jb2RlLmdvb2dsZS5jb20vcC92OC9pc3N1ZXMvZGV0YWlsP2lkPTM1MDlcbiAgJiYgTWF0aC5mbG9vcigkYWNvc2goTnVtYmVyLk1BWF9WQUxVRSkpID09IDcxMFxuICAvLyBUb3IgQnJvd3NlciBidWc6IE1hdGguYWNvc2goSW5maW5pdHkpIC0+IE5hTlxuICAmJiAkYWNvc2goSW5maW5pdHkpID09IEluZmluaXR5XG4pLCAnTWF0aCcsIHtcbiAgYWNvc2g6IGZ1bmN0aW9uIGFjb3NoKHgpIHtcbiAgICByZXR1cm4gKHggPSAreCkgPCAxID8gTmFOIDogeCA+IDk0OTA2MjY1LjYyNDI1MTU2XG4gICAgICA/IE1hdGgubG9nKHgpICsgTWF0aC5MTjJcbiAgICAgIDogbG9nMXAoeCAtIDEgKyBzcXJ0KHggLSAxKSAqIHNxcnQoeCArIDEpKTtcbiAgfVxufSk7XG4iLCIvLyAyMC4yLjIuNSBNYXRoLmFzaW5oKHgpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyICRhc2luaCA9IE1hdGguYXNpbmg7XG5cbmZ1bmN0aW9uIGFzaW5oKHgpIHtcbiAgcmV0dXJuICFpc0Zpbml0ZSh4ID0gK3gpIHx8IHggPT0gMCA/IHggOiB4IDwgMCA/IC1hc2luaCgteCkgOiBNYXRoLmxvZyh4ICsgTWF0aC5zcXJ0KHggKiB4ICsgMSkpO1xufVxuXG4vLyBUb3IgQnJvd3NlciBidWc6IE1hdGguYXNpbmgoMCkgLT4gLTBcbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogISgkYXNpbmggJiYgMSAvICRhc2luaCgwKSA+IDApLCAnTWF0aCcsIHsgYXNpbmg6IGFzaW5oIH0pO1xuIiwiLy8gMjAuMi4yLjcgTWF0aC5hdGFuaCh4KVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciAkYXRhbmggPSBNYXRoLmF0YW5oO1xuXG4vLyBUb3IgQnJvd3NlciBidWc6IE1hdGguYXRhbmgoLTApIC0+IDBcbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogISgkYXRhbmggJiYgMSAvICRhdGFuaCgtMCkgPCAwKSwgJ01hdGgnLCB7XG4gIGF0YW5oOiBmdW5jdGlvbiBhdGFuaCh4KSB7XG4gICAgcmV0dXJuICh4ID0gK3gpID09IDAgPyB4IDogTWF0aC5sb2coKDEgKyB4KSAvICgxIC0geCkpIC8gMjtcbiAgfVxufSk7XG4iLCIvLyAyMC4yLjIuOSBNYXRoLmNicnQoeClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgc2lnbiA9IHJlcXVpcmUoJy4vX21hdGgtc2lnbicpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ01hdGgnLCB7XG4gIGNicnQ6IGZ1bmN0aW9uIGNicnQoeCkge1xuICAgIHJldHVybiBzaWduKHggPSAreCkgKiBNYXRoLnBvdyhNYXRoLmFicyh4KSwgMSAvIDMpO1xuICB9XG59KTtcbiIsIi8vIDIwLjIuMi4xMSBNYXRoLmNsejMyKHgpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ01hdGgnLCB7XG4gIGNsejMyOiBmdW5jdGlvbiBjbHozMih4KSB7XG4gICAgcmV0dXJuICh4ID4+Pj0gMCkgPyAzMSAtIE1hdGguZmxvb3IoTWF0aC5sb2coeCArIDAuNSkgKiBNYXRoLkxPRzJFKSA6IDMyO1xuICB9XG59KTtcbiIsIi8vIDIwLjIuMi4xMiBNYXRoLmNvc2goeClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgZXhwID0gTWF0aC5leHA7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnTWF0aCcsIHtcbiAgY29zaDogZnVuY3Rpb24gY29zaCh4KSB7XG4gICAgcmV0dXJuIChleHAoeCA9ICt4KSArIGV4cCgteCkpIC8gMjtcbiAgfVxufSk7XG4iLCIvLyAyMC4yLjIuMTQgTWF0aC5leHBtMSh4KVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciAkZXhwbTEgPSByZXF1aXJlKCcuL19tYXRoLWV4cG0xJyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogKCRleHBtMSAhPSBNYXRoLmV4cG0xKSwgJ01hdGgnLCB7IGV4cG0xOiAkZXhwbTEgfSk7XG4iLCIvLyAyMC4yLjIuMTYgTWF0aC5mcm91bmQoeClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnTWF0aCcsIHsgZnJvdW5kOiByZXF1aXJlKCcuL19tYXRoLWZyb3VuZCcpIH0pO1xuIiwiLy8gMjAuMi4yLjE2IE1hdGguZnJvdW5kKHgpXG52YXIgc2lnbiA9IHJlcXVpcmUoJy4vX21hdGgtc2lnbicpO1xudmFyIHBvdyA9IE1hdGgucG93O1xudmFyIEVQU0lMT04gPSBwb3coMiwgLTUyKTtcbnZhciBFUFNJTE9OMzIgPSBwb3coMiwgLTIzKTtcbnZhciBNQVgzMiA9IHBvdygyLCAxMjcpICogKDIgLSBFUFNJTE9OMzIpO1xudmFyIE1JTjMyID0gcG93KDIsIC0xMjYpO1xuXG52YXIgcm91bmRUaWVzVG9FdmVuID0gZnVuY3Rpb24gKG4pIHtcbiAgcmV0dXJuIG4gKyAxIC8gRVBTSUxPTiAtIDEgLyBFUFNJTE9OO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBNYXRoLmZyb3VuZCB8fCBmdW5jdGlvbiBmcm91bmQoeCkge1xuICB2YXIgJGFicyA9IE1hdGguYWJzKHgpO1xuICB2YXIgJHNpZ24gPSBzaWduKHgpO1xuICB2YXIgYSwgcmVzdWx0O1xuICBpZiAoJGFicyA8IE1JTjMyKSByZXR1cm4gJHNpZ24gKiByb3VuZFRpZXNUb0V2ZW4oJGFicyAvIE1JTjMyIC8gRVBTSUxPTjMyKSAqIE1JTjMyICogRVBTSUxPTjMyO1xuICBhID0gKDEgKyBFUFNJTE9OMzIgLyBFUFNJTE9OKSAqICRhYnM7XG4gIHJlc3VsdCA9IGEgLSAoYSAtICRhYnMpO1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tc2VsZi1jb21wYXJlXG4gIGlmIChyZXN1bHQgPiBNQVgzMiB8fCByZXN1bHQgIT0gcmVzdWx0KSByZXR1cm4gJHNpZ24gKiBJbmZpbml0eTtcbiAgcmV0dXJuICRzaWduICogcmVzdWx0O1xufTtcbiIsIi8vIDIwLjIuMi4xNyBNYXRoLmh5cG90KFt2YWx1ZTFbLCB2YWx1ZTJbLCDigKYgXV1dKVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBhYnMgPSBNYXRoLmFicztcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdNYXRoJywge1xuICBoeXBvdDogZnVuY3Rpb24gaHlwb3QodmFsdWUxLCB2YWx1ZTIpIHsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bnVzZWQtdmFyc1xuICAgIHZhciBzdW0gPSAwO1xuICAgIHZhciBpID0gMDtcbiAgICB2YXIgYUxlbiA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gICAgdmFyIGxhcmcgPSAwO1xuICAgIHZhciBhcmcsIGRpdjtcbiAgICB3aGlsZSAoaSA8IGFMZW4pIHtcbiAgICAgIGFyZyA9IGFicyhhcmd1bWVudHNbaSsrXSk7XG4gICAgICBpZiAobGFyZyA8IGFyZykge1xuICAgICAgICBkaXYgPSBsYXJnIC8gYXJnO1xuICAgICAgICBzdW0gPSBzdW0gKiBkaXYgKiBkaXYgKyAxO1xuICAgICAgICBsYXJnID0gYXJnO1xuICAgICAgfSBlbHNlIGlmIChhcmcgPiAwKSB7XG4gICAgICAgIGRpdiA9IGFyZyAvIGxhcmc7XG4gICAgICAgIHN1bSArPSBkaXYgKiBkaXY7XG4gICAgICB9IGVsc2Ugc3VtICs9IGFyZztcbiAgICB9XG4gICAgcmV0dXJuIGxhcmcgPT09IEluZmluaXR5ID8gSW5maW5pdHkgOiBsYXJnICogTWF0aC5zcXJ0KHN1bSk7XG4gIH1cbn0pO1xuIiwiLy8gMjAuMi4yLjE4IE1hdGguaW11bCh4LCB5KVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciAkaW11bCA9IE1hdGguaW11bDtcblxuLy8gc29tZSBXZWJLaXQgdmVyc2lvbnMgZmFpbHMgd2l0aCBiaWcgbnVtYmVycywgc29tZSBoYXMgd3JvbmcgYXJpdHlcbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogcmVxdWlyZSgnLi9fZmFpbHMnKShmdW5jdGlvbiAoKSB7XG4gIHJldHVybiAkaW11bCgweGZmZmZmZmZmLCA1KSAhPSAtNSB8fCAkaW11bC5sZW5ndGggIT0gMjtcbn0pLCAnTWF0aCcsIHtcbiAgaW11bDogZnVuY3Rpb24gaW11bCh4LCB5KSB7XG4gICAgdmFyIFVJTlQxNiA9IDB4ZmZmZjtcbiAgICB2YXIgeG4gPSAreDtcbiAgICB2YXIgeW4gPSAreTtcbiAgICB2YXIgeGwgPSBVSU5UMTYgJiB4bjtcbiAgICB2YXIgeWwgPSBVSU5UMTYgJiB5bjtcbiAgICByZXR1cm4gMCB8IHhsICogeWwgKyAoKFVJTlQxNiAmIHhuID4+PiAxNikgKiB5bCArIHhsICogKFVJTlQxNiAmIHluID4+PiAxNikgPDwgMTYgPj4+IDApO1xuICB9XG59KTtcbiIsIi8vIDIwLjIuMi4yMSBNYXRoLmxvZzEwKHgpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ01hdGgnLCB7XG4gIGxvZzEwOiBmdW5jdGlvbiBsb2cxMCh4KSB7XG4gICAgcmV0dXJuIE1hdGgubG9nKHgpICogTWF0aC5MT0cxMEU7XG4gIH1cbn0pO1xuIiwiLy8gMjAuMi4yLjIwIE1hdGgubG9nMXAoeClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnTWF0aCcsIHsgbG9nMXA6IHJlcXVpcmUoJy4vX21hdGgtbG9nMXAnKSB9KTtcbiIsIi8vIDIwLjIuMi4yMiBNYXRoLmxvZzIoeClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnTWF0aCcsIHtcbiAgbG9nMjogZnVuY3Rpb24gbG9nMih4KSB7XG4gICAgcmV0dXJuIE1hdGgubG9nKHgpIC8gTWF0aC5MTjI7XG4gIH1cbn0pO1xuIiwiLy8gMjAuMi4yLjI4IE1hdGguc2lnbih4KVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdNYXRoJywgeyBzaWduOiByZXF1aXJlKCcuL19tYXRoLXNpZ24nKSB9KTtcbiIsIi8vIDIwLjIuMi4zMCBNYXRoLnNpbmgoeClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgZXhwbTEgPSByZXF1aXJlKCcuL19tYXRoLWV4cG0xJyk7XG52YXIgZXhwID0gTWF0aC5leHA7XG5cbi8vIFY4IG5lYXIgQ2hyb21pdW0gMzggaGFzIGEgcHJvYmxlbSB3aXRoIHZlcnkgc21hbGwgbnVtYmVyc1xuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiByZXF1aXJlKCcuL19mYWlscycpKGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuICFNYXRoLnNpbmgoLTJlLTE3KSAhPSAtMmUtMTc7XG59KSwgJ01hdGgnLCB7XG4gIHNpbmg6IGZ1bmN0aW9uIHNpbmgoeCkge1xuICAgIHJldHVybiBNYXRoLmFicyh4ID0gK3gpIDwgMVxuICAgICAgPyAoZXhwbTEoeCkgLSBleHBtMSgteCkpIC8gMlxuICAgICAgOiAoZXhwKHggLSAxKSAtIGV4cCgteCAtIDEpKSAqIChNYXRoLkUgLyAyKTtcbiAgfVxufSk7XG4iLCIvLyAyMC4yLjIuMzMgTWF0aC50YW5oKHgpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIGV4cG0xID0gcmVxdWlyZSgnLi9fbWF0aC1leHBtMScpO1xudmFyIGV4cCA9IE1hdGguZXhwO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ01hdGgnLCB7XG4gIHRhbmg6IGZ1bmN0aW9uIHRhbmgoeCkge1xuICAgIHZhciBhID0gZXhwbTEoeCA9ICt4KTtcbiAgICB2YXIgYiA9IGV4cG0xKC14KTtcbiAgICByZXR1cm4gYSA9PSBJbmZpbml0eSA/IDEgOiBiID09IEluZmluaXR5ID8gLTEgOiAoYSAtIGIpIC8gKGV4cCh4KSArIGV4cCgteCkpO1xuICB9XG59KTtcbiIsIi8vIDIwLjIuMi4zNCBNYXRoLnRydW5jKHgpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ01hdGgnLCB7XG4gIHRydW5jOiBmdW5jdGlvbiB0cnVuYyhpdCkge1xuICAgIHJldHVybiAoaXQgPiAwID8gTWF0aC5mbG9vciA6IE1hdGguY2VpbCkoaXQpO1xuICB9XG59KTtcbiIsInZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgdG9BYnNvbHV0ZUluZGV4ID0gcmVxdWlyZSgnLi9fdG8tYWJzb2x1dGUtaW5kZXgnKTtcbnZhciBmcm9tQ2hhckNvZGUgPSBTdHJpbmcuZnJvbUNoYXJDb2RlO1xudmFyICRmcm9tQ29kZVBvaW50ID0gU3RyaW5nLmZyb21Db2RlUG9pbnQ7XG5cbi8vIGxlbmd0aCBzaG91bGQgYmUgMSwgb2xkIEZGIHByb2JsZW1cbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogKCEhJGZyb21Db2RlUG9pbnQgJiYgJGZyb21Db2RlUG9pbnQubGVuZ3RoICE9IDEpLCAnU3RyaW5nJywge1xuICAvLyAyMS4xLjIuMiBTdHJpbmcuZnJvbUNvZGVQb2ludCguLi5jb2RlUG9pbnRzKVxuICBmcm9tQ29kZVBvaW50OiBmdW5jdGlvbiBmcm9tQ29kZVBvaW50KHgpIHsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bnVzZWQtdmFyc1xuICAgIHZhciByZXMgPSBbXTtcbiAgICB2YXIgYUxlbiA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gICAgdmFyIGkgPSAwO1xuICAgIHZhciBjb2RlO1xuICAgIHdoaWxlIChhTGVuID4gaSkge1xuICAgICAgY29kZSA9ICthcmd1bWVudHNbaSsrXTtcbiAgICAgIGlmICh0b0Fic29sdXRlSW5kZXgoY29kZSwgMHgxMGZmZmYpICE9PSBjb2RlKSB0aHJvdyBSYW5nZUVycm9yKGNvZGUgKyAnIGlzIG5vdCBhIHZhbGlkIGNvZGUgcG9pbnQnKTtcbiAgICAgIHJlcy5wdXNoKGNvZGUgPCAweDEwMDAwXG4gICAgICAgID8gZnJvbUNoYXJDb2RlKGNvZGUpXG4gICAgICAgIDogZnJvbUNoYXJDb2RlKCgoY29kZSAtPSAweDEwMDAwKSA+PiAxMCkgKyAweGQ4MDAsIGNvZGUgJSAweDQwMCArIDB4ZGMwMClcbiAgICAgICk7XG4gICAgfSByZXR1cm4gcmVzLmpvaW4oJycpO1xuICB9XG59KTtcbiIsInZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgdG9JT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8taW9iamVjdCcpO1xudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi9fdG8tbGVuZ3RoJyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnU3RyaW5nJywge1xuICAvLyAyMS4xLjIuNCBTdHJpbmcucmF3KGNhbGxTaXRlLCAuLi5zdWJzdGl0dXRpb25zKVxuICByYXc6IGZ1bmN0aW9uIHJhdyhjYWxsU2l0ZSkge1xuICAgIHZhciB0cGwgPSB0b0lPYmplY3QoY2FsbFNpdGUucmF3KTtcbiAgICB2YXIgbGVuID0gdG9MZW5ndGgodHBsLmxlbmd0aCk7XG4gICAgdmFyIGFMZW4gPSBhcmd1bWVudHMubGVuZ3RoO1xuICAgIHZhciByZXMgPSBbXTtcbiAgICB2YXIgaSA9IDA7XG4gICAgd2hpbGUgKGxlbiA+IGkpIHtcbiAgICAgIHJlcy5wdXNoKFN0cmluZyh0cGxbaSsrXSkpO1xuICAgICAgaWYgKGkgPCBhTGVuKSByZXMucHVzaChTdHJpbmcoYXJndW1lbnRzW2ldKSk7XG4gICAgfSByZXR1cm4gcmVzLmpvaW4oJycpO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIDIxLjEuMy4yNSBTdHJpbmcucHJvdG90eXBlLnRyaW0oKVxucmVxdWlyZSgnLi9fc3RyaW5nLXRyaW0nKSgndHJpbScsIGZ1bmN0aW9uICgkdHJpbSkge1xuICByZXR1cm4gZnVuY3Rpb24gdHJpbSgpIHtcbiAgICByZXR1cm4gJHRyaW0odGhpcywgMyk7XG4gIH07XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkYXQgPSByZXF1aXJlKCcuL19zdHJpbmctYXQnKSh0cnVlKTtcblxuLy8gMjEuMS4zLjI3IFN0cmluZy5wcm90b3R5cGVbQEBpdGVyYXRvcl0oKVxucmVxdWlyZSgnLi9faXRlci1kZWZpbmUnKShTdHJpbmcsICdTdHJpbmcnLCBmdW5jdGlvbiAoaXRlcmF0ZWQpIHtcbiAgdGhpcy5fdCA9IFN0cmluZyhpdGVyYXRlZCk7IC8vIHRhcmdldFxuICB0aGlzLl9pID0gMDsgICAgICAgICAgICAgICAgLy8gbmV4dCBpbmRleFxuLy8gMjEuMS41LjIuMSAlU3RyaW5nSXRlcmF0b3JQcm90b3R5cGUlLm5leHQoKVxufSwgZnVuY3Rpb24gKCkge1xuICB2YXIgTyA9IHRoaXMuX3Q7XG4gIHZhciBpbmRleCA9IHRoaXMuX2k7XG4gIHZhciBwb2ludDtcbiAgaWYgKGluZGV4ID49IE8ubGVuZ3RoKSByZXR1cm4geyB2YWx1ZTogdW5kZWZpbmVkLCBkb25lOiB0cnVlIH07XG4gIHBvaW50ID0gJGF0KE8sIGluZGV4KTtcbiAgdGhpcy5faSArPSBwb2ludC5sZW5ndGg7XG4gIHJldHVybiB7IHZhbHVlOiBwb2ludCwgZG9uZTogZmFsc2UgfTtcbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciAkYXQgPSByZXF1aXJlKCcuL19zdHJpbmctYXQnKShmYWxzZSk7XG4kZXhwb3J0KCRleHBvcnQuUCwgJ1N0cmluZycsIHtcbiAgLy8gMjEuMS4zLjMgU3RyaW5nLnByb3RvdHlwZS5jb2RlUG9pbnRBdChwb3MpXG4gIGNvZGVQb2ludEF0OiBmdW5jdGlvbiBjb2RlUG9pbnRBdChwb3MpIHtcbiAgICByZXR1cm4gJGF0KHRoaXMsIHBvcyk7XG4gIH1cbn0pO1xuIiwiLy8gMjEuMS4zLjYgU3RyaW5nLnByb3RvdHlwZS5lbmRzV2l0aChzZWFyY2hTdHJpbmcgWywgZW5kUG9zaXRpb25dKVxuJ3VzZSBzdHJpY3QnO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpO1xudmFyIGNvbnRleHQgPSByZXF1aXJlKCcuL19zdHJpbmctY29udGV4dCcpO1xudmFyIEVORFNfV0lUSCA9ICdlbmRzV2l0aCc7XG52YXIgJGVuZHNXaXRoID0gJydbRU5EU19XSVRIXTtcblxuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiByZXF1aXJlKCcuL19mYWlscy1pcy1yZWdleHAnKShFTkRTX1dJVEgpLCAnU3RyaW5nJywge1xuICBlbmRzV2l0aDogZnVuY3Rpb24gZW5kc1dpdGgoc2VhcmNoU3RyaW5nIC8qICwgZW5kUG9zaXRpb24gPSBAbGVuZ3RoICovKSB7XG4gICAgdmFyIHRoYXQgPSBjb250ZXh0KHRoaXMsIHNlYXJjaFN0cmluZywgRU5EU19XSVRIKTtcbiAgICB2YXIgZW5kUG9zaXRpb24gPSBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZDtcbiAgICB2YXIgbGVuID0gdG9MZW5ndGgodGhhdC5sZW5ndGgpO1xuICAgIHZhciBlbmQgPSBlbmRQb3NpdGlvbiA9PT0gdW5kZWZpbmVkID8gbGVuIDogTWF0aC5taW4odG9MZW5ndGgoZW5kUG9zaXRpb24pLCBsZW4pO1xuICAgIHZhciBzZWFyY2ggPSBTdHJpbmcoc2VhcmNoU3RyaW5nKTtcbiAgICByZXR1cm4gJGVuZHNXaXRoXG4gICAgICA/ICRlbmRzV2l0aC5jYWxsKHRoYXQsIHNlYXJjaCwgZW5kKVxuICAgICAgOiB0aGF0LnNsaWNlKGVuZCAtIHNlYXJjaC5sZW5ndGgsIGVuZCkgPT09IHNlYXJjaDtcbiAgfVxufSk7XG4iLCIvLyAyMS4xLjMuNyBTdHJpbmcucHJvdG90eXBlLmluY2x1ZGVzKHNlYXJjaFN0cmluZywgcG9zaXRpb24gPSAwKVxuJ3VzZSBzdHJpY3QnO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBjb250ZXh0ID0gcmVxdWlyZSgnLi9fc3RyaW5nLWNvbnRleHQnKTtcbnZhciBJTkNMVURFUyA9ICdpbmNsdWRlcyc7XG5cbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogcmVxdWlyZSgnLi9fZmFpbHMtaXMtcmVnZXhwJykoSU5DTFVERVMpLCAnU3RyaW5nJywge1xuICBpbmNsdWRlczogZnVuY3Rpb24gaW5jbHVkZXMoc2VhcmNoU3RyaW5nIC8qICwgcG9zaXRpb24gPSAwICovKSB7XG4gICAgcmV0dXJuICEhfmNvbnRleHQodGhpcywgc2VhcmNoU3RyaW5nLCBJTkNMVURFUylcbiAgICAgIC5pbmRleE9mKHNlYXJjaFN0cmluZywgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpO1xuICB9XG59KTtcbiIsInZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5QLCAnU3RyaW5nJywge1xuICAvLyAyMS4xLjMuMTMgU3RyaW5nLnByb3RvdHlwZS5yZXBlYXQoY291bnQpXG4gIHJlcGVhdDogcmVxdWlyZSgnLi9fc3RyaW5nLXJlcGVhdCcpXG59KTtcbiIsIi8vIDIxLjEuMy4xOCBTdHJpbmcucHJvdG90eXBlLnN0YXJ0c1dpdGgoc2VhcmNoU3RyaW5nIFssIHBvc2l0aW9uIF0pXG4ndXNlIHN0cmljdCc7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi9fdG8tbGVuZ3RoJyk7XG52YXIgY29udGV4dCA9IHJlcXVpcmUoJy4vX3N0cmluZy1jb250ZXh0Jyk7XG52YXIgU1RBUlRTX1dJVEggPSAnc3RhcnRzV2l0aCc7XG52YXIgJHN0YXJ0c1dpdGggPSAnJ1tTVEFSVFNfV0lUSF07XG5cbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogcmVxdWlyZSgnLi9fZmFpbHMtaXMtcmVnZXhwJykoU1RBUlRTX1dJVEgpLCAnU3RyaW5nJywge1xuICBzdGFydHNXaXRoOiBmdW5jdGlvbiBzdGFydHNXaXRoKHNlYXJjaFN0cmluZyAvKiAsIHBvc2l0aW9uID0gMCAqLykge1xuICAgIHZhciB0aGF0ID0gY29udGV4dCh0aGlzLCBzZWFyY2hTdHJpbmcsIFNUQVJUU19XSVRIKTtcbiAgICB2YXIgaW5kZXggPSB0b0xlbmd0aChNYXRoLm1pbihhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCwgdGhhdC5sZW5ndGgpKTtcbiAgICB2YXIgc2VhcmNoID0gU3RyaW5nKHNlYXJjaFN0cmluZyk7XG4gICAgcmV0dXJuICRzdGFydHNXaXRoXG4gICAgICA/ICRzdGFydHNXaXRoLmNhbGwodGhhdCwgc2VhcmNoLCBpbmRleClcbiAgICAgIDogdGhhdC5zbGljZShpbmRleCwgaW5kZXggKyBzZWFyY2gubGVuZ3RoKSA9PT0gc2VhcmNoO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIEIuMi4zLjIgU3RyaW5nLnByb3RvdHlwZS5hbmNob3IobmFtZSlcbnJlcXVpcmUoJy4vX3N0cmluZy1odG1sJykoJ2FuY2hvcicsIGZ1bmN0aW9uIChjcmVhdGVIVE1MKSB7XG4gIHJldHVybiBmdW5jdGlvbiBhbmNob3IobmFtZSkge1xuICAgIHJldHVybiBjcmVhdGVIVE1MKHRoaXMsICdhJywgJ25hbWUnLCBuYW1lKTtcbiAgfTtcbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gQi4yLjMuMyBTdHJpbmcucHJvdG90eXBlLmJpZygpXG5yZXF1aXJlKCcuL19zdHJpbmctaHRtbCcpKCdiaWcnLCBmdW5jdGlvbiAoY3JlYXRlSFRNTCkge1xuICByZXR1cm4gZnVuY3Rpb24gYmlnKCkge1xuICAgIHJldHVybiBjcmVhdGVIVE1MKHRoaXMsICdiaWcnLCAnJywgJycpO1xuICB9O1xufSk7XG4iLCIndXNlIHN0cmljdCc7XG4vLyBCLjIuMy40IFN0cmluZy5wcm90b3R5cGUuYmxpbmsoKVxucmVxdWlyZSgnLi9fc3RyaW5nLWh0bWwnKSgnYmxpbmsnLCBmdW5jdGlvbiAoY3JlYXRlSFRNTCkge1xuICByZXR1cm4gZnVuY3Rpb24gYmxpbmsoKSB7XG4gICAgcmV0dXJuIGNyZWF0ZUhUTUwodGhpcywgJ2JsaW5rJywgJycsICcnKTtcbiAgfTtcbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gQi4yLjMuNSBTdHJpbmcucHJvdG90eXBlLmJvbGQoKVxucmVxdWlyZSgnLi9fc3RyaW5nLWh0bWwnKSgnYm9sZCcsIGZ1bmN0aW9uIChjcmVhdGVIVE1MKSB7XG4gIHJldHVybiBmdW5jdGlvbiBib2xkKCkge1xuICAgIHJldHVybiBjcmVhdGVIVE1MKHRoaXMsICdiJywgJycsICcnKTtcbiAgfTtcbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gQi4yLjMuNiBTdHJpbmcucHJvdG90eXBlLmZpeGVkKClcbnJlcXVpcmUoJy4vX3N0cmluZy1odG1sJykoJ2ZpeGVkJywgZnVuY3Rpb24gKGNyZWF0ZUhUTUwpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIGZpeGVkKCkge1xuICAgIHJldHVybiBjcmVhdGVIVE1MKHRoaXMsICd0dCcsICcnLCAnJyk7XG4gIH07XG59KTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIEIuMi4zLjcgU3RyaW5nLnByb3RvdHlwZS5mb250Y29sb3IoY29sb3IpXG5yZXF1aXJlKCcuL19zdHJpbmctaHRtbCcpKCdmb250Y29sb3InLCBmdW5jdGlvbiAoY3JlYXRlSFRNTCkge1xuICByZXR1cm4gZnVuY3Rpb24gZm9udGNvbG9yKGNvbG9yKSB7XG4gICAgcmV0dXJuIGNyZWF0ZUhUTUwodGhpcywgJ2ZvbnQnLCAnY29sb3InLCBjb2xvcik7XG4gIH07XG59KTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIEIuMi4zLjggU3RyaW5nLnByb3RvdHlwZS5mb250c2l6ZShzaXplKVxucmVxdWlyZSgnLi9fc3RyaW5nLWh0bWwnKSgnZm9udHNpemUnLCBmdW5jdGlvbiAoY3JlYXRlSFRNTCkge1xuICByZXR1cm4gZnVuY3Rpb24gZm9udHNpemUoc2l6ZSkge1xuICAgIHJldHVybiBjcmVhdGVIVE1MKHRoaXMsICdmb250JywgJ3NpemUnLCBzaXplKTtcbiAgfTtcbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gQi4yLjMuOSBTdHJpbmcucHJvdG90eXBlLml0YWxpY3MoKVxucmVxdWlyZSgnLi9fc3RyaW5nLWh0bWwnKSgnaXRhbGljcycsIGZ1bmN0aW9uIChjcmVhdGVIVE1MKSB7XG4gIHJldHVybiBmdW5jdGlvbiBpdGFsaWNzKCkge1xuICAgIHJldHVybiBjcmVhdGVIVE1MKHRoaXMsICdpJywgJycsICcnKTtcbiAgfTtcbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gQi4yLjMuMTAgU3RyaW5nLnByb3RvdHlwZS5saW5rKHVybClcbnJlcXVpcmUoJy4vX3N0cmluZy1odG1sJykoJ2xpbmsnLCBmdW5jdGlvbiAoY3JlYXRlSFRNTCkge1xuICByZXR1cm4gZnVuY3Rpb24gbGluayh1cmwpIHtcbiAgICByZXR1cm4gY3JlYXRlSFRNTCh0aGlzLCAnYScsICdocmVmJywgdXJsKTtcbiAgfTtcbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gQi4yLjMuMTEgU3RyaW5nLnByb3RvdHlwZS5zbWFsbCgpXG5yZXF1aXJlKCcuL19zdHJpbmctaHRtbCcpKCdzbWFsbCcsIGZ1bmN0aW9uIChjcmVhdGVIVE1MKSB7XG4gIHJldHVybiBmdW5jdGlvbiBzbWFsbCgpIHtcbiAgICByZXR1cm4gY3JlYXRlSFRNTCh0aGlzLCAnc21hbGwnLCAnJywgJycpO1xuICB9O1xufSk7XG4iLCIndXNlIHN0cmljdCc7XG4vLyBCLjIuMy4xMiBTdHJpbmcucHJvdG90eXBlLnN0cmlrZSgpXG5yZXF1aXJlKCcuL19zdHJpbmctaHRtbCcpKCdzdHJpa2UnLCBmdW5jdGlvbiAoY3JlYXRlSFRNTCkge1xuICByZXR1cm4gZnVuY3Rpb24gc3RyaWtlKCkge1xuICAgIHJldHVybiBjcmVhdGVIVE1MKHRoaXMsICdzdHJpa2UnLCAnJywgJycpO1xuICB9O1xufSk7XG4iLCIndXNlIHN0cmljdCc7XG4vLyBCLjIuMy4xMyBTdHJpbmcucHJvdG90eXBlLnN1YigpXG5yZXF1aXJlKCcuL19zdHJpbmctaHRtbCcpKCdzdWInLCBmdW5jdGlvbiAoY3JlYXRlSFRNTCkge1xuICByZXR1cm4gZnVuY3Rpb24gc3ViKCkge1xuICAgIHJldHVybiBjcmVhdGVIVE1MKHRoaXMsICdzdWInLCAnJywgJycpO1xuICB9O1xufSk7XG4iLCIndXNlIHN0cmljdCc7XG4vLyBCLjIuMy4xNCBTdHJpbmcucHJvdG90eXBlLnN1cCgpXG5yZXF1aXJlKCcuL19zdHJpbmctaHRtbCcpKCdzdXAnLCBmdW5jdGlvbiAoY3JlYXRlSFRNTCkge1xuICByZXR1cm4gZnVuY3Rpb24gc3VwKCkge1xuICAgIHJldHVybiBjcmVhdGVIVE1MKHRoaXMsICdzdXAnLCAnJywgJycpO1xuICB9O1xufSk7XG4iLCIvLyAyMC4zLjMuMSAvIDE1LjkuNC40IERhdGUubm93KClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnRGF0ZScsIHsgbm93OiBmdW5jdGlvbiAoKSB7IHJldHVybiBuZXcgRGF0ZSgpLmdldFRpbWUoKTsgfSB9KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuL190by1vYmplY3QnKTtcbnZhciB0b1ByaW1pdGl2ZSA9IHJlcXVpcmUoJy4vX3RvLXByaW1pdGl2ZScpO1xuXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqIHJlcXVpcmUoJy4vX2ZhaWxzJykoZnVuY3Rpb24gKCkge1xuICByZXR1cm4gbmV3IERhdGUoTmFOKS50b0pTT04oKSAhPT0gbnVsbFxuICAgIHx8IERhdGUucHJvdG90eXBlLnRvSlNPTi5jYWxsKHsgdG9JU09TdHJpbmc6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIDE7IH0gfSkgIT09IDE7XG59KSwgJ0RhdGUnLCB7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bnVzZWQtdmFyc1xuICB0b0pTT046IGZ1bmN0aW9uIHRvSlNPTihrZXkpIHtcbiAgICB2YXIgTyA9IHRvT2JqZWN0KHRoaXMpO1xuICAgIHZhciBwdiA9IHRvUHJpbWl0aXZlKE8pO1xuICAgIHJldHVybiB0eXBlb2YgcHYgPT0gJ251bWJlcicgJiYgIWlzRmluaXRlKHB2KSA/IG51bGwgOiBPLnRvSVNPU3RyaW5nKCk7XG4gIH1cbn0pO1xuIiwiLy8gMjAuMy40LjM2IC8gMTUuOS41LjQzIERhdGUucHJvdG90eXBlLnRvSVNPU3RyaW5nKClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgdG9JU09TdHJpbmcgPSByZXF1aXJlKCcuL19kYXRlLXRvLWlzby1zdHJpbmcnKTtcblxuLy8gUGhhbnRvbUpTIC8gb2xkIFdlYktpdCBoYXMgYSBicm9rZW4gaW1wbGVtZW50YXRpb25zXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqIChEYXRlLnByb3RvdHlwZS50b0lTT1N0cmluZyAhPT0gdG9JU09TdHJpbmcpLCAnRGF0ZScsIHtcbiAgdG9JU09TdHJpbmc6IHRvSVNPU3RyaW5nXG59KTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIDIwLjMuNC4zNiAvIDE1LjkuNS40MyBEYXRlLnByb3RvdHlwZS50b0lTT1N0cmluZygpXG52YXIgZmFpbHMgPSByZXF1aXJlKCcuL19mYWlscycpO1xudmFyIGdldFRpbWUgPSBEYXRlLnByb3RvdHlwZS5nZXRUaW1lO1xudmFyICR0b0lTT1N0cmluZyA9IERhdGUucHJvdG90eXBlLnRvSVNPU3RyaW5nO1xuXG52YXIgbHogPSBmdW5jdGlvbiAobnVtKSB7XG4gIHJldHVybiBudW0gPiA5ID8gbnVtIDogJzAnICsgbnVtO1xufTtcblxuLy8gUGhhbnRvbUpTIC8gb2xkIFdlYktpdCBoYXMgYSBicm9rZW4gaW1wbGVtZW50YXRpb25zXG5tb2R1bGUuZXhwb3J0cyA9IChmYWlscyhmdW5jdGlvbiAoKSB7XG4gIHJldHVybiAkdG9JU09TdHJpbmcuY2FsbChuZXcgRGF0ZSgtNWUxMyAtIDEpKSAhPSAnMDM4NS0wNy0yNVQwNzowNjozOS45OTlaJztcbn0pIHx8ICFmYWlscyhmdW5jdGlvbiAoKSB7XG4gICR0b0lTT1N0cmluZy5jYWxsKG5ldyBEYXRlKE5hTikpO1xufSkpID8gZnVuY3Rpb24gdG9JU09TdHJpbmcoKSB7XG4gIGlmICghaXNGaW5pdGUoZ2V0VGltZS5jYWxsKHRoaXMpKSkgdGhyb3cgUmFuZ2VFcnJvcignSW52YWxpZCB0aW1lIHZhbHVlJyk7XG4gIHZhciBkID0gdGhpcztcbiAgdmFyIHkgPSBkLmdldFVUQ0Z1bGxZZWFyKCk7XG4gIHZhciBtID0gZC5nZXRVVENNaWxsaXNlY29uZHMoKTtcbiAgdmFyIHMgPSB5IDwgMCA/ICctJyA6IHkgPiA5OTk5ID8gJysnIDogJyc7XG4gIHJldHVybiBzICsgKCcwMDAwMCcgKyBNYXRoLmFicyh5KSkuc2xpY2UocyA/IC02IDogLTQpICtcbiAgICAnLScgKyBseihkLmdldFVUQ01vbnRoKCkgKyAxKSArICctJyArIGx6KGQuZ2V0VVRDRGF0ZSgpKSArXG4gICAgJ1QnICsgbHooZC5nZXRVVENIb3VycygpKSArICc6JyArIGx6KGQuZ2V0VVRDTWludXRlcygpKSArXG4gICAgJzonICsgbHooZC5nZXRVVENTZWNvbmRzKCkpICsgJy4nICsgKG0gPiA5OSA/IG0gOiAnMCcgKyBseihtKSkgKyAnWic7XG59IDogJHRvSVNPU3RyaW5nO1xuIiwidmFyIERhdGVQcm90byA9IERhdGUucHJvdG90eXBlO1xudmFyIElOVkFMSURfREFURSA9ICdJbnZhbGlkIERhdGUnO1xudmFyIFRPX1NUUklORyA9ICd0b1N0cmluZyc7XG52YXIgJHRvU3RyaW5nID0gRGF0ZVByb3RvW1RPX1NUUklOR107XG52YXIgZ2V0VGltZSA9IERhdGVQcm90by5nZXRUaW1lO1xuaWYgKG5ldyBEYXRlKE5hTikgKyAnJyAhPSBJTlZBTElEX0RBVEUpIHtcbiAgcmVxdWlyZSgnLi9fcmVkZWZpbmUnKShEYXRlUHJvdG8sIFRPX1NUUklORywgZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gICAgdmFyIHZhbHVlID0gZ2V0VGltZS5jYWxsKHRoaXMpO1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zZWxmLWNvbXBhcmVcbiAgICByZXR1cm4gdmFsdWUgPT09IHZhbHVlID8gJHRvU3RyaW5nLmNhbGwodGhpcykgOiBJTlZBTElEX0RBVEU7XG4gIH0pO1xufVxuIiwidmFyIFRPX1BSSU1JVElWRSA9IHJlcXVpcmUoJy4vX3drcycpKCd0b1ByaW1pdGl2ZScpO1xudmFyIHByb3RvID0gRGF0ZS5wcm90b3R5cGU7XG5cbmlmICghKFRPX1BSSU1JVElWRSBpbiBwcm90bykpIHJlcXVpcmUoJy4vX2hpZGUnKShwcm90bywgVE9fUFJJTUlUSVZFLCByZXF1aXJlKCcuL19kYXRlLXRvLXByaW1pdGl2ZScpKTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIHRvUHJpbWl0aXZlID0gcmVxdWlyZSgnLi9fdG8tcHJpbWl0aXZlJyk7XG52YXIgTlVNQkVSID0gJ251bWJlcic7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGhpbnQpIHtcbiAgaWYgKGhpbnQgIT09ICdzdHJpbmcnICYmIGhpbnQgIT09IE5VTUJFUiAmJiBoaW50ICE9PSAnZGVmYXVsdCcpIHRocm93IFR5cGVFcnJvcignSW5jb3JyZWN0IGhpbnQnKTtcbiAgcmV0dXJuIHRvUHJpbWl0aXZlKGFuT2JqZWN0KHRoaXMpLCBoaW50ICE9IE5VTUJFUik7XG59O1xuIiwiLy8gMjIuMS4yLjIgLyAxNS40LjMuMiBBcnJheS5pc0FycmF5KGFyZylcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnQXJyYXknLCB7IGlzQXJyYXk6IHJlcXVpcmUoJy4vX2lzLWFycmF5JykgfSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgY3R4ID0gcmVxdWlyZSgnLi9fY3R4Jyk7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8tb2JqZWN0Jyk7XG52YXIgY2FsbCA9IHJlcXVpcmUoJy4vX2l0ZXItY2FsbCcpO1xudmFyIGlzQXJyYXlJdGVyID0gcmVxdWlyZSgnLi9faXMtYXJyYXktaXRlcicpO1xudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi9fdG8tbGVuZ3RoJyk7XG52YXIgY3JlYXRlUHJvcGVydHkgPSByZXF1aXJlKCcuL19jcmVhdGUtcHJvcGVydHknKTtcbnZhciBnZXRJdGVyRm4gPSByZXF1aXJlKCcuL2NvcmUuZ2V0LWl0ZXJhdG9yLW1ldGhvZCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqICFyZXF1aXJlKCcuL19pdGVyLWRldGVjdCcpKGZ1bmN0aW9uIChpdGVyKSB7IEFycmF5LmZyb20oaXRlcik7IH0pLCAnQXJyYXknLCB7XG4gIC8vIDIyLjEuMi4xIEFycmF5LmZyb20oYXJyYXlMaWtlLCBtYXBmbiA9IHVuZGVmaW5lZCwgdGhpc0FyZyA9IHVuZGVmaW5lZClcbiAgZnJvbTogZnVuY3Rpb24gZnJvbShhcnJheUxpa2UgLyogLCBtYXBmbiA9IHVuZGVmaW5lZCwgdGhpc0FyZyA9IHVuZGVmaW5lZCAqLykge1xuICAgIHZhciBPID0gdG9PYmplY3QoYXJyYXlMaWtlKTtcbiAgICB2YXIgQyA9IHR5cGVvZiB0aGlzID09ICdmdW5jdGlvbicgPyB0aGlzIDogQXJyYXk7XG4gICAgdmFyIGFMZW4gPSBhcmd1bWVudHMubGVuZ3RoO1xuICAgIHZhciBtYXBmbiA9IGFMZW4gPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkO1xuICAgIHZhciBtYXBwaW5nID0gbWFwZm4gIT09IHVuZGVmaW5lZDtcbiAgICB2YXIgaW5kZXggPSAwO1xuICAgIHZhciBpdGVyRm4gPSBnZXRJdGVyRm4oTyk7XG4gICAgdmFyIGxlbmd0aCwgcmVzdWx0LCBzdGVwLCBpdGVyYXRvcjtcbiAgICBpZiAobWFwcGluZykgbWFwZm4gPSBjdHgobWFwZm4sIGFMZW4gPiAyID8gYXJndW1lbnRzWzJdIDogdW5kZWZpbmVkLCAyKTtcbiAgICAvLyBpZiBvYmplY3QgaXNuJ3QgaXRlcmFibGUgb3IgaXQncyBhcnJheSB3aXRoIGRlZmF1bHQgaXRlcmF0b3IgLSB1c2Ugc2ltcGxlIGNhc2VcbiAgICBpZiAoaXRlckZuICE9IHVuZGVmaW5lZCAmJiAhKEMgPT0gQXJyYXkgJiYgaXNBcnJheUl0ZXIoaXRlckZuKSkpIHtcbiAgICAgIGZvciAoaXRlcmF0b3IgPSBpdGVyRm4uY2FsbChPKSwgcmVzdWx0ID0gbmV3IEMoKTsgIShzdGVwID0gaXRlcmF0b3IubmV4dCgpKS5kb25lOyBpbmRleCsrKSB7XG4gICAgICAgIGNyZWF0ZVByb3BlcnR5KHJlc3VsdCwgaW5kZXgsIG1hcHBpbmcgPyBjYWxsKGl0ZXJhdG9yLCBtYXBmbiwgW3N0ZXAudmFsdWUsIGluZGV4XSwgdHJ1ZSkgOiBzdGVwLnZhbHVlKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgbGVuZ3RoID0gdG9MZW5ndGgoTy5sZW5ndGgpO1xuICAgICAgZm9yIChyZXN1bHQgPSBuZXcgQyhsZW5ndGgpOyBsZW5ndGggPiBpbmRleDsgaW5kZXgrKykge1xuICAgICAgICBjcmVhdGVQcm9wZXJ0eShyZXN1bHQsIGluZGV4LCBtYXBwaW5nID8gbWFwZm4oT1tpbmRleF0sIGluZGV4KSA6IE9baW5kZXhdKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmVzdWx0Lmxlbmd0aCA9IGluZGV4O1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBjcmVhdGVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4vX2NyZWF0ZS1wcm9wZXJ0eScpO1xuXG4vLyBXZWJLaXQgQXJyYXkub2YgaXNuJ3QgZ2VuZXJpY1xuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiByZXF1aXJlKCcuL19mYWlscycpKGZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gRigpIHsgLyogZW1wdHkgKi8gfVxuICByZXR1cm4gIShBcnJheS5vZi5jYWxsKEYpIGluc3RhbmNlb2YgRik7XG59KSwgJ0FycmF5Jywge1xuICAvLyAyMi4xLjIuMyBBcnJheS5vZiggLi4uaXRlbXMpXG4gIG9mOiBmdW5jdGlvbiBvZigvKiAuLi5hcmdzICovKSB7XG4gICAgdmFyIGluZGV4ID0gMDtcbiAgICB2YXIgYUxlbiA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gICAgdmFyIHJlc3VsdCA9IG5ldyAodHlwZW9mIHRoaXMgPT0gJ2Z1bmN0aW9uJyA/IHRoaXMgOiBBcnJheSkoYUxlbik7XG4gICAgd2hpbGUgKGFMZW4gPiBpbmRleCkgY3JlYXRlUHJvcGVydHkocmVzdWx0LCBpbmRleCwgYXJndW1lbnRzW2luZGV4KytdKTtcbiAgICByZXN1bHQubGVuZ3RoID0gYUxlbjtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIDIyLjEuMy4xMyBBcnJheS5wcm90b3R5cGUuam9pbihzZXBhcmF0b3IpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIHRvSU9iamVjdCA9IHJlcXVpcmUoJy4vX3RvLWlvYmplY3QnKTtcbnZhciBhcnJheUpvaW4gPSBbXS5qb2luO1xuXG4vLyBmYWxsYmFjayBmb3Igbm90IGFycmF5LWxpa2Ugc3RyaW5nc1xuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiAocmVxdWlyZSgnLi9faW9iamVjdCcpICE9IE9iamVjdCB8fCAhcmVxdWlyZSgnLi9fc3RyaWN0LW1ldGhvZCcpKGFycmF5Sm9pbikpLCAnQXJyYXknLCB7XG4gIGpvaW46IGZ1bmN0aW9uIGpvaW4oc2VwYXJhdG9yKSB7XG4gICAgcmV0dXJuIGFycmF5Sm9pbi5jYWxsKHRvSU9iamVjdCh0aGlzKSwgc2VwYXJhdG9yID09PSB1bmRlZmluZWQgPyAnLCcgOiBzZXBhcmF0b3IpO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgaHRtbCA9IHJlcXVpcmUoJy4vX2h0bWwnKTtcbnZhciBjb2YgPSByZXF1aXJlKCcuL19jb2YnKTtcbnZhciB0b0Fic29sdXRlSW5kZXggPSByZXF1aXJlKCcuL190by1hYnNvbHV0ZS1pbmRleCcpO1xudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi9fdG8tbGVuZ3RoJyk7XG52YXIgYXJyYXlTbGljZSA9IFtdLnNsaWNlO1xuXG4vLyBmYWxsYmFjayBmb3Igbm90IGFycmF5LWxpa2UgRVMzIHN0cmluZ3MgYW5kIERPTSBvYmplY3RzXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqIHJlcXVpcmUoJy4vX2ZhaWxzJykoZnVuY3Rpb24gKCkge1xuICBpZiAoaHRtbCkgYXJyYXlTbGljZS5jYWxsKGh0bWwpO1xufSksICdBcnJheScsIHtcbiAgc2xpY2U6IGZ1bmN0aW9uIHNsaWNlKGJlZ2luLCBlbmQpIHtcbiAgICB2YXIgbGVuID0gdG9MZW5ndGgodGhpcy5sZW5ndGgpO1xuICAgIHZhciBrbGFzcyA9IGNvZih0aGlzKTtcbiAgICBlbmQgPSBlbmQgPT09IHVuZGVmaW5lZCA/IGxlbiA6IGVuZDtcbiAgICBpZiAoa2xhc3MgPT0gJ0FycmF5JykgcmV0dXJuIGFycmF5U2xpY2UuY2FsbCh0aGlzLCBiZWdpbiwgZW5kKTtcbiAgICB2YXIgc3RhcnQgPSB0b0Fic29sdXRlSW5kZXgoYmVnaW4sIGxlbik7XG4gICAgdmFyIHVwVG8gPSB0b0Fic29sdXRlSW5kZXgoZW5kLCBsZW4pO1xuICAgIHZhciBzaXplID0gdG9MZW5ndGgodXBUbyAtIHN0YXJ0KTtcbiAgICB2YXIgY2xvbmVkID0gbmV3IEFycmF5KHNpemUpO1xuICAgIHZhciBpID0gMDtcbiAgICBmb3IgKDsgaSA8IHNpemU7IGkrKykgY2xvbmVkW2ldID0ga2xhc3MgPT0gJ1N0cmluZydcbiAgICAgID8gdGhpcy5jaGFyQXQoc3RhcnQgKyBpKVxuICAgICAgOiB0aGlzW3N0YXJ0ICsgaV07XG4gICAgcmV0dXJuIGNsb25lZDtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIGFGdW5jdGlvbiA9IHJlcXVpcmUoJy4vX2EtZnVuY3Rpb24nKTtcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4vX3RvLW9iamVjdCcpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi9fZmFpbHMnKTtcbnZhciAkc29ydCA9IFtdLnNvcnQ7XG52YXIgdGVzdCA9IFsxLCAyLCAzXTtcblxuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiAoZmFpbHMoZnVuY3Rpb24gKCkge1xuICAvLyBJRTgtXG4gIHRlc3Quc29ydCh1bmRlZmluZWQpO1xufSkgfHwgIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgLy8gVjggYnVnXG4gIHRlc3Quc29ydChudWxsKTtcbiAgLy8gT2xkIFdlYktpdFxufSkgfHwgIXJlcXVpcmUoJy4vX3N0cmljdC1tZXRob2QnKSgkc29ydCkpLCAnQXJyYXknLCB7XG4gIC8vIDIyLjEuMy4yNSBBcnJheS5wcm90b3R5cGUuc29ydChjb21wYXJlZm4pXG4gIHNvcnQ6IGZ1bmN0aW9uIHNvcnQoY29tcGFyZWZuKSB7XG4gICAgcmV0dXJuIGNvbXBhcmVmbiA9PT0gdW5kZWZpbmVkXG4gICAgICA/ICRzb3J0LmNhbGwodG9PYmplY3QodGhpcykpXG4gICAgICA6ICRzb3J0LmNhbGwodG9PYmplY3QodGhpcyksIGFGdW5jdGlvbihjb21wYXJlZm4pKTtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyICRmb3JFYWNoID0gcmVxdWlyZSgnLi9fYXJyYXktbWV0aG9kcycpKDApO1xudmFyIFNUUklDVCA9IHJlcXVpcmUoJy4vX3N0cmljdC1tZXRob2QnKShbXS5mb3JFYWNoLCB0cnVlKTtcblxuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiAhU1RSSUNULCAnQXJyYXknLCB7XG4gIC8vIDIyLjEuMy4xMCAvIDE1LjQuNC4xOCBBcnJheS5wcm90b3R5cGUuZm9yRWFjaChjYWxsYmFja2ZuIFssIHRoaXNBcmddKVxuICBmb3JFYWNoOiBmdW5jdGlvbiBmb3JFYWNoKGNhbGxiYWNrZm4gLyogLCB0aGlzQXJnICovKSB7XG4gICAgcmV0dXJuICRmb3JFYWNoKHRoaXMsIGNhbGxiYWNrZm4sIGFyZ3VtZW50c1sxXSk7XG4gIH1cbn0pO1xuIiwidmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG52YXIgaXNBcnJheSA9IHJlcXVpcmUoJy4vX2lzLWFycmF5Jyk7XG52YXIgU1BFQ0lFUyA9IHJlcXVpcmUoJy4vX3drcycpKCdzcGVjaWVzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKG9yaWdpbmFsKSB7XG4gIHZhciBDO1xuICBpZiAoaXNBcnJheShvcmlnaW5hbCkpIHtcbiAgICBDID0gb3JpZ2luYWwuY29uc3RydWN0b3I7XG4gICAgLy8gY3Jvc3MtcmVhbG0gZmFsbGJhY2tcbiAgICBpZiAodHlwZW9mIEMgPT0gJ2Z1bmN0aW9uJyAmJiAoQyA9PT0gQXJyYXkgfHwgaXNBcnJheShDLnByb3RvdHlwZSkpKSBDID0gdW5kZWZpbmVkO1xuICAgIGlmIChpc09iamVjdChDKSkge1xuICAgICAgQyA9IENbU1BFQ0lFU107XG4gICAgICBpZiAoQyA9PT0gbnVsbCkgQyA9IHVuZGVmaW5lZDtcbiAgICB9XG4gIH0gcmV0dXJuIEMgPT09IHVuZGVmaW5lZCA/IEFycmF5IDogQztcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyICRtYXAgPSByZXF1aXJlKCcuL19hcnJheS1tZXRob2RzJykoMSk7XG5cbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogIXJlcXVpcmUoJy4vX3N0cmljdC1tZXRob2QnKShbXS5tYXAsIHRydWUpLCAnQXJyYXknLCB7XG4gIC8vIDIyLjEuMy4xNSAvIDE1LjQuNC4xOSBBcnJheS5wcm90b3R5cGUubWFwKGNhbGxiYWNrZm4gWywgdGhpc0FyZ10pXG4gIG1hcDogZnVuY3Rpb24gbWFwKGNhbGxiYWNrZm4gLyogLCB0aGlzQXJnICovKSB7XG4gICAgcmV0dXJuICRtYXAodGhpcywgY2FsbGJhY2tmbiwgYXJndW1lbnRzWzFdKTtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyICRmaWx0ZXIgPSByZXF1aXJlKCcuL19hcnJheS1tZXRob2RzJykoMik7XG5cbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogIXJlcXVpcmUoJy4vX3N0cmljdC1tZXRob2QnKShbXS5maWx0ZXIsIHRydWUpLCAnQXJyYXknLCB7XG4gIC8vIDIyLjEuMy43IC8gMTUuNC40LjIwIEFycmF5LnByb3RvdHlwZS5maWx0ZXIoY2FsbGJhY2tmbiBbLCB0aGlzQXJnXSlcbiAgZmlsdGVyOiBmdW5jdGlvbiBmaWx0ZXIoY2FsbGJhY2tmbiAvKiAsIHRoaXNBcmcgKi8pIHtcbiAgICByZXR1cm4gJGZpbHRlcih0aGlzLCBjYWxsYmFja2ZuLCBhcmd1bWVudHNbMV0pO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgJHNvbWUgPSByZXF1aXJlKCcuL19hcnJheS1tZXRob2RzJykoMyk7XG5cbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogIXJlcXVpcmUoJy4vX3N0cmljdC1tZXRob2QnKShbXS5zb21lLCB0cnVlKSwgJ0FycmF5Jywge1xuICAvLyAyMi4xLjMuMjMgLyAxNS40LjQuMTcgQXJyYXkucHJvdG90eXBlLnNvbWUoY2FsbGJhY2tmbiBbLCB0aGlzQXJnXSlcbiAgc29tZTogZnVuY3Rpb24gc29tZShjYWxsYmFja2ZuIC8qICwgdGhpc0FyZyAqLykge1xuICAgIHJldHVybiAkc29tZSh0aGlzLCBjYWxsYmFja2ZuLCBhcmd1bWVudHNbMV0pO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgJGV2ZXJ5ID0gcmVxdWlyZSgnLi9fYXJyYXktbWV0aG9kcycpKDQpO1xuXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqICFyZXF1aXJlKCcuL19zdHJpY3QtbWV0aG9kJykoW10uZXZlcnksIHRydWUpLCAnQXJyYXknLCB7XG4gIC8vIDIyLjEuMy41IC8gMTUuNC40LjE2IEFycmF5LnByb3RvdHlwZS5ldmVyeShjYWxsYmFja2ZuIFssIHRoaXNBcmddKVxuICBldmVyeTogZnVuY3Rpb24gZXZlcnkoY2FsbGJhY2tmbiAvKiAsIHRoaXNBcmcgKi8pIHtcbiAgICByZXR1cm4gJGV2ZXJ5KHRoaXMsIGNhbGxiYWNrZm4sIGFyZ3VtZW50c1sxXSk7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciAkcmVkdWNlID0gcmVxdWlyZSgnLi9fYXJyYXktcmVkdWNlJyk7XG5cbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogIXJlcXVpcmUoJy4vX3N0cmljdC1tZXRob2QnKShbXS5yZWR1Y2UsIHRydWUpLCAnQXJyYXknLCB7XG4gIC8vIDIyLjEuMy4xOCAvIDE1LjQuNC4yMSBBcnJheS5wcm90b3R5cGUucmVkdWNlKGNhbGxiYWNrZm4gWywgaW5pdGlhbFZhbHVlXSlcbiAgcmVkdWNlOiBmdW5jdGlvbiByZWR1Y2UoY2FsbGJhY2tmbiAvKiAsIGluaXRpYWxWYWx1ZSAqLykge1xuICAgIHJldHVybiAkcmVkdWNlKHRoaXMsIGNhbGxiYWNrZm4sIGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3VtZW50c1sxXSwgZmFsc2UpO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgJHJlZHVjZSA9IHJlcXVpcmUoJy4vX2FycmF5LXJlZHVjZScpO1xuXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqICFyZXF1aXJlKCcuL19zdHJpY3QtbWV0aG9kJykoW10ucmVkdWNlUmlnaHQsIHRydWUpLCAnQXJyYXknLCB7XG4gIC8vIDIyLjEuMy4xOSAvIDE1LjQuNC4yMiBBcnJheS5wcm90b3R5cGUucmVkdWNlUmlnaHQoY2FsbGJhY2tmbiBbLCBpbml0aWFsVmFsdWVdKVxuICByZWR1Y2VSaWdodDogZnVuY3Rpb24gcmVkdWNlUmlnaHQoY2FsbGJhY2tmbiAvKiAsIGluaXRpYWxWYWx1ZSAqLykge1xuICAgIHJldHVybiAkcmVkdWNlKHRoaXMsIGNhbGxiYWNrZm4sIGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3VtZW50c1sxXSwgdHJ1ZSk7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciAkaW5kZXhPZiA9IHJlcXVpcmUoJy4vX2FycmF5LWluY2x1ZGVzJykoZmFsc2UpO1xudmFyICRuYXRpdmUgPSBbXS5pbmRleE9mO1xudmFyIE5FR0FUSVZFX1pFUk8gPSAhISRuYXRpdmUgJiYgMSAvIFsxXS5pbmRleE9mKDEsIC0wKSA8IDA7XG5cbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogKE5FR0FUSVZFX1pFUk8gfHwgIXJlcXVpcmUoJy4vX3N0cmljdC1tZXRob2QnKSgkbmF0aXZlKSksICdBcnJheScsIHtcbiAgLy8gMjIuMS4zLjExIC8gMTUuNC40LjE0IEFycmF5LnByb3RvdHlwZS5pbmRleE9mKHNlYXJjaEVsZW1lbnQgWywgZnJvbUluZGV4XSlcbiAgaW5kZXhPZjogZnVuY3Rpb24gaW5kZXhPZihzZWFyY2hFbGVtZW50IC8qICwgZnJvbUluZGV4ID0gMCAqLykge1xuICAgIHJldHVybiBORUdBVElWRV9aRVJPXG4gICAgICAvLyBjb252ZXJ0IC0wIHRvICswXG4gICAgICA/ICRuYXRpdmUuYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCAwXG4gICAgICA6ICRpbmRleE9mKHRoaXMsIHNlYXJjaEVsZW1lbnQsIGFyZ3VtZW50c1sxXSk7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciB0b0lPYmplY3QgPSByZXF1aXJlKCcuL190by1pb2JqZWN0Jyk7XG52YXIgdG9JbnRlZ2VyID0gcmVxdWlyZSgnLi9fdG8taW50ZWdlcicpO1xudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi9fdG8tbGVuZ3RoJyk7XG52YXIgJG5hdGl2ZSA9IFtdLmxhc3RJbmRleE9mO1xudmFyIE5FR0FUSVZFX1pFUk8gPSAhISRuYXRpdmUgJiYgMSAvIFsxXS5sYXN0SW5kZXhPZigxLCAtMCkgPCAwO1xuXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqIChORUdBVElWRV9aRVJPIHx8ICFyZXF1aXJlKCcuL19zdHJpY3QtbWV0aG9kJykoJG5hdGl2ZSkpLCAnQXJyYXknLCB7XG4gIC8vIDIyLjEuMy4xNCAvIDE1LjQuNC4xNSBBcnJheS5wcm90b3R5cGUubGFzdEluZGV4T2Yoc2VhcmNoRWxlbWVudCBbLCBmcm9tSW5kZXhdKVxuICBsYXN0SW5kZXhPZjogZnVuY3Rpb24gbGFzdEluZGV4T2Yoc2VhcmNoRWxlbWVudCAvKiAsIGZyb21JbmRleCA9IEBbKi0xXSAqLykge1xuICAgIC8vIGNvbnZlcnQgLTAgdG8gKzBcbiAgICBpZiAoTkVHQVRJVkVfWkVSTykgcmV0dXJuICRuYXRpdmUuYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCAwO1xuICAgIHZhciBPID0gdG9JT2JqZWN0KHRoaXMpO1xuICAgIHZhciBsZW5ndGggPSB0b0xlbmd0aChPLmxlbmd0aCk7XG4gICAgdmFyIGluZGV4ID0gbGVuZ3RoIC0gMTtcbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA+IDEpIGluZGV4ID0gTWF0aC5taW4oaW5kZXgsIHRvSW50ZWdlcihhcmd1bWVudHNbMV0pKTtcbiAgICBpZiAoaW5kZXggPCAwKSBpbmRleCA9IGxlbmd0aCArIGluZGV4O1xuICAgIGZvciAoO2luZGV4ID49IDA7IGluZGV4LS0pIGlmIChpbmRleCBpbiBPKSBpZiAoT1tpbmRleF0gPT09IHNlYXJjaEVsZW1lbnQpIHJldHVybiBpbmRleCB8fCAwO1xuICAgIHJldHVybiAtMTtcbiAgfVxufSk7XG4iLCIvLyAyMi4xLjMuMyBBcnJheS5wcm90b3R5cGUuY29weVdpdGhpbih0YXJnZXQsIHN0YXJ0LCBlbmQgPSB0aGlzLmxlbmd0aClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5QLCAnQXJyYXknLCB7IGNvcHlXaXRoaW46IHJlcXVpcmUoJy4vX2FycmF5LWNvcHktd2l0aGluJykgfSk7XG5cbnJlcXVpcmUoJy4vX2FkZC10by11bnNjb3BhYmxlcycpKCdjb3B5V2l0aGluJyk7XG4iLCIvLyAyMi4xLjMuNiBBcnJheS5wcm90b3R5cGUuZmlsbCh2YWx1ZSwgc3RhcnQgPSAwLCBlbmQgPSB0aGlzLmxlbmd0aClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5QLCAnQXJyYXknLCB7IGZpbGw6IHJlcXVpcmUoJy4vX2FycmF5LWZpbGwnKSB9KTtcblxucmVxdWlyZSgnLi9fYWRkLXRvLXVuc2NvcGFibGVzJykoJ2ZpbGwnKTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIDIyLjEuMy44IEFycmF5LnByb3RvdHlwZS5maW5kKHByZWRpY2F0ZSwgdGhpc0FyZyA9IHVuZGVmaW5lZClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgJGZpbmQgPSByZXF1aXJlKCcuL19hcnJheS1tZXRob2RzJykoNSk7XG52YXIgS0VZID0gJ2ZpbmQnO1xudmFyIGZvcmNlZCA9IHRydWU7XG4vLyBTaG91bGRuJ3Qgc2tpcCBob2xlc1xuaWYgKEtFWSBpbiBbXSkgQXJyYXkoMSlbS0VZXShmdW5jdGlvbiAoKSB7IGZvcmNlZCA9IGZhbHNlOyB9KTtcbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogZm9yY2VkLCAnQXJyYXknLCB7XG4gIGZpbmQ6IGZ1bmN0aW9uIGZpbmQoY2FsbGJhY2tmbiAvKiAsIHRoYXQgPSB1bmRlZmluZWQgKi8pIHtcbiAgICByZXR1cm4gJGZpbmQodGhpcywgY2FsbGJhY2tmbiwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpO1xuICB9XG59KTtcbnJlcXVpcmUoJy4vX2FkZC10by11bnNjb3BhYmxlcycpKEtFWSk7XG4iLCIndXNlIHN0cmljdCc7XG4vLyAyMi4xLjMuOSBBcnJheS5wcm90b3R5cGUuZmluZEluZGV4KHByZWRpY2F0ZSwgdGhpc0FyZyA9IHVuZGVmaW5lZClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgJGZpbmQgPSByZXF1aXJlKCcuL19hcnJheS1tZXRob2RzJykoNik7XG52YXIgS0VZID0gJ2ZpbmRJbmRleCc7XG52YXIgZm9yY2VkID0gdHJ1ZTtcbi8vIFNob3VsZG4ndCBza2lwIGhvbGVzXG5pZiAoS0VZIGluIFtdKSBBcnJheSgxKVtLRVldKGZ1bmN0aW9uICgpIHsgZm9yY2VkID0gZmFsc2U7IH0pO1xuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiBmb3JjZWQsICdBcnJheScsIHtcbiAgZmluZEluZGV4OiBmdW5jdGlvbiBmaW5kSW5kZXgoY2FsbGJhY2tmbiAvKiAsIHRoYXQgPSB1bmRlZmluZWQgKi8pIHtcbiAgICByZXR1cm4gJGZpbmQodGhpcywgY2FsbGJhY2tmbiwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpO1xuICB9XG59KTtcbnJlcXVpcmUoJy4vX2FkZC10by11bnNjb3BhYmxlcycpKEtFWSk7XG4iLCJyZXF1aXJlKCcuL19zZXQtc3BlY2llcycpKCdBcnJheScpO1xuIiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpO1xudmFyIGluaGVyaXRJZlJlcXVpcmVkID0gcmVxdWlyZSgnLi9faW5oZXJpdC1pZi1yZXF1aXJlZCcpO1xudmFyIGRQID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJykuZjtcbnZhciBnT1BOID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcG4nKS5mO1xudmFyIGlzUmVnRXhwID0gcmVxdWlyZSgnLi9faXMtcmVnZXhwJyk7XG52YXIgJGZsYWdzID0gcmVxdWlyZSgnLi9fZmxhZ3MnKTtcbnZhciAkUmVnRXhwID0gZ2xvYmFsLlJlZ0V4cDtcbnZhciBCYXNlID0gJFJlZ0V4cDtcbnZhciBwcm90byA9ICRSZWdFeHAucHJvdG90eXBlO1xudmFyIHJlMSA9IC9hL2c7XG52YXIgcmUyID0gL2EvZztcbi8vIFwibmV3XCIgY3JlYXRlcyBhIG5ldyBvYmplY3QsIG9sZCB3ZWJraXQgYnVnZ3kgaGVyZVxudmFyIENPUlJFQ1RfTkVXID0gbmV3ICRSZWdFeHAocmUxKSAhPT0gcmUxO1xuXG5pZiAocmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKSAmJiAoIUNPUlJFQ1RfTkVXIHx8IHJlcXVpcmUoJy4vX2ZhaWxzJykoZnVuY3Rpb24gKCkge1xuICByZTJbcmVxdWlyZSgnLi9fd2tzJykoJ21hdGNoJyldID0gZmFsc2U7XG4gIC8vIFJlZ0V4cCBjb25zdHJ1Y3RvciBjYW4gYWx0ZXIgZmxhZ3MgYW5kIElzUmVnRXhwIHdvcmtzIGNvcnJlY3Qgd2l0aCBAQG1hdGNoXG4gIHJldHVybiAkUmVnRXhwKHJlMSkgIT0gcmUxIHx8ICRSZWdFeHAocmUyKSA9PSByZTIgfHwgJFJlZ0V4cChyZTEsICdpJykgIT0gJy9hL2knO1xufSkpKSB7XG4gICRSZWdFeHAgPSBmdW5jdGlvbiBSZWdFeHAocCwgZikge1xuICAgIHZhciB0aVJFID0gdGhpcyBpbnN0YW5jZW9mICRSZWdFeHA7XG4gICAgdmFyIHBpUkUgPSBpc1JlZ0V4cChwKTtcbiAgICB2YXIgZmlVID0gZiA9PT0gdW5kZWZpbmVkO1xuICAgIHJldHVybiAhdGlSRSAmJiBwaVJFICYmIHAuY29uc3RydWN0b3IgPT09ICRSZWdFeHAgJiYgZmlVID8gcFxuICAgICAgOiBpbmhlcml0SWZSZXF1aXJlZChDT1JSRUNUX05FV1xuICAgICAgICA/IG5ldyBCYXNlKHBpUkUgJiYgIWZpVSA/IHAuc291cmNlIDogcCwgZilcbiAgICAgICAgOiBCYXNlKChwaVJFID0gcCBpbnN0YW5jZW9mICRSZWdFeHApID8gcC5zb3VyY2UgOiBwLCBwaVJFICYmIGZpVSA/ICRmbGFncy5jYWxsKHApIDogZilcbiAgICAgICwgdGlSRSA/IHRoaXMgOiBwcm90bywgJFJlZ0V4cCk7XG4gIH07XG4gIHZhciBwcm94eSA9IGZ1bmN0aW9uIChrZXkpIHtcbiAgICBrZXkgaW4gJFJlZ0V4cCB8fCBkUCgkUmVnRXhwLCBrZXksIHtcbiAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gQmFzZVtrZXldOyB9LFxuICAgICAgc2V0OiBmdW5jdGlvbiAoaXQpIHsgQmFzZVtrZXldID0gaXQ7IH1cbiAgICB9KTtcbiAgfTtcbiAgZm9yICh2YXIga2V5cyA9IGdPUE4oQmFzZSksIGkgPSAwOyBrZXlzLmxlbmd0aCA+IGk7KSBwcm94eShrZXlzW2krK10pO1xuICBwcm90by5jb25zdHJ1Y3RvciA9ICRSZWdFeHA7XG4gICRSZWdFeHAucHJvdG90eXBlID0gcHJvdG87XG4gIHJlcXVpcmUoJy4vX3JlZGVmaW5lJykoZ2xvYmFsLCAnUmVnRXhwJywgJFJlZ0V4cCk7XG59XG5cbnJlcXVpcmUoJy4vX3NldC1zcGVjaWVzJykoJ1JlZ0V4cCcpO1xuIiwiJ3VzZSBzdHJpY3QnO1xucmVxdWlyZSgnLi9lczYucmVnZXhwLmZsYWdzJyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciAkZmxhZ3MgPSByZXF1aXJlKCcuL19mbGFncycpO1xudmFyIERFU0NSSVBUT1JTID0gcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKTtcbnZhciBUT19TVFJJTkcgPSAndG9TdHJpbmcnO1xudmFyICR0b1N0cmluZyA9IC8uL1tUT19TVFJJTkddO1xuXG52YXIgZGVmaW5lID0gZnVuY3Rpb24gKGZuKSB7XG4gIHJlcXVpcmUoJy4vX3JlZGVmaW5lJykoUmVnRXhwLnByb3RvdHlwZSwgVE9fU1RSSU5HLCBmbiwgdHJ1ZSk7XG59O1xuXG4vLyAyMS4yLjUuMTQgUmVnRXhwLnByb3RvdHlwZS50b1N0cmluZygpXG5pZiAocmVxdWlyZSgnLi9fZmFpbHMnKShmdW5jdGlvbiAoKSB7IHJldHVybiAkdG9TdHJpbmcuY2FsbCh7IHNvdXJjZTogJ2EnLCBmbGFnczogJ2InIH0pICE9ICcvYS9iJzsgfSkpIHtcbiAgZGVmaW5lKGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICAgIHZhciBSID0gYW5PYmplY3QodGhpcyk7XG4gICAgcmV0dXJuICcvJy5jb25jYXQoUi5zb3VyY2UsICcvJyxcbiAgICAgICdmbGFncycgaW4gUiA/IFIuZmxhZ3MgOiAhREVTQ1JJUFRPUlMgJiYgUiBpbnN0YW5jZW9mIFJlZ0V4cCA/ICRmbGFncy5jYWxsKFIpIDogdW5kZWZpbmVkKTtcbiAgfSk7XG4vLyBGRjQ0LSBSZWdFeHAjdG9TdHJpbmcgaGFzIGEgd3JvbmcgbmFtZVxufSBlbHNlIGlmICgkdG9TdHJpbmcubmFtZSAhPSBUT19TVFJJTkcpIHtcbiAgZGVmaW5lKGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICAgIHJldHVybiAkdG9TdHJpbmcuY2FsbCh0aGlzKTtcbiAgfSk7XG59XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi9fdG8tbGVuZ3RoJyk7XG52YXIgYWR2YW5jZVN0cmluZ0luZGV4ID0gcmVxdWlyZSgnLi9fYWR2YW5jZS1zdHJpbmctaW5kZXgnKTtcbnZhciByZWdFeHBFeGVjID0gcmVxdWlyZSgnLi9fcmVnZXhwLWV4ZWMtYWJzdHJhY3QnKTtcblxuLy8gQEBtYXRjaCBsb2dpY1xucmVxdWlyZSgnLi9fZml4LXJlLXdrcycpKCdtYXRjaCcsIDEsIGZ1bmN0aW9uIChkZWZpbmVkLCBNQVRDSCwgJG1hdGNoLCBtYXliZUNhbGxOYXRpdmUpIHtcbiAgcmV0dXJuIFtcbiAgICAvLyBgU3RyaW5nLnByb3RvdHlwZS5tYXRjaGAgbWV0aG9kXG4gICAgLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtc3RyaW5nLnByb3RvdHlwZS5tYXRjaFxuICAgIGZ1bmN0aW9uIG1hdGNoKHJlZ2V4cCkge1xuICAgICAgdmFyIE8gPSBkZWZpbmVkKHRoaXMpO1xuICAgICAgdmFyIGZuID0gcmVnZXhwID09IHVuZGVmaW5lZCA/IHVuZGVmaW5lZCA6IHJlZ2V4cFtNQVRDSF07XG4gICAgICByZXR1cm4gZm4gIT09IHVuZGVmaW5lZCA/IGZuLmNhbGwocmVnZXhwLCBPKSA6IG5ldyBSZWdFeHAocmVnZXhwKVtNQVRDSF0oU3RyaW5nKE8pKTtcbiAgICB9LFxuICAgIC8vIGBSZWdFeHAucHJvdG90eXBlW0BAbWF0Y2hdYCBtZXRob2RcbiAgICAvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1yZWdleHAucHJvdG90eXBlLUBAbWF0Y2hcbiAgICBmdW5jdGlvbiAocmVnZXhwKSB7XG4gICAgICB2YXIgcmVzID0gbWF5YmVDYWxsTmF0aXZlKCRtYXRjaCwgcmVnZXhwLCB0aGlzKTtcbiAgICAgIGlmIChyZXMuZG9uZSkgcmV0dXJuIHJlcy52YWx1ZTtcbiAgICAgIHZhciByeCA9IGFuT2JqZWN0KHJlZ2V4cCk7XG4gICAgICB2YXIgUyA9IFN0cmluZyh0aGlzKTtcbiAgICAgIGlmICghcnguZ2xvYmFsKSByZXR1cm4gcmVnRXhwRXhlYyhyeCwgUyk7XG4gICAgICB2YXIgZnVsbFVuaWNvZGUgPSByeC51bmljb2RlO1xuICAgICAgcngubGFzdEluZGV4ID0gMDtcbiAgICAgIHZhciBBID0gW107XG4gICAgICB2YXIgbiA9IDA7XG4gICAgICB2YXIgcmVzdWx0O1xuICAgICAgd2hpbGUgKChyZXN1bHQgPSByZWdFeHBFeGVjKHJ4LCBTKSkgIT09IG51bGwpIHtcbiAgICAgICAgdmFyIG1hdGNoU3RyID0gU3RyaW5nKHJlc3VsdFswXSk7XG4gICAgICAgIEFbbl0gPSBtYXRjaFN0cjtcbiAgICAgICAgaWYgKG1hdGNoU3RyID09PSAnJykgcngubGFzdEluZGV4ID0gYWR2YW5jZVN0cmluZ0luZGV4KFMsIHRvTGVuZ3RoKHJ4Lmxhc3RJbmRleCksIGZ1bGxVbmljb2RlKTtcbiAgICAgICAgbisrO1xuICAgICAgfVxuICAgICAgcmV0dXJuIG4gPT09IDAgPyBudWxsIDogQTtcbiAgICB9XG4gIF07XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuL190by1vYmplY3QnKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpO1xudmFyIHRvSW50ZWdlciA9IHJlcXVpcmUoJy4vX3RvLWludGVnZXInKTtcbnZhciBhZHZhbmNlU3RyaW5nSW5kZXggPSByZXF1aXJlKCcuL19hZHZhbmNlLXN0cmluZy1pbmRleCcpO1xudmFyIHJlZ0V4cEV4ZWMgPSByZXF1aXJlKCcuL19yZWdleHAtZXhlYy1hYnN0cmFjdCcpO1xudmFyIG1heCA9IE1hdGgubWF4O1xudmFyIG1pbiA9IE1hdGgubWluO1xudmFyIGZsb29yID0gTWF0aC5mbG9vcjtcbnZhciBTVUJTVElUVVRJT05fU1lNQk9MUyA9IC9cXCQoWyQmYCddfFxcZFxcZD98PFtePl0qPikvZztcbnZhciBTVUJTVElUVVRJT05fU1lNQk9MU19OT19OQU1FRCA9IC9cXCQoWyQmYCddfFxcZFxcZD8pL2c7XG5cbnZhciBtYXliZVRvU3RyaW5nID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBpdCA9PT0gdW5kZWZpbmVkID8gaXQgOiBTdHJpbmcoaXQpO1xufTtcblxuLy8gQEByZXBsYWNlIGxvZ2ljXG5yZXF1aXJlKCcuL19maXgtcmUtd2tzJykoJ3JlcGxhY2UnLCAyLCBmdW5jdGlvbiAoZGVmaW5lZCwgUkVQTEFDRSwgJHJlcGxhY2UsIG1heWJlQ2FsbE5hdGl2ZSkge1xuICByZXR1cm4gW1xuICAgIC8vIGBTdHJpbmcucHJvdG90eXBlLnJlcGxhY2VgIG1ldGhvZFxuICAgIC8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLXN0cmluZy5wcm90b3R5cGUucmVwbGFjZVxuICAgIGZ1bmN0aW9uIHJlcGxhY2Uoc2VhcmNoVmFsdWUsIHJlcGxhY2VWYWx1ZSkge1xuICAgICAgdmFyIE8gPSBkZWZpbmVkKHRoaXMpO1xuICAgICAgdmFyIGZuID0gc2VhcmNoVmFsdWUgPT0gdW5kZWZpbmVkID8gdW5kZWZpbmVkIDogc2VhcmNoVmFsdWVbUkVQTEFDRV07XG4gICAgICByZXR1cm4gZm4gIT09IHVuZGVmaW5lZFxuICAgICAgICA/IGZuLmNhbGwoc2VhcmNoVmFsdWUsIE8sIHJlcGxhY2VWYWx1ZSlcbiAgICAgICAgOiAkcmVwbGFjZS5jYWxsKFN0cmluZyhPKSwgc2VhcmNoVmFsdWUsIHJlcGxhY2VWYWx1ZSk7XG4gICAgfSxcbiAgICAvLyBgUmVnRXhwLnByb3RvdHlwZVtAQHJlcGxhY2VdYCBtZXRob2RcbiAgICAvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1yZWdleHAucHJvdG90eXBlLUBAcmVwbGFjZVxuICAgIGZ1bmN0aW9uIChyZWdleHAsIHJlcGxhY2VWYWx1ZSkge1xuICAgICAgdmFyIHJlcyA9IG1heWJlQ2FsbE5hdGl2ZSgkcmVwbGFjZSwgcmVnZXhwLCB0aGlzLCByZXBsYWNlVmFsdWUpO1xuICAgICAgaWYgKHJlcy5kb25lKSByZXR1cm4gcmVzLnZhbHVlO1xuXG4gICAgICB2YXIgcnggPSBhbk9iamVjdChyZWdleHApO1xuICAgICAgdmFyIFMgPSBTdHJpbmcodGhpcyk7XG4gICAgICB2YXIgZnVuY3Rpb25hbFJlcGxhY2UgPSB0eXBlb2YgcmVwbGFjZVZhbHVlID09PSAnZnVuY3Rpb24nO1xuICAgICAgaWYgKCFmdW5jdGlvbmFsUmVwbGFjZSkgcmVwbGFjZVZhbHVlID0gU3RyaW5nKHJlcGxhY2VWYWx1ZSk7XG4gICAgICB2YXIgZ2xvYmFsID0gcnguZ2xvYmFsO1xuICAgICAgaWYgKGdsb2JhbCkge1xuICAgICAgICB2YXIgZnVsbFVuaWNvZGUgPSByeC51bmljb2RlO1xuICAgICAgICByeC5sYXN0SW5kZXggPSAwO1xuICAgICAgfVxuICAgICAgdmFyIHJlc3VsdHMgPSBbXTtcbiAgICAgIHdoaWxlICh0cnVlKSB7XG4gICAgICAgIHZhciByZXN1bHQgPSByZWdFeHBFeGVjKHJ4LCBTKTtcbiAgICAgICAgaWYgKHJlc3VsdCA9PT0gbnVsbCkgYnJlYWs7XG4gICAgICAgIHJlc3VsdHMucHVzaChyZXN1bHQpO1xuICAgICAgICBpZiAoIWdsb2JhbCkgYnJlYWs7XG4gICAgICAgIHZhciBtYXRjaFN0ciA9IFN0cmluZyhyZXN1bHRbMF0pO1xuICAgICAgICBpZiAobWF0Y2hTdHIgPT09ICcnKSByeC5sYXN0SW5kZXggPSBhZHZhbmNlU3RyaW5nSW5kZXgoUywgdG9MZW5ndGgocngubGFzdEluZGV4KSwgZnVsbFVuaWNvZGUpO1xuICAgICAgfVxuICAgICAgdmFyIGFjY3VtdWxhdGVkUmVzdWx0ID0gJyc7XG4gICAgICB2YXIgbmV4dFNvdXJjZVBvc2l0aW9uID0gMDtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcmVzdWx0cy5sZW5ndGg7IGkrKykge1xuICAgICAgICByZXN1bHQgPSByZXN1bHRzW2ldO1xuICAgICAgICB2YXIgbWF0Y2hlZCA9IFN0cmluZyhyZXN1bHRbMF0pO1xuICAgICAgICB2YXIgcG9zaXRpb24gPSBtYXgobWluKHRvSW50ZWdlcihyZXN1bHQuaW5kZXgpLCBTLmxlbmd0aCksIDApO1xuICAgICAgICB2YXIgY2FwdHVyZXMgPSBbXTtcbiAgICAgICAgLy8gTk9URTogVGhpcyBpcyBlcXVpdmFsZW50IHRvXG4gICAgICAgIC8vICAgY2FwdHVyZXMgPSByZXN1bHQuc2xpY2UoMSkubWFwKG1heWJlVG9TdHJpbmcpXG4gICAgICAgIC8vIGJ1dCBmb3Igc29tZSByZWFzb24gYG5hdGl2ZVNsaWNlLmNhbGwocmVzdWx0LCAxLCByZXN1bHQubGVuZ3RoKWAgKGNhbGxlZCBpblxuICAgICAgICAvLyB0aGUgc2xpY2UgcG9seWZpbGwgd2hlbiBzbGljaW5nIG5hdGl2ZSBhcnJheXMpIFwiZG9lc24ndCB3b3JrXCIgaW4gc2FmYXJpIDkgYW5kXG4gICAgICAgIC8vIGNhdXNlcyBhIGNyYXNoIChodHRwczovL3Bhc3RlYmluLmNvbS9OMjFRemVRQSkgd2hlbiB0cnlpbmcgdG8gZGVidWcgaXQuXG4gICAgICAgIGZvciAodmFyIGogPSAxOyBqIDwgcmVzdWx0Lmxlbmd0aDsgaisrKSBjYXB0dXJlcy5wdXNoKG1heWJlVG9TdHJpbmcocmVzdWx0W2pdKSk7XG4gICAgICAgIHZhciBuYW1lZENhcHR1cmVzID0gcmVzdWx0Lmdyb3VwcztcbiAgICAgICAgaWYgKGZ1bmN0aW9uYWxSZXBsYWNlKSB7XG4gICAgICAgICAgdmFyIHJlcGxhY2VyQXJncyA9IFttYXRjaGVkXS5jb25jYXQoY2FwdHVyZXMsIHBvc2l0aW9uLCBTKTtcbiAgICAgICAgICBpZiAobmFtZWRDYXB0dXJlcyAhPT0gdW5kZWZpbmVkKSByZXBsYWNlckFyZ3MucHVzaChuYW1lZENhcHR1cmVzKTtcbiAgICAgICAgICB2YXIgcmVwbGFjZW1lbnQgPSBTdHJpbmcocmVwbGFjZVZhbHVlLmFwcGx5KHVuZGVmaW5lZCwgcmVwbGFjZXJBcmdzKSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmVwbGFjZW1lbnQgPSBnZXRTdWJzdGl0dXRpb24obWF0Y2hlZCwgUywgcG9zaXRpb24sIGNhcHR1cmVzLCBuYW1lZENhcHR1cmVzLCByZXBsYWNlVmFsdWUpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChwb3NpdGlvbiA+PSBuZXh0U291cmNlUG9zaXRpb24pIHtcbiAgICAgICAgICBhY2N1bXVsYXRlZFJlc3VsdCArPSBTLnNsaWNlKG5leHRTb3VyY2VQb3NpdGlvbiwgcG9zaXRpb24pICsgcmVwbGFjZW1lbnQ7XG4gICAgICAgICAgbmV4dFNvdXJjZVBvc2l0aW9uID0gcG9zaXRpb24gKyBtYXRjaGVkLmxlbmd0aDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIGFjY3VtdWxhdGVkUmVzdWx0ICsgUy5zbGljZShuZXh0U291cmNlUG9zaXRpb24pO1xuICAgIH1cbiAgXTtcblxuICAgIC8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLWdldHN1YnN0aXR1dGlvblxuICBmdW5jdGlvbiBnZXRTdWJzdGl0dXRpb24obWF0Y2hlZCwgc3RyLCBwb3NpdGlvbiwgY2FwdHVyZXMsIG5hbWVkQ2FwdHVyZXMsIHJlcGxhY2VtZW50KSB7XG4gICAgdmFyIHRhaWxQb3MgPSBwb3NpdGlvbiArIG1hdGNoZWQubGVuZ3RoO1xuICAgIHZhciBtID0gY2FwdHVyZXMubGVuZ3RoO1xuICAgIHZhciBzeW1ib2xzID0gU1VCU1RJVFVUSU9OX1NZTUJPTFNfTk9fTkFNRUQ7XG4gICAgaWYgKG5hbWVkQ2FwdHVyZXMgIT09IHVuZGVmaW5lZCkge1xuICAgICAgbmFtZWRDYXB0dXJlcyA9IHRvT2JqZWN0KG5hbWVkQ2FwdHVyZXMpO1xuICAgICAgc3ltYm9scyA9IFNVQlNUSVRVVElPTl9TWU1CT0xTO1xuICAgIH1cbiAgICByZXR1cm4gJHJlcGxhY2UuY2FsbChyZXBsYWNlbWVudCwgc3ltYm9scywgZnVuY3Rpb24gKG1hdGNoLCBjaCkge1xuICAgICAgdmFyIGNhcHR1cmU7XG4gICAgICBzd2l0Y2ggKGNoLmNoYXJBdCgwKSkge1xuICAgICAgICBjYXNlICckJzogcmV0dXJuICckJztcbiAgICAgICAgY2FzZSAnJic6IHJldHVybiBtYXRjaGVkO1xuICAgICAgICBjYXNlICdgJzogcmV0dXJuIHN0ci5zbGljZSgwLCBwb3NpdGlvbik7XG4gICAgICAgIGNhc2UgXCInXCI6IHJldHVybiBzdHIuc2xpY2UodGFpbFBvcyk7XG4gICAgICAgIGNhc2UgJzwnOlxuICAgICAgICAgIGNhcHR1cmUgPSBuYW1lZENhcHR1cmVzW2NoLnNsaWNlKDEsIC0xKV07XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGRlZmF1bHQ6IC8vIFxcZFxcZD9cbiAgICAgICAgICB2YXIgbiA9ICtjaDtcbiAgICAgICAgICBpZiAobiA9PT0gMCkgcmV0dXJuIG1hdGNoO1xuICAgICAgICAgIGlmIChuID4gbSkge1xuICAgICAgICAgICAgdmFyIGYgPSBmbG9vcihuIC8gMTApO1xuICAgICAgICAgICAgaWYgKGYgPT09IDApIHJldHVybiBtYXRjaDtcbiAgICAgICAgICAgIGlmIChmIDw9IG0pIHJldHVybiBjYXB0dXJlc1tmIC0gMV0gPT09IHVuZGVmaW5lZCA/IGNoLmNoYXJBdCgxKSA6IGNhcHR1cmVzW2YgLSAxXSArIGNoLmNoYXJBdCgxKTtcbiAgICAgICAgICAgIHJldHVybiBtYXRjaDtcbiAgICAgICAgICB9XG4gICAgICAgICAgY2FwdHVyZSA9IGNhcHR1cmVzW24gLSAxXTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBjYXB0dXJlID09PSB1bmRlZmluZWQgPyAnJyA6IGNhcHR1cmU7XG4gICAgfSk7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciBzYW1lVmFsdWUgPSByZXF1aXJlKCcuL19zYW1lLXZhbHVlJyk7XG52YXIgcmVnRXhwRXhlYyA9IHJlcXVpcmUoJy4vX3JlZ2V4cC1leGVjLWFic3RyYWN0Jyk7XG5cbi8vIEBAc2VhcmNoIGxvZ2ljXG5yZXF1aXJlKCcuL19maXgtcmUtd2tzJykoJ3NlYXJjaCcsIDEsIGZ1bmN0aW9uIChkZWZpbmVkLCBTRUFSQ0gsICRzZWFyY2gsIG1heWJlQ2FsbE5hdGl2ZSkge1xuICByZXR1cm4gW1xuICAgIC8vIGBTdHJpbmcucHJvdG90eXBlLnNlYXJjaGAgbWV0aG9kXG4gICAgLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtc3RyaW5nLnByb3RvdHlwZS5zZWFyY2hcbiAgICBmdW5jdGlvbiBzZWFyY2gocmVnZXhwKSB7XG4gICAgICB2YXIgTyA9IGRlZmluZWQodGhpcyk7XG4gICAgICB2YXIgZm4gPSByZWdleHAgPT0gdW5kZWZpbmVkID8gdW5kZWZpbmVkIDogcmVnZXhwW1NFQVJDSF07XG4gICAgICByZXR1cm4gZm4gIT09IHVuZGVmaW5lZCA/IGZuLmNhbGwocmVnZXhwLCBPKSA6IG5ldyBSZWdFeHAocmVnZXhwKVtTRUFSQ0hdKFN0cmluZyhPKSk7XG4gICAgfSxcbiAgICAvLyBgUmVnRXhwLnByb3RvdHlwZVtAQHNlYXJjaF1gIG1ldGhvZFxuICAgIC8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLXJlZ2V4cC5wcm90b3R5cGUtQEBzZWFyY2hcbiAgICBmdW5jdGlvbiAocmVnZXhwKSB7XG4gICAgICB2YXIgcmVzID0gbWF5YmVDYWxsTmF0aXZlKCRzZWFyY2gsIHJlZ2V4cCwgdGhpcyk7XG4gICAgICBpZiAocmVzLmRvbmUpIHJldHVybiByZXMudmFsdWU7XG4gICAgICB2YXIgcnggPSBhbk9iamVjdChyZWdleHApO1xuICAgICAgdmFyIFMgPSBTdHJpbmcodGhpcyk7XG4gICAgICB2YXIgcHJldmlvdXNMYXN0SW5kZXggPSByeC5sYXN0SW5kZXg7XG4gICAgICBpZiAoIXNhbWVWYWx1ZShwcmV2aW91c0xhc3RJbmRleCwgMCkpIHJ4Lmxhc3RJbmRleCA9IDA7XG4gICAgICB2YXIgcmVzdWx0ID0gcmVnRXhwRXhlYyhyeCwgUyk7XG4gICAgICBpZiAoIXNhbWVWYWx1ZShyeC5sYXN0SW5kZXgsIHByZXZpb3VzTGFzdEluZGV4KSkgcngubGFzdEluZGV4ID0gcHJldmlvdXNMYXN0SW5kZXg7XG4gICAgICByZXR1cm4gcmVzdWx0ID09PSBudWxsID8gLTEgOiByZXN1bHQuaW5kZXg7XG4gICAgfVxuICBdO1xufSk7XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBpc1JlZ0V4cCA9IHJlcXVpcmUoJy4vX2lzLXJlZ2V4cCcpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgc3BlY2llc0NvbnN0cnVjdG9yID0gcmVxdWlyZSgnLi9fc3BlY2llcy1jb25zdHJ1Y3RvcicpO1xudmFyIGFkdmFuY2VTdHJpbmdJbmRleCA9IHJlcXVpcmUoJy4vX2FkdmFuY2Utc3RyaW5nLWluZGV4Jyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuL190by1sZW5ndGgnKTtcbnZhciBjYWxsUmVnRXhwRXhlYyA9IHJlcXVpcmUoJy4vX3JlZ2V4cC1leGVjLWFic3RyYWN0Jyk7XG52YXIgcmVnZXhwRXhlYyA9IHJlcXVpcmUoJy4vX3JlZ2V4cC1leGVjJyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuL19mYWlscycpO1xudmFyICRtaW4gPSBNYXRoLm1pbjtcbnZhciAkcHVzaCA9IFtdLnB1c2g7XG52YXIgJFNQTElUID0gJ3NwbGl0JztcbnZhciBMRU5HVEggPSAnbGVuZ3RoJztcbnZhciBMQVNUX0lOREVYID0gJ2xhc3RJbmRleCc7XG52YXIgTUFYX1VJTlQzMiA9IDB4ZmZmZmZmZmY7XG5cbi8vIGJhYmVsLW1pbmlmeSB0cmFuc3BpbGVzIFJlZ0V4cCgneCcsICd5JykgLT4gL3gveSBhbmQgaXQgY2F1c2VzIFN5bnRheEVycm9yXG52YXIgU1VQUE9SVFNfWSA9ICFmYWlscyhmdW5jdGlvbiAoKSB7IFJlZ0V4cChNQVhfVUlOVDMyLCAneScpOyB9KTtcblxuLy8gQEBzcGxpdCBsb2dpY1xucmVxdWlyZSgnLi9fZml4LXJlLXdrcycpKCdzcGxpdCcsIDIsIGZ1bmN0aW9uIChkZWZpbmVkLCBTUExJVCwgJHNwbGl0LCBtYXliZUNhbGxOYXRpdmUpIHtcbiAgdmFyIGludGVybmFsU3BsaXQ7XG4gIGlmIChcbiAgICAnYWJiYydbJFNQTElUXSgvKGIpKi8pWzFdID09ICdjJyB8fFxuICAgICd0ZXN0J1skU1BMSVRdKC8oPzopLywgLTEpW0xFTkdUSF0gIT0gNCB8fFxuICAgICdhYidbJFNQTElUXSgvKD86YWIpKi8pW0xFTkdUSF0gIT0gMiB8fFxuICAgICcuJ1skU1BMSVRdKC8oLj8pKC4/KS8pW0xFTkdUSF0gIT0gNCB8fFxuICAgICcuJ1skU1BMSVRdKC8oKSgpLylbTEVOR1RIXSA+IDEgfHxcbiAgICAnJ1skU1BMSVRdKC8uPy8pW0xFTkdUSF1cbiAgKSB7XG4gICAgLy8gYmFzZWQgb24gZXM1LXNoaW0gaW1wbGVtZW50YXRpb24sIG5lZWQgdG8gcmV3b3JrIGl0XG4gICAgaW50ZXJuYWxTcGxpdCA9IGZ1bmN0aW9uIChzZXBhcmF0b3IsIGxpbWl0KSB7XG4gICAgICB2YXIgc3RyaW5nID0gU3RyaW5nKHRoaXMpO1xuICAgICAgaWYgKHNlcGFyYXRvciA9PT0gdW5kZWZpbmVkICYmIGxpbWl0ID09PSAwKSByZXR1cm4gW107XG4gICAgICAvLyBJZiBgc2VwYXJhdG9yYCBpcyBub3QgYSByZWdleCwgdXNlIG5hdGl2ZSBzcGxpdFxuICAgICAgaWYgKCFpc1JlZ0V4cChzZXBhcmF0b3IpKSByZXR1cm4gJHNwbGl0LmNhbGwoc3RyaW5nLCBzZXBhcmF0b3IsIGxpbWl0KTtcbiAgICAgIHZhciBvdXRwdXQgPSBbXTtcbiAgICAgIHZhciBmbGFncyA9IChzZXBhcmF0b3IuaWdub3JlQ2FzZSA/ICdpJyA6ICcnKSArXG4gICAgICAgICAgICAgICAgICAoc2VwYXJhdG9yLm11bHRpbGluZSA/ICdtJyA6ICcnKSArXG4gICAgICAgICAgICAgICAgICAoc2VwYXJhdG9yLnVuaWNvZGUgPyAndScgOiAnJykgK1xuICAgICAgICAgICAgICAgICAgKHNlcGFyYXRvci5zdGlja3kgPyAneScgOiAnJyk7XG4gICAgICB2YXIgbGFzdExhc3RJbmRleCA9IDA7XG4gICAgICB2YXIgc3BsaXRMaW1pdCA9IGxpbWl0ID09PSB1bmRlZmluZWQgPyBNQVhfVUlOVDMyIDogbGltaXQgPj4+IDA7XG4gICAgICAvLyBNYWtlIGBnbG9iYWxgIGFuZCBhdm9pZCBgbGFzdEluZGV4YCBpc3N1ZXMgYnkgd29ya2luZyB3aXRoIGEgY29weVxuICAgICAgdmFyIHNlcGFyYXRvckNvcHkgPSBuZXcgUmVnRXhwKHNlcGFyYXRvci5zb3VyY2UsIGZsYWdzICsgJ2cnKTtcbiAgICAgIHZhciBtYXRjaCwgbGFzdEluZGV4LCBsYXN0TGVuZ3RoO1xuICAgICAgd2hpbGUgKG1hdGNoID0gcmVnZXhwRXhlYy5jYWxsKHNlcGFyYXRvckNvcHksIHN0cmluZykpIHtcbiAgICAgICAgbGFzdEluZGV4ID0gc2VwYXJhdG9yQ29weVtMQVNUX0lOREVYXTtcbiAgICAgICAgaWYgKGxhc3RJbmRleCA+IGxhc3RMYXN0SW5kZXgpIHtcbiAgICAgICAgICBvdXRwdXQucHVzaChzdHJpbmcuc2xpY2UobGFzdExhc3RJbmRleCwgbWF0Y2guaW5kZXgpKTtcbiAgICAgICAgICBpZiAobWF0Y2hbTEVOR1RIXSA+IDEgJiYgbWF0Y2guaW5kZXggPCBzdHJpbmdbTEVOR1RIXSkgJHB1c2guYXBwbHkob3V0cHV0LCBtYXRjaC5zbGljZSgxKSk7XG4gICAgICAgICAgbGFzdExlbmd0aCA9IG1hdGNoWzBdW0xFTkdUSF07XG4gICAgICAgICAgbGFzdExhc3RJbmRleCA9IGxhc3RJbmRleDtcbiAgICAgICAgICBpZiAob3V0cHV0W0xFTkdUSF0gPj0gc3BsaXRMaW1pdCkgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHNlcGFyYXRvckNvcHlbTEFTVF9JTkRFWF0gPT09IG1hdGNoLmluZGV4KSBzZXBhcmF0b3JDb3B5W0xBU1RfSU5ERVhdKys7IC8vIEF2b2lkIGFuIGluZmluaXRlIGxvb3BcbiAgICAgIH1cbiAgICAgIGlmIChsYXN0TGFzdEluZGV4ID09PSBzdHJpbmdbTEVOR1RIXSkge1xuICAgICAgICBpZiAobGFzdExlbmd0aCB8fCAhc2VwYXJhdG9yQ29weS50ZXN0KCcnKSkgb3V0cHV0LnB1c2goJycpO1xuICAgICAgfSBlbHNlIG91dHB1dC5wdXNoKHN0cmluZy5zbGljZShsYXN0TGFzdEluZGV4KSk7XG4gICAgICByZXR1cm4gb3V0cHV0W0xFTkdUSF0gPiBzcGxpdExpbWl0ID8gb3V0cHV0LnNsaWNlKDAsIHNwbGl0TGltaXQpIDogb3V0cHV0O1xuICAgIH07XG4gIC8vIENoYWtyYSwgVjhcbiAgfSBlbHNlIGlmICgnMCdbJFNQTElUXSh1bmRlZmluZWQsIDApW0xFTkdUSF0pIHtcbiAgICBpbnRlcm5hbFNwbGl0ID0gZnVuY3Rpb24gKHNlcGFyYXRvciwgbGltaXQpIHtcbiAgICAgIHJldHVybiBzZXBhcmF0b3IgPT09IHVuZGVmaW5lZCAmJiBsaW1pdCA9PT0gMCA/IFtdIDogJHNwbGl0LmNhbGwodGhpcywgc2VwYXJhdG9yLCBsaW1pdCk7XG4gICAgfTtcbiAgfSBlbHNlIHtcbiAgICBpbnRlcm5hbFNwbGl0ID0gJHNwbGl0O1xuICB9XG5cbiAgcmV0dXJuIFtcbiAgICAvLyBgU3RyaW5nLnByb3RvdHlwZS5zcGxpdGAgbWV0aG9kXG4gICAgLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtc3RyaW5nLnByb3RvdHlwZS5zcGxpdFxuICAgIGZ1bmN0aW9uIHNwbGl0KHNlcGFyYXRvciwgbGltaXQpIHtcbiAgICAgIHZhciBPID0gZGVmaW5lZCh0aGlzKTtcbiAgICAgIHZhciBzcGxpdHRlciA9IHNlcGFyYXRvciA9PSB1bmRlZmluZWQgPyB1bmRlZmluZWQgOiBzZXBhcmF0b3JbU1BMSVRdO1xuICAgICAgcmV0dXJuIHNwbGl0dGVyICE9PSB1bmRlZmluZWRcbiAgICAgICAgPyBzcGxpdHRlci5jYWxsKHNlcGFyYXRvciwgTywgbGltaXQpXG4gICAgICAgIDogaW50ZXJuYWxTcGxpdC5jYWxsKFN0cmluZyhPKSwgc2VwYXJhdG9yLCBsaW1pdCk7XG4gICAgfSxcbiAgICAvLyBgUmVnRXhwLnByb3RvdHlwZVtAQHNwbGl0XWAgbWV0aG9kXG4gICAgLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtcmVnZXhwLnByb3RvdHlwZS1AQHNwbGl0XG4gICAgLy9cbiAgICAvLyBOT1RFOiBUaGlzIGNhbm5vdCBiZSBwcm9wZXJseSBwb2x5ZmlsbGVkIGluIGVuZ2luZXMgdGhhdCBkb24ndCBzdXBwb3J0XG4gICAgLy8gdGhlICd5JyBmbGFnLlxuICAgIGZ1bmN0aW9uIChyZWdleHAsIGxpbWl0KSB7XG4gICAgICB2YXIgcmVzID0gbWF5YmVDYWxsTmF0aXZlKGludGVybmFsU3BsaXQsIHJlZ2V4cCwgdGhpcywgbGltaXQsIGludGVybmFsU3BsaXQgIT09ICRzcGxpdCk7XG4gICAgICBpZiAocmVzLmRvbmUpIHJldHVybiByZXMudmFsdWU7XG5cbiAgICAgIHZhciByeCA9IGFuT2JqZWN0KHJlZ2V4cCk7XG4gICAgICB2YXIgUyA9IFN0cmluZyh0aGlzKTtcbiAgICAgIHZhciBDID0gc3BlY2llc0NvbnN0cnVjdG9yKHJ4LCBSZWdFeHApO1xuXG4gICAgICB2YXIgdW5pY29kZU1hdGNoaW5nID0gcngudW5pY29kZTtcbiAgICAgIHZhciBmbGFncyA9IChyeC5pZ25vcmVDYXNlID8gJ2knIDogJycpICtcbiAgICAgICAgICAgICAgICAgIChyeC5tdWx0aWxpbmUgPyAnbScgOiAnJykgK1xuICAgICAgICAgICAgICAgICAgKHJ4LnVuaWNvZGUgPyAndScgOiAnJykgK1xuICAgICAgICAgICAgICAgICAgKFNVUFBPUlRTX1kgPyAneScgOiAnZycpO1xuXG4gICAgICAvLyBeKD8gKyByeCArICkgaXMgbmVlZGVkLCBpbiBjb21iaW5hdGlvbiB3aXRoIHNvbWUgUyBzbGljaW5nLCB0b1xuICAgICAgLy8gc2ltdWxhdGUgdGhlICd5JyBmbGFnLlxuICAgICAgdmFyIHNwbGl0dGVyID0gbmV3IEMoU1VQUE9SVFNfWSA/IHJ4IDogJ14oPzonICsgcnguc291cmNlICsgJyknLCBmbGFncyk7XG4gICAgICB2YXIgbGltID0gbGltaXQgPT09IHVuZGVmaW5lZCA/IE1BWF9VSU5UMzIgOiBsaW1pdCA+Pj4gMDtcbiAgICAgIGlmIChsaW0gPT09IDApIHJldHVybiBbXTtcbiAgICAgIGlmIChTLmxlbmd0aCA9PT0gMCkgcmV0dXJuIGNhbGxSZWdFeHBFeGVjKHNwbGl0dGVyLCBTKSA9PT0gbnVsbCA/IFtTXSA6IFtdO1xuICAgICAgdmFyIHAgPSAwO1xuICAgICAgdmFyIHEgPSAwO1xuICAgICAgdmFyIEEgPSBbXTtcbiAgICAgIHdoaWxlIChxIDwgUy5sZW5ndGgpIHtcbiAgICAgICAgc3BsaXR0ZXIubGFzdEluZGV4ID0gU1VQUE9SVFNfWSA/IHEgOiAwO1xuICAgICAgICB2YXIgeiA9IGNhbGxSZWdFeHBFeGVjKHNwbGl0dGVyLCBTVVBQT1JUU19ZID8gUyA6IFMuc2xpY2UocSkpO1xuICAgICAgICB2YXIgZTtcbiAgICAgICAgaWYgKFxuICAgICAgICAgIHogPT09IG51bGwgfHxcbiAgICAgICAgICAoZSA9ICRtaW4odG9MZW5ndGgoc3BsaXR0ZXIubGFzdEluZGV4ICsgKFNVUFBPUlRTX1kgPyAwIDogcSkpLCBTLmxlbmd0aCkpID09PSBwXG4gICAgICAgICkge1xuICAgICAgICAgIHEgPSBhZHZhbmNlU3RyaW5nSW5kZXgoUywgcSwgdW5pY29kZU1hdGNoaW5nKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBBLnB1c2goUy5zbGljZShwLCBxKSk7XG4gICAgICAgICAgaWYgKEEubGVuZ3RoID09PSBsaW0pIHJldHVybiBBO1xuICAgICAgICAgIGZvciAodmFyIGkgPSAxOyBpIDw9IHoubGVuZ3RoIC0gMTsgaSsrKSB7XG4gICAgICAgICAgICBBLnB1c2goeltpXSk7XG4gICAgICAgICAgICBpZiAoQS5sZW5ndGggPT09IGxpbSkgcmV0dXJuIEE7XG4gICAgICAgICAgfVxuICAgICAgICAgIHEgPSBwID0gZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgQS5wdXNoKFMuc2xpY2UocCkpO1xuICAgICAgcmV0dXJuIEE7XG4gICAgfVxuICBdO1xufSk7XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi9fZ2xvYmFsJyk7XG52YXIgbWFjcm90YXNrID0gcmVxdWlyZSgnLi9fdGFzaycpLnNldDtcbnZhciBPYnNlcnZlciA9IGdsb2JhbC5NdXRhdGlvbk9ic2VydmVyIHx8IGdsb2JhbC5XZWJLaXRNdXRhdGlvbk9ic2VydmVyO1xudmFyIHByb2Nlc3MgPSBnbG9iYWwucHJvY2VzcztcbnZhciBQcm9taXNlID0gZ2xvYmFsLlByb21pc2U7XG52YXIgaXNOb2RlID0gcmVxdWlyZSgnLi9fY29mJykocHJvY2VzcykgPT0gJ3Byb2Nlc3MnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIGhlYWQsIGxhc3QsIG5vdGlmeTtcblxuICB2YXIgZmx1c2ggPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHBhcmVudCwgZm47XG4gICAgaWYgKGlzTm9kZSAmJiAocGFyZW50ID0gcHJvY2Vzcy5kb21haW4pKSBwYXJlbnQuZXhpdCgpO1xuICAgIHdoaWxlIChoZWFkKSB7XG4gICAgICBmbiA9IGhlYWQuZm47XG4gICAgICBoZWFkID0gaGVhZC5uZXh0O1xuICAgICAgdHJ5IHtcbiAgICAgICAgZm4oKTtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgaWYgKGhlYWQpIG5vdGlmeSgpO1xuICAgICAgICBlbHNlIGxhc3QgPSB1bmRlZmluZWQ7XG4gICAgICAgIHRocm93IGU7XG4gICAgICB9XG4gICAgfSBsYXN0ID0gdW5kZWZpbmVkO1xuICAgIGlmIChwYXJlbnQpIHBhcmVudC5lbnRlcigpO1xuICB9O1xuXG4gIC8vIE5vZGUuanNcbiAgaWYgKGlzTm9kZSkge1xuICAgIG5vdGlmeSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHByb2Nlc3MubmV4dFRpY2soZmx1c2gpO1xuICAgIH07XG4gIC8vIGJyb3dzZXJzIHdpdGggTXV0YXRpb25PYnNlcnZlciwgZXhjZXB0IGlPUyBTYWZhcmkgLSBodHRwczovL2dpdGh1Yi5jb20vemxvaXJvY2svY29yZS1qcy9pc3N1ZXMvMzM5XG4gIH0gZWxzZSBpZiAoT2JzZXJ2ZXIgJiYgIShnbG9iYWwubmF2aWdhdG9yICYmIGdsb2JhbC5uYXZpZ2F0b3Iuc3RhbmRhbG9uZSkpIHtcbiAgICB2YXIgdG9nZ2xlID0gdHJ1ZTtcbiAgICB2YXIgbm9kZSA9IGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKCcnKTtcbiAgICBuZXcgT2JzZXJ2ZXIoZmx1c2gpLm9ic2VydmUobm9kZSwgeyBjaGFyYWN0ZXJEYXRhOiB0cnVlIH0pOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLW5ld1xuICAgIG5vdGlmeSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIG5vZGUuZGF0YSA9IHRvZ2dsZSA9ICF0b2dnbGU7XG4gICAgfTtcbiAgLy8gZW52aXJvbm1lbnRzIHdpdGggbWF5YmUgbm9uLWNvbXBsZXRlbHkgY29ycmVjdCwgYnV0IGV4aXN0ZW50IFByb21pc2VcbiAgfSBlbHNlIGlmIChQcm9taXNlICYmIFByb21pc2UucmVzb2x2ZSkge1xuICAgIC8vIFByb21pc2UucmVzb2x2ZSB3aXRob3V0IGFuIGFyZ3VtZW50IHRocm93cyBhbiBlcnJvciBpbiBMRyBXZWJPUyAyXG4gICAgdmFyIHByb21pc2UgPSBQcm9taXNlLnJlc29sdmUodW5kZWZpbmVkKTtcbiAgICBub3RpZnkgPSBmdW5jdGlvbiAoKSB7XG4gICAgICBwcm9taXNlLnRoZW4oZmx1c2gpO1xuICAgIH07XG4gIC8vIGZvciBvdGhlciBlbnZpcm9ubWVudHMgLSBtYWNyb3Rhc2sgYmFzZWQgb246XG4gIC8vIC0gc2V0SW1tZWRpYXRlXG4gIC8vIC0gTWVzc2FnZUNoYW5uZWxcbiAgLy8gLSB3aW5kb3cucG9zdE1lc3NhZ1xuICAvLyAtIG9ucmVhZHlzdGF0ZWNoYW5nZVxuICAvLyAtIHNldFRpbWVvdXRcbiAgfSBlbHNlIHtcbiAgICBub3RpZnkgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAvLyBzdHJhbmdlIElFICsgd2VicGFjayBkZXYgc2VydmVyIGJ1ZyAtIHVzZSAuY2FsbChnbG9iYWwpXG4gICAgICBtYWNyb3Rhc2suY2FsbChnbG9iYWwsIGZsdXNoKTtcbiAgICB9O1xuICB9XG5cbiAgcmV0dXJuIGZ1bmN0aW9uIChmbikge1xuICAgIHZhciB0YXNrID0geyBmbjogZm4sIG5leHQ6IHVuZGVmaW5lZCB9O1xuICAgIGlmIChsYXN0KSBsYXN0Lm5leHQgPSB0YXNrO1xuICAgIGlmICghaGVhZCkge1xuICAgICAgaGVhZCA9IHRhc2s7XG4gICAgICBub3RpZnkoKTtcbiAgICB9IGxhc3QgPSB0YXNrO1xuICB9O1xufTtcbiIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGV4ZWMpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4geyBlOiBmYWxzZSwgdjogZXhlYygpIH07XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICByZXR1cm4geyBlOiB0cnVlLCB2OiBlIH07XG4gIH1cbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgc3Ryb25nID0gcmVxdWlyZSgnLi9fY29sbGVjdGlvbi1zdHJvbmcnKTtcbnZhciB2YWxpZGF0ZSA9IHJlcXVpcmUoJy4vX3ZhbGlkYXRlLWNvbGxlY3Rpb24nKTtcbnZhciBNQVAgPSAnTWFwJztcblxuLy8gMjMuMSBNYXAgT2JqZWN0c1xubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL19jb2xsZWN0aW9uJykoTUFQLCBmdW5jdGlvbiAoZ2V0KSB7XG4gIHJldHVybiBmdW5jdGlvbiBNYXAoKSB7IHJldHVybiBnZXQodGhpcywgYXJndW1lbnRzLmxlbmd0aCA+IDAgPyBhcmd1bWVudHNbMF0gOiB1bmRlZmluZWQpOyB9O1xufSwge1xuICAvLyAyMy4xLjMuNiBNYXAucHJvdG90eXBlLmdldChrZXkpXG4gIGdldDogZnVuY3Rpb24gZ2V0KGtleSkge1xuICAgIHZhciBlbnRyeSA9IHN0cm9uZy5nZXRFbnRyeSh2YWxpZGF0ZSh0aGlzLCBNQVApLCBrZXkpO1xuICAgIHJldHVybiBlbnRyeSAmJiBlbnRyeS52O1xuICB9LFxuICAvLyAyMy4xLjMuOSBNYXAucHJvdG90eXBlLnNldChrZXksIHZhbHVlKVxuICBzZXQ6IGZ1bmN0aW9uIHNldChrZXksIHZhbHVlKSB7XG4gICAgcmV0dXJuIHN0cm9uZy5kZWYodmFsaWRhdGUodGhpcywgTUFQKSwga2V5ID09PSAwID8gMCA6IGtleSwgdmFsdWUpO1xuICB9XG59LCBzdHJvbmcsIHRydWUpO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIHN0cm9uZyA9IHJlcXVpcmUoJy4vX2NvbGxlY3Rpb24tc3Ryb25nJyk7XG52YXIgdmFsaWRhdGUgPSByZXF1aXJlKCcuL192YWxpZGF0ZS1jb2xsZWN0aW9uJyk7XG52YXIgU0VUID0gJ1NldCc7XG5cbi8vIDIzLjIgU2V0IE9iamVjdHNcbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9fY29sbGVjdGlvbicpKFNFVCwgZnVuY3Rpb24gKGdldCkge1xuICByZXR1cm4gZnVuY3Rpb24gU2V0KCkgeyByZXR1cm4gZ2V0KHRoaXMsIGFyZ3VtZW50cy5sZW5ndGggPiAwID8gYXJndW1lbnRzWzBdIDogdW5kZWZpbmVkKTsgfTtcbn0sIHtcbiAgLy8gMjMuMi4zLjEgU2V0LnByb3RvdHlwZS5hZGQodmFsdWUpXG4gIGFkZDogZnVuY3Rpb24gYWRkKHZhbHVlKSB7XG4gICAgcmV0dXJuIHN0cm9uZy5kZWYodmFsaWRhdGUodGhpcywgU0VUKSwgdmFsdWUgPSB2YWx1ZSA9PT0gMCA/IDAgOiB2YWx1ZSwgdmFsdWUpO1xuICB9XG59LCBzdHJvbmcpO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpO1xudmFyIGVhY2ggPSByZXF1aXJlKCcuL19hcnJheS1tZXRob2RzJykoMCk7XG52YXIgcmVkZWZpbmUgPSByZXF1aXJlKCcuL19yZWRlZmluZScpO1xudmFyIG1ldGEgPSByZXF1aXJlKCcuL19tZXRhJyk7XG52YXIgYXNzaWduID0gcmVxdWlyZSgnLi9fb2JqZWN0LWFzc2lnbicpO1xudmFyIHdlYWsgPSByZXF1aXJlKCcuL19jb2xsZWN0aW9uLXdlYWsnKTtcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xudmFyIHZhbGlkYXRlID0gcmVxdWlyZSgnLi9fdmFsaWRhdGUtY29sbGVjdGlvbicpO1xudmFyIE5BVElWRV9XRUFLX01BUCA9IHJlcXVpcmUoJy4vX3ZhbGlkYXRlLWNvbGxlY3Rpb24nKTtcbnZhciBJU19JRTExID0gIWdsb2JhbC5BY3RpdmVYT2JqZWN0ICYmICdBY3RpdmVYT2JqZWN0JyBpbiBnbG9iYWw7XG52YXIgV0VBS19NQVAgPSAnV2Vha01hcCc7XG52YXIgZ2V0V2VhayA9IG1ldGEuZ2V0V2VhaztcbnZhciBpc0V4dGVuc2libGUgPSBPYmplY3QuaXNFeHRlbnNpYmxlO1xudmFyIHVuY2F1Z2h0RnJvemVuU3RvcmUgPSB3ZWFrLnVmc3RvcmU7XG52YXIgSW50ZXJuYWxNYXA7XG5cbnZhciB3cmFwcGVyID0gZnVuY3Rpb24gKGdldCkge1xuICByZXR1cm4gZnVuY3Rpb24gV2Vha01hcCgpIHtcbiAgICByZXR1cm4gZ2V0KHRoaXMsIGFyZ3VtZW50cy5sZW5ndGggPiAwID8gYXJndW1lbnRzWzBdIDogdW5kZWZpbmVkKTtcbiAgfTtcbn07XG5cbnZhciBtZXRob2RzID0ge1xuICAvLyAyMy4zLjMuMyBXZWFrTWFwLnByb3RvdHlwZS5nZXQoa2V5KVxuICBnZXQ6IGZ1bmN0aW9uIGdldChrZXkpIHtcbiAgICBpZiAoaXNPYmplY3Qoa2V5KSkge1xuICAgICAgdmFyIGRhdGEgPSBnZXRXZWFrKGtleSk7XG4gICAgICBpZiAoZGF0YSA9PT0gdHJ1ZSkgcmV0dXJuIHVuY2F1Z2h0RnJvemVuU3RvcmUodmFsaWRhdGUodGhpcywgV0VBS19NQVApKS5nZXQoa2V5KTtcbiAgICAgIHJldHVybiBkYXRhID8gZGF0YVt0aGlzLl9pXSA6IHVuZGVmaW5lZDtcbiAgICB9XG4gIH0sXG4gIC8vIDIzLjMuMy41IFdlYWtNYXAucHJvdG90eXBlLnNldChrZXksIHZhbHVlKVxuICBzZXQ6IGZ1bmN0aW9uIHNldChrZXksIHZhbHVlKSB7XG4gICAgcmV0dXJuIHdlYWsuZGVmKHZhbGlkYXRlKHRoaXMsIFdFQUtfTUFQKSwga2V5LCB2YWx1ZSk7XG4gIH1cbn07XG5cbi8vIDIzLjMgV2Vha01hcCBPYmplY3RzXG52YXIgJFdlYWtNYXAgPSBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vX2NvbGxlY3Rpb24nKShXRUFLX01BUCwgd3JhcHBlciwgbWV0aG9kcywgd2VhaywgdHJ1ZSwgdHJ1ZSk7XG5cbi8vIElFMTEgV2Vha01hcCBmcm96ZW4ga2V5cyBmaXhcbmlmIChOQVRJVkVfV0VBS19NQVAgJiYgSVNfSUUxMSkge1xuICBJbnRlcm5hbE1hcCA9IHdlYWsuZ2V0Q29uc3RydWN0b3Iod3JhcHBlciwgV0VBS19NQVApO1xuICBhc3NpZ24oSW50ZXJuYWxNYXAucHJvdG90eXBlLCBtZXRob2RzKTtcbiAgbWV0YS5ORUVEID0gdHJ1ZTtcbiAgZWFjaChbJ2RlbGV0ZScsICdoYXMnLCAnZ2V0JywgJ3NldCddLCBmdW5jdGlvbiAoa2V5KSB7XG4gICAgdmFyIHByb3RvID0gJFdlYWtNYXAucHJvdG90eXBlO1xuICAgIHZhciBtZXRob2QgPSBwcm90b1trZXldO1xuICAgIHJlZGVmaW5lKHByb3RvLCBrZXksIGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgICAvLyBzdG9yZSBmcm96ZW4gb2JqZWN0cyBvbiBpbnRlcm5hbCB3ZWFrbWFwIHNoaW1cbiAgICAgIGlmIChpc09iamVjdChhKSAmJiAhaXNFeHRlbnNpYmxlKGEpKSB7XG4gICAgICAgIGlmICghdGhpcy5fZikgdGhpcy5fZiA9IG5ldyBJbnRlcm5hbE1hcCgpO1xuICAgICAgICB2YXIgcmVzdWx0ID0gdGhpcy5fZltrZXldKGEsIGIpO1xuICAgICAgICByZXR1cm4ga2V5ID09ICdzZXQnID8gdGhpcyA6IHJlc3VsdDtcbiAgICAgIC8vIHN0b3JlIGFsbCB0aGUgcmVzdCBvbiBuYXRpdmUgd2Vha21hcFxuICAgICAgfSByZXR1cm4gbWV0aG9kLmNhbGwodGhpcywgYSwgYik7XG4gICAgfSk7XG4gIH0pO1xufVxuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIHdlYWsgPSByZXF1aXJlKCcuL19jb2xsZWN0aW9uLXdlYWsnKTtcbnZhciB2YWxpZGF0ZSA9IHJlcXVpcmUoJy4vX3ZhbGlkYXRlLWNvbGxlY3Rpb24nKTtcbnZhciBXRUFLX1NFVCA9ICdXZWFrU2V0JztcblxuLy8gMjMuNCBXZWFrU2V0IE9iamVjdHNcbnJlcXVpcmUoJy4vX2NvbGxlY3Rpb24nKShXRUFLX1NFVCwgZnVuY3Rpb24gKGdldCkge1xuICByZXR1cm4gZnVuY3Rpb24gV2Vha1NldCgpIHsgcmV0dXJuIGdldCh0aGlzLCBhcmd1bWVudHMubGVuZ3RoID4gMCA/IGFyZ3VtZW50c1swXSA6IHVuZGVmaW5lZCk7IH07XG59LCB7XG4gIC8vIDIzLjQuMy4xIFdlYWtTZXQucHJvdG90eXBlLmFkZCh2YWx1ZSlcbiAgYWRkOiBmdW5jdGlvbiBhZGQodmFsdWUpIHtcbiAgICByZXR1cm4gd2Vhay5kZWYodmFsaWRhdGUodGhpcywgV0VBS19TRVQpLCB2YWx1ZSwgdHJ1ZSk7XG4gIH1cbn0sIHdlYWssIGZhbHNlLCB0cnVlKTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgJHR5cGVkID0gcmVxdWlyZSgnLi9fdHlwZWQnKTtcbnZhciBidWZmZXIgPSByZXF1aXJlKCcuL190eXBlZC1idWZmZXInKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIHRvQWJzb2x1dGVJbmRleCA9IHJlcXVpcmUoJy4vX3RvLWFic29sdXRlLWluZGV4Jyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuL190by1sZW5ndGgnKTtcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xudmFyIEFycmF5QnVmZmVyID0gcmVxdWlyZSgnLi9fZ2xvYmFsJykuQXJyYXlCdWZmZXI7XG52YXIgc3BlY2llc0NvbnN0cnVjdG9yID0gcmVxdWlyZSgnLi9fc3BlY2llcy1jb25zdHJ1Y3RvcicpO1xudmFyICRBcnJheUJ1ZmZlciA9IGJ1ZmZlci5BcnJheUJ1ZmZlcjtcbnZhciAkRGF0YVZpZXcgPSBidWZmZXIuRGF0YVZpZXc7XG52YXIgJGlzVmlldyA9ICR0eXBlZC5BQlYgJiYgQXJyYXlCdWZmZXIuaXNWaWV3O1xudmFyICRzbGljZSA9ICRBcnJheUJ1ZmZlci5wcm90b3R5cGUuc2xpY2U7XG52YXIgVklFVyA9ICR0eXBlZC5WSUVXO1xudmFyIEFSUkFZX0JVRkZFUiA9ICdBcnJheUJ1ZmZlcic7XG5cbiRleHBvcnQoJGV4cG9ydC5HICsgJGV4cG9ydC5XICsgJGV4cG9ydC5GICogKEFycmF5QnVmZmVyICE9PSAkQXJyYXlCdWZmZXIpLCB7IEFycmF5QnVmZmVyOiAkQXJyYXlCdWZmZXIgfSk7XG5cbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogISR0eXBlZC5DT05TVFIsIEFSUkFZX0JVRkZFUiwge1xuICAvLyAyNC4xLjMuMSBBcnJheUJ1ZmZlci5pc1ZpZXcoYXJnKVxuICBpc1ZpZXc6IGZ1bmN0aW9uIGlzVmlldyhpdCkge1xuICAgIHJldHVybiAkaXNWaWV3ICYmICRpc1ZpZXcoaXQpIHx8IGlzT2JqZWN0KGl0KSAmJiBWSUVXIGluIGl0O1xuICB9XG59KTtcblxuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LlUgKyAkZXhwb3J0LkYgKiByZXF1aXJlKCcuL19mYWlscycpKGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuICFuZXcgJEFycmF5QnVmZmVyKDIpLnNsaWNlKDEsIHVuZGVmaW5lZCkuYnl0ZUxlbmd0aDtcbn0pLCBBUlJBWV9CVUZGRVIsIHtcbiAgLy8gMjQuMS40LjMgQXJyYXlCdWZmZXIucHJvdG90eXBlLnNsaWNlKHN0YXJ0LCBlbmQpXG4gIHNsaWNlOiBmdW5jdGlvbiBzbGljZShzdGFydCwgZW5kKSB7XG4gICAgaWYgKCRzbGljZSAhPT0gdW5kZWZpbmVkICYmIGVuZCA9PT0gdW5kZWZpbmVkKSByZXR1cm4gJHNsaWNlLmNhbGwoYW5PYmplY3QodGhpcyksIHN0YXJ0KTsgLy8gRkYgZml4XG4gICAgdmFyIGxlbiA9IGFuT2JqZWN0KHRoaXMpLmJ5dGVMZW5ndGg7XG4gICAgdmFyIGZpcnN0ID0gdG9BYnNvbHV0ZUluZGV4KHN0YXJ0LCBsZW4pO1xuICAgIHZhciBmaW4gPSB0b0Fic29sdXRlSW5kZXgoZW5kID09PSB1bmRlZmluZWQgPyBsZW4gOiBlbmQsIGxlbik7XG4gICAgdmFyIHJlc3VsdCA9IG5ldyAoc3BlY2llc0NvbnN0cnVjdG9yKHRoaXMsICRBcnJheUJ1ZmZlcikpKHRvTGVuZ3RoKGZpbiAtIGZpcnN0KSk7XG4gICAgdmFyIHZpZXdTID0gbmV3ICREYXRhVmlldyh0aGlzKTtcbiAgICB2YXIgdmlld1QgPSBuZXcgJERhdGFWaWV3KHJlc3VsdCk7XG4gICAgdmFyIGluZGV4ID0gMDtcbiAgICB3aGlsZSAoZmlyc3QgPCBmaW4pIHtcbiAgICAgIHZpZXdULnNldFVpbnQ4KGluZGV4KyssIHZpZXdTLmdldFVpbnQ4KGZpcnN0KyspKTtcbiAgICB9IHJldHVybiByZXN1bHQ7XG4gIH1cbn0pO1xuXG5yZXF1aXJlKCcuL19zZXQtc3BlY2llcycpKEFSUkFZX0JVRkZFUik7XG4iLCJ2YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuJGV4cG9ydCgkZXhwb3J0LkcgKyAkZXhwb3J0LlcgKyAkZXhwb3J0LkYgKiAhcmVxdWlyZSgnLi9fdHlwZWQnKS5BQlYsIHtcbiAgRGF0YVZpZXc6IHJlcXVpcmUoJy4vX3R5cGVkLWJ1ZmZlcicpLkRhdGFWaWV3XG59KTtcbiIsInJlcXVpcmUoJy4vX3R5cGVkLWFycmF5JykoJ0ludDgnLCAxLCBmdW5jdGlvbiAoaW5pdCkge1xuICByZXR1cm4gZnVuY3Rpb24gSW50OEFycmF5KGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCkge1xuICAgIHJldHVybiBpbml0KHRoaXMsIGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCk7XG4gIH07XG59KTtcbiIsInJlcXVpcmUoJy4vX3R5cGVkLWFycmF5JykoJ1VpbnQ4JywgMSwgZnVuY3Rpb24gKGluaXQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIFVpbnQ4QXJyYXkoZGF0YSwgYnl0ZU9mZnNldCwgbGVuZ3RoKSB7XG4gICAgcmV0dXJuIGluaXQodGhpcywgZGF0YSwgYnl0ZU9mZnNldCwgbGVuZ3RoKTtcbiAgfTtcbn0pO1xuIiwicmVxdWlyZSgnLi9fdHlwZWQtYXJyYXknKSgnVWludDgnLCAxLCBmdW5jdGlvbiAoaW5pdCkge1xuICByZXR1cm4gZnVuY3Rpb24gVWludDhDbGFtcGVkQXJyYXkoZGF0YSwgYnl0ZU9mZnNldCwgbGVuZ3RoKSB7XG4gICAgcmV0dXJuIGluaXQodGhpcywgZGF0YSwgYnl0ZU9mZnNldCwgbGVuZ3RoKTtcbiAgfTtcbn0sIHRydWUpO1xuIiwicmVxdWlyZSgnLi9fdHlwZWQtYXJyYXknKSgnSW50MTYnLCAyLCBmdW5jdGlvbiAoaW5pdCkge1xuICByZXR1cm4gZnVuY3Rpb24gSW50MTZBcnJheShkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpIHtcbiAgICByZXR1cm4gaW5pdCh0aGlzLCBkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpO1xuICB9O1xufSk7XG4iLCJyZXF1aXJlKCcuL190eXBlZC1hcnJheScpKCdVaW50MTYnLCAyLCBmdW5jdGlvbiAoaW5pdCkge1xuICByZXR1cm4gZnVuY3Rpb24gVWludDE2QXJyYXkoZGF0YSwgYnl0ZU9mZnNldCwgbGVuZ3RoKSB7XG4gICAgcmV0dXJuIGluaXQodGhpcywgZGF0YSwgYnl0ZU9mZnNldCwgbGVuZ3RoKTtcbiAgfTtcbn0pO1xuIiwicmVxdWlyZSgnLi9fdHlwZWQtYXJyYXknKSgnSW50MzInLCA0LCBmdW5jdGlvbiAoaW5pdCkge1xuICByZXR1cm4gZnVuY3Rpb24gSW50MzJBcnJheShkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpIHtcbiAgICByZXR1cm4gaW5pdCh0aGlzLCBkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpO1xuICB9O1xufSk7XG4iLCJyZXF1aXJlKCcuL190eXBlZC1hcnJheScpKCdVaW50MzInLCA0LCBmdW5jdGlvbiAoaW5pdCkge1xuICByZXR1cm4gZnVuY3Rpb24gVWludDMyQXJyYXkoZGF0YSwgYnl0ZU9mZnNldCwgbGVuZ3RoKSB7XG4gICAgcmV0dXJuIGluaXQodGhpcywgZGF0YSwgYnl0ZU9mZnNldCwgbGVuZ3RoKTtcbiAgfTtcbn0pO1xuIiwicmVxdWlyZSgnLi9fdHlwZWQtYXJyYXknKSgnRmxvYXQzMicsIDQsIGZ1bmN0aW9uIChpbml0KSB7XG4gIHJldHVybiBmdW5jdGlvbiBGbG9hdDMyQXJyYXkoZGF0YSwgYnl0ZU9mZnNldCwgbGVuZ3RoKSB7XG4gICAgcmV0dXJuIGluaXQodGhpcywgZGF0YSwgYnl0ZU9mZnNldCwgbGVuZ3RoKTtcbiAgfTtcbn0pO1xuIiwicmVxdWlyZSgnLi9fdHlwZWQtYXJyYXknKSgnRmxvYXQ2NCcsIDgsIGZ1bmN0aW9uIChpbml0KSB7XG4gIHJldHVybiBmdW5jdGlvbiBGbG9hdDY0QXJyYXkoZGF0YSwgYnl0ZU9mZnNldCwgbGVuZ3RoKSB7XG4gICAgcmV0dXJuIGluaXQodGhpcywgZGF0YSwgYnl0ZU9mZnNldCwgbGVuZ3RoKTtcbiAgfTtcbn0pO1xuIiwiLy8gMjYuMS4xIFJlZmxlY3QuYXBwbHkodGFyZ2V0LCB0aGlzQXJndW1lbnQsIGFyZ3VtZW50c0xpc3QpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIGFGdW5jdGlvbiA9IHJlcXVpcmUoJy4vX2EtZnVuY3Rpb24nKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIHJBcHBseSA9IChyZXF1aXJlKCcuL19nbG9iYWwnKS5SZWZsZWN0IHx8IHt9KS5hcHBseTtcbnZhciBmQXBwbHkgPSBGdW5jdGlvbi5hcHBseTtcbi8vIE1TIEVkZ2UgYXJndW1lbnRzTGlzdCBhcmd1bWVudCBpcyBvcHRpb25hbFxuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAhcmVxdWlyZSgnLi9fZmFpbHMnKShmdW5jdGlvbiAoKSB7XG4gIHJBcHBseShmdW5jdGlvbiAoKSB7IC8qIGVtcHR5ICovIH0pO1xufSksICdSZWZsZWN0Jywge1xuICBhcHBseTogZnVuY3Rpb24gYXBwbHkodGFyZ2V0LCB0aGlzQXJndW1lbnQsIGFyZ3VtZW50c0xpc3QpIHtcbiAgICB2YXIgVCA9IGFGdW5jdGlvbih0YXJnZXQpO1xuICAgIHZhciBMID0gYW5PYmplY3QoYXJndW1lbnRzTGlzdCk7XG4gICAgcmV0dXJuIHJBcHBseSA/IHJBcHBseShULCB0aGlzQXJndW1lbnQsIEwpIDogZkFwcGx5LmNhbGwoVCwgdGhpc0FyZ3VtZW50LCBMKTtcbiAgfVxufSk7XG4iLCIvLyAyNi4xLjIgUmVmbGVjdC5jb25zdHJ1Y3QodGFyZ2V0LCBhcmd1bWVudHNMaXN0IFssIG5ld1RhcmdldF0pXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIGNyZWF0ZSA9IHJlcXVpcmUoJy4vX29iamVjdC1jcmVhdGUnKTtcbnZhciBhRnVuY3Rpb24gPSByZXF1aXJlKCcuL19hLWZ1bmN0aW9uJyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi9fZmFpbHMnKTtcbnZhciBiaW5kID0gcmVxdWlyZSgnLi9fYmluZCcpO1xudmFyIHJDb25zdHJ1Y3QgPSAocmVxdWlyZSgnLi9fZ2xvYmFsJykuUmVmbGVjdCB8fCB7fSkuY29uc3RydWN0O1xuXG4vLyBNUyBFZGdlIHN1cHBvcnRzIG9ubHkgMiBhcmd1bWVudHMgYW5kIGFyZ3VtZW50c0xpc3QgYXJndW1lbnQgaXMgb3B0aW9uYWxcbi8vIEZGIE5pZ2h0bHkgc2V0cyB0aGlyZCBhcmd1bWVudCBhcyBgbmV3LnRhcmdldGAsIGJ1dCBkb2VzIG5vdCBjcmVhdGUgYHRoaXNgIGZyb20gaXRcbnZhciBORVdfVEFSR0VUX0JVRyA9IGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gRigpIHsgLyogZW1wdHkgKi8gfVxuICByZXR1cm4gIShyQ29uc3RydWN0KGZ1bmN0aW9uICgpIHsgLyogZW1wdHkgKi8gfSwgW10sIEYpIGluc3RhbmNlb2YgRik7XG59KTtcbnZhciBBUkdTX0JVRyA9ICFmYWlscyhmdW5jdGlvbiAoKSB7XG4gIHJDb25zdHJ1Y3QoZnVuY3Rpb24gKCkgeyAvKiBlbXB0eSAqLyB9KTtcbn0pO1xuXG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqIChORVdfVEFSR0VUX0JVRyB8fCBBUkdTX0JVRyksICdSZWZsZWN0Jywge1xuICBjb25zdHJ1Y3Q6IGZ1bmN0aW9uIGNvbnN0cnVjdChUYXJnZXQsIGFyZ3MgLyogLCBuZXdUYXJnZXQgKi8pIHtcbiAgICBhRnVuY3Rpb24oVGFyZ2V0KTtcbiAgICBhbk9iamVjdChhcmdzKTtcbiAgICB2YXIgbmV3VGFyZ2V0ID0gYXJndW1lbnRzLmxlbmd0aCA8IDMgPyBUYXJnZXQgOiBhRnVuY3Rpb24oYXJndW1lbnRzWzJdKTtcbiAgICBpZiAoQVJHU19CVUcgJiYgIU5FV19UQVJHRVRfQlVHKSByZXR1cm4gckNvbnN0cnVjdChUYXJnZXQsIGFyZ3MsIG5ld1RhcmdldCk7XG4gICAgaWYgKFRhcmdldCA9PSBuZXdUYXJnZXQpIHtcbiAgICAgIC8vIHcvbyBhbHRlcmVkIG5ld1RhcmdldCwgb3B0aW1pemF0aW9uIGZvciAwLTQgYXJndW1lbnRzXG4gICAgICBzd2l0Y2ggKGFyZ3MubGVuZ3RoKSB7XG4gICAgICAgIGNhc2UgMDogcmV0dXJuIG5ldyBUYXJnZXQoKTtcbiAgICAgICAgY2FzZSAxOiByZXR1cm4gbmV3IFRhcmdldChhcmdzWzBdKTtcbiAgICAgICAgY2FzZSAyOiByZXR1cm4gbmV3IFRhcmdldChhcmdzWzBdLCBhcmdzWzFdKTtcbiAgICAgICAgY2FzZSAzOiByZXR1cm4gbmV3IFRhcmdldChhcmdzWzBdLCBhcmdzWzFdLCBhcmdzWzJdKTtcbiAgICAgICAgY2FzZSA0OiByZXR1cm4gbmV3IFRhcmdldChhcmdzWzBdLCBhcmdzWzFdLCBhcmdzWzJdLCBhcmdzWzNdKTtcbiAgICAgIH1cbiAgICAgIC8vIHcvbyBhbHRlcmVkIG5ld1RhcmdldCwgbG90IG9mIGFyZ3VtZW50cyBjYXNlXG4gICAgICB2YXIgJGFyZ3MgPSBbbnVsbF07XG4gICAgICAkYXJncy5wdXNoLmFwcGx5KCRhcmdzLCBhcmdzKTtcbiAgICAgIHJldHVybiBuZXcgKGJpbmQuYXBwbHkoVGFyZ2V0LCAkYXJncykpKCk7XG4gICAgfVxuICAgIC8vIHdpdGggYWx0ZXJlZCBuZXdUYXJnZXQsIG5vdCBzdXBwb3J0IGJ1aWx0LWluIGNvbnN0cnVjdG9yc1xuICAgIHZhciBwcm90byA9IG5ld1RhcmdldC5wcm90b3R5cGU7XG4gICAgdmFyIGluc3RhbmNlID0gY3JlYXRlKGlzT2JqZWN0KHByb3RvKSA/IHByb3RvIDogT2JqZWN0LnByb3RvdHlwZSk7XG4gICAgdmFyIHJlc3VsdCA9IEZ1bmN0aW9uLmFwcGx5LmNhbGwoVGFyZ2V0LCBpbnN0YW5jZSwgYXJncyk7XG4gICAgcmV0dXJuIGlzT2JqZWN0KHJlc3VsdCkgPyByZXN1bHQgOiBpbnN0YW5jZTtcbiAgfVxufSk7XG4iLCIvLyAyNi4xLjMgUmVmbGVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIHByb3BlcnR5S2V5LCBhdHRyaWJ1dGVzKVxudmFyIGRQID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJyk7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgdG9QcmltaXRpdmUgPSByZXF1aXJlKCcuL190by1wcmltaXRpdmUnKTtcblxuLy8gTVMgRWRnZSBoYXMgYnJva2VuIFJlZmxlY3QuZGVmaW5lUHJvcGVydHkgLSB0aHJvd2luZyBpbnN0ZWFkIG9mIHJldHVybmluZyBmYWxzZVxuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiByZXF1aXJlKCcuL19mYWlscycpKGZ1bmN0aW9uICgpIHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVuZGVmXG4gIFJlZmxlY3QuZGVmaW5lUHJvcGVydHkoZFAuZih7fSwgMSwgeyB2YWx1ZTogMSB9KSwgMSwgeyB2YWx1ZTogMiB9KTtcbn0pLCAnUmVmbGVjdCcsIHtcbiAgZGVmaW5lUHJvcGVydHk6IGZ1bmN0aW9uIGRlZmluZVByb3BlcnR5KHRhcmdldCwgcHJvcGVydHlLZXksIGF0dHJpYnV0ZXMpIHtcbiAgICBhbk9iamVjdCh0YXJnZXQpO1xuICAgIHByb3BlcnR5S2V5ID0gdG9QcmltaXRpdmUocHJvcGVydHlLZXksIHRydWUpO1xuICAgIGFuT2JqZWN0KGF0dHJpYnV0ZXMpO1xuICAgIHRyeSB7XG4gICAgICBkUC5mKHRhcmdldCwgcHJvcGVydHlLZXksIGF0dHJpYnV0ZXMpO1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxufSk7XG4iLCIvLyAyNi4xLjQgUmVmbGVjdC5kZWxldGVQcm9wZXJ0eSh0YXJnZXQsIHByb3BlcnR5S2V5KVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBnT1BEID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcGQnKS5mO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnUmVmbGVjdCcsIHtcbiAgZGVsZXRlUHJvcGVydHk6IGZ1bmN0aW9uIGRlbGV0ZVByb3BlcnR5KHRhcmdldCwgcHJvcGVydHlLZXkpIHtcbiAgICB2YXIgZGVzYyA9IGdPUEQoYW5PYmplY3QodGFyZ2V0KSwgcHJvcGVydHlLZXkpO1xuICAgIHJldHVybiBkZXNjICYmICFkZXNjLmNvbmZpZ3VyYWJsZSA/IGZhbHNlIDogZGVsZXRlIHRhcmdldFtwcm9wZXJ0eUtleV07XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gMjYuMS41IFJlZmxlY3QuZW51bWVyYXRlKHRhcmdldClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciBFbnVtZXJhdGUgPSBmdW5jdGlvbiAoaXRlcmF0ZWQpIHtcbiAgdGhpcy5fdCA9IGFuT2JqZWN0KGl0ZXJhdGVkKTsgLy8gdGFyZ2V0XG4gIHRoaXMuX2kgPSAwOyAgICAgICAgICAgICAgICAgIC8vIG5leHQgaW5kZXhcbiAgdmFyIGtleXMgPSB0aGlzLl9rID0gW107ICAgICAgLy8ga2V5c1xuICB2YXIga2V5O1xuICBmb3IgKGtleSBpbiBpdGVyYXRlZCkga2V5cy5wdXNoKGtleSk7XG59O1xucmVxdWlyZSgnLi9faXRlci1jcmVhdGUnKShFbnVtZXJhdGUsICdPYmplY3QnLCBmdW5jdGlvbiAoKSB7XG4gIHZhciB0aGF0ID0gdGhpcztcbiAgdmFyIGtleXMgPSB0aGF0Ll9rO1xuICB2YXIga2V5O1xuICBkbyB7XG4gICAgaWYgKHRoYXQuX2kgPj0ga2V5cy5sZW5ndGgpIHJldHVybiB7IHZhbHVlOiB1bmRlZmluZWQsIGRvbmU6IHRydWUgfTtcbiAgfSB3aGlsZSAoISgoa2V5ID0ga2V5c1t0aGF0Ll9pKytdKSBpbiB0aGF0Ll90KSk7XG4gIHJldHVybiB7IHZhbHVlOiBrZXksIGRvbmU6IGZhbHNlIH07XG59KTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdSZWZsZWN0Jywge1xuICBlbnVtZXJhdGU6IGZ1bmN0aW9uIGVudW1lcmF0ZSh0YXJnZXQpIHtcbiAgICByZXR1cm4gbmV3IEVudW1lcmF0ZSh0YXJnZXQpO1xuICB9XG59KTtcbiIsIi8vIDI2LjEuNiBSZWZsZWN0LmdldCh0YXJnZXQsIHByb3BlcnR5S2V5IFssIHJlY2VpdmVyXSlcbnZhciBnT1BEID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcGQnKTtcbnZhciBnZXRQcm90b3R5cGVPZiA9IHJlcXVpcmUoJy4vX29iamVjdC1ncG8nKTtcbnZhciBoYXMgPSByZXF1aXJlKCcuL19oYXMnKTtcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xuXG5mdW5jdGlvbiBnZXQodGFyZ2V0LCBwcm9wZXJ0eUtleSAvKiAsIHJlY2VpdmVyICovKSB7XG4gIHZhciByZWNlaXZlciA9IGFyZ3VtZW50cy5sZW5ndGggPCAzID8gdGFyZ2V0IDogYXJndW1lbnRzWzJdO1xuICB2YXIgZGVzYywgcHJvdG87XG4gIGlmIChhbk9iamVjdCh0YXJnZXQpID09PSByZWNlaXZlcikgcmV0dXJuIHRhcmdldFtwcm9wZXJ0eUtleV07XG4gIGlmIChkZXNjID0gZ09QRC5mKHRhcmdldCwgcHJvcGVydHlLZXkpKSByZXR1cm4gaGFzKGRlc2MsICd2YWx1ZScpXG4gICAgPyBkZXNjLnZhbHVlXG4gICAgOiBkZXNjLmdldCAhPT0gdW5kZWZpbmVkXG4gICAgICA/IGRlc2MuZ2V0LmNhbGwocmVjZWl2ZXIpXG4gICAgICA6IHVuZGVmaW5lZDtcbiAgaWYgKGlzT2JqZWN0KHByb3RvID0gZ2V0UHJvdG90eXBlT2YodGFyZ2V0KSkpIHJldHVybiBnZXQocHJvdG8sIHByb3BlcnR5S2V5LCByZWNlaXZlcik7XG59XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnUmVmbGVjdCcsIHsgZ2V0OiBnZXQgfSk7XG4iLCIvLyAyNi4xLjcgUmVmbGVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodGFyZ2V0LCBwcm9wZXJ0eUtleSlcbnZhciBnT1BEID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcGQnKTtcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdSZWZsZWN0Jywge1xuICBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I6IGZ1bmN0aW9uIGdldE93blByb3BlcnR5RGVzY3JpcHRvcih0YXJnZXQsIHByb3BlcnR5S2V5KSB7XG4gICAgcmV0dXJuIGdPUEQuZihhbk9iamVjdCh0YXJnZXQpLCBwcm9wZXJ0eUtleSk7XG4gIH1cbn0pO1xuIiwiLy8gMjYuMS44IFJlZmxlY3QuZ2V0UHJvdG90eXBlT2YodGFyZ2V0KVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBnZXRQcm90byA9IHJlcXVpcmUoJy4vX29iamVjdC1ncG8nKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ1JlZmxlY3QnLCB7XG4gIGdldFByb3RvdHlwZU9mOiBmdW5jdGlvbiBnZXRQcm90b3R5cGVPZih0YXJnZXQpIHtcbiAgICByZXR1cm4gZ2V0UHJvdG8oYW5PYmplY3QodGFyZ2V0KSk7XG4gIH1cbn0pO1xuIiwiLy8gMjYuMS45IFJlZmxlY3QuaGFzKHRhcmdldCwgcHJvcGVydHlLZXkpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ1JlZmxlY3QnLCB7XG4gIGhhczogZnVuY3Rpb24gaGFzKHRhcmdldCwgcHJvcGVydHlLZXkpIHtcbiAgICByZXR1cm4gcHJvcGVydHlLZXkgaW4gdGFyZ2V0O1xuICB9XG59KTtcbiIsIi8vIDI2LjEuMTAgUmVmbGVjdC5pc0V4dGVuc2libGUodGFyZ2V0KVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyICRpc0V4dGVuc2libGUgPSBPYmplY3QuaXNFeHRlbnNpYmxlO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ1JlZmxlY3QnLCB7XG4gIGlzRXh0ZW5zaWJsZTogZnVuY3Rpb24gaXNFeHRlbnNpYmxlKHRhcmdldCkge1xuICAgIGFuT2JqZWN0KHRhcmdldCk7XG4gICAgcmV0dXJuICRpc0V4dGVuc2libGUgPyAkaXNFeHRlbnNpYmxlKHRhcmdldCkgOiB0cnVlO1xuICB9XG59KTtcbiIsIi8vIDI2LjEuMTEgUmVmbGVjdC5vd25LZXlzKHRhcmdldClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnUmVmbGVjdCcsIHsgb3duS2V5czogcmVxdWlyZSgnLi9fb3duLWtleXMnKSB9KTtcbiIsIi8vIDI2LjEuMTIgUmVmbGVjdC5wcmV2ZW50RXh0ZW5zaW9ucyh0YXJnZXQpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgJHByZXZlbnRFeHRlbnNpb25zID0gT2JqZWN0LnByZXZlbnRFeHRlbnNpb25zO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ1JlZmxlY3QnLCB7XG4gIHByZXZlbnRFeHRlbnNpb25zOiBmdW5jdGlvbiBwcmV2ZW50RXh0ZW5zaW9ucyh0YXJnZXQpIHtcbiAgICBhbk9iamVjdCh0YXJnZXQpO1xuICAgIHRyeSB7XG4gICAgICBpZiAoJHByZXZlbnRFeHRlbnNpb25zKSAkcHJldmVudEV4dGVuc2lvbnModGFyZ2V0KTtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH1cbn0pO1xuIiwiLy8gMjYuMS4xMyBSZWZsZWN0LnNldCh0YXJnZXQsIHByb3BlcnR5S2V5LCBWIFssIHJlY2VpdmVyXSlcbnZhciBkUCA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpO1xudmFyIGdPUEQgPSByZXF1aXJlKCcuL19vYmplY3QtZ29wZCcpO1xudmFyIGdldFByb3RvdHlwZU9mID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdwbycpO1xudmFyIGhhcyA9IHJlcXVpcmUoJy4vX2hhcycpO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBjcmVhdGVEZXNjID0gcmVxdWlyZSgnLi9fcHJvcGVydHktZGVzYycpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcblxuZnVuY3Rpb24gc2V0KHRhcmdldCwgcHJvcGVydHlLZXksIFYgLyogLCByZWNlaXZlciAqLykge1xuICB2YXIgcmVjZWl2ZXIgPSBhcmd1bWVudHMubGVuZ3RoIDwgNCA/IHRhcmdldCA6IGFyZ3VtZW50c1szXTtcbiAgdmFyIG93bkRlc2MgPSBnT1BELmYoYW5PYmplY3QodGFyZ2V0KSwgcHJvcGVydHlLZXkpO1xuICB2YXIgZXhpc3RpbmdEZXNjcmlwdG9yLCBwcm90bztcbiAgaWYgKCFvd25EZXNjKSB7XG4gICAgaWYgKGlzT2JqZWN0KHByb3RvID0gZ2V0UHJvdG90eXBlT2YodGFyZ2V0KSkpIHtcbiAgICAgIHJldHVybiBzZXQocHJvdG8sIHByb3BlcnR5S2V5LCBWLCByZWNlaXZlcik7XG4gICAgfVxuICAgIG93bkRlc2MgPSBjcmVhdGVEZXNjKDApO1xuICB9XG4gIGlmIChoYXMob3duRGVzYywgJ3ZhbHVlJykpIHtcbiAgICBpZiAob3duRGVzYy53cml0YWJsZSA9PT0gZmFsc2UgfHwgIWlzT2JqZWN0KHJlY2VpdmVyKSkgcmV0dXJuIGZhbHNlO1xuICAgIGlmIChleGlzdGluZ0Rlc2NyaXB0b3IgPSBnT1BELmYocmVjZWl2ZXIsIHByb3BlcnR5S2V5KSkge1xuICAgICAgaWYgKGV4aXN0aW5nRGVzY3JpcHRvci5nZXQgfHwgZXhpc3RpbmdEZXNjcmlwdG9yLnNldCB8fCBleGlzdGluZ0Rlc2NyaXB0b3Iud3JpdGFibGUgPT09IGZhbHNlKSByZXR1cm4gZmFsc2U7XG4gICAgICBleGlzdGluZ0Rlc2NyaXB0b3IudmFsdWUgPSBWO1xuICAgICAgZFAuZihyZWNlaXZlciwgcHJvcGVydHlLZXksIGV4aXN0aW5nRGVzY3JpcHRvcik7XG4gICAgfSBlbHNlIGRQLmYocmVjZWl2ZXIsIHByb3BlcnR5S2V5LCBjcmVhdGVEZXNjKDAsIFYpKTtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICByZXR1cm4gb3duRGVzYy5zZXQgPT09IHVuZGVmaW5lZCA/IGZhbHNlIDogKG93bkRlc2Muc2V0LmNhbGwocmVjZWl2ZXIsIFYpLCB0cnVlKTtcbn1cblxuJGV4cG9ydCgkZXhwb3J0LlMsICdSZWZsZWN0JywgeyBzZXQ6IHNldCB9KTtcbiIsIi8vIDI2LjEuMTQgUmVmbGVjdC5zZXRQcm90b3R5cGVPZih0YXJnZXQsIHByb3RvKVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBzZXRQcm90byA9IHJlcXVpcmUoJy4vX3NldC1wcm90bycpO1xuXG5pZiAoc2V0UHJvdG8pICRleHBvcnQoJGV4cG9ydC5TLCAnUmVmbGVjdCcsIHtcbiAgc2V0UHJvdG90eXBlT2Y6IGZ1bmN0aW9uIHNldFByb3RvdHlwZU9mKHRhcmdldCwgcHJvdG8pIHtcbiAgICBzZXRQcm90by5jaGVjayh0YXJnZXQsIHByb3RvKTtcbiAgICB0cnkge1xuICAgICAgc2V0UHJvdG8uc2V0KHRhcmdldCwgcHJvdG8pO1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxufSk7XG4iLCJyZXF1aXJlKCcuLi8uLi9tb2R1bGVzL2VzNy5hcnJheS5pbmNsdWRlcycpO1xubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuLi8uLi9tb2R1bGVzL19jb3JlJykuQXJyYXkuaW5jbHVkZXM7XG4iLCIndXNlIHN0cmljdCc7XG4vLyBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9BcnJheS5wcm90b3R5cGUuaW5jbHVkZXNcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgJGluY2x1ZGVzID0gcmVxdWlyZSgnLi9fYXJyYXktaW5jbHVkZXMnKSh0cnVlKTtcblxuJGV4cG9ydCgkZXhwb3J0LlAsICdBcnJheScsIHtcbiAgaW5jbHVkZXM6IGZ1bmN0aW9uIGluY2x1ZGVzKGVsIC8qICwgZnJvbUluZGV4ID0gMCAqLykge1xuICAgIHJldHVybiAkaW5jbHVkZXModGhpcywgZWwsIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKTtcbiAgfVxufSk7XG5cbnJlcXVpcmUoJy4vX2FkZC10by11bnNjb3BhYmxlcycpKCdpbmNsdWRlcycpO1xuIiwicmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9lczcuYXJyYXkuZmxhdC1tYXAnKTtcbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9fY29yZScpLkFycmF5LmZsYXRNYXA7XG4iLCIndXNlIHN0cmljdCc7XG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL3Byb3Bvc2FsLWZsYXRNYXAvI3NlYy1BcnJheS5wcm90b3R5cGUuZmxhdE1hcFxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBmbGF0dGVuSW50b0FycmF5ID0gcmVxdWlyZSgnLi9fZmxhdHRlbi1pbnRvLWFycmF5Jyk7XG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuL190by1vYmplY3QnKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpO1xudmFyIGFGdW5jdGlvbiA9IHJlcXVpcmUoJy4vX2EtZnVuY3Rpb24nKTtcbnZhciBhcnJheVNwZWNpZXNDcmVhdGUgPSByZXF1aXJlKCcuL19hcnJheS1zcGVjaWVzLWNyZWF0ZScpO1xuXG4kZXhwb3J0KCRleHBvcnQuUCwgJ0FycmF5Jywge1xuICBmbGF0TWFwOiBmdW5jdGlvbiBmbGF0TWFwKGNhbGxiYWNrZm4gLyogLCB0aGlzQXJnICovKSB7XG4gICAgdmFyIE8gPSB0b09iamVjdCh0aGlzKTtcbiAgICB2YXIgc291cmNlTGVuLCBBO1xuICAgIGFGdW5jdGlvbihjYWxsYmFja2ZuKTtcbiAgICBzb3VyY2VMZW4gPSB0b0xlbmd0aChPLmxlbmd0aCk7XG4gICAgQSA9IGFycmF5U3BlY2llc0NyZWF0ZShPLCAwKTtcbiAgICBmbGF0dGVuSW50b0FycmF5KEEsIE8sIE8sIHNvdXJjZUxlbiwgMCwgMSwgY2FsbGJhY2tmbiwgYXJndW1lbnRzWzFdKTtcbiAgICByZXR1cm4gQTtcbiAgfVxufSk7XG5cbnJlcXVpcmUoJy4vX2FkZC10by11bnNjb3BhYmxlcycpKCdmbGF0TWFwJyk7XG4iLCIndXNlIHN0cmljdCc7XG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL3Byb3Bvc2FsLWZsYXRNYXAvI3NlYy1GbGF0dGVuSW50b0FycmF5XG52YXIgaXNBcnJheSA9IHJlcXVpcmUoJy4vX2lzLWFycmF5Jyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpO1xudmFyIGN0eCA9IHJlcXVpcmUoJy4vX2N0eCcpO1xudmFyIElTX0NPTkNBVF9TUFJFQURBQkxFID0gcmVxdWlyZSgnLi9fd2tzJykoJ2lzQ29uY2F0U3ByZWFkYWJsZScpO1xuXG5mdW5jdGlvbiBmbGF0dGVuSW50b0FycmF5KHRhcmdldCwgb3JpZ2luYWwsIHNvdXJjZSwgc291cmNlTGVuLCBzdGFydCwgZGVwdGgsIG1hcHBlciwgdGhpc0FyZykge1xuICB2YXIgdGFyZ2V0SW5kZXggPSBzdGFydDtcbiAgdmFyIHNvdXJjZUluZGV4ID0gMDtcbiAgdmFyIG1hcEZuID0gbWFwcGVyID8gY3R4KG1hcHBlciwgdGhpc0FyZywgMykgOiBmYWxzZTtcbiAgdmFyIGVsZW1lbnQsIHNwcmVhZGFibGU7XG5cbiAgd2hpbGUgKHNvdXJjZUluZGV4IDwgc291cmNlTGVuKSB7XG4gICAgaWYgKHNvdXJjZUluZGV4IGluIHNvdXJjZSkge1xuICAgICAgZWxlbWVudCA9IG1hcEZuID8gbWFwRm4oc291cmNlW3NvdXJjZUluZGV4XSwgc291cmNlSW5kZXgsIG9yaWdpbmFsKSA6IHNvdXJjZVtzb3VyY2VJbmRleF07XG5cbiAgICAgIHNwcmVhZGFibGUgPSBmYWxzZTtcbiAgICAgIGlmIChpc09iamVjdChlbGVtZW50KSkge1xuICAgICAgICBzcHJlYWRhYmxlID0gZWxlbWVudFtJU19DT05DQVRfU1BSRUFEQUJMRV07XG4gICAgICAgIHNwcmVhZGFibGUgPSBzcHJlYWRhYmxlICE9PSB1bmRlZmluZWQgPyAhIXNwcmVhZGFibGUgOiBpc0FycmF5KGVsZW1lbnQpO1xuICAgICAgfVxuXG4gICAgICBpZiAoc3ByZWFkYWJsZSAmJiBkZXB0aCA+IDApIHtcbiAgICAgICAgdGFyZ2V0SW5kZXggPSBmbGF0dGVuSW50b0FycmF5KHRhcmdldCwgb3JpZ2luYWwsIGVsZW1lbnQsIHRvTGVuZ3RoKGVsZW1lbnQubGVuZ3RoKSwgdGFyZ2V0SW5kZXgsIGRlcHRoIC0gMSkgLSAxO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKHRhcmdldEluZGV4ID49IDB4MWZmZmZmZmZmZmZmZmYpIHRocm93IFR5cGVFcnJvcigpO1xuICAgICAgICB0YXJnZXRbdGFyZ2V0SW5kZXhdID0gZWxlbWVudDtcbiAgICAgIH1cblxuICAgICAgdGFyZ2V0SW5kZXgrKztcbiAgICB9XG4gICAgc291cmNlSW5kZXgrKztcbiAgfVxuICByZXR1cm4gdGFyZ2V0SW5kZXg7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZmxhdHRlbkludG9BcnJheTtcbiIsInJlcXVpcmUoJy4uLy4uL21vZHVsZXMvZXM3LnN0cmluZy5wYWQtc3RhcnQnKTtcbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9fY29yZScpLlN0cmluZy5wYWRTdGFydDtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS90YzM5L3Byb3Bvc2FsLXN0cmluZy1wYWQtc3RhcnQtZW5kXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyICRwYWQgPSByZXF1aXJlKCcuL19zdHJpbmctcGFkJyk7XG52YXIgdXNlckFnZW50ID0gcmVxdWlyZSgnLi9fdXNlci1hZ2VudCcpO1xuXG4vLyBodHRwczovL2dpdGh1Yi5jb20vemxvaXJvY2svY29yZS1qcy9pc3N1ZXMvMjgwXG52YXIgV0VCS0lUX0JVRyA9IC9WZXJzaW9uXFwvMTBcXC5cXGQrKFxcLlxcZCspPyggTW9iaWxlXFwvXFx3Kyk/IFNhZmFyaVxcLy8udGVzdCh1c2VyQWdlbnQpO1xuXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqIFdFQktJVF9CVUcsICdTdHJpbmcnLCB7XG4gIHBhZFN0YXJ0OiBmdW5jdGlvbiBwYWRTdGFydChtYXhMZW5ndGggLyogLCBmaWxsU3RyaW5nID0gJyAnICovKSB7XG4gICAgcmV0dXJuICRwYWQodGhpcywgbWF4TGVuZ3RoLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCwgdHJ1ZSk7XG4gIH1cbn0pO1xuIiwicmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9lczcuc3RyaW5nLnBhZC1lbmQnKTtcbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9fY29yZScpLlN0cmluZy5wYWRFbmQ7XG4iLCIndXNlIHN0cmljdCc7XG4vLyBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9wcm9wb3NhbC1zdHJpbmctcGFkLXN0YXJ0LWVuZFxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciAkcGFkID0gcmVxdWlyZSgnLi9fc3RyaW5nLXBhZCcpO1xudmFyIHVzZXJBZ2VudCA9IHJlcXVpcmUoJy4vX3VzZXItYWdlbnQnKTtcblxuLy8gaHR0cHM6Ly9naXRodWIuY29tL3psb2lyb2NrL2NvcmUtanMvaXNzdWVzLzI4MFxudmFyIFdFQktJVF9CVUcgPSAvVmVyc2lvblxcLzEwXFwuXFxkKyhcXC5cXGQrKT8oIE1vYmlsZVxcL1xcdyspPyBTYWZhcmlcXC8vLnRlc3QodXNlckFnZW50KTtcblxuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiBXRUJLSVRfQlVHLCAnU3RyaW5nJywge1xuICBwYWRFbmQ6IGZ1bmN0aW9uIHBhZEVuZChtYXhMZW5ndGggLyogLCBmaWxsU3RyaW5nID0gJyAnICovKSB7XG4gICAgcmV0dXJuICRwYWQodGhpcywgbWF4TGVuZ3RoLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCwgZmFsc2UpO1xuICB9XG59KTtcbiIsInJlcXVpcmUoJy4uLy4uL21vZHVsZXMvZXM3LnN0cmluZy50cmltLWxlZnQnKTtcbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9fY29yZScpLlN0cmluZy50cmltTGVmdDtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9zZWJtYXJrYmFnZS9lY21hc2NyaXB0LXN0cmluZy1sZWZ0LXJpZ2h0LXRyaW1cbnJlcXVpcmUoJy4vX3N0cmluZy10cmltJykoJ3RyaW1MZWZ0JywgZnVuY3Rpb24gKCR0cmltKSB7XG4gIHJldHVybiBmdW5jdGlvbiB0cmltTGVmdCgpIHtcbiAgICByZXR1cm4gJHRyaW0odGhpcywgMSk7XG4gIH07XG59LCAndHJpbVN0YXJ0Jyk7XG4iLCJyZXF1aXJlKCcuLi8uLi9tb2R1bGVzL2VzNy5zdHJpbmcudHJpbS1yaWdodCcpO1xubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuLi8uLi9tb2R1bGVzL19jb3JlJykuU3RyaW5nLnRyaW1SaWdodDtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9zZWJtYXJrYmFnZS9lY21hc2NyaXB0LXN0cmluZy1sZWZ0LXJpZ2h0LXRyaW1cbnJlcXVpcmUoJy4vX3N0cmluZy10cmltJykoJ3RyaW1SaWdodCcsIGZ1bmN0aW9uICgkdHJpbSkge1xuICByZXR1cm4gZnVuY3Rpb24gdHJpbVJpZ2h0KCkge1xuICAgIHJldHVybiAkdHJpbSh0aGlzLCAyKTtcbiAgfTtcbn0sICd0cmltRW5kJyk7XG4iLCJyZXF1aXJlKCcuLi8uLi9tb2R1bGVzL2VzNy5zeW1ib2wuYXN5bmMtaXRlcmF0b3InKTtcbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9fd2tzLWV4dCcpLmYoJ2FzeW5jSXRlcmF0b3InKTtcbiIsInJlcXVpcmUoJy4vX3drcy1kZWZpbmUnKSgnYXN5bmNJdGVyYXRvcicpO1xuIiwicmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9lczcub2JqZWN0LmdldC1vd24tcHJvcGVydHktZGVzY3JpcHRvcnMnKTtcbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9fY29yZScpLk9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzO1xuIiwiLy8gaHR0cHM6Ly9naXRodWIuY29tL3RjMzkvcHJvcG9zYWwtb2JqZWN0LWdldG93bnByb3BlcnR5ZGVzY3JpcHRvcnNcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgb3duS2V5cyA9IHJlcXVpcmUoJy4vX293bi1rZXlzJyk7XG52YXIgdG9JT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8taW9iamVjdCcpO1xudmFyIGdPUEQgPSByZXF1aXJlKCcuL19vYmplY3QtZ29wZCcpO1xudmFyIGNyZWF0ZVByb3BlcnR5ID0gcmVxdWlyZSgnLi9fY3JlYXRlLXByb3BlcnR5Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnT2JqZWN0Jywge1xuICBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzOiBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKG9iamVjdCkge1xuICAgIHZhciBPID0gdG9JT2JqZWN0KG9iamVjdCk7XG4gICAgdmFyIGdldERlc2MgPSBnT1BELmY7XG4gICAgdmFyIGtleXMgPSBvd25LZXlzKE8pO1xuICAgIHZhciByZXN1bHQgPSB7fTtcbiAgICB2YXIgaSA9IDA7XG4gICAgdmFyIGtleSwgZGVzYztcbiAgICB3aGlsZSAoa2V5cy5sZW5ndGggPiBpKSB7XG4gICAgICBkZXNjID0gZ2V0RGVzYyhPLCBrZXkgPSBrZXlzW2krK10pO1xuICAgICAgaWYgKGRlc2MgIT09IHVuZGVmaW5lZCkgY3JlYXRlUHJvcGVydHkocmVzdWx0LCBrZXksIGRlc2MpO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG59KTtcbiIsInJlcXVpcmUoJy4uLy4uL21vZHVsZXMvZXM3Lm9iamVjdC52YWx1ZXMnKTtcbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9fY29yZScpLk9iamVjdC52YWx1ZXM7XG4iLCIvLyBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9wcm9wb3NhbC1vYmplY3QtdmFsdWVzLWVudHJpZXNcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgJHZhbHVlcyA9IHJlcXVpcmUoJy4vX29iamVjdC10by1hcnJheScpKGZhbHNlKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdPYmplY3QnLCB7XG4gIHZhbHVlczogZnVuY3Rpb24gdmFsdWVzKGl0KSB7XG4gICAgcmV0dXJuICR2YWx1ZXMoaXQpO1xuICB9XG59KTtcbiIsInJlcXVpcmUoJy4uLy4uL21vZHVsZXMvZXM3Lm9iamVjdC5lbnRyaWVzJyk7XG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4uLy4uL21vZHVsZXMvX2NvcmUnKS5PYmplY3QuZW50cmllcztcbiIsIi8vIGh0dHBzOi8vZ2l0aHViLmNvbS90YzM5L3Byb3Bvc2FsLW9iamVjdC12YWx1ZXMtZW50cmllc1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciAkZW50cmllcyA9IHJlcXVpcmUoJy4vX29iamVjdC10by1hcnJheScpKHRydWUpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ09iamVjdCcsIHtcbiAgZW50cmllczogZnVuY3Rpb24gZW50cmllcyhpdCkge1xuICAgIHJldHVybiAkZW50cmllcyhpdCk7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xucmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9lczYucHJvbWlzZScpO1xucmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9lczcucHJvbWlzZS5maW5hbGx5Jyk7XG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4uLy4uL21vZHVsZXMvX2NvcmUnKS5Qcm9taXNlWydmaW5hbGx5J107XG4iLCIvLyBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9wcm9wb3NhbC1wcm9taXNlLWZpbmFsbHlcbid1c2Ugc3RyaWN0JztcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgY29yZSA9IHJlcXVpcmUoJy4vX2NvcmUnKTtcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuL19nbG9iYWwnKTtcbnZhciBzcGVjaWVzQ29uc3RydWN0b3IgPSByZXF1aXJlKCcuL19zcGVjaWVzLWNvbnN0cnVjdG9yJyk7XG52YXIgcHJvbWlzZVJlc29sdmUgPSByZXF1aXJlKCcuL19wcm9taXNlLXJlc29sdmUnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LlIsICdQcm9taXNlJywgeyAnZmluYWxseSc6IGZ1bmN0aW9uIChvbkZpbmFsbHkpIHtcbiAgdmFyIEMgPSBzcGVjaWVzQ29uc3RydWN0b3IodGhpcywgY29yZS5Qcm9taXNlIHx8IGdsb2JhbC5Qcm9taXNlKTtcbiAgdmFyIGlzRnVuY3Rpb24gPSB0eXBlb2Ygb25GaW5hbGx5ID09ICdmdW5jdGlvbic7XG4gIHJldHVybiB0aGlzLnRoZW4oXG4gICAgaXNGdW5jdGlvbiA/IGZ1bmN0aW9uICh4KSB7XG4gICAgICByZXR1cm4gcHJvbWlzZVJlc29sdmUoQywgb25GaW5hbGx5KCkpLnRoZW4oZnVuY3Rpb24gKCkgeyByZXR1cm4geDsgfSk7XG4gICAgfSA6IG9uRmluYWxseSxcbiAgICBpc0Z1bmN0aW9uID8gZnVuY3Rpb24gKGUpIHtcbiAgICAgIHJldHVybiBwcm9taXNlUmVzb2x2ZShDLCBvbkZpbmFsbHkoKSkudGhlbihmdW5jdGlvbiAoKSB7IHRocm93IGU7IH0pO1xuICAgIH0gOiBvbkZpbmFsbHlcbiAgKTtcbn0gfSk7XG4iLCJyZXF1aXJlKCcuLi9tb2R1bGVzL3dlYi50aW1lcnMnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvd2ViLmltbWVkaWF0ZScpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy93ZWIuZG9tLml0ZXJhYmxlJyk7XG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4uL21vZHVsZXMvX2NvcmUnKTtcbiIsIi8vIGllOS0gc2V0VGltZW91dCAmIHNldEludGVydmFsIGFkZGl0aW9uYWwgcGFyYW1ldGVycyBmaXhcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuL19nbG9iYWwnKTtcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgdXNlckFnZW50ID0gcmVxdWlyZSgnLi9fdXNlci1hZ2VudCcpO1xudmFyIHNsaWNlID0gW10uc2xpY2U7XG52YXIgTVNJRSA9IC9NU0lFIC5cXC4vLnRlc3QodXNlckFnZW50KTsgLy8gPC0gZGlydHkgaWU5LSBjaGVja1xudmFyIHdyYXAgPSBmdW5jdGlvbiAoc2V0KSB7XG4gIHJldHVybiBmdW5jdGlvbiAoZm4sIHRpbWUgLyogLCAuLi5hcmdzICovKSB7XG4gICAgdmFyIGJvdW5kQXJncyA9IGFyZ3VtZW50cy5sZW5ndGggPiAyO1xuICAgIHZhciBhcmdzID0gYm91bmRBcmdzID8gc2xpY2UuY2FsbChhcmd1bWVudHMsIDIpIDogZmFsc2U7XG4gICAgcmV0dXJuIHNldChib3VuZEFyZ3MgPyBmdW5jdGlvbiAoKSB7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tbmV3LWZ1bmNcbiAgICAgICh0eXBlb2YgZm4gPT0gJ2Z1bmN0aW9uJyA/IGZuIDogRnVuY3Rpb24oZm4pKS5hcHBseSh0aGlzLCBhcmdzKTtcbiAgICB9IDogZm4sIHRpbWUpO1xuICB9O1xufTtcbiRleHBvcnQoJGV4cG9ydC5HICsgJGV4cG9ydC5CICsgJGV4cG9ydC5GICogTVNJRSwge1xuICBzZXRUaW1lb3V0OiB3cmFwKGdsb2JhbC5zZXRUaW1lb3V0KSxcbiAgc2V0SW50ZXJ2YWw6IHdyYXAoZ2xvYmFsLnNldEludGVydmFsKVxufSk7XG4iLCJ2YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyICR0YXNrID0gcmVxdWlyZSgnLi9fdGFzaycpO1xuJGV4cG9ydCgkZXhwb3J0LkcgKyAkZXhwb3J0LkIsIHtcbiAgc2V0SW1tZWRpYXRlOiAkdGFzay5zZXQsXG4gIGNsZWFySW1tZWRpYXRlOiAkdGFzay5jbGVhclxufSk7XG4iLCJ2YXIgJGl0ZXJhdG9ycyA9IHJlcXVpcmUoJy4vZXM2LmFycmF5Lml0ZXJhdG9yJyk7XG52YXIgZ2V0S2V5cyA9IHJlcXVpcmUoJy4vX29iamVjdC1rZXlzJyk7XG52YXIgcmVkZWZpbmUgPSByZXF1aXJlKCcuL19yZWRlZmluZScpO1xudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpO1xudmFyIGhpZGUgPSByZXF1aXJlKCcuL19oaWRlJyk7XG52YXIgSXRlcmF0b3JzID0gcmVxdWlyZSgnLi9faXRlcmF0b3JzJyk7XG52YXIgd2tzID0gcmVxdWlyZSgnLi9fd2tzJyk7XG52YXIgSVRFUkFUT1IgPSB3a3MoJ2l0ZXJhdG9yJyk7XG52YXIgVE9fU1RSSU5HX1RBRyA9IHdrcygndG9TdHJpbmdUYWcnKTtcbnZhciBBcnJheVZhbHVlcyA9IEl0ZXJhdG9ycy5BcnJheTtcblxudmFyIERPTUl0ZXJhYmxlcyA9IHtcbiAgQ1NTUnVsZUxpc3Q6IHRydWUsIC8vIFRPRE86IE5vdCBzcGVjIGNvbXBsaWFudCwgc2hvdWxkIGJlIGZhbHNlLlxuICBDU1NTdHlsZURlY2xhcmF0aW9uOiBmYWxzZSxcbiAgQ1NTVmFsdWVMaXN0OiBmYWxzZSxcbiAgQ2xpZW50UmVjdExpc3Q6IGZhbHNlLFxuICBET01SZWN0TGlzdDogZmFsc2UsXG4gIERPTVN0cmluZ0xpc3Q6IGZhbHNlLFxuICBET01Ub2tlbkxpc3Q6IHRydWUsXG4gIERhdGFUcmFuc2Zlckl0ZW1MaXN0OiBmYWxzZSxcbiAgRmlsZUxpc3Q6IGZhbHNlLFxuICBIVE1MQWxsQ29sbGVjdGlvbjogZmFsc2UsXG4gIEhUTUxDb2xsZWN0aW9uOiBmYWxzZSxcbiAgSFRNTEZvcm1FbGVtZW50OiBmYWxzZSxcbiAgSFRNTFNlbGVjdEVsZW1lbnQ6IGZhbHNlLFxuICBNZWRpYUxpc3Q6IHRydWUsIC8vIFRPRE86IE5vdCBzcGVjIGNvbXBsaWFudCwgc2hvdWxkIGJlIGZhbHNlLlxuICBNaW1lVHlwZUFycmF5OiBmYWxzZSxcbiAgTmFtZWROb2RlTWFwOiBmYWxzZSxcbiAgTm9kZUxpc3Q6IHRydWUsXG4gIFBhaW50UmVxdWVzdExpc3Q6IGZhbHNlLFxuICBQbHVnaW46IGZhbHNlLFxuICBQbHVnaW5BcnJheTogZmFsc2UsXG4gIFNWR0xlbmd0aExpc3Q6IGZhbHNlLFxuICBTVkdOdW1iZXJMaXN0OiBmYWxzZSxcbiAgU1ZHUGF0aFNlZ0xpc3Q6IGZhbHNlLFxuICBTVkdQb2ludExpc3Q6IGZhbHNlLFxuICBTVkdTdHJpbmdMaXN0OiBmYWxzZSxcbiAgU1ZHVHJhbnNmb3JtTGlzdDogZmFsc2UsXG4gIFNvdXJjZUJ1ZmZlckxpc3Q6IGZhbHNlLFxuICBTdHlsZVNoZWV0TGlzdDogdHJ1ZSwgLy8gVE9ETzogTm90IHNwZWMgY29tcGxpYW50LCBzaG91bGQgYmUgZmFsc2UuXG4gIFRleHRUcmFja0N1ZUxpc3Q6IGZhbHNlLFxuICBUZXh0VHJhY2tMaXN0OiBmYWxzZSxcbiAgVG91Y2hMaXN0OiBmYWxzZVxufTtcblxuZm9yICh2YXIgY29sbGVjdGlvbnMgPSBnZXRLZXlzKERPTUl0ZXJhYmxlcyksIGkgPSAwOyBpIDwgY29sbGVjdGlvbnMubGVuZ3RoOyBpKyspIHtcbiAgdmFyIE5BTUUgPSBjb2xsZWN0aW9uc1tpXTtcbiAgdmFyIGV4cGxpY2l0ID0gRE9NSXRlcmFibGVzW05BTUVdO1xuICB2YXIgQ29sbGVjdGlvbiA9IGdsb2JhbFtOQU1FXTtcbiAgdmFyIHByb3RvID0gQ29sbGVjdGlvbiAmJiBDb2xsZWN0aW9uLnByb3RvdHlwZTtcbiAgdmFyIGtleTtcbiAgaWYgKHByb3RvKSB7XG4gICAgaWYgKCFwcm90b1tJVEVSQVRPUl0pIGhpZGUocHJvdG8sIElURVJBVE9SLCBBcnJheVZhbHVlcyk7XG4gICAgaWYgKCFwcm90b1tUT19TVFJJTkdfVEFHXSkgaGlkZShwcm90bywgVE9fU1RSSU5HX1RBRywgTkFNRSk7XG4gICAgSXRlcmF0b3JzW05BTUVdID0gQXJyYXlWYWx1ZXM7XG4gICAgaWYgKGV4cGxpY2l0KSBmb3IgKGtleSBpbiAkaXRlcmF0b3JzKSBpZiAoIXByb3RvW2tleV0pIHJlZGVmaW5lKHByb3RvLCBrZXksICRpdGVyYXRvcnNba2V5XSwgdHJ1ZSk7XG4gIH1cbn1cbiIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDE0LXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxudmFyIHJ1bnRpbWUgPSAoZnVuY3Rpb24gKGV4cG9ydHMpIHtcbiAgXCJ1c2Ugc3RyaWN0XCI7XG5cbiAgdmFyIE9wID0gT2JqZWN0LnByb3RvdHlwZTtcbiAgdmFyIGhhc093biA9IE9wLmhhc093blByb3BlcnR5O1xuICB2YXIgdW5kZWZpbmVkOyAvLyBNb3JlIGNvbXByZXNzaWJsZSB0aGFuIHZvaWQgMC5cbiAgdmFyICRTeW1ib2wgPSB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgPyBTeW1ib2wgOiB7fTtcbiAgdmFyIGl0ZXJhdG9yU3ltYm9sID0gJFN5bWJvbC5pdGVyYXRvciB8fCBcIkBAaXRlcmF0b3JcIjtcbiAgdmFyIGFzeW5jSXRlcmF0b3JTeW1ib2wgPSAkU3ltYm9sLmFzeW5jSXRlcmF0b3IgfHwgXCJAQGFzeW5jSXRlcmF0b3JcIjtcbiAgdmFyIHRvU3RyaW5nVGFnU3ltYm9sID0gJFN5bWJvbC50b1N0cmluZ1RhZyB8fCBcIkBAdG9TdHJpbmdUYWdcIjtcblxuICBmdW5jdGlvbiBkZWZpbmUob2JqLCBrZXksIHZhbHVlKSB7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwga2V5LCB7XG4gICAgICB2YWx1ZTogdmFsdWUsXG4gICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgd3JpdGFibGU6IHRydWVcbiAgICB9KTtcbiAgICByZXR1cm4gb2JqW2tleV07XG4gIH1cbiAgdHJ5IHtcbiAgICAvLyBJRSA4IGhhcyBhIGJyb2tlbiBPYmplY3QuZGVmaW5lUHJvcGVydHkgdGhhdCBvbmx5IHdvcmtzIG9uIERPTSBvYmplY3RzLlxuICAgIGRlZmluZSh7fSwgXCJcIik7XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIGRlZmluZSA9IGZ1bmN0aW9uKG9iaiwga2V5LCB2YWx1ZSkge1xuICAgICAgcmV0dXJuIG9ialtrZXldID0gdmFsdWU7XG4gICAgfTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHdyYXAoaW5uZXJGbiwgb3V0ZXJGbiwgc2VsZiwgdHJ5TG9jc0xpc3QpIHtcbiAgICAvLyBJZiBvdXRlckZuIHByb3ZpZGVkIGFuZCBvdXRlckZuLnByb3RvdHlwZSBpcyBhIEdlbmVyYXRvciwgdGhlbiBvdXRlckZuLnByb3RvdHlwZSBpbnN0YW5jZW9mIEdlbmVyYXRvci5cbiAgICB2YXIgcHJvdG9HZW5lcmF0b3IgPSBvdXRlckZuICYmIG91dGVyRm4ucHJvdG90eXBlIGluc3RhbmNlb2YgR2VuZXJhdG9yID8gb3V0ZXJGbiA6IEdlbmVyYXRvcjtcbiAgICB2YXIgZ2VuZXJhdG9yID0gT2JqZWN0LmNyZWF0ZShwcm90b0dlbmVyYXRvci5wcm90b3R5cGUpO1xuICAgIHZhciBjb250ZXh0ID0gbmV3IENvbnRleHQodHJ5TG9jc0xpc3QgfHwgW10pO1xuXG4gICAgLy8gVGhlIC5faW52b2tlIG1ldGhvZCB1bmlmaWVzIHRoZSBpbXBsZW1lbnRhdGlvbnMgb2YgdGhlIC5uZXh0LFxuICAgIC8vIC50aHJvdywgYW5kIC5yZXR1cm4gbWV0aG9kcy5cbiAgICBnZW5lcmF0b3IuX2ludm9rZSA9IG1ha2VJbnZva2VNZXRob2QoaW5uZXJGbiwgc2VsZiwgY29udGV4dCk7XG5cbiAgICByZXR1cm4gZ2VuZXJhdG9yO1xuICB9XG4gIGV4cG9ydHMud3JhcCA9IHdyYXA7XG5cbiAgLy8gVHJ5L2NhdGNoIGhlbHBlciB0byBtaW5pbWl6ZSBkZW9wdGltaXphdGlvbnMuIFJldHVybnMgYSBjb21wbGV0aW9uXG4gIC8vIHJlY29yZCBsaWtlIGNvbnRleHQudHJ5RW50cmllc1tpXS5jb21wbGV0aW9uLiBUaGlzIGludGVyZmFjZSBjb3VsZFxuICAvLyBoYXZlIGJlZW4gKGFuZCB3YXMgcHJldmlvdXNseSkgZGVzaWduZWQgdG8gdGFrZSBhIGNsb3N1cmUgdG8gYmVcbiAgLy8gaW52b2tlZCB3aXRob3V0IGFyZ3VtZW50cywgYnV0IGluIGFsbCB0aGUgY2FzZXMgd2UgY2FyZSBhYm91dCB3ZVxuICAvLyBhbHJlYWR5IGhhdmUgYW4gZXhpc3RpbmcgbWV0aG9kIHdlIHdhbnQgdG8gY2FsbCwgc28gdGhlcmUncyBubyBuZWVkXG4gIC8vIHRvIGNyZWF0ZSBhIG5ldyBmdW5jdGlvbiBvYmplY3QuIFdlIGNhbiBldmVuIGdldCBhd2F5IHdpdGggYXNzdW1pbmdcbiAgLy8gdGhlIG1ldGhvZCB0YWtlcyBleGFjdGx5IG9uZSBhcmd1bWVudCwgc2luY2UgdGhhdCBoYXBwZW5zIHRvIGJlIHRydWVcbiAgLy8gaW4gZXZlcnkgY2FzZSwgc28gd2UgZG9uJ3QgaGF2ZSB0byB0b3VjaCB0aGUgYXJndW1lbnRzIG9iamVjdC4gVGhlXG4gIC8vIG9ubHkgYWRkaXRpb25hbCBhbGxvY2F0aW9uIHJlcXVpcmVkIGlzIHRoZSBjb21wbGV0aW9uIHJlY29yZCwgd2hpY2hcbiAgLy8gaGFzIGEgc3RhYmxlIHNoYXBlIGFuZCBzbyBob3BlZnVsbHkgc2hvdWxkIGJlIGNoZWFwIHRvIGFsbG9jYXRlLlxuICBmdW5jdGlvbiB0cnlDYXRjaChmbiwgb2JqLCBhcmcpIHtcbiAgICB0cnkge1xuICAgICAgcmV0dXJuIHsgdHlwZTogXCJub3JtYWxcIiwgYXJnOiBmbi5jYWxsKG9iaiwgYXJnKSB9O1xuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgcmV0dXJuIHsgdHlwZTogXCJ0aHJvd1wiLCBhcmc6IGVyciB9O1xuICAgIH1cbiAgfVxuXG4gIHZhciBHZW5TdGF0ZVN1c3BlbmRlZFN0YXJ0ID0gXCJzdXNwZW5kZWRTdGFydFwiO1xuICB2YXIgR2VuU3RhdGVTdXNwZW5kZWRZaWVsZCA9IFwic3VzcGVuZGVkWWllbGRcIjtcbiAgdmFyIEdlblN0YXRlRXhlY3V0aW5nID0gXCJleGVjdXRpbmdcIjtcbiAgdmFyIEdlblN0YXRlQ29tcGxldGVkID0gXCJjb21wbGV0ZWRcIjtcblxuICAvLyBSZXR1cm5pbmcgdGhpcyBvYmplY3QgZnJvbSB0aGUgaW5uZXJGbiBoYXMgdGhlIHNhbWUgZWZmZWN0IGFzXG4gIC8vIGJyZWFraW5nIG91dCBvZiB0aGUgZGlzcGF0Y2ggc3dpdGNoIHN0YXRlbWVudC5cbiAgdmFyIENvbnRpbnVlU2VudGluZWwgPSB7fTtcblxuICAvLyBEdW1teSBjb25zdHJ1Y3RvciBmdW5jdGlvbnMgdGhhdCB3ZSB1c2UgYXMgdGhlIC5jb25zdHJ1Y3RvciBhbmRcbiAgLy8gLmNvbnN0cnVjdG9yLnByb3RvdHlwZSBwcm9wZXJ0aWVzIGZvciBmdW5jdGlvbnMgdGhhdCByZXR1cm4gR2VuZXJhdG9yXG4gIC8vIG9iamVjdHMuIEZvciBmdWxsIHNwZWMgY29tcGxpYW5jZSwgeW91IG1heSB3aXNoIHRvIGNvbmZpZ3VyZSB5b3VyXG4gIC8vIG1pbmlmaWVyIG5vdCB0byBtYW5nbGUgdGhlIG5hbWVzIG9mIHRoZXNlIHR3byBmdW5jdGlvbnMuXG4gIGZ1bmN0aW9uIEdlbmVyYXRvcigpIHt9XG4gIGZ1bmN0aW9uIEdlbmVyYXRvckZ1bmN0aW9uKCkge31cbiAgZnVuY3Rpb24gR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGUoKSB7fVxuXG4gIC8vIFRoaXMgaXMgYSBwb2x5ZmlsbCBmb3IgJUl0ZXJhdG9yUHJvdG90eXBlJSBmb3IgZW52aXJvbm1lbnRzIHRoYXRcbiAgLy8gZG9uJ3QgbmF0aXZlbHkgc3VwcG9ydCBpdC5cbiAgdmFyIEl0ZXJhdG9yUHJvdG90eXBlID0ge307XG4gIEl0ZXJhdG9yUHJvdG90eXBlW2l0ZXJhdG9yU3ltYm9sXSA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICB2YXIgZ2V0UHJvdG8gPSBPYmplY3QuZ2V0UHJvdG90eXBlT2Y7XG4gIHZhciBOYXRpdmVJdGVyYXRvclByb3RvdHlwZSA9IGdldFByb3RvICYmIGdldFByb3RvKGdldFByb3RvKHZhbHVlcyhbXSkpKTtcbiAgaWYgKE5hdGl2ZUl0ZXJhdG9yUHJvdG90eXBlICYmXG4gICAgICBOYXRpdmVJdGVyYXRvclByb3RvdHlwZSAhPT0gT3AgJiZcbiAgICAgIGhhc093bi5jYWxsKE5hdGl2ZUl0ZXJhdG9yUHJvdG90eXBlLCBpdGVyYXRvclN5bWJvbCkpIHtcbiAgICAvLyBUaGlzIGVudmlyb25tZW50IGhhcyBhIG5hdGl2ZSAlSXRlcmF0b3JQcm90b3R5cGUlOyB1c2UgaXQgaW5zdGVhZFxuICAgIC8vIG9mIHRoZSBwb2x5ZmlsbC5cbiAgICBJdGVyYXRvclByb3RvdHlwZSA9IE5hdGl2ZUl0ZXJhdG9yUHJvdG90eXBlO1xuICB9XG5cbiAgdmFyIEdwID0gR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGUucHJvdG90eXBlID1cbiAgICBHZW5lcmF0b3IucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShJdGVyYXRvclByb3RvdHlwZSk7XG4gIEdlbmVyYXRvckZ1bmN0aW9uLnByb3RvdHlwZSA9IEdwLmNvbnN0cnVjdG9yID0gR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGU7XG4gIEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlLmNvbnN0cnVjdG9yID0gR2VuZXJhdG9yRnVuY3Rpb247XG4gIEdlbmVyYXRvckZ1bmN0aW9uLmRpc3BsYXlOYW1lID0gZGVmaW5lKFxuICAgIEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlLFxuICAgIHRvU3RyaW5nVGFnU3ltYm9sLFxuICAgIFwiR2VuZXJhdG9yRnVuY3Rpb25cIlxuICApO1xuXG4gIC8vIEhlbHBlciBmb3IgZGVmaW5pbmcgdGhlIC5uZXh0LCAudGhyb3csIGFuZCAucmV0dXJuIG1ldGhvZHMgb2YgdGhlXG4gIC8vIEl0ZXJhdG9yIGludGVyZmFjZSBpbiB0ZXJtcyBvZiBhIHNpbmdsZSAuX2ludm9rZSBtZXRob2QuXG4gIGZ1bmN0aW9uIGRlZmluZUl0ZXJhdG9yTWV0aG9kcyhwcm90b3R5cGUpIHtcbiAgICBbXCJuZXh0XCIsIFwidGhyb3dcIiwgXCJyZXR1cm5cIl0uZm9yRWFjaChmdW5jdGlvbihtZXRob2QpIHtcbiAgICAgIGRlZmluZShwcm90b3R5cGUsIG1ldGhvZCwgZnVuY3Rpb24oYXJnKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9pbnZva2UobWV0aG9kLCBhcmcpO1xuICAgICAgfSk7XG4gICAgfSk7XG4gIH1cblxuICBleHBvcnRzLmlzR2VuZXJhdG9yRnVuY3Rpb24gPSBmdW5jdGlvbihnZW5GdW4pIHtcbiAgICB2YXIgY3RvciA9IHR5cGVvZiBnZW5GdW4gPT09IFwiZnVuY3Rpb25cIiAmJiBnZW5GdW4uY29uc3RydWN0b3I7XG4gICAgcmV0dXJuIGN0b3JcbiAgICAgID8gY3RvciA9PT0gR2VuZXJhdG9yRnVuY3Rpb24gfHxcbiAgICAgICAgLy8gRm9yIHRoZSBuYXRpdmUgR2VuZXJhdG9yRnVuY3Rpb24gY29uc3RydWN0b3IsIHRoZSBiZXN0IHdlIGNhblxuICAgICAgICAvLyBkbyBpcyB0byBjaGVjayBpdHMgLm5hbWUgcHJvcGVydHkuXG4gICAgICAgIChjdG9yLmRpc3BsYXlOYW1lIHx8IGN0b3IubmFtZSkgPT09IFwiR2VuZXJhdG9yRnVuY3Rpb25cIlxuICAgICAgOiBmYWxzZTtcbiAgfTtcblxuICBleHBvcnRzLm1hcmsgPSBmdW5jdGlvbihnZW5GdW4pIHtcbiAgICBpZiAoT2JqZWN0LnNldFByb3RvdHlwZU9mKSB7XG4gICAgICBPYmplY3Quc2V0UHJvdG90eXBlT2YoZ2VuRnVuLCBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGdlbkZ1bi5fX3Byb3RvX18gPSBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZTtcbiAgICAgIGRlZmluZShnZW5GdW4sIHRvU3RyaW5nVGFnU3ltYm9sLCBcIkdlbmVyYXRvckZ1bmN0aW9uXCIpO1xuICAgIH1cbiAgICBnZW5GdW4ucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShHcCk7XG4gICAgcmV0dXJuIGdlbkZ1bjtcbiAgfTtcblxuICAvLyBXaXRoaW4gdGhlIGJvZHkgb2YgYW55IGFzeW5jIGZ1bmN0aW9uLCBgYXdhaXQgeGAgaXMgdHJhbnNmb3JtZWQgdG9cbiAgLy8gYHlpZWxkIHJlZ2VuZXJhdG9yUnVudGltZS5hd3JhcCh4KWAsIHNvIHRoYXQgdGhlIHJ1bnRpbWUgY2FuIHRlc3RcbiAgLy8gYGhhc093bi5jYWxsKHZhbHVlLCBcIl9fYXdhaXRcIilgIHRvIGRldGVybWluZSBpZiB0aGUgeWllbGRlZCB2YWx1ZSBpc1xuICAvLyBtZWFudCB0byBiZSBhd2FpdGVkLlxuICBleHBvcnRzLmF3cmFwID0gZnVuY3Rpb24oYXJnKSB7XG4gICAgcmV0dXJuIHsgX19hd2FpdDogYXJnIH07XG4gIH07XG5cbiAgZnVuY3Rpb24gQXN5bmNJdGVyYXRvcihnZW5lcmF0b3IsIFByb21pc2VJbXBsKSB7XG4gICAgZnVuY3Rpb24gaW52b2tlKG1ldGhvZCwgYXJnLCByZXNvbHZlLCByZWplY3QpIHtcbiAgICAgIHZhciByZWNvcmQgPSB0cnlDYXRjaChnZW5lcmF0b3JbbWV0aG9kXSwgZ2VuZXJhdG9yLCBhcmcpO1xuICAgICAgaWYgKHJlY29yZC50eXBlID09PSBcInRocm93XCIpIHtcbiAgICAgICAgcmVqZWN0KHJlY29yZC5hcmcpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFyIHJlc3VsdCA9IHJlY29yZC5hcmc7XG4gICAgICAgIHZhciB2YWx1ZSA9IHJlc3VsdC52YWx1ZTtcbiAgICAgICAgaWYgKHZhbHVlICYmXG4gICAgICAgICAgICB0eXBlb2YgdmFsdWUgPT09IFwib2JqZWN0XCIgJiZcbiAgICAgICAgICAgIGhhc093bi5jYWxsKHZhbHVlLCBcIl9fYXdhaXRcIikpIHtcbiAgICAgICAgICByZXR1cm4gUHJvbWlzZUltcGwucmVzb2x2ZSh2YWx1ZS5fX2F3YWl0KS50aGVuKGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgICAgICBpbnZva2UoXCJuZXh0XCIsIHZhbHVlLCByZXNvbHZlLCByZWplY3QpO1xuICAgICAgICAgIH0sIGZ1bmN0aW9uKGVycikge1xuICAgICAgICAgICAgaW52b2tlKFwidGhyb3dcIiwgZXJyLCByZXNvbHZlLCByZWplY3QpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIFByb21pc2VJbXBsLnJlc29sdmUodmFsdWUpLnRoZW4oZnVuY3Rpb24odW53cmFwcGVkKSB7XG4gICAgICAgICAgLy8gV2hlbiBhIHlpZWxkZWQgUHJvbWlzZSBpcyByZXNvbHZlZCwgaXRzIGZpbmFsIHZhbHVlIGJlY29tZXNcbiAgICAgICAgICAvLyB0aGUgLnZhbHVlIG9mIHRoZSBQcm9taXNlPHt2YWx1ZSxkb25lfT4gcmVzdWx0IGZvciB0aGVcbiAgICAgICAgICAvLyBjdXJyZW50IGl0ZXJhdGlvbi5cbiAgICAgICAgICByZXN1bHQudmFsdWUgPSB1bndyYXBwZWQ7XG4gICAgICAgICAgcmVzb2x2ZShyZXN1bHQpO1xuICAgICAgICB9LCBmdW5jdGlvbihlcnJvcikge1xuICAgICAgICAgIC8vIElmIGEgcmVqZWN0ZWQgUHJvbWlzZSB3YXMgeWllbGRlZCwgdGhyb3cgdGhlIHJlamVjdGlvbiBiYWNrXG4gICAgICAgICAgLy8gaW50byB0aGUgYXN5bmMgZ2VuZXJhdG9yIGZ1bmN0aW9uIHNvIGl0IGNhbiBiZSBoYW5kbGVkIHRoZXJlLlxuICAgICAgICAgIHJldHVybiBpbnZva2UoXCJ0aHJvd1wiLCBlcnJvciwgcmVzb2x2ZSwgcmVqZWN0KTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdmFyIHByZXZpb3VzUHJvbWlzZTtcblxuICAgIGZ1bmN0aW9uIGVucXVldWUobWV0aG9kLCBhcmcpIHtcbiAgICAgIGZ1bmN0aW9uIGNhbGxJbnZva2VXaXRoTWV0aG9kQW5kQXJnKCkge1xuICAgICAgICByZXR1cm4gbmV3IFByb21pc2VJbXBsKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICAgIGludm9rZShtZXRob2QsIGFyZywgcmVzb2x2ZSwgcmVqZWN0KTtcbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBwcmV2aW91c1Byb21pc2UgPVxuICAgICAgICAvLyBJZiBlbnF1ZXVlIGhhcyBiZWVuIGNhbGxlZCBiZWZvcmUsIHRoZW4gd2Ugd2FudCB0byB3YWl0IHVudGlsXG4gICAgICAgIC8vIGFsbCBwcmV2aW91cyBQcm9taXNlcyBoYXZlIGJlZW4gcmVzb2x2ZWQgYmVmb3JlIGNhbGxpbmcgaW52b2tlLFxuICAgICAgICAvLyBzbyB0aGF0IHJlc3VsdHMgYXJlIGFsd2F5cyBkZWxpdmVyZWQgaW4gdGhlIGNvcnJlY3Qgb3JkZXIuIElmXG4gICAgICAgIC8vIGVucXVldWUgaGFzIG5vdCBiZWVuIGNhbGxlZCBiZWZvcmUsIHRoZW4gaXQgaXMgaW1wb3J0YW50IHRvXG4gICAgICAgIC8vIGNhbGwgaW52b2tlIGltbWVkaWF0ZWx5LCB3aXRob3V0IHdhaXRpbmcgb24gYSBjYWxsYmFjayB0byBmaXJlLFxuICAgICAgICAvLyBzbyB0aGF0IHRoZSBhc3luYyBnZW5lcmF0b3IgZnVuY3Rpb24gaGFzIHRoZSBvcHBvcnR1bml0eSB0byBkb1xuICAgICAgICAvLyBhbnkgbmVjZXNzYXJ5IHNldHVwIGluIGEgcHJlZGljdGFibGUgd2F5LiBUaGlzIHByZWRpY3RhYmlsaXR5XG4gICAgICAgIC8vIGlzIHdoeSB0aGUgUHJvbWlzZSBjb25zdHJ1Y3RvciBzeW5jaHJvbm91c2x5IGludm9rZXMgaXRzXG4gICAgICAgIC8vIGV4ZWN1dG9yIGNhbGxiYWNrLCBhbmQgd2h5IGFzeW5jIGZ1bmN0aW9ucyBzeW5jaHJvbm91c2x5XG4gICAgICAgIC8vIGV4ZWN1dGUgY29kZSBiZWZvcmUgdGhlIGZpcnN0IGF3YWl0LiBTaW5jZSB3ZSBpbXBsZW1lbnQgc2ltcGxlXG4gICAgICAgIC8vIGFzeW5jIGZ1bmN0aW9ucyBpbiB0ZXJtcyBvZiBhc3luYyBnZW5lcmF0b3JzLCBpdCBpcyBlc3BlY2lhbGx5XG4gICAgICAgIC8vIGltcG9ydGFudCB0byBnZXQgdGhpcyByaWdodCwgZXZlbiB0aG91Z2ggaXQgcmVxdWlyZXMgY2FyZS5cbiAgICAgICAgcHJldmlvdXNQcm9taXNlID8gcHJldmlvdXNQcm9taXNlLnRoZW4oXG4gICAgICAgICAgY2FsbEludm9rZVdpdGhNZXRob2RBbmRBcmcsXG4gICAgICAgICAgLy8gQXZvaWQgcHJvcGFnYXRpbmcgZmFpbHVyZXMgdG8gUHJvbWlzZXMgcmV0dXJuZWQgYnkgbGF0ZXJcbiAgICAgICAgICAvLyBpbnZvY2F0aW9ucyBvZiB0aGUgaXRlcmF0b3IuXG4gICAgICAgICAgY2FsbEludm9rZVdpdGhNZXRob2RBbmRBcmdcbiAgICAgICAgKSA6IGNhbGxJbnZva2VXaXRoTWV0aG9kQW5kQXJnKCk7XG4gICAgfVxuXG4gICAgLy8gRGVmaW5lIHRoZSB1bmlmaWVkIGhlbHBlciBtZXRob2QgdGhhdCBpcyB1c2VkIHRvIGltcGxlbWVudCAubmV4dCxcbiAgICAvLyAudGhyb3csIGFuZCAucmV0dXJuIChzZWUgZGVmaW5lSXRlcmF0b3JNZXRob2RzKS5cbiAgICB0aGlzLl9pbnZva2UgPSBlbnF1ZXVlO1xuICB9XG5cbiAgZGVmaW5lSXRlcmF0b3JNZXRob2RzKEFzeW5jSXRlcmF0b3IucHJvdG90eXBlKTtcbiAgQXN5bmNJdGVyYXRvci5wcm90b3R5cGVbYXN5bmNJdGVyYXRvclN5bWJvbF0gPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG4gIGV4cG9ydHMuQXN5bmNJdGVyYXRvciA9IEFzeW5jSXRlcmF0b3I7XG5cbiAgLy8gTm90ZSB0aGF0IHNpbXBsZSBhc3luYyBmdW5jdGlvbnMgYXJlIGltcGxlbWVudGVkIG9uIHRvcCBvZlxuICAvLyBBc3luY0l0ZXJhdG9yIG9iamVjdHM7IHRoZXkganVzdCByZXR1cm4gYSBQcm9taXNlIGZvciB0aGUgdmFsdWUgb2ZcbiAgLy8gdGhlIGZpbmFsIHJlc3VsdCBwcm9kdWNlZCBieSB0aGUgaXRlcmF0b3IuXG4gIGV4cG9ydHMuYXN5bmMgPSBmdW5jdGlvbihpbm5lckZuLCBvdXRlckZuLCBzZWxmLCB0cnlMb2NzTGlzdCwgUHJvbWlzZUltcGwpIHtcbiAgICBpZiAoUHJvbWlzZUltcGwgPT09IHZvaWQgMCkgUHJvbWlzZUltcGwgPSBQcm9taXNlO1xuXG4gICAgdmFyIGl0ZXIgPSBuZXcgQXN5bmNJdGVyYXRvcihcbiAgICAgIHdyYXAoaW5uZXJGbiwgb3V0ZXJGbiwgc2VsZiwgdHJ5TG9jc0xpc3QpLFxuICAgICAgUHJvbWlzZUltcGxcbiAgICApO1xuXG4gICAgcmV0dXJuIGV4cG9ydHMuaXNHZW5lcmF0b3JGdW5jdGlvbihvdXRlckZuKVxuICAgICAgPyBpdGVyIC8vIElmIG91dGVyRm4gaXMgYSBnZW5lcmF0b3IsIHJldHVybiB0aGUgZnVsbCBpdGVyYXRvci5cbiAgICAgIDogaXRlci5uZXh0KCkudGhlbihmdW5jdGlvbihyZXN1bHQpIHtcbiAgICAgICAgICByZXR1cm4gcmVzdWx0LmRvbmUgPyByZXN1bHQudmFsdWUgOiBpdGVyLm5leHQoKTtcbiAgICAgICAgfSk7XG4gIH07XG5cbiAgZnVuY3Rpb24gbWFrZUludm9rZU1ldGhvZChpbm5lckZuLCBzZWxmLCBjb250ZXh0KSB7XG4gICAgdmFyIHN0YXRlID0gR2VuU3RhdGVTdXNwZW5kZWRTdGFydDtcblxuICAgIHJldHVybiBmdW5jdGlvbiBpbnZva2UobWV0aG9kLCBhcmcpIHtcbiAgICAgIGlmIChzdGF0ZSA9PT0gR2VuU3RhdGVFeGVjdXRpbmcpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiR2VuZXJhdG9yIGlzIGFscmVhZHkgcnVubmluZ1wiKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHN0YXRlID09PSBHZW5TdGF0ZUNvbXBsZXRlZCkge1xuICAgICAgICBpZiAobWV0aG9kID09PSBcInRocm93XCIpIHtcbiAgICAgICAgICB0aHJvdyBhcmc7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBCZSBmb3JnaXZpbmcsIHBlciAyNS4zLjMuMy4zIG9mIHRoZSBzcGVjOlxuICAgICAgICAvLyBodHRwczovL3Blb3BsZS5tb3ppbGxhLm9yZy9+am9yZW5kb3JmZi9lczYtZHJhZnQuaHRtbCNzZWMtZ2VuZXJhdG9ycmVzdW1lXG4gICAgICAgIHJldHVybiBkb25lUmVzdWx0KCk7XG4gICAgICB9XG5cbiAgICAgIGNvbnRleHQubWV0aG9kID0gbWV0aG9kO1xuICAgICAgY29udGV4dC5hcmcgPSBhcmc7XG5cbiAgICAgIHdoaWxlICh0cnVlKSB7XG4gICAgICAgIHZhciBkZWxlZ2F0ZSA9IGNvbnRleHQuZGVsZWdhdGU7XG4gICAgICAgIGlmIChkZWxlZ2F0ZSkge1xuICAgICAgICAgIHZhciBkZWxlZ2F0ZVJlc3VsdCA9IG1heWJlSW52b2tlRGVsZWdhdGUoZGVsZWdhdGUsIGNvbnRleHQpO1xuICAgICAgICAgIGlmIChkZWxlZ2F0ZVJlc3VsdCkge1xuICAgICAgICAgICAgaWYgKGRlbGVnYXRlUmVzdWx0ID09PSBDb250aW51ZVNlbnRpbmVsKSBjb250aW51ZTtcbiAgICAgICAgICAgIHJldHVybiBkZWxlZ2F0ZVJlc3VsdDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoY29udGV4dC5tZXRob2QgPT09IFwibmV4dFwiKSB7XG4gICAgICAgICAgLy8gU2V0dGluZyBjb250ZXh0Ll9zZW50IGZvciBsZWdhY3kgc3VwcG9ydCBvZiBCYWJlbCdzXG4gICAgICAgICAgLy8gZnVuY3Rpb24uc2VudCBpbXBsZW1lbnRhdGlvbi5cbiAgICAgICAgICBjb250ZXh0LnNlbnQgPSBjb250ZXh0Ll9zZW50ID0gY29udGV4dC5hcmc7XG5cbiAgICAgICAgfSBlbHNlIGlmIChjb250ZXh0Lm1ldGhvZCA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgICAgaWYgKHN0YXRlID09PSBHZW5TdGF0ZVN1c3BlbmRlZFN0YXJ0KSB7XG4gICAgICAgICAgICBzdGF0ZSA9IEdlblN0YXRlQ29tcGxldGVkO1xuICAgICAgICAgICAgdGhyb3cgY29udGV4dC5hcmc7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgY29udGV4dC5kaXNwYXRjaEV4Y2VwdGlvbihjb250ZXh0LmFyZyk7XG5cbiAgICAgICAgfSBlbHNlIGlmIChjb250ZXh0Lm1ldGhvZCA9PT0gXCJyZXR1cm5cIikge1xuICAgICAgICAgIGNvbnRleHQuYWJydXB0KFwicmV0dXJuXCIsIGNvbnRleHQuYXJnKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHN0YXRlID0gR2VuU3RhdGVFeGVjdXRpbmc7XG5cbiAgICAgICAgdmFyIHJlY29yZCA9IHRyeUNhdGNoKGlubmVyRm4sIHNlbGYsIGNvbnRleHQpO1xuICAgICAgICBpZiAocmVjb3JkLnR5cGUgPT09IFwibm9ybWFsXCIpIHtcbiAgICAgICAgICAvLyBJZiBhbiBleGNlcHRpb24gaXMgdGhyb3duIGZyb20gaW5uZXJGbiwgd2UgbGVhdmUgc3RhdGUgPT09XG4gICAgICAgICAgLy8gR2VuU3RhdGVFeGVjdXRpbmcgYW5kIGxvb3AgYmFjayBmb3IgYW5vdGhlciBpbnZvY2F0aW9uLlxuICAgICAgICAgIHN0YXRlID0gY29udGV4dC5kb25lXG4gICAgICAgICAgICA/IEdlblN0YXRlQ29tcGxldGVkXG4gICAgICAgICAgICA6IEdlblN0YXRlU3VzcGVuZGVkWWllbGQ7XG5cbiAgICAgICAgICBpZiAocmVjb3JkLmFyZyA9PT0gQ29udGludWVTZW50aW5lbCkge1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHZhbHVlOiByZWNvcmQuYXJnLFxuICAgICAgICAgICAgZG9uZTogY29udGV4dC5kb25lXG4gICAgICAgICAgfTtcblxuICAgICAgICB9IGVsc2UgaWYgKHJlY29yZC50eXBlID09PSBcInRocm93XCIpIHtcbiAgICAgICAgICBzdGF0ZSA9IEdlblN0YXRlQ29tcGxldGVkO1xuICAgICAgICAgIC8vIERpc3BhdGNoIHRoZSBleGNlcHRpb24gYnkgbG9vcGluZyBiYWNrIGFyb3VuZCB0byB0aGVcbiAgICAgICAgICAvLyBjb250ZXh0LmRpc3BhdGNoRXhjZXB0aW9uKGNvbnRleHQuYXJnKSBjYWxsIGFib3ZlLlxuICAgICAgICAgIGNvbnRleHQubWV0aG9kID0gXCJ0aHJvd1wiO1xuICAgICAgICAgIGNvbnRleHQuYXJnID0gcmVjb3JkLmFyZztcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH07XG4gIH1cblxuICAvLyBDYWxsIGRlbGVnYXRlLml0ZXJhdG9yW2NvbnRleHQubWV0aG9kXShjb250ZXh0LmFyZykgYW5kIGhhbmRsZSB0aGVcbiAgLy8gcmVzdWx0LCBlaXRoZXIgYnkgcmV0dXJuaW5nIGEgeyB2YWx1ZSwgZG9uZSB9IHJlc3VsdCBmcm9tIHRoZVxuICAvLyBkZWxlZ2F0ZSBpdGVyYXRvciwgb3IgYnkgbW9kaWZ5aW5nIGNvbnRleHQubWV0aG9kIGFuZCBjb250ZXh0LmFyZyxcbiAgLy8gc2V0dGluZyBjb250ZXh0LmRlbGVnYXRlIHRvIG51bGwsIGFuZCByZXR1cm5pbmcgdGhlIENvbnRpbnVlU2VudGluZWwuXG4gIGZ1bmN0aW9uIG1heWJlSW52b2tlRGVsZWdhdGUoZGVsZWdhdGUsIGNvbnRleHQpIHtcbiAgICB2YXIgbWV0aG9kID0gZGVsZWdhdGUuaXRlcmF0b3JbY29udGV4dC5tZXRob2RdO1xuICAgIGlmIChtZXRob2QgPT09IHVuZGVmaW5lZCkge1xuICAgICAgLy8gQSAudGhyb3cgb3IgLnJldHVybiB3aGVuIHRoZSBkZWxlZ2F0ZSBpdGVyYXRvciBoYXMgbm8gLnRocm93XG4gICAgICAvLyBtZXRob2QgYWx3YXlzIHRlcm1pbmF0ZXMgdGhlIHlpZWxkKiBsb29wLlxuICAgICAgY29udGV4dC5kZWxlZ2F0ZSA9IG51bGw7XG5cbiAgICAgIGlmIChjb250ZXh0Lm1ldGhvZCA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgIC8vIE5vdGU6IFtcInJldHVyblwiXSBtdXN0IGJlIHVzZWQgZm9yIEVTMyBwYXJzaW5nIGNvbXBhdGliaWxpdHkuXG4gICAgICAgIGlmIChkZWxlZ2F0ZS5pdGVyYXRvcltcInJldHVyblwiXSkge1xuICAgICAgICAgIC8vIElmIHRoZSBkZWxlZ2F0ZSBpdGVyYXRvciBoYXMgYSByZXR1cm4gbWV0aG9kLCBnaXZlIGl0IGFcbiAgICAgICAgICAvLyBjaGFuY2UgdG8gY2xlYW4gdXAuXG4gICAgICAgICAgY29udGV4dC5tZXRob2QgPSBcInJldHVyblwiO1xuICAgICAgICAgIGNvbnRleHQuYXJnID0gdW5kZWZpbmVkO1xuICAgICAgICAgIG1heWJlSW52b2tlRGVsZWdhdGUoZGVsZWdhdGUsIGNvbnRleHQpO1xuXG4gICAgICAgICAgaWYgKGNvbnRleHQubWV0aG9kID09PSBcInRocm93XCIpIHtcbiAgICAgICAgICAgIC8vIElmIG1heWJlSW52b2tlRGVsZWdhdGUoY29udGV4dCkgY2hhbmdlZCBjb250ZXh0Lm1ldGhvZCBmcm9tXG4gICAgICAgICAgICAvLyBcInJldHVyblwiIHRvIFwidGhyb3dcIiwgbGV0IHRoYXQgb3ZlcnJpZGUgdGhlIFR5cGVFcnJvciBiZWxvdy5cbiAgICAgICAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnRleHQubWV0aG9kID0gXCJ0aHJvd1wiO1xuICAgICAgICBjb250ZXh0LmFyZyA9IG5ldyBUeXBlRXJyb3IoXG4gICAgICAgICAgXCJUaGUgaXRlcmF0b3IgZG9lcyBub3QgcHJvdmlkZSBhICd0aHJvdycgbWV0aG9kXCIpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgICB9XG5cbiAgICB2YXIgcmVjb3JkID0gdHJ5Q2F0Y2gobWV0aG9kLCBkZWxlZ2F0ZS5pdGVyYXRvciwgY29udGV4dC5hcmcpO1xuXG4gICAgaWYgKHJlY29yZC50eXBlID09PSBcInRocm93XCIpIHtcbiAgICAgIGNvbnRleHQubWV0aG9kID0gXCJ0aHJvd1wiO1xuICAgICAgY29udGV4dC5hcmcgPSByZWNvcmQuYXJnO1xuICAgICAgY29udGV4dC5kZWxlZ2F0ZSA9IG51bGw7XG4gICAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgICB9XG5cbiAgICB2YXIgaW5mbyA9IHJlY29yZC5hcmc7XG5cbiAgICBpZiAoISBpbmZvKSB7XG4gICAgICBjb250ZXh0Lm1ldGhvZCA9IFwidGhyb3dcIjtcbiAgICAgIGNvbnRleHQuYXJnID0gbmV3IFR5cGVFcnJvcihcIml0ZXJhdG9yIHJlc3VsdCBpcyBub3QgYW4gb2JqZWN0XCIpO1xuICAgICAgY29udGV4dC5kZWxlZ2F0ZSA9IG51bGw7XG4gICAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgICB9XG5cbiAgICBpZiAoaW5mby5kb25lKSB7XG4gICAgICAvLyBBc3NpZ24gdGhlIHJlc3VsdCBvZiB0aGUgZmluaXNoZWQgZGVsZWdhdGUgdG8gdGhlIHRlbXBvcmFyeVxuICAgICAgLy8gdmFyaWFibGUgc3BlY2lmaWVkIGJ5IGRlbGVnYXRlLnJlc3VsdE5hbWUgKHNlZSBkZWxlZ2F0ZVlpZWxkKS5cbiAgICAgIGNvbnRleHRbZGVsZWdhdGUucmVzdWx0TmFtZV0gPSBpbmZvLnZhbHVlO1xuXG4gICAgICAvLyBSZXN1bWUgZXhlY3V0aW9uIGF0IHRoZSBkZXNpcmVkIGxvY2F0aW9uIChzZWUgZGVsZWdhdGVZaWVsZCkuXG4gICAgICBjb250ZXh0Lm5leHQgPSBkZWxlZ2F0ZS5uZXh0TG9jO1xuXG4gICAgICAvLyBJZiBjb250ZXh0Lm1ldGhvZCB3YXMgXCJ0aHJvd1wiIGJ1dCB0aGUgZGVsZWdhdGUgaGFuZGxlZCB0aGVcbiAgICAgIC8vIGV4Y2VwdGlvbiwgbGV0IHRoZSBvdXRlciBnZW5lcmF0b3IgcHJvY2VlZCBub3JtYWxseS4gSWZcbiAgICAgIC8vIGNvbnRleHQubWV0aG9kIHdhcyBcIm5leHRcIiwgZm9yZ2V0IGNvbnRleHQuYXJnIHNpbmNlIGl0IGhhcyBiZWVuXG4gICAgICAvLyBcImNvbnN1bWVkXCIgYnkgdGhlIGRlbGVnYXRlIGl0ZXJhdG9yLiBJZiBjb250ZXh0Lm1ldGhvZCB3YXNcbiAgICAgIC8vIFwicmV0dXJuXCIsIGFsbG93IHRoZSBvcmlnaW5hbCAucmV0dXJuIGNhbGwgdG8gY29udGludWUgaW4gdGhlXG4gICAgICAvLyBvdXRlciBnZW5lcmF0b3IuXG4gICAgICBpZiAoY29udGV4dC5tZXRob2QgIT09IFwicmV0dXJuXCIpIHtcbiAgICAgICAgY29udGV4dC5tZXRob2QgPSBcIm5leHRcIjtcbiAgICAgICAgY29udGV4dC5hcmcgPSB1bmRlZmluZWQ7XG4gICAgICB9XG5cbiAgICB9IGVsc2Uge1xuICAgICAgLy8gUmUteWllbGQgdGhlIHJlc3VsdCByZXR1cm5lZCBieSB0aGUgZGVsZWdhdGUgbWV0aG9kLlxuICAgICAgcmV0dXJuIGluZm87XG4gICAgfVxuXG4gICAgLy8gVGhlIGRlbGVnYXRlIGl0ZXJhdG9yIGlzIGZpbmlzaGVkLCBzbyBmb3JnZXQgaXQgYW5kIGNvbnRpbnVlIHdpdGhcbiAgICAvLyB0aGUgb3V0ZXIgZ2VuZXJhdG9yLlxuICAgIGNvbnRleHQuZGVsZWdhdGUgPSBudWxsO1xuICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICB9XG5cbiAgLy8gRGVmaW5lIEdlbmVyYXRvci5wcm90b3R5cGUue25leHQsdGhyb3cscmV0dXJufSBpbiB0ZXJtcyBvZiB0aGVcbiAgLy8gdW5pZmllZCAuX2ludm9rZSBoZWxwZXIgbWV0aG9kLlxuICBkZWZpbmVJdGVyYXRvck1ldGhvZHMoR3ApO1xuXG4gIGRlZmluZShHcCwgdG9TdHJpbmdUYWdTeW1ib2wsIFwiR2VuZXJhdG9yXCIpO1xuXG4gIC8vIEEgR2VuZXJhdG9yIHNob3VsZCBhbHdheXMgcmV0dXJuIGl0c2VsZiBhcyB0aGUgaXRlcmF0b3Igb2JqZWN0IHdoZW4gdGhlXG4gIC8vIEBAaXRlcmF0b3IgZnVuY3Rpb24gaXMgY2FsbGVkIG9uIGl0LiBTb21lIGJyb3dzZXJzJyBpbXBsZW1lbnRhdGlvbnMgb2YgdGhlXG4gIC8vIGl0ZXJhdG9yIHByb3RvdHlwZSBjaGFpbiBpbmNvcnJlY3RseSBpbXBsZW1lbnQgdGhpcywgY2F1c2luZyB0aGUgR2VuZXJhdG9yXG4gIC8vIG9iamVjdCB0byBub3QgYmUgcmV0dXJuZWQgZnJvbSB0aGlzIGNhbGwuIFRoaXMgZW5zdXJlcyB0aGF0IGRvZXNuJ3QgaGFwcGVuLlxuICAvLyBTZWUgaHR0cHM6Ly9naXRodWIuY29tL2ZhY2Vib29rL3JlZ2VuZXJhdG9yL2lzc3Vlcy8yNzQgZm9yIG1vcmUgZGV0YWlscy5cbiAgR3BbaXRlcmF0b3JTeW1ib2xdID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgR3AudG9TdHJpbmcgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gXCJbb2JqZWN0IEdlbmVyYXRvcl1cIjtcbiAgfTtcblxuICBmdW5jdGlvbiBwdXNoVHJ5RW50cnkobG9jcykge1xuICAgIHZhciBlbnRyeSA9IHsgdHJ5TG9jOiBsb2NzWzBdIH07XG5cbiAgICBpZiAoMSBpbiBsb2NzKSB7XG4gICAgICBlbnRyeS5jYXRjaExvYyA9IGxvY3NbMV07XG4gICAgfVxuXG4gICAgaWYgKDIgaW4gbG9jcykge1xuICAgICAgZW50cnkuZmluYWxseUxvYyA9IGxvY3NbMl07XG4gICAgICBlbnRyeS5hZnRlckxvYyA9IGxvY3NbM107XG4gICAgfVxuXG4gICAgdGhpcy50cnlFbnRyaWVzLnB1c2goZW50cnkpO1xuICB9XG5cbiAgZnVuY3Rpb24gcmVzZXRUcnlFbnRyeShlbnRyeSkge1xuICAgIHZhciByZWNvcmQgPSBlbnRyeS5jb21wbGV0aW9uIHx8IHt9O1xuICAgIHJlY29yZC50eXBlID0gXCJub3JtYWxcIjtcbiAgICBkZWxldGUgcmVjb3JkLmFyZztcbiAgICBlbnRyeS5jb21wbGV0aW9uID0gcmVjb3JkO1xuICB9XG5cbiAgZnVuY3Rpb24gQ29udGV4dCh0cnlMb2NzTGlzdCkge1xuICAgIC8vIFRoZSByb290IGVudHJ5IG9iamVjdCAoZWZmZWN0aXZlbHkgYSB0cnkgc3RhdGVtZW50IHdpdGhvdXQgYSBjYXRjaFxuICAgIC8vIG9yIGEgZmluYWxseSBibG9jaykgZ2l2ZXMgdXMgYSBwbGFjZSB0byBzdG9yZSB2YWx1ZXMgdGhyb3duIGZyb21cbiAgICAvLyBsb2NhdGlvbnMgd2hlcmUgdGhlcmUgaXMgbm8gZW5jbG9zaW5nIHRyeSBzdGF0ZW1lbnQuXG4gICAgdGhpcy50cnlFbnRyaWVzID0gW3sgdHJ5TG9jOiBcInJvb3RcIiB9XTtcbiAgICB0cnlMb2NzTGlzdC5mb3JFYWNoKHB1c2hUcnlFbnRyeSwgdGhpcyk7XG4gICAgdGhpcy5yZXNldCh0cnVlKTtcbiAgfVxuXG4gIGV4cG9ydHMua2V5cyA9IGZ1bmN0aW9uKG9iamVjdCkge1xuICAgIHZhciBrZXlzID0gW107XG4gICAgZm9yICh2YXIga2V5IGluIG9iamVjdCkge1xuICAgICAga2V5cy5wdXNoKGtleSk7XG4gICAgfVxuICAgIGtleXMucmV2ZXJzZSgpO1xuXG4gICAgLy8gUmF0aGVyIHRoYW4gcmV0dXJuaW5nIGFuIG9iamVjdCB3aXRoIGEgbmV4dCBtZXRob2QsIHdlIGtlZXBcbiAgICAvLyB0aGluZ3Mgc2ltcGxlIGFuZCByZXR1cm4gdGhlIG5leHQgZnVuY3Rpb24gaXRzZWxmLlxuICAgIHJldHVybiBmdW5jdGlvbiBuZXh0KCkge1xuICAgICAgd2hpbGUgKGtleXMubGVuZ3RoKSB7XG4gICAgICAgIHZhciBrZXkgPSBrZXlzLnBvcCgpO1xuICAgICAgICBpZiAoa2V5IGluIG9iamVjdCkge1xuICAgICAgICAgIG5leHQudmFsdWUgPSBrZXk7XG4gICAgICAgICAgbmV4dC5kb25lID0gZmFsc2U7XG4gICAgICAgICAgcmV0dXJuIG5leHQ7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLy8gVG8gYXZvaWQgY3JlYXRpbmcgYW4gYWRkaXRpb25hbCBvYmplY3QsIHdlIGp1c3QgaGFuZyB0aGUgLnZhbHVlXG4gICAgICAvLyBhbmQgLmRvbmUgcHJvcGVydGllcyBvZmYgdGhlIG5leHQgZnVuY3Rpb24gb2JqZWN0IGl0c2VsZi4gVGhpc1xuICAgICAgLy8gYWxzbyBlbnN1cmVzIHRoYXQgdGhlIG1pbmlmaWVyIHdpbGwgbm90IGFub255bWl6ZSB0aGUgZnVuY3Rpb24uXG4gICAgICBuZXh0LmRvbmUgPSB0cnVlO1xuICAgICAgcmV0dXJuIG5leHQ7XG4gICAgfTtcbiAgfTtcblxuICBmdW5jdGlvbiB2YWx1ZXMoaXRlcmFibGUpIHtcbiAgICBpZiAoaXRlcmFibGUpIHtcbiAgICAgIHZhciBpdGVyYXRvck1ldGhvZCA9IGl0ZXJhYmxlW2l0ZXJhdG9yU3ltYm9sXTtcbiAgICAgIGlmIChpdGVyYXRvck1ldGhvZCkge1xuICAgICAgICByZXR1cm4gaXRlcmF0b3JNZXRob2QuY2FsbChpdGVyYWJsZSk7XG4gICAgICB9XG5cbiAgICAgIGlmICh0eXBlb2YgaXRlcmFibGUubmV4dCA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgIHJldHVybiBpdGVyYWJsZTtcbiAgICAgIH1cblxuICAgICAgaWYgKCFpc05hTihpdGVyYWJsZS5sZW5ndGgpKSB7XG4gICAgICAgIHZhciBpID0gLTEsIG5leHQgPSBmdW5jdGlvbiBuZXh0KCkge1xuICAgICAgICAgIHdoaWxlICgrK2kgPCBpdGVyYWJsZS5sZW5ndGgpIHtcbiAgICAgICAgICAgIGlmIChoYXNPd24uY2FsbChpdGVyYWJsZSwgaSkpIHtcbiAgICAgICAgICAgICAgbmV4dC52YWx1ZSA9IGl0ZXJhYmxlW2ldO1xuICAgICAgICAgICAgICBuZXh0LmRvbmUgPSBmYWxzZTtcbiAgICAgICAgICAgICAgcmV0dXJuIG5leHQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgbmV4dC52YWx1ZSA9IHVuZGVmaW5lZDtcbiAgICAgICAgICBuZXh0LmRvbmUgPSB0cnVlO1xuXG4gICAgICAgICAgcmV0dXJuIG5leHQ7XG4gICAgICAgIH07XG5cbiAgICAgICAgcmV0dXJuIG5leHQubmV4dCA9IG5leHQ7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gUmV0dXJuIGFuIGl0ZXJhdG9yIHdpdGggbm8gdmFsdWVzLlxuICAgIHJldHVybiB7IG5leHQ6IGRvbmVSZXN1bHQgfTtcbiAgfVxuICBleHBvcnRzLnZhbHVlcyA9IHZhbHVlcztcblxuICBmdW5jdGlvbiBkb25lUmVzdWx0KCkge1xuICAgIHJldHVybiB7IHZhbHVlOiB1bmRlZmluZWQsIGRvbmU6IHRydWUgfTtcbiAgfVxuXG4gIENvbnRleHQucHJvdG90eXBlID0ge1xuICAgIGNvbnN0cnVjdG9yOiBDb250ZXh0LFxuXG4gICAgcmVzZXQ6IGZ1bmN0aW9uKHNraXBUZW1wUmVzZXQpIHtcbiAgICAgIHRoaXMucHJldiA9IDA7XG4gICAgICB0aGlzLm5leHQgPSAwO1xuICAgICAgLy8gUmVzZXR0aW5nIGNvbnRleHQuX3NlbnQgZm9yIGxlZ2FjeSBzdXBwb3J0IG9mIEJhYmVsJ3NcbiAgICAgIC8vIGZ1bmN0aW9uLnNlbnQgaW1wbGVtZW50YXRpb24uXG4gICAgICB0aGlzLnNlbnQgPSB0aGlzLl9zZW50ID0gdW5kZWZpbmVkO1xuICAgICAgdGhpcy5kb25lID0gZmFsc2U7XG4gICAgICB0aGlzLmRlbGVnYXRlID0gbnVsbDtcblxuICAgICAgdGhpcy5tZXRob2QgPSBcIm5leHRcIjtcbiAgICAgIHRoaXMuYXJnID0gdW5kZWZpbmVkO1xuXG4gICAgICB0aGlzLnRyeUVudHJpZXMuZm9yRWFjaChyZXNldFRyeUVudHJ5KTtcblxuICAgICAgaWYgKCFza2lwVGVtcFJlc2V0KSB7XG4gICAgICAgIGZvciAodmFyIG5hbWUgaW4gdGhpcykge1xuICAgICAgICAgIC8vIE5vdCBzdXJlIGFib3V0IHRoZSBvcHRpbWFsIG9yZGVyIG9mIHRoZXNlIGNvbmRpdGlvbnM6XG4gICAgICAgICAgaWYgKG5hbWUuY2hhckF0KDApID09PSBcInRcIiAmJlxuICAgICAgICAgICAgICBoYXNPd24uY2FsbCh0aGlzLCBuYW1lKSAmJlxuICAgICAgICAgICAgICAhaXNOYU4oK25hbWUuc2xpY2UoMSkpKSB7XG4gICAgICAgICAgICB0aGlzW25hbWVdID0gdW5kZWZpbmVkO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG5cbiAgICBzdG9wOiBmdW5jdGlvbigpIHtcbiAgICAgIHRoaXMuZG9uZSA9IHRydWU7XG5cbiAgICAgIHZhciByb290RW50cnkgPSB0aGlzLnRyeUVudHJpZXNbMF07XG4gICAgICB2YXIgcm9vdFJlY29yZCA9IHJvb3RFbnRyeS5jb21wbGV0aW9uO1xuICAgICAgaWYgKHJvb3RSZWNvcmQudHlwZSA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgIHRocm93IHJvb3RSZWNvcmQuYXJnO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdGhpcy5ydmFsO1xuICAgIH0sXG5cbiAgICBkaXNwYXRjaEV4Y2VwdGlvbjogZnVuY3Rpb24oZXhjZXB0aW9uKSB7XG4gICAgICBpZiAodGhpcy5kb25lKSB7XG4gICAgICAgIHRocm93IGV4Y2VwdGlvbjtcbiAgICAgIH1cblxuICAgICAgdmFyIGNvbnRleHQgPSB0aGlzO1xuICAgICAgZnVuY3Rpb24gaGFuZGxlKGxvYywgY2F1Z2h0KSB7XG4gICAgICAgIHJlY29yZC50eXBlID0gXCJ0aHJvd1wiO1xuICAgICAgICByZWNvcmQuYXJnID0gZXhjZXB0aW9uO1xuICAgICAgICBjb250ZXh0Lm5leHQgPSBsb2M7XG5cbiAgICAgICAgaWYgKGNhdWdodCkge1xuICAgICAgICAgIC8vIElmIHRoZSBkaXNwYXRjaGVkIGV4Y2VwdGlvbiB3YXMgY2F1Z2h0IGJ5IGEgY2F0Y2ggYmxvY2ssXG4gICAgICAgICAgLy8gdGhlbiBsZXQgdGhhdCBjYXRjaCBibG9jayBoYW5kbGUgdGhlIGV4Y2VwdGlvbiBub3JtYWxseS5cbiAgICAgICAgICBjb250ZXh0Lm1ldGhvZCA9IFwibmV4dFwiO1xuICAgICAgICAgIGNvbnRleHQuYXJnID0gdW5kZWZpbmVkO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuICEhIGNhdWdodDtcbiAgICAgIH1cblxuICAgICAgZm9yICh2YXIgaSA9IHRoaXMudHJ5RW50cmllcy5sZW5ndGggLSAxOyBpID49IDA7IC0taSkge1xuICAgICAgICB2YXIgZW50cnkgPSB0aGlzLnRyeUVudHJpZXNbaV07XG4gICAgICAgIHZhciByZWNvcmQgPSBlbnRyeS5jb21wbGV0aW9uO1xuXG4gICAgICAgIGlmIChlbnRyeS50cnlMb2MgPT09IFwicm9vdFwiKSB7XG4gICAgICAgICAgLy8gRXhjZXB0aW9uIHRocm93biBvdXRzaWRlIG9mIGFueSB0cnkgYmxvY2sgdGhhdCBjb3VsZCBoYW5kbGVcbiAgICAgICAgICAvLyBpdCwgc28gc2V0IHRoZSBjb21wbGV0aW9uIHZhbHVlIG9mIHRoZSBlbnRpcmUgZnVuY3Rpb24gdG9cbiAgICAgICAgICAvLyB0aHJvdyB0aGUgZXhjZXB0aW9uLlxuICAgICAgICAgIHJldHVybiBoYW5kbGUoXCJlbmRcIik7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoZW50cnkudHJ5TG9jIDw9IHRoaXMucHJldikge1xuICAgICAgICAgIHZhciBoYXNDYXRjaCA9IGhhc093bi5jYWxsKGVudHJ5LCBcImNhdGNoTG9jXCIpO1xuICAgICAgICAgIHZhciBoYXNGaW5hbGx5ID0gaGFzT3duLmNhbGwoZW50cnksIFwiZmluYWxseUxvY1wiKTtcblxuICAgICAgICAgIGlmIChoYXNDYXRjaCAmJiBoYXNGaW5hbGx5KSB7XG4gICAgICAgICAgICBpZiAodGhpcy5wcmV2IDwgZW50cnkuY2F0Y2hMb2MpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGhhbmRsZShlbnRyeS5jYXRjaExvYywgdHJ1ZSk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHRoaXMucHJldiA8IGVudHJ5LmZpbmFsbHlMb2MpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGhhbmRsZShlbnRyeS5maW5hbGx5TG9jKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgIH0gZWxzZSBpZiAoaGFzQ2F0Y2gpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLnByZXYgPCBlbnRyeS5jYXRjaExvYykge1xuICAgICAgICAgICAgICByZXR1cm4gaGFuZGxlKGVudHJ5LmNhdGNoTG9jLCB0cnVlKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgIH0gZWxzZSBpZiAoaGFzRmluYWxseSkge1xuICAgICAgICAgICAgaWYgKHRoaXMucHJldiA8IGVudHJ5LmZpbmFsbHlMb2MpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGhhbmRsZShlbnRyeS5maW5hbGx5TG9jKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJ0cnkgc3RhdGVtZW50IHdpdGhvdXQgY2F0Y2ggb3IgZmluYWxseVwiKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuXG4gICAgYWJydXB0OiBmdW5jdGlvbih0eXBlLCBhcmcpIHtcbiAgICAgIGZvciAodmFyIGkgPSB0aGlzLnRyeUVudHJpZXMubGVuZ3RoIC0gMTsgaSA+PSAwOyAtLWkpIHtcbiAgICAgICAgdmFyIGVudHJ5ID0gdGhpcy50cnlFbnRyaWVzW2ldO1xuICAgICAgICBpZiAoZW50cnkudHJ5TG9jIDw9IHRoaXMucHJldiAmJlxuICAgICAgICAgICAgaGFzT3duLmNhbGwoZW50cnksIFwiZmluYWxseUxvY1wiKSAmJlxuICAgICAgICAgICAgdGhpcy5wcmV2IDwgZW50cnkuZmluYWxseUxvYykge1xuICAgICAgICAgIHZhciBmaW5hbGx5RW50cnkgPSBlbnRyeTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAoZmluYWxseUVudHJ5ICYmXG4gICAgICAgICAgKHR5cGUgPT09IFwiYnJlYWtcIiB8fFxuICAgICAgICAgICB0eXBlID09PSBcImNvbnRpbnVlXCIpICYmXG4gICAgICAgICAgZmluYWxseUVudHJ5LnRyeUxvYyA8PSBhcmcgJiZcbiAgICAgICAgICBhcmcgPD0gZmluYWxseUVudHJ5LmZpbmFsbHlMb2MpIHtcbiAgICAgICAgLy8gSWdub3JlIHRoZSBmaW5hbGx5IGVudHJ5IGlmIGNvbnRyb2wgaXMgbm90IGp1bXBpbmcgdG8gYVxuICAgICAgICAvLyBsb2NhdGlvbiBvdXRzaWRlIHRoZSB0cnkvY2F0Y2ggYmxvY2suXG4gICAgICAgIGZpbmFsbHlFbnRyeSA9IG51bGw7XG4gICAgICB9XG5cbiAgICAgIHZhciByZWNvcmQgPSBmaW5hbGx5RW50cnkgPyBmaW5hbGx5RW50cnkuY29tcGxldGlvbiA6IHt9O1xuICAgICAgcmVjb3JkLnR5cGUgPSB0eXBlO1xuICAgICAgcmVjb3JkLmFyZyA9IGFyZztcblxuICAgICAgaWYgKGZpbmFsbHlFbnRyeSkge1xuICAgICAgICB0aGlzLm1ldGhvZCA9IFwibmV4dFwiO1xuICAgICAgICB0aGlzLm5leHQgPSBmaW5hbGx5RW50cnkuZmluYWxseUxvYztcbiAgICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0aGlzLmNvbXBsZXRlKHJlY29yZCk7XG4gICAgfSxcblxuICAgIGNvbXBsZXRlOiBmdW5jdGlvbihyZWNvcmQsIGFmdGVyTG9jKSB7XG4gICAgICBpZiAocmVjb3JkLnR5cGUgPT09IFwidGhyb3dcIikge1xuICAgICAgICB0aHJvdyByZWNvcmQuYXJnO1xuICAgICAgfVxuXG4gICAgICBpZiAocmVjb3JkLnR5cGUgPT09IFwiYnJlYWtcIiB8fFxuICAgICAgICAgIHJlY29yZC50eXBlID09PSBcImNvbnRpbnVlXCIpIHtcbiAgICAgICAgdGhpcy5uZXh0ID0gcmVjb3JkLmFyZztcbiAgICAgIH0gZWxzZSBpZiAocmVjb3JkLnR5cGUgPT09IFwicmV0dXJuXCIpIHtcbiAgICAgICAgdGhpcy5ydmFsID0gdGhpcy5hcmcgPSByZWNvcmQuYXJnO1xuICAgICAgICB0aGlzLm1ldGhvZCA9IFwicmV0dXJuXCI7XG4gICAgICAgIHRoaXMubmV4dCA9IFwiZW5kXCI7XG4gICAgICB9IGVsc2UgaWYgKHJlY29yZC50eXBlID09PSBcIm5vcm1hbFwiICYmIGFmdGVyTG9jKSB7XG4gICAgICAgIHRoaXMubmV4dCA9IGFmdGVyTG9jO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgICB9LFxuXG4gICAgZmluaXNoOiBmdW5jdGlvbihmaW5hbGx5TG9jKSB7XG4gICAgICBmb3IgKHZhciBpID0gdGhpcy50cnlFbnRyaWVzLmxlbmd0aCAtIDE7IGkgPj0gMDsgLS1pKSB7XG4gICAgICAgIHZhciBlbnRyeSA9IHRoaXMudHJ5RW50cmllc1tpXTtcbiAgICAgICAgaWYgKGVudHJ5LmZpbmFsbHlMb2MgPT09IGZpbmFsbHlMb2MpIHtcbiAgICAgICAgICB0aGlzLmNvbXBsZXRlKGVudHJ5LmNvbXBsZXRpb24sIGVudHJ5LmFmdGVyTG9jKTtcbiAgICAgICAgICByZXNldFRyeUVudHJ5KGVudHJ5KTtcbiAgICAgICAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG5cbiAgICBcImNhdGNoXCI6IGZ1bmN0aW9uKHRyeUxvYykge1xuICAgICAgZm9yICh2YXIgaSA9IHRoaXMudHJ5RW50cmllcy5sZW5ndGggLSAxOyBpID49IDA7IC0taSkge1xuICAgICAgICB2YXIgZW50cnkgPSB0aGlzLnRyeUVudHJpZXNbaV07XG4gICAgICAgIGlmIChlbnRyeS50cnlMb2MgPT09IHRyeUxvYykge1xuICAgICAgICAgIHZhciByZWNvcmQgPSBlbnRyeS5jb21wbGV0aW9uO1xuICAgICAgICAgIGlmIChyZWNvcmQudHlwZSA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgICAgICB2YXIgdGhyb3duID0gcmVjb3JkLmFyZztcbiAgICAgICAgICAgIHJlc2V0VHJ5RW50cnkoZW50cnkpO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gdGhyb3duO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8vIFRoZSBjb250ZXh0LmNhdGNoIG1ldGhvZCBtdXN0IG9ubHkgYmUgY2FsbGVkIHdpdGggYSBsb2NhdGlvblxuICAgICAgLy8gYXJndW1lbnQgdGhhdCBjb3JyZXNwb25kcyB0byBhIGtub3duIGNhdGNoIGJsb2NrLlxuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiaWxsZWdhbCBjYXRjaCBhdHRlbXB0XCIpO1xuICAgIH0sXG5cbiAgICBkZWxlZ2F0ZVlpZWxkOiBmdW5jdGlvbihpdGVyYWJsZSwgcmVzdWx0TmFtZSwgbmV4dExvYykge1xuICAgICAgdGhpcy5kZWxlZ2F0ZSA9IHtcbiAgICAgICAgaXRlcmF0b3I6IHZhbHVlcyhpdGVyYWJsZSksXG4gICAgICAgIHJlc3VsdE5hbWU6IHJlc3VsdE5hbWUsXG4gICAgICAgIG5leHRMb2M6IG5leHRMb2NcbiAgICAgIH07XG5cbiAgICAgIGlmICh0aGlzLm1ldGhvZCA9PT0gXCJuZXh0XCIpIHtcbiAgICAgICAgLy8gRGVsaWJlcmF0ZWx5IGZvcmdldCB0aGUgbGFzdCBzZW50IHZhbHVlIHNvIHRoYXQgd2UgZG9uJ3RcbiAgICAgICAgLy8gYWNjaWRlbnRhbGx5IHBhc3MgaXQgb24gdG8gdGhlIGRlbGVnYXRlLlxuICAgICAgICB0aGlzLmFyZyA9IHVuZGVmaW5lZDtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gICAgfVxuICB9O1xuXG4gIC8vIFJlZ2FyZGxlc3Mgb2Ygd2hldGhlciB0aGlzIHNjcmlwdCBpcyBleGVjdXRpbmcgYXMgYSBDb21tb25KUyBtb2R1bGVcbiAgLy8gb3Igbm90LCByZXR1cm4gdGhlIHJ1bnRpbWUgb2JqZWN0IHNvIHRoYXQgd2UgY2FuIGRlY2xhcmUgdGhlIHZhcmlhYmxlXG4gIC8vIHJlZ2VuZXJhdG9yUnVudGltZSBpbiB0aGUgb3V0ZXIgc2NvcGUsIHdoaWNoIGFsbG93cyB0aGlzIG1vZHVsZSB0byBiZVxuICAvLyBpbmplY3RlZCBlYXNpbHkgYnkgYGJpbi9yZWdlbmVyYXRvciAtLWluY2x1ZGUtcnVudGltZSBzY3JpcHQuanNgLlxuICByZXR1cm4gZXhwb3J0cztcblxufShcbiAgLy8gSWYgdGhpcyBzY3JpcHQgaXMgZXhlY3V0aW5nIGFzIGEgQ29tbW9uSlMgbW9kdWxlLCB1c2UgbW9kdWxlLmV4cG9ydHNcbiAgLy8gYXMgdGhlIHJlZ2VuZXJhdG9yUnVudGltZSBuYW1lc3BhY2UuIE90aGVyd2lzZSBjcmVhdGUgYSBuZXcgZW1wdHlcbiAgLy8gb2JqZWN0LiBFaXRoZXIgd2F5LCB0aGUgcmVzdWx0aW5nIG9iamVjdCB3aWxsIGJlIHVzZWQgdG8gaW5pdGlhbGl6ZVxuICAvLyB0aGUgcmVnZW5lcmF0b3JSdW50aW1lIHZhcmlhYmxlIGF0IHRoZSB0b3Agb2YgdGhpcyBmaWxlLlxuICB0eXBlb2YgbW9kdWxlID09PSBcIm9iamVjdFwiID8gbW9kdWxlLmV4cG9ydHMgOiB7fVxuKSk7XG5cbnRyeSB7XG4gIHJlZ2VuZXJhdG9yUnVudGltZSA9IHJ1bnRpbWU7XG59IGNhdGNoIChhY2NpZGVudGFsU3RyaWN0TW9kZSkge1xuICAvLyBUaGlzIG1vZHVsZSBzaG91bGQgbm90IGJlIHJ1bm5pbmcgaW4gc3RyaWN0IG1vZGUsIHNvIHRoZSBhYm92ZVxuICAvLyBhc3NpZ25tZW50IHNob3VsZCBhbHdheXMgd29yayB1bmxlc3Mgc29tZXRoaW5nIGlzIG1pc2NvbmZpZ3VyZWQuIEp1c3RcbiAgLy8gaW4gY2FzZSBydW50aW1lLmpzIGFjY2lkZW50YWxseSBydW5zIGluIHN0cmljdCBtb2RlLCB3ZSBjYW4gZXNjYXBlXG4gIC8vIHN0cmljdCBtb2RlIHVzaW5nIGEgZ2xvYmFsIEZ1bmN0aW9uIGNhbGwuIFRoaXMgY291bGQgY29uY2VpdmFibHkgZmFpbFxuICAvLyBpZiBhIENvbnRlbnQgU2VjdXJpdHkgUG9saWN5IGZvcmJpZHMgdXNpbmcgRnVuY3Rpb24sIGJ1dCBpbiB0aGF0IGNhc2VcbiAgLy8gdGhlIHByb3BlciBzb2x1dGlvbiBpcyB0byBmaXggdGhlIGFjY2lkZW50YWwgc3RyaWN0IG1vZGUgcHJvYmxlbS4gSWZcbiAgLy8geW91J3ZlIG1pc2NvbmZpZ3VyZWQgeW91ciBidW5kbGVyIHRvIGZvcmNlIHN0cmljdCBtb2RlIGFuZCBhcHBsaWVkIGFcbiAgLy8gQ1NQIHRvIGZvcmJpZCBGdW5jdGlvbiwgYW5kIHlvdSdyZSBub3Qgd2lsbGluZyB0byBmaXggZWl0aGVyIG9mIHRob3NlXG4gIC8vIHByb2JsZW1zLCBwbGVhc2UgZGV0YWlsIHlvdXIgdW5pcXVlIHByZWRpY2FtZW50IGluIGEgR2l0SHViIGlzc3VlLlxuICBGdW5jdGlvbihcInJcIiwgXCJyZWdlbmVyYXRvclJ1bnRpbWUgPSByXCIpKHJ1bnRpbWUpO1xufVxuIiwicmVxdWlyZSgnLi4vbW9kdWxlcy9lczcuZ2xvYmFsJyk7XG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4uL21vZHVsZXMvX2NvcmUnKS5nbG9iYWw7XG4iLCIvLyBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9wcm9wb3NhbC1nbG9iYWxcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5HLCB7IGdsb2JhbDogcmVxdWlyZSgnLi9fZ2xvYmFsJykgfSk7XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi9fZ2xvYmFsJyk7XG52YXIgY29yZSA9IHJlcXVpcmUoJy4vX2NvcmUnKTtcbnZhciBjdHggPSByZXF1aXJlKCcuL19jdHgnKTtcbnZhciBoaWRlID0gcmVxdWlyZSgnLi9faGlkZScpO1xudmFyIGhhcyA9IHJlcXVpcmUoJy4vX2hhcycpO1xudmFyIFBST1RPVFlQRSA9ICdwcm90b3R5cGUnO1xuXG52YXIgJGV4cG9ydCA9IGZ1bmN0aW9uICh0eXBlLCBuYW1lLCBzb3VyY2UpIHtcbiAgdmFyIElTX0ZPUkNFRCA9IHR5cGUgJiAkZXhwb3J0LkY7XG4gIHZhciBJU19HTE9CQUwgPSB0eXBlICYgJGV4cG9ydC5HO1xuICB2YXIgSVNfU1RBVElDID0gdHlwZSAmICRleHBvcnQuUztcbiAgdmFyIElTX1BST1RPID0gdHlwZSAmICRleHBvcnQuUDtcbiAgdmFyIElTX0JJTkQgPSB0eXBlICYgJGV4cG9ydC5CO1xuICB2YXIgSVNfV1JBUCA9IHR5cGUgJiAkZXhwb3J0Llc7XG4gIHZhciBleHBvcnRzID0gSVNfR0xPQkFMID8gY29yZSA6IGNvcmVbbmFtZV0gfHwgKGNvcmVbbmFtZV0gPSB7fSk7XG4gIHZhciBleHBQcm90byA9IGV4cG9ydHNbUFJPVE9UWVBFXTtcbiAgdmFyIHRhcmdldCA9IElTX0dMT0JBTCA/IGdsb2JhbCA6IElTX1NUQVRJQyA/IGdsb2JhbFtuYW1lXSA6IChnbG9iYWxbbmFtZV0gfHwge30pW1BST1RPVFlQRV07XG4gIHZhciBrZXksIG93biwgb3V0O1xuICBpZiAoSVNfR0xPQkFMKSBzb3VyY2UgPSBuYW1lO1xuICBmb3IgKGtleSBpbiBzb3VyY2UpIHtcbiAgICAvLyBjb250YWlucyBpbiBuYXRpdmVcbiAgICBvd24gPSAhSVNfRk9SQ0VEICYmIHRhcmdldCAmJiB0YXJnZXRba2V5XSAhPT0gdW5kZWZpbmVkO1xuICAgIGlmIChvd24gJiYgaGFzKGV4cG9ydHMsIGtleSkpIGNvbnRpbnVlO1xuICAgIC8vIGV4cG9ydCBuYXRpdmUgb3IgcGFzc2VkXG4gICAgb3V0ID0gb3duID8gdGFyZ2V0W2tleV0gOiBzb3VyY2Vba2V5XTtcbiAgICAvLyBwcmV2ZW50IGdsb2JhbCBwb2xsdXRpb24gZm9yIG5hbWVzcGFjZXNcbiAgICBleHBvcnRzW2tleV0gPSBJU19HTE9CQUwgJiYgdHlwZW9mIHRhcmdldFtrZXldICE9ICdmdW5jdGlvbicgPyBzb3VyY2Vba2V5XVxuICAgIC8vIGJpbmQgdGltZXJzIHRvIGdsb2JhbCBmb3IgY2FsbCBmcm9tIGV4cG9ydCBjb250ZXh0XG4gICAgOiBJU19CSU5EICYmIG93biA/IGN0eChvdXQsIGdsb2JhbClcbiAgICAvLyB3cmFwIGdsb2JhbCBjb25zdHJ1Y3RvcnMgZm9yIHByZXZlbnQgY2hhbmdlIHRoZW0gaW4gbGlicmFyeVxuICAgIDogSVNfV1JBUCAmJiB0YXJnZXRba2V5XSA9PSBvdXQgPyAoZnVuY3Rpb24gKEMpIHtcbiAgICAgIHZhciBGID0gZnVuY3Rpb24gKGEsIGIsIGMpIHtcbiAgICAgICAgaWYgKHRoaXMgaW5zdGFuY2VvZiBDKSB7XG4gICAgICAgICAgc3dpdGNoIChhcmd1bWVudHMubGVuZ3RoKSB7XG4gICAgICAgICAgICBjYXNlIDA6IHJldHVybiBuZXcgQygpO1xuICAgICAgICAgICAgY2FzZSAxOiByZXR1cm4gbmV3IEMoYSk7XG4gICAgICAgICAgICBjYXNlIDI6IHJldHVybiBuZXcgQyhhLCBiKTtcbiAgICAgICAgICB9IHJldHVybiBuZXcgQyhhLCBiLCBjKTtcbiAgICAgICAgfSByZXR1cm4gQy5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgICAgfTtcbiAgICAgIEZbUFJPVE9UWVBFXSA9IENbUFJPVE9UWVBFXTtcbiAgICAgIHJldHVybiBGO1xuICAgIC8vIG1ha2Ugc3RhdGljIHZlcnNpb25zIGZvciBwcm90b3R5cGUgbWV0aG9kc1xuICAgIH0pKG91dCkgOiBJU19QUk9UTyAmJiB0eXBlb2Ygb3V0ID09ICdmdW5jdGlvbicgPyBjdHgoRnVuY3Rpb24uY2FsbCwgb3V0KSA6IG91dDtcbiAgICAvLyBleHBvcnQgcHJvdG8gbWV0aG9kcyB0byBjb3JlLiVDT05TVFJVQ1RPUiUubWV0aG9kcy4lTkFNRSVcbiAgICBpZiAoSVNfUFJPVE8pIHtcbiAgICAgIChleHBvcnRzLnZpcnR1YWwgfHwgKGV4cG9ydHMudmlydHVhbCA9IHt9KSlba2V5XSA9IG91dDtcbiAgICAgIC8vIGV4cG9ydCBwcm90byBtZXRob2RzIHRvIGNvcmUuJUNPTlNUUlVDVE9SJS5wcm90b3R5cGUuJU5BTUUlXG4gICAgICBpZiAodHlwZSAmICRleHBvcnQuUiAmJiBleHBQcm90byAmJiAhZXhwUHJvdG9ba2V5XSkgaGlkZShleHBQcm90bywga2V5LCBvdXQpO1xuICAgIH1cbiAgfVxufTtcbi8vIHR5cGUgYml0bWFwXG4kZXhwb3J0LkYgPSAxOyAgIC8vIGZvcmNlZFxuJGV4cG9ydC5HID0gMjsgICAvLyBnbG9iYWxcbiRleHBvcnQuUyA9IDQ7ICAgLy8gc3RhdGljXG4kZXhwb3J0LlAgPSA4OyAgIC8vIHByb3RvXG4kZXhwb3J0LkIgPSAxNjsgIC8vIGJpbmRcbiRleHBvcnQuVyA9IDMyOyAgLy8gd3JhcFxuJGV4cG9ydC5VID0gNjQ7ICAvLyBzYWZlXG4kZXhwb3J0LlIgPSAxMjg7IC8vIHJlYWwgcHJvdG8gbWV0aG9kIGZvciBgbGlicmFyeWBcbm1vZHVsZS5leHBvcnRzID0gJGV4cG9ydDtcbiIsIi8vIG9wdGlvbmFsIC8gc2ltcGxlIGNvbnRleHQgYmluZGluZ1xudmFyIGFGdW5jdGlvbiA9IHJlcXVpcmUoJy4vX2EtZnVuY3Rpb24nKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGZuLCB0aGF0LCBsZW5ndGgpIHtcbiAgYUZ1bmN0aW9uKGZuKTtcbiAgaWYgKHRoYXQgPT09IHVuZGVmaW5lZCkgcmV0dXJuIGZuO1xuICBzd2l0Y2ggKGxlbmd0aCkge1xuICAgIGNhc2UgMTogcmV0dXJuIGZ1bmN0aW9uIChhKSB7XG4gICAgICByZXR1cm4gZm4uY2FsbCh0aGF0LCBhKTtcbiAgICB9O1xuICAgIGNhc2UgMjogcmV0dXJuIGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgICByZXR1cm4gZm4uY2FsbCh0aGF0LCBhLCBiKTtcbiAgICB9O1xuICAgIGNhc2UgMzogcmV0dXJuIGZ1bmN0aW9uIChhLCBiLCBjKSB7XG4gICAgICByZXR1cm4gZm4uY2FsbCh0aGF0LCBhLCBiLCBjKTtcbiAgICB9O1xuICB9XG4gIHJldHVybiBmdW5jdGlvbiAoLyogLi4uYXJncyAqLykge1xuICAgIHJldHVybiBmbi5hcHBseSh0aGF0LCBhcmd1bWVudHMpO1xuICB9O1xufTtcbiIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIGlmICh0eXBlb2YgaXQgIT0gJ2Z1bmN0aW9uJykgdGhyb3cgVHlwZUVycm9yKGl0ICsgJyBpcyBub3QgYSBmdW5jdGlvbiEnKTtcbiAgcmV0dXJuIGl0O1xufTtcbiIsInZhciBkUCA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpO1xudmFyIGNyZWF0ZURlc2MgPSByZXF1aXJlKCcuL19wcm9wZXJ0eS1kZXNjJyk7XG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJykgPyBmdW5jdGlvbiAob2JqZWN0LCBrZXksIHZhbHVlKSB7XG4gIHJldHVybiBkUC5mKG9iamVjdCwga2V5LCBjcmVhdGVEZXNjKDEsIHZhbHVlKSk7XG59IDogZnVuY3Rpb24gKG9iamVjdCwga2V5LCB2YWx1ZSkge1xuICBvYmplY3Rba2V5XSA9IHZhbHVlO1xuICByZXR1cm4gb2JqZWN0O1xufTtcbiIsInZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIElFOF9ET01fREVGSU5FID0gcmVxdWlyZSgnLi9faWU4LWRvbS1kZWZpbmUnKTtcbnZhciB0b1ByaW1pdGl2ZSA9IHJlcXVpcmUoJy4vX3RvLXByaW1pdGl2ZScpO1xudmFyIGRQID0gT2JqZWN0LmRlZmluZVByb3BlcnR5O1xuXG5leHBvcnRzLmYgPSByZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpID8gT2JqZWN0LmRlZmluZVByb3BlcnR5IDogZnVuY3Rpb24gZGVmaW5lUHJvcGVydHkoTywgUCwgQXR0cmlidXRlcykge1xuICBhbk9iamVjdChPKTtcbiAgUCA9IHRvUHJpbWl0aXZlKFAsIHRydWUpO1xuICBhbk9iamVjdChBdHRyaWJ1dGVzKTtcbiAgaWYgKElFOF9ET01fREVGSU5FKSB0cnkge1xuICAgIHJldHVybiBkUChPLCBQLCBBdHRyaWJ1dGVzKTtcbiAgfSBjYXRjaCAoZSkgeyAvKiBlbXB0eSAqLyB9XG4gIGlmICgnZ2V0JyBpbiBBdHRyaWJ1dGVzIHx8ICdzZXQnIGluIEF0dHJpYnV0ZXMpIHRocm93IFR5cGVFcnJvcignQWNjZXNzb3JzIG5vdCBzdXBwb3J0ZWQhJyk7XG4gIGlmICgndmFsdWUnIGluIEF0dHJpYnV0ZXMpIE9bUF0gPSBBdHRyaWJ1dGVzLnZhbHVlO1xuICByZXR1cm4gTztcbn07XG4iLCJ2YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIGlmICghaXNPYmplY3QoaXQpKSB0aHJvdyBUeXBlRXJyb3IoaXQgKyAnIGlzIG5vdCBhbiBvYmplY3QhJyk7XG4gIHJldHVybiBpdDtcbn07XG4iLCJtb2R1bGUuZXhwb3J0cyA9ICFyZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpICYmICFyZXF1aXJlKCcuL19mYWlscycpKGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShyZXF1aXJlKCcuL19kb20tY3JlYXRlJykoJ2RpdicpLCAnYScsIHsgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiA3OyB9IH0pLmEgIT0gNztcbn0pO1xuIiwidmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG52YXIgZG9jdW1lbnQgPSByZXF1aXJlKCcuL19nbG9iYWwnKS5kb2N1bWVudDtcbi8vIHR5cGVvZiBkb2N1bWVudC5jcmVhdGVFbGVtZW50IGlzICdvYmplY3QnIGluIG9sZCBJRVxudmFyIGlzID0gaXNPYmplY3QoZG9jdW1lbnQpICYmIGlzT2JqZWN0KGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIGlzID8gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChpdCkgOiB7fTtcbn07XG4iLCIvLyA3LjEuMSBUb1ByaW1pdGl2ZShpbnB1dCBbLCBQcmVmZXJyZWRUeXBlXSlcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xuLy8gaW5zdGVhZCBvZiB0aGUgRVM2IHNwZWMgdmVyc2lvbiwgd2UgZGlkbid0IGltcGxlbWVudCBAQHRvUHJpbWl0aXZlIGNhc2Vcbi8vIGFuZCB0aGUgc2Vjb25kIGFyZ3VtZW50IC0gZmxhZyAtIHByZWZlcnJlZCB0eXBlIGlzIGEgc3RyaW5nXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCwgUykge1xuICBpZiAoIWlzT2JqZWN0KGl0KSkgcmV0dXJuIGl0O1xuICB2YXIgZm4sIHZhbDtcbiAgaWYgKFMgJiYgdHlwZW9mIChmbiA9IGl0LnRvU3RyaW5nKSA9PSAnZnVuY3Rpb24nICYmICFpc09iamVjdCh2YWwgPSBmbi5jYWxsKGl0KSkpIHJldHVybiB2YWw7XG4gIGlmICh0eXBlb2YgKGZuID0gaXQudmFsdWVPZikgPT0gJ2Z1bmN0aW9uJyAmJiAhaXNPYmplY3QodmFsID0gZm4uY2FsbChpdCkpKSByZXR1cm4gdmFsO1xuICBpZiAoIVMgJiYgdHlwZW9mIChmbiA9IGl0LnRvU3RyaW5nKSA9PSAnZnVuY3Rpb24nICYmICFpc09iamVjdCh2YWwgPSBmbi5jYWxsKGl0KSkpIHJldHVybiB2YWw7XG4gIHRocm93IFR5cGVFcnJvcihcIkNhbid0IGNvbnZlcnQgb2JqZWN0IHRvIHByaW1pdGl2ZSB2YWx1ZVwiKTtcbn07XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChiaXRtYXAsIHZhbHVlKSB7XG4gIHJldHVybiB7XG4gICAgZW51bWVyYWJsZTogIShiaXRtYXAgJiAxKSxcbiAgICBjb25maWd1cmFibGU6ICEoYml0bWFwICYgMiksXG4gICAgd3JpdGFibGU6ICEoYml0bWFwICYgNCksXG4gICAgdmFsdWU6IHZhbHVlXG4gIH07XG59O1xuIiwidmFyIGhhc093blByb3BlcnR5ID0ge30uaGFzT3duUHJvcGVydHk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCwga2V5KSB7XG4gIHJldHVybiBoYXNPd25Qcm9wZXJ0eS5jYWxsKGl0LCBrZXkpO1xufTtcbiIsImltcG9ydCB7c3Vic2NyaWJlVXNlciwgc3Vic2NyaWJlSWR9IGZyb20gJy4vc3RvcmFnZS5qcydcbmltcG9ydCB7Z2V0RnVsbElEc0Zyb21VUkx9IGZyb20gJy4vY29tbW9uLmpzJ1xuaW1wb3J0IHtzZXRDdXJyZW50U3RhdGVGb3JJZH0gZnJvbSAnLi9tb25pdG9yaW5nLmpzJ1xuaW1wb3J0IGJyb3dzZXIgZnJvbSAnd2ViZXh0ZW5zaW9uLXBvbHlmaWxsJ1xuXG5jb25zdCByZWdleF9jb21tZW50ID0gL15cXC9yXFwvW14vXStcXC9jb21tZW50c1xcL1teL10rXFwvW14vXSpcXC8oW14vXSspL1xuY29uc3QgcmVnZXhfcG9zdCA9IC9eXFwvclxcL1teL10rXFwvY29tbWVudHNcXC8oW14vXSspXFwvW14vXSpcXC8/L1xuY29uc3QgcmVnZXhfdXNlciA9IC9eXFwvdXNlclxcLyhbXi9dKylcXC8/L1xuXG5leHBvcnQgY29uc3Qgc2V0dXBDb250ZXh0dWFsTWVudSA9ICgpID0+IHtcbiAgICBjb25zdCBjb250ZXh0TWVudV9pZCA9ICdyZXZlZGRpdC1zdWJzY3JpYmUnXG4gICAgY2hyb21lLmNvbnRleHRNZW51cy5yZW1vdmVBbGwoKCkgPT4ge1xuICAgICAgICBjaHJvbWUuY29udGV4dE1lbnVzLmNyZWF0ZSh7XG4gICAgICAgICAgICBpZDogY29udGV4dE1lbnVfaWQsXG4gICAgICAgICAgICB0aXRsZTogJ3JldmVkZGl0IHN1YnNjcmliZScsXG4gICAgICAgICAgICBjb250ZXh0czogWydsaW5rJ10sXG4gICAgICAgICAgICB0YXJnZXRVcmxQYXR0ZXJuczogWydodHRwczovLyoucmVkZGl0LmNvbS9yLyovY29tbWVudHMvKicsICdodHRwczovL3d3dy5yZXZlZGRpdC5jb20vci8qL2NvbW1lbnRzLyonLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnaHR0cHM6Ly8qLnJlZGRpdC5jb20vdXNlci8qJywgJ2h0dHBzOi8vd3d3LnJldmVkZGl0LmNvbS91c2VyLyonXVxuICAgICAgICB9KVxuICAgIH0pXG4gICAgY2hyb21lLmNvbnRleHRNZW51cy5vbkNsaWNrZWQuYWRkTGlzdGVuZXIoZnVuY3Rpb24oaW5mbywgdGFiKSB7XG4gICAgICAgIGlmIChpbmZvLm1lbnVJdGVtSWQgPT0gY29udGV4dE1lbnVfaWQpIHtcbiAgICAgICAgICAgIGNvbnN0IHVybCA9IGluZm8ubGlua1VybFxuICAgICAgICAgICAgY29uc3QgdGV4dCA9ICdsaW5rJ1xuICAgICAgICAgICAgY29uc3QgW3Bvc3RJRCwgY29tbWVudElELCB1c2VyXSA9IGdldEZ1bGxJRHNGcm9tVVJMKHVybClcbiAgICAgICAgICAgIGlmIChjb21tZW50SUQpIHtcbiAgICAgICAgICAgICAgICBzdWJzY3JpYmVJZChjb21tZW50SUQpXG4gICAgICAgICAgICAgICAgc2V0Q3VycmVudFN0YXRlRm9ySWQoY29tbWVudElELCB1cmwpXG4gICAgICAgICAgICB9IGVsc2UgaWYgKHBvc3RJRCkge1xuICAgICAgICAgICAgICAgIHN1YnNjcmliZUlkKHBvc3RJRClcbiAgICAgICAgICAgICAgICBzZXRDdXJyZW50U3RhdGVGb3JJZChwb3N0SUQsIHVybClcbiAgICAgICAgICAgIH0gZWxzZSBpZiAodXNlcikge1xuICAgICAgICAgICAgICAgIHN1YnNjcmliZVVzZXIodXNlcilcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgYWxlcnQoYFVuYWJsZSB0byBzdWJzY3JpYmUgdG8gdGhpcyAke3RleHR9LCBpdCBpcyBub3QgYSBjb21tZW50LCBwb3N0IG9yIHVzZXIuXFxuXFxuJHt1cmx9YClcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0pO1xufVxuIiwiaW1wb3J0IHtnb1RvT3B0aW9ucywgc2V0QWxhcm0sIEFMQVJNX05BTUUsXG4gICAgICAgIGNyZWF0ZU5vdGlmaWNhdGlvbiwgdXBkYXRlQmFkZ2VVbnNlZW5Db3VudCwgY3JlYXRlVGFiIH0gZnJvbSAnLi9zcmMvY29tbW9uLmpzJ1xuaW1wb3J0IHtjaGVja0ZvckNoYW5nZXN9IGZyb20gJy4vc3JjL21vbml0b3JpbmcuanMnXG5pbXBvcnQge2xvb2t1cEl0ZW1zQnlJRCwgZ2V0TG9nZ2VkaW5Vc2VyLCBnZXRDb29raWUsIGdldEF1dGh9IGZyb20gJy4vc3JjL3JlcXVlc3RzLmpzJ1xuaW1wb3J0IHtpbml0U3RvcmFnZSwgSU5URVJWQUxfREVGQVVMVCwgc3Vic2NyaWJlVXNlcixcbiAgICAgICAgZ2V0VW5zZWVuSURzX3RoaW5nLCBtYXJrVGhpbmdBc1NlZW4gfSBmcm9tICcuL3NyYy9zdG9yYWdlLmpzJ1xuaW1wb3J0IHtzZXR1cENvbnRleHR1YWxNZW51fSBmcm9tICcuL3NyYy9jb250ZXh0TWVudXMuanMnXG5pbXBvcnQgYnJvd3NlciBmcm9tICd3ZWJleHRlbnNpb24tcG9seWZpbGwnXG5cbnNldHVwQ29udGV4dHVhbE1lbnUoKVxuXG5cbi8vIEJFR0lOIHdlYlJlcXVlc3QgQVBJIGNvZGVcbi8vIFdoZW4gbWFuaWZlc3QgdjMgZ29lcyBsaXZlLCB0aGlzIGNvZGUgc2hvdWxkIG9ubHkgcnVuIGZvciBmaXJlZm94XG4vLyBJdCBlbmFibGVzIHZpZXdpbmcgcXVhcmFudGluZWQgY29udGVudCBvbiByZXZlZGRpdCAoZXhjZXB0IHVzZXIgcGFnZXMgd2hpY2ggYXJlIGNvdmVyZWQgd2l0aCBjbG91ZGZsYXJlIHdvcmtlcnMpXG5cbi8vIENhbiB1c2UgdGhpcyB0byBjaGVjayBmb3IgZmlyZWZveCBidWlsZDpcbmlmIChfX0JVSUxUX0ZPUl9fICE9PSAnY2hyb21lJykge1xuICAgIGNvbnN0IG9wdF9leHRyYUluZm9TcGVjID0gWydyZXF1ZXN0SGVhZGVycycsICdibG9ja2luZyddXG5cbiAgICBicm93c2VyLndlYlJlcXVlc3Qub25CZWZvcmVTZW5kSGVhZGVycy5hZGRMaXN0ZW5lcihmdW5jdGlvbihkZXRhaWxzKXtcbiAgICAgICAgLy9jaHJvbWUgdXNlcyBkZXRhaWxzLmluaXRpYXRvciwgYnV0IHNpbmNlIGNocm9tZSBkb2Vzbid0IHN1cHBvcnQgd2ViUmVxdWVzdCBhbnltb3JlLFxuICAgICAgICAvL29ubHkgbmVlZCB0byBjaGVjayB0aGUgdmFsdWUgc3VwcG9ydGVkIGJ5IGZpcmVmb3hcbiAgICAgICAgaWYgKGRldGFpbHMub3JpZ2luVXJsLm1hdGNoKC9eaHR0cHM/OlxcL1xcLyh3d3cucmV2ZWRkaXQuY29tfGxvY2FsaG9zdDpbMC05XSopKFxcLy4qKT8kLykpIHtcbiAgICAgICAgICAgIHZhciBuZXdDb29raWUgPSAnX29wdGlvbnM9eyUyMnByZWZfcXVhcmFudGluZV9vcHRpbiUyMjp0cnVlfTsnXG4gICAgICAgICAgICB2YXIgZ290Q29va2llID0gZmFsc2VcbiAgICAgICAgICAgIGZvciAodmFyIG4gaW4gZGV0YWlscy5yZXF1ZXN0SGVhZGVycykge1xuICAgICAgICAgICAgICAgIGNvbnN0IGhlYWRlck5hbWUgPSBkZXRhaWxzLnJlcXVlc3RIZWFkZXJzW25dLm5hbWUudG9Mb3dlckNhc2UoKVxuICAgICAgICAgICAgICAgIGlmIChoZWFkZXJOYW1lID09PSBcImNvb2tpZVwiKSB7XG4gICAgICAgICAgICAgICAgICAgIGRldGFpbHMucmVxdWVzdEhlYWRlcnNbbl0udmFsdWUgPSBkZXRhaWxzLnJlcXVlc3RIZWFkZXJzW25dLnZhbHVlLnJlcGxhY2UoLyA/cmVkZGl0X3Nlc3Npb25bXjtdKjsvLCcnKVxuICAgICAgICAgICAgICAgICAgICBpZiAoISBkZXRhaWxzLnJlcXVlc3RIZWFkZXJzW25dLnZhbHVlLm1hdGNoKC9wcmVmX3F1YXJhbnRpbmVfb3B0aW4vKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZGV0YWlscy5yZXF1ZXN0SGVhZGVyc1tuXS52YWx1ZSA9IGRldGFpbHMucmVxdWVzdEhlYWRlcnNbbl0udmFsdWUgKyBgOyAke25ld0Nvb2tpZX1gXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZ290Q29va2llID0gdHJ1ZVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICghIGdvdENvb2tpZSkge1xuICAgICAgICAgICAgICAgIGRldGFpbHMucmVxdWVzdEhlYWRlcnMucHVzaCh7bmFtZTpcIkNvb2tpZVwiLHZhbHVlOm5ld0Nvb2tpZX0pXG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHtyZXF1ZXN0SGVhZGVyczpkZXRhaWxzLnJlcXVlc3RIZWFkZXJzfVxuICAgIH0se1xuICAgICAgICB1cmxzOltcImh0dHBzOi8vb2F1dGgucmVkZGl0LmNvbS8qLmpzb24qXCIsIFwiaHR0cHM6Ly8qLnJlZGRpdC5jb20vYXBpL2luZm8qXCJdXG4gICAgfSwgb3B0X2V4dHJhSW5mb1NwZWMpXG59XG4vLyBFTkQgd2ViUmVxdWVzdCBBUEkgY29kZVxuXG5jaHJvbWUucnVudGltZS5vbk1lc3NhZ2UuYWRkTGlzdGVuZXIoXG4gICAgZnVuY3Rpb24ocmVxdWVzdCwgc2VuZGVyLCBzZW5kUmVzcG9uc2UpIHtcbiAgICAgICAgaWYgKHJlcXVlc3QuYWN0aW9uID09IFwib3Blbi1vcHRpb25zXCIpIHtcbiAgICAgICAgICAgIGdvVG9PcHRpb25zKClcbiAgICAgICAgICAgIHNlbmRSZXNwb25zZSh7cmVzcG9uc2U6IFwiZG9uZVwifSlcbiAgICAgICAgICAgIHJldHVybiB0cnVlXG4gICAgICAgIH0gZWxzZSBpZiAocmVxdWVzdC5hY3Rpb24gPT0gXCJ1cGRhdGUtYmFkZ2VcIikge1xuICAgICAgICAgICAgdXBkYXRlQmFkZ2VVbnNlZW5Db3VudCgpXG4gICAgICAgICAgICBzZW5kUmVzcG9uc2Uoe3Jlc3BvbnNlOiBcImRvbmVcIn0pXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZVxuICAgICAgICB9IGVsc2UgaWYgKHJlcXVlc3QuYWN0aW9uID09IFwiY3JlYXRlLW5vdGlmaWNhdGlvblwiKSB7XG4gICAgICAgICAgICBjcmVhdGVOb3RpZmljYXRpb24ocmVxdWVzdC5vcHRpb25zKVxuICAgICAgICAgICAgcmV0dXJuIHRydWVcbiAgICAgICAgfSBlbHNlIGlmIChyZXF1ZXN0LmFjdGlvbiA9PT0gXCJnZXQtY29va2llXCIpIHtcbiAgICAgICAgICAgIGdldENvb2tpZShyZXF1ZXN0Lm9wdGlvbnMpXG4gICAgICAgICAgICAudGhlbihjb29raWUgPT4ge1xuICAgICAgICAgICAgICAgIHNlbmRSZXNwb25zZSh7cmVzcG9uc2U6IFwiZG9uZVwiLCBjb29raWV9KVxuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIHJldHVybiB0cnVlXG4gICAgICAgIH0gZWxzZSBpZiAocmVxdWVzdC5hY3Rpb24gPT0gXCJnZXQtcmVkZGl0LWl0ZW1zLWJ5LWlkXCIpIHtcbiAgICAgICAgICAgIGdldEF1dGgoKVxuICAgICAgICAgICAgLnRoZW4oYXV0aCA9PiB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGxvb2t1cEl0ZW1zQnlJRChyZXF1ZXN0LmlkcywgYXV0aCwgcmVxdWVzdC5tb25pdG9yX3F1YXJhbnRpbmVkKVxuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIC50aGVuKGl0ZW1zID0+IHtcbiAgICAgICAgICAgICAgICAvLyBpZiByZXF1ZXN0IGZhaWxzLCBpdGVtcyBpcyBudWxsXG4gICAgICAgICAgICAgICAgc2VuZFJlc3BvbnNlKHtyZXNwb25zZTogXCJkb25lXCIsIGl0ZW1zfSlcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZVxuICAgICAgICB9XG59KVxuXG5jaHJvbWUucnVudGltZS5vbkluc3RhbGxlZC5hZGRMaXN0ZW5lcihmdW5jdGlvbihkZXRhaWxzKSB7XG4gICAgaWYgKGRldGFpbHMucmVhc29uID09ICdpbnN0YWxsJykge1xuICAgICAgICBpbml0U3RvcmFnZSgoKSA9PiB7XG4gICAgICAgICAgICBzZXRBbGFybShJTlRFUlZBTF9ERUZBVUxUKVxuICAgICAgICAgICAgc3Vic2NyaWJlVG9Mb2dnZWRJblVzZXJfb3JfcHJvbXB0Rm9yVXNlcigpXG4gICAgICAgICAgICB1cGRhdGVCYWRnZVVuc2VlbkNvdW50KClcbiAgICAgICAgfSlcbiAgICAgICAgdmFyIHVuaW5zdGFsbEdvb2dsZUZvcm1MaW5rID0gJ2h0dHBzOi8vZG9jcy5nb29nbGUuY29tL2Zvcm1zL2QvZS8xRkFJcFFMU2VqV0hKQWY4dGhmTWRUbm5FYzV4WlBsc2R4QV9kR1VrYm1uRHE4UEFCVk1rdkFSZy92aWV3Zm9ybSdcbiAgICAgICAgaWYgKGNocm9tZS5ydW50aW1lLnNldFVuaW5zdGFsbFVSTCkge1xuICAgICAgICAgICAgY2hyb21lLnJ1bnRpbWUuc2V0VW5pbnN0YWxsVVJMKHVuaW5zdGFsbEdvb2dsZUZvcm1MaW5rKVxuICAgICAgICB9XG4gICAgfSBlbHNlIGlmIChkZXRhaWxzLnJlYXNvbiA9PSAndXBkYXRlJykge1xuICAgICAgICB1cGRhdGVCYWRnZVVuc2VlbkNvdW50KClcbiAgICB9XG59KVxuXG5cblxuZnVuY3Rpb24gc3Vic2NyaWJlVG9Mb2dnZWRJblVzZXJfb3JfcHJvbXB0Rm9yVXNlcigpIHtcbiAgICBnZXRMb2dnZWRpblVzZXIoKVxuICAgIC50aGVuKCh1c2VyKSA9PiB7XG4gICAgICAgIGlmICh1c2VyKSB7XG4gICAgICAgICAgICBzdWJzY3JpYmVVc2VyKHVzZXIsICgpID0+IHtcbiAgICAgICAgICAgICAgICBjaHJvbWUudGFicy5jcmVhdGUoe3VybDogYGh0dHBzOi8vd3d3LnJldmVkZGl0LmNvbS91c2VyLyR7dXNlcn0/YWxsPXRydWVgfSlcbiAgICAgICAgICAgIH0pXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBicm93c2VyLnRhYnMuY3JlYXRlKHt1cmw6IGBodHRwczovL3d3dy5yZXZlZGRpdC5jb20vdXNlci9gfSlcbiAgICAgICAgICAgIC50aGVuKHRhYiA9PiB7XG4gICAgICAgICAgICAgICAgLy8gdHJ5IHRvIG1ha2UgcmVxdWVzdCB2aWEgY29udGVudCBwYWdlIGluc3RlYWQgKHdvcmtzIGZvciBmaXJlZm94KVxuICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBicm93c2VyLnRhYnMuc2VuZE1lc3NhZ2UodGFiLmlkLCB7YWN0aW9uOiAncXVlcnktdXNlcid9KVxuICAgICAgICAgICAgICAgIH0sIDIwMDApXG4gICAgICAgICAgICB9KVxuICAgICAgICB9XG4gICAgfSlcbn1cblxuY29uc3Qgbm90aWZpY2F0aW9uQ2xpY2tlZCA9ICh0aGluZykgPT4ge1xuICAgIGNvbnN0IGlzVXNlciA9IHRoaW5nID09PSAnb3RoZXInID8gZmFsc2UgOiB0cnVlXG4gICAgY2hyb21lLnN0b3JhZ2Uuc3luYy5nZXQobnVsbCwgKHN0b3JhZ2UpID0+IHtcbiAgICAgICAgY29uc3QgdW5zZWVuSURzID0gZ2V0VW5zZWVuSURzX3RoaW5nKHRoaW5nLCBpc1VzZXIsIHN0b3JhZ2UpXG4gICAgICAgIGxldCB1cmwgPSBudWxsXG4gICAgICAgIGlmIChpc1VzZXIgJiYgc3RvcmFnZS51c2VyX3N1YnNjcmlwdGlvbnNbdGhpbmddKSB7XG4gICAgICAgICAgICB1cmwgPSBgaHR0cHM6Ly93d3cucmV2ZWRkaXQuY29tL3VzZXIvJHt0aGluZ31gXG4gICAgICAgICAgICBpZiAodW5zZWVuSURzLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgIHVybCArPSBgP3Nob3c9JHt1bnNlZW5JRHMuam9pbignLCcpfSZyZW1vdmFsX3N0YXR1cz1hbGxgXG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAoISBpc1VzZXIpIHtcbiAgICAgICAgICAgIHVybCA9ICcvc3JjL290aGVyLmh0bWwnXG4gICAgICAgICAgICBpZiAodW5zZWVuSURzLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgIHVybCA9IGBodHRwczovL3d3dy5yZXZlZGRpdC5jb20vaW5mbz9pZD0ke3Vuc2VlbklEcy5qb2luKCcsJyl9JnJlbW92YWxfc3RhdHVzPWFsbGBcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAodXJsKSB7XG4gICAgICAgICAgICBtYXJrVGhpbmdBc1NlZW4oc3RvcmFnZSwgdGhpbmcsIGlzVXNlcilcbiAgICAgICAgICAgIGJyb3dzZXIuc3RvcmFnZS5zeW5jLnNldChzdG9yYWdlKVxuICAgICAgICAgICAgLnRoZW4ocmVzID0+IHtcbiAgICAgICAgICAgICAgICB1cGRhdGVCYWRnZVVuc2VlbkNvdW50KClcbiAgICAgICAgICAgICAgICBjcmVhdGVUYWIodXJsKVxuICAgICAgICAgICAgfSlcbiAgICAgICAgfVxuICAgIH0pXG59XG5cbmNocm9tZS5ub3RpZmljYXRpb25zLm9uQ2xpY2tlZC5hZGRMaXN0ZW5lcigodGhpbmcpID0+IHtcbiAgICBub3RpZmljYXRpb25DbGlja2VkKHRoaW5nKVxuICAgIGNocm9tZS5ub3RpZmljYXRpb25zLmNsZWFyKHRoaW5nKVxufSlcblxuLy8gb25seSBuZWVkIHRoaXMgd2hpbGUgdXNpbmcgcmVnaXN0cmF0aW9uLnNob3dOb3RpZmljYXRpb24gaW4gY29tbW9uLmpzXG5pZiAoX19CVUlMVF9GT1JfXyA9PT0gJ2Nocm9tZScpIHtcbiAgICBzZWxmLmFkZEV2ZW50TGlzdGVuZXIoJ25vdGlmaWNhdGlvbmNsaWNrJywgKGV2ZW50KSA9PiB7XG4gICAgICAgIG5vdGlmaWNhdGlvbkNsaWNrZWQoZXZlbnQubm90aWZpY2F0aW9uLmRhdGEpXG4gICAgICAgIGV2ZW50Lm5vdGlmaWNhdGlvbi5jbG9zZSgpXG4gICAgfSlcbn1cblxuXG5sZXQgbGFzdEFsYXJtID0gMDtcblxuaWYgKCEgY2hyb21lLmV4dGVuc2lvbi5pbkluY29nbml0b0NvbnRleHQpIHtcbiAgICAvLyAjIyMgQkVHSU4gV09SS0FST1VORCBmb3IgYnJva2VuIGFsYXJtc1xuICAgIC8vIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC9jaHJvbWl1bS9pc3N1ZXMvZGV0YWlsP2lkPTEzMTY1ODgjYzk5XG4gICAgKGFzeW5jIGZ1bmN0aW9uIGxvc3RFdmVudHNXYXRjaGRvZygpIHtcbiAgICAgIGxldCBxdWlldENvdW50ID0gMDtcbiAgICAgIHdoaWxlICh0cnVlKSB7XG4gICAgICAgIGF3YWl0IG5ldyBQcm9taXNlKHJlc29sdmUgPT4gc2V0VGltZW91dChyZXNvbHZlLCA2NTAwMCkpO1xuICAgICAgICBjb25zdCBub3cgPSBEYXRlLm5vdygpO1xuICAgICAgICBjb25zdCBhZ2UgPSBub3cgLSBsYXN0QWxhcm07XG4gICAgICAgIGNvbnNvbGUubG9nKGBsb3N0RXZlbnRzV2F0Y2hkb2c6IGxhc3QgYWxhcm0gJHthZ2UvMTAwMH1zIGFnb2ApO1xuICAgICAgICBpZiAoYWdlIDwgOTUwMDApIHtcbiAgICAgICAgICBxdWlldENvdW50ID0gMDsgIC8vIGFsYXJtIHN0aWxsIHdvcmtzLlxuICAgICAgICB9IGVsc2UgaWYgKCsrcXVpZXRDb3VudCA+PSAzKSB7XG4gICAgICAgICAgY29uc29sZS5lcnJvcihcImxvc3RFdmVudHNXYXRjaGRvZzogcmVsb2FkaW5nIVwiKTtcbiAgICAgICAgICByZXR1cm4gY2hyb21lLnJ1bnRpbWUucmVsb2FkKCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgc2V0QWxhcm0oSU5URVJWQUxfREVGQVVMVClcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pKCk7XG4gICAgLy8gIyMjIEVORCBXT1JLQVJPVU5EIGZvciBicm9rZW4gYWxhcm1zXG5cbiAgICBjaHJvbWUuYWxhcm1zLm9uQWxhcm0uYWRkTGlzdGVuZXIoZnVuY3Rpb24oYWxhcm0pIHtcbiAgICAgICAgaWYgKGFsYXJtLm5hbWUgPT0gQUxBUk1fTkFNRSkge1xuICAgICAgICAgICAgbGFzdEFsYXJtID0gRGF0ZS5ub3coKSAvLyBwYXJ0IG9mIFdPUktBUk9VTkQgZm9yIGJyb2tlbiBhbGFybXNcbiAgICAgICAgICAgIGNoZWNrRm9yQ2hhbmdlcygpXG4gICAgICAgIH1cbiAgICB9KVxufVxuIl0sInNvdXJjZVJvb3QiOiIifQ==